METHOD_0 ( ) { java . util . ArrayList < com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . IDENT_3 > list = new java . util . ArrayList < com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . IDENT_3 > ( ) ; java . util . IDENT_4 IDENT_5 = new java . util . METHOD_1 ( ) ; int IDENT_6 = INT_0 ; for ( int i = 0 ; i < IDENT_6 ; ++ i ) list . add ( new com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 ( IDENT_5 . METHOD_3 ( ) ) ) ; java . util . ArrayList < com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 > IDENT_7 = new java . util . ArrayList < com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 > ( ) ; for ( int i = 0 ; i < IDENT_6 ; ++ i ) IDENT_7 . add ( new com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 ( list . get ( i ) . val ) ) ; com . IDENT_0 . hadoop . IDENT_1 . util . IDENT_8 IDENT_9 = new com . IDENT_0 . hadoop . IDENT_1 . util . METHOD_4 ( ) ; IDENT_9 . METHOD_5 ( list , new com . IDENT_0 . hadoop . IDENT_1 . util . METHOD_4 . Operation < com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 > ( ) { @ com . IDENT_0 . hadoop . IDENT_1 . test . util . Override public void METHOD_6 ( com . IDENT_0 . hadoop . IDENT_1 . test . util . IDENT_2 . METHOD_2 IDENT_10 , int IDENT_11 ) { IDENT_10 . val += IDENT_11 ; } } ) ; IDENT_9 . close ( ) ; for ( int i = 0 ; i < IDENT_6 ; ++ i ) { int j = list . get ( i ) . val ; int k = ( IDENT_7 . get ( i ) . val ) + i ; "<AssertPlaceHolder>" ; } } close ( ) { IDENT_12 . close ( ) ; }
org . junit . Assert . assertEquals ( j , k ) 