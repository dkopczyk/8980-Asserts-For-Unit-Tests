METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new io . IDENT_0 . IDENT_1 . METHOD_1 ( io . IDENT_0 . resource . mock . models . IDENT_4 . class ) ; IDENT_3 . METHOD_2 ( new io . IDENT_0 . IDENT_1 . METHOD_3 ( java . util . Arrays . asList ( "name" ) , io . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 , new java . util . HashSet ( java . util . Arrays . asList ( STRING_0 , STRING_1 ) ) ) ) ; java . util . Map < java . lang . String , java . util . Set < java . lang . String > > params = new java . util . HashMap ( ) ; params . put ( STRING_2 , new java . util . HashSet ( java . util . Arrays . asList ( STRING_0 , STRING_1 ) ) ) ; io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_7 = IDENT_8 . METHOD_4 ( IDENT_9 , params ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( io . IDENT_0 . resource . IDENT_10 . IDENT_11 , java . util . Map ) { io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_12 = new io . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_13 . METHOD_5 ( ) ) ; METHOD_6 ( IDENT_12 ) ; java . util . List < io . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_15 > parameters = METHOD_7 ( IDENT_16 , IDENT_13 ) ; for ( io . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_15 parameter : parameters ) { io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_17 = IDENT_12 . METHOD_8 ( parameter . IDENT_13 ) ; if ( IDENT_17 == null ) { IDENT_17 = IDENT_12 . METHOD_9 ( parameter . IDENT_13 ) ; METHOD_6 ( IDENT_17 ) ; } switch ( parameter . IDENT_18 ) { case IDENT_19 : METHOD_10 ( IDENT_17 , parameter ) ; break ; case filter : METHOD_11 ( IDENT_17 , parameter ) ; break ; case IDENT_20 : METHOD_12 ( IDENT_17 , parameter ) ; break ; case fields : METHOD_13 ( IDENT_17 , parameter ) ; break ; case page : METHOD_14 ( IDENT_17 , parameter ) ; break ; default : throw new java . lang . IllegalStateException ( parameter . IDENT_18 . toString ( ) ) ; } } return IDENT_12 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_7 ) 