METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new io . IDENT_0 . IDENT_1 . METHOD_1 ( io . IDENT_0 . resource . mock . models . IDENT_4 . class ) ; IDENT_3 . METHOD_2 ( 1L ) ; IDENT_3 . METHOD_3 ( INT_0 ) ; java . util . Map < java . lang . String , java . util . Set < java . lang . String > > params = new java . util . HashMap ( ) ; add ( params , STRING_0 , "1" ) ; add ( params , STRING_1 , STRING_2 ) ; IDENT_5 . METHOD_4 ( INT_0 ) ; io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_6 = IDENT_5 . METHOD_5 ( IDENT_7 , params ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( io . IDENT_0 . resource . IDENT_8 . IDENT_9 , java . util . Map ) { io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_10 = new io . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_11 . METHOD_6 ( ) ) ; METHOD_7 ( IDENT_10 ) ; java . util . List < io . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 > parameters = METHOD_8 ( IDENT_14 , IDENT_11 ) ; for ( io . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 parameter : parameters ) { io . IDENT_0 . IDENT_1 . METHOD_1 IDENT_15 = IDENT_10 . METHOD_9 ( parameter . IDENT_11 ) ; if ( IDENT_15 == null ) { IDENT_15 = IDENT_10 . METHOD_10 ( parameter . IDENT_11 ) ; METHOD_7 ( IDENT_15 ) ; } switch ( parameter . IDENT_16 ) { case IDENT_17 : METHOD_11 ( IDENT_15 , parameter ) ; break ; case filter : METHOD_12 ( IDENT_15 , parameter ) ; break ; case IDENT_18 : METHOD_13 ( IDENT_15 , parameter ) ; break ; case fields : METHOD_14 ( IDENT_15 , parameter ) ; break ; case page : METHOD_15 ( IDENT_15 , parameter ) ; break ; default : throw new java . lang . IllegalStateException ( parameter . IDENT_16 . toString ( ) ) ; } } return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_6 ) 