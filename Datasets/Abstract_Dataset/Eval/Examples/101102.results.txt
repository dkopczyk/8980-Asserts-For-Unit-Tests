METHOD_0 ( ) { final java . io . File IDENT_0 = org . IDENT_1 . io . IDENT_2 . METHOD_1 ( ) ; java . lang . System . setProperty ( STRING_0 , IDENT_0 . getAbsolutePath ( ) ) ; org . IDENT_1 . io . impl . IDENT_3 . METHOD_2 ( IDENT_0 , STRING_1 ) ; org . IDENT_1 . java . nio . fs . jgit . IDENT_4 provider = ( ( org . IDENT_1 . java . nio . fs . jgit . IDENT_4 ) ( org . IDENT_1 . java . nio . file . api . IDENT_5 . METHOD_3 ( java . net . URI . create ( STRING_2 ) ) ) ) ; final java . util . concurrent . atomic . IDENT_6 IDENT_7 = new java . util . concurrent . atomic . METHOD_4 ( ) ; provider . METHOD_5 ( new org . eclipse . jgit . util . METHOD_6 ( ) { @ org . IDENT_1 . io . impl . Override public org . eclipse . jgit . util . IDENT_8 METHOD_7 ( org . eclipse . jgit . lib . IDENT_9 IDENT_10 , java . lang . String IDENT_11 , java . lang . String [ ] args ) throws org . eclipse . jgit . api . errors . IDENT_12 { if ( IDENT_11 . equals ( IDENT_13 . IDENT_14 ) ) { IDENT_7 . METHOD_8 ( ) ; return new org . eclipse . jgit . util . METHOD_9 ( 1 , METHOD_9 . Status . IDENT_15 ) ; } return new org . eclipse . jgit . util . METHOD_9 ( METHOD_9 . Status . IDENT_16 ) ; } } ) ; org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . METHOD_10 ( java . net . URI . create ( STRING_2 ) , new java . util . HashMap ( ) ) ; org . IDENT_1 . java . nio . file . Path init = org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . get ( java . net . URI . create ( STRING_3 ) ) ; org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . write ( init , STRING_4 ) ; org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . METHOD_11 ( init . METHOD_12 ( ) ) ; org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . write ( init , STRING_5 ) ; org . IDENT_1 . io . impl . IDENT_3 . IDENT_17 . METHOD_13 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return org . jboss . IDENT_18 . IDENT_19 . client . container . IDENT_20 . METHOD_14 ( ) . METHOD_15 ( org . IDENT_1 . client . IDENT_21 . IDENT_22 . class ) . getInstance ( ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_7 . get ( ) ) 