METHOD_0 ( ) { final java . util . List < ? > IDENT_0 = mock ( java . util . List . class ) ; doReturn ( operation ) . when ( IDENT_1 ) . METHOD_1 ( IDENT_2 ) ; doReturn ( IDENT_0 ) . when ( IDENT_1 ) . METHOD_2 ( IDENT_3 , IDENT_2 , operation ) ; final java . util . List < org . kie . server . controller . api . model . runtime . IDENT_4 > IDENT_5 = IDENT_1 . METHOD_3 ( IDENT_3 , IDENT_2 ) ; verify ( IDENT_1 ) . METHOD_2 ( IDENT_3 , IDENT_2 , operation ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . kie . server . controller . api . model . spec . IDENT_6 , org . kie . server . controller . api . model . spec . IDENT_7 , org . kie . server . controller . impl . IDENT_8 ) { java . util . List < org . kie . server . controller . api . model . runtime . IDENT_4 > IDENT_9 = new java . util . ArrayList < org . kie . server . controller . api . model . runtime . IDENT_4 > ( ) ; if ( ( ( ( IDENT_3 . METHOD_4 ( ) ) == null ) || ( IDENT_3 . METHOD_4 ( ) . isEmpty ( ) ) ) || ( IDENT_2 == null ) ) { return IDENT_9 ; } for ( org . kie . server . controller . api . model . runtime . IDENT_10 IDENT_11 : IDENT_3 . METHOD_4 ( ) ) { org . kie . server . controller . api . model . runtime . IDENT_4 container = new org . kie . server . controller . api . model . runtime . METHOD_5 ( ) ; container . METHOD_6 ( IDENT_2 . getId ( ) ) ; container . METHOD_7 ( IDENT_3 . getId ( ) ) ; container . METHOD_8 ( IDENT_11 . METHOD_9 ( ) ) ; container . METHOD_10 ( ( ( ( IDENT_11 . METHOD_11 ( ) ) + STRING_0 ) + ( IDENT_2 . getId ( ) ) ) ) ; container . METHOD_12 ( IDENT_2 . getStatus ( ) ) ; try { final org . kie . server . client . IDENT_12 client = METHOD_13 ( IDENT_11 . METHOD_11 ( ) ) ; operation . METHOD_14 ( client , container ) ; IDENT_9 . add ( container ) ; } catch ( java . lang . Exception e ) { org . kie . server . controller . impl . IDENT_13 . logger . debug ( STRING_1 , IDENT_11 ) ; } } return IDENT_9 ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_5 ) 