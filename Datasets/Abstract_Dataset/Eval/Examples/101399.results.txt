METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . String IDENT_2 = org . drools . eclipse . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( IDENT_0 ) . trim ( ) ; char [ ] c = IDENT_2 . METHOD_3 ( ) ; int start = 0 ; for ( int i = ( c . length ) - 1 ; i >= 0 ; i OP_0 ) { if ( ( ( ( ( ( ( ( ( ( ( ( ( java . lang . IDENT_6 . METHOD_4 ( c [ i ] ) ) || ( ( c [ i ] ) == STRING_2 ) ) || ( ( c [ i ] ) == STRING_3 ) ) || ( ( c [ i ] ) == STRING_4 ) ) || ( ( c [ i ] ) == STRING_5 ) ) || ( ( c [ i ] ) == STRING_6 ) ) || ( ( c [ i ] ) == STRING_7 ) ) || ( ( c [ i ] ) == STRING_8 ) ) || ( ( c [ i ] ) == STRING_9 ) ) || ( ( c [ i ] ) == STRING_10 ) ) || ( ( c [ i ] ) == STRING_11 ) ) || ( ( c [ i ] ) == STRING_12 ) ) || ( ( c [ i ] ) == STRING_13 ) ) { start = i + 1 ; break ; } } IDENT_2 = IDENT_2 . substring ( start ) ; return IDENT_2 ; }
org . junit . Assert . assertEquals ( IDENT_1 , org . drools . eclipse . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ) 