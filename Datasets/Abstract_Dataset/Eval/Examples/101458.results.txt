METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 9 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 0 ) + STRING_0 ) + STRING_3 ) + STRING_0 3 ) + STRING_2 ) + STRING_0 0 ) + STRING_4 ) + STRING_2 2 ) + STRING_0 4 ) + STRING_5 ) + STRING_2 3 ) + STRING_0 3 ) + STRING_0 6 ) + STRING_2 2 ) + STRING_6 ) + STRING_0 4 ) + STRING_0 5 ) + STRING_0 3 ) + STRING_7 ) + STRING_2 2 ) + STRING_2 1 ) + STRING_0 4 ) + STRING_0 2 ) + STRING_0 3 ) + STRING_8 ) + STRING_2 2 ) + STRING_0 8 ) + STRING_0 4 ) + STRING_9 ) + STRING_0 3 ) + STRING_0 1 ) ; org . kie . api . IDENT_1 IDENT_2 = new org . kie . internal . utils . METHOD_1 ( org . kie . internal . builder . conf . IDENT_3 . IDENT_4 ) . METHOD_2 ( IDENT_0 , IDENT_5 . IDENT_6 ) . build ( ) ; org . drools . core . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_3 ( IDENT_10 , IDENT_2 ) ; java . util . ArrayList list = new java . util . ArrayList ( ) ; org . kie . api . runtime . IDENT_11 IDENT_12 = IDENT_2 . METHOD_4 ( ) ; IDENT_12 . METHOD_5 ( STRING_0 7 , list ) ; IDENT_12 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } asList ( int [ ] ) { java . util . List < java . lang . Integer > list = new java . util . ArrayList < java . lang . Integer > ( IDENT_13 . length ) ; for ( int i : IDENT_13 ) { list . add ( i ) ; } return list ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( 1 ) , list ) 