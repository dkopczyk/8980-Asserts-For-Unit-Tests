METHOD_0 ( ) { final org . kie . api . runtime . IDENT_0 IDENT_1 = METHOD_1 ( ) ; java . util . List < java . lang . String > results = new java . util . ArrayList ( ) ; IDENT_1 . METHOD_2 ( STRING_0 , results ) ; org . drools . compiler . IDENT_2 . IDENT_3 . IDENT_4 [ ] IDENT_5 = new org . drools . compiler . IDENT_2 . IDENT_3 . IDENT_4 [ 9 ] ; java . util . concurrent . IDENT_6 IDENT_7 = new java . util . concurrent . METHOD_3 ( 9 , new org . drools . compiler . IDENT_2 . IDENT_3 . METHOD_4 ( IDENT_5 ) ) ; for ( int i = 0 ; i < 9 ; i ++ ) { IDENT_5 [ i ] = new org . drools . compiler . IDENT_2 . IDENT_3 . METHOD_5 ( IDENT_1 , ( i + 1 ) , IDENT_7 ) ; } new java . lang . Thread ( IDENT_1 :: IDENT_8 ) . start ( ) ; try { for ( int IDENT_9 = 0 ; IDENT_9 < INT_0 ; IDENT_9 ++ ) { boolean IDENT_10 = true ; final java . util . concurrent . IDENT_11 executor = java . util . concurrent . IDENT_12 . METHOD_6 ( 9 , ( r ) -> { java . lang . Thread t = new java . lang . Thread ( r ) ; t . METHOD_7 ( true ) ; return t ; } ) ; try { java . util . concurrent . IDENT_13 < java . lang . Boolean > IDENT_14 = new java . util . concurrent . METHOD_8 ( executor ) ; for ( int i = 0 ; i < 9 ; i ++ ) { IDENT_14 . METHOD_9 ( IDENT_5 [ i ] . METHOD_10 ( ( IDENT_9 OP_0 10 ) ) ) ; } for ( int i = 0 ; i < 9 ; i ++ ) { try { IDENT_10 = ( IDENT_14 . METHOD_11 ( ) . get ( ) ) && IDENT_10 ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } "<AssertPlaceHolder>" ; } finally { executor . METHOD_12 ( ) ; } } } finally { IDENT_1 . METHOD_13 ( ) ; IDENT_1 . METHOD_14 ( ) ; } } get ( ) { return t ; }
org . junit . Assert . assertTrue ( IDENT_10 ) 