METHOD_0 ( ) { double IDENT_0 = FLOAT_0 ; for ( int IDENT_1 = 0 ; IDENT_1 < 5 ; ++ IDENT_1 ) { for ( double x = FLOAT_1 ; x < FLOAT_2 ; x += FLOAT_3 ) { org . apache . commons . math4 . analysis . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 ( 1 , IDENT_1 , 0 , x ) ; org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 IDENT_5 = IDENT_4 . METHOD_2 ( ) ; org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 IDENT_6 = IDENT_4 . exp ( ) . METHOD_3 ( IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) ) ; org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 IDENT_7 = IDENT_5 . METHOD_3 ( IDENT_6 ) ; for ( int n = 0 ; n <= IDENT_1 ; ++ n ) { "<AssertPlaceHolder>" ; } } } } METHOD_6 ( int [ ] ) { return data [ compiler . METHOD_7 ( IDENT_8 ) ] ; }
org . junit . Assert . assertEquals ( 0 , IDENT_7 . METHOD_6 ( n ) , IDENT_0 ) 