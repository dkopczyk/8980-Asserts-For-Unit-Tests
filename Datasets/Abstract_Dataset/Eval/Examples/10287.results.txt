METHOD_0 ( ) { final double IDENT_0 = 0.0 ; final double IDENT_1 = FLOAT_0 ; final double IDENT_2 = FLOAT_1 ; final double IDENT_3 = FLOAT_2 ; final double IDENT_4 = 1.0 ; final double IDENT_5 = 1.0 / FLOAT_3 ; final double IDENT_6 = 2.0 / FLOAT_3 ; final org . apache . commons . math4 . IDENT_7 . IDENT_8 IDENT_7 ; IDENT_7 = new org . apache . commons . math4 . IDENT_7 . METHOD_1 ( ) { MOD_0 MOD_1 final long IDENT_9 = 1L ; @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_2 ( final double x ) { if ( ( x < IDENT_0 ) || ( x > IDENT_4 ) ) { throw new org . apache . commons . math4 . exception . METHOD_3 ( x , IDENT_0 , IDENT_4 ) ; } if ( x <= IDENT_1 ) { return ( IDENT_5 * ( x - IDENT_0 ) ) / ( IDENT_1 - IDENT_0 ) ; } else if ( x <= IDENT_2 ) { return IDENT_5 ; } else if ( x <= IDENT_3 ) { return IDENT_6 ; } else { return ( ( ( 1.0 - IDENT_6 ) * ( x - IDENT_3 ) ) / ( IDENT_4 - IDENT_3 ) ) + IDENT_6 ; } } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_4 ( final double x ) { if ( ( x < IDENT_0 ) || ( x > IDENT_4 ) ) { throw new org . apache . commons . math4 . exception . METHOD_3 ( x , IDENT_0 , IDENT_4 ) ; } if ( x <= IDENT_1 ) { return IDENT_5 / ( IDENT_1 - IDENT_0 ) ; } else if ( x <= IDENT_2 ) { return 0.0 ; } else if ( x <= IDENT_3 ) { return 0.0 ; } else { return ( 1.0 - IDENT_6 ) / ( IDENT_4 - IDENT_3 ) ; } } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_5 ( ) { final org . apache . commons . math4 . analysis . IDENT_10 f = new org . apache . commons . math4 . analysis . METHOD_6 ( ) { @ org . apache . commons . math4 . IDENT_7 . Override public double value ( final double x ) { return x * ( METHOD_4 ( x ) ) ; } } ; final org . apache . commons . math4 . analysis . integration . IDENT_11 IDENT_12 = new org . apache . commons . math4 . analysis . integration . METHOD_7 ( ) ; return IDENT_12 . METHOD_8 ( Integer . MAX_VALUE , f , IDENT_0 , IDENT_4 ) ; } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_9 ( ) { final double IDENT_13 = METHOD_5 ( ) ; final org . apache . commons . math4 . analysis . METHOD_6 f = new org . apache . commons . math4 . analysis . METHOD_6 ( ) { @ org . apache . commons . math4 . IDENT_7 . Override public double value ( final double x ) { return ( x * x ) * ( METHOD_4 ( x ) ) ; } } ; final org . apache . commons . math4 . analysis . integration . IDENT_11 IDENT_12 = new org . apache . commons . math4 . analysis . integration . METHOD_7 ( ) ; final double IDENT_14 = IDENT_12 . METHOD_8 ( Integer . MAX_VALUE , f , IDENT_0 , IDENT_4 ) ; return IDENT_14 - ( IDENT_13 * IDENT_13 ) ; } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_10 ( ) { return IDENT_0 ; } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_11 ( ) { return IDENT_4 ; } @ org . apache . commons . math4 . IDENT_7 . Override public boolean METHOD_12 ( ) { return false ; } @ org . apache . commons . math4 . IDENT_7 . Override public double METHOD_13 ( final double x ) { throw new java . lang . METHOD_14 ( ) ; } } ; final double expected = IDENT_2 ; final double actual = IDENT_7 . METHOD_15 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_16 ( ) { return org . apache . commons . math4 . IDENT_7 . METHOD_1 . IDENT_15 ; }
org . junit . Assert . assertEquals ( "" , expected , actual , IDENT_7 . METHOD_16 ( ) ) 