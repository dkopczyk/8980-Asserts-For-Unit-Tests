METHOD_0 ( ) { org . apache . commons . math4 . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . commons . math4 . IDENT_0 . METHOD_1 ( ) ; for ( int i = 0 ; i < 20 ; i ++ ) { org . apache . commons . math4 . IDENT_0 . IDENT_3 original = new org . apache . commons . math4 . IDENT_0 . METHOD_2 ( org . apache . commons . math4 . IDENT_0 . IDENT_4 . METHOD_3 ( 10 ) ) ; org . apache . commons . math4 . IDENT_0 . METHOD_2 IDENT_5 = ( ( org . apache . commons . math4 . IDENT_0 . METHOD_2 ) ( IDENT_2 . METHOD_4 ( original ) ) ) ; int IDENT_6 = 0 ; for ( int j = 0 ; j < ( original . METHOD_5 ( ) . size ( ) ) ; j ++ ) { if ( ( original . METHOD_5 ( ) . get ( j ) ) != ( IDENT_5 . METHOD_5 ( ) . get ( j ) ) ) { IDENT_6 ++ ; } } "<AssertPlaceHolder>" ; } } get ( int ) { final int hash = org . apache . commons . math4 . util . IDENT_7 . METHOD_6 ( key ) ; int index = hash & ( IDENT_8 ) ; if ( containsKey ( key , index ) ) { return values [ index ] ; } if ( ( IDENT_9 [ index ] ) == ( org . apache . commons . math4 . util . IDENT_7 . IDENT_10 ) ) { return IDENT_11 ; } int j = index ; for ( int IDENT_12 = org . apache . commons . math4 . util . IDENT_7 . METHOD_7 ( hash ) ; ( IDENT_9 [ index ] ) != ( org . apache . commons . math4 . util . IDENT_7 . IDENT_10 ) ; METHOD_7 OP_0 org . apache . commons . math4 . util . IDENT_7 . IDENT_13 ) { j = org . apache . commons . math4 . util . IDENT_7 . METHOD_8 ( METHOD_7 , j ) ; index = j & ( IDENT_8 ) ; if ( containsKey ( key , index ) ) { return values [ index ] ; } } return IDENT_11 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_6 ) 