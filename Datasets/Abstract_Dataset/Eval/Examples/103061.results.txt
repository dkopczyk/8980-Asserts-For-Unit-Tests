METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final java . lang . String IDENT_2 = STRING_2 ; final org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 IDENT_6 = mock ( org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 . class ) ; final org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 IDENT_7 = mock ( org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 . class ) ; final org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 IDENT_8 = mock ( org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . common . IDENT_5 . class ) ; final org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 IDENT_11 = mock ( org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 . class ) ; final org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 IDENT_12 = mock ( org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 . class ) ; final java . util . List < org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 > IDENT_13 = new java . util . ArrayList ( asList ( IDENT_11 , IDENT_12 ) ) ; when ( IDENT_6 . METHOD_1 ( ) ) . thenReturn ( IDENT_0 ) ; when ( IDENT_7 . METHOD_1 ( ) ) . thenReturn ( IDENT_1 ) ; when ( IDENT_8 . METHOD_1 ( ) ) . thenReturn ( IDENT_2 ) ; when ( IDENT_11 . METHOD_2 ( ) ) . thenReturn ( IDENT_6 ) ; when ( IDENT_12 . METHOD_2 ( ) ) . thenReturn ( IDENT_7 ) ; when ( IDENT_14 . METHOD_3 ( ) ) . thenReturn ( IDENT_13 ) ; final java . util . Optional < org . kie . workbench . common . IDENT_3 . client . IDENT_4 . types . IDENT_9 . IDENT_10 > item = IDENT_14 . METHOD_4 ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { return METHOD_5 ; }
org . junit . Assert . assertFalse ( item . METHOD_5 ( ) ) 