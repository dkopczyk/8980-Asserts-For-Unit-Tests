METHOD_0 ( ) { org . apache . commons . math4 . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . commons . math4 . IDENT_0 . METHOD_1 ( ) ; int l = 10 ; for ( int i = 0 ; i < 20 ; i ++ ) { org . apache . commons . math4 . IDENT_0 . IDENT_3 IDENT_4 = new org . apache . commons . math4 . IDENT_0 . METHOD_2 ( org . apache . commons . math4 . IDENT_0 . IDENT_5 . METHOD_3 ( l ) ) ; org . apache . commons . math4 . IDENT_0 . IDENT_6 IDENT_7 = IDENT_2 . METHOD_4 ( IDENT_4 ) ; org . apache . commons . math4 . IDENT_0 . METHOD_2 IDENT_8 = ( ( org . apache . commons . math4 . IDENT_0 . METHOD_2 ) ( IDENT_7 ) ) ; int IDENT_9 = 0 ; for ( int j = 0 ; j < ( IDENT_4 . METHOD_5 ( ) ) ; j ++ ) { if ( ( IDENT_4 . METHOD_6 ( ) . get ( j ) ) != ( IDENT_8 . METHOD_6 ( ) . get ( j ) ) ) { IDENT_9 ++ ; } } "<AssertPlaceHolder>" ; } } get ( int ) { final int hash = org . apache . commons . math4 . util . IDENT_10 . METHOD_7 ( key ) ; int index = hash & ( IDENT_11 ) ; if ( containsKey ( key , index ) ) { return values [ index ] ; } if ( ( IDENT_12 [ index ] ) == ( org . apache . commons . math4 . util . IDENT_10 . IDENT_13 ) ) { return IDENT_14 ; } int j = index ; for ( int IDENT_15 = org . apache . commons . math4 . util . IDENT_10 . METHOD_8 ( hash ) ; ( IDENT_12 [ index ] ) != ( org . apache . commons . math4 . util . IDENT_10 . IDENT_13 ) ; METHOD_8 OP_0 org . apache . commons . math4 . util . IDENT_10 . IDENT_16 ) { j = org . apache . commons . math4 . util . IDENT_10 . METHOD_9 ( METHOD_8 , j ) ; index = j & ( IDENT_11 ) ; if ( containsKey ( key , index ) ) { return values [ index ] ; } } return IDENT_14 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_9 ) 