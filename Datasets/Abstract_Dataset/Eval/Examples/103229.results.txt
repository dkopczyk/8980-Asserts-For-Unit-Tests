METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_3 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final java . lang . String IDENT_4 = STRING_0 ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_5 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_6 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_7 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_8 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; doReturn ( asList ( IDENT_5 , IDENT_6 ) ) . when ( handler ) . METHOD_1 ( IDENT_3 , IDENT_4 ) ; doReturn ( asList ( IDENT_7 , IDENT_8 ) ) . when ( handler ) . METHOD_2 ( IDENT_3 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_9 = asList ( IDENT_5 , IDENT_6 , IDENT_7 , IDENT_8 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_10 = handler . METHOD_3 ( IDENT_3 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 , java . lang . String ) { final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_11 = new java . util . ArrayList ( ) ; IDENT_11 . addAll ( METHOD_1 ( IDENT_3 , IDENT_4 ) ) ; IDENT_11 . addAll ( METHOD_2 ( IDENT_3 ) ) ; return IDENT_11 ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_10 ) 