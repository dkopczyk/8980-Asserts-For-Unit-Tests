METHOD_0 ( ) { final java . lang . String type = STRING_0 ; final java . lang . String IDENT_0 = STRING_1 ; final org . kie . workbench . common . IDENT_1 . api . IDENT_2 . IDENT_3 . IDENT_4 parent = mock ( org . kie . workbench . common . IDENT_1 . api . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; final java . util . Optional < org . kie . workbench . common . IDENT_1 . api . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = java . util . Optional . of ( mock ( org . kie . workbench . common . IDENT_1 . api . IDENT_2 . IDENT_3 . IDENT_4 . class ) ) ; final org . kie . workbench . common . IDENT_1 . api . property . IDENT_1 . IDENT_6 IDENT_7 = mock ( org . kie . workbench . common . IDENT_1 . api . property . IDENT_1 . IDENT_6 . class ) ; when ( IDENT_7 . METHOD_1 ( ) ) . thenReturn ( type ) ; when ( parent . METHOD_2 ( ) ) . thenReturn ( IDENT_7 ) ; when ( IDENT_8 . get ( IDENT_0 ) ) . thenReturn ( parent ) ; when ( IDENT_9 . METHOD_3 ( type ) ) . thenReturn ( IDENT_5 ) ; final java . util . Optional < org . kie . workbench . common . IDENT_1 . api . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_10 = handler . METHOD_4 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . kie . workbench . common . IDENT_1 . client . IDENT_11 . types . common . IDENT_12 ) { final java . util . Optional < org . kie . workbench . common . IDENT_1 . client . IDENT_11 . types . common . IDENT_12 > IDENT_13 = java . util . Optional . METHOD_5 ( parent ( reference ) ) ; if ( IDENT_13 . METHOD_6 ( ) ) { return METHOD_7 ( IDENT_13 . get ( ) ) ; } return java . util . Optional . empty ( ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_10 ) 