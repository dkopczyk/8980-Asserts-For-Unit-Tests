METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_3 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final java . lang . String IDENT_4 = STRING_0 ; when ( IDENT_3 . METHOD_1 ( ) ) . thenReturn ( IDENT_4 ) ; when ( IDENT_5 . get ( IDENT_4 ) ) . thenReturn ( null ) ; final java . util . Optional < org . kie . workbench . common . IDENT_0 . api . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_9 = java . util . Optional . empty ( ) ; final java . util . Optional < org . kie . workbench . common . IDENT_0 . api . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_10 = handler . METHOD_2 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 ) { final java . util . Optional < org . kie . workbench . common . IDENT_0 . api . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_11 = java . util . Optional . METHOD_3 ( IDENT_5 . get ( IDENT_3 . METHOD_1 ( ) ) ) ; if ( IDENT_11 . METHOD_4 ( ) ) { final org . kie . workbench . common . IDENT_0 . api . IDENT_6 . IDENT_7 . IDENT_8 parent = IDENT_11 . get ( ) ; if ( ( parent . METHOD_5 ( ) ) == null ) { return java . util . Optional . of ( parent ) ; } else { for ( final org . kie . workbench . common . IDENT_0 . api . IDENT_6 . IDENT_7 . IDENT_8 IDENT_12 : METHOD_6 ( ) ) { if ( java . util . IDENT_13 . equals ( IDENT_12 . getName ( ) . getValue ( ) , parent . METHOD_5 ( ) . METHOD_7 ( ) ) ) { return java . util . Optional . of ( IDENT_12 ) ; } } } } return java . util . Optional . empty ( ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_10 ) 