METHOD_0 ( ) { org . kie . workbench . common . IDENT_0 . core . graph . Node parent = new org . kie . workbench . common . IDENT_0 . core . graph . impl . METHOD_1 ( STRING_0 ) ; org . kie . workbench . common . IDENT_0 . core . graph . Node IDENT_1 = new org . kie . workbench . common . IDENT_0 . core . graph . impl . METHOD_1 ( STRING_1 ) ; org . kie . workbench . common . IDENT_0 . client . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( parent , IDENT_1 ) ; org . kie . workbench . common . IDENT_0 . core . graph . Node IDENT_6 = new org . kie . workbench . common . IDENT_0 . core . graph . impl . METHOD_1 ( STRING_2 ) ; org . kie . workbench . common . IDENT_0 . core . graph . Node [ ] IDENT_7 = new org . kie . workbench . common . IDENT_0 . core . graph . Node [ ] { IDENT_1 , IDENT_6 } ; boolean IDENT_8 = org . kie . workbench . common . IDENT_0 . client . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . METHOD_3 ( parent , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . kie . workbench . common . IDENT_0 . core . graph . Element , org . kie . workbench . common . IDENT_0 . core . graph . Node [ ] ) { return java . util . stream . IDENT_10 . of ( IDENT_7 ) . map ( IDENT_11 :: IDENT_12 ) . METHOD_4 ( ( IDENT_13 ) -> ! ( java . util . IDENT_14 . equals ( parent , IDENT_13 ) ) ) ; }
org . junit . Assert . assertFalse ( IDENT_8 ) 