METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_3 IDENT_4 = new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . METHOD_1 ( 0 ) ; IDENT_4 . METHOD_2 ( STRING_0 ) ; IDENT_4 . METHOD_2 ( STRING_1 ) ; final org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . METHOD_1 IDENT_5 = new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . METHOD_1 ( 1 ) ; IDENT_5 . METHOD_2 ( STRING_2 ) ; IDENT_5 . METHOD_2 ( STRING_3 ) ; IDENT_5 . METHOD_2 ( STRING_4 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_6 > IDENT_7 = new java . util . ArrayList ( ) ; IDENT_7 . add ( new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . METHOD_3 ( STRING_0 , STRING_2 ) ) ; IDENT_7 . add ( new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . METHOD_3 ( STRING_3 , STRING_0 ) ) ; IDENT_7 . add ( new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . METHOD_3 ( STRING_0 , STRING_4 ) ) ; IDENT_7 . add ( new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . METHOD_3 ( STRING_2 , STRING_1 ) ) ; final org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_8 . IDENT_9 cc = new org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_8 . METHOD_4 ( ) ; final int result = cc . METHOD_5 ( IDENT_7 , IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . List , org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_10 , org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_10 ) { final java . lang . Object [ ] IDENT_11 = METHOD_6 ( IDENT_7 , IDENT_12 , IDENT_13 ) ; int IDENT_14 = 1 ; while ( IDENT_14 < ( IDENT_13 . METHOD_7 ( ) . size ( ) ) ) { IDENT_14 OP_0 1 ; } final int IDENT_15 = ( 2 * IDENT_14 ) - 1 ; IDENT_14 OP_1 1 ; final int [ ] tree = new int [ IDENT_15 ] ; int IDENT_16 = 0 ; for ( final java . lang . Object entry : IDENT_11 ) { int index = ( ( java . lang . Integer ) ( entry ) ) + IDENT_14 ; if ( index < 0 ) { continue ; } tree [ index ] += org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_8 . METHOD_4 . IDENT_17 ; int IDENT_18 = 0 ; while ( index > 0 ) { if ( ( index OP_2 2 ) != 0 ) { IDENT_18 += tree [ ( index + 1 ) ] ; } index = ( index - 1 ) > > 1 ; tree [ index ] += org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_8 . METHOD_4 . IDENT_17 ; } IDENT_16 += ( org . kie . workbench . common . IDENT_0 . core . graph . IDENT_1 . layout . IDENT_2 . IDENT_8 . METHOD_4 . IDENT_17 ) * IDENT_18 ; } return IDENT_16 ; }
org . junit . Assert . assertEquals ( 2 , result ) 