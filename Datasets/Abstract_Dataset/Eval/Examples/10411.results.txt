METHOD_0 ( ) { final double [ ] data = new double [ ] { - FLOAT_0 , FLOAT_1 , 5 } ; final org . apache . commons . math4 . linear . IDENT_0 m = new org . apache . commons . math4 . linear . METHOD_1 ( data ) ; for ( int i = 0 ; i < ( m . METHOD_2 ( ) ) ; i ++ ) { m . METHOD_3 ( i , i , i ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( int , int ) { long val = ( i + j ) + 1 ; long IDENT_1 = org . apache . commons . IDENT_2 . IDENT_3 . IDENT_4 . value ( ( ( n ) + i ) , ( ( ( n ) - j ) - 1 ) ) ; val = org . apache . commons . IDENT_2 . core . IDENT_5 . METHOD_5 ( val , IDENT_1 ) ; IDENT_1 = org . apache . commons . IDENT_2 . IDENT_3 . IDENT_4 . value ( ( ( n ) + j ) , ( ( ( n ) - i ) - 1 ) ) ; val = org . apache . commons . IDENT_2 . core . IDENT_5 . METHOD_5 ( val , IDENT_1 ) ; IDENT_1 = org . apache . commons . IDENT_2 . IDENT_3 . IDENT_4 . value ( ( i + j ) , i ) ; val = org . apache . commons . IDENT_2 . core . IDENT_5 . METHOD_5 ( val , IDENT_1 ) ; val = org . apache . commons . IDENT_2 . core . IDENT_5 . METHOD_5 ( val , IDENT_1 ) ; return ( ( i + j ) & 1 ) == 0 ? val : - val ; }
org . junit . Assert . assertEquals ( ( ( data [ i ] ) * i ) , m . METHOD_4 ( i , i ) , 0.0 ) 