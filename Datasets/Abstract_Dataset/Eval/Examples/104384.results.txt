METHOD_0 ( ) { boolean IDENT_0 = false ; try { final java . lang . String IDENT_1 = STRING_0 ; final byte [ ] data = STRING_1 . getBytes ( ) ; final com . IDENT_2 . IDENT_3 . Message message = new com . IDENT_2 . IDENT_3 . Message ( IDENT_1 , data ) ; final java . lang . String url = STRING_2 ; final com . IDENT_2 . IDENT_3 . cluster . IDENT_4 IDENT_5 = new com . IDENT_2 . IDENT_3 . cluster . METHOD_1 ( STRING_3 ) ; org . easymock . IDENT_6 . EasyMock . expect ( this . IDENT_7 . METHOD_2 ( IDENT_1 , message , this . IDENT_8 ) ) . andReturn ( IDENT_5 ) ; org . easymock . IDENT_6 . EasyMock . expect ( this . IDENT_7 . METHOD_3 ( IDENT_1 , IDENT_5 ) ) . andReturn ( url ) ; com . IDENT_2 . IDENT_9 . core . util . IDENT_10 . METHOD_4 ( ) ; final int IDENT_11 = com . IDENT_2 . IDENT_3 . utils . IDENT_12 . METHOD_5 ( null ) ; org . easymock . IDENT_6 . EasyMock . expect ( this . IDENT_13 . METHOD_6 ( url , new com . IDENT_2 . IDENT_3 . network . METHOD_7 ( IDENT_1 , IDENT_5 . METHOD_8 ( ) , data , IDENT_11 , com . IDENT_2 . IDENT_3 . utils . IDENT_14 . METHOD_9 ( data ) , null , Integer . IDENT_15 ) , INT_0 , TimeUnit . IDENT_16 ) ) . METHOD_10 ( new java . lang . METHOD_11 ( ) ) ; this . IDENT_17 . replay ( ) ; this . IDENT_18 . METHOD_12 ( message ) ; } catch ( final java . lang . METHOD_11 e ) { IDENT_0 = true ; } this . IDENT_17 . verify ( ) ; "<AssertPlaceHolder>" ; } verify ( ) { if ( this . METHOD_13 ( ) . isEmpty ( ) ) { throw new com . IDENT_2 . IDENT_3 . server . exception . METHOD_14 ( STRING_4 ) ; } com . IDENT_2 . IDENT_3 . utils . IDENT_19 . IDENT_20 IDENT_21 = this . IDENT_22 ; if ( IDENT_21 == null ) { throw new java . lang . IllegalStateException ( STRING_5 ) ; } if ( org . apache . commons . lang . StringUtils . METHOD_15 ( this . IDENT_22 . IDENT_23 ) ) { throw new java . lang . IllegalArgumentException ( STRING_6 ) ; } }
org . junit . Assert . assertTrue ( IDENT_0 ) 