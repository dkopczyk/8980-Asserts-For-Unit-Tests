METHOD_0 ( ) { java . util . Map < java . lang . Long , java . lang . Long > IDENT_0 = new java . util . HashMap < java . lang . Long , java . lang . Long > ( ) ; IDENT_0 . put ( 1L , 1L ) ; IDENT_0 . put ( INT_0 , INT_1 ) ; java . util . Map < java . lang . Long , java . lang . Long > IDENT_1 = new java . util . HashMap < java . lang . Long , java . lang . Long > ( ) ; IDENT_1 . put ( INT_0 , INT_2 ) ; IDENT_1 . put ( INT_2 , INT_3 ) ; java . util . Map < java . lang . Long , java . lang . Long > IDENT_2 = new org . IDENT_3 . IDENT_4 . collection . IDENT_5 < java . lang . Long , java . lang . Long > ( IDENT_0 , IDENT_1 ) ; java . util . Map . Entry < java . lang . Long , java . lang . Long > IDENT_6 = new java . util . IDENT_7 . IDENT_8 < java . lang . Long , java . lang . Long > ( 1L , 1L ) ; java . util . Map . Entry < java . lang . Long , java . lang . Long > IDENT_9 = new java . util . IDENT_7 . IDENT_8 < java . lang . Long , java . lang . Long > ( INT_0 , INT_1 ) ; java . util . Map . Entry < java . lang . Long , java . lang . Long > IDENT_10 = new java . util . IDENT_7 . IDENT_8 < java . lang . Long , java . lang . Long > ( INT_2 , INT_3 ) ; "<AssertPlaceHolder>" ; } entrySet ( ) { IDENT_11 . Builder < org . IDENT_3 . IDENT_4 . collection . Entry < IDENT_12 , IDENT_13 > > IDENT_14 = new IDENT_11 . Builder < org . IDENT_3 . IDENT_4 . collection . Entry < IDENT_12 , IDENT_13 > > ( ) ; for ( IDENT_12 key : METHOD_1 ( ) ) { IDENT_14 . add ( new org . IDENT_3 . IDENT_4 . collection . IDENT_8 < IDENT_12 , IDENT_13 > ( key , get ( key ) ) ) ; } return IDENT_14 . build ( ) ; }
org . junit . Assert . assertEquals ( org . IDENT_3 . IDENT_4 . collection . IDENT_11 . of ( IDENT_6 , IDENT_9 , IDENT_10 ) , IDENT_2 . entrySet ( ) ) 