METHOD_0 ( ) { final double IDENT_0 = FLOAT_0 ; for ( int i = 0 ; i < ( org . apache . commons . math4 . IDENT_1 . IDENT_2 . IDENT_3 . length ) ; i ++ ) { final double [ ] data = org . apache . commons . math4 . IDENT_1 . IDENT_2 . IDENT_3 [ i ] ; final double order = data [ 0 ] ; final double x = data [ 1 ] ; final double expected = data [ 2 ] ; final double actual = org . apache . commons . math4 . IDENT_1 . IDENT_4 . value ( order , x ) ; java . lang . String msg = ( ( "" + order ) + STRING_0 ) + x ; "<AssertPlaceHolder>" ; } } value ( double , double ) { final int n = ( ( int ) ( order ) ) ; final double IDENT_5 = order - n ; final int IDENT_6 = n + 1 ; final org . apache . commons . math4 . IDENT_1 . IDENT_4 . IDENT_7 res = org . apache . commons . math4 . IDENT_1 . IDENT_4 . METHOD_1 ( x , IDENT_5 , IDENT_6 ) ; if ( ( res . IDENT_8 ) >= IDENT_6 ) { return res . IDENT_9 [ n ] ; } else if ( ( res . IDENT_8 ) < 0 ) { throw new org . apache . commons . math4 . exception . METHOD_2 ( org . apache . commons . math4 . exception . util . IDENT_10 . IDENT_11 , order , x ) ; } else if ( ( org . apache . commons . math4 . util . IDENT_12 . METHOD_3 ( res . IDENT_9 [ ( ( res . IDENT_8 ) - 1 ) ] ) ) < FLOAT_1 ) { return res . IDENT_9 [ n ] ; } throw new org . apache . commons . math4 . exception . METHOD_4 ( org . apache . commons . math4 . exception . util . IDENT_10 . IDENT_13 , order , x ) ; }
org . junit . Assert . assertEquals ( msg , expected , actual , IDENT_0 ) 