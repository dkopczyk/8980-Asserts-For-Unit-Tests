METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final long IDENT_1 = INT_0 ; final java . lang . String IDENT_2 = org . springframework . data . IDENT_3 . IDENT_4 . IDENT_5 . encode ( IDENT_1 ) ; java . lang . String IDENT_6 = ( STRING_1 + IDENT_2 ) + STRING_2 ; final org . springframework . data . repository . query . IDENT_7 parameters = METHOD_1 ( STRING_3 , STRING_3 ) ; java . lang . String IDENT_8 = org . springframework . data . IDENT_3 . query . IDENT_9 . METHOD_2 ( IDENT_0 , parameters , "name" , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String [ ] , java . lang . Class [ ] ) { org . springframework . data . repository . query . IDENT_7 IDENT_10 = org . mockito . Mockito . mock ( org . springframework . data . repository . query . IDENT_7 . class ) ; java . util . List < org . springframework . data . repository . query . IDENT_11 > parameters = new java . util . ArrayList < org . springframework . data . repository . query . IDENT_11 > ( IDENT_12 . length ) ; for ( int IDENT_13 = 0 ; IDENT_13 < ( IDENT_12 . length ) ; ++ IDENT_13 ) { parameters . add ( METHOD_3 ( IDENT_12 [ IDENT_13 ] , IDENT_13 , IDENT_14 [ IDENT_13 ] ) ) ; } org . mockito . Mockito . when ( IDENT_10 . iterator ( ) ) . thenReturn ( parameters . iterator ( ) ) ; org . mockito . Mockito . when ( IDENT_10 . METHOD_4 ( ) ) . thenReturn ( parameters . size ( ) ) ; return IDENT_10 ; }
org . junit . Assert . assertThat ( IDENT_8 , org . hamcrest . CoreMatchers . is ( IDENT_6 ) ) 