METHOD_0 ( ) { final double [ ] data = new double [ ] { - FLOAT_0 , - FLOAT_1 , FLOAT_2 , - FLOAT_3 , FLOAT_4 , Double . IDENT_0 , FLOAT_5 , - FLOAT_6 , - FLOAT_7 , - FLOAT_8 , - FLOAT_9 , FLOAT_10 , - FLOAT_11 , FLOAT_12 , - FLOAT_13 } ; final org . apache . commons . math4 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . commons . math4 . IDENT_1 . IDENT_2 . METHOD_1 ( data ) ; final double t = IDENT_4 . METHOD_2 ( INT_0 ) ; final double o = IDENT_4 . METHOD_2 ( INT_1 ) ; final double IDENT_5 = t - o ; "<AssertPlaceHolder>" ; } METHOD_2 ( double ) { if ( ( IDENT_6 ) instanceof org . apache . commons . math4 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) { ( ( org . apache . commons . math4 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ( IDENT_6 ) ) . METHOD_3 ( p ) ; } else { try { IDENT_6 . getClass ( ) . METHOD_4 ( org . apache . commons . math4 . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 , new java . lang . Class [ ] { Double . IDENT_10 } ) . invoke ( IDENT_6 , new java . lang . Object [ ] { java . lang . Double . valueOf ( p ) } ) ; } catch ( java . lang . IDENT_11 IDENT_12 ) { throw new org . apache . commons . math4 . exception . METHOD_5 ( org . apache . commons . math4 . exception . util . IDENT_13 . IDENT_14 , IDENT_6 . getClass ( ) . getName ( ) , org . apache . commons . math4 . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 ) ; } catch ( java . lang . IDENT_15 IDENT_16 ) { throw new org . apache . commons . math4 . exception . METHOD_5 ( org . apache . commons . math4 . exception . util . IDENT_13 . IDENT_17 , org . apache . commons . math4 . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 , IDENT_6 . getClass ( ) . getName ( ) ) ; } catch ( java . lang . reflect . IDENT_18 IDENT_19 ) { throw new java . lang . IllegalStateException ( IDENT_19 . METHOD_6 ( ) ) ; } } return apply ( IDENT_6 ) ; }
org . junit . Assert . assertTrue ( ( IDENT_5 >= 0 ) ) 