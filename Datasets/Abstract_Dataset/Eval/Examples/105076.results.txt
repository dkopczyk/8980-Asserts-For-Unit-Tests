METHOD_0 ( ) { final int IDENT_0 = 10 ; final java . util . concurrent . IDENT_1 IDENT_2 = new java . util . concurrent . METHOD_1 ( IDENT_0 ) ; final java . lang . IDENT_3 [ ] IDENT_4 = new java . lang . IDENT_3 [ IDENT_0 ] ; java . util . concurrent . IDENT_5 [ ] IDENT_6 = new java . util . concurrent . IDENT_5 [ IDENT_0 ] ; final java . lang . IDENT_3 IDENT_7 = new IDENT_8 . lang . METHOD_2 ( ) ; java . lang . IDENT_9 IDENT_10 = new java . lang . METHOD_3 ( ) { @ jenkins . util . Override public void run ( ) { java . lang . IDENT_3 IDENT_11 = java . lang . Thread . METHOD_4 ( ) . METHOD_5 ( ) ; java . lang . Thread . METHOD_4 ( ) . METHOD_6 ( IDENT_7 ) ; java . util . concurrent . IDENT_12 exec = jenkins . util . IDENT_13 . get ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { final int j = i ; IDENT_6 [ j ] = exec . METHOD_7 ( new java . lang . METHOD_3 ( ) { @ jenkins . util . Override public void run ( ) { try { IDENT_2 . METHOD_8 ( ) ; IDENT_4 [ j ] = java . lang . Thread . METHOD_4 ( ) . METHOD_5 ( ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . RuntimeException ( ex ) ; } } } , 0 , TimeUnit . IDENT_14 ) ; } java . lang . Thread . METHOD_4 ( ) . METHOD_6 ( IDENT_11 ) ; } } ; java . lang . Thread t = new java . lang . Thread ( IDENT_10 ) ; t . run ( ) ; t . join ( INT_0 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_6 [ i ] . get ( ) ; "<AssertPlaceHolder>" ; } } METHOD_9 ( ) { return jenkins . model . IDENT_15 . getInstance ( ) . METHOD_10 ( ) . IDENT_16 ; }
org . junit . Assert . assertEquals ( jenkins . util . IDENT_13 . class . METHOD_9 ( ) , IDENT_4 [ i ] ) 