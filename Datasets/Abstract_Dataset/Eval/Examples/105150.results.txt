METHOD_0 ( ) { org . eclipse . IDENT_0 . core . IDENT_1 method = new junit . IDENT_2 . eclipse . IDENT_3 . METHOD_1 ( ) . METHOD_2 ( ) . build ( ) ; org . eclipse . IDENT_0 . core . IDENT_4 result = new junit . IDENT_2 . eclipse . IDENT_3 . METHOD_3 ( ) . METHOD_4 ( method ) . build ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . eclipse . IDENT_0 . core . IDENT_4 ) { org . eclipse . IDENT_0 . core . IDENT_5 IDENT_6 = type . METHOD_6 ( null ) ; org . eclipse . IDENT_0 . core . IDENT_4 [ ] IDENT_7 = IDENT_6 . METHOD_7 ( ) ; for ( int i = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { if ( IDENT_7 [ i ] . METHOD_8 ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . IDENT_9 ) . equals ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . IDENT_10 ) ) return true ; } org . eclipse . IDENT_0 . core . IDENT_1 [ ] methods = type . METHOD_9 ( ) ; for ( int i = 0 ; i < ( methods . length ) ; i ++ ) { org . eclipse . IDENT_0 . core . IDENT_1 method = methods [ i ] ; org . eclipse . IDENT_0 . core . IDENT_11 [ ] IDENT_12 = method . METHOD_10 ( ) ; for ( int j = 0 ; j < ( IDENT_12 . length ) ; j ++ ) { org . eclipse . IDENT_0 . core . IDENT_11 annotation = IDENT_12 [ j ] ; if ( ( annotation . METHOD_11 ( ) . equals ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . IDENT_13 ) ) || ( annotation . METHOD_11 ( ) . equals ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . IDENT_14 ) ) ) { return true ; } } } org . eclipse . IDENT_0 . core . IDENT_15 IDENT_16 = type . METHOD_12 ( ) ; org . eclipse . IDENT_0 . core . IDENT_17 IDENT_18 = IDENT_16 . METHOD_13 ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . IDENT_14 ) ; return IDENT_18 . exists ( ) ; }
org . junit . Assert . assertThat ( junit . IDENT_2 . eclipse . IDENT_3 . IDENT_8 . METHOD_5 ( result ) , org . hamcrest . CoreMatchers . is ( true ) ) 