METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . expr . test . IDENT_2 c = METHOD_1 ( org . IDENT_0 . IDENT_1 . expr . test . IDENT_2 . class , STRING_0 ) ; IDENT_3 . METHOD_2 ( new java . lang . String [ ] { "foo" , "bar" } ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Class , java . lang . String ) { org . IDENT_0 . IDENT_1 . expr . IDENT_4 builder = new org . IDENT_0 . IDENT_1 . expr . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_4 ( STRING_2 ) . METHOD_5 ( org . IDENT_0 . IDENT_1 . expr . test . IDENT_5 . class . getName ( ) ) . METHOD_5 ( java . util . stream . IDENT_6 . class . getName ( ) ) ; org . IDENT_0 . IDENT_1 . expr . IDENT_7 < T , org . IDENT_0 . IDENT_1 . expr . test . IDENT_8 > e ; try { e = builder . build ( IDENT_9 , org . IDENT_0 . IDENT_1 . expr . test . IDENT_8 . class , str ) ; } catch ( org . IDENT_0 . IDENT_1 . expr . IDENT_10 ex ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( STRING_3 ) ; sb . append ( str ) . append ( "\n" ) ; java . util . List < org . IDENT_0 . IDENT_1 . expr . IDENT_11 > IDENT_12 = ex . METHOD_6 ( ) . stream ( ) . METHOD_7 ( java . util . IDENT_13 . METHOD_8 ( ( d ) -> d . METHOD_9 ( ) ) ) . collect ( java . util . stream . IDENT_6 . toList ( ) ) ; for ( org . IDENT_0 . IDENT_1 . expr . IDENT_11 IDENT_14 : IDENT_12 ) { for ( int i = 0 ; i < ( IDENT_14 . METHOD_9 ( ) ) ; ++ i ) { sb . append ( STRING_4 ) ; } sb . append ( STRING_5 ) ; sb . append ( IDENT_14 . getMessage ( ) ) . append ( STRING_6 ) ; } throw new java . lang . METHOD_10 ( sb . toString ( ) ) ; } IDENT_3 = e . METHOD_11 ( ) ; return e . METHOD_12 ( ) ; }
org . junit . Assert . assertThat ( c . compute ( ) , org . hamcrest . Matchers . is ( 2 ) ) 