METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . util . Set < IDENT_0 . IDENT_1 . filter . IDENT_2 > expResult = new java . util . METHOD_1 ( ) ; IDENT_0 . IDENT_1 . filter . IDENT_2 rule = new IDENT_0 . IDENT_1 . filter . METHOD_2 ( 1 , true , IDENT_0 . IDENT_1 . filter . METHOD_2 . IDENT_3 . IDENT_4 , null ) ; if ( rule != null ) { expResult . add ( rule ) ; } rule = new IDENT_0 . IDENT_1 . filter . METHOD_2 ( 2 , true , IDENT_0 . IDENT_1 . filter . METHOD_2 . IDENT_3 . IDENT_5 , IDENT_0 . IDENT_6 . IDENT_7 . METHOD_3 ( STRING_1 ) ) ; if ( rule != null ) { expResult . add ( rule ) ; } rule = new IDENT_0 . IDENT_1 . filter . METHOD_2 ( 3 , true , IDENT_0 . IDENT_1 . filter . METHOD_2 . IDENT_3 . IDENT_5 , IDENT_0 . IDENT_6 . IDENT_7 . METHOD_3 ( STRING_2 ) ) ; if ( rule != null ) { expResult . add ( rule ) ; } rule = new IDENT_0 . IDENT_1 . filter . METHOD_2 ( 4 , false , IDENT_0 . IDENT_1 . filter . METHOD_2 . IDENT_3 . IDENT_8 , null ) ; if ( rule != null ) { expResult . add ( rule ) ; } java . util . Set < IDENT_0 . IDENT_1 . filter . METHOD_2 > result = IDENT_0 . IDENT_1 . filter . IDENT_9 . METHOD_4 ( rules ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { java . lang . String [ ] IDENT_10 = rules . split ( STRING_3 ) ; if ( IDENT_10 != null ) { return IDENT_0 . IDENT_1 . filter . IDENT_9 . METHOD_4 ( IDENT_10 ) ; } return null ; }
org . junit . Assert . assertEquals ( expResult , result ) 