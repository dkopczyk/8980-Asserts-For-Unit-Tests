METHOD_0 ( ) { int IDENT_0 = new java . util . METHOD_1 ( ) . METHOD_2 ( ) ; byte [ ] bytes = IDENT_1 . IDENT_2 . fields . IDENT_3 . IDENT_4 . getBytes ( ) ; IDENT_1 . IDENT_2 . fields . IDENT_5 field = new IDENT_1 . IDENT_2 . fields . METHOD_3 ( IDENT_0 , bytes ) ; "<AssertPlaceHolder>" ; } getBytes ( ) { switch ( IDENT_6 ) { case INT_0 : return IDENT_1 . IDENT_2 . fields . IDENT_7 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; case INT_1 : return IDENT_1 . IDENT_2 . fields . IDENT_9 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; case INT_2 : return IDENT_1 . IDENT_2 . fields . IDENT_10 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; case INT_3 : return IDENT_1 . IDENT_2 . fields . IDENT_11 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; case INT_4 : return IDENT_1 . IDENT_2 . fields . IDENT_12 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; default : if ( ( IDENT_6 ) > ( IDENT_13 ) ) { return IDENT_1 . IDENT_2 . fields . IDENT_12 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; } else if ( ( IDENT_6 ) > ( IDENT_14 ) ) { return IDENT_1 . IDENT_2 . fields . IDENT_11 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; } else if ( ( IDENT_6 ) > ( IDENT_15 ) ) { return IDENT_1 . IDENT_2 . fields . IDENT_10 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; } else if ( ( IDENT_6 ) > ( IDENT_16 ) ) { return IDENT_1 . IDENT_2 . fields . IDENT_9 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; } else { return IDENT_1 . IDENT_2 . fields . IDENT_7 . format ( value ) . getBytes ( IDENT_1 . IDENT_2 . fields . IDENT_8 ) ; } } }
org . junit . Assert . assertArrayEquals ( bytes , field . getBytes ( ) ) 