METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final org . springframework . data . repository . query . IDENT_2 parameters = METHOD_1 ( new java . lang . String [ ] { STRING_2 } , new java . lang . Class [ ] { java . lang . String . class } ) ; java . lang . String IDENT_3 = org . springframework . data . IDENT_4 . query . IDENT_5 . METHOD_2 ( IDENT_1 , parameters , STRING_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , org . springframework . data . repository . query . IDENT_2 , java . lang . Object [ ] ) { java . lang . String IDENT_6 = IDENT_1 ; for ( java . util . Iterator < org . springframework . data . repository . query . IDENT_7 > iterator = parameters . iterator ( ) ; iterator . hasNext ( ) ; ) { org . springframework . data . repository . query . IDENT_7 IDENT_8 = iterator . next ( ) ; if ( ( org . springframework . data . domain . IDENT_9 . class . METHOD_3 ( IDENT_8 . getType ( ) ) ) || ( org . springframework . data . domain . IDENT_10 . class . METHOD_3 ( IDENT_8 . getType ( ) ) ) ) { continue ; } IDENT_6 = org . springframework . data . IDENT_4 . query . IDENT_5 . METHOD_4 ( IDENT_6 , IDENT_8 , IDENT_11 [ IDENT_8 . METHOD_5 ( ) ] ) ; } return IDENT_6 . trim ( ) ; }
org . junit . Assert . assertThat ( IDENT_3 , org . hamcrest . CoreMatchers . is ( IDENT_0 ) ) 