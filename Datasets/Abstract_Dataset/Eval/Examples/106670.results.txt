METHOD_0 ( ) { java . sql . IDENT_0 connection = java . sql . IDENT_1 . METHOD_1 ( ( ( STRING_0 + ( org . neo4j . jdbc . IDENT_2 . IDENT_3 . neo4j . METHOD_2 ( ) ) ) + STRING_1 ) ) ; java . sql . IDENT_4 statement = connection . METHOD_3 ( ) ; connection . METHOD_4 ( true ) ; statement . METHOD_5 ( IDENT_5 . IDENT_6 ) ; statement . METHOD_5 ( IDENT_5 . IDENT_6 ) ; statement . METHOD_5 ( IDENT_5 . IDENT_6 ) ; int [ ] result = statement . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; org . neo4j . jdbc . IDENT_2 . IDENT_3 . neo4j . METHOD_7 ( ) . execute ( IDENT_5 . IDENT_7 ) ; connection . close ( ) ; } METHOD_6 ( ) { this . METHOD_8 ( ) ; int [ ] result = new int [ 0 ] ; try { for ( java . lang . String query : this . IDENT_8 ) { org . neo4j . driver . v1 . IDENT_9 res ; if ( this . connection . METHOD_9 ( ) ) { res = ( ( org . neo4j . jdbc . IDENT_2 . IDENT_10 ) ( connection ) ) . METHOD_10 ( ) . run ( query ) ; } else { res = ( ( org . neo4j . jdbc . IDENT_2 . IDENT_10 ) ( connection ) ) . METHOD_11 ( ) . run ( query ) ; } org . neo4j . driver . v1 . IDENT_11 . IDENT_12 count = res . METHOD_12 ( ) . METHOD_13 ( ) ; result = java . util . Arrays . METHOD_14 ( result , ( ( result . length ) + 1 ) ) ; result [ ( ( result . length ) - 1 ) ] = ( count . METHOD_15 ( ) ) + ( count . METHOD_16 ( ) ) ; } } catch ( java . lang . Exception e ) { throw new java . sql . METHOD_17 ( result , e ) ; } return result ; }
org . junit . Assert . assertArrayEquals ( new int [ ] { 1 , 1 , 1 } , result ) 