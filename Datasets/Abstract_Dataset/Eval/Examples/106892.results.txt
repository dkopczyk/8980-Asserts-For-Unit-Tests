METHOD_0 ( ) { double [ ] IDENT_0 = new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 } ; double [ ] IDENT_1 = IDENT_0 . METHOD_1 ( ) ; double IDENT_2 = 0.0 ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { IDENT_2 += IDENT_0 [ i ] ; } for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { IDENT_1 [ i ] = ( IDENT_1 [ i ] ) / IDENT_2 ; } IDENT_3 . METHOD_2 ( IDENT_0 , IDENT_2 ) ; int IDENT_4 = 100 ; for ( int j = 0 ; j < IDENT_4 ; j ++ ) { int IDENT_5 = INT_0 ; int [ ] IDENT_6 = new int [ IDENT_5 ] ; int [ ] IDENT_7 = new int [ IDENT_0 . length ] ; for ( int i = 0 ; i < ( IDENT_6 . length ) ; i ++ ) { IDENT_6 [ i ] = IDENT_3 . METHOD_3 ( ) ; ( IDENT_7 [ IDENT_6 [ i ] ] ) ++ ; } for ( int i = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { double IDENT_8 = ( IDENT_0 [ i ] ) - ( ( ( double ) ( IDENT_7 [ i ] ) ) / IDENT_5 ) ; double IDENT_9 = java . lang . Math . METHOD_4 ( ( IDENT_5 * ( ( IDENT_1 [ i ] ) * ( 1 - ( IDENT_1 [ i ] ) ) ) ) ) ; double IDENT_10 = IDENT_8 / IDENT_9 ; "<AssertPlaceHolder>" ; } } } METHOD_3 ( ) { double IDENT_11 = java . util . concurrent . IDENT_12 . METHOD_5 ( ) . METHOD_6 ( ) ; return METHOD_3 ( IDENT_11 ) ; }
org . junit . Assert . assertTrue ( ( IDENT_10 < 6 ) ) 