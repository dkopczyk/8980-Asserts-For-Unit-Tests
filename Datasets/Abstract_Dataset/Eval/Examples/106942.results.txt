METHOD_0 ( ) { for ( int IDENT_0 = 1 ; IDENT_0 < 10 ; ++ IDENT_0 ) { System . out . println ( ( STRING_0 + IDENT_0 ) ) ; java . util . Iterator < com . googlecode . IDENT_1 . IDENT_2 [ ] > i = com . googlecode . IDENT_1 . IDENT_3 . METHOD_1 ( IDENT_0 , 3 ) ; while ( i . hasNext ( ) ) { com . googlecode . IDENT_1 . IDENT_2 [ ] x = i . next ( ) ; com . googlecode . IDENT_1 . IDENT_2 IDENT_4 = com . googlecode . IDENT_1 . IDENT_2 . and ( x ) ; com . googlecode . IDENT_1 . IDENT_2 IDENT_5 = com . googlecode . IDENT_1 . IDENT_6 . METHOD_2 ( com . googlecode . IDENT_1 . IDENT_7 . METHOD_3 ( com . googlecode . IDENT_1 . IDENT_6 . METHOD_4 ( x ) ) ) ; IDENT_5 . METHOD_5 ( com . googlecode . IDENT_1 . IDENT_2 . METHOD_6 ( x ) , false ) ; IDENT_5 . METHOD_7 ( com . googlecode . IDENT_1 . IDENT_2 . METHOD_6 ( x ) ) ; "<AssertPlaceHolder>" ; } java . lang . System . METHOD_8 ( ) ; } } equals ( java . lang . Object ) { if ( o instanceof com . googlecode . IDENT_1 . IDENT_2 ) { try { this . METHOD_9 ( ( ( com . googlecode . IDENT_1 . IDENT_2 ) ( o ) ) , new com . googlecode . IDENT_1 . METHOD_10 ( ) ) ; return true ; } catch ( com . googlecode . IDENT_1 . METHOD_10 e ) { return false ; } } return false ; }
org . junit . Assert . assertTrue ( IDENT_5 . equals ( IDENT_4 ) ) 