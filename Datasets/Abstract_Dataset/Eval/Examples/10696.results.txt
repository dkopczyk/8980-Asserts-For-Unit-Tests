METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( ) ) . thenReturn ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . apache . IDENT_2 . IDENT_3 ) { org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_5 < T > impl = METHOD_3 ( IDENT_0 ) ; if ( impl instanceof org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_6 ) { org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_6 < T > IDENT_7 = ( ( org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_6 < T > ) ( impl ) ) ; if ( ( IDENT_7 . METHOD_4 ( ) ) instanceof org . apache . IDENT_2 . io . IDENT_8 ) { return ( ( org . apache . IDENT_2 . io . IDENT_8 ) ( IDENT_7 . METHOD_4 ( ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( ( STRING_0 + IDENT_7 ) ) ; } } else if ( impl instanceof org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_9 ) { org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_9 it = ( ( org . apache . IDENT_2 . impl . IDENT_4 . collect . IDENT_9 ) ( impl ) ) ; if ( ( it . METHOD_4 ( ) ) instanceof org . apache . IDENT_2 . io . IDENT_8 ) { return ( ( org . apache . IDENT_2 . io . IDENT_8 ) ( it . METHOD_4 ( ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( ( STRING_1 + it ) ) ; } } org . apache . IDENT_2 . IDENT_10 < ? > IDENT_11 = impl . METHOD_1 ( ) ; if ( ( IDENT_11 != null ) && ( IDENT_11 instanceof org . apache . IDENT_2 . io . IDENT_12 ) ) { return ( ( org . apache . IDENT_2 . io . IDENT_12 < T > ) ( IDENT_11 ) ) ; } org . apache . IDENT_2 . io . IDENT_12 < T > IDENT_13 = null ; if ( IDENT_14 . containsKey ( IDENT_0 ) ) { for ( org . apache . IDENT_2 . IDENT_15 target : IDENT_14 . get ( impl ) ) { if ( ( target instanceof org . apache . IDENT_2 . io . IDENT_12 ) && ( ! ( IDENT_16 . contains ( target ) ) ) ) { return ( ( org . apache . IDENT_2 . io . IDENT_12 < T > ) ( target ) ) ; } } } org . apache . IDENT_2 . IDENT_10 < T > IDENT_17 = METHOD_5 ( IDENT_0 . METHOD_6 ( ) ) ; if ( ! ( IDENT_17 instanceof org . apache . IDENT_2 . io . IDENT_12 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_2 + STRING_3 ) ) ; } else { IDENT_13 = ( ( org . apache . IDENT_2 . io . IDENT_12 < T > ) ( IDENT_17 ) ) ; METHOD_7 ( impl , IDENT_13 ) ; return IDENT_13 ; } }
org . junit . Assert . assertEquals ( IDENT_1 , pipeline . METHOD_2 ( IDENT_0 ) ) 