METHOD_0 ( ) { java . nio . ByteBuffer IDENT_0 = java . nio . ByteBuffer . METHOD_1 ( INT_0 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { IDENT_0 . put ( new byte [ ] { INT_1 , 5 , 5 , INT_2 } ) ; while ( ( IDENT_0 . METHOD_2 ( ) ) > ( INT_0 - ( ( i + 1 ) * 10 ) ) ) { IDENT_0 . put ( ( ( byte ) ( 0 ) ) ) ; } } byte [ ] content = new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; IDENT_0 . put ( METHOD_3 ( content , 10 ) ) ; IDENT_0 . put ( METHOD_4 ( content , 10 ) ) ; java . io . IDENT_1 file = METHOD_5 ( ) ; file . write ( IDENT_0 . array ( ) ) ; file . METHOD_6 ( 0 ) ; com . IDENT_2 . IDENT_3 . datastore . IDENT_4 IDENT_5 = com . IDENT_2 . IDENT_3 . datastore . IDENT_4 . read ( file , 10 ) ; "<AssertPlaceHolder>" ; file . close ( ) ; } METHOD_7 ( ) { return content ; }
org . junit . Assert . assertArrayEquals ( content , IDENT_5 . METHOD_7 ( ) ) 