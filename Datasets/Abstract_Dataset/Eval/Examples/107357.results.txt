METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 config = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; config . METHOD_2 ( IDENT_4 . IDENT_5 ) ; config . METHOD_3 ( 2 ) ; config . METHOD_4 ( true ) ; config . METHOD_5 ( true ) ; config . METHOD_6 ( 2 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . impl . internal . IDENT_6 IDENT_2 = new com . IDENT_0 . IDENT_1 . IDENT_2 . impl . internal . METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_7 . IDENT_8 , config , com . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_7 . IDENT_9 , com . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_7 . IDENT_10 , com . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_7 . IDENT_11 , INT_0 ) ; java . util . Map < java . lang . String , java . lang . String > properties = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; properties . put ( STRING_0 , STRING_1 ) ; properties . put ( "" , "" ) ; for ( int i = 0 ; i < 5 ; i ++ ) { java . lang . String ret = IDENT_2 . METHOD_8 ( com . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_7 . content , properties , STRING_2 ) ; "<AssertPlaceHolder>" ; } try { java . lang . Thread . sleep ( INT_1 ) ; } catch ( java . lang . Exception e ) { } } METHOD_8 ( java . lang . Object , java . util . Map , java . lang . String ) { if ( content == null ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } com . IDENT_0 . IDENT_1 . common . internal . message . IDENT_12 IDENT_13 = new com . IDENT_0 . IDENT_1 . common . internal . message . METHOD_9 ( ) ; java . lang . String ret = null ; java . util . Map < java . lang . String , java . lang . String > IDENT_14 = null ; com . IDENT_0 . IDENT_15 . message . IDENT_16 IDENT_17 = com . IDENT_0 . IDENT_15 . IDENT_18 . METHOD_10 ( ) . METHOD_11 ( STRING_4 , ( ( ( IDENT_19 . getName ( ) ) + STRING_5 0 ) + ( IDENT_9 ) ) ) ; java . lang . String IDENT_20 ; try { IDENT_20 = com . IDENT_0 . IDENT_15 . IDENT_18 . METHOD_10 ( ) . METHOD_12 ( ) ; } catch ( java . lang . Exception e ) { IDENT_20 = STRING_6 ; } try { IDENT_13 . METHOD_13 ( content ) ; IDENT_13 . METHOD_14 ( IDENT_10 ) ; IDENT_13 . METHOD_15 ( new java . util . Date ( ) ) ; IDENT_13 . METHOD_16 ( IDENT_9 ) ; if ( IDENT_21 != null ) { IDENT_13 . METHOD_17 ( IDENT_21 ) ; } if ( properties != null ) { for ( Map . Entry < java . lang . String , java . lang . String > entry : properties . entrySet ( ) ) { if ( ( ! ( ( entry . getKey ( ) ) instanceof java . lang . String ) ) || ( ( ( entry . getValue ( ) ) != null ) && ( ! ( ( entry . getValue ( ) ) instanceof java . lang . String ) ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_7 ) ; } } IDENT_13 . METHOD_18 ( properties ) ; } if ( IDENT_22 . METHOD_19 ( ) ) { IDENT_14 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; try { IDENT_13 . METHOD_13 ( com . IDENT_0 . IDENT_1 . common . internal . util . IDENT_23 . METHOD_20 ( IDENT_13 . METHOD_21 ( ) ) ) ; IDENT_14 . put ( STRING_8 , STRING_9 ) ; } catch ( java . lang . Exception e ) { com . IDENT_0 . IDENT_1 . IDENT_2 . impl . internal . METHOD_7 . LOGGER . warn ( ( STRING_5 + ( IDENT_13 . METHOD_21 ( ) ) ) , e ) ; IDENT_14 . put ( STRING_8 , STRING_10 ) ; } IDENT_13 . METHOD_22 ( IDENT_14 ) ; } com . IDENT_0 . IDENT_1 . common . internal . packet . IDENT_24 IDENT_25 = new com . IDENT_0 . IDENT_1 . common . internal . packet . METHOD_23 ( IDENT_19 , IDENT_13 ) ; IDENT_25 . METHOD_24 ( IDENT_20 ) ; switch ( IDENT_22 . METHOD_25 ( ) ) { case IDENT_26 : com . IDENT_0 . IDENT_1 . common . internal . packet . IDENT_27 IDENT_28 = ( ( com . IDENT_0 . IDENT_1 . common . internal . packet . IDENT_27 ) ( IDENT_29 . METHOD_26 ( IDENT_25 ) ) ) ; if ( IDENT_28 != null ) { ret = IDENT_28 . METHOD_27 ( ) ; } break ; case IDENT_5 : com . IDENT_0 . IDENT_15 . IDENT_18 . METHOD_10 ( ) . METHOD_28 ( IDENT_30 . IDENT_31 , STRING_11 , Message . IDENT_32 , IDENT_20 ) ; IDENT_29 . METHOD_26 ( IDENT_25 ) ; break ; } IDENT_17 . METHOD_29 ( Message . IDENT_32 ) ; } catch ( com . IDENT_0 . IDENT_1 . common . IDENT_2 . exceptions . IDENT_33 e ) { IDENT_17 . METHOD_29 ( e ) ; com . IDENT_0 . IDENT_15 . IDENT_18 . METHOD_10 ( ) . METHOD_30 ( e ) ; throw e ; } catch ( java . lang . RuntimeException e ) { IDENT_17 . METHOD_29 ( e ) ; com . IDENT_0 . IDENT_15 . IDENT_18 . METHOD_10 ( ) . METHOD_30 ( e ) ; throw e ; } finally { IDENT_17 . METHOD_31 ( ) ; } return ret ; }
org . junit . Assert . assertNull ( ret ) 