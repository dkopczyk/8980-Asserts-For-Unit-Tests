METHOD_0 ( ) { final org . IDENT_0 . business . IDENT_1 . IDENT_2 start = org . IDENT_0 . business . IDENT_1 . IDENT_2 . create ( new org . joda . time . METHOD_1 ( INT_0 , 2 , 4 ) , METHOD_2 ( 4 ) ) ; METHOD_3 ( 8 ) ; org . IDENT_0 . business . IDENT_1 . IDENT_2 end = org . IDENT_0 . business . IDENT_1 . IDENT_2 . METHOD_4 ( start . METHOD_5 ( ) . METHOD_6 ( 4 ) ) ; METHOD_7 ( start , end ) ; IDENT_3 . METHOD_8 ( end ) . METHOD_9 ( org . IDENT_0 . business . IDENT_1 . IDENT_4 . METHOD_10 ( 1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( ) { java . util . HashMap < org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 < ? > , org . IDENT_0 . business . IDENT_1 . IDENT_4 > result = new java . util . HashMap < org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 < ? > , org . IDENT_0 . business . IDENT_1 . IDENT_4 > ( ) ; for ( org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 < ? > r : IDENT_7 ) { result . put ( r , r . METHOD_11 ( ) ) ; } return result ; }
org . junit . Assert . assertThat ( IDENT_3 . METHOD_11 ( ) , org . hamcrest . CoreMatchers . equalTo ( org . IDENT_0 . business . IDENT_1 . IDENT_4 . METHOD_10 ( 1 ) ) ) 