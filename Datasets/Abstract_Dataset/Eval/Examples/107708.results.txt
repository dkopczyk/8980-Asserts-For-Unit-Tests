METHOD_0 ( ) { java . util . List < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > IDENT_2 = new java . util . ArrayList < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > ( ) ; com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_1 ( STRING_0 , IDENT_2 , com . liferay . IDENT_0 . util . xml . IDENT_3 . IDENT_4 ) ; java . util . Collections . METHOD_2 ( IDENT_2 ) ; java . util . List < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > IDENT_5 = new java . util . ArrayList < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > ( ) ; com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_1 ( STRING_0 , IDENT_5 , com . liferay . IDENT_0 . util . xml . IDENT_3 . IDENT_6 ) ; com . liferay . IDENT_0 . util . config . internal . IDENT_1 IDENT_7 = IDENT_5 . get ( 0 ) ; java . util . List < java . lang . String > IDENT_8 = IDENT_7 . METHOD_3 ( ) ; java . lang . String [ ] IDENT_9 = com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_4 ( IDENT_2 ) ; java . util . List < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > order ; if ( IDENT_8 == null ) { order = com . liferay . IDENT_0 . util . config . internal . IDENT_10 . METHOD_5 ( IDENT_2 ) ; } else { org . junit . Assert . fail ( STRING_1 ) ; order = com . liferay . IDENT_0 . util . config . internal . IDENT_10 . METHOD_5 ( IDENT_2 , IDENT_8 ) ; } order . add ( IDENT_7 ) ; java . lang . String [ ] IDENT_11 = com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_4 ( order ) ; java . util . List < java . lang . String > original = java . util . Arrays . asList ( IDENT_9 ) ; java . util . List < java . lang . String > IDENT_12 = java . util . Arrays . asList ( IDENT_11 ) ; java . util . List < java . lang . String > IDENT_13 = java . util . Arrays . asList ( STRING_1 2 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_1 0 ) ; java . util . List < java . lang . String > IDENT_14 = java . util . Arrays . asList ( STRING_1 2 , STRING_2 , STRING_3 , STRING_4 , STRING_6 , STRING_5 , STRING_1 0 ) ; java . util . List < java . lang . String > IDENT_15 = java . util . Arrays . asList ( STRING_1 2 , STRING_2 , STRING_3 , STRING_5 , STRING_4 , STRING_6 , STRING_1 0 ) ; boolean IDENT_16 = ( ( IDENT_12 . equals ( IDENT_13 ) ) || ( IDENT_12 . equals ( IDENT_14 ) ) ) || ( IDENT_12 . equals ( IDENT_15 ) ) ; java . lang . String message = ( ( ( ( ( ( ( ( ( STRING_7 + original ) + STRING_1 3 ) + IDENT_13 ) + STRING_8 ) + IDENT_14 ) + STRING_8 ) + IDENT_15 ) + STRING_9 ) + IDENT_12 ) + STRING_1 1 ; "<AssertPlaceHolder>" ; com . liferay . IDENT_0 . util . xml . IDENT_3 . logger . info ( ( STRING_1 5 + message ) ) ; } equals ( java . lang . Object ) { boolean IDENT_17 = false ; if ( ( obj != null ) && ( obj instanceof java . util . List < ? > ) ) { java . util . List < ? > IDENT_18 = ( ( java . util . List < ? > ) ( obj ) ) ; if ( ( IDENT_18 . size ( ) ) == ( this . size ( ) ) ) { IDENT_17 = true ; int index = 0 ; for ( java . lang . Object IDENT_19 : IDENT_18 ) { if ( IDENT_19 instanceof java . lang . String ) { java . lang . String IDENT_20 = ( ( java . lang . String ) ( IDENT_19 ) ) ; java . lang . String IDENT_21 = this . get ( index ) ; if ( IDENT_21 . equals ( IDENT_20 ) ) { index ++ ; } else { IDENT_17 = false ; break ; } } else { IDENT_17 = false ; break ; } } } } return IDENT_17 ; }
org . junit . Assert . assertTrue ( message , IDENT_16 ) 