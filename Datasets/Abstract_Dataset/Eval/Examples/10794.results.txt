METHOD_0 ( ) { consumer = new org . apache . kafka . IDENT_0 . consumer . METHOD_1 ( IDENT_1 , new org . apache . IDENT_2 . kafka . record . IDENT_3 . METHOD_2 ( ) , new org . apache . IDENT_2 . kafka . record . IDENT_3 . METHOD_2 ( ) ) ; int IDENT_4 = 10 ; int IDENT_5 = 100 ; int IDENT_6 = 50 ; org . apache . IDENT_2 . kafka . IDENT_3 . METHOD_3 ( props , IDENT_7 , STRING_0 , IDENT_4 , IDENT_5 ) ; java . util . Map < org . apache . kafka . common . IDENT_8 , org . apache . IDENT_2 . IDENT_9 < java . lang . Long , java . lang . Long > > IDENT_10 = new java . util . HashMap ( ) ; IDENT_11 = org . apache . IDENT_2 . kafka . record . IDENT_12 . METHOD_4 ( props , IDENT_7 ) ; for ( Map . Entry < org . apache . kafka . common . IDENT_8 , java . lang . Long > entry : IDENT_11 . entrySet ( ) ) { IDENT_10 . put ( entry . getKey ( ) , org . apache . IDENT_2 . IDENT_9 . of ( entry . getValue ( ) , ( ( entry . getValue ( ) ) + IDENT_6 ) ) ) ; } java . lang . IDENT_13 < org . apache . kafka . IDENT_0 . consumer . IDENT_14 < java . lang . String , java . lang . String > > data = new org . apache . IDENT_2 . kafka . record . METHOD_5 ( consumer , IDENT_10 , new java . util . Properties ( ) ) ; int count = 0 ; for ( org . apache . kafka . IDENT_0 . consumer . IDENT_14 < java . lang . String , java . lang . String > record : data ) { count ++ ; } "<AssertPlaceHolder>" ; } size ( ) { return 3 ; }
org . junit . Assert . assertThat ( count , org . hamcrest . core . Is . is ( ( ( IDENT_11 . size ( ) ) * IDENT_6 ) ) ) 