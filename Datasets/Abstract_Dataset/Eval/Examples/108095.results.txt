METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 ) ; for ( java . lang . String IDENT_1 : IDENT_0 ) { com . liferay . IDENT_2 . kernel . service . IDENT_3 . METHOD_1 ( com . liferay . portal . kernel . test . util . IDENT_4 . METHOD_2 ( ) , IDENT_5 . METHOD_3 ( ) , IDENT_1 , IDENT_6 ) ; } com . liferay . portal . kernel . search . IDENT_7 < com . liferay . IDENT_2 . kernel . model . IDENT_8 > IDENT_9 = com . liferay . IDENT_2 . kernel . service . IDENT_3 . METHOD_4 ( new long [ ] { IDENT_5 . METHOD_3 ( ) } , STRING_3 , 0 , 20 , null ) ; java . util . List < com . liferay . IDENT_2 . kernel . model . IDENT_8 > IDENT_10 = IDENT_9 . METHOD_5 ( ) ; java . util . stream . IDENT_11 < com . liferay . IDENT_2 . kernel . model . IDENT_8 > IDENT_12 = IDENT_10 . stream ( ) ; java . util . stream . IDENT_11 < java . lang . String > IDENT_13 = IDENT_12 . map ( ( IDENT_1 ) -> IDENT_1 . getName ( ) ) ; java . util . List < java . lang . String > IDENT_14 = IDENT_13 . collect ( java . util . stream . IDENT_15 . toList ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Collection ) { throw new java . lang . METHOD_7 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_14 . METHOD_6 ( IDENT_0 ) ) 