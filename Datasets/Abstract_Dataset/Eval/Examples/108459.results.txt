METHOD_0 ( ) { METHOD_1 ( 2 , ( ) -> { com . liferay . portal . kernel . service . IDENT_0 IDENT_1 = com . liferay . portal . kernel . test . util . IDENT_2 . METHOD_2 ( IDENT_3 . METHOD_3 ( ) ) ; com . liferay . portal . kernel . repository . model . IDENT_4 IDENT_5 = METHOD_4 ( IDENT_1 ) ; List < com . liferay . portal . kernel . repository . model . IDENT_6 > IDENT_7 = new com . liferay . document . library . repository . IDENT_8 . test . ArrayList < > ( ) ; com . liferay . registry . IDENT_9 registry = com . liferay . registry . IDENT_10 . METHOD_5 ( ) ; IDENT_11 < com . liferay . document . library . IDENT_12 . IDENT_13 . IDENT_14 > IDENT_15 = registry . METHOD_6 ( . class , IDENT_7 :: add ) ; try { for ( int i = 0 ; i < 10 ; i ++ ) { METHOD_7 ( IDENT_5 , IDENT_1 ) ; } "<AssertPlaceHolder>" ; } finally { IDENT_15 . METHOD_8 ( ) ; } } ) ; } toString ( ) { com . liferay . IDENT_16 . string . IDENT_17 sb = new com . liferay . IDENT_16 . string . METHOD_9 ( INT_0 ) ; sb . append ( STRING_0 1 ) ; sb . append ( IDENT_18 ) ; sb . append ( STRING_0 0 ) ; sb . append ( IDENT_19 ) ; sb . append ( STRING_1 ) ; sb . append ( IDENT_20 ) ; sb . append ( STRING_2 ) ; sb . append ( IDENT_21 ) ; sb . append ( STRING_3 ) ; sb . append ( IDENT_22 ) ; sb . append ( STRING_4 ) ; sb . append ( IDENT_23 ) ; sb . append ( STRING_5 ) ; sb . append ( IDENT_24 ) ; sb . append ( STRING_6 ) ; sb . append ( IDENT_25 ) ; sb . append ( STRING_7 ) ; sb . append ( IDENT_26 ) ; sb . append ( STRING_0 ) ; sb . append ( IDENT_27 ) ; sb . append ( STRING_8 ) ; sb . append ( size ) ; sb . append ( STRING_9 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_7 . toString ( ) , 9 , IDENT_7 . size ( ) ) 