METHOD_0 ( ) { com . liferay . IDENT_0 . data . mapping . model . IDENT_1 IDENT_2 = mock ( com . liferay . IDENT_0 . data . mapping . model . IDENT_1 . class ) ; when ( IDENT_3 . METHOD_1 ( 1 ) ) . thenReturn ( IDENT_2 ) ; when ( IDENT_2 . METHOD_2 ( ) ) . thenReturn ( 1L ) ; com . liferay . IDENT_0 . data . mapping . storage . IDENT_4 IDENT_5 = mock ( com . liferay . IDENT_0 . data . mapping . storage . IDENT_4 . class ) ; com . liferay . IDENT_0 . data . mapping . io . IDENT_6 IDENT_7 = IDENT_6 . Builder . METHOD_3 ( STRING_0 ) . build ( ) ; when ( IDENT_8 . serialize ( org . mockito . Mockito . any ( com . liferay . IDENT_0 . data . mapping . io . IDENT_9 . class ) ) ) . thenReturn ( IDENT_7 ) ; com . liferay . IDENT_0 . data . mapping . storage . IDENT_10 . Builder builder = IDENT_10 . Builder . METHOD_3 ( 1 , 1 , IDENT_5 ) ; com . liferay . IDENT_0 . data . mapping . storage . IDENT_10 IDENT_11 = builder . METHOD_4 ( 1 ) . build ( ) ; com . liferay . IDENT_0 . data . mapping . storage . IDENT_12 IDENT_13 = IDENT_14 . save ( IDENT_11 ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_2 , org . mockito . Mockito . times ( 1 ) ) . METHOD_5 ( org . mockito . Matchers . any ( java . util . Date . class ) ) ; org . mockito . Mockito . verify ( IDENT_2 , org . mockito . Mockito . times ( 1 ) ) . METHOD_6 ( org . mockito . Matchers . anyString ( ) ) ; org . mockito . Mockito . verify ( IDENT_8 , org . mockito . Mockito . times ( 1 ) ) . serialize ( org . mockito . Mockito . any ( com . liferay . IDENT_0 . data . mapping . io . IDENT_9 . class ) ) ; org . mockito . Mockito . verify ( IDENT_3 , org . mockito . Mockito . times ( 1 ) ) . METHOD_7 ( org . mockito . Matchers . METHOD_8 ( ) , org . mockito . Matchers . anyString ( ) , org . mockito . Matchers . anyString ( ) , org . mockito . Matchers . anyString ( ) , org . mockito . Matchers . any ( com . liferay . portal . kernel . service . IDENT_15 . class ) ) ; } METHOD_2 ( ) { return IDENT_16 ; }
org . junit . Assert . assertEquals ( 1L , IDENT_13 . METHOD_2 ( ) ) 