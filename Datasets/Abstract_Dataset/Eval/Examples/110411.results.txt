METHOD_0 ( ) { java . lang . Class < ? > clazz = getClass ( ) ; java . lang . String IDENT_0 = clazz . getName ( ) ; java . lang . String IDENT_1 = com . liferay . IDENT_2 . string . IDENT_3 . IDENT_4 ; java . nio . ByteBuffer IDENT_5 = java . nio . ByteBuffer . METHOD_1 ( ( ( ( IDENT_0 . length ( ) ) + ( IDENT_1 . length ( ) ) ) + INT_0 ) ) ; IDENT_5 . put ( IDENT_6 . IDENT_7 ) ; IDENT_5 . put ( ( ( byte ) ( 1 ) ) ) ; IDENT_5 . METHOD_2 ( IDENT_1 . length ( ) ) ; IDENT_5 . put ( IDENT_1 . getBytes ( IDENT_3 . IDENT_8 ) ) ; IDENT_5 . put ( ( ( byte ) ( 1 ) ) ) ; IDENT_5 . METHOD_2 ( IDENT_0 . length ( ) ) ; IDENT_5 . put ( IDENT_0 . getBytes ( IDENT_3 . IDENT_8 ) ) ; IDENT_5 . METHOD_3 ( ) ; com . liferay . IDENT_2 . io . IDENT_9 IDENT_10 = new com . liferay . IDENT_2 . io . METHOD_4 ( IDENT_5 ) ; java . lang . Class < ? > IDENT_11 = IDENT_10 . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { byte IDENT_12 = IDENT_13 [ ( ( IDENT_14 ) ++ ) ] ; if ( IDENT_12 == ( IDENT_6 . IDENT_15 ) ) { return ( ( T ) ( java . lang . Boolean . valueOf ( METHOD_6 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_16 ) ) { return ( ( T ) ( java . lang . IDENT_17 . valueOf ( METHOD_7 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_18 ) ) { return ( ( T ) ( java . lang . IDENT_19 . valueOf ( METHOD_8 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_7 ) ) { java . lang . String IDENT_1 = METHOD_9 ( ) ; java . lang . String IDENT_0 = METHOD_9 ( ) ; java . lang . IDENT_20 IDENT_21 = com . liferay . IDENT_2 . lang . IDENT_22 . METHOD_10 ( IDENT_1 ) ; return ( ( T ) ( com . liferay . IDENT_2 . lang . IDENT_23 . resolve ( IDENT_0 , IDENT_21 ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_24 ) ) { return ( ( T ) ( java . lang . Double . valueOf ( METHOD_11 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_25 ) ) { return ( ( T ) ( java . lang . IDENT_26 . valueOf ( METHOD_12 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_27 ) ) { return ( ( T ) ( java . lang . Integer . valueOf ( METHOD_13 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_28 ) ) { return ( ( T ) ( java . lang . Long . valueOf ( METHOD_14 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_29 ) ) { return null ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_30 ) ) { return ( ( T ) ( java . lang . IDENT_31 . valueOf ( METHOD_15 ( ) ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_32 ) ) { return ( ( T ) ( METHOD_9 ( ) ) ) ; } else if ( IDENT_12 == ( IDENT_6 . IDENT_33 ) ) { try { java . io . IDENT_34 IDENT_35 = new com . liferay . IDENT_2 . io . METHOD_16 ( new com . liferay . IDENT_2 . io . METHOD_4 . METHOD_17 ( ) ) ; return ( ( T ) ( IDENT_35 . METHOD_5 ( ) ) ) ; } catch ( java . io . IOException IDENT_36 ) { throw new java . lang . RuntimeException ( IDENT_36 ) ; } } throw new java . lang . IllegalStateException ( ( STRING_0 + IDENT_12 ) ) ; }
org . junit . Assert . assertSame ( clazz , IDENT_11 ) 