METHOD_0 ( ) { org . apache . cxf . message . Message m = new org . apache . cxf . message . METHOD_1 ( ) ; org . apache . cxf . ws . policy . IDENT_0 IDENT_1 = new org . apache . cxf . ws . policy . IDENT_1 . METHOD_2 ( ) ; org . apache . cxf . ws . policy . IDENT_2 engine = control . METHOD_3 ( org . apache . cxf . ws . policy . IDENT_2 . class ) ; org . apache . cxf . ws . policy . IDENT_3 IDENT_4 = control . METHOD_3 ( org . apache . cxf . ws . policy . IDENT_3 . class ) ; org . apache . IDENT_5 . IDENT_6 policy = new org . apache . IDENT_5 . METHOD_4 ( ) ; org . apache . IDENT_5 . IDENT_7 IDENT_8 = new org . apache . IDENT_5 . METHOD_5 ( ) ; org . apache . IDENT_5 . IDENT_9 IDENT_10 = new org . apache . IDENT_5 . METHOD_6 ( ) ; org . apache . cxf . ws . policy . IDENT_11 IDENT_12 = new org . apache . cxf . ws . policy . METHOD_7 ( ) ; IDENT_10 . METHOD_8 ( IDENT_12 ) ; IDENT_8 . METHOD_9 ( IDENT_10 ) ; java . util . Collection < org . apache . cxf . ws . policy . IDENT_11 > IDENT_13 = org . apache . cxf . helpers . IDENT_14 . METHOD_10 ( IDENT_10 . METHOD_11 ( ) , org . apache . cxf . ws . policy . IDENT_11 . class ) ; IDENT_10 = new org . apache . IDENT_5 . METHOD_6 ( ) ; IDENT_8 . METHOD_9 ( IDENT_10 ) ; java . util . Collection < org . apache . cxf . ws . policy . IDENT_11 > IDENT_15 = org . apache . cxf . helpers . IDENT_14 . METHOD_10 ( IDENT_10 . METHOD_11 ( ) , org . apache . cxf . ws . policy . IDENT_11 . class ) ; policy . METHOD_9 ( IDENT_8 ) ; org . easymock . EasyMock . expect ( engine . METHOD_12 ( IDENT_13 , IDENT_4 , m ) ) . andReturn ( true ) ; org . easymock . EasyMock . expect ( engine . METHOD_12 ( IDENT_15 , IDENT_4 , m ) ) . andReturn ( true ) ; control . replay ( ) ; java . util . Collection < org . apache . IDENT_5 . IDENT_16 > IDENT_17 = IDENT_1 . METHOD_13 ( policy , engine , IDENT_4 , null , m ) ; "<AssertPlaceHolder>" ; control . verify ( ) ; } size ( ) { return cache . METHOD_14 ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_17 . size ( ) ) 