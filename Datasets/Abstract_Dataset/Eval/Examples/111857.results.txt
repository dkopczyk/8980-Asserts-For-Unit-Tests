METHOD_0 ( ) { com . liferay . portal . kernel . util . IDENT_0 sb = new com . liferay . portal . kernel . util . METHOD_1 ( ) ; try ( java . nio . file . IDENT_1 < java . nio . file . Path > IDENT_2 = java . nio . file . IDENT_3 . METHOD_2 ( java . nio . file . IDENT_4 . get ( java . lang . System . getProperty ( STRING_0 ) ) , STRING_1 ) ) { for ( java . nio . file . Path path : IDENT_2 ) { if ( ! ( java . nio . file . IDENT_3 . METHOD_3 ( path ) ) ) { continue ; } sb . append ( STRING_2 ) ; sb . append ( path ) ; sb . append ( IDENT_5 . IDENT_6 ) ; sb . append ( IDENT_5 . IDENT_7 ) ; sb . append ( new java . lang . String ( java . nio . file . IDENT_3 . METHOD_4 ( path ) , java . nio . IDENT_8 . IDENT_9 . METHOD_5 ( ) ) ) ; sb . append ( IDENT_5 . IDENT_7 ) ; } } "<AssertPlaceHolder>" ; } toString ( ) { com . liferay . IDENT_10 . string . METHOD_1 sb = new com . liferay . IDENT_10 . string . METHOD_1 ( INT_0 ) ; sb . append ( STRING_3 1 ) ; sb . append ( IDENT_11 ) ; sb . append ( STRING_3 0 ) ; sb . append ( IDENT_12 ) ; sb . append ( STRING_4 ) ; sb . append ( IDENT_13 ) ; sb . append ( STRING_5 ) ; sb . append ( IDENT_14 ) ; sb . append ( STRING_6 ) ; sb . append ( IDENT_15 ) ; sb . append ( STRING_7 ) ; sb . append ( IDENT_16 ) ; sb . append ( STRING_8 ) ; sb . append ( IDENT_17 ) ; sb . append ( STRING_9 ) ; sb . append ( IDENT_18 ) ; sb . append ( STRING_10 ) ; sb . append ( IDENT_19 ) ; sb . append ( STRING_3 ) ; sb . append ( IDENT_20 ) ; sb . append ( STRING_11 ) ; sb . append ( size ) ; sb . append ( STRING_12 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertTrue ( sb . toString ( ) , ( ( sb . index ( ) ) == 0 ) ) 