METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 IDENT_2 = ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 . IDENT_3 ; ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 IDENT_4 = ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 . IDENT_5 ; int IDENT_6 = new ch . puzzle . itc . mobiliar . IDENT_7 . METHOD_1 ( ) . METHOD_2 ( IDENT_4 ) . METHOD_3 ( 1 ) . build ( ) . METHOD_4 ( ) ; java . util . Set < ch . puzzle . itc . mobiliar . business . function . entity . IDENT_8 > IDENT_9 = new java . util . HashSet ( ) ; IDENT_9 . add ( new ch . puzzle . itc . mobiliar . business . function . entity . METHOD_5 ( ) ) ; ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_10 < ch . puzzle . itc . mobiliar . business . IDENT_11 . entity . IDENT_12 > IDENT_13 = new ch . puzzle . itc . mobiliar . IDENT_7 . METHOD_1 ( ) . METHOD_6 ( IDENT_9 ) . METHOD_2 ( IDENT_4 ) . METHOD_3 ( 1 ) . build ( ) ; IDENT_14 . METHOD_7 ( IDENT_2 , IDENT_6 , IDENT_13 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 , int , ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_10 ) { if ( ( ( ! ( METHOD_8 ( IDENT_15 ) ) ) && ( ! ( METHOD_9 ( IDENT_16 , IDENT_15 ) ) ) ) && ( ! ( METHOD_10 ( IDENT_17 , IDENT_15 ) ) ) ) { throw new ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . METHOD_11 ( IDENT_15 , IDENT_16 , STRING_0 ) ; } }
org . junit . Assert . assertTrue ( true ) 