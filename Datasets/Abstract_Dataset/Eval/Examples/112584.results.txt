METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . security . control . IDENT_0 runtime = IDENT_1 . METHOD_1 ( STRING_0 , null , null ) ; when ( IDENT_2 . METHOD_2 ( ch . puzzle . itc . mobiliar . business . security . control . IDENT_3 . IDENT_4 ) ) . thenReturn ( true ) ; when ( IDENT_2 . METHOD_3 ( ) ) . thenReturn ( IDENT_5 ) ; IDENT_6 = new ch . puzzle . itc . mobiliar . business . security . control . HashMap ( ) ; ch . puzzle . itc . mobiliar . business . security . control . IDENT_7 res = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_4 ( ) ; res . METHOD_5 ( IDENT_8 . IDENT_9 ) ; IDENT_6 . put ( ch . puzzle . itc . mobiliar . business . security . control . IDENT_3 . IDENT_4 , ch . puzzle . itc . mobiliar . business . security . control . Arrays . asList ( new ch . puzzle . itc . mobiliar . IDENT_10 . METHOD_6 ( ) . METHOD_7 ( IDENT_11 . IDENT_12 , res ) ) ) ; IDENT_13 . IDENT_14 = IDENT_6 ; boolean result = IDENT_13 . METHOD_8 ( runtime , new ch . puzzle . itc . mobiliar . business . IDENT_15 . entity . METHOD_9 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( ch . puzzle . itc . mobiliar . business . IDENT_16 . entity . IDENT_0 , ch . puzzle . itc . mobiliar . business . IDENT_15 . entity . METHOD_9 ) { if ( ( IDENT_17 != null ) && ( ( IDENT_17 . METHOD_10 ( ) ) != null ) ) { if ( METHOD_11 ( IDENT_11 . IDENT_12 , context , IDENT_8 . IDENT_18 , IDENT_17 . METHOD_12 ( ) , null ) ) { return true ; } } return false ; }
org . junit . Assert . assertTrue ( result ) 