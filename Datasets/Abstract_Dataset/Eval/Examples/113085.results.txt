METHOD_0 ( ) { IDENT_0 . exception . IDENT_1 METHOD_0 = new IDENT_0 . exception . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } getMessage ( ) { java . lang . StringBuilder message = new java . lang . StringBuilder ( ) ; java . lang . String IDENT_2 = IDENT_0 . util . IDENT_3 . METHOD_2 ( ) ; message . append ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_1 ) ) . append ( IDENT_2 ) ; if ( ! ( IDENT_6 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_2 ) , IDENT_6 . size ( ) ) ) . append ( IDENT_2 ) ; for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i ++ ) { if ( i > INT_0 ) { break ; } message . append ( " " ) . append ( IDENT_6 . get ( i ) ) ; message . append ( IDENT_2 ) ; } } if ( ! ( IDENT_8 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_3 ) , IDENT_8 . size ( ) ) ) . append ( IDENT_2 ) ; for ( IDENT_0 . IDENT_9 . IDENT_10 IDENT_11 : IDENT_8 ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( IDENT_11 . toString ( ) ) ; message . append ( IDENT_2 ) ; } } if ( ! ( IDENT_12 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_4 ) , IDENT_12 . size ( ) ) ) . append ( IDENT_2 ) ; for ( IDENT_0 . IDENT_9 . IDENT_13 IDENT_11 : IDENT_12 ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( IDENT_11 . toString ( ) ) ; message . append ( IDENT_2 ) ; } } if ( ! ( IDENT_14 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_5 ) , IDENT_14 . size ( ) ) ) . append ( IDENT_2 ) ; for ( IDENT_0 . IDENT_15 . IDENT_16 IDENT_11 : IDENT_14 ) { message . append ( " " ) . append ( IDENT_11 . toString ( false ) ) ; message . append ( IDENT_2 ) ; } } if ( ! ( IDENT_17 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_6 ) , IDENT_17 . size ( ) ) ) . append ( IDENT_2 ) ; for ( IDENT_0 . exception . IDENT_18 IDENT_11 : IDENT_17 ) { message . append ( " " ) . append ( IDENT_11 . toString ( ) ) ; message . append ( IDENT_2 ) ; } } if ( ! ( IDENT_19 . isEmpty ( ) ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_7 ) , IDENT_19 . size ( ) ) ) . append ( IDENT_2 ) ; for ( java . lang . Throwable IDENT_11 : IDENT_19 ) { IDENT_0 . IDENT_20 . METHOD_3 ( ) . METHOD_4 ( getClass ( ) ) . METHOD_5 ( IDENT_21 . LOG , IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_8 ) , IDENT_11 ) ; message . append ( " " ) . append ( IDENT_11 . toString ( ) ) ; message . append ( IDENT_2 ) ; } } if ( IDENT_22 . METHOD_6 ( ) ) { message . append ( IDENT_0 . exception . IDENT_4 . IDENT_7 ) . append ( java . lang . String . format ( IDENT_0 . exception . IDENT_4 . IDENT_5 . getString ( STRING_9 ) , IDENT_22 . METHOD_7 ( ) . size ( ) ) ) . append ( IDENT_2 ) ; for ( java . lang . String IDENT_11 : IDENT_22 . METHOD_7 ( ) ) { message . append ( " " ) . append ( IDENT_11 ) ; message . append ( IDENT_2 ) ; } } return message . toString ( ) ; }
org . junit . Assert . assertEquals ( STRING_0 , METHOD_0 . getMessage ( ) ) 