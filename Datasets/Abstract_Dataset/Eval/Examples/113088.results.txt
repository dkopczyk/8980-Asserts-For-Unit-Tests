METHOD_0 ( ) { IDENT_0 . integration . IDENT_1 . IDENT_2 cli = new IDENT_0 . integration . IDENT_1 . METHOD_1 ( ) ; java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( STRING_0 , STRING_1 ) ; props . setProperty ( STRING_2 , STRING_3 ) ; props . setProperty ( STRING_4 , STRING_5 ) ; IDENT_0 . integration . IDENT_1 . ByteArrayOutputStream IDENT_3 = new IDENT_0 . integration . IDENT_1 . ByteArrayOutputStream ( ) ; props . store ( IDENT_3 , "" ) ; cli . METHOD_2 ( new IDENT_0 . integration . IDENT_1 . ByteArrayInputStream ( IDENT_3 . toByteArray ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( IDENT_0 . integration . IDENT_1 . InputStream ) { IDENT_0 . integration . IDENT_1 . Properties props = new IDENT_0 . integration . IDENT_1 . Properties ( ) ; props . load ( IDENT_4 ) ; if ( props . containsKey ( STRING_4 ) ) { IDENT_5 = java . lang . Boolean . valueOf ( props . getProperty ( STRING_4 ) ) ; } for ( IDENT_0 . integration . IDENT_1 . Map . Entry entry : props . entrySet ( ) ) { try { if ( STRING_6 . equals ( entry . getKey ( ) ) ) { continue ; } if ( ( ( java . lang . String ) ( entry . getKey ( ) ) ) . startsWith ( STRING_7 ) ) { IDENT_6 . put ( ( ( java . lang . String ) ( entry . getKey ( ) ) ) . METHOD_3 ( STRING_8 , "" ) , entry . getValue ( ) ) ; } else { java . lang . reflect . Field field = getClass ( ) . METHOD_4 ( ( ( java . lang . String ) ( entry . getKey ( ) ) ) ) ; java . lang . Object IDENT_7 = field . get ( this ) ; if ( IDENT_7 == null ) { java . lang . String value = entry . getValue ( ) . toString ( ) . trim ( ) ; if ( field . getType ( ) . equals ( IDENT_0 . integration . IDENT_1 . Boolean . class ) ) { field . set ( this , java . lang . Boolean . valueOf ( value ) ) ; } else { field . set ( this , value ) ; } } } } catch ( java . lang . IDENT_8 IDENT_9 ) { if ( IDENT_5 ) { throw new IDENT_0 . integration . IDENT_1 . METHOD_5 ( java . lang . String . format ( IDENT_0 . integration . IDENT_1 . METHOD_1 . IDENT_10 . getString ( STRING_9 ) , entry . getKey ( ) ) ) ; } else { IDENT_0 . integration . IDENT_1 . IDENT_11 . METHOD_6 ( ) . METHOD_7 ( getClass ( ) ) . METHOD_8 ( IDENT_12 . LOG , java . lang . String . format ( IDENT_0 . integration . IDENT_1 . METHOD_1 . IDENT_10 . getString ( STRING_10 ) , entry . getKey ( ) ) ) ; } } catch ( java . lang . IDENT_13 e ) { throw new IDENT_0 . integration . IDENT_1 . METHOD_9 ( java . lang . String . format ( IDENT_0 . integration . IDENT_1 . METHOD_1 . IDENT_10 . getString ( STRING_9 ) , entry . getKey ( ) ) ) ; } } }
org . junit . Assert . assertEquals ( STRING_1 , cli . driver ) 