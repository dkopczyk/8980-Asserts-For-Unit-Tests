METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 2 ; final io . github . IDENT_1 . IDENT_2 . IDENT_3 graph = new io . github . IDENT_1 . IDENT_2 . METHOD_1 ( ( IDENT_0 + STRING_1 ) ) ; final io . github . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_4 IDENT_5 = graph . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( STRING_2 ) . METHOD_4 ( STRING_0 ) . METHOD_5 ( STRING_0 4 ) . METHOD_6 ( io . github . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 ) ; IDENT_5 . METHOD_3 ( STRING_3 ) . METHOD_4 ( STRING_0 1 ) . METHOD_5 ( STRING_4 ) ; IDENT_5 . METHOD_7 ( STRING_2 , STRING_3 ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( STRING_6 ) . METHOD_6 ( io . github . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 ) ; IDENT_5 . METHOD_7 ( STRING_2 , STRING_7 ) ; IDENT_5 . METHOD_7 ( STRING_8 , STRING_2 ) ; IDENT_5 . METHOD_7 ( STRING_8 , STRING_7 ) ; IDENT_5 . METHOD_8 ( STRING_2 , STRING_8 ) . METHOD_4 ( STRING_9 ) . METHOD_5 ( STRING_0 3 ) . METHOD_6 ( io . github . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 ) ; final java . lang . String actual = graph . render ( ) . trim ( ) ; final java . lang . String expected = io . github . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_9 ( ( IDENT_0 + STRING_0 0 ) ) . trim ( ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( java . lang . String ) { java . lang . String IDENT_10 = java . lang . String . format ( STRING_10 ) ; final java . lang . StringBuffer buffer = new java . lang . StringBuffer ( ) ; try { java . io . IDENT_11 in = new java . io . METHOD_10 ( new java . io . METHOD_11 ( io . github . IDENT_1 . IDENT_2 . IDENT_9 . class . getResourceAsStream ( IDENT_12 ) ) ) ; java . lang . String str = null ; while ( ( str = in . METHOD_12 ( ) ) != null ) { buffer . append ( IDENT_10 ) ; buffer . append ( str ) ; } in . close ( ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } return buffer . toString ( ) ; }
org . junit . Assert . assertEquals ( expected . trim ( ) , actual ) 