METHOD_0 ( ) { org . locationtech . IDENT_0 . model . IDENT_1 object = org . locationtech . IDENT_0 . model . impl . IDENT_2 . feature ( 0 , null , STRING_0 ) ; java . util . List < org . locationtech . IDENT_0 . model . IDENT_1 > IDENT_3 = new java . util . IDENT_4 < org . locationtech . IDENT_0 . model . IDENT_1 > ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { IDENT_3 . add ( object ) ; } ( ( org . locationtech . IDENT_0 . storage . IDENT_5 . IDENT_6 . IDENT_7 ) ( db ) ) . METHOD_1 ( 1 ) ; db . METHOD_2 ( IDENT_3 . iterator ( ) ) ; "<AssertPlaceHolder>" ; } get ( java . lang . Object ) { byte [ ] val ; try { val = db . get ( ( ( java . lang . String ) ( key ) ) . getBytes ( IDENT_8 . UTF_8 ) ) ; } catch ( org . IDENT_9 . IDENT_10 e ) { throw new java . lang . RuntimeException ( e ) ; } return val == null ? null : new java . lang . String ( val , com . google . common . base . IDENT_8 . UTF_8 ) ; }
org . junit . Assert . assertEquals ( object , db . get ( object . getId ( ) ) ) 