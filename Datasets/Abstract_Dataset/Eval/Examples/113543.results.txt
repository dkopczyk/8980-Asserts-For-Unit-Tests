METHOD_0 ( ) { final org . locationtech . IDENT_0 . core . store . query . IDENT_1 . IDENT_2 IDENT_3 = new org . locationtech . IDENT_0 . core . IDENT_4 . store . query . METHOD_1 ( factory . METHOD_2 ( new org . locationtech . jts . geom . IDENT_5 [ ] { new org . locationtech . jts . geom . METHOD_3 ( FLOAT_0 , FLOAT_1 ) , new org . locationtech . jts . geom . METHOD_3 ( FLOAT_2 , FLOAT_1 ) , new org . locationtech . jts . geom . METHOD_3 ( FLOAT_2 , FLOAT_3 ) , new org . locationtech . jts . geom . METHOD_3 ( FLOAT_0 , FLOAT_1 ) } ) ) ; final org . locationtech . IDENT_0 . core . store . IDENT_6 < org . locationtech . IDENT_0 . datastore . accumulo . query . IDENT_7 . IDENT_8 > IDENT_9 = ( ( org . locationtech . IDENT_0 . core . store . IDENT_6 ) ( IDENT_10 . query ( org . locationtech . IDENT_0 . core . store . api . IDENT_11 . METHOD_4 ( ) . METHOD_5 ( adapter . METHOD_6 ( ) ) . METHOD_7 ( index . getName ( ) ) . METHOD_8 ( IDENT_3 ) . build ( ) ) ) ) ; "<AssertPlaceHolder>" ; } hasNext ( ) { double IDENT_12 = - 1 ; org . locationtech . IDENT_0 . core . store . api . IDENT_13 IDENT_14 = null ; while ( ( ! ( IDENT_15 ) ) && ( ( i ) < ( IDENT_16 . length ) ) ) { IDENT_17 = IDENT_16 [ ( ( i ) ++ ) ] ; if ( ( IDENT_17 . METHOD_9 ( ) . METHOD_10 ( ) . length ) == 0 ) { continue ; } final java . util . List < org . locationtech . IDENT_0 . core . index . IDENT_18 . data . IDENT_19 > IDENT_20 = query . METHOD_11 ( IDENT_17 ) ; if ( org . locationtech . IDENT_0 . core . index . IDENT_21 . METHOD_12 ( IDENT_20 ) ) { if ( IDENT_14 == null ) { IDENT_14 = IDENT_17 ; } } else { double IDENT_22 = 0 ; for ( final org . locationtech . IDENT_0 . core . index . IDENT_18 . data . IDENT_19 IDENT_23 : IDENT_20 ) { final double [ ] IDENT_24 = new double [ IDENT_23 . METHOD_13 ( ) ] ; for ( int d = 0 ; d < ( IDENT_24 . length ) ; d ++ ) { IDENT_24 [ d ] = ( IDENT_23 . METHOD_14 ( ) [ d ] ) - ( IDENT_23 . METHOD_15 ( ) [ d ] ) ; } IDENT_22 += org . locationtech . IDENT_0 . core . index . IDENT_21 . METHOD_16 ( IDENT_17 . METHOD_9 ( ) , IDENT_24 ) ; } if ( IDENT_22 > IDENT_12 ) { IDENT_12 = IDENT_22 ; IDENT_14 = IDENT_17 ; } } } IDENT_17 = IDENT_14 ; IDENT_15 = true ; return ( IDENT_17 ) != null ; }
org . junit . Assert . assertFalse ( IDENT_9 . hasNext ( ) ) 