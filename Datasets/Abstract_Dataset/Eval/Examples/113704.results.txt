METHOD_0 ( ) { try { net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . RuntimeException e ) { net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 IDENT_6 = org . mockito . Mockito . mock ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . class ) ; java . util . List < java . lang . String > IDENT_7 = java . util . Arrays . asList ( STRING_0 , STRING_1 ) ; org . mockito . Mockito . when ( IDENT_6 . METHOD_2 ( any ( java . lang . Throwable . class ) ) ) . thenReturn ( new java . util . IDENT_8 < java . lang . String > ( IDENT_7 ) ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 converter = new net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( ) ; converter . METHOD_4 ( true ) ; converter . start ( ) ; converter . METHOD_5 ( IDENT_6 ) ; java . lang . String IDENT_10 = converter . convert ( METHOD_6 ( e ) ) ; java . util . List < java . lang . String > IDENT_11 = METHOD_7 ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } } METHOD_7 ( java . lang . String ) { java . util . regex . IDENT_12 IDENT_13 = java . util . regex . IDENT_12 . METHOD_8 ( STRING_2 ) ; java . util . regex . IDENT_14 matcher = IDENT_13 . matcher ( IDENT_15 ) ; java . util . List < java . lang . String > IDENT_16 = new java . util . ArrayList < java . lang . String > ( ) ; while ( matcher . find ( ) ) { IDENT_16 . add ( matcher . group ( 1 ) ) ; } return IDENT_16 ; }
org . junit . Assert . assertArrayEquals ( IDENT_7 . toArray ( ) , IDENT_11 . toArray ( ) ) 