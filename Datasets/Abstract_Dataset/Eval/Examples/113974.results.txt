METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = IDENT_4 . METHOD_1 ( test . IDENT_5 . Arrays . asList ( new IDENT_0 . IDENT_1 . METHOD_2 ( STRING_0 ) , new IDENT_0 . IDENT_1 . METHOD_2 ( STRING_1 ) , new IDENT_0 . IDENT_1 . METHOD_2 ( STRING_2 ) ) ) ; test . IDENT_5 . IDENT_6 < java . lang . IDENT_7 > IDENT_8 = new test . IDENT_5 . IDENT_6 < java . lang . IDENT_7 > ( ) ; IDENT_8 . add ( STRING_0 ) ; IDENT_8 . add ( STRING_1 ) ; test . IDENT_5 . Collection < test . IDENT_5 . IDENT_9 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > > IDENT_10 = new test . IDENT_5 . IDENT_6 < test . IDENT_5 . IDENT_9 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > > ( ) ; IDENT_10 . add ( new test . IDENT_5 . METHOD_3 ( 0 , 1 , IDENT_3 , 0 , IDENT_8 . size ( ) ) ) ; test . IDENT_5 . IDENT_5 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > IDENT_11 = test . IDENT_5 . IDENT_5 . METHOD_4 ( IDENT_10 , 0 , test . IDENT_5 . Collections . METHOD_5 ( 1 ) , IDENT_8 , IDENT_4 ) ; test . IDENT_5 . IDENT_6 < java . lang . IDENT_7 > IDENT_12 = new test . IDENT_5 . IDENT_6 < java . lang . IDENT_7 > ( ) ; IDENT_12 . add ( STRING_2 ) ; IDENT_12 . add ( STRING_3 ) ; test . IDENT_5 . Collection < test . IDENT_5 . IDENT_9 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > > IDENT_13 = new test . IDENT_5 . IDENT_6 < test . IDENT_5 . IDENT_9 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > > ( ) ; IDENT_13 . add ( new test . IDENT_5 . METHOD_6 ( 0 , 1 , IDENT_3 , 0 ) ) ; test . IDENT_5 . IDENT_5 < IDENT_0 . IDENT_1 . METHOD_2 , java . lang . IDENT_7 > IDENT_14 = test . IDENT_5 . IDENT_5 . METHOD_4 ( IDENT_13 , 0 , new test . IDENT_5 . METHOD_7 ( ) , IDENT_12 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( IDENT_15 . IDENT_16 . IDENT_5 , IDENT_15 . IDENT_16 . IDENT_5 , IDENT_0 . IDENT_17 , boolean , long ) { if ( IDENT_18 . isEmpty ) { if ( IDENT_19 && ( ! ( IDENT_20 . isEmpty ) ) ) return false ; return true ; } if ( ! ( IDENT_18 . IDENT_21 ) ) IDENT_18 = IDENT_18 . METHOD_9 ( IDENT_4 , IDENT_22 ) ; if ( ! ( IDENT_20 . IDENT_21 ) ) IDENT_20 = IDENT_20 . METHOD_9 ( IDENT_4 , IDENT_22 ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , java . lang . Integer > IDENT_23 = new IDENT_15 . IDENT_16 . HashMap ( ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , java . lang . Integer > IDENT_24 = new IDENT_15 . IDENT_16 . HashMap ( ) ; for ( java . lang . Integer IDENT_25 = 0 ; IDENT_25 < ( IDENT_18 . IDENT_26 . size ( ) ) ; IDENT_25 ++ ) { for ( java . lang . Integer IDENT_27 = 0 ; IDENT_27 < ( IDENT_20 . IDENT_26 . size ( ) ) ; IDENT_27 ++ ) { IDENT_28 IDENT_29 = IDENT_18 . IDENT_26 . get ( IDENT_25 ) ; IDENT_28 IDENT_30 = IDENT_20 . IDENT_26 . get ( IDENT_27 ) ; if ( ( IDENT_29 != null ) && ( IDENT_29 . equals ( IDENT_30 ) ) ) { IDENT_23 . put ( IDENT_25 , IDENT_27 ) ; IDENT_24 . put ( IDENT_27 , IDENT_25 ) ; } } } IDENT_15 . IDENT_16 . HashSet < IDENT_31 > IDENT_32 = IDENT_18 . METHOD_10 ( IDENT_22 ) ; for ( IDENT_31 IDENT_33 : IDENT_20 . METHOD_10 ( IDENT_22 ) ) IDENT_32 . add ( IDENT_33 ) ; for ( IDENT_28 IDENT_34 : IDENT_18 . IDENT_26 ) if ( IDENT_34 != null ) { IDENT_31 IDENT_35 = IDENT_4 . METHOD_11 ( IDENT_34 ) ; IDENT_32 . add ( IDENT_35 ) ; } for ( IDENT_28 IDENT_34 : IDENT_20 . IDENT_26 ) if ( IDENT_34 != null ) { IDENT_31 IDENT_35 = IDENT_4 . METHOD_11 ( IDENT_34 ) ; IDENT_32 . add ( IDENT_4 . METHOD_11 ( IDENT_34 ) ) ; } IDENT_15 . IDENT_16 . ArrayList < IDENT_31 > IDENT_36 = new IDENT_15 . IDENT_16 . ArrayList ( IDENT_32 ) ; IDENT_15 . IDENT_16 . IDENT_6 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_37 < IDENT_31 > > IDENT_38 = new IDENT_15 . IDENT_16 . METHOD_12 ( ) ; for ( IDENT_15 . IDENT_16 . IDENT_39 < IDENT_31 , IDENT_15 . IDENT_16 . ArrayList < java . lang . Integer > > IDENT_40 : IDENT_4 . METHOD_13 ( IDENT_36 ) ) IDENT_38 . add ( new IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 ( IDENT_40 . first , IDENT_40 . IDENT_41 ) ) ; IDENT_15 . IDENT_16 . HashMap < IDENT_31 , IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 < IDENT_31 > > > IDENT_42 = IDENT_15 . IDENT_16 . IDENT_5 . METHOD_15 ( IDENT_36 , IDENT_38 ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 < IDENT_31 > > IDENT_43 = IDENT_18 . METHOD_16 ( IDENT_36 , IDENT_4 , IDENT_42 ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 < IDENT_31 > > IDENT_44 = IDENT_20 . METHOD_16 ( IDENT_36 , IDENT_4 , IDENT_42 ) ; IDENT_15 . IDENT_16 . IDENT_5 . IDENT_45 < IDENT_31 > IDENT_46 = new IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 ( IDENT_18 . IDENT_47 , IDENT_43 ) ; IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 < IDENT_31 > IDENT_48 = new IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 ( IDENT_20 . IDENT_47 , IDENT_44 ) ; IDENT_15 . IDENT_16 . IDENT_5 . IDENT_49 < IDENT_31 > IDENT_50 = new IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 ( IDENT_46 , IDENT_48 , IDENT_23 , null , null , null ) ; IDENT_15 . IDENT_16 . HashMap < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > , java . lang . Integer > IDENT_51 = new IDENT_15 . IDENT_16 . HashMap ( ) ; IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > > IDENT_52 = new IDENT_15 . IDENT_16 . METHOD_12 ( ) ; IDENT_52 . add ( IDENT_50 ) ; IDENT_51 . put ( IDENT_50 , 0 ) ; IDENT_15 . IDENT_16 . HashMap < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 < IDENT_31 > , IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > > IDENT_54 = new IDENT_15 . IDENT_16 . HashMap ( ) ; IDENT_15 . IDENT_16 . HashMap < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 < IDENT_31 > , IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > > IDENT_55 = new IDENT_15 . IDENT_16 . HashMap ( ) ; while ( ! ( IDENT_52 . isEmpty ( ) ) ) { IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > IDENT_56 = IDENT_52 . METHOD_19 ( ) ; IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 < IDENT_31 > IDENT_57 = IDENT_56 . METHOD_20 ( ) ; IDENT_15 . IDENT_16 . IDENT_5 . METHOD_17 < IDENT_31 > IDENT_58 = IDENT_56 . METHOD_21 ( ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , java . lang . Integer > IDENT_59 = IDENT_56 . METHOD_22 ( ) ; if ( ( IDENT_18 . IDENT_60 . contains ( IDENT_57 . METHOD_23 ( ) ) ) && ( ! ( IDENT_20 . IDENT_60 . contains ( IDENT_58 . METHOD_23 ( ) ) ) ) ) { return false ; } if ( IDENT_19 ) if ( ( IDENT_20 . IDENT_60 . contains ( IDENT_58 . METHOD_23 ( ) ) ) && ( ! ( IDENT_18 . IDENT_60 . contains ( IDENT_57 . METHOD_23 ( ) ) ) ) ) { return false ; } IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 < IDENT_31 > > IDENT_61 = IDENT_57 . METHOD_24 ( ) ; IDENT_15 . IDENT_16 . HashMap < java . lang . Integer , IDENT_15 . IDENT_16 . IDENT_5 . METHOD_14 < IDENT_31 > > IDENT_62 = IDENT_58 . METHOD_24 ( ) ; IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > IDENT_63 ; IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > IDENT_64 ; if ( IDENT_54 . containsKey ( IDENT_57 ) ) IDENT_63 = IDENT_54 . get ( IDENT_57 ) ; else { IDENT_63 = new IDENT_15 . IDENT_16 . METHOD_12 ( ) ; for ( IDENT_15 . IDENT_16 . IDENT_9 < IDENT_31 , IDENT_28 > IDENT_65 : IDENT_18 . METHOD_25 ( IDENT_57 . METHOD_23 ( ) ) ) { IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > IDENT_66 = IDENT_15 . IDENT_16 . IDENT_5 . METHOD_26 ( IDENT_4 , IDENT_61 , IDENT_42 , IDENT_65 , IDENT_57 ) ; IDENT_63 . addAll ( IDENT_66 ) ; } IDENT_54 . put ( IDENT_57 , IDENT_63 ) ; } if ( ( ! IDENT_19 ) && ( IDENT_63 . isEmpty ( ) ) ) continue ; if ( IDENT_55 . containsKey ( IDENT_58 ) ) IDENT_64 = IDENT_55 . get ( IDENT_58 ) ; else { IDENT_64 = new IDENT_15 . IDENT_16 . METHOD_12 ( ) ; for ( IDENT_15 . IDENT_16 . IDENT_9 < IDENT_31 , IDENT_28 > IDENT_65 : IDENT_20 . METHOD_25 ( IDENT_58 . METHOD_23 ( ) ) ) { IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . IDENT_53 < IDENT_31 > > IDENT_66 = IDENT_15 . IDENT_16 . IDENT_5 . METHOD_26 ( IDENT_4 , IDENT_62 , IDENT_42 , IDENT_65 , IDENT_58 ) ; IDENT_64 . addAll ( IDENT_66 ) ; } IDENT_55 . put ( IDENT_58 , IDENT_64 ) ; } IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > > IDENT_67 = IDENT_15 . IDENT_16 . IDENT_5 . METHOD_27 ( IDENT_4 , IDENT_63 , IDENT_64 , IDENT_59 , IDENT_61 , IDENT_62 ) ; if ( IDENT_67 == null ) { return false ; } if ( IDENT_19 ) { if ( IDENT_64 . isEmpty ( ) ) continue ; IDENT_15 . IDENT_16 . METHOD_12 < IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > > IDENT_68 = IDENT_15 . IDENT_16 . IDENT_5 . METHOD_27 ( IDENT_4 , IDENT_64 , IDENT_63 , IDENT_15 . IDENT_16 . IDENT_5 . METHOD_28 ( IDENT_59 ) , IDENT_62 , IDENT_61 ) ; if ( IDENT_68 == null ) { return false ; } } for ( IDENT_15 . IDENT_16 . IDENT_5 . METHOD_18 < IDENT_31 > IDENT_69 : IDENT_67 ) { IDENT_69 . IDENT_70 = IDENT_56 ; IDENT_15 . IDENT_16 . IDENT_5 . METHOD_23 ( IDENT_69 , IDENT_51 , IDENT_52 ) ; } } return true ; }
org . junit . Assert . assertFalse ( test . IDENT_5 . IDENT_5 . METHOD_8 ( IDENT_11 , IDENT_14 , IDENT_4 , true , Long . MAX_VALUE ) ) 