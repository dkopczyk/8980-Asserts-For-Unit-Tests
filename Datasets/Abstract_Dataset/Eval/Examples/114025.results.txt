METHOD_0 ( ) { java . lang . String data = "" ; com . IDENT_0 . IDENT_1 reader = com . IDENT_0 . IDENT_1 . parse ( data ) ; "<AssertPlaceHolder>" ; reader . close ( ) ; } METHOD_1 ( ) { METHOD_2 ( ) ; IDENT_2 = 0 ; IDENT_3 . IDENT_4 = 0 ; IDENT_5 . IDENT_6 = IDENT_5 . IDENT_4 ; IDENT_7 = false ; if ( IDENT_8 ) { do { if ( ( IDENT_5 . IDENT_4 ) == ( IDENT_5 . IDENT_9 ) ) { METHOD_3 ( ) ; } else { IDENT_10 = false ; char IDENT_11 = IDENT_5 . IDENT_12 [ IDENT_5 . IDENT_4 ] ; if ( ( IDENT_13 . IDENT_14 ) && ( IDENT_11 == ( IDENT_13 . IDENT_15 ) ) ) { IDENT_16 = IDENT_11 ; IDENT_17 = true ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; IDENT_10 = true ; boolean IDENT_19 = false ; char IDENT_20 = IDENT_13 . IDENT_15 ; if ( ( IDENT_13 . IDENT_21 ) == ( com . IDENT_0 . IDENT_1 . IDENT_22 ) ) { IDENT_20 = com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_24 ; } boolean IDENT_25 = false ; boolean IDENT_26 = false ; boolean IDENT_27 = false ; int IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 ; int IDENT_31 = 0 ; char IDENT_32 = ( ( char ) ( 0 ) ) ; ( IDENT_5 . IDENT_4 ) ++ ; do { if ( ( IDENT_5 . IDENT_4 ) == ( IDENT_5 . IDENT_9 ) ) { METHOD_3 ( ) ; } else { IDENT_11 = IDENT_5 . IDENT_12 [ IDENT_5 . IDENT_4 ] ; if ( IDENT_25 ) { IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; if ( IDENT_11 == ( IDENT_13 . IDENT_33 ) ) { METHOD_4 ( ) ; } else if ( ( ( ! ( IDENT_34 ) ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) || ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ) ) ) || ( ( IDENT_34 ) && ( IDENT_11 == ( IDENT_13 . IDENT_37 ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } } else if ( IDENT_27 ) { IDENT_31 ++ ; switch ( IDENT_28 ) { case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 : IDENT_32 OP_0 ( ( char ) ( 16 ) ) ; IDENT_32 += com . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_11 ) ; if ( IDENT_31 == 4 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 : IDENT_32 OP_0 ( ( char ) ( 8 ) ) ; IDENT_32 += ( ( char ) ( IDENT_11 - STRING_0 ) ) ; if ( IDENT_31 == 3 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_39 : IDENT_32 OP_0 ( ( char ) ( 10 ) ) ; IDENT_32 += ( ( char ) ( IDENT_11 - STRING_0 ) ) ; if ( IDENT_31 == 3 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_40 : IDENT_32 OP_0 ( ( char ) ( 16 ) ) ; IDENT_32 += com . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_11 ) ; if ( IDENT_31 == 2 ) { IDENT_27 = false ; } break ; } if ( ! IDENT_27 ) { METHOD_7 ( IDENT_32 ) ; } else { IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; } } else if ( IDENT_11 == ( IDENT_13 . IDENT_15 ) ) { if ( IDENT_26 ) { IDENT_26 = false ; IDENT_19 = false ; } else { METHOD_8 ( ) ; if ( ( IDENT_13 . IDENT_21 ) == ( com . IDENT_0 . IDENT_1 . IDENT_41 ) ) { IDENT_26 = true ; } IDENT_19 = true ; } } else if ( ( ( IDENT_13 . IDENT_21 ) == ( com . IDENT_0 . IDENT_1 . IDENT_22 ) ) && IDENT_26 ) { switch ( IDENT_11 ) { case STRING_1 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ; break ; case STRING_2 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ; break ; case STRING_3 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_42 ) ; break ; case STRING_4 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_43 ) ; break ; case STRING_5 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_44 ) ; break ; case STRING_6 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_45 ) ; break ; case STRING_7 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_46 ) ; break ; case STRING_8 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_47 ) ; break ; case STRING_0 : case STRING_9 : case STRING_10 : case STRING_11 : case STRING_12 : case STRING_13 : case STRING_14 : case STRING_15 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 ; IDENT_27 = true ; IDENT_31 = 1 ; IDENT_32 = ( ( char ) ( IDENT_11 - STRING_0 ) ) ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; break ; case STRING_16 : case STRING_17 : case STRING_18 : case STRING_19 : case STRING_20 : case STRING_21 : case STRING_22 : case STRING_23 : switch ( IDENT_11 ) { case STRING_16 : case STRING_20 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 ; break ; case STRING_17 : case STRING_21 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_40 ; break ; case STRING_18 : case STRING_22 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 ; break ; case STRING_19 : case STRING_23 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_39 ; break ; } IDENT_27 = true ; IDENT_31 = 0 ; IDENT_32 = ( ( char ) ( 0 ) ) ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; break ; default : break ; } IDENT_26 = false ; } else if ( IDENT_11 == IDENT_20 ) { METHOD_8 ( ) ; IDENT_26 = true ; } else { if ( IDENT_19 ) { if ( IDENT_11 == ( IDENT_13 . IDENT_33 ) ) { METHOD_4 ( ) ; } else if ( ( ( ! ( IDENT_34 ) ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) || ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ) ) ) || ( ( IDENT_34 ) && ( IDENT_11 == ( IDENT_13 . IDENT_37 ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } else { IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; IDENT_25 = true ; } IDENT_19 = false ; } } IDENT_16 = IDENT_11 ; if ( IDENT_17 ) { ( IDENT_5 . IDENT_4 ) ++ ; if ( ( IDENT_13 . IDENT_48 ) && ( ( ( ( IDENT_5 . IDENT_4 ) - ( IDENT_5 . IDENT_18 ) ) + ( IDENT_49 . IDENT_4 ) ) > INT_0 ) ) { close ( ) ; throw new java . io . IOException ( ( ( ( ( ( ( STRING_24 + ( java . text . IDENT_50 . METHOD_9 ( ) . format ( IDENT_2 ) ) ) + STRING_25 ) + ( java . text . IDENT_50 . METHOD_9 ( ) . format ( IDENT_51 ) ) ) + STRING_26 ) + STRING_27 ) + STRING_28 ) ) ; } } } } while ( ( IDENT_8 ) && ( IDENT_17 ) ) ; } else if ( IDENT_11 == ( IDENT_13 . IDENT_33 ) ) { IDENT_16 = IDENT_11 ; METHOD_4 ( ) ; } else if ( ( IDENT_34 ) && ( IDENT_11 == ( IDENT_13 . IDENT_37 ) ) ) { if ( ( ( IDENT_17 ) || ( ( IDENT_2 ) > 0 ) ) || ( ! ( IDENT_13 . IDENT_52 ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } else { IDENT_5 . IDENT_6 = ( IDENT_5 . IDENT_4 ) + 1 ; } IDENT_16 = IDENT_11 ; } else if ( ( ! ( IDENT_34 ) ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) || ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ) ) ) { if ( ( ( IDENT_17 ) || ( ( IDENT_2 ) > 0 ) ) || ( ( ! ( IDENT_13 . IDENT_52 ) ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) || ( ( IDENT_16 ) != ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } else { IDENT_5 . IDENT_6 = ( IDENT_5 . IDENT_4 ) + 1 ; } IDENT_16 = IDENT_11 ; } else if ( ( ( IDENT_13 . IDENT_53 ) && ( ( IDENT_2 ) == 0 ) ) && ( IDENT_11 == ( IDENT_13 . IDENT_54 ) ) ) { IDENT_16 = IDENT_11 ; METHOD_10 ( ) ; } else if ( ( IDENT_13 . IDENT_55 ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_56 ) ) || ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_42 ) ) ) ) { IDENT_17 = true ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; } else { IDENT_17 = true ; IDENT_5 . IDENT_18 = IDENT_5 . IDENT_4 ; boolean IDENT_57 = false ; boolean IDENT_27 = false ; int IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 ; int IDENT_31 = 0 ; char IDENT_32 = ( ( char ) ( 0 ) ) ; boolean IDENT_58 = true ; do { if ( ( ! IDENT_58 ) && ( ( IDENT_5 . IDENT_4 ) == ( IDENT_5 . IDENT_9 ) ) ) { METHOD_3 ( ) ; } else { if ( ! IDENT_58 ) { IDENT_11 = IDENT_5 . IDENT_12 [ IDENT_5 . IDENT_4 ] ; } if ( ( ( ! ( IDENT_13 . IDENT_14 ) ) && ( ( IDENT_13 . IDENT_21 ) == ( com . IDENT_0 . IDENT_1 . IDENT_22 ) ) ) && ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_24 ) ) ) { if ( IDENT_57 ) { IDENT_57 = false ; } else { METHOD_8 ( ) ; IDENT_57 = true ; } } else if ( IDENT_27 ) { IDENT_31 ++ ; switch ( IDENT_28 ) { case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 : IDENT_32 OP_0 ( ( char ) ( 16 ) ) ; IDENT_32 += com . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_11 ) ; if ( IDENT_31 == 4 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 : IDENT_32 OP_0 ( ( char ) ( 8 ) ) ; IDENT_32 += ( ( char ) ( IDENT_11 - STRING_0 ) ) ; if ( IDENT_31 == 3 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_39 : IDENT_32 OP_0 ( ( char ) ( 10 ) ) ; IDENT_32 += ( ( char ) ( IDENT_11 - STRING_0 ) ) ; if ( IDENT_31 == 3 ) { IDENT_27 = false ; } break ; case com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_40 : IDENT_32 OP_0 ( ( char ) ( 16 ) ) ; IDENT_32 += com . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_11 ) ; if ( IDENT_31 == 2 ) { IDENT_27 = false ; } break ; } if ( ! IDENT_27 ) { METHOD_7 ( IDENT_32 ) ; } else { IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; } } else if ( ( ( IDENT_13 . IDENT_21 ) == ( com . IDENT_0 . IDENT_1 . IDENT_22 ) ) && IDENT_57 ) { switch ( IDENT_11 ) { case STRING_1 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ; break ; case STRING_2 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ; break ; case STRING_3 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_42 ) ; break ; case STRING_4 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_43 ) ; break ; case STRING_5 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_44 ) ; break ; case STRING_6 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_45 ) ; break ; case STRING_7 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_46 ) ; break ; case STRING_8 : METHOD_7 ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_47 ) ; break ; case STRING_0 : case STRING_9 : case STRING_10 : case STRING_11 : case STRING_12 : case STRING_13 : case STRING_14 : case STRING_15 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 ; IDENT_27 = true ; IDENT_31 = 1 ; IDENT_32 = ( ( char ) ( IDENT_11 - STRING_0 ) ) ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; break ; case STRING_16 : case STRING_17 : case STRING_18 : case STRING_19 : case STRING_20 : case STRING_21 : case STRING_22 : case STRING_23 : switch ( IDENT_11 ) { case STRING_16 : case STRING_20 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_30 ; break ; case STRING_17 : case STRING_21 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_40 ; break ; case STRING_18 : case STRING_22 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_38 ; break ; case STRING_19 : case STRING_23 : IDENT_28 = com . IDENT_0 . IDENT_1 . IDENT_29 . IDENT_39 ; break ; } IDENT_27 = true ; IDENT_31 = 0 ; IDENT_32 = ( ( char ) ( 0 ) ) ; IDENT_5 . IDENT_18 = ( IDENT_5 . IDENT_4 ) + 1 ; break ; default : break ; } IDENT_57 = false ; } else { if ( IDENT_11 == ( IDENT_13 . IDENT_33 ) ) { METHOD_4 ( ) ; } else if ( ( ( ! ( IDENT_34 ) ) && ( ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_35 ) ) || ( IDENT_11 == ( com . IDENT_0 . IDENT_1 . IDENT_23 . IDENT_36 ) ) ) ) || ( ( IDENT_34 ) && ( IDENT_11 == ( IDENT_13 . IDENT_37 ) ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } } IDENT_16 = IDENT_11 ; IDENT_58 = false ; if ( IDENT_17 ) { ( IDENT_5 . IDENT_4 ) ++ ; if ( ( IDENT_13 . IDENT_48 ) && ( ( ( ( IDENT_5 . IDENT_4 ) - ( IDENT_5 . IDENT_18 ) ) + ( IDENT_49 . IDENT_4 ) ) > INT_0 ) ) { close ( ) ; throw new java . io . IOException ( ( ( ( ( ( ( STRING_24 + ( java . text . IDENT_50 . METHOD_9 ( ) . format ( IDENT_2 ) ) ) + STRING_25 ) + ( java . text . IDENT_50 . METHOD_9 ( ) . format ( IDENT_51 ) ) ) + STRING_26 ) + STRING_27 ) + STRING_28 ) ) ; } } } } while ( ( IDENT_8 ) && ( IDENT_17 ) ) ; } if ( IDENT_8 ) { ( IDENT_5 . IDENT_4 ) ++ ; } } } while ( ( IDENT_8 ) && ( ! ( IDENT_7 ) ) ) ; if ( ( IDENT_17 ) || ( ( IDENT_16 ) == ( IDENT_13 . IDENT_33 ) ) ) { METHOD_4 ( ) ; METHOD_5 ( ) ; } } if ( IDENT_13 . IDENT_59 ) { if ( IDENT_8 ) { if ( ( IDENT_3 . IDENT_4 ) == 0 ) { IDENT_60 = new java . lang . String ( IDENT_5 . IDENT_12 , IDENT_5 . IDENT_6 , ( ( ( IDENT_5 . IDENT_4 ) - ( IDENT_5 . IDENT_6 ) ) - 1 ) ) ; } else { IDENT_60 = ( new java . lang . String ( IDENT_3 . IDENT_12 , 0 , IDENT_3 . IDENT_4 ) ) + ( new java . lang . String ( IDENT_5 . IDENT_12 , IDENT_5 . IDENT_6 , ( ( ( IDENT_5 . IDENT_4 ) - ( IDENT_5 . IDENT_6 ) ) - 1 ) ) ) ; } } else { IDENT_60 = new java . lang . String ( IDENT_3 . IDENT_12 , 0 , IDENT_3 . IDENT_4 ) ; } } else { IDENT_60 = "" ; } return IDENT_7 ; }
org . junit . Assert . assertFalse ( reader . METHOD_1 ( ) ) 