METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . util . Locale IDENT_0 = java . util . Locale . IDENT_1 ; fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 [ ] beans = new fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 [ ] { new fr . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_1 ( ) , new fr . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_2 ( ) } ; for ( int i = 0 ; i < ( beans . length ) ; i ++ ) { fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 bean = beans [ i ] ; bean . setName ( STRING_1 ) ; bean . METHOD_3 ( STRING_2 ) ; bean . METHOD_4 ( STRING_3 ) ; long IDENT_6 = new java . util . Date ( ) . getTime ( ) ; bean . METHOD_5 ( new java . sql . Date ( ( IDENT_6 + INT_0 ) ) ) ; bean . METHOD_6 ( new java . sql . Date ( ( IDENT_6 - INT_0 ) ) ) ; bean . METHOD_7 ( new java . math . BigDecimal ( STRING_4 ) ) ; bean . METHOD_8 ( new java . math . BigDecimal ( STRING_5 ) ) ; bean . METHOD_9 ( STRING_6 ) ; bean . METHOD_10 ( STRING_7 ) ; java . util . List < fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_7 > list = fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_8 . validate ( bean , IDENT_0 , STRING_8 ) ; "<AssertPlaceHolder>" ; for ( fr . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_7 error : list ) { System . out . println ( error . getMessage ( ) ) ; } } } size ( ) { return IDENT_9 . size ( ) ; }
org . junit . Assert . assertTrue ( ( ( list . size ( ) ) > 0 ) ) 