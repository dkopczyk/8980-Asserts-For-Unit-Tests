METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . String > IDENT_3 = com . IDENT_0 . IDENT_1 . IDENT_4 . apply ( "a" , "b" ) ; com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Integer > IDENT_5 = com . IDENT_0 . IDENT_1 . IDENT_4 . apply ( 1 , 2 , 3 , 4 , 5 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Long > IDENT_6 = com . IDENT_0 . IDENT_1 . IDENT_4 . apply ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Boolean > IDENT_7 = com . IDENT_0 . IDENT_1 . IDENT_8 . apply ( false ) ; com . IDENT_0 . IDENT_1 . IDENT_4 < java . lang . String > rs = com . IDENT_0 . IDENT_1 . IDENT_9 . apply ( IDENT_3 , IDENT_5 , IDENT_6 , IDENT_7 ) . METHOD_1 ( new com . IDENT_0 . IDENT_1 . IDENT_10 < com . IDENT_0 . IDENT_1 . IDENT_11 < java . lang . String , java . lang . Integer , java . lang . Long , java . lang . Boolean > , java . lang . String > ( ) { public java . lang . String apply ( com . IDENT_0 . IDENT_1 . IDENT_11 < java . lang . String , java . lang . Integer , java . lang . Long , java . lang . Boolean > t ) throws com . IDENT_0 . IDENT_1 . Exception { return ( ( ( t . METHOD_2 ( ) ) + ( t . METHOD_3 ( ) ) ) + ( t . METHOD_4 ( ) ) ) + ( t . METHOD_5 ( ) ) ; } } ) ; "<AssertPlaceHolder>" ; } size ( ) { return 0 ; }
org . junit . Assert . assertThat ( rs . size ( ) , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( 0 ) ) ) 