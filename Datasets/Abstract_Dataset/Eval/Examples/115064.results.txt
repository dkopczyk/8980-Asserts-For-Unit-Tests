METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( ( ( ( ( IDENT_1 ) || ( IDENT_2 ) ) || ( org . eclipse . swt . tests . junit . IDENT_3 . IDENT_4 ) ) || ( org . eclipse . swt . tests . junit . IDENT_3 . IDENT_5 ) ) ) ; java . util . concurrent . atomic . IDENT_6 IDENT_7 = new java . util . concurrent . atomic . METHOD_2 ( false ) ; java . util . concurrent . atomic . METHOD_2 IDENT_8 = new java . util . concurrent . atomic . METHOD_2 ( false ) ; IDENT_9 . METHOD_3 ( new org . eclipse . swt . IDENT_9 . METHOD_4 ( ) { @ org . eclipse . swt . tests . junit . Override public void METHOD_5 ( org . eclipse . swt . IDENT_9 . IDENT_10 event ) { IDENT_9 . evaluate ( STRING_0 ) ; IDENT_7 . set ( true ) ; } @ org . eclipse . swt . tests . junit . Override public void METHOD_6 ( org . eclipse . swt . IDENT_9 . IDENT_10 event ) { IDENT_9 . evaluate ( STRING_1 ) ; IDENT_8 . set ( true ) ; } } ) ; shell . METHOD_7 ( ) ; if ( IDENT_2 ) { IDENT_9 . METHOD_8 ( STRING_2 ) ; } else { IDENT_9 . METHOD_9 ( STRING_3 ) ; } if ( ( org . eclipse . swt . tests . junit . IDENT_3 . IDENT_5 ) && ( ! ( IDENT_2 ) ) ) { METHOD_10 ( IDENT_7 :: get ) ; } else METHOD_10 ( ( ) -> ( IDENT_7 . get ( ) ) && ( IDENT_8 . get ( ) ) ) ; java . lang . Boolean METHOD_6 = false ; try { METHOD_6 = ( ( java . lang . Boolean ) ( IDENT_9 . evaluate ( STRING_4 ) ) ) ; } catch ( org . eclipse . swt . IDENT_11 e ) { } java . lang . Boolean METHOD_5 = false ; try { METHOD_5 = ( ( java . lang . Boolean ) ( IDENT_9 . evaluate ( STRING_5 ) ) ) ; } catch ( org . eclipse . swt . IDENT_11 e ) { } java . lang . String IDENT_12 = ( ( ( ( ( ( STRING_6 + ( IDENT_7 . get ( ) ) ) + STRING_7 ) + METHOD_5 ) + STRING_8 ) + ( IDENT_8 . get ( ) ) ) + STRING_7 ) + METHOD_6 ; boolean IDENT_13 = false ; if ( IDENT_1 ) { IDENT_13 = ( ( ( IDENT_7 . get ( ) ) && ( IDENT_8 . get ( ) ) ) && METHOD_6 ) && METHOD_5 ; } else if ( ( IDENT_14 ) || ( IDENT_2 ) ) { IDENT_13 = ( ( IDENT_7 . get ( ) ) && ( IDENT_8 . get ( ) ) ) && METHOD_6 ; } else if ( org . eclipse . swt . tests . junit . IDENT_3 . IDENT_4 ) { IDENT_13 = ( ( IDENT_7 . get ( ) ) && ( IDENT_8 . get ( ) ) ) && METHOD_6 ; } else if ( org . eclipse . swt . tests . junit . IDENT_3 . IDENT_5 ) { IDENT_13 = IDENT_7 . get ( ) ; } "<AssertPlaceHolder>" ; } evaluate ( java . lang . String ) { if ( ( org . eclipse . swt . IDENT_15 . IDENT_16 . lib ) == null ) { org . eclipse . swt . IDENT_17 . error ( IDENT_17 . IDENT_18 ) ; } if ( ! ( IDENT_19 ) ) { return null ; } if ( ( IDENT_9 ) == null ) { if ( ( IDENT_20 ) != null ) { IDENT_15 . METHOD_11 ( IDENT_20 ) ; IDENT_20 = null ; METHOD_12 ( ) ; } } java . lang . Object [ ] ret = new java . lang . Object [ 1 ] ; org . eclipse . swt . internal . IDENT_15 . IDENT_21 . IDENT_22 IDENT_23 = ( IDENT_24 , type , value ) -> { if ( IDENT_24 == 1 ) { if ( ! ( ( org . eclipse . swt . IDENT_15 . IDENT_16 . IDENT_25 ) && ( ( STRING_9 . equals ( org . eclipse . swt . IDENT_17 . METHOD_13 ( ) ) ) || ( STRING_10 . equals ( org . eclipse . swt . IDENT_17 . METHOD_13 ( ) ) ) ) ) ) { IDENT_15 . METHOD_14 ( ) . METHOD_15 ( ) ; } if ( ! ( org . eclipse . swt . IDENT_15 . IDENT_16 . IDENT_25 ) ) { } } else { ret [ 0 ] = METHOD_16 ( type , value ) ; } } ; java . lang . StringBuilder buffer = new java . lang . StringBuilder ( STRING_11 ) ; buffer . append ( "\n" ) ; buffer . append ( script ) ; buffer . append ( STRING_12 ) ; METHOD_17 ( ) ; boolean IDENT_26 = org . eclipse . swt . IDENT_15 . IDENT_16 . lib . METHOD_18 ( IDENT_9 , buffer . toString ( ) , ( ( org . eclipse . swt . IDENT_15 . IDENT_16 . IDENT_27 ) ++ ) , IDENT_23 ) ; if ( ! IDENT_26 ) { throw new org . eclipse . swt . METHOD_19 ( STRING_13 ) ; } return ret [ 0 ] ; }
org . junit . Assert . assertTrue ( IDENT_12 , IDENT_13 ) 