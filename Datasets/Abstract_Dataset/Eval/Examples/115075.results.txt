METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( METHOD_2 ( ) , IDENT_1 ) ; final java . util . concurrent . atomic . IDENT_2 < java . lang . Object > IDENT_3 = new java . util . concurrent . atomic . METHOD_3 ( 3 ) ; IDENT_3 . set ( 0 , STRING_0 ) ; IDENT_4 . METHOD_4 ( org . eclipse . swt . IDENT_4 . IDENT_5 . METHOD_5 ( ( event ) -> { java . lang . Object [ ] IDENT_6 = ( ( java . lang . Object [ ] ) ( IDENT_4 . evaluate ( STRING_1 ) ) ) ; IDENT_3 . set ( 2 , IDENT_6 [ 2 ] ) ; IDENT_3 . set ( 1 , IDENT_6 [ 1 ] ) ; IDENT_3 . set ( 0 , IDENT_6 [ 0 ] ) ; if ( IDENT_7 ) System . out . println ( ( STRING_2 + IDENT_6 ) ) ; } ) ) ; IDENT_4 . METHOD_6 ( STRING_3 ) ; shell . METHOD_7 ( ) ; java . util . concurrent . atomic . IDENT_8 < java . lang . String > IDENT_9 = new java . util . concurrent . atomic . METHOD_8 ( "" ) ; boolean IDENT_10 = METHOD_9 ( ( ) -> { if ( ! ( STRING_0 . equals ( IDENT_3 . get ( 0 ) ) ) ) { if ( ( ( IDENT_3 . get ( 0 ) . equals ( STRING_4 ) ) && ( ( ( java . lang . Double ) ( IDENT_3 . get ( 1 ) ) ) == 2 ) ) && ( ( java . lang . Boolean ) ( IDENT_3 . get ( 2 ) ) ) ) { return true ; } else IDENT_9 . set ( STRING_5 ) ; } return false ; } ) ; java . lang . String message = ( "" . equals ( IDENT_9 . get ( ) ) ) ? STRING_6 : STRING_7 + ( IDENT_3 . toString ( ) ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . String string = super . toString ( ) ; return ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( string . substring ( 0 , ( ( string . length ( ) ) - 1 ) ) ) + STRING_8 ) + ( IDENT_11 ) ) + STRING_9 ) + ( IDENT_4 ) ) + STRING_10 ) + ( location ) ) + STRING_11 ) + ( size ) ) + STRING_12 ) + ( IDENT_12 ) ) + STRING_13 ) + ( IDENT_13 ) ) + STRING_14 ) + ( IDENT_14 ) ) + STRING_15 ) + ( IDENT_15 ) ) + STRING_16 ; }
org . junit . Assert . assertTrue ( message , IDENT_10 ) 