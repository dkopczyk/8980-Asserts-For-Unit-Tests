METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( METHOD_2 ( ) , IDENT_1 ) ; java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_3 ( false ) ; java . util . concurrent . atomic . IDENT_4 IDENT_5 = new java . util . concurrent . atomic . METHOD_4 ( 0 ) ; class IDENT_6 extends org . eclipse . swt . IDENT_7 . IDENT_8 { METHOD_5 ( org . eclipse . swt . IDENT_7 . IDENT_9 IDENT_10 , java . lang . String name ) { ( IDENT_10 , name ) ; } @ org . eclipse . swt . tests . junit . Override public java . lang . Object function ( java . lang . Object [ ] IDENT_11 ) { if ( ( IDENT_5 . get ( ) ) == 0 ) { IDENT_5 . set ( 1 ) ; IDENT_10 . METHOD_6 ( STRING_0 ) ; } else { IDENT_3 . set ( true ) ; } return null ; } } IDENT_10 . METHOD_6 ( STRING_1 ) ; new METHOD_5 ( IDENT_10 , STRING_2 ) ; IDENT_10 . execute ( STRING_3 ) ; IDENT_10 . METHOD_7 ( org . eclipse . swt . IDENT_10 . IDENT_12 . METHOD_8 ( ( e ) -> IDENT_10 . execute ( STRING_3 ) ) ) ; shell . METHOD_9 ( ) ; boolean IDENT_13 = METHOD_10 ( IDENT_3 :: get ) ; java . lang . String message = STRING_4 ; "<AssertPlaceHolder>" ; } METHOD_10 ( java . util . function . IDENT_14 ) { return METHOD_10 ( IDENT_15 , ( 1000 * ( IDENT_16 ) ) ) ; }
org . junit . Assert . assertTrue ( message , IDENT_13 ) 