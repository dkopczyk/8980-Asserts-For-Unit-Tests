METHOD_0 ( ) { final long IDENT_0 = java . lang . System . currentTimeMillis ( ) ; final org . apache . commons . lang3 . time . IDENT_1 IDENT_2 = new org . apache . commons . lang3 . time . METHOD_1 ( ) ; try { IDENT_2 . METHOD_2 ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( final java . lang . IllegalStateException expected ) { } IDENT_2 . start ( ) ; try { IDENT_2 . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } catch ( final java . lang . IllegalStateException ex ) { org . junit . Assert . fail ( ( STRING_1 + ( ex . getMessage ( ) ) ) ) ; } IDENT_2 . METHOD_3 ( ) ; try { IDENT_2 . METHOD_2 ( ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( final java . lang . IllegalStateException expected ) { } } start ( ) { if ( ! ( METHOD_4 ( ) ) ) { java . util . concurrent . IDENT_3 IDENT_4 ; executor = METHOD_5 ( ) ; if ( ( executor ) == null ) { executor = IDENT_4 = METHOD_6 ( ) ; } else { IDENT_4 = null ; } future = executor . METHOD_7 ( METHOD_8 ( IDENT_4 ) ) ; return true ; } return false ; }
org . junit . Assert . assertTrue ( ( ( IDENT_2 . METHOD_2 ( ) ) >= IDENT_0 ) ) 