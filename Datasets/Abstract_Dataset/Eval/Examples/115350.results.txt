METHOD_0 ( ) { IDENT_0 . io . IDENT_1 . component . IDENT_2 IDENT_1 = new IDENT_0 . io . IDENT_1 . component . METHOD_1 ( ) ; IDENT_0 . IDENT_3 IDENT_4 = new IDENT_0 . METHOD_2 ( ) ; IDENT_4 . METHOD_0 ( ) . METHOD_3 ( ) ; IDENT_0 . property . IDENT_5 IDENT_6 = IDENT_4 . METHOD_4 ( STRING_0 , STRING_1 ) ; IDENT_0 . property . IDENT_7 IDENT_8 = IDENT_4 . METHOD_5 ( "value" ) ; IDENT_0 . property . IDENT_5 IDENT_9 = IDENT_4 . METHOD_4 ( STRING_0 , STRING_2 ) ; IDENT_0 . property . IDENT_10 version = new IDENT_0 . property . METHOD_6 ( STRING_3 ) ; IDENT_4 . METHOD_7 ( version ) ; java . util . List < IDENT_0 . property . IDENT_11 > expected = java . util . Arrays . asList ( version , IDENT_8 , IDENT_6 , IDENT_9 ) ; java . util . List < IDENT_0 . property . IDENT_11 > actual = IDENT_1 . METHOD_0 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( IDENT_0 . component . IDENT_12 ) { java . util . List < IDENT_0 . property . IDENT_11 > properties = super . METHOD_0 ( component ) ; java . util . List < IDENT_0 . property . IDENT_13 > IDENT_14 = new java . util . ArrayList < IDENT_0 . property . IDENT_13 > ( component . METHOD_8 ( ) ) ; if ( IDENT_14 . isEmpty ( ) ) { return properties ; } java . util . Collections . METHOD_9 ( IDENT_14 , new java . util . IDENT_15 < IDENT_0 . property . IDENT_13 > ( ) { public int compare ( IDENT_0 . property . IDENT_13 IDENT_16 , IDENT_0 . property . IDENT_13 IDENT_17 ) { java . util . Date IDENT_18 = METHOD_10 ( IDENT_16 ) ; java . util . Date IDENT_19 = METHOD_10 ( IDENT_17 ) ; if ( ( IDENT_18 == null ) && ( IDENT_19 == null ) ) { return 0 ; } if ( IDENT_18 == null ) { return 1 ; } if ( IDENT_19 == null ) { return - 1 ; } return IDENT_18 . compareTo ( IDENT_19 ) ; } MOD_0 java . util . Date METHOD_10 ( IDENT_0 . property . IDENT_13 IDENT_14 ) { java . util . Date date = null ; for ( IDENT_0 . util . IDENT_20 IDENT_21 : IDENT_14 . METHOD_11 ( ) ) { if ( ( IDENT_21 . METHOD_12 ( ) ) == null ) { continue ; } if ( ( date == null ) || ( ( date . compareTo ( IDENT_21 . METHOD_12 ( ) ) ) > 0 ) ) { date = IDENT_21 . METHOD_12 ( ) ; } } return date ; } } ) ; int index = 0 ; for ( IDENT_0 . property . IDENT_11 IDENT_22 : properties ) { if ( IDENT_22 instanceof IDENT_0 . property . IDENT_13 ) { break ; } index ++ ; } properties = new java . util . ArrayList < IDENT_0 . property . IDENT_11 > ( properties ) ; for ( IDENT_0 . property . IDENT_13 f : IDENT_14 ) { properties . remove ( f ) ; properties . add ( ( index ++ ) , f ) ; } return properties ; }
org . junit . Assert . assertEquals ( expected , actual ) 