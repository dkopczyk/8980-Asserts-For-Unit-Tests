METHOD_0 ( ) { METHOD_1 ( 10 , 2 , 2 ) ; METHOD_1 ( 10 , 2 , 3 ) ; METHOD_1 ( 10 , 2 , 4 ) ; METHOD_2 ( STRING_0 , STRING_1 ) ; try ( java . sql . IDENT_0 IDENT_1 = IDENT_2 . METHOD_3 ( STRING_2 ) ) { byte [ ] buffer = new byte [ INT_0 ] ; for ( int i = 0 ; i < INT_0 ; i ++ ) { buffer [ i ] = 1 ; } int IDENT_3 = buffer . length ; int [ ] IDENT_4 = new int [ ] { java . sql . IDENT_5 . IDENT_6 , java . sql . IDENT_5 . IDENT_7 , java . sql . IDENT_5 . IDENT_8 , java . sql . IDENT_5 . IDENT_9 , java . sql . IDENT_5 . IDENT_10 , java . sql . IDENT_5 . IDENT_11 } ; for ( int IDENT_12 : IDENT_4 ) { IDENT_1 . METHOD_4 ( STRING_3 , new java . io . ByteArrayInputStream ( buffer ) , buffer . length ) ; IDENT_1 . METHOD_5 ( STRING_3 , IDENT_12 ) ; IDENT_1 . METHOD_6 ( ) ; java . io . InputStream is = IDENT_1 . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ; java . io . ByteArrayOutputStream IDENT_13 = new java . io . ByteArrayOutputStream ( ) ; int IDENT_14 ; byte [ ] IDENT_15 = new byte [ INT_1 ] ; while ( ( IDENT_14 = is . read ( IDENT_15 ) ) != ( - 1 ) ) { IDENT_13 . write ( IDENT_15 , 0 , IDENT_14 ) ; } byte [ ] IDENT_16 = IDENT_13 . toByteArray ( ) ; int IDENT_17 = IDENT_16 . length ; "<AssertPlaceHolder>" ; } IDENT_1 . close ( ) ; } } toByteArray ( ) { return f . METHOD_9 ( ) . encode ( this ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_17 ) 