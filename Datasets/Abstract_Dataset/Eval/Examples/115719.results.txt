METHOD_0 ( ) { org . IDENT_0 . jdbc . IDENT_1 IDENT_2 = org . IDENT_0 . jdbc . IDENT_1 . parse ( IDENT_3 ) ; java . util . List < org . IDENT_0 . jdbc . IDENT_4 > IDENT_5 = IDENT_2 . METHOD_1 ( ) ; for ( int i = 0 ; i < ( IDENT_5 . size ( ) ) ; i ++ ) { IDENT_2 . METHOD_2 ( java . util . Arrays . asList ( IDENT_5 . get ( i ) ) ) ; try ( java . sql . IDENT_6 IDENT_7 = org . IDENT_0 . jdbc . IDENT_8 . METHOD_3 ( IDENT_2 , null ) ) { java . sql . IDENT_9 stmt = IDENT_7 . METHOD_4 ( ) ; java . sql . ResultSet rs = stmt . METHOD_5 ( STRING_0 ) ; "<AssertPlaceHolder>" ; System . out . println ( ( ( ( STRING_1 + ( IDENT_5 . get ( i ) ) ) + STRING_2 ) + ( rs . getString ( 2 ) ) ) ) ; } } } next ( ) { if ( IDENT_10 ) { throw new java . sql . METHOD_6 ( STRING_3 , STRING_4 ) ; } if ( ( IDENT_11 ) < ( ( IDENT_12 ) - 1 ) ) { ( IDENT_11 ) ++ ; return true ; } else { if ( ( streaming ) && ( ! ( IDENT_13 ) ) ) { IDENT_14 . METHOD_7 ( ) ; try { if ( ! ( IDENT_13 ) ) { METHOD_8 ( ) ; } } catch ( java . io . IOException IDENT_15 ) { throw METHOD_9 ( IDENT_15 ) ; } finally { METHOD_7 . METHOD_10 ( ) ; } if ( ( IDENT_16 ) == ( IDENT_17 ) ) { IDENT_11 = 0 ; return ( IDENT_12 ) > 0 ; } else { ( IDENT_11 ) ++ ; return ( IDENT_12 ) > ( IDENT_11 ) ; } } IDENT_11 = IDENT_12 ; return false ; } }
org . junit . Assert . assertTrue ( rs . next ( ) ) 