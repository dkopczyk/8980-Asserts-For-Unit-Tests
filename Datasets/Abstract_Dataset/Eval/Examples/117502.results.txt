METHOD_0 ( ) { final java . nio . file . Path fixture = edu . illinois . library . cantaloupe . test . IDENT_0 . METHOD_1 ( STRING_0 ) ; final int IDENT_1 = ( ( int ) ( java . nio . file . IDENT_2 . size ( fixture ) ) ) ; final byte [ ] IDENT_3 = java . nio . file . IDENT_2 . METHOD_2 ( fixture ) ; final byte [ ] IDENT_4 = new byte [ IDENT_1 ] ; try ( edu . illinois . library . cantaloupe . source . stream . IDENT_5 instance = METHOD_3 ( fixture ) ) { instance . METHOD_4 ( INT_0 ) ; for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { IDENT_4 [ i ] = ( ( byte ) ( ( instance . read ( ) ) & 255 ) ) ; } "<AssertPlaceHolder>" ; } } read ( ) { final edu . illinois . library . cantaloupe . util . IDENT_6 IDENT_7 = new edu . illinois . library . cantaloupe . util . METHOD_5 ( ) ; IDENT_8 . METHOD_6 ( ) ; final char [ ] IDENT_9 = METHOD_7 ( edu . illinois . library . cantaloupe . image . IDENT_10 . IDENT_11 . IDENT_12 . length ) ; if ( ! ( java . util . Arrays . equals ( IDENT_9 , edu . illinois . library . cantaloupe . image . IDENT_10 . IDENT_11 . IDENT_12 ) ) ) { IDENT_13 = 0 ; IDENT_8 . METHOD_8 ( ) ; } byte [ ] bytes = METHOD_9 ( 2 ) ; IDENT_8 . METHOD_10 ( edu . illinois . library . cantaloupe . image . IDENT_10 . IDENT_11 . IDENT_14 . METHOD_11 ( bytes ) . IDENT_15 ) ; IDENT_8 . METHOD_12 ( 2 ) ; int IDENT_16 = IDENT_8 . METHOD_13 ( ) ; METHOD_14 ( IDENT_16 ) ; edu . illinois . library . cantaloupe . image . IDENT_10 . IDENT_17 IDENT_18 = read ( IDENT_19 . IDENT_20 ) ; edu . illinois . library . cantaloupe . image . IDENT_10 . IDENT_11 . LOGGER . trace ( STRING_1 , IDENT_18 . size ( ) , IDENT_16 , IDENT_7 ) ; return IDENT_18 ; }
org . junit . Assert . assertArrayEquals ( IDENT_3 , IDENT_4 ) 