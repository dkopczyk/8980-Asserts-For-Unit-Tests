METHOD_0 ( ) { net . time4j . IDENT_0 < ? > IDENT_1 = net . time4j . IDENT_0 . METHOD_1 ( 15 , 3 , 2 ) . METHOD_2 ( 1 , net . time4j . IDENT_2 . IDENT_3 ) . METHOD_3 ( ) ; java . lang . String actual = net . time4j . IDENT_4 . of ( new java . util . Locale ( STRING_0 , STRING_1 ) ) . METHOD_4 ( IDENT_1 , IDENT_5 . IDENT_6 ) ; java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_4 ( net . time4j . engine . IDENT_7 , java . lang . IDENT_8 ) { java . lang . String p = this . METHOD_5 ( ) ; int n = p . length ( ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { char c = p . charAt ( i ) ; if ( c == STRING_3 ) { i ++ ; while ( i < n ) { if ( ( p . charAt ( i ) ) == STRING_3 ) { if ( ( ( i + 1 ) < n ) && ( ( p . charAt ( ( i + 1 ) ) ) == STRING_3 ) ) { i ++ ; } else { break ; } } i ++ ; } } else { sb . append ( c ) ; } } java . lang . String pattern = sb . toString ( ) ; java . util . Set < java . util . concurrent . TimeUnit > IDENT_9 = java . util . IDENT_10 . METHOD_6 ( java . util . concurrent . TimeUnit . class ) ; if ( pattern . contains ( STRING_4 ) ) { IDENT_9 . add ( TimeUnit . IDENT_11 ) ; } if ( pattern . contains ( STRING_5 ) ) { IDENT_9 . add ( TimeUnit . IDENT_12 ) ; } if ( pattern . contains ( STRING_6 ) ) { IDENT_9 . add ( TimeUnit . IDENT_13 ) ; } if ( pattern . contains ( STRING_7 ) ) { IDENT_9 . add ( TimeUnit . IDENT_14 ) ; } if ( pattern . contains ( STRING_8 ) ) { IDENT_9 . add ( TimeUnit . IDENT_15 ) ; } super . METHOD_4 ( new net . time4j . IDENT_16 . METHOD_7 ( IDENT_1 , IDENT_9 ) , buffer ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( expected ) ) 