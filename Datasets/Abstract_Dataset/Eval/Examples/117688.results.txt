random ( ) { net . time4j . range . IDENT_0 IDENT_1 = net . time4j . range . IDENT_0 . METHOD_0 ( net . time4j . IDENT_2 . of ( INT_0 , INT_1 , INT_1 ) , net . time4j . IDENT_2 . METHOD_1 ( ) ) ; for ( int i = 0 ; i < 100 ; i ++ ) { net . time4j . IDENT_2 random = IDENT_1 . random ( ) ; "<AssertPlaceHolder>" ; } } contains ( IDENT_3 extends net . time4j . engine . IDENT_4 ) { for ( net . time4j . engine . IDENT_5 < ? > item : this . METHOD_2 ( ) ) { if ( item . METHOD_3 ( ) . equals ( unit ) ) { return ( item . METHOD_4 ( ) ) > 0 ; } } return false ; }
org . junit . Assert . assertThat ( IDENT_1 . contains ( random ) , org . hamcrest . CoreMatchers . is ( true ) ) 