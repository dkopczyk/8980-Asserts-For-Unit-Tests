METHOD_0 ( ) { net . time4j . IDENT_0 start = net . time4j . IDENT_0 . of ( INT_0 , 2 , INT_1 ) ; net . time4j . IDENT_0 IDENT_1 = net . time4j . IDENT_0 . of ( INT_0 , 4 , 20 ) ; net . time4j . IDENT_0 end = net . time4j . IDENT_0 . of ( INT_0 , 5 , INT_2 ) ; net . time4j . range . IDENT_2 IDENT_3 = net . time4j . range . IDENT_2 . METHOD_1 ( IDENT_1 , end ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . util . function . IDENT_4 ) { if ( this . start . METHOD_2 ( ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } net . time4j . range . IDENT_5 IDENT_6 = this . start . METHOD_3 ( ) ; net . time4j . range . IDENT_7 < T > b = net . time4j . range . IDENT_7 . of ( IDENT_6 , IDENT_8 . apply ( this . start . METHOD_4 ( ) ) ) ; return this . METHOD_5 ( ) . METHOD_1 ( b , this . end ) ; }
org . junit . Assert . assertThat ( IDENT_3 . METHOD_0 ( start ) , org . hamcrest . CoreMatchers . is ( net . time4j . range . IDENT_2 . METHOD_1 ( start , end ) ) ) 