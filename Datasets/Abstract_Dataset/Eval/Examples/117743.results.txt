METHOD_0 ( ) { net . time4j . range . IDENT_0 < net . time4j . IDENT_1 > IDENT_2 = net . time4j . range . IDENT_0 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { int len = this . IDENT_3 . size ( ) ; if ( len == 0 ) { return this ; } else if ( len == 1 ) { java . util . List < net . time4j . range . IDENT_4 < T > > IDENT_5 = java . util . Collections . emptyList ( ) ; return this . create ( IDENT_5 ) ; } java . util . List < net . time4j . range . IDENT_4 < T > > IDENT_6 = new java . util . ArrayList ( ) ; T IDENT_7 = null ; for ( int i = 0 , n = len - 1 ; i < n ; i ++ ) { net . time4j . range . IDENT_4 < T > IDENT_8 = this . IDENT_3 . get ( i ) ; if ( IDENT_8 . METHOD_3 ( ) . METHOD_4 ( ) ) { break ; } T IDENT_9 = IDENT_8 . METHOD_3 ( ) . METHOD_5 ( ) ; if ( IDENT_8 . METHOD_3 ( ) . METHOD_6 ( ) ) { IDENT_9 = this . METHOD_7 ( ) . METHOD_8 ( IDENT_9 ) ; if ( IDENT_9 == null ) { break ; } } if ( ( IDENT_7 == null ) || ( this . METHOD_9 ( IDENT_9 , IDENT_7 ) ) ) { IDENT_7 = IDENT_9 ; } else { IDENT_9 = IDENT_7 ; } T IDENT_10 = this . IDENT_3 . get ( ( i + 1 ) ) . METHOD_10 ( ) . METHOD_5 ( ) ; if ( ( IDENT_10 == null ) || ( ! ( this . METHOD_9 ( IDENT_10 , IDENT_9 ) ) ) ) { continue ; } net . time4j . range . IDENT_11 IDENT_12 = IDENT_11 . IDENT_13 ; if ( this . METHOD_11 ( ) ) { IDENT_12 = IDENT_11 . IDENT_14 ; IDENT_10 = this . METHOD_7 ( ) . METHOD_12 ( IDENT_10 ) ; if ( IDENT_10 == null ) { continue ; } } net . time4j . range . IDENT_15 < T > s = net . time4j . range . IDENT_15 . METHOD_13 ( IDENT_9 ) ; net . time4j . range . IDENT_15 < T > e = net . time4j . range . IDENT_15 . of ( IDENT_12 , IDENT_10 ) ; IDENT_6 . add ( this . METHOD_14 ( s , e ) ) ; } return this . create ( IDENT_6 ) ; }
org . junit . Assert . assertThat ( IDENT_2 . METHOD_2 ( ) . isEmpty ( ) , org . hamcrest . CoreMatchers . is ( true ) ) 