METHOD_0 ( ) { IDENT_0 = cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 , cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_7 ) { METHOD_3 ( ( ( IDENT_8 . length ) == ( IDENT_9 . METHOD_4 ( ) ) ) , STRING_0 , this , IDENT_9 ) ; if ( IDENT_10 instanceof cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_11 ) { METHOD_3 ( ( ( IDENT_9 . METHOD_4 ( ) ) == 0 ) , STRING_1 , cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_11 . class . METHOD_5 ( ) , IDENT_9 . getId ( ) , IDENT_9 . METHOD_4 ( ) ) ; if ( ( version ) > 0 ) { cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . LOGGER . warn ( STRING_2 , this , IDENT_9 . getId ( ) ) ; return false ; } return true ; } else if ( IDENT_10 instanceof cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_12 ) { METHOD_3 ( ( ( IDENT_9 . METHOD_4 ( ) ) > 0 ) , STRING_3 , IDENT_9 . getId ( ) , cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_12 . class . METHOD_5 ( ) ) ; final cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_12 s = ( ( cs . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_6 . IDENT_12 ) ( IDENT_10 ) ) ; METHOD_3 ( ( ( s . METHOD_6 ( ) ) == ( IDENT_9 . METHOD_4 ( ) ) ) , STRING_4 , s , IDENT_9 . getId ( ) ) ; if ( ( s . METHOD_7 ( ) ) == ( IDENT_13 ) ) { for ( int i = 0 ; i < ( IDENT_9 . METHOD_4 ( ) ) ; i ++ ) { if ( ( ( s . METHOD_8 ( i ) ) > 0 ) && ( ( METHOD_9 ( i ) ) == ( cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . IDENT_14 . IDENT_15 ) ) ) { return true ; } } cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . LOGGER . warn ( STRING_5 , IDENT_9 . getId ( ) , s ) ; return false ; } else if ( ( s . METHOD_7 ( ) ) == ( IDENT_16 ) ) { for ( int i = 0 ; i < ( IDENT_9 . METHOD_4 ( ) ) ; i ++ ) { if ( ( ( s . METHOD_8 ( i ) ) > 0 ) && ( ( METHOD_9 ( i ) ) != ( cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . IDENT_14 . IDENT_15 ) ) ) { cs . IDENT_1 . IDENT_2 . engine . pipeline . IDENT_3 . LOGGER . warn ( STRING_6 , IDENT_9 . getId ( ) , s , i ) ; return false ; } } return true ; } } throw new java . lang . IllegalStateException ( ( ( ( STRING_7 + IDENT_10 ) + STRING_8 ) + ( IDENT_9 . getId ( ) ) ) ) ; }
org . junit . Assert . assertTrue ( IDENT_0 . METHOD_2 ( IDENT_9 , IDENT_11 . INSTANCE ) ) 