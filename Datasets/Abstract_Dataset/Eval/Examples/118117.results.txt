METHOD_0 ( ) { final java . util . List < java . lang . Integer > source = java . util . Arrays . asList ( 1 , 2 , 3 , 1 ) ; try { final java . util . Set < java . lang . Integer > result = source . stream ( ) . collect ( de . IDENT_0 . util . IDENT_1 . METHOD_1 ( de . IDENT_0 . util . IDENT_2 . IDENT_3 . METHOD_2 ( ) ) ) ; org . junit . Assert . fail ( ( STRING_0 + result ) ) ; } catch ( final de . IDENT_0 . util . IDENT_2 . IDENT_3 ex ) { final java . lang . Integer expected = 1 ; final java . lang . Integer actual = ex . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( ) { @ de . IDENT_0 . util . METHOD_4 ( STRING_1 ) final T IDENT_4 = ( ( T ) ( element ) ) ; return IDENT_4 ; }
org . junit . Assert . assertEquals ( expected , actual ) 