METHOD_0 ( ) { int [ ] IDENT_0 = new int [ ] { 2 , 0 , - 1 , 2 , 3 } ; java . util . List < edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > > path = edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . METHOD_1 ( 1 , ( - 1 ) , IDENT_0 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > > IDENT_8 = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > > ( ) ; IDENT_8 . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( 1 , IDENT_6 . IDENT_7 . IDENT_9 ) ) ; IDENT_8 . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( 0 , IDENT_6 . IDENT_7 . IDENT_9 ) ) ; IDENT_8 . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( 2 , IDENT_6 . IDENT_7 . IDENT_9 ) ) ; IDENT_8 . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( ( - 1 ) , IDENT_6 . IDENT_7 . IDENT_10 ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int , int , int [ ] ) { int n = IDENT_0 . length ; if ( ( ( ( start < ( - 1 ) ) || ( start >= n ) ) || ( end < ( - 1 ) ) ) || ( end >= n ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_0 , start , end ) ) ; } edu . IDENT_1 . IDENT_2 . set . IDENT_11 IDENT_12 = new edu . IDENT_1 . IDENT_2 . set . METHOD_2 ( ) ; edu . IDENT_1 . IDENT_2 . list . IDENT_13 IDENT_14 = new edu . IDENT_1 . IDENT_2 . list . METHOD_3 ( ) ; int IDENT_15 = end ; while ( ( ( IDENT_15 != ( edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_16 ) ) && ( IDENT_15 != ( - 2 ) ) ) && ( ! ( IDENT_12 . contains ( IDENT_15 ) ) ) ) { IDENT_12 . add ( IDENT_15 ) ; IDENT_14 . add ( IDENT_15 ) ; IDENT_15 = IDENT_0 [ IDENT_15 ] ; } if ( IDENT_15 != ( - 1 ) ) { return null ; } IDENT_12 . add ( IDENT_15 ) ; IDENT_14 . add ( IDENT_15 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > > path = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > > ( ) ; edu . IDENT_1 . IDENT_2 . set . METHOD_2 IDENT_17 = new edu . IDENT_1 . IDENT_2 . set . METHOD_2 ( ) ; IDENT_15 = start ; while ( ( ( ! ( IDENT_12 . contains ( IDENT_15 ) ) ) && ( IDENT_15 != ( - 2 ) ) ) && ( ! ( IDENT_17 . contains ( IDENT_15 ) ) ) ) { path . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( IDENT_15 , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_9 ) ) ; IDENT_17 . add ( IDENT_15 ) ; IDENT_15 = IDENT_0 [ IDENT_15 ] ; } if ( ! ( IDENT_12 . contains ( IDENT_15 ) ) ) { return null ; } int IDENT_18 = IDENT_15 ; int IDENT_19 = IDENT_14 . METHOD_4 ( IDENT_18 ) ; for ( int i = IDENT_19 ; i > 0 ; i OP_0 ) { path . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( IDENT_14 . get ( i ) , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_20 ) ) ; } path . add ( new edu . IDENT_1 . IDENT_2 . tuple . IDENT_3 < java . lang . Integer , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 > ( end , edu . IDENT_1 . IDENT_4 . parse . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_10 ) ) ; return path ; }
org . junit . Assert . assertEquals ( path , IDENT_8 ) 