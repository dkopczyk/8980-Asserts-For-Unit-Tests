METHOD_0 ( ) { javax . security . auth . IDENT_0 . IDENT_1 key = new javax . security . auth . IDENT_0 . METHOD_1 ( new javax . security . auth . IDENT_0 . METHOD_2 ( STRING_0 ) , org . apache . directory . server . IDENT_0 . shared . crypto . IDENT_2 . IDENT_3 . IDENT_4 , STRING_1 ) ; byte [ ] IDENT_5 = key . METHOD_3 ( ) ; org . apache . directory . shared . IDENT_0 . components . IDENT_6 IDENT_7 = new org . apache . directory . shared . IDENT_0 . components . METHOD_4 ( org . apache . directory . shared . IDENT_0 . codec . types . IDENT_8 . IDENT_9 , IDENT_5 ) ; byte [ ] IDENT_10 = new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; org . apache . directory . server . IDENT_0 . shared . crypto . IDENT_2 . IDENT_11 IDENT_2 = new org . apache . directory . server . IDENT_0 . shared . crypto . IDENT_2 . METHOD_5 ( ) ; org . apache . directory . shared . IDENT_0 . components . IDENT_12 IDENT_13 = IDENT_2 . METHOD_6 ( IDENT_7 , IDENT_10 , null ) ; byte [ ] IDENT_14 = IDENT_2 . METHOD_7 ( IDENT_7 , IDENT_13 , null ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( byte [ ] , byte [ ] ) { for ( int i = 0 ; i < ( IDENT_10 . length ) ; i ++ ) { if ( ( IDENT_10 [ i ] ) != ( IDENT_14 [ i ] ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( METHOD_8 ( IDENT_10 , IDENT_14 ) ) 