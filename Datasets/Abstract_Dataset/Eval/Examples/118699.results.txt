METHOD_0 ( ) { int IDENT_0 = 1 ; org . IDENT_1 . platform . IDENT_2 . service . IDENT_3 IDENT_4 = METHOD_1 ( IDENT_0 , org . IDENT_1 . platform . IDENT_2 . ui . controller . IDENT_5 . IDENT_6 , STRING_0 , STRING_1 , STRING_2 ) ; when ( IDENT_7 . METHOD_1 ( IDENT_0 ) ) . thenReturn ( IDENT_4 ) ; when ( IDENT_8 . METHOD_2 ( STRING_3 ) ) . thenReturn ( java . lang . Integer . toString ( IDENT_0 ) ) ; java . lang . String view = IDENT_9 . METHOD_3 ( model , IDENT_8 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 ) . METHOD_1 ( IDENT_0 ) ; verify ( IDENT_7 , times ( 1 ) ) . METHOD_4 ( ) ; verify ( IDENT_8 , times ( 1 ) ) . METHOD_2 ( STRING_3 ) ; verify ( model ) . METHOD_5 ( org . mockito . Matchers . eq ( STRING_4 ) , METHOD_6 ( new org . IDENT_1 . platform . IDENT_2 . matchers . METHOD_7 ( new org . IDENT_1 . platform . IDENT_2 . ui . model . METHOD_8 ( IDENT_4 ) ) ) ) ; } METHOD_3 ( org . springframework . ui . IDENT_10 , javax . servlet . http . IDENT_11 ) { java . lang . String IDENT_0 = IDENT_8 . METHOD_2 ( STRING_3 ) ; try { if ( METHOD_9 ( IDENT_0 ) ) { model . METHOD_5 ( STRING_5 , IDENT_12 . IDENT_13 ) ; } else { org . IDENT_1 . platform . IDENT_2 . service . IDENT_3 IDENT_4 = IDENT_7 . METHOD_1 ( java . lang . Integer . valueOf ( IDENT_0 ) ) ; org . IDENT_1 . platform . IDENT_2 . ui . model . METHOD_8 IDENT_14 = new org . IDENT_1 . platform . IDENT_2 . ui . model . METHOD_8 ( IDENT_4 ) ; model . METHOD_5 ( STRING_4 , IDENT_14 ) ; model . METHOD_5 ( STRING_6 , METHOD_10 ( ) ) ; } } catch ( org . IDENT_1 . framework . exceptions . IDENT_15 e ) { model . METHOD_5 ( STRING_5 , IDENT_12 . IDENT_16 ) ; } return STRING_7 ; }
org . junit . Assert . assertThat ( view , org . hamcrest . core . Is . is ( STRING_7 ) ) 