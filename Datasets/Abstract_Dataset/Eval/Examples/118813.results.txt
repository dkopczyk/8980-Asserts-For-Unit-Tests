METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 params = new com . IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_1 ( com . IDENT_0 . IDENT_1 . util . IDENT_2 . class . getResource ( STRING_0 ) . METHOD_2 ( ) , com . IDENT_0 . IDENT_1 . util . IDENT_2 . class . getResource ( STRING_1 ) . METHOD_2 ( ) ) ; params . IDENT_4 . METHOD_3 ( true ) ; com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_5 IDENT_6 = com . IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_4 ( params ) ; java . util . List < com . IDENT_0 . core . io . IDENT_7 . IDENT_8 > IDENT_9 = new java . util . ArrayList ( ) ; try ( com . IDENT_0 . core . io . IDENT_7 . IDENT_10 . IDENT_11 IDENT_12 = new com . IDENT_0 . core . io . IDENT_7 . IDENT_10 . METHOD_5 ( com . IDENT_0 . IDENT_1 . util . IDENT_2 . class . getResource ( STRING_0 ) . METHOD_2 ( ) , com . IDENT_0 . IDENT_1 . util . IDENT_2 . class . getResource ( STRING_1 ) . METHOD_2 ( ) ) ) { for ( com . IDENT_0 . core . io . IDENT_7 . IDENT_8 s : cc . redberry . IDENT_13 . IDENT_14 . it ( IDENT_12 ) ) IDENT_9 . add ( s ) ; } java . io . File IDENT_15 = com . IDENT_0 . util . IDENT_16 . METHOD_6 ( ) ; try ( com . IDENT_0 . IDENT_1 . util . IDENT_17 writer = new com . IDENT_0 . IDENT_1 . util . METHOD_7 ( IDENT_15 ) ) { writer . header ( METHOD_4 . IDENT_18 , null ) ; for ( com . IDENT_0 . IDENT_1 . util . IDENT_19 IDENT_20 : METHOD_4 . IDENT_21 ) writer . write ( IDENT_20 ) ; } try ( com . IDENT_0 . IDENT_1 . util . IDENT_22 reader = new com . IDENT_0 . IDENT_1 . util . METHOD_8 ( IDENT_15 ) ) { int IDENT_23 = 0 ; for ( com . IDENT_0 . IDENT_1 . util . IDENT_19 IDENT_20 : cc . redberry . IDENT_13 . IDENT_14 . it ( reader ) ) { com . IDENT_0 . core . io . IDENT_7 . IDENT_8 actual = IDENT_9 . get ( ( ( int ) ( IDENT_20 . METHOD_9 ( ) ) ) ) ; ++ IDENT_23 ; "<AssertPlaceHolder>" ; } System . out . println ( IDENT_23 ) ; } } METHOD_10 ( ) { if ( ( IDENT_24 ) == null ) return null ; com . IDENT_0 . IDENT_1 . IDENT_25 . IDENT_19 [ ] result = new com . IDENT_0 . IDENT_1 . IDENT_25 . IDENT_19 [ IDENT_24 . size ( ) ] ; for ( int i = 0 ; i < ( result . length ) ; i ++ ) result [ i ] = IDENT_24 . get ( i ) . METHOD_11 ( ) ; return com . IDENT_0 . IDENT_1 . IDENT_25 . IDENT_19 . METHOD_12 ( result ) ; }
org . junit . Assert . assertEquals ( actual , IDENT_20 . METHOD_10 ( ) . get ( 0 ) ) 