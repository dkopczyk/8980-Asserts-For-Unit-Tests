METHOD_0 ( ) { org . mockito . Mockito . when ( IDENT_0 . METHOD_1 ( any ( ) , any ( ) ) ) . thenReturn ( true ) ; nl . bzk . brp . domain . algemeen . IDENT_1 IDENT_2 = METHOD_2 ( IDENT_3 . IDENT_4 ) ; boolean IDENT_5 = IDENT_6 . METHOD_3 ( IDENT_7 . IDENT_8 , null , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( nl . bzk . brp . domain . IDENT_9 . IDENT_10 . IDENT_11 , nl . bzk . brp . domain . algemeen . IDENT_12 , nl . bzk . brp . domain . algemeen . IDENT_1 ) { final nl . bzk . IDENT_13 . dal . domein . brp . IDENT_14 . IDENT_3 IDENT_15 = IDENT_2 . METHOD_4 ( ) . METHOD_5 ( ) ; if ( ! ( ( ( IDENT_15 == ( nl . bzk . IDENT_13 . dal . domein . brp . IDENT_14 . IDENT_3 . IDENT_16 ) ) || ( IDENT_15 == ( nl . bzk . IDENT_13 . dal . domein . brp . IDENT_14 . IDENT_3 . IDENT_17 ) ) ) || ( IDENT_15 == ( nl . bzk . IDENT_13 . dal . domein . brp . IDENT_14 . IDENT_3 . IDENT_4 ) ) ) ) { return true ; } final nl . bzk . IDENT_13 . dal . domein . brp . entity . IDENT_18 IDENT_19 = IDENT_2 . METHOD_6 ( ) ; final boolean IDENT_20 ; if ( IDENT_15 == ( nl . bzk . IDENT_13 . dal . domein . brp . IDENT_14 . IDENT_3 . IDENT_4 ) ) { boolean IDENT_21 = ( ( IDENT_10 . METHOD_7 ( ) . METHOD_8 ( ) ) != null ) && ( IDENT_0 . METHOD_1 ( IDENT_10 . METHOD_7 ( ) . METHOD_8 ( ) , IDENT_19 ) ) ; boolean IDENT_22 = IDENT_0 . METHOD_1 ( IDENT_10 . METHOD_9 ( ) , IDENT_19 ) ; IDENT_20 = ! ( IDENT_21 && IDENT_22 ) ; if ( ! IDENT_20 ) { nl . bzk . brp . service . IDENT_23 . IDENT_24 . filter . IDENT_25 . LOGGER . debug ( ( STRING_0 + STRING_1 ) , IDENT_10 . getId ( ) , IDENT_19 . getCode ( ) ) ; } } else { IDENT_20 = ! ( IDENT_0 . METHOD_1 ( IDENT_10 . METHOD_9 ( ) , IDENT_19 ) ) ; if ( ! IDENT_20 ) { nl . bzk . brp . service . IDENT_23 . IDENT_24 . filter . IDENT_25 . LOGGER . debug ( ( STRING_2 + STRING_1 ) , IDENT_10 . getId ( ) , IDENT_19 . getCode ( ) ) ; } } return IDENT_20 ; }
org . junit . Assert . assertFalse ( METHOD_3 ) 