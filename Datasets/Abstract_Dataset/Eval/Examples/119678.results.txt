METHOD_0 ( ) { IDENT_0 . METHOD_1 ( true ) ; final boolean IDENT_1 = service . METHOD_2 ( IDENT_2 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( nl . bzk . IDENT_3 . dal . domein . brp . entity . IDENT_4 , nl . bzk . IDENT_3 . dal . domein . brp . entity . IDENT_5 ) { if ( METHOD_3 ( IDENT_6 , IDENT_0 ) ) { return false ; } final nl . bzk . IDENT_3 . dal . domein . brp . entity . IDENT_7 IDENT_8 = IDENT_6 . METHOD_4 ( ) ; final nl . bzk . IDENT_3 . dal . domein . brp . entity . IDENT_9 IDENT_10 = IDENT_6 . METHOD_5 ( ) ; try { nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_6 ( IDENT_0 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_7 ( IDENT_0 . METHOD_8 ( ) ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_9 ( IDENT_6 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_10 ( IDENT_8 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_11 ( IDENT_0 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_12 ( IDENT_0 . METHOD_8 ( ) ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_13 ( IDENT_6 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_14 ( IDENT_8 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_15 ( IDENT_10 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_16 ( IDENT_10 ) ; nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_12 . METHOD_17 ( IDENT_8 , IDENT_10 . METHOD_18 ( ) , ( ( IDENT_8 . METHOD_19 ( ) ) == ( nl . bzk . IDENT_3 . dal . domein . brp . IDENT_13 . IDENT_14 . IDENT_15 ) ) ) ; } catch ( nl . bzk . brp . service . algemeen . IDENT_11 . IDENT_16 e ) { nl . bzk . brp . service . IDENT_17 . IDENT_18 . job . IDENT_19 . LOGGER . info ( ( STRING_0 + e ) , IDENT_6 . getId ( ) , IDENT_0 . getId ( ) ) ; return false ; } return true ; }
org . junit . Assert . assertFalse ( IDENT_1 ) 