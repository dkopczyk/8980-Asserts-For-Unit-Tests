METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) . METHOD_2 ( nl . bzk . IDENT_1 . util . common . IDENT_2 . METHOD_3 ( ) ) ; final boolean IDENT_3 = service . METHOD_4 ( IDENT_0 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( nl . bzk . IDENT_1 . dal . domein . brp . entity . IDENT_5 , nl . bzk . IDENT_1 . dal . domein . brp . entity . IDENT_6 ) { if ( METHOD_5 ( IDENT_7 , IDENT_4 ) ) { return false ; } final nl . bzk . IDENT_1 . dal . domein . brp . entity . IDENT_8 IDENT_9 = IDENT_7 . METHOD_6 ( ) ; final nl . bzk . IDENT_1 . dal . domein . brp . entity . IDENT_10 IDENT_11 = IDENT_7 . METHOD_1 ( ) ; try { nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_7 ( IDENT_4 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_8 ( IDENT_4 . METHOD_9 ( ) ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_10 ( IDENT_7 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_11 ( IDENT_9 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_12 ( IDENT_4 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_13 ( IDENT_4 . METHOD_9 ( ) ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_14 ( IDENT_7 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_15 ( IDENT_9 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_16 ( IDENT_11 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_17 ( IDENT_11 ) ; nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_13 . METHOD_18 ( IDENT_9 , IDENT_11 . METHOD_19 ( ) , ( ( IDENT_9 . METHOD_20 ( ) ) == ( nl . bzk . IDENT_1 . dal . domein . brp . IDENT_14 . IDENT_15 . IDENT_16 ) ) ) ; } catch ( nl . bzk . brp . service . algemeen . IDENT_12 . IDENT_17 e ) { nl . bzk . brp . service . IDENT_18 . IDENT_19 . job . IDENT_20 . LOGGER . info ( ( STRING_0 + e ) , IDENT_7 . getId ( ) , IDENT_4 . getId ( ) ) ; return false ; } return true ; }
org . junit . Assert . assertFalse ( IDENT_3 ) 