METHOD_0 ( ) { final java . util . Set < nl . bzk . IDENT_0 . dal . domein . brp . entity . IDENT_1 > IDENT_2 = new java . util . METHOD_1 ( ) ; final nl . bzk . IDENT_0 . dal . domein . brp . entity . IDENT_1 IDENT_3 = new nl . bzk . IDENT_0 . dal . domein . brp . entity . METHOD_2 ( new nl . bzk . IDENT_0 . dal . domein . brp . entity . METHOD_3 ( nl . bzk . IDENT_0 . dal . domein . brp . IDENT_4 . IDENT_5 . IDENT_6 ) , STRING_0 , 0 ) ; final nl . bzk . IDENT_0 . dal . domein . brp . entity . IDENT_7 IDENT_8 = new nl . bzk . IDENT_0 . dal . domein . brp . entity . METHOD_4 ( IDENT_3 , 0 , nl . bzk . migratiebrp . synchronisatie . dal . service . impl . mapper . IDENT_9 . IDENT_10 ) ; IDENT_3 . METHOD_5 ( IDENT_8 ) ; IDENT_2 . add ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } map ( java . util . Set ) { if ( ( IDENT_11 == null ) || ( IDENT_11 . isEmpty ( ) ) ) { return null ; } else { return mapper . map ( IDENT_11 . iterator ( ) . next ( ) . METHOD_6 ( ) ) ; } }
org . junit . Assert . assertNotNull ( mapper . map ( IDENT_2 ) ) 