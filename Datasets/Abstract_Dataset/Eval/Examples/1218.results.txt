METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . Class ) { if ( com . IDENT_0 . IDENT_1 . commons . util . Double . class . equals ( IDENT_2 ) ) { try { return IDENT_2 . METHOD_2 ( java . lang . Double . METHOD_3 ( data ) ) ; } catch ( java . lang . IDENT_3 ex ) { return null ; } } else if ( com . IDENT_0 . IDENT_1 . commons . util . Long . class . equals ( IDENT_2 ) ) { try { return IDENT_2 . METHOD_2 ( java . lang . Long . METHOD_4 ( data ) ) ; } catch ( java . lang . IDENT_3 ex ) { return null ; } } else if ( com . IDENT_0 . IDENT_1 . commons . util . Integer . class . equals ( IDENT_2 ) ) { try { return IDENT_2 . METHOD_2 ( java . lang . Long . METHOD_4 ( data ) ) ; } catch ( java . lang . IDENT_3 ex ) { return null ; } } else if ( org . apache . commons . lang . StringUtils . equalsIgnoreCase ( STRING_0 , data ) ) { return IDENT_2 . METHOD_2 ( Boolean . IDENT_4 ) ; } else if ( org . apache . commons . lang . StringUtils . equalsIgnoreCase ( STRING_1 , data ) ) { return IDENT_2 . METHOD_2 ( Boolean . IDENT_5 ) ; } else if ( com . IDENT_0 . IDENT_1 . commons . util . IDENT_6 . IDENT_7 . matcher ( data ) . matches ( ) ) { return IDENT_2 . METHOD_2 ( org . joda . time . format . IDENT_8 . METHOD_5 ( ) . METHOD_6 ( data ) . METHOD_7 ( ) ) ; } else { return IDENT_2 . METHOD_2 ( data ) ; } }
org . junit . Assert . assertEquals ( Boolean . IDENT_5 , com . IDENT_0 . IDENT_1 . commons . util . IDENT_6 . METHOD_1 ( STRING_1 , com . IDENT_0 . IDENT_1 . commons . util . Boolean . class ) ) 