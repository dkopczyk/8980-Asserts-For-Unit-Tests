METHOD_0 ( ) { final nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 IDENT_2 = nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_3 . METHOD_1 ( ) . METHOD_2 ( nl . bzk . brp . business . IDENT_4 . impl . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 ) . METHOD_3 ( ) ; final boolean IDENT_9 = IDENT_10 . METHOD_4 ( new nl . bzk . brp . model . IDENT_11 . IDENT_12 . kern . METHOD_5 ( IDENT_13 ) , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( nl . bzk . brp . model . IDENT_11 . IDENT_12 . kern . METHOD_5 , nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 ) { if ( ( METHOD_6 ( IDENT_2 ) ) && ( ( METHOD_7 ( IDENT_14 ) ) || ( METHOD_8 ( IDENT_14 , IDENT_2 ) ) ) ) { nl . bzk . brp . business . IDENT_4 . impl . IDENT_5 . IDENT_6 . IDENT_15 . LOGGER . info ( IDENT_16 . IDENT_17 , STRING_0 , IDENT_14 . METHOD_9 ( ) , IDENT_2 . getCode ( ) ) ; return true ; } else if ( ( ! ( METHOD_6 ( IDENT_2 ) ) ) && ( METHOD_8 ( IDENT_14 , IDENT_2 ) ) ) { nl . bzk . brp . business . IDENT_4 . impl . IDENT_5 . IDENT_6 . IDENT_15 . LOGGER . info ( ( STRING_1 + STRING_2 ) , IDENT_14 . METHOD_9 ( ) , IDENT_2 . getCode ( ) ) ; } return false ; }
org . junit . Assert . assertFalse ( IDENT_9 ) 