METHOD_0 ( ) { final nl . bzk . brp . model . IDENT_0 . impl . kern . IDENT_1 IDENT_2 = nl . bzk . brp . util . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; final nl . bzk . brp . model . operationeel . kern . IDENT_5 IDENT_6 = METHOD_2 ( ) ; final nl . bzk . brp . model . operationeel . kern . IDENT_7 IDENT_8 = METHOD_3 ( IDENT_6 ) ; final nl . bzk . brp . model . operationeel . kern . IDENT_9 IDENT_10 = IDENT_2 . METHOD_4 ( ) . METHOD_5 ( ) ; final nl . bzk . brp . model . operationeel . kern . IDENT_9 IDENT_11 = new nl . bzk . brp . model . operationeel . kern . METHOD_6 ( IDENT_2 , IDENT_6 , IDENT_6 . METHOD_7 ( ) , IDENT_10 . METHOD_8 ( ) , IDENT_10 . METHOD_9 ( ) , IDENT_10 . METHOD_10 ( ) , IDENT_8 ) ; IDENT_2 . METHOD_4 ( ) . METHOD_11 ( IDENT_11 ) ; final nl . bzk . brp . model . IDENT_0 . IDENT_12 . kern . IDENT_13 IDENT_14 = new nl . bzk . brp . model . IDENT_0 . IDENT_12 . kern . METHOD_12 ( IDENT_2 , null ) ; for ( final nl . bzk . brp . model . operationeel . kern . METHOD_6 IDENT_15 : IDENT_14 . METHOD_4 ( ) ) { IDENT_15 . METHOD_9 ( ) . METHOD_13 ( true ) ; } final boolean IDENT_16 = IDENT_17 . METHOD_14 ( IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_14 ( nl . bzk . brp . model . IDENT_0 . IDENT_12 . kern . METHOD_12 ) { boolean METHOD_14 = false ; if ( ( IDENT_14 != null ) && ( IDENT_14 . METHOD_15 ( ) ) ) { if ( METHOD_16 ( IDENT_14 ) ) { METHOD_14 = true ; } else if ( METHOD_17 ( IDENT_14 ) ) { METHOD_14 = true ; } else if ( METHOD_18 ( IDENT_14 ) ) { METHOD_14 = true ; } else if ( IDENT_14 . METHOD_19 ( ) ) { METHOD_14 = true ; } else if ( METHOD_20 ( IDENT_14 ) ) { METHOD_14 = true ; } } return METHOD_14 ; }
org . junit . Assert . assertThat ( IDENT_16 , org . hamcrest . Matchers . is ( true ) ) 