METHOD_0 ( ) { int IDENT_0 = INT_0 ; boolean IDENT_1 = true ; for ( int IDENT_2 = 0 ; IDENT_2 < INT_1 ; IDENT_2 ++ ) { byte [ ] IDENT_3 = new byte [ ( ( int ) ( ( java . lang . Math . random ( ) ) * IDENT_0 ) ) ] ; for ( int i = 0 ; i < ( IDENT_3 . length ) ; ++ i ) { if ( ( i OP_0 INT_2 ) < INT_3 ) { IDENT_3 [ i ] = ( ( byte ) ( i OP_0 INT_2 ) ) ; } else { IDENT_3 [ i ] = ( ( byte ) ( ( ( int ) ( ( java . lang . Math . random ( ) ) * 255 ) ) - INT_4 ) ) ; } } IDENT_4 . IDENT_5 . util . IDENT_6 . IDENT_7 IDENT_8 = new IDENT_4 . IDENT_5 . util . IDENT_6 . METHOD_1 ( 100 ) ; IDENT_8 . encode ( IDENT_3 ) ; java . lang . String IDENT_9 = IDENT_8 . METHOD_2 ( ) ; IDENT_4 . IDENT_5 . util . IDENT_6 . IDENT_10 IDENT_11 = new IDENT_4 . IDENT_5 . util . IDENT_6 . METHOD_3 ( ) ; IDENT_11 . decode ( IDENT_9 ) ; byte [ ] IDENT_12 = IDENT_11 . METHOD_4 ( ) ; if ( ( IDENT_12 . length ) != ( IDENT_3 . length ) ) { IDENT_1 = false ; } else { for ( int i = 0 ; i < ( IDENT_12 . length ) ; ++ i ) { if ( ( IDENT_12 [ i ] ) != ( IDENT_3 [ i ] ) ) { IDENT_1 = false ; break ; } } } if ( ! IDENT_1 ) { break ; } } "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( ( IDENT_4 . IDENT_5 . log . IDENT_13 . log ) != null ) { IDENT_4 . IDENT_5 . log . IDENT_13 . log . IDENT_14 . METHOD_5 ( ) ; IDENT_4 . IDENT_5 . log . IDENT_13 . log . IDENT_15 . METHOD_5 ( ) ; IDENT_4 . IDENT_5 . log . IDENT_13 . log . IDENT_16 = IDENT_17 . IDENT_18 ; } }
org . junit . Assert . assertTrue ( IDENT_1 ) 