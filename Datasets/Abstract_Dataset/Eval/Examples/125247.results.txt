METHOD_0 ( ) { byte [ ] in = new byte [ ] { 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 } ; byte [ ] out = io . IDENT_0 . IDENT_1 . util . IDENT_2 . split ( in , 2 , 6 ) ; "<AssertPlaceHolder>" ; System . out . println ( java . lang . String . format ( STRING_0 , io . IDENT_0 . IDENT_1 . test . IDENT_3 . METHOD_1 ( 1 ) ) ) ; } split ( byte [ ] , int , int ) { if ( bytes == null ) { return null ; } if ( start < 0 ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } if ( end > ( bytes . length ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } if ( start > end ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } int len = end - start ; byte [ ] IDENT_4 = new byte [ len ] ; java . lang . System . METHOD_2 ( bytes , start , IDENT_4 , 0 , len ) ; return IDENT_4 ; }
org . junit . Assert . assertArrayEquals ( new byte [ ] { 1 , 1 , 1 , 1 } , out ) 