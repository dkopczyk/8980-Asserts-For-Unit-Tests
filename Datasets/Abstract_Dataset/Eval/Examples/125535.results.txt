METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = METHOD_1 ( null , METHOD_2 ( METHOD_3 ( STRING_0 , METHOD_4 ( "foo" , "bar" ) ) , "name" ) ) ; org . IDENT_0 . IDENT_4 . connect . model . IDENT_5 IDENT_6 = METHOD_5 ( STRING_1 ) ; java . util . Set < java . lang . String > IDENT_7 = METHOD_4 ( "foo" , "bar" , STRING_2 ) ; java . util . Map < java . lang . String , java . lang . Object > result = IDENT_8 . METHOD_6 ( METHOD_1 , METHOD_5 , IDENT_7 ) ; java . util . Map < java . lang . String , java . lang . Object > expected = new ImmutableMap . Builder < java . lang . String , java . lang . Object > ( ) . put ( STRING_1 , STRING_1 ) . put ( STRING_3 , STRING_4 ) . put ( STRING_5 0 , Boolean . IDENT_9 ) . put ( STRING_5 , "name" ) . put ( STRING_6 , STRING_0 ) . build ( ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . IDENT_0 . IDENT_1 . model . IDENT_2 , org . IDENT_0 . IDENT_4 . connect . model . IDENT_5 , java . util . Set ) { java . util . Map < java . lang . String , java . lang . Object > result = METHOD_7 ( ) ; org . springframework . security . IDENT_1 . provider . IDENT_10 authentication = METHOD_1 . METHOD_8 ( ) . METHOD_9 ( ) ; result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_11 , true ) ; java . util . Set < java . lang . String > METHOD_4 = com . google . common . collect . IDENT_12 . METHOD_10 ( IDENT_7 , authentication . METHOD_11 ( ) . METHOD_12 ( ) ) ; result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_13 , com . google . common . base . IDENT_14 . METHOD_13 ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_15 ) . join ( METHOD_4 ) ) ; if ( ( METHOD_1 . METHOD_14 ( ) ) != null ) { try { result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_16 , IDENT_17 . METHOD_15 ( METHOD_1 . METHOD_14 ( ) ) ) ; result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_18 , ( ( METHOD_1 . METHOD_14 ( ) . getTime ( ) ) / INT_0 ) ) ; } catch ( java . text . IDENT_19 e ) { org . IDENT_0 . IDENT_1 . service . impl . IDENT_20 . logger . error ( STRING_7 , e ) ; } } if ( METHOD_5 != null ) { result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_21 , METHOD_5 . METHOD_16 ( ) ) ; } else { result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_21 , authentication . getName ( ) ) ; } if ( ( authentication . METHOD_17 ( ) ) != null ) { result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_22 , authentication . METHOD_17 ( ) . getName ( ) ) ; } result . put ( org . IDENT_0 . IDENT_1 . service . impl . IDENT_23 , authentication . METHOD_11 ( ) . METHOD_18 ( ) ) ; return result ; }
org . junit . Assert . assertThat ( result , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( expected ) ) ) 