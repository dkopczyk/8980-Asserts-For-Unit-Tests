METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 element = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . IDENT_2 . class ) ; IDENT_0 . IDENT_1 . pattern . IDENT_3 value = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . pattern . IDENT_3 . class ) ; IDENT_0 . IDENT_1 . pattern . IDENT_4 grid = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . pattern . IDENT_4 . class ) ; IDENT_0 . IDENT_1 . pattern . IDENT_5 table = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . pattern . IDENT_5 . class ) ; IDENT_0 . IDENT_1 . pattern . IDENT_6 IDENT_7 = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . pattern . IDENT_6 . class ) ; IDENT_0 . IDENT_1 . IDENT_2 IDENT_8 = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . IDENT_2 . class ) ; IDENT_0 . IDENT_1 . IDENT_2 IDENT_9 = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . IDENT_2 . class ) ; when ( table . METHOD_1 ( ) ) . thenReturn ( true ) ; when ( grid . METHOD_1 ( ) ) . thenReturn ( true ) ; when ( grid . METHOD_2 ( 0 , 1 ) ) . thenReturn ( IDENT_8 ) ; when ( grid . METHOD_2 ( 1 , 1 ) ) . thenReturn ( IDENT_9 ) ; when ( grid . METHOD_3 ( ) ) . thenReturn ( 2 ) ; IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 IDENT_12 = org . mockito . Mockito . mock ( IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 . class ) ; IDENT_0 . IDENT_1 . IDENT_13 instance = new IDENT_0 . IDENT_1 . METHOD_4 ( IDENT_12 ) ; IDENT_0 . IDENT_1 . IDENT_14 . IDENT_15 IDENT_16 = new IDENT_0 . IDENT_1 . IDENT_14 . METHOD_5 ( new IDENT_0 . IDENT_1 . IDENT_14 . METHOD_6 ( element ) . METHOD_7 ( value , grid , table , IDENT_7 ) . METHOD_8 ( instance ) ) ; java . util . List < IDENT_0 . METHOD_8 . IDENT_14 . IDENT_17 > list = IDENT_16 . METHOD_9 ( 1 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( int ) { java . util . List < IDENT_0 . METHOD_8 . IDENT_14 . IDENT_18 > IDENT_19 = new java . util . ArrayList ( ) ; for ( int count = 0 ; count < ( this . METHOD_3 ( ) ) ; count ++ ) { IDENT_0 . METHOD_8 . IDENT_14 . IDENT_18 IDENT_20 = this . METHOD_2 ( row , count ) ; IDENT_19 . add ( IDENT_20 ) ; } return IDENT_19 ; }
org . junit . Assert . assertTrue ( ( ( list . size ( ) ) == 2 ) ) 