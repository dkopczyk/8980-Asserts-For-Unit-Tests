METHOD_0 ( ) { javax . jcr . IDENT_0 IDENT_1 = null ; try { tools . METHOD_1 ( IDENT_1 , STRING_0 , org . IDENT_2 . jcr . IDENT_3 . IDENT_4 , org . IDENT_2 . jcr . IDENT_3 . IDENT_4 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( javax . jcr . Node , java . lang . String , java . lang . String , java . lang . String ) { org . IDENT_2 . jcr . api . IDENT_5 . METHOD_2 ( IDENT_6 , STRING_1 ) ; org . IDENT_2 . jcr . api . IDENT_5 . METHOD_2 ( path , STRING_2 ) ; java . lang . String IDENT_7 = path . replaceAll ( STRING_3 , "" ) . replaceAll ( STRING_4 , "" ) ; try { return IDENT_6 . METHOD_3 ( IDENT_7 ) ; } catch ( javax . jcr . IDENT_8 e ) { } java . lang . String [ ] IDENT_9 = IDENT_7 . split ( "/" ) ; final java . lang . String IDENT_10 = IDENT_6 . getPath ( ) ; final java . lang . StringBuilder IDENT_11 = new java . lang . StringBuilder ( ( ( IDENT_10 . length ( ) ) + ( IDENT_7 . length ( ) ) ) ) ; javax . jcr . Node node ; boolean IDENT_12 = true ; if ( ( IDENT_6 . getPath ( ) . length ( ) ) > 1 ) IDENT_12 = false ; javax . jcr . IDENT_0 session = IDENT_6 . METHOD_4 ( ) ; IDENT_11 . append ( IDENT_10 ) ; for ( int i = 0 , len = IDENT_9 . length ; i != len ; ++ i ) { java . lang . String IDENT_13 = IDENT_9 [ i ] ; IDENT_13 = IDENT_13 . trim ( ) ; if ( ( IDENT_13 . length ( ) ) == 0 ) continue ; if ( session . METHOD_5 ( ( ( ( IDENT_11 . toString ( ) ) + "/" ) + IDENT_13 ) ) ) { if ( ( ! IDENT_12 ) || ( i > 0 ) ) { IDENT_11 . append ( "/" ) ; } IDENT_11 . append ( IDENT_13 ) ; } else { node = session . METHOD_3 ( IDENT_11 . toString ( ) ) ; java . lang . String IDENT_14 = IDENT_13 . replaceAll ( STRING_5 , "" ) ; java . lang . String IDENT_15 = IDENT_16 ; if ( ( i == ( len - 1 ) ) && ( IDENT_17 != null ) ) IDENT_15 = IDENT_17 ; if ( IDENT_15 != null ) { node = node . METHOD_6 ( IDENT_14 , IDENT_15 ) ; } else { node = node . METHOD_6 ( IDENT_14 ) ; } if ( ( ! IDENT_12 ) || ( i > 0 ) ) { IDENT_11 . append ( "/" ) ; } IDENT_11 . append ( IDENT_14 ) ; } } node = session . METHOD_3 ( IDENT_11 . toString ( ) ) ; return node ; }
org . junit . Assert . assertTrue ( ( e instanceof java . lang . IllegalArgumentException ) ) 