METHOD_0 ( ) { org . IDENT_0 . jcr . value . Path IDENT_1 = IDENT_2 . create ( STRING_0 ) ; org . IDENT_0 . jcr . value . Path IDENT_3 = IDENT_2 . create ( STRING_1 ) ; org . IDENT_0 . jcr . value . Path common = org . IDENT_0 . jcr . value . IDENT_4 . IDENT_5 . IDENT_6 ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_0 . jcr . value . Path ) { org . IDENT_0 . common . util . IDENT_7 . METHOD_2 ( that , STRING_2 ) ; if ( that . METHOD_3 ( ) ) return that ; org . IDENT_0 . jcr . value . Path IDENT_8 = this . METHOD_4 ( ) ; int IDENT_9 = 0 ; java . util . Iterator < org . IDENT_0 . jcr . value . IDENT_4 . IDENT_10 > IDENT_11 = IDENT_8 . iterator ( ) ; java . util . Iterator < org . IDENT_0 . jcr . value . IDENT_4 . IDENT_10 > IDENT_12 = that . METHOD_4 ( ) . iterator ( ) ; while ( ( IDENT_11 . hasNext ( ) ) && ( IDENT_12 . hasNext ( ) ) ) { org . IDENT_0 . jcr . value . IDENT_4 . IDENT_10 IDENT_13 = IDENT_11 . next ( ) ; org . IDENT_0 . jcr . value . IDENT_4 . IDENT_10 IDENT_14 = IDENT_12 . next ( ) ; if ( IDENT_13 . equals ( IDENT_14 ) ) { ++ IDENT_9 ; } else { break ; } } if ( IDENT_9 == 0 ) return IDENT_15 . INSTANCE ; return IDENT_8 . METHOD_5 ( 0 , IDENT_9 ) ; }
org . junit . Assert . assertThat ( IDENT_1 . METHOD_1 ( IDENT_3 ) , org . hamcrest . core . Is . is ( common ) ) 