METHOD_0 ( ) { org . apache . maven . plugins . IDENT_0 . IDENT_1 IDENT_2 = IDENT_3 . METHOD_1 ( org . apache . maven . plugins . IDENT_0 . IDENT_4 . IDENT_5 , "" ) ; org . apache . maven . plugins . IDENT_0 . IDENT_1 IDENT_6 = IDENT_3 . METHOD_1 ( org . apache . maven . plugins . IDENT_0 . IDENT_4 . IDENT_5 , "" ) ; org . apache . maven . plugins . IDENT_0 . IDENT_7 IDENT_8 = new org . apache . maven . plugins . IDENT_0 . METHOD_2 ( org . apache . maven . plugins . IDENT_0 . IDENT_4 . log , IDENT_2 , IDENT_6 ) ; java . lang . String IDENT_9 = IDENT_8 . METHOD_3 ( org . apache . maven . plugins . IDENT_0 . IDENT_4 . IDENT_10 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( boolean ) { java . lang . String result = IDENT_11 ; if ( ( ( list . size ( ) ) >= 2 ) && IDENT_12 ) { java . lang . StringBuilder IDENT_13 = new java . lang . StringBuilder ( ) ; for ( java . util . Set < org . apache . maven . IDENT_14 . IDENT_15 > IDENT_16 : METHOD_4 ( ) . values ( ) ) { if ( ( IDENT_16 . size ( ) ) <= 1 ) { continue ; } if ( ( IDENT_13 . length ( ) ) == 0 ) { IDENT_13 . append ( STRING_0 ) ; } else { IDENT_13 . append ( STRING_1 ) ; } IDENT_13 . append ( METHOD_5 ( IDENT_16 , STRING_2 ) ) ; } result += IDENT_13 . toString ( ) ; } return result ; }
org . junit . Assert . assertEquals ( org . apache . maven . plugins . IDENT_0 . IDENT_4 . IDENT_5 , IDENT_9 ) 