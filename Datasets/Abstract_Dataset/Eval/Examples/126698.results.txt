METHOD_0 ( ) { java . util . ArrayList < org . apache . cxf . binding . IDENT_0 . IDENT_1 > IDENT_2 = new java . util . ArrayList ( ) ; org . apache . cxf . binding . IDENT_0 . IDENT_1 IDENT_3 = mock ( org . apache . cxf . binding . IDENT_0 . IDENT_1 . class ) ; when ( IDENT_3 . getName ( ) ) . thenReturn ( new javax . xml . IDENT_4 . METHOD_1 ( io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_6 . IDENT_7 ) ) ; IDENT_2 . add ( IDENT_3 ) ; when ( message . get ( anyString ( ) ) ) . thenReturn ( IDENT_2 ) ; interceptor . METHOD_2 ( message ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . apache . cxf . message . Message ) { java . util . List < org . apache . cxf . binding . IDENT_0 . IDENT_1 > headers = ( ( java . util . ArrayList < org . apache . cxf . binding . IDENT_0 . IDENT_1 > ) ( message . get ( io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_8 . IDENT_9 ) ) ) ; if ( ( ! ( METHOD_3 ( headers ) ) ) && ( ! ( headers . isEmpty ( ) ) ) ) { org . w3c . dom . Element IDENT_10 = ( ( org . w3c . dom . Element ) ( headers . get ( 0 ) . METHOD_4 ( ) ) ) ; org . w3c . dom . Element element = IDENT_10 . METHOD_5 ( ) . METHOD_6 ( io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_8 . IDENT_11 , io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_8 . IDENT_12 ) ; element . METHOD_7 ( IDENT_10 . METHOD_5 ( ) . METHOD_8 ( ( STRING_0 + ( java . util . UUID . METHOD_9 ( ) . toString ( ) ) ) ) ) ; javax . xml . IDENT_4 . METHOD_1 IDENT_13 = new javax . xml . IDENT_4 . METHOD_1 ( io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_8 . IDENT_11 , io . IDENT_5 . utils . IDENT_0 . interceptor . IDENT_8 . IDENT_14 ) ; org . apache . cxf . binding . IDENT_0 . IDENT_1 header = new org . apache . cxf . binding . IDENT_0 . METHOD_10 ( IDENT_13 , element ) ; header . METHOD_11 ( IDENT_15 . IDENT_16 . IDENT_17 ) ; headers . add ( header ) ; } }
org . junit . Assert . assertEquals ( 1 , IDENT_2 . size ( ) ) 