METHOD_0 ( ) { org . apache . IDENT_0 . data . IDENT_1 input = IDENT_2 . METHOD_1 ( 2 ) ; org . apache . IDENT_0 . data . IDENT_1 IDENT_3 = IDENT_2 . METHOD_1 ( ) ; IDENT_3 . append ( ( - 1 ) ) ; IDENT_3 . append ( 0 ) ; IDENT_3 . append ( 1 ) ; input . set ( 0 , IDENT_3 ) ; input . set ( 1 , 0 ) ; com . IDENT_4 . IDENT_0 . filter . tuple . IDENT_5 c = new com . IDENT_4 . IDENT_0 . filter . tuple . METHOD_2 ( ) ; boolean found = c . exec ( input ) ; "<AssertPlaceHolder>" ; } exec ( org . apache . IDENT_0 . data . IDENT_1 ) { if ( input == null ) { return 0L ; } long n = 0 ; if ( ( input . size ( ) ) != 0 ) { java . lang . Object obj = input . get ( 0 ) ; if ( obj instanceof org . apache . IDENT_0 . data . IDENT_6 ) { n = ( ( org . apache . IDENT_0 . data . IDENT_6 ) ( obj ) ) . size ( ) ; } else if ( obj instanceof org . apache . IDENT_0 . data . IDENT_7 ) { n = ( ( org . apache . IDENT_0 . data . IDENT_7 ) ( obj ) ) . size ( ) ; } else if ( obj instanceof java . lang . String ) { n = ( ( java . lang . String ) ( obj ) ) . length ( ) ; } else if ( obj instanceof java . util . Map ) { n = ( ( java . util . Map ) ( obj ) ) . size ( ) ; } } return n ; }
org . junit . Assert . assertTrue ( found ) 