METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . sync . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . sync . METHOD_1 ( ) ; for ( int i = 0 ; i < ( ( 2 * ( org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) ) + 10 ) ; i ++ ) { IDENT_3 . put ( ( STRING_0 + ( 100 - i ) ) , java . lang . Long . valueOf ( ( 100 - i ) ) ) ; } IDENT_8 . METHOD_2 ( IDENT_3 ) ; java . util . Set < java . lang . String > expected = new java . util . HashSet < java . lang . String > ( ) ; for ( int i = 0 ; i < ( org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) ; i ++ ) { expected . add ( ( STRING_0 + ( 100 - i ) ) ) ; } "<AssertPlaceHolder>" ; } METHOD_3 ( ) { org . IDENT_0 . IDENT_1 . sync . METHOD_1 IDENT_3 = METHOD_4 ( ) ; java . util . List < java . util . Map . Entry < java . lang . String , java . lang . Object > > IDENT_9 = new java . util . ArrayList < java . util . Map . Entry < java . lang . String , java . lang . Object > > ( IDENT_3 . entrySet ( ) ) ; java . util . Collections . METHOD_5 ( IDENT_9 , new org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 . METHOD_6 ( ) ) ; java . util . List < java . lang . String > batch = new java . util . ArrayList < java . lang . String > ( org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) ; int i = 0 ; while ( ( ( batch . size ( ) ) < ( org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) ) && ( i < ( IDENT_9 . size ( ) ) ) ) { batch . add ( IDENT_9 . get ( ( i ++ ) ) . getKey ( ) ) ; } return batch ; }
org . junit . Assert . assertEquals ( expected , new java . util . HashSet < java . lang . String > ( IDENT_8 . METHOD_3 ( ) ) ) 