METHOD_0 ( ) { java . nio . file . Path IDENT_0 = java . nio . file . IDENT_1 . get ( STRING_0 ) ; java . nio . file . Path IDENT_2 = java . nio . file . IDENT_1 . get ( STRING_0 ) ; byte [ ] IDENT_3 = IDENT_4 . METHOD_1 ( IDENT_0 ) ; byte [ ] IDENT_5 = IDENT_4 . METHOD_1 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . nio . file . Path ) { if ( ( ( IDENT_6 ) == null ) || ( ! ( IDENT_7 . METHOD_2 ( ) . exists ( ) ) ) ) { nl . IDENT_8 . vertx . IDENT_9 . IDENT_10 . util . IDENT_11 . LOG . debug ( STRING_1 , IDENT_6 , IDENT_7 ) ; return new byte [ 0 ] ; } try ( java . io . InputStream is = java . nio . file . IDENT_12 . METHOD_3 ( IDENT_7 ) ) { java . security . IDENT_13 IDENT_14 = new java . security . METHOD_4 ( is , IDENT_6 ) ; while ( ( IDENT_14 . read ( ) ) != ( - 1 ) ) ; byte [ ] IDENT_15 = IDENT_6 . METHOD_5 ( ) ; IDENT_6 . METHOD_6 ( ) ; return METHOD_5 ; } catch ( java . io . IOException e ) { nl . IDENT_8 . vertx . IDENT_9 . IDENT_10 . util . IDENT_11 . LOG . error ( STRING_2 , e ) ; return new byte [ 0 ] ; } }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( IDENT_3 , IDENT_5 ) ) 