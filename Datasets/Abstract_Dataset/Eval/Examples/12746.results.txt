METHOD_0 ( ) { java . util . Collection < java . lang . Integer > init = java . util . Collections . emptyList ( ) ; org . apache . flink . IDENT_0 . api . streaming . data . IDENT_1 < java . lang . Integer > iterator = new org . apache . flink . IDENT_0 . api . streaming . data . METHOD_1 ( init . iterator ( ) ) ; "<AssertPlaceHolder>" ; iterator . METHOD_2 ( 1 ) ; try { iterator . METHOD_2 ( 2 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . IllegalStateException IDENT_2 ) { } } hasNext ( ) { try { while ( ( ( IDENT_3 ) == null ) && ( iterator . isValid ( ) ) ) { final byte [ ] IDENT_4 = iterator . key ( ) ; final IDENT_5 IDENT_6 = METHOD_3 ( IDENT_4 , IDENT_7 ) ; final int IDENT_8 = IDENT_7 . METHOD_4 ( ) ; if ( ( METHOD_5 ( IDENT_4 , IDENT_8 ) ) && ( ! ( java . util . IDENT_9 . equals ( IDENT_10 , IDENT_6 ) ) ) ) { IDENT_10 = IDENT_6 ; IDENT_3 = IDENT_6 ; } iterator . next ( ) ; } } catch ( java . lang . Exception e ) { throw new org . apache . flink . util . METHOD_6 ( ( ( STRING_1 + ( state ) ) + "]" ) , e ) ; } return ( IDENT_3 ) != null ; }
org . junit . Assert . assertFalse ( iterator . hasNext ( ) ) 