METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > IDENT_0 = new java . util . HashMap ( ) ; org . mule . runtime . policy . api . IDENT_1 IDENT_2 = IDENT_3 . METHOD_1 ( component , event . getMessage ( ) . METHOD_2 ( ) ) ; when ( event . METHOD_3 ( org . mule . runtime . core . internal . policy . IDENT_4 . IDENT_5 ) ) . thenReturn ( IDENT_2 ) ; org . mule . runtime . policy . api . IDENT_6 factory = METHOD_4 ( true , IDENT_2 ) ; org . mule . runtime . policy . api . IDENT_1 parameters = mock ( org . mule . runtime . policy . api . IDENT_1 . class ) ; when ( factory . METHOD_5 ( any ( ) , any ( ) , any ( ) ) ) . METHOD_6 ( new java . lang . METHOD_7 ( ) ) ; when ( factory . METHOD_5 ( component , IDENT_0 ) ) . thenReturn ( parameters ) ; IDENT_7 . add ( factory ) ; org . mule . runtime . policy . api . IDENT_1 IDENT_8 = IDENT_3 . METHOD_8 ( component , event , IDENT_0 ) ; "<AssertPlaceHolder>" ; verify ( factory ) . METHOD_9 ( IDENT_9 ) ; verify ( factory ) . METHOD_5 ( any ( ) , any ( ) , any ( ) ) ; verify ( factory ) . METHOD_5 ( component , IDENT_0 ) ; } METHOD_8 ( org . mule . runtime . api . component . IDENT_10 , org . mule . runtime . core . api . event . IDENT_11 , java . util . Map ) { org . mule . runtime . api . component . IDENT_12 IDENT_13 = operation . METHOD_10 ( ) . METHOD_11 ( ) . METHOD_12 ( ) ; org . mule . runtime . policy . api . IDENT_6 found = null ; for ( org . mule . runtime . policy . api . IDENT_6 factory : IDENT_7 ) { if ( factory . METHOD_9 ( IDENT_13 ) ) { if ( found != null ) { METHOD_13 ( IDENT_13 , org . mule . runtime . policy . api . IDENT_6 . class ) ; } found = factory ; } } org . mule . runtime . policy . api . IDENT_1 IDENT_2 = ( ( org . mule . runtime . core . internal . message . IDENT_14 ) ( event ) ) . METHOD_3 ( org . mule . runtime . core . internal . policy . IDENT_4 . IDENT_5 ) ; if ( found != null ) { try { return found . METHOD_5 ( operation , IDENT_0 , IDENT_2 ) ; } catch ( java . lang . METHOD_7 error ) { return found . METHOD_5 ( operation , IDENT_0 ) ; } } else { return new org . mule . runtime . policy . api . METHOD_14 ( operation , IDENT_2 ) ; } }
org . junit . Assert . assertThat ( IDENT_8 , org . hamcrest . Matchers . is ( parameters ) ) 