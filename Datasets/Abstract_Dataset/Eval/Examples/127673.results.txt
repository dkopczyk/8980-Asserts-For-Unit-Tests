METHOD_0 ( ) { final java . util . Set < java . lang . String > IDENT_0 = new java . util . HashSet < java . lang . String > ( ) ; final java . util . List < java . lang . Object [ ] > IDENT_1 = new java . util . ArrayList < java . lang . Object [ ] > ( 1000 ) ; final int IDENT_2 = INT_0 ; for ( int index = 0 ; index < IDENT_2 ; index ++ ) { java . lang . String IDENT_3 = org . mule . runtime . core . api . util . UUID . METHOD_1 ( ) ; IDENT_1 . add ( new java . lang . Object [ ] { IDENT_3 , java . lang . Integer . valueOf ( index ) } ) ; if ( IDENT_0 . contains ( IDENT_3 ) ) { org . junit . Assert . fail ( ( ( ( STRING_0 + index ) + STRING_1 ) + IDENT_3 ) ) ; } else { IDENT_0 . add ( IDENT_3 ) ; } } final java . util . IDENT_4 < java . lang . Object [ ] > IDENT_5 = new java . util . IDENT_4 < java . lang . Object [ ] > ( ) { public int compare ( java . lang . Object [ ] IDENT_6 , java . lang . Object [ ] IDENT_7 ) { return ( ( java . lang . String ) ( IDENT_6 [ 0 ] ) ) . compareTo ( ( ( java . lang . String ) ( IDENT_7 [ 0 ] ) ) ) ; } } ; java . util . Collections . METHOD_2 ( IDENT_1 , IDENT_5 ) ; for ( int index = 0 ; index < IDENT_2 ; index ++ ) { "<AssertPlaceHolder>" ; } } get ( int ) { return delegate . get ( index ) ; }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( index ) , IDENT_1 . get ( index ) [ 1 ] ) 