METHOD_0 ( ) { request . METHOD_1 ( STRING_0 , STRING_1 ) ; request . METHOD_1 ( STRING_2 , STRING_3 ) ; request . METHOD_2 ( STRING_4 , IDENT_0 . IDENT_1 . METHOD_3 ( ) ) ; com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . servlet . service ( request , response ) ; java . lang . String content = response . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } service ( javax . servlet . IDENT_6 , javax . servlet . IDENT_7 ) { javax . servlet . http . IDENT_8 request = ( ( javax . servlet . http . IDENT_8 ) ( req ) ) ; javax . servlet . http . IDENT_9 response = ( ( javax . servlet . http . IDENT_9 ) ( res ) ) ; response . METHOD_5 ( STRING_5 , java . lang . System . currentTimeMillis ( ) ) ; response . METHOD_6 ( " " 0 ) ; java . lang . String IDENT_10 = request . METHOD_7 ( " " 2 ) ; if ( IDENT_10 == null ) { response . METHOD_8 ( INT_0 , STRING_6 ) ; return ; } java . lang . String IDENT_11 = IDENT_10 . toLowerCase ( Locale . IDENT_12 ) . replaceAll ( STRING_7 , " " ) ; if ( ( ! ( IDENT_11 . startsWith ( STRING_8 ) ) ) && ( ! ( IDENT_11 . contains ( STRING_9 ) ) ) ) { java . lang . String IDENT_13 = request . METHOD_7 ( STRING_2 ) ; java . lang . String offset = request . METHOD_7 ( " " 1 ) ; if ( ( IDENT_14 ) != null ) { if ( IDENT_13 != null ) { IDENT_13 = java . lang . String . valueOf ( java . lang . Math . min ( java . lang . Integer . valueOf ( IDENT_13 ) , IDENT_14 ) ) ; } else { IDENT_13 = IDENT_14 . toString ( ) ; } } if ( IDENT_13 != null ) { IDENT_10 += STRING_10 + IDENT_13 ; } if ( offset != null ) { IDENT_10 += " " 3 + offset ; } } try { METHOD_9 ( request , response , IDENT_10 ) ; } catch ( java . lang . Exception e ) { if ( ( e . getMessage ( ) ) != null ) { com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_15 . logger . error ( e . getMessage ( ) , e ) ; response . METHOD_8 ( INT_0 , ( ( ( e . getMessage ( ) ) + STRING_11 ) + ( request . METHOD_7 ( " " 2 ) ) ) ) ; } else { com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_15 . logger . error ( STRING_12 , e ) ; response . METHOD_8 ( INT_0 ) ; } } }
org . junit . Assert . assertEquals ( 5 , content . split ( "\n" ) . length ) 