METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; java . util . concurrent . atomic . METHOD_1 IDENT_2 = new java . util . concurrent . atomic . METHOD_1 ( ) ; com . IDENT_3 . IDENT_4 . streams . IDENT_5 < java . lang . Integer , java . lang . Integer > streams = com . IDENT_3 . IDENT_4 . streams . IDENT_5 . < java . lang . Integer > builder ( ) . METHOD_2 ( ) . METHOD_3 ( ( task ) -> { IDENT_1 . METHOD_4 ( ) ; return java . util . concurrent . IDENT_6 . METHOD_5 ( ) . METHOD_6 ( ) ; } ) . METHOD_7 ( ( value ) -> { IDENT_2 . METHOD_4 ( ) ; return true ; } ) . build ( ) ; streams . start ( ) . METHOD_8 ( 1L , TimeUnit . IDENT_7 ) . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { com . IDENT_3 . IDENT_4 . commons . util . IDENT_8 IDENT_9 = new com . IDENT_3 . IDENT_4 . commons . util . METHOD_10 ( ) ; IDENT_9 . put ( STRING_0 , "foo" ) ; java . lang . Object IDENT_10 = IDENT_9 . get ( STRING_0 ) ; org . junit . Assert . assertEquals ( "foo" , IDENT_10 ) ; }
org . junit . Assert . assertEquals ( IDENT_1 . get ( ) , IDENT_2 . get ( ) ) 