METHOD_0 ( ) { METHOD_1 ( ) ; org . IDENT_0 . api . easymock . IDENT_1 . METHOD_2 ( ) ; org . easymock . EasyMock . expect ( ctx . METHOD_3 ( ) ) . andReturn ( IDENT_2 ) ; java . util . HashMap < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap ( ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_4 ( ( ( java . lang . IDENT_5 [ ] ) ( org . easymock . EasyMock . METHOD_5 ( ) ) ) ) ) . andReturn ( IDENT_3 ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_6 ( org . easymock . EasyMock . eq ( IDENT_6 . IDENT_7 . IDENT_8 ) , org . easymock . EasyMock . eq ( IDENT_3 ) ) ) . andReturn ( IDENT_9 ) ; IDENT_4 . METHOD_7 ( IDENT_9 ) ; org . IDENT_0 . api . easymock . IDENT_1 . METHOD_8 ( ) ; IDENT_10 . IDENT_11 . model . IDENT_12 model = bean . METHOD_9 ( IDENT_13 . getName ( ) , ( ( java . lang . String ) ( null ) ) ) ; org . IDENT_0 . api . easymock . IDENT_1 . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } getName ( ) { return name ; }
org . junit . Assert . assertEquals ( IDENT_13 , model ) 