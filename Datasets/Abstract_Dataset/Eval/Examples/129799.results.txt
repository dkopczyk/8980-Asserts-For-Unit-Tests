METHOD_0 ( ) { int IDENT_0 = 0 ; java . util . IDENT_1 random = new java . util . METHOD_1 ( java . lang . System . currentTimeMillis ( ) ) ; int IDENT_2 = ( random . METHOD_2 ( INT_0 ) ) + INT_0 ; int IDENT_3 = ( random . METHOD_2 ( INT_1 ) ) + INT_1 ; org . neo4j . kernel . impl . IDENT_4 . store . IDENT_5 . METHOD_3 ( METHOD_4 ( ) ) ; org . neo4j . kernel . impl . IDENT_4 . store . IDENT_6 IDENT_7 = new org . neo4j . kernel . impl . IDENT_4 . store . METHOD_5 ( METHOD_4 ( ) , IDENT_3 , ( IDENT_2 * 2 ) ) ; java . util . List < java . lang . Long > IDENT_8 = new java . util . ArrayList < java . lang . Long > ( ) ; float IDENT_9 = FLOAT_0 ; float IDENT_10 = FLOAT_1 ; int IDENT_11 = 0 ; try { while ( IDENT_11 < IDENT_2 ) { float IDENT_12 = random . METHOD_6 ( ) ; if ( ( IDENT_12 < IDENT_9 ) && ( IDENT_11 > 0 ) ) { IDENT_7 . METHOD_7 ( IDENT_8 . remove ( random . METHOD_2 ( IDENT_11 ) ) . METHOD_8 ( ) ) ; IDENT_11 OP_0 ; } else { IDENT_8 . add ( IDENT_7 . METHOD_9 ( ) ) ; IDENT_11 ++ ; } if ( ( IDENT_12 > ( FLOAT_2 - IDENT_10 ) ) || ( IDENT_12 < IDENT_10 ) ) { IDENT_7 . close ( ) ; IDENT_3 = ( random . METHOD_2 ( INT_1 ) ) + INT_1 ; IDENT_7 = new org . neo4j . kernel . impl . IDENT_4 . store . METHOD_5 ( METHOD_4 ( ) , IDENT_3 , ( IDENT_2 * 2 ) ) ; IDENT_0 ++ ; } } IDENT_7 . close ( ) ; } finally { java . io . File file = new java . io . File ( METHOD_4 ( ) ) ; if ( file . exists ( ) ) { "<AssertPlaceHolder>" ; } } } delete ( ) { IDENT_13 . METHOD_10 ( IDENT_14 ) . delete ( IDENT_13 ) ; }
org . junit . Assert . assertTrue ( file . delete ( ) ) 