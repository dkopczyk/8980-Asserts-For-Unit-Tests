METHOD_0 ( ) { javax . transaction . IDENT_0 . IDENT_1 IDENT_2 = new org . neo4j . kernel . impl . transaction . METHOD_1 ( new byte [ 1 ] , new byte [ 1 ] ) ; javax . transaction . IDENT_0 . IDENT_3 IDENT_4 = IDENT_5 . METHOD_2 ( ) ; IDENT_4 . start ( IDENT_2 , IDENT_3 . IDENT_6 ) ; long IDENT_7 = IDENT_8 . METHOD_3 ( org . neo4j . IDENT_9 . Node . class ) ; IDENT_5 . METHOD_4 ( ) . METHOD_5 ( IDENT_7 ) ; long IDENT_10 = IDENT_8 . METHOD_3 ( org . neo4j . IDENT_9 . Node . class ) ; IDENT_5 . METHOD_4 ( ) . METHOD_5 ( IDENT_10 ) ; long IDENT_11 = IDENT_8 . METHOD_3 ( org . neo4j . kernel . impl . IDENT_12 . store . IDENT_13 . class ) ; IDENT_5 . METHOD_4 ( ) . METHOD_6 ( IDENT_7 , IDENT_11 , index ( STRING_0 ) , STRING_1 ) ; IDENT_5 . METHOD_4 ( ) . METHOD_7 ( IDENT_7 , false ) ; int IDENT_14 = ( ( int ) ( IDENT_8 . METHOD_3 ( org . neo4j . IDENT_9 . IDENT_15 . class ) ) ) ; IDENT_5 . METHOD_8 ( ) . METHOD_9 ( IDENT_14 , STRING_2 ) ; long IDENT_16 = IDENT_8 . METHOD_3 ( org . neo4j . IDENT_9 . IDENT_17 . class ) ; IDENT_5 . METHOD_10 ( ) . METHOD_11 ( IDENT_16 , IDENT_7 , IDENT_10 , IDENT_14 ) ; long IDENT_18 = IDENT_8 . METHOD_3 ( org . neo4j . kernel . impl . IDENT_12 . store . IDENT_13 . class ) ; IDENT_5 . METHOD_10 ( ) . METHOD_6 ( IDENT_16 , IDENT_18 , index ( STRING_0 ) , STRING_1 ) ; IDENT_5 . METHOD_4 ( ) . METHOD_12 ( IDENT_7 , IDENT_11 , STRING_3 ) ; IDENT_5 . METHOD_10 ( ) . METHOD_12 ( IDENT_16 , IDENT_18 , STRING_3 ) ; IDENT_5 . METHOD_4 ( ) . METHOD_13 ( IDENT_7 , IDENT_11 ) ; IDENT_5 . METHOD_10 ( ) . METHOD_13 ( IDENT_16 , IDENT_18 ) ; IDENT_5 . METHOD_10 ( ) . METHOD_14 ( IDENT_16 ) ; IDENT_5 . METHOD_4 ( ) . METHOD_15 ( IDENT_7 ) ; IDENT_5 . METHOD_4 ( ) . METHOD_15 ( IDENT_10 ) ; IDENT_4 . end ( IDENT_2 , IDENT_3 . IDENT_19 ) ; IDENT_4 . commit ( IDENT_2 , true ) ; org . neo4j . kernel . impl . IDENT_12 . store . IDENT_20 . METHOD_16 ( path ( ) ) ; IDENT_5 . METHOD_17 ( ) ; IDENT_8 . close ( ) ; METHOD_18 ( ) ; org . neo4j . kernel . impl . IDENT_12 . store . IDENT_20 . METHOD_19 ( path ( ) ) ; IDENT_8 = METHOD_20 ( ) ; IDENT_5 = ( ( org . neo4j . kernel . impl . IDENT_12 . IDENT_0 . IDENT_21 ) ( IDENT_8 . METHOD_21 ( ) ) ) ; IDENT_4 = IDENT_5 . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; IDENT_5 . METHOD_17 ( ) ; } METHOD_22 ( java . util . Iterator ) { IDENT_22 . METHOD_23 ( ( STRING_4 4 + ( IDENT_23 . getName ( ) ) ) , true ) ; try { java . util . List < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 > IDENT_26 = new java . util . ArrayList < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 > ( ) ; java . util . List < javax . transaction . IDENT_0 . IDENT_1 > IDENT_27 = new java . util . IDENT_28 < javax . transaction . IDENT_0 . IDENT_1 > ( ) ; java . util . Map < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_29 , javax . transaction . IDENT_0 . IDENT_3 > IDENT_30 = new java . util . HashMap < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_29 , javax . transaction . IDENT_0 . IDENT_3 > ( ) ; METHOD_24 ( IDENT_26 , IDENT_27 , IDENT_30 , IDENT_31 ) ; java . util . Iterator < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_29 > IDENT_32 = IDENT_30 . METHOD_25 ( ) . iterator ( ) ; java . util . List < javax . transaction . IDENT_0 . IDENT_1 > IDENT_33 = new java . util . IDENT_28 < javax . transaction . IDENT_0 . IDENT_1 > ( ) ; while ( IDENT_32 . hasNext ( ) ) { javax . transaction . IDENT_0 . IDENT_3 IDENT_4 = IDENT_30 . get ( IDENT_32 . next ( ) ) ; javax . transaction . IDENT_0 . IDENT_1 [ ] IDENT_34 = IDENT_4 . METHOD_22 ( IDENT_3 . IDENT_6 ) ; for ( int i = 0 ; i < ( IDENT_34 . length ) ; i ++ ) { if ( org . neo4j . kernel . impl . transaction . METHOD_1 . METHOD_26 ( IDENT_34 [ i ] . METHOD_27 ( ) ) ) { if ( IDENT_27 . contains ( IDENT_34 [ i ] ) ) { org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( STRING_5 8 + ( IDENT_34 [ i ] ) ) + STRING_6 ) ) ; IDENT_22 . METHOD_23 ( ( ( STRING_7 + ( IDENT_34 [ i ] ) ) + STRING_6 ) , true ) ; IDENT_27 . remove ( IDENT_34 [ i ] ) ; IDENT_4 . METHOD_29 ( IDENT_34 [ i ] ) ; } else { IDENT_33 . add ( IDENT_34 [ i ] ) ; } } else { org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_30 ( ( STRING_5 + ( IDENT_34 [ i ] ) ) ) ; } } } java . util . Collections . METHOD_31 ( IDENT_26 , new java . util . IDENT_35 < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 > ( ) { public int compare ( org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 IDENT_36 , org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 IDENT_37 ) { return ( IDENT_36 . METHOD_32 ( ) ) - ( IDENT_37 . METHOD_32 ( ) ) ; } } ) ; java . util . Iterator < org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 > IDENT_38 = IDENT_26 . iterator ( ) ; while ( IDENT_38 . hasNext ( ) ) { org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_25 IDENT_39 = IDENT_38 . next ( ) ; int IDENT_40 = IDENT_39 . METHOD_32 ( ) ; javax . transaction . IDENT_0 . IDENT_1 [ ] IDENT_34 = IDENT_39 . METHOD_33 ( ) ; org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( ( STRING_8 + IDENT_40 ) + STRING_9 ) + ( IDENT_34 . length ) ) ) ; for ( int i = 0 ; i < ( IDENT_34 . length ) ; i ++ ) { if ( ! ( IDENT_33 . contains ( IDENT_34 [ i ] ) ) ) { org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( ( ( ( STRING_10 + IDENT_40 ) + STRING_11 ) + ( IDENT_34 [ i ] ) ) + STRING_4 2 ) + STRING_5 0 ) ) ; continue ; } IDENT_33 . remove ( IDENT_34 [ i ] ) ; org . neo4j . kernel . impl . transaction . IDENT_24 . IDENT_29 resource = new org . neo4j . kernel . impl . transaction . IDENT_24 . METHOD_34 ( IDENT_34 [ i ] . METHOD_35 ( ) ) ; if ( ! ( IDENT_30 . containsKey ( resource ) ) ) { throw new org . neo4j . IDENT_9 . METHOD_36 ( ( STRING_4 5 + ( IDENT_34 [ i ] ) ) ) ; } org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( ( ( STRING_5 1 + IDENT_40 ) + STRING_11 ) + ( IDENT_34 [ i ] ) ) + STRING_5 2 ) ) ; IDENT_22 . METHOD_23 ( ( STRING_5 6 + ( IDENT_34 [ i ] ) ) , true ) ; IDENT_30 . get ( resource ) . commit ( IDENT_34 [ i ] , false ) ; } } java . util . Iterator < javax . transaction . IDENT_0 . IDENT_1 > IDENT_41 = IDENT_33 . iterator ( ) ; while ( IDENT_41 . hasNext ( ) ) { javax . transaction . IDENT_0 . IDENT_1 IDENT_2 = IDENT_41 . next ( ) ; org . neo4j . kernel . impl . transaction . IDENT_24 . METHOD_34 resource = new org . neo4j . kernel . impl . transaction . IDENT_24 . METHOD_34 ( IDENT_2 . METHOD_35 ( ) ) ; if ( ! ( IDENT_30 . containsKey ( resource ) ) ) { throw new org . neo4j . IDENT_9 . METHOD_36 ( ( STRING_4 5 + IDENT_2 ) ) ; } org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( STRING_4 0 + IDENT_2 ) + STRING_5 3 ) ) ; IDENT_22 . METHOD_23 ( ( ( STRING_5 4 + IDENT_2 ) + STRING_5 5 ) , true ) ; IDENT_30 . get ( resource ) . METHOD_29 ( IDENT_2 ) ; } if ( ( IDENT_27 . size ( ) ) > 0 ) { org . neo4j . kernel . impl . transaction . IDENT_24 . log . METHOD_28 ( ( ( ( STRING_12 + ( ( STRING_5 7 + STRING_4 3 ) + STRING_5 9 ) ) + ( IDENT_27 . size ( ) ) ) + STRING_4 ) ) ; IDENT_22 . METHOD_23 ( ( ( STRING_4 6 + ( IDENT_27 . size ( ) ) ) + STRING_13 ) , true ) ; } } catch ( javax . transaction . IDENT_0 . IDENT_42 e ) { throw new org . neo4j . IDENT_9 . METHOD_36 ( ( STRING_4 1 + e ) ) ; } }
org . junit . Assert . assertEquals ( 0 , IDENT_4 . METHOD_22 ( IDENT_3 . IDENT_6 ) . length ) 