METHOD_0 ( ) { org . neo4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; org . neo4j . IDENT_4 . Node node = mock ( org . neo4j . IDENT_4 . Node . class ) ; when ( node . getId ( ) ) . thenReturn ( 1L , INT_0 , INT_1 ) ; IDENT_3 . next ( node , FLOAT_0 ) ; IDENT_3 . next ( node , 2.0 ) ; IDENT_3 . next ( node , 1.0 ) ; java . util . List < java . util . Map < java . lang . String , java . lang . Object > > expected = java . util . Arrays . asList ( org . neo4j . helpers . collection . IDENT_5 . map ( org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_6 , 1L , org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_7 , FLOAT_0 ) , org . neo4j . helpers . collection . IDENT_5 . map ( org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_6 , INT_0 , org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_7 , 2.0 ) , org . neo4j . helpers . collection . IDENT_5 . map ( org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_6 , INT_1 , org . neo4j . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_7 , 1.0 ) ) ; "<AssertPlaceHolder>" ; } result ( ) { return IDENT_8 ; }
org . junit . Assert . assertThat ( IDENT_3 . result ( ) , org . hamcrest . Matchers . is ( expected ) ) 