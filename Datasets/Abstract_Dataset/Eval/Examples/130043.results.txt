METHOD_0 ( ) { org . neo4j . values . IDENT_0 . IDENT_1 IDENT_2 = METHOD_1 ( INT_0 , 100 , java . time . IDENT_3 . of ( STRING_0 ) ) ; org . neo4j . values . IDENT_0 . IDENT_1 IDENT_4 = METHOD_1 ( INT_1 , 100 , java . time . IDENT_3 . of ( STRING_1 ) ) ; org . neo4j . values . IDENT_0 . IDENT_1 IDENT_5 = METHOD_1 ( INT_1 , 100 , java . time . IDENT_3 . of ( STRING_2 ) ) ; org . neo4j . values . IDENT_0 . IDENT_1 IDENT_6 = METHOD_1 ( INT_1 , 100 , java . time . IDENT_3 . of ( STRING_3 ) ) ; org . neo4j . values . IDENT_0 . IDENT_1 IDENT_7 = METHOD_1 ( INT_1 , 100 , java . time . IDENT_3 . of ( STRING_4 ) ) ; org . neo4j . values . IDENT_0 . IDENT_1 IDENT_8 = METHOD_1 ( INT_1 , INT_2 , java . time . IDENT_3 . of ( STRING_1 ) ) ; METHOD_2 ( java . util . Arrays . asList ( org . neo4j . kernel . api . index . IDENT_9 . add ( 1L , IDENT_10 . schema ( ) , IDENT_2 ) , org . neo4j . kernel . api . index . IDENT_9 . add ( INT_3 , IDENT_10 . schema ( ) , IDENT_4 ) , org . neo4j . kernel . api . index . IDENT_9 . add ( INT_4 , IDENT_10 . schema ( ) , IDENT_5 ) , org . neo4j . kernel . api . index . IDENT_9 . add ( INT_5 , IDENT_10 . schema ( ) , IDENT_6 ) , org . neo4j . kernel . api . index . IDENT_9 . add ( INT_6 , IDENT_10 . schema ( ) , IDENT_7 ) , org . neo4j . kernel . api . index . IDENT_9 . add ( INT_7 , IDENT_10 . schema ( ) , IDENT_8 ) ) ) ; "<AssertPlaceHolder>" ; } range ( int , java . lang . IDENT_11 , boolean , java . lang . IDENT_11 , boolean ) { return new org . neo4j . internal . kernel . api . IDENT_12 . METHOD_3 ( IDENT_13 , ( from == null ? null : org . neo4j . values . IDENT_0 . IDENT_14 . METHOD_4 ( from ) ) , IDENT_15 , ( to == null ? null : org . neo4j . values . IDENT_0 . IDENT_14 . METHOD_4 ( to ) ) , IDENT_16 ) ; }
org . junit . Assert . assertThat ( query ( range ( 1 , IDENT_4 , true , IDENT_7 , true ) ) , org . hamcrest . Matchers . contains ( INT_3 , INT_4 , INT_5 , INT_6 ) ) 