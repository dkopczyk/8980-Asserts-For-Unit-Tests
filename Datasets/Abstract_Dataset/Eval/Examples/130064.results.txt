METHOD_0 ( ) { org . neo4j . internal . kernel . api . IDENT_0 transaction = METHOD_1 ( org . neo4j . kernel . api . security . IDENT_1 . METHOD_2 ( ) ) ; int IDENT_2 = transaction . METHOD_3 ( ) . METHOD_4 ( "foo" ) ; int type = transaction . METHOD_3 ( ) . METHOD_5 ( STRING_0 ) ; long IDENT_3 = transaction . METHOD_6 ( ) . METHOD_7 ( ) ; long IDENT_4 = transaction . METHOD_6 ( ) . METHOD_7 ( ) ; long IDENT_5 = transaction . METHOD_6 ( ) . METHOD_8 ( IDENT_3 , type , IDENT_4 ) ; transaction . METHOD_6 ( ) . METHOD_9 ( IDENT_5 , IDENT_2 , org . neo4j . values . IDENT_6 . IDENT_7 . of ( "bar" ) ) ; commit ( ) ; org . neo4j . internal . kernel . api . IDENT_8 write = METHOD_10 ( ) ; write . METHOD_11 ( IDENT_5 , IDENT_2 ) ; write . METHOD_9 ( IDENT_5 , IDENT_2 , org . neo4j . values . IDENT_6 . IDENT_7 . of ( "bar" ) ) ; write . METHOD_11 ( IDENT_5 , IDENT_2 ) ; write . METHOD_11 ( IDENT_5 , IDENT_2 ) ; commit ( ) ; transaction = METHOD_1 ( ) ; "<AssertPlaceHolder>" ; commit ( ) ; } METHOD_12 ( org . neo4j . internal . kernel . api . IDENT_0 , long , int ) { try ( org . neo4j . internal . kernel . api . IDENT_9 IDENT_10 = transaction . METHOD_13 ( ) . METHOD_14 ( ) ; org . neo4j . internal . kernel . api . IDENT_11 properties = transaction . METHOD_13 ( ) . METHOD_15 ( ) ) { transaction . METHOD_16 ( ) . METHOD_17 ( IDENT_12 , IDENT_10 ) ; if ( ! ( IDENT_10 . next ( ) ) ) { return IDENT_13 ; } else { IDENT_10 . properties ( properties ) ; while ( properties . next ( ) ) { if ( ( properties . METHOD_18 ( ) ) == property ) { return properties . METHOD_19 ( ) ; } } return IDENT_13 ; } } }
org . junit . Assert . assertThat ( METHOD_12 ( transaction , IDENT_5 , IDENT_2 ) , org . hamcrest . CoreMatchers . equalTo ( IDENT_7 . IDENT_13 ) ) 