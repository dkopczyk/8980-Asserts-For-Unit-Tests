METHOD_0 ( ) { java . util . concurrent . IDENT_0 executor = java . util . concurrent . IDENT_1 . METHOD_1 ( 2 ) ; java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_2 ( ) ; java . util . concurrent . atomic . METHOD_2 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( ) ; org . neo4j . util . concurrent . IDENT_5 IDENT_6 = new org . neo4j . util . concurrent . METHOD_3 ( ) ; org . neo4j . IDENT_7 . IDENT_8 IDENT_9 = org . neo4j . IDENT_7 . IDENT_8 . METHOD_4 ( STRING_0 ) ; org . neo4j . kernel . impl . event . IDENT_10 . IDENT_11 [ ] IDENT_12 = new org . neo4j . kernel . impl . event . IDENT_10 . IDENT_11 [ 20 ] ; for ( int i = 0 ; i < ( IDENT_12 . length ) ; i ++ ) { IDENT_12 [ i ] = new org . neo4j . kernel . impl . event . IDENT_10 . METHOD_5 ( ) ; } long IDENT_13 ; try ( org . neo4j . IDENT_7 . IDENT_14 tx = db . METHOD_6 ( ) ) { IDENT_13 = db . METHOD_7 ( ) . getId ( ) ; tx . METHOD_8 ( ) ; } java . util . concurrent . IDENT_15 < ? > IDENT_16 = executor . METHOD_9 ( ( ) -> { try { IDENT_3 . METHOD_10 ( ) ; IDENT_6 . METHOD_11 ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { try ( org . neo4j . IDENT_7 . IDENT_14 tx = db . METHOD_6 ( ) ) { db . METHOD_7 ( ) ; if ( java . util . concurrent . IDENT_17 . METHOD_12 ( ) . METHOD_13 ( ) ) { tx . METHOD_8 ( ) ; } } } } finally { IDENT_4 . METHOD_10 ( ) ; } } ) ; java . util . concurrent . IDENT_15 < ? > IDENT_18 = executor . METHOD_9 ( ( ) -> { try { IDENT_3 . METHOD_10 ( ) ; IDENT_6 . METHOD_11 ( ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { try ( org . neo4j . IDENT_7 . IDENT_14 tx = db . METHOD_6 ( ) ) { org . neo4j . IDENT_7 . Node IDENT_19 = db . METHOD_14 ( IDENT_13 ) ; IDENT_19 . METHOD_15 ( IDENT_19 , IDENT_9 ) ; if ( java . util . concurrent . IDENT_17 . METHOD_12 ( ) . METHOD_13 ( ) ) { tx . METHOD_8 ( ) ; } } } } finally { IDENT_4 . METHOD_10 ( ) ; } } ) ; while ( ( IDENT_3 . get ( ) ) < 2 ) { java . lang . Thread . METHOD_16 ( ) ; } int i = 0 ; db . METHOD_17 ( IDENT_12 [ i ] ) ; org . neo4j . kernel . impl . event . IDENT_10 . METHOD_5 IDENT_20 = IDENT_12 [ i ] ; i ++ ; IDENT_6 . METHOD_18 ( ) ; while ( ( IDENT_4 . get ( ) ) < 2 ) { db . METHOD_17 ( IDENT_12 [ i ] ) ; i ++ ; if ( i == ( IDENT_12 . length ) ) { i = 0 ; } db . METHOD_19 ( IDENT_20 ) ; IDENT_20 = IDENT_12 [ i ] ; } IDENT_16 . get ( ) ; IDENT_18 . get ( ) ; for ( org . neo4j . kernel . impl . event . IDENT_10 . METHOD_5 handler : IDENT_12 ) { "<AssertPlaceHolder>" ; } } get ( ) { org . neo4j . kernel . IDENT_21 . IDENT_22 . IDENT_23 IDENT_24 = IDENT_25 . METHOD_20 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_26 IDENT_27 = IDENT_24 . IDENT_27 ; long IDENT_28 = IDENT_24 . IDENT_29 ; if ( ! ( IDENT_24 . METHOD_21 ( ) ) ) { monitor . METHOD_22 ( ( IDENT_27 != null ? IDENT_27 . METHOD_23 ( ) : null ) ) ; return METHOD_24 ( IDENT_30 . IDENT_31 , IDENT_28 ) ; } if ( IDENT_27 != null ) { monitor . METHOD_25 ( IDENT_27 . METHOD_23 ( ) , IDENT_28 ) ; return METHOD_24 ( IDENT_27 . METHOD_23 ( ) , IDENT_28 ) ; } else { if ( ( IDENT_24 . IDENT_32 ) != ( IDENT_33 ) ) { long IDENT_34 = java . lang . Math . max ( org . neo4j . kernel . IDENT_21 . IDENT_33 , IDENT_24 . IDENT_32 ) ; throw new org . neo4j . kernel . impl . store . METHOD_26 ( ( ( ( STRING_1 + IDENT_34 ) + STRING_2 ) + ( IDENT_24 . IDENT_35 ) ) ) ; } monitor . METHOD_27 ( ) ; return METHOD_24 ( org . neo4j . kernel . impl . transaction . log . IDENT_30 . start ( 0 ) , IDENT_28 ) ; } }
org . junit . Assert . assertEquals ( 0 , handler . get ( ) ) 