METHOD_0 ( ) { try ( org . neo4j . index . internal . IDENT_0 . IDENT_1 < IDENT_2 , IDENT_3 > index = METHOD_1 ( ) ) { int IDENT_4 = INT_0 ; try ( org . neo4j . index . internal . IDENT_0 . IDENT_5 < IDENT_2 , IDENT_3 > writer = METHOD_2 ( index ) ) { for ( int i = 0 ; i < IDENT_4 ; i ++ ) { writer . put ( key ( i ) , value ( i ) ) ; } } java . util . IDENT_6 IDENT_7 = new java . util . METHOD_3 ( ) ; try ( org . neo4j . index . internal . IDENT_0 . IDENT_5 < IDENT_2 , IDENT_3 > writer = METHOD_2 ( index ) ) { for ( int i = 0 ; i < ( IDENT_4 - ( IDENT_4 / 10 ) ) ; i ++ ) { int IDENT_8 ; do { IDENT_8 = random . METHOD_4 ( java . lang . Integer . max ( 1 , random . METHOD_4 ( IDENT_4 ) ) ) ; } while ( IDENT_7 . get ( IDENT_8 ) ) ; IDENT_7 . set ( IDENT_8 ) ; writer . remove ( key ( IDENT_8 ) ) ; } } int next = 0 ; try ( org . neo4j . index . internal . IDENT_0 . IDENT_5 < IDENT_2 , IDENT_3 > writer = METHOD_2 ( index ) ) { for ( int i = 0 ; i < ( IDENT_4 / 10 ) ; i ++ ) { next = IDENT_7 . METHOD_5 ( next ) ; IDENT_7 . set ( next ) ; writer . remove ( key ( next ) ) ; } } try ( org . neo4j . IDENT_9 . IDENT_10 < org . neo4j . index . internal . IDENT_0 . IDENT_11 < IDENT_2 , IDENT_3 > , java . io . IOException > IDENT_12 = index . METHOD_6 ( key ( 0 ) , key ( IDENT_4 ) ) ) { "<AssertPlaceHolder>" ; } index . METHOD_7 ( ) ; } } next ( ) { return IDENT_13 . next ( ) ; }
org . junit . Assert . assertFalse ( METHOD_6 . next ( ) ) 