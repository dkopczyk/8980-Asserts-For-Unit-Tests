METHOD_0 ( ) { org . neo4j . logging . IDENT_0 log = mock ( org . neo4j . logging . IDENT_0 . class ) ; final org . neo4j . kernel . IDENT_1 . IDENT_2 IDENT_3 = org . neo4j . kernel . IDENT_4 . METHOD_1 ( IDENT_5 , log ) ; IDENT_3 . METHOD_2 ( org . neo4j . kernel . IDENT_4 . IDENT_6 ) ; final java . util . concurrent . atomic . IDENT_7 IDENT_8 = new java . util . concurrent . atomic . METHOD_3 ( ) ; org . neo4j . kernel . IDENT_1 . IDENT_9 IDENT_10 = new org . neo4j . kernel . IDENT_1 . METHOD_4 ( ) { @ org . neo4j . kernel . Override public void METHOD_5 ( ) { } @ org . neo4j . kernel . Override public void METHOD_6 ( ) { IDENT_8 . set ( true ) ; } } ; IDENT_3 . METHOD_7 ( IDENT_10 ) ; IDENT_3 . METHOD_8 ( org . neo4j . kernel . IDENT_4 . IDENT_6 ) ; IDENT_3 . METHOD_2 ( org . neo4j . kernel . IDENT_4 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } get ( ) { org . neo4j . kernel . IDENT_11 . IDENT_12 . IDENT_13 IDENT_14 = IDENT_15 . METHOD_9 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_16 IDENT_17 = IDENT_14 . IDENT_17 ; long IDENT_18 = IDENT_14 . IDENT_19 ; if ( ! ( IDENT_14 . METHOD_10 ( ) ) ) { monitor . METHOD_11 ( ( IDENT_17 != null ? IDENT_17 . METHOD_12 ( ) : null ) ) ; return METHOD_13 ( IDENT_20 . IDENT_21 , IDENT_18 ) ; } if ( IDENT_17 != null ) { monitor . METHOD_14 ( IDENT_17 . METHOD_12 ( ) , IDENT_18 ) ; return METHOD_13 ( IDENT_17 . METHOD_12 ( ) , IDENT_18 ) ; } else { if ( ( IDENT_14 . IDENT_22 ) != ( IDENT_23 ) ) { long IDENT_24 = java . lang . Math . max ( org . neo4j . kernel . IDENT_11 . IDENT_23 , IDENT_14 . IDENT_22 ) ; throw new org . neo4j . kernel . impl . store . METHOD_15 ( ( ( ( STRING_0 + IDENT_24 ) + STRING_1 ) + ( IDENT_14 . IDENT_25 ) ) ) ; } monitor . METHOD_16 ( ) ; return METHOD_13 ( org . neo4j . kernel . impl . transaction . log . IDENT_20 . start ( 0 ) , IDENT_18 ) ; } }
org . junit . Assert . assertThat ( IDENT_8 . get ( ) , org . hamcrest . CoreMatchers . equalTo ( true ) ) 