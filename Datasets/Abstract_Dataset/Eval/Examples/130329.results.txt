METHOD_0 ( ) { org . neo4j . IDENT_0 . IDENT_1 < org . neo4j . index . internal . IDENT_2 . IDENT_3 < org . neo4j . kernel . impl . index . IDENT_4 . IDENT_5 , org . neo4j . kernel . impl . index . IDENT_4 . IDENT_6 > , java . io . IOException > IDENT_0 = mock ( org . neo4j . IDENT_0 . IDENT_1 . class ) ; when ( IDENT_0 . next ( ) ) . thenReturn ( false ) ; java . util . Collection < org . neo4j . IDENT_0 . IDENT_1 < org . neo4j . index . internal . IDENT_2 . IDENT_3 < org . neo4j . kernel . impl . index . IDENT_4 . IDENT_5 , org . neo4j . kernel . impl . index . IDENT_4 . IDENT_6 > , java . io . IOException > > IDENT_7 = new java . util . HashSet ( ) ; org . neo4j . kernel . impl . index . IDENT_4 . IDENT_8 iterator = new org . neo4j . kernel . impl . index . IDENT_4 . METHOD_1 ( IDENT_0 , IDENT_7 , mock ( IDENT_9 . IDENT_10 . class ) ) ; verify ( IDENT_0 , METHOD_2 ( ) ) . close ( ) ; METHOD_3 ( iterator ) ; verify ( IDENT_0 , times ( 1 ) ) . close ( ) ; iterator . next ( ) ; verify ( IDENT_0 , times ( 1 ) ) . close ( ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { try ( org . neo4j . IDENT_0 . IDENT_1 < org . neo4j . index . internal . IDENT_2 . IDENT_3 < org . neo4j . kernel . impl . index . IDENT_4 . IDENT_5 , org . neo4j . kernel . impl . index . IDENT_4 . IDENT_6 > , java . io . IOException > IDENT_0 = index . METHOD_4 ( new org . neo4j . kernel . impl . index . IDENT_4 . METHOD_5 ( 0 , 0 ) , new org . neo4j . kernel . impl . index . IDENT_4 . METHOD_5 ( Integer . MAX_VALUE , Long . MAX_VALUE ) ) ) { return ! ( IDENT_0 . next ( ) ) ; } }
org . junit . Assert . assertTrue ( IDENT_7 . isEmpty ( ) ) 