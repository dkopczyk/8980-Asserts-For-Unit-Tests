METHOD_0 ( ) { try ( org . neo4j . kernel . impl . store . IDENT_0 store = METHOD_1 ( ) ) { long IDENT_1 = store . METHOD_2 ( ) ; int IDENT_2 = java . lang . IDENT_3 . METHOD_3 ( ) . METHOD_4 ( ) ; int IDENT_4 = INT_0 ; org . neo4j . test . IDENT_5 IDENT_6 = new org . neo4j . test . METHOD_5 ( ) ; IDENT_6 . METHOD_6 ( IDENT_2 , ( ) -> { for ( int i = 0 ; i < IDENT_4 ; i ++ ) { store . METHOD_2 ( ) ; } } ) ; IDENT_6 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( ) { long IDENT_7 = METHOD_8 ( org . neo4j . kernel . impl . store . IDENT_0 . IDENT_8 . IDENT_9 . id ) ; long version ; MOD_0 ( IDENT_10 ) { try ( org . neo4j . io . IDENT_11 . IDENT_12 IDENT_13 = IDENT_14 . io ( IDENT_7 , org . neo4j . kernel . impl . store . IDENT_15 ) ) { if ( IDENT_13 . next ( ) ) { METHOD_9 ( IDENT_13 ) ; } version = IDENT_16 ; } catch ( java . io . IOException e ) { throw new org . neo4j . kernel . impl . store . METHOD_10 ( e ) ; } } METHOD_11 ( ) ; return version ; }
org . junit . Assert . assertThat ( store . METHOD_2 ( ) , org . hamcrest . Matchers . is ( ( ( IDENT_1 + ( IDENT_2 * IDENT_4 ) ) + 1 ) ) ) 