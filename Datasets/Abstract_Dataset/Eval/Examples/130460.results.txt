METHOD_0 ( ) { long IDENT_0 = INT_0 ; org . neo4j . kernel . impl . store . id . IDENT_1 . METHOD_1 ( IDENT_2 . get ( ) , file , IDENT_0 , false ) ; long IDENT_3 = org . neo4j . kernel . impl . store . id . IDENT_1 . METHOD_2 ( IDENT_2 . get ( ) , file ) ; "<AssertPlaceHolder>" ; } get ( ) { org . neo4j . kernel . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = IDENT_8 . METHOD_3 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_9 IDENT_10 = IDENT_7 . IDENT_10 ; long IDENT_11 = IDENT_7 . IDENT_12 ; if ( ! ( IDENT_7 . METHOD_4 ( ) ) ) { monitor . METHOD_5 ( ( IDENT_10 != null ? IDENT_10 . METHOD_6 ( ) : null ) ) ; return METHOD_7 ( IDENT_13 . IDENT_14 , IDENT_11 ) ; } if ( IDENT_10 != null ) { monitor . METHOD_8 ( IDENT_10 . METHOD_6 ( ) , IDENT_11 ) ; return METHOD_7 ( IDENT_10 . METHOD_6 ( ) , IDENT_11 ) ; } else { if ( ( IDENT_7 . IDENT_15 ) != ( IDENT_16 ) ) { long IDENT_17 = java . lang . Math . max ( org . neo4j . kernel . IDENT_4 . IDENT_16 , IDENT_7 . IDENT_15 ) ; throw new org . neo4j . kernel . impl . store . METHOD_9 ( ( ( ( STRING_0 + IDENT_17 ) + STRING_1 ) + ( IDENT_7 . IDENT_18 ) ) ) ; } monitor . METHOD_10 ( ) ; return METHOD_7 ( org . neo4j . kernel . impl . transaction . log . IDENT_13 . start ( 0 ) , IDENT_11 ) ; } }
org . junit . Assert . assertEquals ( IDENT_0 , METHOD_2 ) 