METHOD_0 ( ) { long IDENT_0 = 3 ; java . lang . String IDENT_1 = STRING_0 ; org . neo4j . kernel . impl . transaction . log . IDENT_2 channel = METHOD_1 ( new org . neo4j . kernel . impl . transaction . log . METHOD_2 ( ) ) ; java . io . IOException IDENT_3 = new java . io . IOException ( IDENT_1 ) ; final java . io . IDENT_4 IDENT_5 = mock ( java . io . IDENT_4 . class ) ; METHOD_3 ( ( IDENT_6 ) -> { IDENT_6 . METHOD_4 ( ) ; return IDENT_5 ; } ) . when ( channel ) . METHOD_5 ( ) ; METHOD_6 ( IDENT_3 ) . when ( IDENT_5 ) . METHOD_7 ( ) ; when ( IDENT_7 . METHOD_8 ( ) ) . thenReturn ( channel ) ; org . neo4j . kernel . impl . transaction . log . IDENT_8 IDENT_9 = new org . neo4j . kernel . impl . transaction . log . METHOD_9 ( ) ; org . neo4j . kernel . impl . transaction . log . IDENT_10 IDENT_11 = mock ( org . neo4j . kernel . impl . transaction . log . IDENT_10 . class ) ; when ( IDENT_11 . METHOD_10 ( ) ) . thenReturn ( IDENT_0 ) ; org . mockito . Mockito . METHOD_11 ( IDENT_12 ) ; org . neo4j . kernel . impl . transaction . log . IDENT_13 IDENT_14 = IDENT_15 . add ( new org . neo4j . kernel . impl . transaction . log . METHOD_12 ( IDENT_16 , IDENT_17 , IDENT_9 , IDENT_11 , IDENT_18 , IDENT_12 ) ) ; org . neo4j . kernel . impl . transaction . IDENT_19 transaction = mock ( org . neo4j . kernel . impl . transaction . IDENT_19 . class ) ; when ( transaction . METHOD_13 ( ) ) . thenReturn ( new byte [ 0 ] ) ; try { IDENT_14 . append ( new org . neo4j . kernel . impl . api . METHOD_14 ( transaction ) , IDENT_20 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . io . IOException e ) { "<AssertPlaceHolder>" ; verify ( IDENT_11 , times ( 1 ) ) . METHOD_10 ( ) ; verify ( IDENT_11 , METHOD_15 ( ) ) . METHOD_16 ( eq ( IDENT_0 ) , METHOD_17 ( ) , METHOD_17 ( ) ) ; verify ( IDENT_12 ) . METHOD_18 ( IDENT_3 ) ; } } fail ( java . lang . Throwable ) { for ( org . neo4j . kernel . impl . api . index . IDENT_21 . IDENT_22 IDENT_23 : IDENT_24 ) { fail ( IDENT_23 , IDENT_3 ) ; } }
org . junit . Assert . assertSame ( IDENT_3 , e ) 