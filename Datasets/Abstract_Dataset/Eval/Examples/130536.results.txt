METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; IDENT_2 = new org . neo4j . io . IDENT_3 . METHOD_2 ( ) { @ org . neo4j . kernel . impl . transaction . log . IDENT_4 . Override public long METHOD_3 ( long IDENT_5 , int IDENT_6 , java . io . IDENT_7 IDENT_8 ) { return 0 ; } @ org . neo4j . kernel . impl . transaction . log . IDENT_4 . Override public void METHOD_4 ( ) { IDENT_1 . set ( true ) ; } @ org . neo4j . kernel . impl . transaction . log . IDENT_4 . Override public boolean METHOD_5 ( ) { return IDENT_1 . get ( ) ; } } ; METHOD_6 ( ) ; org . neo4j . kernel . impl . transaction . log . IDENT_4 . IDENT_9 IDENT_10 = METHOD_7 ( ) ; METHOD_7 . METHOD_8 ( org . neo4j . kernel . impl . transaction . log . IDENT_4 . IDENT_11 . IDENT_12 ) ; "<AssertPlaceHolder>" ; } get ( ) { org . neo4j . kernel . IDENT_13 . IDENT_14 . IDENT_15 IDENT_16 = IDENT_17 . METHOD_9 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_18 IDENT_19 = IDENT_16 . IDENT_19 ; long IDENT_20 = IDENT_16 . IDENT_21 ; if ( ! ( IDENT_16 . METHOD_10 ( ) ) ) { monitor . METHOD_11 ( ( IDENT_19 != null ? IDENT_19 . METHOD_12 ( ) : null ) ) ; return METHOD_13 ( IDENT_22 . IDENT_23 , IDENT_20 ) ; } if ( IDENT_19 != null ) { monitor . METHOD_14 ( IDENT_19 . METHOD_12 ( ) , IDENT_20 ) ; return METHOD_13 ( IDENT_19 . METHOD_12 ( ) , IDENT_20 ) ; } else { if ( ( IDENT_16 . IDENT_24 ) != ( IDENT_25 ) ) { long IDENT_26 = java . lang . Math . max ( org . neo4j . kernel . IDENT_13 . IDENT_25 , IDENT_16 . IDENT_24 ) ; throw new org . neo4j . kernel . impl . store . METHOD_15 ( ( ( ( STRING_0 + IDENT_26 ) + STRING_1 ) + ( IDENT_16 . IDENT_27 ) ) ) ; } monitor . METHOD_16 ( ) ; return METHOD_13 ( org . neo4j . kernel . impl . transaction . log . IDENT_22 . start ( 0 ) , IDENT_20 ) ; } }
org . junit . Assert . assertTrue ( IDENT_1 . get ( ) ) 