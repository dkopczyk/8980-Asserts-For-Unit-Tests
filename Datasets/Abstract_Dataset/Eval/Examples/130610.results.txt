METHOD_0 ( ) { java . util . IDENT_0 random = java . util . concurrent . IDENT_1 . METHOD_1 ( ) ; int IDENT_2 = INT_0 ; for ( int i = 0 ; i < 100 ; i ++ ) { long [ ] values = METHOD_2 ( IDENT_2 , random , INT_1 ) ; long [ ] IDENT_3 = METHOD_2 ( IDENT_2 , random , INT_1 ) ; long [ ] IDENT_4 = METHOD_3 ( values , IDENT_3 ) ; IDENT_3 = java . util . Arrays . METHOD_4 ( IDENT_3 , ( IDENT_2 * 2 ) ) ; org . neo4j . IDENT_5 . impl . IDENT_6 . Utils . METHOD_5 ( values , IDENT_3 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( long [ ] , long [ ] , int ) { int v = ( values . length ) - 1 ; int i = IDENT_7 - 1 ; int t = i + ( values . length ) ; while ( ( v >= 0 ) || ( i >= 0 ) ) { if ( i == ( - 1 ) ) { IDENT_3 [ ( t OP_0 ) ] = values [ ( v OP_0 ) ] ; } else if ( v == ( - 1 ) ) { IDENT_3 [ ( t OP_0 ) ] = IDENT_3 [ ( i OP_0 ) ] ; } else if ( ( values [ v ] ) >= ( IDENT_3 [ i ] ) ) { IDENT_3 [ ( t OP_0 ) ] = values [ ( v OP_0 ) ] ; } else { IDENT_3 [ ( t OP_0 ) ] = IDENT_3 [ ( i OP_0 ) ] ; } } }
org . junit . Assert . assertArrayEquals ( IDENT_4 , IDENT_3 ) 