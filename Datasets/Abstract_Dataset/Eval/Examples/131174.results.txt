METHOD_0 ( ) { java . util . Set < java . lang . IDENT_0 > IDENT_1 = new java . util . HashSet < java . lang . IDENT_0 > ( ) ; for ( int i = 0 ; i <= INT_0 ; i ++ ) { IDENT_1 . add ( ( ( char ) ( i ) ) ) ; } IDENT_1 . add ( ( ( char ) ( INT_1 ) ) ) ; for ( char c : new char [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_12 , STRING_13 , STRING_14 , STRING_15 , STRING_16 , STRING_17 , STRING_18 } ) { IDENT_1 . add ( c ) ; } int exceptions = 0 ; for ( char c : IDENT_1 ) { try { IDENT_2 . IDENT_3 . encode ( new io . netty . handler . codec . http . IDENT_4 . METHOD_1 ( ( ( "foo" + c ) + "bar" ) , "value" ) ) ; } catch ( java . lang . IllegalArgumentException e ) { exceptions ++ ; } } "<AssertPlaceHolder>" ; } size ( ) { return size ; }
org . junit . Assert . assertEquals ( IDENT_1 . size ( ) , exceptions ) 