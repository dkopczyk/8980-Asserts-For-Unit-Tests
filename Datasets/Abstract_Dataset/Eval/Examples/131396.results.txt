METHOD_0 ( ) { java . net . IDENT_0 address = io . netty . util . IDENT_1 . IDENT_2 ; java . net . IDENT_3 IDENT_4 = new java . net . METHOD_1 ( address , INT_0 ) ; byte [ ] bytes = new byte [ INT_1 ] ; java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_2 ( bytes ) ; buffer . put ( address . METHOD_3 ( ) ) ; buffer . METHOD_4 ( address . METHOD_5 ( ) ) ; buffer . METHOD_4 ( IDENT_4 . METHOD_6 ( ) ) ; "<AssertPlaceHolder>" ; } address ( byte [ ] , int , int ) { final int port = io . netty . channel . IDENT_5 . IDENT_6 . METHOD_7 ( IDENT_7 , ( ( offset + len ) - 4 ) ) ; final java . net . IDENT_8 address ; try { switch ( len ) { case 8 : byte [ ] IDENT_9 = new byte [ 4 ] ; java . lang . System . METHOD_8 ( IDENT_7 , offset , IDENT_9 , 0 , 4 ) ; address = java . net . IDENT_8 . METHOD_9 ( IDENT_9 ) ; break ; case INT_1 : byte [ ] IDENT_10 = new byte [ 16 ] ; java . lang . System . METHOD_8 ( IDENT_7 , offset , IDENT_10 , 0 , 16 ) ; int IDENT_11 = io . netty . channel . IDENT_5 . IDENT_6 . METHOD_7 ( IDENT_7 , ( ( offset + len ) - 8 ) ) ; address = java . net . IDENT_0 . METHOD_9 ( null , IDENT_10 , IDENT_11 ) ; break ; default : throw new java . lang . METHOD_10 ( ) ; } return new java . net . METHOD_1 ( address , port ) ; } catch ( java . net . IDENT_12 e ) { throw new java . lang . METHOD_10 ( STRING_0 , e ) ; } }
org . junit . Assert . assertEquals ( IDENT_4 , address ( buffer . array ( ) , 0 , bytes . length ) ) 