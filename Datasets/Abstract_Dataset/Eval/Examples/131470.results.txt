METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( STRING_0 , STRING_1 ) ; params . put ( "name" , STRING_2 ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_0 = new java . util . HashMap ( ) ; IDENT_0 . put ( STRING_3 , params ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Object ) { if ( IDENT_1 instanceof java . lang . String ) { return java . lang . Class . METHOD_2 ( ( ( java . lang . String ) ( IDENT_1 ) ) ) . METHOD_3 ( ) . newInstance ( ) ; } else if ( IDENT_1 instanceof java . util . Map ) { for ( Map . Entry < java . lang . String , java . lang . Object > entry : ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_1 ) ) . entrySet ( ) ) { if ( ( entry . getValue ( ) ) instanceof java . util . Map ) { return com . IDENT_2 . service . IDENT_3 . METHOD_4 ( java . lang . Class . METHOD_2 ( entry . getKey ( ) ) , ( ( java . util . Map ) ( entry . getValue ( ) ) ) ) ; } else if ( ( entry . getValue ( ) ) instanceof java . util . List ) { return com . IDENT_2 . service . IDENT_3 . METHOD_5 ( java . lang . Class . METHOD_2 ( entry . getKey ( ) ) , ( ( java . util . List ) ( entry . getValue ( ) ) ) ) ; } } } return null ; }
org . junit . Assert . assertNotNull ( com . IDENT_2 . service . IDENT_3 . METHOD_1 ( IDENT_0 ) ) 