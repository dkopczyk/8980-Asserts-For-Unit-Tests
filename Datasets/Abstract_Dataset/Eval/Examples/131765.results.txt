METHOD_0 ( ) { java . math . BigInteger [ ] values = new java . math . BigInteger [ ] { java . math . BigInteger . IDENT_0 , java . math . BigInteger . valueOf ( 1 ) , java . math . BigInteger . valueOf ( ( - 1 ) ) , java . math . BigInteger . valueOf ( Integer . MAX_VALUE ) , java . math . BigInteger . valueOf ( INT_0 ) , java . math . BigInteger . valueOf ( Long . MAX_VALUE ) } ; com . IDENT_1 . json . IDENT_2 IDENT_3 = new com . IDENT_1 . json . METHOD_1 ( null ) ; com . IDENT_1 . json . IDENT_4 IDENT_5 = new com . IDENT_1 . json . METHOD_2 ( new byte [ 0 ] , null ) ; for ( java . math . BigInteger v : values ) { IDENT_3 . METHOD_3 ( ) ; com . IDENT_1 . json . IDENT_6 . serialize ( v , IDENT_3 ) ; IDENT_5 . process ( IDENT_3 . METHOD_4 ( ) , IDENT_3 . size ( ) ) ; IDENT_5 . read ( ) ; java . math . BigInteger d = com . IDENT_1 . json . IDENT_6 . METHOD_5 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( com . IDENT_1 . json . METHOD_2 ) { if ( ( reader . METHOD_6 ( ) ) == STRING_0 ) { final int len = reader . METHOD_7 ( ) ; return com . IDENT_1 . json . IDENT_6 . METHOD_8 ( reader . IDENT_7 , len , reader ) ; } final int start = reader . METHOD_9 ( ) ; int end = reader . METHOD_10 ( ) ; int len = end - start ; if ( len > INT_1 ) { end = reader . METHOD_11 ( end ) ; len = end - start ; if ( end == ( reader . length ( ) ) ) { final com . IDENT_1 . json . IDENT_6 . IDENT_8 info = com . IDENT_1 . json . IDENT_6 . METHOD_12 ( reader , start ) ; return com . IDENT_1 . json . IDENT_6 . METHOD_8 ( info . buffer , info . length , reader ) ; } else if ( len > INT_1 ) { return com . IDENT_1 . json . IDENT_6 . METHOD_8 ( reader . METHOD_13 ( start , len ) , len , reader ) ; } } final byte [ ] buf = reader . buffer ; final byte ch = buf [ start ] ; int i = start ; long value = 0 ; if ( ch == STRING_1 ) { i = start + 1 ; if ( i == end ) com . IDENT_1 . json . IDENT_9 . METHOD_14 ( reader , start , end , STRING_2 ) ; for ( ; i < end ; i ++ ) { final int IDENT_10 = ( buf [ i ] ) - INT_2 ; if ( ( IDENT_10 < 0 ) || ( IDENT_10 > 9 ) ) { if ( ( i > ( start + 1 ) ) && ( reader . METHOD_15 ( i , end ) ) ) return java . math . BigInteger . valueOf ( value ) ; com . IDENT_1 . json . IDENT_9 . METHOD_14 ( reader , start , end , STRING_3 , ( ( char ) ( ch ) ) ) ; } value = ( ( value << 3 ) + ( value << 1 ) ) - IDENT_10 ; } return java . math . BigInteger . valueOf ( value ) ; } if ( i == end ) com . IDENT_1 . json . IDENT_9 . METHOD_14 ( reader , start , end , STRING_2 ) ; for ( ; i < end ; i ++ ) { final int IDENT_10 = ( buf [ i ] ) - INT_2 ; if ( ( IDENT_10 < 0 ) || ( IDENT_10 > 9 ) ) { if ( ( ( ch == STRING_4 ) && ( i > ( start + 1 ) ) ) && ( reader . METHOD_15 ( i , end ) ) ) return java . math . BigInteger . valueOf ( value ) ; else if ( ( ( ch != STRING_4 ) && ( i > start ) ) && ( reader . METHOD_15 ( i , end ) ) ) return java . math . BigInteger . valueOf ( value ) ; com . IDENT_1 . json . IDENT_9 . METHOD_14 ( reader , start , end , STRING_3 , ( ( char ) ( ch ) ) ) ; } value = ( ( value << 3 ) + ( value << 1 ) ) + IDENT_10 ; } return java . math . BigInteger . valueOf ( value ) ; }
org . junit . Assert . assertEquals ( v , d ) 