METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; for ( final net . IDENT_2 . platform . datamodel . IDENT_3 IDENT_4 : IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_5 . IDENT_7 . find ( INT_0 ) ) ) { if ( IDENT_4 . METHOD_3 ( ) . containsKey ( STRING_0 ) ) { IDENT_1 . METHOD_4 ( ) ; } } "<AssertPlaceHolder>" ; } get ( ) { if ( ( this . IDENT_8 ) != null ) { if ( this . IDENT_8 . METHOD_5 ( ) ) { this . IDENT_8 = null ; } else if ( this . IDENT_8 . METHOD_6 ( ) ) { ( ( IDENT_9 ) ( this . IDENT_8 ) ) . METHOD_7 ( ) ; } } else if ( ( ( ( ( this . IDENT_8 ) == null ) && ( ( this . IDENT_10 ) != null ) ) && ( ( this . IDENT_11 ) != null ) ) && ( ( this . IDENT_12 ) != null ) ) { try { this . IDENT_8 = net . IDENT_2 . db . records . IDENT_13 . METHOD_8 ( this . IDENT_10 , this . IDENT_11 , this . IDENT_12 ) ; } catch ( final java . sql . IDENT_14 e ) { net . IDENT_2 . db . records . IDENT_15 . IDENT_16 . LOGGER . METHOD_9 ( e , e ) ; } this . IDENT_10 = null ; this . IDENT_11 = null ; this . IDENT_12 = null ; } return this . IDENT_8 ; }
org . junit . Assert . assertEquals ( 2 , IDENT_1 . get ( ) ) 