METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ; java . lang . String IDENT_6 = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { IDENT_0 = IDENT_0 . toLowerCase ( ) ; int IDENT_7 = IDENT_0 . indexOf ( STRING_2 2 ) ; if ( IDENT_7 == ( - 1 ) ) throw new java . lang . IllegalArgumentException ( STRING_2 4 ) ; java . lang . String IDENT_8 = IDENT_0 . substring ( 0 , IDENT_7 ) . trim ( ) ; IDENT_0 = IDENT_0 . substring ( IDENT_7 ) ; java . lang . String type = "" ; java . lang . String IDENT_9 = "" ; switch ( IDENT_8 ) { case STRING_3 : type = STRING_2 3 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( IDENT_0 ) ; break ; case STRING_4 : type = STRING_2 1 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_3 ( IDENT_0 ) ; break ; case STRING_5 : type = STRING_6 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_4 ( IDENT_0 ) ; break ; case STRING_7 : type = STRING_8 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_5 ( IDENT_0 ) ; break ; case STRING_9 : type = STRING_2 0 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_6 ( IDENT_0 ) ; break ; case STRING_2 : type = STRING_10 ; IDENT_9 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_7 ( IDENT_0 ) ; break ; default : throw new java . lang . IllegalArgumentException ( STRING_2 5 ) ; } return org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_8 ( type , IDENT_9 ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_1 ) 