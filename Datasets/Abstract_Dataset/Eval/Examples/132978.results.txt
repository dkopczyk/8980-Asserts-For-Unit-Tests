METHOD_0 ( ) { METHOD_1 ( ) ; parameters . METHOD_2 ( new int [ ] { 1 , INT_0 } ) ; parameters . METHOD_3 ( new int [ ] { INT_1 , 1 } ) ; parameters . METHOD_4 ( INT_2 ) ; parameters . METHOD_5 ( FLOAT_0 ) ; parameters . METHOD_6 ( true ) ; parameters . METHOD_7 ( ( - 1.0 ) ) ; parameters . METHOD_8 ( INT_3 ) ; parameters . METHOD_9 ( 0 ) ; parameters . METHOD_10 ( FLOAT_1 ) ; parameters . METHOD_11 ( FLOAT_2 ) ; parameters . METHOD_12 ( FLOAT_3 ) ; parameters . METHOD_13 ( FLOAT_3 ) ; parameters . METHOD_14 ( 1000 ) ; parameters . METHOD_15 ( 10 ) ; METHOD_16 ( ) ; int [ ] IDENT_0 = new int [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } ; int [ ] IDENT_1 = new int [ INT_1 ] ; IDENT_2 . compute ( IDENT_3 , IDENT_0 , IDENT_1 , true ) ; int [ ] IDENT_4 = org . IDENT_5 . IDENT_6 . util . IDENT_7 . METHOD_17 ( IDENT_1 , new org . IDENT_5 . IDENT_6 . util . IDENT_8 . IDENT_9 < java . lang . Object > ( ) { public boolean METHOD_18 ( int n ) { return n > 0 ; } } ) ; int [ ] expected = new int [ ] { INT_4 , INT_5 , INT_6 , INT_7 , INT_8 , INT_9 , INT_10 , INT_11 , INT_12 , INT_13 , INT_14 , INT_15 , INT_16 , INT_17 , INT_18 , INT_19 , INT_20 , INT_21 , INT_22 , INT_23 , INT_24 , INT_25 , INT_26 , INT_27 , INT_28 , INT_29 , INT_30 , INT_31 , INT_32 , INT_33 , INT_34 , INT_35 , INT_36 , INT_37 , INT_38 , INT_39 , INT_40 , INT_41 , INT_42 , INT_43 } ; "<AssertPlaceHolder>" ; } METHOD_18 ( double ) { return d < FLOAT_1 ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( expected , IDENT_4 ) ) 