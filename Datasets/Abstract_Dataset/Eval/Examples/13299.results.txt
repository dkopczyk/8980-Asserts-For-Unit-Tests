METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( ( ( org . apache . hadoop . crypto . IDENT_1 . METHOD_2 ( ) ) == null ) ) ; org . apache . hadoop . crypto . IDENT_1 IDENT_2 = org . apache . hadoop . crypto . IDENT_1 . getInstance ( STRING_0 ) ; "<AssertPlaceHolder>" ; try { IDENT_2 = org . apache . hadoop . crypto . IDENT_1 . getInstance ( STRING_1 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . security . IDENT_3 e ) { } try { IDENT_2 = org . apache . hadoop . crypto . IDENT_1 . getInstance ( STRING_3 ) ; org . junit . Assert . fail ( STRING_4 ) ; } catch ( javax . crypto . IDENT_4 e ) { } } getInstance ( java . lang . String ) { org . apache . hadoop . crypto . IDENT_1 . IDENT_5 transform = org . apache . hadoop . crypto . IDENT_1 . METHOD_3 ( IDENT_6 ) ; int IDENT_7 = org . apache . hadoop . crypto . IDENT_1 . IDENT_8 . get ( transform . IDENT_9 , transform . IDENT_10 ) ; int IDENT_11 = org . apache . hadoop . crypto . IDENT_1 . IDENT_12 . get ( transform . IDENT_11 ) ; long context = org . apache . hadoop . crypto . IDENT_1 . METHOD_4 ( IDENT_7 , IDENT_11 ) ; return new org . apache . hadoop . crypto . METHOD_5 ( context , IDENT_7 , IDENT_11 ) ; }
org . junit . Assert . assertTrue ( ( IDENT_2 != null ) ) 