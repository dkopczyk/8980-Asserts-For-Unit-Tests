METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . model . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( new int [ ] { INT_0 , INT_0 } ) ; IDENT_3 . METHOD_3 ( 4 ) ; org . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . init ( IDENT_3 ) ; int [ ] IDENT_6 = new int [ ] { 0 , 3 , 4 , INT_1 } ; java . util . Set < org . IDENT_0 . IDENT_1 . model . IDENT_7 > IDENT_8 = IDENT_3 . METHOD_4 ( IDENT_6 ) ; java . util . List < java . lang . Integer > IDENT_9 = org . IDENT_0 . IDENT_1 . model . METHOD_1 . METHOD_5 ( IDENT_8 ) ; java . util . Set < java . lang . Integer > IDENT_10 = new java . util . HashSet ( IDENT_9 ) ; java . util . Set < java . lang . Integer > IDENT_11 = new java . util . HashSet < java . lang . Integer > ( java . util . stream . IDENT_12 . of ( IDENT_6 ) . METHOD_6 ( ) . collect ( java . util . stream . IDENT_13 . toList ( ) ) ) ; "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) return false ; org . IDENT_0 . IDENT_1 . IDENT_14 other = ( ( org . IDENT_0 . IDENT_1 . IDENT_14 ) ( obj ) ) ; if ( ( IDENT_15 ) == null ) { if ( ( other . IDENT_15 ) != null ) return false ; } else { java . lang . Class < ? > [ ] IDENT_16 = new java . lang . Class [ ] { java . lang . Object . class } ; try { for ( org . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_17 key : IDENT_15 . METHOD_7 ( ) ) { if ( ( ( IDENT_15 . get ( key ) ) == null ) || ( ( other . IDENT_15 . get ( key ) ) == null ) ) continue ; java . lang . Class < ? > IDENT_18 = IDENT_15 . get ( key ) . getClass ( ) ; java . lang . Class < ? > IDENT_19 = other . IDENT_15 . get ( key ) . getClass ( ) ; boolean IDENT_20 = METHOD_8 ( key , IDENT_18 ) ; if ( ( ! METHOD_8 ) && ( ( ( IDENT_18 . METHOD_9 ( STRING_0 , IDENT_16 ) . METHOD_10 ( ) ) != IDENT_18 ) || ( ( IDENT_19 . METHOD_9 ( STRING_0 , IDENT_16 ) . METHOD_10 ( ) ) != IDENT_19 ) ) ) { continue ; } else if ( METHOD_8 ) { if ( int [ ] . class . METHOD_11 ( IDENT_18 ) ) { if ( ! ( java . util . Arrays . equals ( ( ( int [ ] ) ( IDENT_15 . get ( key ) ) ) , ( ( int [ ] ) ( other . IDENT_15 . get ( key ) ) ) ) ) ) return false ; } else if ( key == ( org . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_17 . IDENT_21 ) ) { if ( ! ( com . IDENT_22 . util . IDENT_23 . METHOD_12 ( IDENT_15 . get ( key ) , other . IDENT_15 . get ( key ) ) ) ) { return false ; } } } else if ( ( ! ( other . IDENT_15 . containsKey ( key ) ) ) || ( ! ( IDENT_15 . get ( key ) . equals ( other . IDENT_15 . get ( key ) ) ) ) ) { return false ; } } } catch ( java . lang . Exception e ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( IDENT_10 . equals ( IDENT_11 ) ) 