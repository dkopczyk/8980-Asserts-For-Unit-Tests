METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . model . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( 10 ) ; org . IDENT_0 . IDENT_1 . model . IDENT_4 pool = new org . IDENT_0 . IDENT_1 . model . METHOD_3 ( 3 ) ; org . IDENT_0 . IDENT_1 . model . IDENT_5 [ ] IDENT_6 = new org . IDENT_0 . IDENT_1 . model . IDENT_5 [ 3 ] ; int [ ] IDENT_7 = new int [ ] { 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 } ; for ( int i = 0 , j = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { if ( ( IDENT_7 [ i ] ) == 0 ) continue ; IDENT_6 [ j ] = new org . IDENT_0 . IDENT_1 . model . METHOD_4 ( IDENT_3 , null , null , pool , i , i ) ; IDENT_6 [ j ] . METHOD_5 ( IDENT_3 , 0.0 ) ; } int [ ] expected = new int [ ] { 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 } ; int [ ] IDENT_8 = pool . METHOD_6 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . IDENT_0 . IDENT_1 . model . METHOD_1 ) { return java . util . stream . IDENT_9 . range ( 0 , c . METHOD_7 ( ) ) . map ( ( i ) -> IDENT_10 . containsKey ( i ) ? 1 : 0 ) . toArray ( ) ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( expected , IDENT_8 ) ) 