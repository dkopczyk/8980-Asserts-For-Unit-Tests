METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . util . IDENT_2 m = new org . IDENT_0 . IDENT_1 . util . METHOD_1 ( INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { int y ; if ( ( IDENT_3 ) >= ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) ) { int IDENT_5 ; final int [ ] IDENT_6 = this . IDENT_6 ; final int [ ] IDENT_7 = this . IDENT_7 ; for ( IDENT_5 = 0 ; IDENT_5 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_8 ) ) ; IDENT_5 ++ ) { y = ( ( IDENT_6 [ IDENT_5 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) | ( ( IDENT_6 [ ( IDENT_5 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) ; IDENT_6 [ IDENT_5 ] = ( ( IDENT_6 [ ( IDENT_5 + ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_8 ) ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_7 [ ( y & 1 ) ] ) ; } for ( ; IDENT_5 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) - 1 ) ; IDENT_5 ++ ) { y = ( ( IDENT_6 [ IDENT_5 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) | ( ( IDENT_6 [ ( IDENT_5 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) ; IDENT_6 [ IDENT_5 ] = ( ( IDENT_6 [ ( IDENT_5 + ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_8 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) ) ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_7 [ ( y & 1 ) ] ) ; } y = ( ( IDENT_6 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) - 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) | ( ( IDENT_6 [ 0 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) ; IDENT_6 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_4 ) - 1 ) ] = ( ( IDENT_6 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_8 ) - 1 ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_7 [ ( y & 1 ) ] ) ; IDENT_3 = 0 ; } y = IDENT_6 [ ( ( IDENT_3 ) ++ ) ] ; y OP_1 y > > > INT_1 ; y OP_1 ( y << 7 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ; y OP_1 ( y << 15 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_12 ) ; y OP_1 y > > > INT_2 ; return ( ( boolean ) ( ( y > > > INT_3 ) != 0 ) ) ; }
org . junit . Assert . assertTrue ( ( ( m . METHOD_2 ( ) ) || true ) ) 