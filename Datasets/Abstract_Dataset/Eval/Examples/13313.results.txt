METHOD_0 ( ) { org . apache . hadoop . conf . Configuration conf = new org . apache . hadoop . conf . Configuration ( ) ; final java . lang . String IDENT_0 = "test" ; conf . METHOD_1 ( IDENT_1 . IDENT_2 , 10 ) ; org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 IDENT_5 = mock ( org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 . class ) ; when ( IDENT_5 . METHOD_2 ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . IDENT_7 . class ) ) ) . METHOD_3 ( new java . net . METHOD_4 ( STRING_0 ) ) ; org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 IDENT_8 = mock ( org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 . class ) ; when ( IDENT_8 . METHOD_2 ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . IDENT_7 . class ) ) ) . METHOD_3 ( new java . net . METHOD_4 ( STRING_1 ) ) ; org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 IDENT_9 = mock ( org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 . class ) ; when ( IDENT_9 . METHOD_2 ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . IDENT_7 . class ) ) ) . METHOD_3 ( new java . net . METHOD_4 ( STRING_2 ) ) ; when ( IDENT_5 . METHOD_5 ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_8 . METHOD_5 ( ) ) . thenReturn ( STRING_1 ) ; when ( IDENT_9 . METHOD_5 ( ) ) . thenReturn ( STRING_2 ) ; org . apache . hadoop . crypto . key . IDENT_3 . IDENT_10 IDENT_11 = new org . apache . hadoop . crypto . key . IDENT_3 . METHOD_6 ( new org . apache . hadoop . crypto . key . IDENT_3 . IDENT_4 [ ] { IDENT_5 , IDENT_8 , IDENT_9 } , 0 , conf ) ; try { IDENT_11 . METHOD_2 ( IDENT_0 , new org . apache . hadoop . crypto . key . IDENT_6 . METHOD_7 ( conf ) ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } verify ( IDENT_11 . METHOD_8 ( ) [ 0 ] , org . mockito . Mockito . times ( 1 ) ) . METHOD_2 ( org . mockito . Mockito . eq ( IDENT_0 ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . METHOD_7 . class ) ) ; verify ( IDENT_11 . METHOD_8 ( ) [ 1 ] , org . mockito . Mockito . times ( 1 ) ) . METHOD_2 ( org . mockito . Mockito . eq ( IDENT_0 ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . METHOD_7 . class ) ) ; verify ( IDENT_11 . METHOD_8 ( ) [ 2 ] , org . mockito . Mockito . times ( 1 ) ) . METHOD_2 ( org . mockito . Mockito . eq ( IDENT_0 ) , org . mockito . Mockito . any ( org . apache . hadoop . crypto . key . IDENT_6 . METHOD_7 . class ) ) ; } fail ( java . lang . String ) { System . err . println ( message ) ; System . err . println ( STRING_4 ) ; throw new java . lang . IllegalArgumentException ( message ) ; }
org . junit . Assert . assertTrue ( ( e instanceof java . net . METHOD_4 ) ) 