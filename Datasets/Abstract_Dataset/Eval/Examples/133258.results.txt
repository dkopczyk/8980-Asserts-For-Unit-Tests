METHOD_0 ( ) { org . nuxeo . ecm . IDENT_0 . IDENT_1 ctx = new org . nuxeo . ecm . IDENT_0 . METHOD_1 ( session ) ; ctx . METHOD_2 ( IDENT_2 ) ; org . nuxeo . ecm . IDENT_0 . IDENT_3 IDENT_4 = new org . nuxeo . ecm . IDENT_0 . METHOD_3 ( STRING_0 ) ; IDENT_4 . add ( IDENT_5 . IDENT_6 ) ; IDENT_4 . add ( IDENT_7 . IDENT_6 ) . set ( STRING_1 , STRING_2 ) . set ( STRING_3 , new org . nuxeo . ecm . IDENT_0 . core . util . Properties ( STRING_4 ) ) ; org . nuxeo . ecm . core . api . IDENT_8 doc = ( ( org . nuxeo . ecm . core . api . IDENT_8 ) ( service . run ( ctx , IDENT_4 ) ) ) ; "<AssertPlaceHolder>" ; } run ( org . nuxeo . ecm . IDENT_0 . METHOD_1 , java . net . URL ) { java . lang . String key = script . METHOD_4 ( ) ; org . nuxeo . ecm . IDENT_0 . core . IDENT_9 . IDENT_10 . IDENT_11 cs = org . nuxeo . ecm . IDENT_0 . core . IDENT_9 . IDENT_10 . cache . get ( key ) ; if ( cs != null ) { cs . METHOD_5 ( ctx ) ; return ; } java . lang . String path = script . getPath ( ) ; int p = path . METHOD_6 ( STRING_5 ) ; if ( p == ( - 1 ) ) { throw new org . nuxeo . ecm . IDENT_0 . METHOD_7 ( ( STRING_6 + script ) ) ; } java . lang . String ext = path . substring ( ( p + 1 ) ) . toLowerCase ( ) ; if ( STRING_7 . equals ( ext ) ) { java . io . InputStream in = script . METHOD_8 ( ) ; try { java . io . IDENT_12 c = org . IDENT_13 . IDENT_14 . METHOD_9 ( org . nuxeo . common . utils . IDENT_15 . read ( in ) ) ; cs = new org . nuxeo . ecm . IDENT_0 . core . IDENT_9 . IDENT_10 . METHOD_10 ( c ) ; } finally { in . close ( ) ; } } else if ( STRING_8 . equals ( ext ) ) { } else { throw new org . nuxeo . ecm . IDENT_0 . METHOD_7 ( ( ( STRING_9 + script ) + STRING_10 ) ) ; } org . nuxeo . ecm . IDENT_0 . core . IDENT_9 . IDENT_10 . cache . put ( key , cs ) ; cs . METHOD_5 ( ctx ) ; }
org . junit . Assert . assertNotNull ( doc ) 