METHOD_0 ( ) { boolean IDENT_0 = false ; java . util . Date now = new java . util . Date ( ) ; try { org . nuxeo . ecm . platform . IDENT_1 . api . query . IDENT_2 . METHOD_1 ( now , STRING_0 ) ; } catch ( org . nuxeo . ecm . platform . IDENT_1 . api . query . IDENT_3 e ) { IDENT_0 = true ; } "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Date , java . lang . String ) { try { java . util . Calendar IDENT_4 = java . util . Calendar . getInstance ( ) ; IDENT_4 . METHOD_2 ( now ) ; if ( IDENT_5 != null ) { java . util . Map < java . lang . String , java . lang . Integer > IDENT_6 = org . nuxeo . ecm . platform . IDENT_1 . api . query . IDENT_2 . METHOD_3 ( IDENT_5 ) ; if ( IDENT_6 . containsKey ( IDENT_7 . IDENT_8 ) ) { IDENT_4 . add ( Calendar . IDENT_9 , ( - ( IDENT_6 . get ( IDENT_7 . IDENT_8 ) ) ) ) ; } if ( IDENT_6 . containsKey ( IDENT_7 . IDENT_10 ) ) { IDENT_4 . add ( Calendar . IDENT_11 , ( - ( IDENT_6 . get ( IDENT_7 . IDENT_10 ) ) ) ) ; } } return IDENT_4 . getTime ( ) ; } catch ( java . lang . IDENT_12 IDENT_13 ) { throw new org . nuxeo . ecm . platform . IDENT_1 . api . query . METHOD_4 ( STRING_1 , IDENT_13 ) ; } }
org . junit . Assert . assertTrue ( IDENT_0 ) 