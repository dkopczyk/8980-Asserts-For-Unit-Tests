METHOD_0 ( ) { com . sun . jersey . IDENT_0 . IDENT_1 IDENT_2 = new com . sun . jersey . IDENT_0 . METHOD_1 ( ) ; com . sun . jersey . IDENT_0 . IDENT_3 IDENT_4 = new com . sun . jersey . IDENT_0 . file . METHOD_2 ( STRING_0 , new java . io . ByteArrayInputStream ( STRING_1 . getBytes ( ) ) ) ; IDENT_2 . METHOD_3 ( IDENT_4 ) ; METHOD_4 ( IDENT_5 . IDENT_6 , ( ( STRING_2 + ( doc . METHOD_5 ( ) ) ) + STRING_3 ) , IDENT_2 ) ; IDENT_2 . close ( ) ; METHOD_6 ( ) ; doc = METHOD_7 ( ) ; org . nuxeo . ecm . core . api . IDENT_7 IDENT_8 = ( ( org . nuxeo . ecm . core . api . IDENT_7 ) ( doc . METHOD_8 ( STRING_4 ) ) ) ; java . io . StringWriter IDENT_9 = new java . io . StringWriter ( ) ; IDENT_8 . METHOD_9 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } toString ( ) { METHOD_10 ( true ) ; java . lang . StringBuffer sb = new java . lang . StringBuffer ( ) ; sb . append ( ( STRING_5 + ( IDENT_10 ) ) ) ; sb . append ( STRING_6 ) ; java . util . List < java . lang . String > IDENT_11 = new java . util . ArrayList < java . lang . String > ( IDENT_12 . METHOD_11 ( ) ) ; java . util . Collections . METHOD_12 ( IDENT_11 ) ; for ( java . lang . String name : IDENT_11 ) { sb . append ( STRING_7 ) ; sb . append ( name ) ; sb . append ( STRING_8 ) ; sb . append ( IDENT_12 . get ( name ) . toString ( ) ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_9 . toString ( ) ) 