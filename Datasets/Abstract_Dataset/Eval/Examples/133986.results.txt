METHOD_0 ( ) { java . util . Map < java . lang . String , org . IDENT_0 . type . IDENT_1 > values = new java . util . HashMap < java . lang . String , org . IDENT_0 . type . IDENT_1 > ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Map ) { values . put ( STRING_0 , org . IDENT_0 . type . IDENT_2 . METHOD_2 ( IDENT_3 ) ) ; org . IDENT_0 . type . IDENT_1 [ ] IDENT_4 = new org . IDENT_0 . type . IDENT_1 [ ( IDENT_5 . size ( ) ) * 2 ] ; int IDENT_6 = 0 ; for ( java . util . Map . Entry < java . lang . String , java . util . Set < java . lang . String > > entry : IDENT_5 . entrySet ( ) ) { org . IDENT_0 . type . IDENT_1 [ ] IDENT_7 = new org . IDENT_0 . type . IDENT_1 [ entry . getValue ( ) . size ( ) ] ; int IDENT_8 = 0 ; for ( java . lang . String IDENT_9 : entry . getValue ( ) ) { IDENT_7 [ ( IDENT_8 ++ ) ] = org . IDENT_0 . type . IDENT_2 . METHOD_2 ( IDENT_9 ) ; } IDENT_4 [ ( IDENT_6 * 2 ) ] = org . IDENT_0 . type . IDENT_2 . METHOD_2 ( entry . getKey ( ) ) ; IDENT_4 [ ( ( IDENT_6 * 2 ) + 1 ) ] = org . IDENT_0 . type . IDENT_2 . METHOD_3 ( IDENT_7 ) ; ++ IDENT_6 ; } values . put ( STRING_1 , org . IDENT_0 . type . IDENT_2 . METHOD_4 ( IDENT_4 ) ) ; return true ; }
org . junit . Assert . assertThat ( target . METHOD_1 ( values ) , org . hamcrest . CoreMatchers . is ( true ) ) 