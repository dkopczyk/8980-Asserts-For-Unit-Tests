METHOD_0 ( ) { IDENT_0 = STRING_0 ; target = new org . IDENT_1 . IDENT_2 . core . component . network . flow . query . METHOD_1 ( IDENT_0 ) ; target . parse ( ) ; java . util . List < org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_4 > matches = null ; java . util . List < java . lang . String > path = null ; java . util . Map < java . lang . String , java . util . List < org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_5 > > IDENT_6 = null ; java . util . Map < java . lang . String , java . lang . String > IDENT_7 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_8 flow = new org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . METHOD_2 ( "1" , "" , "" , true , "" , STRING_1 , matches , path , IDENT_6 , IDENT_7 ) ; @ org . IDENT_1 . IDENT_2 . core . component . network . flow . query . METHOD_3 ( STRING_2 ) java . util . List < org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_5 > IDENT_9 = new java . util . ArrayList < org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_5 > ( ) { { add ( new org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . METHOD_4 ( ) { { output = STRING_3 ; } } ) ; add ( new org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . METHOD_4 ( ) { { output = STRING_4 ; } } ) ; } } ; flow . METHOD_5 ( STRING_5 , IDENT_9 . get ( 0 ) ) ; flow . METHOD_5 ( STRING_6 , IDENT_9 . get ( 1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_3 . IDENT_5 ) { if ( ( target == null ) || ( ! ( target . getType ( ) . equals ( org . IDENT_1 . IDENT_2 . core . component . network . flow . IDENT_10 . IDENT_11 . class . METHOD_7 ( ) ) ) ) ) { return false ; } return true ; }
org . junit . Assert . assertThat ( target . METHOD_6 ( flow ) , org . hamcrest . CoreMatchers . is ( false ) ) 