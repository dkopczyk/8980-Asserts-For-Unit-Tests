METHOD_0 ( ) { params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( STRING_0 , STRING_1 5 ) ; put ( STRING_2 1 , STRING_3 ) ; put ( STRING_2 , STRING_1 2 ) ; put ( STRING_1 , STRING_4 ) ; put ( STRING_5 , STRING_6 ) ; put ( STRING_1 6 , STRING_1 7 ) ; put ( STRING_1 1 , STRING_7 ) ; put ( STRING_2 4 , STRING_1 4 ) ; put ( STRING_1 0 , STRING_1 8 ) ; put ( STRING_2 2 , STRING_8 ) ; put ( STRING_2 5 , STRING_2 3 ) ; put ( STRING_1 9 , STRING_1 3 ) ; put ( STRING_9 , STRING_2 0 ) ; } } ; target = new org . IDENT_0 . IDENT_1 . core . component . network . flow . query . METHOD_1 ( params ) ; target . parse ( ) ; org . IDENT_0 . IDENT_1 . core . component . network . flow . IDENT_2 . IDENT_3 match = new org . IDENT_0 . IDENT_1 . core . component . network . flow . IDENT_2 . METHOD_2 ( ) ; match . IDENT_4 = STRING_3 ; match . IDENT_5 = STRING_1 2 ; match . METHOD_3 ( STRING_4 ) ; match . METHOD_4 ( STRING_6 ) ; match . METHOD_5 ( 100 ) ; match . METHOD_6 ( 200 ) ; match . METHOD_7 ( INT_0 ) ; match . METHOD_8 ( INT_1 ) ; match . METHOD_9 ( STRING_8 ) ; match . METHOD_10 ( STRING_2 3 ) ; match . METHOD_11 ( INT_2 ) ; match . METHOD_12 ( INT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( org . IDENT_0 . IDENT_1 . core . component . network . flow . IDENT_6 . IDENT_7 ) { if ( ( target == null ) || ( ! ( target . getType ( ) . equals ( org . IDENT_0 . IDENT_1 . core . component . network . flow . IDENT_2 . IDENT_8 . class . METHOD_14 ( ) ) ) ) ) { return false ; } return true ; }
org . junit . Assert . assertThat ( target . METHOD_13 ( match ) , org . hamcrest . CoreMatchers . is ( true ) ) 