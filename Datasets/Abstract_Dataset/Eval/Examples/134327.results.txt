METHOD_0 ( ) { target = new org . IDENT_0 . IDENT_1 . core . component . network . IDENT_2 . METHOD_1 ( STRING_0 , nodes , IDENT_3 ) ; org . IDENT_4 . IDENT_5 msg = new org . IDENT_4 . METHOD_2 ( ) ; java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; org . IDENT_4 . IDENT_6 . IDENT_7 IDENT_8 = msg . METHOD_3 ( out ) ; byte [ ] bytes ; java . io . ByteArrayInputStream in ; org . IDENT_4 . IDENT_9 . IDENT_10 IDENT_11 = null ; try { IDENT_8 . METHOD_4 ( 2 ) ; IDENT_8 . write ( STRING_1 ) ; IDENT_8 . write ( STRING_2 ) ; IDENT_8 . write ( STRING_3 ) ; IDENT_8 . write ( STRING_0 ) ; IDENT_8 . write ( STRING_4 ) ; IDENT_8 . write ( target . METHOD_5 ( ) ) ; IDENT_8 . write ( STRING_5 ) ; IDENT_8 . write ( target . METHOD_6 ( ) ) ; IDENT_8 . METHOD_7 ( ) ; bytes = out . toByteArray ( ) ; in = new java . io . ByteArrayInputStream ( bytes ) ; IDENT_11 = msg . METHOD_8 ( in ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( STRING_6 ) ; } target = org . mockito . Mockito . METHOD_9 ( new org . IDENT_0 . IDENT_1 . core . component . network . IDENT_2 . METHOD_1 ( STRING_7 , null , null ) ) ; try { target . METHOD_10 ( IDENT_11 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; return ; } org . junit . Assert . fail ( STRING_8 ) ; } METHOD_10 ( org . IDENT_4 . IDENT_9 . IDENT_10 ) { int size = IDENT_11 . METHOD_11 ( ) ; if ( size != ( org . IDENT_0 . IDENT_1 . IDENT_12 . event . IDENT_13 . IDENT_14 ) ) { throw new java . io . IOException ( ) ; } while ( ( size OP_0 ) > 0 ) { java . lang . String field = IDENT_11 . METHOD_12 ( ) ; switch ( field ) { case STRING_9 : action = IDENT_11 . METHOD_12 ( ) ; break ; case STRING_10 : if ( ! ( IDENT_11 . METHOD_13 ( ) ) ) { IDENT_15 = IDENT_11 . read ( this . IDENT_16 ) ; } break ; case STRING_11 : if ( ! ( IDENT_11 . METHOD_13 ( ) ) ) { IDENT_17 = IDENT_11 . read ( this . IDENT_16 ) ; } break ; default : throw new java . io . IOException ( ) ; } } IDENT_11 . METHOD_14 ( ) ; }
org . junit . Assert . assertTrue ( ( e instanceof java . io . IOException ) ) 