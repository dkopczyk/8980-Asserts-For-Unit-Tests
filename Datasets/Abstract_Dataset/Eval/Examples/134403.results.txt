METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > map = new java . util . HashMap ( ) ; target . body = map ; "<AssertPlaceHolder>" ; verify ( IDENT_0 , METHOD_1 ( ) ) . METHOD_2 ( any ( ) ) ; } METHOD_3 ( java . lang . Class ) { java . util . Map < java . lang . String , T > map = new java . util . HashMap < java . lang . String , T > ( ) ; if ( ( ( body ) == null ) && ( ( IDENT_1 ) != null ) ) { org . IDENT_2 . IDENT_3 IDENT_2 = null ; try { IDENT_2 = org . IDENT_4 . IDENT_5 . IDENT_6 . message . IDENT_7 . pool . METHOD_4 ( ) ; if ( IDENT_2 == null ) { IDENT_2 = new org . IDENT_2 . METHOD_5 ( ) ; } org . IDENT_2 . type . IDENT_8 IDENT_9 = IDENT_1 . METHOD_6 ( ) ; for ( Map . Entry < org . IDENT_2 . type . IDENT_10 , org . IDENT_2 . type . IDENT_10 > e : IDENT_9 . entrySet ( ) ) { map . put ( e . getKey ( ) . METHOD_7 ( ) . getString ( ) , IDENT_2 . convert ( e . getValue ( ) , clazz ) ) ; } body = map ; } catch ( java . io . IOException e ) { org . IDENT_4 . IDENT_5 . IDENT_6 . message . IDENT_7 . log . error ( STRING_0 , e ) ; } finally { if ( IDENT_2 != null ) { org . IDENT_4 . IDENT_5 . IDENT_6 . message . IDENT_7 . pool . add ( IDENT_2 ) ; } } } return ( ( java . util . Map < java . lang . String , T > ) ( body ) ) ; }
org . junit . Assert . assertThat ( target . METHOD_3 ( java . lang . String . class ) , org . hamcrest . CoreMatchers . is ( map ) ) 