METHOD_0 ( ) { java . util . IDENT_0 r = new java . util . METHOD_1 ( INT_0 ) ; for ( int i = 0 ; i < ( com . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 ) ; i ++ ) { int value = r . METHOD_2 ( ) ; java . lang . String actual = com . IDENT_1 . IDENT_2 . util . IDENT_6 . METHOD_3 ( new java . lang . StringBuilder ( ) , value ) . toString ( ) ; java . lang . String expected = java . lang . Integer . toString ( value ) ; if ( value < 0 ) { expected = ( STRING_0 + expected ) + STRING_1 ; } "<AssertPlaceHolder>" ; } } toString ( java . lang . StringBuilder ) { int i = 0 ; while ( i < ( IDENT_7 ) ) { switch ( data [ i ] ) { case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_9 : i = METHOD_4 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_10 : i = METHOD_5 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_11 : i = METHOD_6 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_12 : i = METHOD_7 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_13 : i = METHOD_8 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_14 : i = METHOD_9 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_15 : i = METHOD_10 ( builder , i ) ; break ; case com . IDENT_1 . IDENT_2 . util . IDENT_8 . IDENT_16 : i = METHOD_11 ( builder , i ) ; break ; default : int IDENT_17 = ( IDENT_7 ) - i ; builder . append ( ( ( STRING_2 + IDENT_17 ) + "\n" ) ) ; if ( IDENT_17 < 100 ) { builder . append ( ( ( STRING_3 + ( java . util . Arrays . toString ( java . util . Arrays . METHOD_12 ( data , i , IDENT_7 ) ) ) ) + "\n" ) ) ; } return builder ; } } return builder ; }
org . junit . Assert . assertEquals ( expected , actual ) 