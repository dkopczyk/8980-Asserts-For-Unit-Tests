METHOD_0 ( ) { int IDENT_0 = 20 ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 < com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_9 > IDENT_10 = IDENT_9 . instance . METHOD_2 ( 4 , ( 1 << INT_0 ) ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 < com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_11 > IDENT_12 = IDENT_11 . instance . METHOD_2 ( 4 , ( 1 << INT_0 ) ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_13 < com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_9 > input = new com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 ( IDENT_10 ) ; input . METHOD_4 ( ) ; int size = com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_5 ( input , IDENT_9 . IDENT_14 ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_6 ( IDENT_0 , input ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_15 < com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_9 > IDENT_16 = com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_7 ( input ) ; for ( int j = 0 ; j < IDENT_0 ; j ++ ) { int value = INT_1 & ( ( int ) ( 10 * ( java . lang . Math . METHOD_8 ( j ) ) ) ) ; IDENT_16 . METHOD_9 ( IDENT_16 , value ) ; } com . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_15 . METHOD_10 ( IDENT_16 ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_11 ( input , size ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_12 ( input ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 . METHOD_13 ( input ) ; com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 < com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_11 > output = new com . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_3 ( IDENT_12 ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . math . IDENT_17 . newInstance ( IDENT_6 , input , output ) ; java . lang . StringBuilder b = new java . lang . StringBuilder ( ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . test . IDENT_18 IDENT_19 = com . IDENT_1 . IDENT_2 . IDENT_3 . test . IDENT_18 . newInstance ( IDENT_6 , output , b , false ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_20 IDENT_21 = com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_20 . METHOD_14 ( IDENT_6 ) ; IDENT_21 . METHOD_15 ( ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . METHOD_16 ( IDENT_6 , IDENT_19 ) ; int IDENT_22 = b . indexOf ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_16 ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_23 ) { while ( ! ( ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . METHOD_17 ( IDENT_6 , IDENT_24 . IDENT_25 ) ) || ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . METHOD_18 ( IDENT_6 , IDENT_24 . IDENT_25 ) ) ) ) { try { java . lang . Thread . sleep ( 1 ) ; } catch ( java . lang . IDENT_26 e ) { throw new java . lang . RuntimeException ( e ) ; } } }
org . junit . Assert . assertTrue ( ( IDENT_22 > 0 ) ) 