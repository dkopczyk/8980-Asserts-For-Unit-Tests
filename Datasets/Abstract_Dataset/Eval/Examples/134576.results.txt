METHOD_0 ( ) { java . lang . String mapping = "/" ; java . lang . String IDENT_0 = IDENT_1 . METHOD_1 ( mapping ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . StringBuffer result = new java . lang . StringBuffer ( ) ; java . util . Map < java . util . regex . IDENT_2 , java . lang . String > IDENT_3 = new java . util . HashMap < java . util . regex . IDENT_2 , java . lang . String > ( ) ; java . util . regex . IDENT_2 IDENT_4 = java . util . regex . IDENT_2 . METHOD_2 ( STRING_0 ) ; java . util . regex . IDENT_2 IDENT_5 = java . util . regex . IDENT_2 . METHOD_2 ( STRING_1 ) ; java . util . regex . IDENT_2 IDENT_6 = java . util . regex . IDENT_2 . METHOD_2 ( STRING_2 ) ; IDENT_3 . put ( IDENT_4 , ( ( STRING_3 + ( com . ocpsoft . IDENT_7 . IDENT_8 . config . IDENT_1 . IDENT_9 . IDENT_10 ) ) + STRING_4 ) ) ; IDENT_3 . put ( IDENT_5 , ( ( "/" + ( com . ocpsoft . IDENT_7 . IDENT_8 . config . IDENT_1 . IDENT_9 . IDENT_10 ) ) + STRING_3 ) ) ; IDENT_3 . put ( IDENT_6 , ( ( "/" + ( com . ocpsoft . IDENT_7 . IDENT_8 . config . IDENT_1 . IDENT_9 . IDENT_10 ) ) + STRING_4 ) ) ; boolean IDENT_11 = false ; java . util . Iterator < java . util . regex . IDENT_2 > iterator = IDENT_3 . METHOD_3 ( ) . iterator ( ) ; while ( ( IDENT_11 == false ) && ( iterator . hasNext ( ) ) ) { java . util . regex . IDENT_2 p = iterator . next ( ) ; java . util . regex . IDENT_12 m = p . matcher ( IDENT_13 ) ; if ( m . matches ( ) ) { java . lang . String IDENT_14 = IDENT_3 . get ( p ) ; m . METHOD_4 ( result , IDENT_14 ) ; IDENT_11 = true ; } } if ( IDENT_11 == false ) { result . append ( IDENT_13 ) ; } return result . toString ( ) ; }
org . junit . Assert . assertEquals ( ( ( "/" + ( com . ocpsoft . IDENT_7 . IDENT_8 . config . IDENT_1 . IDENT_9 . IDENT_10 ) ) + STRING_4 ) , IDENT_0 ) 