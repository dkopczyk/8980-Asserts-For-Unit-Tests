METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 2 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_0 0 + STRING_1 ) + STRING_2 ) + STRING_0 5 ) + STRING_3 ) + STRING_4 ) + STRING_0 1 ) + STRING_0 3 ) + STRING_5 ) + STRING_0 ) + STRING_0 4 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) ; java . security . IDENT_1 IDENT_2 = com . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . String IDENT_6 = com . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_2 ( IDENT_7 , false ) ; IDENT_6 = com . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_3 ( IDENT_6 , INT_0 ) ; java . security . IDENT_8 IDENT_9 = java . security . IDENT_8 . getInstance ( STRING_10 ) ; java . security . IDENT_1 IDENT_10 ; try { byte [ ] IDENT_11 = org . apache . commons . codec . IDENT_12 . IDENT_13 . METHOD_4 ( IDENT_6 ) ; java . security . spec . IDENT_14 IDENT_15 = new java . security . spec . METHOD_5 ( IDENT_11 ) ; IDENT_10 = IDENT_9 . METHOD_6 ( IDENT_15 ) ; } catch ( java . lang . IllegalArgumentException e ) { IDENT_10 = null ; } return IDENT_10 ; }
org . junit . Assert . assertNotNull ( IDENT_2 ) 