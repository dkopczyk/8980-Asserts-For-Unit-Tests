METHOD_0 ( ) { java . security . IDENT_0 IDENT_1 = org . apache . hadoop . security . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 ) ; IDENT_4 = org . apache . hadoop . security . IDENT_2 . IDENT_3 . METHOD_2 ( STRING_1 , IDENT_1 , INT_0 , STRING_2 ) ; IDENT_5 = org . apache . hadoop . security . IDENT_2 . IDENT_3 . METHOD_2 ( STRING_3 , IDENT_1 , INT_0 , STRING_2 ) ; java . lang . String IDENT_6 = ( org . apache . hadoop . security . IDENT_2 . IDENT_7 . IDENT_8 ) + STRING_4 ; org . apache . hadoop . security . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_6 , STRING_5 , STRING_6 , IDENT_4 ) ; final org . apache . hadoop . security . IDENT_2 . IDENT_9 IDENT_10 = new org . apache . hadoop . security . IDENT_2 . METHOD_4 ( STRING_7 , IDENT_6 , STRING_5 , 10 ) ; try { IDENT_10 . init ( ) ; "<AssertPlaceHolder>" ; java . lang . Thread . sleep ( ( ( IDENT_10 . METHOD_5 ( ) ) + 1000 ) ) ; java . util . Map < java . lang . String , java . security . IDENT_11 . IDENT_12 > IDENT_13 = new java . util . HashMap < java . lang . String , java . security . IDENT_11 . IDENT_12 > ( ) ; IDENT_13 . put ( STRING_6 , IDENT_4 ) ; IDENT_13 . put ( STRING_8 , IDENT_5 ) ; org . apache . hadoop . security . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_6 , STRING_5 , IDENT_13 ) ; org . apache . hadoop . test . IDENT_14 . METHOD_6 ( new com . google . common . base . IDENT_15 < java . lang . Boolean > ( ) { @ org . apache . hadoop . security . IDENT_2 . Override public org . apache . hadoop . security . IDENT_2 . Boolean get ( ) { return ( IDENT_10 . METHOD_7 ( ) . length ) == 2 ; } } , ( ( int ) ( IDENT_10 . METHOD_5 ( ) ) ) , INT_1 ) ; } finally { IDENT_10 . METHOD_8 ( ) ; } } METHOD_7 ( ) { java . security . IDENT_11 . IDENT_12 [ ] IDENT_16 = org . apache . hadoop . security . IDENT_2 . METHOD_4 . IDENT_17 ; javax . net . IDENT_2 . IDENT_18 IDENT_10 = IDENT_19 . get ( ) ; if ( IDENT_10 != null ) { IDENT_16 = IDENT_10 . METHOD_7 ( ) ; } return IDENT_16 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_10 . METHOD_7 ( ) . length ) 