METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( org . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_2 ( ) ) . andReturn ( new java . net . URI ( STRING_0 ) ) . METHOD_3 ( ) ; org . easymock . EasyMock . replay ( IDENT_3 ) ; boolean result = org . IDENT_0 . IDENT_4 . handler . IDENT_5 . IDENT_6 . METHOD_4 ( IDENT_3 , org . IDENT_0 . IDENT_4 . handler . IDENT_5 . IDENT_7 . IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . IDENT_0 . IDENT_1 . IDENT_2 , java . util . List ) { java . lang . String extension = org . apache . commons . io . IDENT_9 . METHOD_5 ( IDENT_3 . METHOD_2 ( ) . toString ( ) ) ; for ( java . lang . String IDENT_10 : IDENT_11 ) { if ( IDENT_10 . equalsIgnoreCase ( extension ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( result ) 