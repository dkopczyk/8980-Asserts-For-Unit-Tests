METHOD_0 ( ) { "<AssertPlaceHolder>" ; System . out . println ( ( STRING_0 0 + ( METHOD_1 ( STRING_1 , IDENT_0 , ( s ) -> s > FLOAT_0 ) ) ) ) ; METHOD_2 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_2 ) , ( s ) -> s > FLOAT_0 , STRING_1 ) ; METHOD_2 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_3 ) , ( IDENT_6 ) -> IDENT_6 < FLOAT_1 , STRING_4 ) ; METHOD_2 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_5 ) , ( s ) -> s <= FLOAT_1 , STRING_1 ) ; METHOD_3 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_6 ) , ( ( java . util . function . IDENT_7 < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . List < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_8 > > ) ( ( IDENT_9 ) -> IDENT_9 . stream ( ) . METHOD_4 ( ( s ) -> ( s . METHOD_5 ( ) . equalsIgnoreCase ( STRING_1 ) ) && ( ( s . METHOD_6 ( ) ) < FLOAT_1 ) ) ) ) . METHOD_7 ( List :: isEmpty ) , IDENT_10 :: IDENT_11 ) ; METHOD_3 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_7 ) , ( ( java . util . function . IDENT_7 < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . List < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_8 > > ) ( ( IDENT_9 ) -> IDENT_9 . stream ( ) . METHOD_4 ( ( s ) -> ( s . METHOD_5 ( ) . equalsIgnoreCase ( STRING_1 ) ) && ( ( s . METHOD_6 ( ) ) <= FLOAT_1 ) ) ) ) . METHOD_7 ( List :: isEmpty ) , IDENT_10 :: IDENT_11 ) ; METHOD_3 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_8 ) , ( ( java . util . function . IDENT_7 < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . List < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_8 > > ) ( ( IDENT_9 ) -> IDENT_9 . stream ( ) . METHOD_4 ( ( s ) -> ( s . METHOD_5 ( ) . equalsIgnoreCase ( STRING_4 ) ) && ( ( s . METHOD_6 ( ) ) > FLOAT_1 ) ) ) ) . METHOD_7 ( List :: isEmpty ) , IDENT_10 :: IDENT_11 ) ; METHOD_3 ( new org . IDENT_1 . commons . datastore . core . Query ( org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_5 . key ( ) , STRING_9 ) , ( ( java . util . function . IDENT_7 < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . List < org . IDENT_1 . IDENT_2 . storage . core . IDENT_3 . IDENT_4 . IDENT_8 > > ) ( ( IDENT_9 ) -> IDENT_9 . stream ( ) . METHOD_4 ( ( s ) -> ( s . METHOD_5 ( ) . equalsIgnoreCase ( STRING_4 ) ) && ( ( s . METHOD_6 ( ) ) >= FLOAT_1 ) ) ) ) . METHOD_7 ( List :: isEmpty ) , IDENT_10 :: IDENT_11 ) ; } METHOD_1 ( java . lang . String , org . IDENT_1 . commons . datastore . core . IDENT_12 , java . util . function . IDENT_7 ) { return METHOD_8 ( source , IDENT_13 , IDENT_14 , IDENT_10 :: IDENT_11 ) ; }
org . junit . Assert . assertTrue ( ( ( METHOD_1 ( STRING_1 , IDENT_0 , ( s ) -> s > FLOAT_0 ) ) > 0 ) ) 