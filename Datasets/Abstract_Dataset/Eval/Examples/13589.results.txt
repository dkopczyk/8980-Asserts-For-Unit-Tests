METHOD_0 ( ) { java . lang . String result = STRING_0 ; java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; org . apache . hadoop . utils . IDENT_2 < java . lang . String > task = new org . apache . hadoop . utils . METHOD_2 ( org . apache . hadoop . io . IDENT_3 . IDENT_4 . IDENT_5 , "test" , ( ) -> { if ( ( IDENT_1 . METHOD_3 ( ) ) <= 2 ) { throw new java . lang . Exception ( STRING_1 ) ; } return result ; } ) ; "<AssertPlaceHolder>" ; } call ( ) { IDENT_6 . METHOD_3 ( ) ; try { long IDENT_7 = org . apache . hadoop . util . IDENT_8 . METHOD_4 ( ) ; java . util . List < org . apache . hadoop . IDENT_9 . common . IDENT_10 > IDENT_11 = manager . METHOD_5 ( IDENT_12 ) ; if ( ( IDENT_11 != null ) && ( ( IDENT_11 . size ( ) ) > 0 ) ) { java . util . List < org . apache . hadoop . IDENT_9 . common . IDENT_13 > results = IDENT_14 . METHOD_6 ( IDENT_11 ) ; if ( results != null ) { int IDENT_15 = METHOD_7 ( results ) ; org . apache . hadoop . IDENT_9 . IDENT_16 . IDENT_17 . LOG . debug ( STRING_2 , IDENT_15 , ( ( org . apache . hadoop . util . IDENT_8 . METHOD_4 ( ) ) - IDENT_7 ) ) ; IDENT_18 . METHOD_8 ( IDENT_15 ) ; } } } catch ( java . io . IOException e ) { org . apache . hadoop . IDENT_9 . IDENT_16 . IDENT_17 . LOG . error ( ( STRING_3 + STRING_4 ) , e ) ; } return org . apache . hadoop . utils . IDENT_19 . IDENT_20 . METHOD_9 ( ) ; }
org . junit . Assert . assertEquals ( result , task . call ( ) ) 