METHOD_0 ( ) { org . opendaylight . controller . cluster . datastore . node . utils . IDENT_0 . IDENT_1 IDENT_2 = org . opendaylight . controller . cluster . datastore . node . utils . IDENT_0 . IDENT_3 . METHOD_1 ( IDENT_4 . IDENT_5 . node ( IDENT_4 . IDENT_6 ) ) ; org . opendaylight . yangtools . yang . data . api . schema . IDENT_7 < java . lang . Object > child = org . opendaylight . yangtools . yang . data . impl . schema . IDENT_8 . METHOD_2 ( ) . METHOD_3 ( "test" ) . METHOD_4 ( new org . opendaylight . yangtools . yang . data . api . IDENT_9 . METHOD_5 ( org . opendaylight . controller . cluster . datastore . util . IDENT_4 . IDENT_6 , "test" ) ) . build ( ) ; org . opendaylight . yangtools . yang . data . api . schema . IDENT_10 < ? , ? > input = org . opendaylight . yangtools . yang . data . impl . schema . IDENT_8 . METHOD_6 ( ) . METHOD_4 ( new org . opendaylight . yangtools . yang . data . api . IDENT_9 . METHOD_7 ( org . opendaylight . controller . cluster . datastore . util . IDENT_4 . IDENT_6 ) ) . METHOD_8 ( child ) . build ( ) ; org . opendaylight . yangtools . yang . data . api . schema . stream . IDENT_11 . METHOD_9 ( IDENT_2 ) . write ( input ) ; org . opendaylight . yangtools . yang . data . api . schema . IDENT_10 < ? , ? > actual = IDENT_2 . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ) { return METHOD_10 ; }
org . junit . Assert . assertNull ( actual ) 