METHOD_0 ( ) { final org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . IDENT_5 binding = new org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . METHOD_1 ( ) . METHOD_2 ( org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . IDENT_6 . class ) . METHOD_3 ( org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . IDENT_6 . class ) . METHOD_4 ( 10 ) . METHOD_5 ( 10 ) . METHOD_6 ( new org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . binding . IDENT_7 . METHOD_7 ( "foo" ) ) . METHOD_8 ( new org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . binding . IDENT_7 . METHOD_7 ( 10 ) ) . build ( ) ; final java . util . Map . Entry < org . opendaylight . yangtools . yang . data . api . IDENT_8 , org . opendaylight . yangtools . yang . data . api . schema . IDENT_9 < ? , ? > > dom = registry . METHOD_9 ( org . opendaylight . IDENT_2 . binding . dom . codec . test . IDENT_10 . IDENT_11 , binding ) ; final java . util . Map . Entry < org . opendaylight . yangtools . yang . binding . IDENT_12 < ? > , org . opendaylight . yangtools . yang . binding . IDENT_13 > IDENT_14 = registry . METHOD_10 ( dom . getKey ( ) , dom . getValue ( ) ) ; final org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . IDENT_5 IDENT_15 = ( ( org . opendaylight . yang . gen . v1 . IDENT_0 . opendaylight . params . xml . IDENT_1 . yang . IDENT_2 . test . IDENT_3 . IDENT_4 . IDENT_5 ) ( IDENT_14 . getValue ( ) ) ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( binding , IDENT_15 ) 