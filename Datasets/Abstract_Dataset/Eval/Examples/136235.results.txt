METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList ( ) ; IDENT_0 . add ( "foo" ) ; org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . params . xml . IDENT_2 . yang . IDENT_3 . test . binding . IDENT_4 . IDENT_5 IDENT_6 = new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . params . xml . IDENT_2 . yang . IDENT_3 . test . binding . IDENT_4 . METHOD_1 ( ) . METHOD_2 ( IDENT_0 ) . build ( ) ; java . util . Map . Entry < org . opendaylight . yangtools . yang . data . api . IDENT_7 , org . opendaylight . yangtools . yang . data . api . schema . IDENT_8 < ? , ? > > entry = registry . METHOD_3 ( org . opendaylight . yangtools . yang . binding . IDENT_9 . create ( org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . params . xml . IDENT_2 . yang . IDENT_3 . test . binding . IDENT_4 . IDENT_5 . class ) , IDENT_6 ) ; org . opendaylight . yangtools . yang . data . api . schema . IDENT_10 IDENT_11 = org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_12 . create ( ) . METHOD_4 ( new org . opendaylight . yangtools . yang . data . api . IDENT_7 . METHOD_5 ( org . opendaylight . IDENT_3 . binding . dom . codec . test . IDENT_13 . IDENT_14 ) ) . METHOD_6 ( org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_15 . create ( ) . METHOD_4 ( new org . opendaylight . yangtools . yang . data . api . IDENT_7 . METHOD_5 ( org . opendaylight . IDENT_3 . binding . dom . codec . test . IDENT_13 . IDENT_16 ) ) . METHOD_6 ( org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_17 . create ( ) . METHOD_4 ( new org . opendaylight . yangtools . yang . data . api . IDENT_7 . METHOD_7 ( org . opendaylight . IDENT_3 . binding . dom . codec . test . IDENT_13 . IDENT_16 , "foo" ) ) . METHOD_8 ( "foo" ) . build ( ) ) . build ( ) ) . build ( ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( IDENT_11 , entry . getValue ( ) ) 