METHOD_0 ( ) { org . opendaylight . yang . gen . v1 . IDENT_0 . IDENT_1 . params . xml . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . streams . IDENT_7 stream = new org . opendaylight . yang . gen . v1 . IDENT_0 . IDENT_1 . params . xml . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . streams . METHOD_1 ( ) . setName ( new org . opendaylight . yang . gen . v1 . IDENT_0 . IDENT_1 . params . xml . IDENT_2 . IDENT_6 . IDENT_4 . IDENT_8 . IDENT_9 . IDENT_5 . METHOD_2 ( org . opendaylight . IDENT_6 . IDENT_10 . IDENT_11 . IDENT_6 . IDENT_12 . IDENT_13 ) ) . build ( ) ; IDENT_14 . METHOD_3 ( stream , java . util . Optional . empty ( ) ) ; final org . opendaylight . yangtools . yang . model . api . IDENT_15 type = org . opendaylight . yangtools . yang . model . api . IDENT_15 . create ( true , org . opendaylight . yangtools . yang . common . IDENT_16 . create ( IDENT_17 . IDENT_18 , STRING_0 ) ) ; org . mockito . IDENT_19 < org . opendaylight . yangtools . yang . data . api . schema . IDENT_20 > IDENT_21 = org . mockito . IDENT_19 . METHOD_4 ( org . opendaylight . yangtools . yang . data . api . schema . IDENT_20 . class ) ; verify ( IDENT_22 ) . METHOD_5 ( eq ( type ) , IDENT_21 . METHOD_6 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( org . opendaylight . yangtools . yang . data . api . schema . IDENT_20 ) { org . opendaylight . yangtools . yang . data . api . IDENT_23 . IDENT_24 stream = new org . opendaylight . yangtools . yang . data . api . IDENT_23 . METHOD_8 ( org . opendaylight . yangtools . yang . common . IDENT_16 . create ( IDENT_17 . IDENT_18 , STRING_1 ) ) ; return ( ( java . lang . String ) ( value . METHOD_9 ( stream ) . get ( ) . getValue ( ) ) ) ; }
org . junit . Assert . assertEquals ( org . opendaylight . IDENT_6 . IDENT_10 . IDENT_11 . IDENT_6 . IDENT_12 . IDENT_13 , org . opendaylight . IDENT_6 . IDENT_10 . IDENT_11 . IDENT_6 . IDENT_12 . METHOD_7 ( IDENT_21 . getValue ( ) ) ) 