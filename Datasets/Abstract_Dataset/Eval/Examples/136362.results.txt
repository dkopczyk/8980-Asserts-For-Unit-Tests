METHOD_0 ( ) { final org . opendaylight . yangtools . yang . model . repo . api . IDENT_0 IDENT_1 = mock ( org . opendaylight . yangtools . yang . model . repo . api . IDENT_0 . class ) ; final org . opendaylight . IDENT_2 . impl . IDENT_3 IDENT_4 = new org . opendaylight . IDENT_2 . impl . METHOD_1 ( IDENT_1 ) ; final org . opendaylight . yangtools . yang . model . repo . api . IDENT_5 IDENT_6 = org . opendaylight . yangtools . yang . model . repo . api . IDENT_7 . create ( "name" , org . opendaylight . yangtools . yang . common . IDENT_8 . of ( STRING_0 ) ) ; final org . opendaylight . yangtools . yang . model . repo . api . IDENT_9 IDENT_10 = new org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 ( IDENT_6 ) { @ org . opendaylight . IDENT_2 . impl . Override MOD_0 com . google . common . base . IDENT_11 . IDENT_12 METHOD_3 ( final com . google . common . base . IDENT_11 . IDENT_12 IDENT_13 ) { return null ; } @ org . opendaylight . IDENT_2 . impl . Override public java . io . InputStream METHOD_4 ( ) throws java . io . IOException { return new java . io . ByteArrayInputStream ( org . opendaylight . IDENT_2 . impl . IDENT_14 . IDENT_15 . getBytes ( ) ) ; } } ; final com . google . common . util . concurrent . IDENT_16 < org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 > IDENT_17 = com . google . common . util . concurrent . IDENT_18 . METHOD_5 ( IDENT_10 ) ; doReturn ( IDENT_17 ) . when ( IDENT_1 ) . METHOD_6 ( any ( org . opendaylight . yangtools . yang . model . repo . api . IDENT_5 . class ) , eq ( org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 . class ) ) ; final java . lang . String IDENT_19 = IDENT_4 . METHOD_7 ( "name" , STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . lang . String , java . lang . String ) { com . google . common . base . IDENT_20 . METHOD_8 ( IDENT_1 , STRING_1 ) ; org . opendaylight . IDENT_2 . impl . METHOD_1 . LOG . debug ( STRING_2 , name , IDENT_21 ) ; final org . opendaylight . yangtools . yang . model . repo . api . IDENT_5 IDENT_22 = org . opendaylight . yangtools . yang . model . repo . api . IDENT_7 . create ( name , ( IDENT_21 . isEmpty ( ) ? null : org . opendaylight . yangtools . yang . common . IDENT_8 . of ( IDENT_21 ) ) ) ; final com . google . common . util . concurrent . IDENT_16 < org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 > IDENT_17 = IDENT_1 . METHOD_6 ( IDENT_22 , org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 . class ) ; try { final org . opendaylight . yangtools . yang . model . repo . api . METHOD_2 source = IDENT_17 . get ( ) ; return new java . lang . String ( com . google . common . io . IDENT_23 . toByteArray ( source . METHOD_4 ( ) ) , java . nio . IDENT_24 . IDENT_25 . METHOD_9 ( ) ) ; } catch ( java . lang . IDENT_26 | java . util . concurrent . IDENT_27 | java . io . IOException e ) { throw new java . lang . IllegalStateException ( ( STRING_3 + IDENT_22 ) , e ) ; } }
org . junit . Assert . assertEquals ( org . opendaylight . IDENT_2 . impl . IDENT_14 . IDENT_15 , IDENT_19 ) 