METHOD_0 ( ) { java . io . InputStream IDENT_0 = org . opendaylight . IDENT_1 . protocol . impl . core . IDENT_2 . METHOD_1 ( STRING_0 , IDENT_3 . IDENT_4 ) ; "<AssertPlaceHolder>" ; IDENT_0 . close ( ) ; } METHOD_1 ( java . lang . String , org . opendaylight . yang . gen . v1 . IDENT_5 . opendaylight . IDENT_6 . config . IDENT_7 . IDENT_3 ) { java . io . InputStream in ; switch ( IDENT_8 ) { case IDENT_9 : in = org . opendaylight . IDENT_1 . protocol . impl . core . IDENT_2 . class . getResourceAsStream ( IDENT_10 ) ; if ( in == null ) { throw new java . lang . IllegalStateException ( ( STRING_1 + IDENT_10 ) ) ; } break ; case IDENT_4 : org . opendaylight . IDENT_1 . protocol . impl . core . IDENT_2 . LOG . debug ( ( STRING_2 + ( java . lang . System . getProperty ( STRING_3 ) ) ) ) ; java . io . File IDENT_11 = new java . io . File ( IDENT_10 ) ; try { in = new java . io . METHOD_2 ( IDENT_11 ) ; } catch ( java . io . IDENT_12 e ) { throw new java . lang . IllegalStateException ( ( STRING_1 + IDENT_10 ) , e ) ; } break ; default : throw new java . lang . IllegalArgumentException ( ( STRING_4 + IDENT_8 ) ) ; } return in ; }
org . junit . Assert . assertNotNull ( IDENT_0 ) 