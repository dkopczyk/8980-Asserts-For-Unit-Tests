METHOD_0 ( ) { for ( int IDENT_0 = 1 ; IDENT_0 <= 10 ; IDENT_0 ++ ) { org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . info ( STRING_0 , IDENT_0 ) ; final org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 task = new org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_1 ( IDENT_6 , key ) ; final java . util . concurrent . IDENT_7 IDENT_8 = new java . util . concurrent . METHOD_2 ( 5 , 5 , 0L , java . util . concurrent . TimeUnit . IDENT_9 , new java . util . concurrent . IDENT_10 < java . lang . IDENT_11 > ( ) ) { @ org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . Override MOD_0 void METHOD_3 ( final java . lang . IDENT_11 task , final java . lang . Throwable IDENT_12 ) { super . METHOD_3 ( task , IDENT_12 ) ; if ( IDENT_12 != null ) { org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . error ( STRING_1 , IDENT_12 ) ; } } } ; final int IDENT_13 = 10 ; for ( int i = 0 ; i < IDENT_13 ; i ++ ) { IDENT_8 . METHOD_4 ( task ) ; } java . lang . Thread . sleep ( INT_0 ) ; org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . info ( STRING_2 ) ; java . lang . System . METHOD_5 ( ) ; for ( int i = 0 ; i < IDENT_13 ; i ++ ) { IDENT_8 . METHOD_4 ( task ) ; } java . lang . Thread . sleep ( INT_1 ) ; java . lang . System . METHOD_5 ( ) ; IDENT_8 . METHOD_6 ( ) ; final boolean IDENT_14 = IDENT_8 . METHOD_7 ( 10 , TimeUnit . IDENT_15 ) ; if ( ! IDENT_14 ) { org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . warn ( STRING_3 ) ; IDENT_8 . METHOD_8 ( ) ; org . junit . Assert . fail ( STRING_4 ) ; } final int IDENT_16 = task . METHOD_9 ( ) ; org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . info ( STRING_5 , IDENT_16 ) ; "<AssertPlaceHolder>" ; } } METHOD_9 ( ) { return IDENT_17 . size ( ) ; }
org . junit . Assert . assertEquals ( 20 , IDENT_16 ) 