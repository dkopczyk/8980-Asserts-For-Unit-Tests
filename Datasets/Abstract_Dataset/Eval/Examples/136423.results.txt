METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ ] { 1 , INT_0 , 0 , 0 , 0 , 1 , ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( INT_2 ) ) , ( ( byte ) ( INT_3 ) ) , ( ( byte ) ( INT_4 ) ) , ( ( byte ) ( INT_5 ) ) , INT_6 , ( ( byte ) ( 8 ) ) , ( ( byte ) ( 0 ) ) , 2 , 7 , 4 , 0 , 0 , 0 , 0 , 0 , 2 , 4 , 2 , 7 , 50 , 6 , 2 , INT_7 , INT_8 , 10 , 10 , INT_9 , INT_10 , INT_11 , INT_12 , INT_13 , INT_14 , INT_9 , INT_15 , INT_16 , 50 , ( ( byte ) ( INT_17 ) ) , 16 , 0 , INT_18 , ( ( byte ) ( INT_19 ) ) , 0 , INT_9 , INT_10 , INT_11 , INT_12 , INT_13 , INT_14 , INT_9 , INT_15 , INT_16 , 50 , INT_16 , 50 , ( ( byte ) ( INT_17 ) ) , 20 , 0 , INT_18 , ( ( byte ) ( INT_19 ) ) , 1 , INT_20 , ( ( byte ) ( 200 ) ) , INT_21 , INT_22 , ( ( byte ) ( INT_23 ) ) , ( ( byte ) ( INT_24 ) ) , INT_25 , INT_21 , INT_26 , ( ( byte ) ( INT_24 ) ) , INT_21 , ( ( byte ) ( INT_27 ) ) , ( ( byte ) ( INT_28 ) ) , ( ( byte ) ( INT_29 ) ) , INT_30 , INT_31 , 0 , 0 } ; org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . METHOD_1 ( IDENT_0 , false ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] , boolean ) { org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = null ; if ( org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . METHOD_2 ( payload ) ) { org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_13 IDENT_14 = new org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . METHOD_3 ( ) ; try { IDENT_14 . METHOD_4 ( payload , 0 , ( ( payload . length ) * ( org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_15 . IDENT_16 ) ) ) ; } catch ( org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_17 e ) { org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . LOG . warn ( STRING_0 , e ) ; return IDENT_5 ; } org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_18 IDENT_9 = ( ( org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_18 ) ( IDENT_14 . METHOD_5 ( ) ) ) ; try { org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . IDENT_19 IDENT_20 = null ; org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . IDENT_21 IDENT_22 = null ; final org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_23 IDENT_24 = IDENT_9 . METHOD_6 ( ) ; if ( IDENT_24 != null ) { java . lang . String IDENT_25 = new java . lang . String ( IDENT_24 . getValue ( ) , java . nio . IDENT_26 . IDENT_27 . METHOD_7 ( ) ) ; IDENT_20 = new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . METHOD_8 ( IDENT_25 ) ; } else { throw new java . lang . Exception ( STRING_1 ) ; } final org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_23 IDENT_28 = IDENT_9 . METHOD_9 ( org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_23 . METHOD_10 ( ) ) ; if ( IDENT_28 != null ) { IDENT_22 = new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . METHOD_11 ( org . opendaylight . IDENT_6 . IDENT_11 . IDENT_12 . IDENT_23 . METHOD_12 ( IDENT_28 . getValue ( ) , IDENT_28 . METHOD_13 ( ) ) ) ; } else { throw new java . lang . Exception ( STRING_2 ) ; } if ( IDENT_29 ) { boolean IDENT_30 = org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . METHOD_14 ( IDENT_9 , IDENT_22 ) ; if ( ! IDENT_30 ) { org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . LOG . warn ( STRING_3 ) ; throw new java . lang . Exception ( STRING_4 ) ; } } org . opendaylight . yangtools . yang . binding . IDENT_31 < org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . node . IDENT_32 > IDENT_33 = org . opendaylight . yangtools . yang . binding . IDENT_31 . builder ( org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . IDENT_34 . class ) . child ( org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . nodes . Node . class , new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . nodes . METHOD_15 ( IDENT_20 ) ) . child ( org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . node . IDENT_32 . class , new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . node . METHOD_16 ( IDENT_22 ) ) . build ( ) ; IDENT_5 = new org . opendaylight . yang . gen . v1 . IDENT_1 . opendaylight . IDENT_2 . IDENT_3 . METHOD_17 ( IDENT_33 ) ; } catch ( java . lang . Exception e ) { org . opendaylight . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . utils . IDENT_10 . LOG . debug ( STRING_5 , e ) ; } } return IDENT_5 ; }
org . junit . Assert . assertNull ( IDENT_5 ) 