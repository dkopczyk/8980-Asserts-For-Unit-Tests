METHOD_0 ( ) { byte [ ] bytes = new byte [ ] { - 5 , - INT_0 , - 1 , - INT_1 , - 1 , - 16 , - 1 , - 16 , - 1 , - 16 , - 1 , - 16 , - 1 , - 16 , - INT_2 , INT_3 } ; byte [ ] IDENT_0 = org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . common . IDENT_6 . METHOD_1 ( new org . opendaylight . yang . gen . v1 . IDENT_7 . opendaylight . opendaylight . IDENT_8 . IDENT_9 . IDENT_10 . fields . IDENT_11 . METHOD_2 ( STRING_0 ) ) ; for ( int i = 0 ; i < ( bytes . length ) ; i ++ ) { int IDENT_12 = IDENT_0 [ i ] ; "<AssertPlaceHolder>" ; } } METHOD_1 ( org . opendaylight . yang . gen . v1 . IDENT_7 . opendaylight . opendaylight . IDENT_8 . IDENT_9 . IDENT_10 . fields . IDENT_11 . METHOD_2 ) { final java . lang . String IDENT_13 ; if ( ( IDENT_12 != null ) && ( ( IDENT_12 . getValue ( ) ) != null ) ) { IDENT_13 = IDENT_12 . getValue ( ) ; } else { IDENT_13 = org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . common . IDENT_6 . IDENT_14 . getValue ( ) ; } final java . net . IDENT_15 IDENT_16 ; try { IDENT_16 = java . net . IDENT_15 . METHOD_3 ( IDENT_13 ) ; } catch ( java . net . IDENT_17 e ) { org . opendaylight . IDENT_1 . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . common . IDENT_6 . LOG . error ( STRING_1 , e ) ; return null ; } return IDENT_16 . METHOD_4 ( ) ; }
org . junit . Assert . assertEquals ( bytes [ i ] , IDENT_12 ) 