read ( ) { when ( IDENT_0 . read ( IDENT_1 . IDENT_2 , null ) ) . thenReturn ( com . google . common . util . concurrent . IDENT_3 . METHOD_0 ( com . google . common . base . Optional . of ( IDENT_4 ) ) ) ; java . util . concurrent . IDENT_5 IDENT_6 = reader . METHOD_1 ( IDENT_1 . IDENT_2 , null ) ; verify ( executor ) . execute ( IDENT_7 . METHOD_2 ( ) ) ; IDENT_7 . getValue ( ) . run ( ) ; "<AssertPlaceHolder>" ; } run ( ) { org . opendaylight . controller . IDENT_8 . IDENT_9 . binding . api . IDENT_10 IDENT_11 = ( ( tx ) == null ) ? IDENT_12 . METHOD_3 ( ) : tx ; org . opendaylight . IDENT_13 . util . IDENT_14 . writer . IDENT_15 . LOG . debug ( STRING_0 , IDENT_16 . size ( ) ) ; for ( org . opendaylight . IDENT_13 . util . IDENT_14 . writer . IDENT_17 f : IDENT_16 ) { org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . IDENT_19 . IDENT_20 . nodes . IDENT_21 IDENT_22 = new org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . IDENT_19 . IDENT_20 . nodes . METHOD_4 ( new org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . IDENT_19 . IDENT_20 . METHOD_5 ( f . METHOD_6 ( ) ) ) ; org . opendaylight . yangtools . yang . binding . IDENT_23 < org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . flow . IDENT_19 . IDENT_20 . IDENT_24 . table . IDENT_25 > IDENT_26 = org . opendaylight . yangtools . yang . binding . IDENT_23 . builder ( org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . IDENT_19 . IDENT_20 . IDENT_27 . class ) . child ( org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . IDENT_19 . IDENT_20 . nodes . Node . class , IDENT_22 ) . METHOD_7 ( org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . flow . IDENT_19 . IDENT_20 . IDENT_28 . class ) . child ( org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . flow . IDENT_19 . IDENT_20 . IDENT_24 . IDENT_29 . class , f . METHOD_8 ( ) ) . child ( org . opendaylight . yang . gen . v1 . IDENT_18 . opendaylight . flow . IDENT_19 . IDENT_20 . IDENT_24 . table . IDENT_25 . class , f . METHOD_9 ( ) ) . build ( ) ; IDENT_11 . delete ( IDENT_1 . IDENT_2 , IDENT_26 ) ; } com . google . common . util . concurrent . IDENT_30 < java . lang . IDENT_31 > IDENT_32 = IDENT_11 . METHOD_10 ( ) ; try { IDENT_32 . get ( ) ; } catch ( java . util . concurrent . IDENT_33 | java . lang . IDENT_34 e ) { org . opendaylight . IDENT_13 . util . IDENT_14 . writer . IDENT_15 . LOG . error ( STRING_1 , e ) ; } }
org . junit . Assert . assertThat ( IDENT_6 . get ( ) , org . hamcrest . Matchers . is ( IDENT_4 ) ) 