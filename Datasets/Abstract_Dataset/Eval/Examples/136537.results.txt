METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( new org . opendaylight . yang . gen . v1 . IDENT_1 . IDENT_2 . params . xml . IDENT_3 . yang . IDENT_4 . common . IDENT_5 . METHOD_2 ( STRING_0 ) ) ) . thenReturn ( java . util . concurrent . IDENT_6 . METHOD_3 ( java . util . Collections . emptyList ( ) ) ) ; doReturn ( IDENT_0 ) . when ( IDENT_7 ) . METHOD_4 ( ) ; java . util . List < org . opendaylight . yang . gen . v1 . IDENT_1 . IDENT_2 . params . xml . IDENT_3 . yang . IDENT_4 . common . IDENT_5 . IDENT_8 > IDENT_9 = IDENT_7 . METHOD_1 ( java . util . Collections . singletonList ( new org . opendaylight . yang . gen . v1 . IDENT_1 . IDENT_2 . params . xml . IDENT_3 . yang . IDENT_4 . common . IDENT_5 . METHOD_2 ( STRING_0 ) ) ) . get ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List ) { org . opendaylight . IDENT_4 . IDENT_10 . impl . IDENT_11 . IDENT_12 . IDENT_13 IDENT_14 = METHOD_4 ( ) ; return IDENT_15 . stream ( ) . map ( IDENT_14 :: METHOD_1 ) . map ( ( IDENT_16 ) -> IDENT_16 . METHOD_5 ( java . util . List :: stream ) ) . METHOD_6 ( java . util . concurrent . IDENT_6 . METHOD_3 ( java . util . stream . IDENT_17 . empty ( ) ) , ( IDENT_18 , IDENT_19 ) -> IDENT_18 . METHOD_7 ( IDENT_19 , java . util . stream . IDENT_17 :: IDENT_20 ) ) . METHOD_5 ( ( s ) -> s . METHOD_8 ( ) . collect ( java . util . stream . IDENT_21 . toList ( ) ) ) ; }
org . junit . Assert . assertThat ( IDENT_9 . size ( ) , org . hamcrest . core . Is . is ( 0 ) ) 