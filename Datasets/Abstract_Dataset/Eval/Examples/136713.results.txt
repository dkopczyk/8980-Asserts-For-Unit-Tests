METHOD_0 ( ) { final org . opendaylight . yangtools . yang . model . api . IDENT_0 context = org . opendaylight . yangtools . yang . stmt . IDENT_1 . METHOD_1 ( STRING_0 ) ; final org . opendaylight . yangtools . yang . model . api . IDENT_2 IDENT_3 = context . METHOD_2 ( org . opendaylight . yangtools . yang . stmt . IDENT_4 . IDENT_5 ) . get ( ) ; final org . opendaylight . yangtools . yang . model . api . IDENT_6 target = org . opendaylight . yangtools . yang . model . util . IDENT_7 . METHOD_3 ( context , org . opendaylight . yangtools . yang . model . api . IDENT_8 . create ( true , org . opendaylight . yangtools . yang . common . IDENT_9 . create ( org . opendaylight . yangtools . yang . stmt . IDENT_4 . IDENT_5 , "foo" ) , org . opendaylight . yangtools . yang . common . IDENT_9 . create ( org . opendaylight . yangtools . yang . stmt . IDENT_4 . IDENT_5 , "foo" ) , org . opendaylight . yangtools . yang . common . IDENT_9 . create ( org . opendaylight . yangtools . yang . stmt . IDENT_4 . IDENT_5 , "foo" ) , org . opendaylight . yangtools . yang . common . IDENT_9 . create ( org . opendaylight . yangtools . yang . stmt . IDENT_4 . IDENT_5 , STRING_1 ) ) ) ; "<AssertPlaceHolder>" ; } create ( java . net . URI , java . util . Optional ) { return new org . opendaylight . yangtools . yang . common . METHOD_4 ( IDENT_10 , IDENT_11 . METHOD_5 ( null ) ) ; }
org . junit . Assert . assertNotNull ( target ) 