METHOD_0 ( ) { bytes . METHOD_1 ( 20 ) ; bytes . METHOD_2 ( 20 ) ; for ( long expected : new long [ ] { INT_0 , INT_1 , INT_2 , INT_3 , 12 , 1 , 0 } ) { bytes . append ( 10 , expected , 6 ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( net . IDENT_0 . IDENT_1 . bytes . IDENT_2 ) { long IDENT_3 = 0 ; boolean IDENT_4 = false ; int b = in . METHOD_4 ( ) ; if ( b == STRING_0 ) { in . METHOD_5 ( 1 ) ; b = in . METHOD_4 ( ) ; if ( ( b == STRING_1 ) || ( b == STRING_2 ) ) { in . METHOD_5 ( 1 ) ; return net . IDENT_0 . IDENT_1 . bytes . IDENT_5 . METHOD_6 ( in ) ; } } while ( ( in . METHOD_7 ( ) ) > 0 ) { b = in . METHOD_8 ( ) ; if ( ( b - ( STRING_0 + ( Integer . IDENT_6 ) ) ) <= ( 9 + ( Integer . IDENT_6 ) ) ) { IDENT_3 = ( ( IDENT_3 * 10 ) + b ) - STRING_0 ; } else if ( b == STRING_3 ) { IDENT_4 = true ; } else if ( ( b == STRING_4 ) || ( b == STRING_5 ) ) { in . METHOD_5 ( ( - 1 ) ) ; break ; } else if ( b == STRING_6 ) { net . IDENT_0 . IDENT_1 . bytes . IDENT_5 . METHOD_9 ( in ) ; break ; } else if ( b == STRING_7 ) { } else { break ; } } return IDENT_4 ? - IDENT_3 : IDENT_3 ; }
org . junit . Assert . assertEquals ( expected , bytes . METHOD_3 ( 10 ) ) 