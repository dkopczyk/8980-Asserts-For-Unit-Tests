METHOD_0 ( ) { try ( net . IDENT_0 . IDENT_1 . map . IDENT_2 < java . lang . Long , byte [ ] > map = net . IDENT_0 . IDENT_1 . map . IDENT_3 . of ( net . IDENT_0 . IDENT_1 . map . Long . class , byte [ ] . class ) . METHOD_1 ( new byte [ INT_0 * INT_1 ] ) . METHOD_2 ( 100 ) . METHOD_3 ( 1 ) . create ( ) ) { byte [ ] value = new byte [ INT_0 * INT_1 ] ; value [ INT_2 ] = 1 ; map . put ( 1L , value ) ; "<AssertPlaceHolder>" ; } } get ( java . lang . Object ) { return METHOD_4 ( new net . IDENT_0 . IDENT_1 . map . IDENT_4 . IDENT_5 < IDENT_6 , IDENT_7 > ( ) { @ net . IDENT_0 . IDENT_1 . map . Override public java . lang . Object method ( java . util . concurrent . IDENT_8 < IDENT_6 , IDENT_7 > map ) { return map . get ( key ) ; } } ) ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( map . get ( 1L ) , value ) ) 