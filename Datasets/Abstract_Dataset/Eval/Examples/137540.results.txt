METHOD_0 ( ) { final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < ? > bytes = net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_1 ( ) ; final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 IDENT_2 = IDENT_6 . IDENT_7 . apply ( bytes ) ; final double d = FLOAT_0 ; IDENT_2 . METHOD_2 ( ) . METHOD_3 ( d ) ; final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 IDENT_9 = net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . from ( bytes . toString ( ) ) ; final double IDENT_10 = IDENT_9 . METHOD_4 ( ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { @ org . IDENT_11 . IDENT_12 . IDENT_13 net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 IDENT_2 = METHOD_5 ( ) ; IDENT_2 . write ( ) . METHOD_3 ( 1 ) ; IDENT_2 . write ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_14 . IDENT_15 . IDENT_16 ) . METHOD_3 ( 2 ) ; IDENT_2 . write ( ( ) -> STRING_0 ) . METHOD_3 ( 3 ) ; org . junit . Assert . assertEquals ( ( STRING_1 + ( STRING_2 + STRING_3 ) ) , IDENT_2 . toString ( ) ) ; METHOD_6 ( STRING_4 , IDENT_2 ) ; class IDENT_17 { double f ; public void set ( double d ) { f = d ; } } @ org . IDENT_11 . IDENT_12 . IDENT_13 IDENT_17 n = new METHOD_7 ( ) ; java . util . stream . IDENT_18 . METHOD_8 ( 1 , 3 ) . METHOD_9 ( ( e ) -> { IDENT_2 . read ( ) . METHOD_3 ( n , net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_7 :: set ) ; assertEquals ( e , n . f , 0.0 ) ; } ) ; org . junit . Assert . assertEquals ( 0 , bytes . METHOD_10 ( ) ) ; IDENT_2 . read ( ) ; }
org . junit . Assert . assertEquals ( IDENT_10 , d , 0 ) 