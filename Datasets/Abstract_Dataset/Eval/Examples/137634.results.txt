METHOD_0 ( ) { java . lang . String command = java . lang . String . format ( IDENT_0 , IDENT_1 . getAbsolutePath ( ) , IDENT_2 . getAbsolutePath ( ) , STRING_0 , IDENT_3 . getAbsolutePath ( ) , STRING_1 , STRING_2 ) ; org . IDENT_4 . hadoop . tools . IDENT_5 . IDENT_6 . METHOD_1 ( command . split ( " " ) ) ; java . util . IDENT_7 < java . lang . Long , org . IDENT_4 . hadoop . tools . IDENT_5 . token . IDENT_8 . IDENT_9 . IDENT_10 > IDENT_11 = org . IDENT_4 . hadoop . tools . IDENT_5 . token . IDENT_8 . IDENT_9 . IDENT_12 . METHOD_2 ( IDENT_3 . getAbsolutePath ( ) ) ; java . lang . String IDENT_13 = ( IDENT_3 . getAbsolutePath ( ) ) + STRING_3 ; command = java . lang . String . format ( IDENT_0 , IDENT_1 . getAbsolutePath ( ) , IDENT_2 . getAbsolutePath ( ) , STRING_0 , IDENT_13 , STRING_1 , STRING_2 ) ; command += STRING_4 ; org . IDENT_4 . hadoop . tools . IDENT_5 . IDENT_6 . METHOD_1 ( command . split ( " " ) ) ; java . util . IDENT_7 < java . lang . Long , org . IDENT_4 . hadoop . tools . IDENT_5 . token . IDENT_8 . IDENT_9 . IDENT_10 > IDENT_14 = org . IDENT_4 . hadoop . tools . IDENT_5 . token . IDENT_8 . IDENT_9 . IDENT_12 . METHOD_2 ( IDENT_13 ) ; for ( java . lang . Long key : IDENT_14 . METHOD_3 ( ) ) { "<AssertPlaceHolder>" ; } } get ( int ) { if ( ( key < 0 ) || ( key >= ( size ) ) ) throw new java . lang . METHOD_4 ( java . lang . Integer . toString ( key ) ) ; final int IDENT_15 = java . util . Arrays . METHOD_5 ( keys , 0 , IDENT_16 , key ) ; return IDENT_15 < 0 ? 0 : values [ IDENT_15 ] ; }
org . junit . Assert . assertTrue ( IDENT_14 . get ( key ) . equals ( IDENT_11 . get ( key ) ) ) 