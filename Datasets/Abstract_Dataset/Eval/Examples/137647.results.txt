METHOD_0 ( ) { final double [ ] [ ] data = new double [ IDENT_0 ] [ IDENT_1 ] ; final java . lang . String msg = ( java . lang . String . format ( edu . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 , IDENT_0 , IDENT_1 ) ) + STRING_0 ; for ( int r = 0 ; r < ( IDENT_0 ) ; r ++ ) { for ( int c = 0 ; c < ( 2 * ( IDENT_1 ) ) ; c ++ ) { final double expected = random . METHOD_1 ( ) ; try { IDENT_8 . METHOD_2 ( expected , r , c , data ) ; final double actual = IDENT_8 . METHOD_3 ( r , c , data ) ; "<AssertPlaceHolder>" ; } catch ( final java . lang . IllegalArgumentException e ) { } } } } METHOD_3 ( int , int , float [ ] [ ] ) { final int index = METHOD_4 ( r , c ) ; if ( index >= 0 ) { return IDENT_9 [ ( index / ( IDENT_1 ) ) ] [ ( index OP_0 ( IDENT_1 ) ) ] ; } else if ( index > ( Integer . IDENT_10 ) ) { return - ( IDENT_9 [ ( ( - index ) / ( IDENT_1 ) ) ] [ ( ( - index ) OP_0 ( IDENT_1 ) ) ] ) ; } else { return edu . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_11 . IDENT_12 ; } }
org . junit . Assert . assertEquals ( java . lang . String . format ( msg , r , c ) , expected , actual , 0.0 ) 