METHOD_0 ( ) { final java . io . File IDENT_0 = IDENT_1 . METHOD_1 ( STRING_0 0 ) ; final java . io . File IDENT_2 = IDENT_1 . METHOD_1 ( STRING_1 ) ; IDENT_2 . delete ( ) ; java . lang . String [ ] args = null ; args = new java . lang . String [ ] { STRING_2 , IDENT_3 . getAbsolutePath ( ) , STRING_3 , IDENT_0 . getAbsolutePath ( ) } ; org . IDENT_4 . tools . IDENT_5 . IDENT_6 . METHOD_2 ( args ) ; args = new java . lang . String [ ] { STRING_2 , IDENT_3 . getAbsolutePath ( ) , STRING_3 , IDENT_2 . getAbsolutePath ( ) , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_0 , STRING_9 } ; org . IDENT_4 . tools . IDENT_5 . IDENT_6 . METHOD_2 ( args ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String [ ] ) { final org . IDENT_4 . tools . IDENT_5 . options . IDENT_7 options = new org . IDENT_4 . tools . IDENT_5 . options . METHOD_3 ( ) ; final org . IDENT_8 . IDENT_9 . IDENT_10 parser = new org . IDENT_8 . IDENT_9 . METHOD_4 ( options ) ; try { parser . METHOD_5 ( args ) ; } catch ( final org . IDENT_8 . IDENT_9 . IDENT_11 e ) { System . err . println ( e . getMessage ( ) ) ; System . err . println ( STRING_10 ) ; parser . METHOD_6 ( System . err ) ; return ; } final byte [ ] IDENT_12 = options . METHOD_7 ( ) ; final org . IDENT_4 . time . IDENT_13 IDENT_14 = org . IDENT_4 . time . IDENT_13 . METHOD_8 ( ) ; final org . IDENT_4 . feature . IDENT_15 . list . IDENT_16 < ? extends org . IDENT_4 . feature . IDENT_15 . IDENT_17 < ? , ? > > IDENT_18 = options . METHOD_9 ( ) . METHOD_10 ( IDENT_12 ) ; IDENT_14 . METHOD_11 ( ) ; if ( options . METHOD_12 ( ) ) { System . out . println ( ( STRING_11 + ( IDENT_14 . METHOD_13 ( ) ) ) ) ; } if ( options . METHOD_14 ( ) ) { org . IDENT_4 . io . IDENT_19 . METHOD_15 ( new java . io . File ( options . METHOD_16 ( ) ) , IDENT_18 ) ; } else { org . IDENT_4 . io . IDENT_19 . METHOD_17 ( new java . io . File ( options . METHOD_16 ( ) ) , IDENT_18 ) ; } options . METHOD_18 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_2 . exists ( ) ) 