METHOD_0 ( ) { final double [ ] data = new double [ ( IDENT_0 ) * ( IDENT_1 ) ] ; final java . lang . String msg = ( java . lang . String . format ( edu . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 , IDENT_0 , IDENT_1 ) ) + STRING_0 ; for ( int r = 0 ; r < ( IDENT_0 ) ; r ++ ) { for ( int c = 0 ; c < ( 2 * ( IDENT_1 ) ) ; c ++ ) { final double expected = random . METHOD_1 ( ) ; try { IDENT_8 . METHOD_2 ( expected , r , c , data , 0 ) ; final double actual = IDENT_8 . METHOD_3 ( r , c , data , 0 ) ; "<AssertPlaceHolder>" ; } catch ( final java . lang . IllegalArgumentException e ) { } } } } METHOD_3 ( int , int , int , float [ ] [ ] [ ] ) { final int i = METHOD_4 ( s , r , c ) ; final int IDENT_9 = java . lang . Math . METHOD_5 ( i ) ; final int IDENT_10 = IDENT_9 / ( IDENT_11 ) ; final int IDENT_12 = IDENT_9 OP_0 ( IDENT_11 ) ; final int IDENT_13 = IDENT_12 / ( IDENT_14 ) ; final int cc = IDENT_12 OP_0 ( IDENT_14 ) ; if ( i >= 0 ) { return IDENT_15 [ IDENT_10 ] [ IDENT_13 ] [ cc ] ; } else if ( i > ( Integer . IDENT_16 ) ) { return - ( IDENT_15 [ IDENT_10 ] [ IDENT_13 ] [ cc ] ) ; } else { return edu . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_17 . IDENT_18 ; } }
org . junit . Assert . assertEquals ( java . lang . String . format ( msg , r , c ) , expected , actual , 0.0 ) 