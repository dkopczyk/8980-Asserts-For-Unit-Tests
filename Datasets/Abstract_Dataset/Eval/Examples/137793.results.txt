METHOD_0 ( ) { java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; com . ibm . ws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new com . ibm . ws . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . lang . StringBuilder str = new java . lang . StringBuilder ( ) ; IDENT_4 . IDENT_5 = com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_7 ; IDENT_4 . IDENT_8 = com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_9 ; str . append ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_10 ) ; str . append ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . METHOD_2 ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_11 , IDENT_4 . IDENT_5 ) ) ; str . append ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_12 ) ; str . append ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . METHOD_2 ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_13 , IDENT_4 . IDENT_8 ) ) ; str . append ( com . ibm . ws . IDENT_0 . IDENT_1 . converter . IDENT_6 . IDENT_14 ) ; try { converter . METHOD_3 ( out , IDENT_4 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( STRING_0 + e ) ) ; } } toString ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( INT_0 ) ; sb . append ( getClass ( ) . METHOD_4 ( ) ) ; sb . append ( STRING_1 ) . append ( java . lang . Integer . METHOD_5 ( hashCode ( ) ) ) ; sb . append ( STRING_2 ) . append ( this . IDENT_15 ) ; sb . append ( STRING_3 ) . append ( this . IDENT_16 ) ; sb . append ( STRING_4 ) . append ( this . IDENT_17 ) ; sb . append ( STRING_5 ) . append ( this . IDENT_18 ) ; sb . append ( STRING_6 ) . append ( this . error ) ; if ( null != ( this . output ) ) { sb . append ( STRING_7 ) . append ( this . IDENT_19 ) ; for ( int i = 0 ; i < ( this . output . length ) ; i ++ ) { sb . append ( STRING_8 ) . append ( this . output [ i ] ) ; } } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( out . toString ( ) , str . toString ( ) ) 