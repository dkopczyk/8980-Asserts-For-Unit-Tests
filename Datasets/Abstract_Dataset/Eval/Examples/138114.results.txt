METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final java . lang . String [ ] IDENT_2 = new java . lang . String [ ] { IDENT_0 , IDENT_1 } ; java . lang . String output = com . ibm . ws . security . common . web . IDENT_3 . METHOD_1 ( null , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Map , java . lang . String [ ] ) { java . lang . String IDENT_4 = null ; if ( ( IDENT_5 != null ) && ( ( IDENT_5 . size ( ) ) > 0 ) ) { java . util . List < java . lang . String > IDENT_6 = null ; if ( ( IDENT_7 != null ) && ( ( IDENT_7 . length ) != 0 ) ) { IDENT_6 = java . util . Arrays . asList ( IDENT_7 ) ; } else { IDENT_6 = new java . util . ArrayList ( ) ; } java . lang . StringBuffer sb = new java . lang . StringBuffer ( ) ; java . util . Set < java . lang . String > keys = IDENT_5 . METHOD_2 ( ) ; for ( java . lang . String key : keys ) { sb . append ( ( ( STRING_2 + key ) + STRING_3 ) ) ; if ( IDENT_6 . contains ( key ) ) { sb . append ( STRING_4 ) ; } else { java . lang . String [ ] values = IDENT_5 . get ( key ) ; sb . append ( java . util . Arrays . toString ( values ) ) ; } sb . append ( STRING_5 ) ; } IDENT_4 = sb . toString ( ) ; } return IDENT_4 ; }
org . junit . Assert . assertNull ( output ) 