METHOD_0 ( ) { java . lang . String url = STRING_0 ; java . lang . String IDENT_0 = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { try { int IDENT_1 = url . indexOf ( STRING_2 ) ; int IDENT_2 = url . indexOf ( "/" , ( IDENT_1 + 2 ) ) ; java . net . URL IDENT_3 = new java . net . URL ( url ) ; java . lang . StringBuffer IDENT_4 = new java . lang . StringBuffer ( ) ; IDENT_4 . append ( IDENT_3 . METHOD_2 ( ) ) ; IDENT_4 . append ( STRING_3 ) ; int port = IDENT_3 . METHOD_3 ( ) ; if ( port != ( - 1 ) ) { IDENT_4 . append ( STRING_4 ) ; IDENT_4 . append ( port ) ; } url = IDENT_4 . append ( url . substring ( IDENT_2 ) ) . toString ( ) ; } catch ( com . ibm . ws . IDENT_5 . security . internal . java e ) { if ( ( com . ibm . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_4 ( ) ) && ( com . ibm . ws . IDENT_5 . security . internal . IDENT_9 . tc . METHOD_5 ( ) ) ) { com . ibm . IDENT_6 . IDENT_7 . IDENT_10 . debug ( com . ibm . ws . IDENT_5 . security . internal . IDENT_9 . tc , STRING_5 , new java . lang . Object [ ] { e } ) ; } } return url ; }
org . junit . Assert . assertEquals ( IDENT_0 , handler . METHOD_1 ( url ) ) 