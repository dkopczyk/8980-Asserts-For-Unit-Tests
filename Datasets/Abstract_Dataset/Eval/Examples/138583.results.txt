METHOD_0 ( ) { org . IDENT_0 . rules . project . IDENT_1 IDENT_2 = new org . IDENT_0 . rules . project . METHOD_1 ( ) ; org . IDENT_0 . rules . project . model . IDENT_3 IDENT_4 = IDENT_2 . METHOD_2 ( STRING_0 ) ; java . net . URL [ ] IDENT_5 = IDENT_4 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( ( IDENT_6 ) == null ) { return new java . net . URL [ ] { } ; } java . net . URL IDENT_7 ; try { IDENT_7 = IDENT_8 . METHOD_4 ( ) . METHOD_5 ( ) ; } catch ( java . net . IDENT_9 e ) { log . error ( STRING_1 , IDENT_8 , e ) ; return new java . net . URL [ ] { } ; } org . IDENT_0 . rules . project . model . Set < java . lang . String > IDENT_10 = METHOD_6 ( ) ; org . IDENT_0 . rules . project . model . ArrayList < java . net . URL > IDENT_11 = new org . IDENT_0 . rules . project . model . ArrayList ( IDENT_10 . size ( ) ) ; for ( java . lang . String IDENT_12 : IDENT_10 ) { java . net . URL url ; try { url = new java . net . URL ( IDENT_12 ) ; } catch ( java . net . IDENT_9 IDENT_13 ) { try { url = new java . net . URL ( IDENT_7 , IDENT_12 ) ; } catch ( java . net . IDENT_9 IDENT_14 ) { log . error ( STRING_2 , IDENT_12 , IDENT_14 ) ; continue ; } } IDENT_11 . add ( url ) ; } return IDENT_11 . toArray ( new java . net . URL [ 0 ] ) ; }
org . junit . Assert . assertEquals ( 9 , IDENT_5 . length ) 