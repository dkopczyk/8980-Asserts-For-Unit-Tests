METHOD_0 ( ) { org . springframework . web . IDENT_0 . IDENT_1 IDENT_2 = mock ( org . springframework . web . IDENT_0 . IDENT_1 . class ) ; when ( IDENT_2 . METHOD_1 ( ) ) . thenReturn ( org . IDENT_3 . IDENT_4 . IDENT_5 . controller . IDENT_6 . IDENT_7 ) ; when ( IDENT_2 . METHOD_2 ( ) ) . thenReturn ( "foo" ) ; org . springframework . http . IDENT_8 < ? > result = IDENT_9 . METHOD_3 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; METHOD_4 ( IDENT_2 ) ; } METHOD_3 ( org . springframework . web . IDENT_0 . IDENT_1 ) { return org . IDENT_3 . IDENT_4 . IDENT_5 . controller . IDENT_10 . METHOD_5 ( ( ) -> { java . lang . String IDENT_11 = file . METHOD_1 ( ) ; java . nio . file . Path IDENT_12 = java . nio . file . IDENT_13 . get ( IDENT_14 . METHOD_6 ( ) . getAbsolutePath ( ) , IDENT_11 ) ; if ( java . nio . file . IDENT_15 . exists ( IDENT_12 ) ) { java . lang . String IDENT_16 = STRING_0 ; return METHOD_7 ( IDENT_11 , IDENT_16 , IDENT_17 . IDENT_18 ) ; } java . lang . String IDENT_19 = file . METHOD_2 ( ) ; if ( IDENT_19 == null ) { java . lang . String IDENT_16 = STRING_1 ; return METHOD_7 ( IDENT_11 , IDENT_16 , IDENT_17 . IDENT_20 ) ; } if ( ! ( org . IDENT_3 . IDENT_4 . IDENT_5 . controller . IDENT_10 . IDENT_21 . contains ( IDENT_19 . toLowerCase ( ) ) ) ) { java . lang . String IDENT_16 = STRING_2 ; return METHOD_7 ( IDENT_11 , IDENT_16 , IDENT_17 . IDENT_20 ) ; } if ( ! ( IDENT_11 . toLowerCase ( ) . METHOD_8 ( STRING_3 ) ) ) { java . lang . String IDENT_16 = STRING_4 ; return METHOD_7 ( IDENT_11 , IDENT_16 , IDENT_17 . IDENT_20 ) ; } try { file . METHOD_9 ( IDENT_12 . METHOD_10 ( ) ) ; IDENT_22 . METHOD_11 ( IDENT_12 ) ; return org . springframework . http . IDENT_8 . METHOD_12 ( java . util . Collections . METHOD_13 ( STRING_5 , ( IDENT_11 + STRING_6 ) ) ) ; } catch ( ex ) { java . lang . String IDENT_16 = STRING_7 ; return METHOD_7 ( IDENT_11 , IDENT_16 , IDENT_17 . IDENT_23 , org . IDENT_3 . IDENT_4 . IDENT_5 . controller . ex ) ; } } ) ; }
org . junit . Assert . assertEquals ( IDENT_17 . IDENT_20 , result . getStatusCode ( ) ) 