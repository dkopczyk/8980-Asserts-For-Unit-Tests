METHOD_0 ( ) { org . openmrs . IDENT_0 IDENT_1 = new org . openmrs . METHOD_1 ( ) ; org . openmrs . METHOD_1 IDENT_2 = new org . openmrs . METHOD_1 ( ) ; org . openmrs . METHOD_1 IDENT_3 = new org . openmrs . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( true ) ; org . openmrs . METHOD_1 IDENT_4 = new org . openmrs . METHOD_1 ( ) ; org . openmrs . METHOD_1 IDENT_5 = new org . openmrs . METHOD_1 ( ) ; org . openmrs . METHOD_1 IDENT_6 = new org . openmrs . METHOD_1 ( ) ; IDENT_1 . METHOD_3 ( new java . util . HashSet ( java . util . Arrays . asList ( IDENT_2 , IDENT_3 ) ) ) ; IDENT_2 . METHOD_3 ( new java . util . HashSet ( java . util . Arrays . asList ( IDENT_4 , IDENT_5 ) ) ) ; IDENT_3 . METHOD_3 ( new java . util . HashSet ( java . util . Collections . singletonList ( IDENT_6 ) ) ) ; IDENT_4 . METHOD_3 ( new java . util . HashSet ( ) ) ; IDENT_5 . METHOD_3 ( new java . util . HashSet ( ) ) ; IDENT_6 . METHOD_3 ( new java . util . HashSet ( ) ) ; java . util . Set < org . openmrs . METHOD_1 > IDENT_7 = IDENT_1 . METHOD_4 ( false ) ; java . util . Set < org . openmrs . METHOD_1 > IDENT_8 = new java . util . HashSet ( java . util . Arrays . asList ( IDENT_2 , IDENT_4 , IDENT_5 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( boolean ) { java . util . Set < org . openmrs . METHOD_1 > result = new java . util . HashSet ( ) ; for ( org . openmrs . METHOD_1 IDENT_9 : METHOD_5 ( ) ) { if ( ( ! ( IDENT_9 . METHOD_6 ( ) ) ) || IDENT_10 ) { result . add ( IDENT_9 ) ; result . addAll ( IDENT_9 . METHOD_4 ( IDENT_10 ) ) ; } } return result ; }
org . junit . Assert . assertThat ( IDENT_7 , org . hamcrest . Matchers . equalTo ( IDENT_8 ) ) 