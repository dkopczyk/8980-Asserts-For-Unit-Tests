METHOD_0 ( ) { METHOD_1 ( org . openmrs . api . IDENT_0 . IDENT_1 ) ; METHOD_1 ( org . openmrs . api . IDENT_0 . IDENT_2 ) ; org . openmrs . IDENT_3 IDENT_4 = METHOD_2 ( ) ; java . util . List < org . openmrs . IDENT_5 > IDENT_6 = METHOD_3 ( IDENT_7 . METHOD_4 ( 2 ) , IDENT_4 , IDENT_8 . METHOD_5 ( 4 ) ) ; java . util . List < org . openmrs . IDENT_5 > res = IDENT_8 . METHOD_6 ( IDENT_4 , org . openmrs . api . IDENT_0 . IDENT_9 . parse ( STRING_0 ) ) ; "<AssertPlaceHolder>" ; for ( org . openmrs . IDENT_5 IDENT_10 : res ) { if ( ( ( ( ( ! ( IDENT_10 . equals ( IDENT_6 . get ( 0 ) ) ) ) && ( ! ( IDENT_10 . equals ( IDENT_6 . get ( 2 ) ) ) ) ) && ( ! ( IDENT_10 . equals ( IDENT_6 . get ( 3 ) ) ) ) ) && ( ! ( IDENT_10 . equals ( IDENT_6 . get ( 7 ) ) ) ) ) && ( ! ( IDENT_10 . equals ( IDENT_6 . get ( 8 ) ) ) ) ) { if ( IDENT_10 . equals ( IDENT_6 . get ( 1 ) ) ) { org . junit . Assert . fail ( STRING_1 ) ; } else if ( IDENT_10 . equals ( IDENT_6 . get ( 4 ) ) ) { org . junit . Assert . fail ( STRING_2 ) ; } else if ( IDENT_10 . equals ( IDENT_6 . get ( 5 ) ) ) { org . junit . Assert . fail ( STRING_3 ) ; } else if ( IDENT_10 . equals ( IDENT_6 . get ( 6 ) ) ) { org . junit . Assert . fail ( STRING_4 ) ; } else { org . junit . Assert . fail ( STRING_5 ) ; } } } } size ( ) { return IDENT_11 . size ( ) ; }
org . junit . Assert . assertEquals ( 5 , res . size ( ) ) 