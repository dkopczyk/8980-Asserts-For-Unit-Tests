METHOD_0 ( ) { org . onosproject . net . IDENT_0 input = org . onosproject . net . IDENT_0 . METHOD_1 ( org . onosproject . net . IDENT_1 . IDENT_2 , 1 ) ; java . util . IDENT_3 < org . onosproject . net . IDENT_0 > expected = org . onosproject . net . IDENT_4 . METHOD_2 ( ) ; expected . addAll ( com . google . common . collect . ImmutableList . of ( org . onosproject . net . IDENT_0 . METHOD_3 ( ( 8 - 3 ) ) , org . onosproject . net . IDENT_0 . METHOD_3 ( ( 8 - 1 ) ) , org . onosproject . net . IDENT_0 . METHOD_3 ( ( 8 + 1 ) ) , org . onosproject . net . IDENT_0 . METHOD_3 ( ( 8 + 3 ) ) ) ) ; java . util . IDENT_3 < org . onosproject . net . IDENT_0 > IDENT_5 = org . onosproject . net . IDENT_0 . METHOD_4 ( input ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . onosproject . net . IDENT_0 ) { METHOD_5 ( ( ( IDENT_6 . METHOD_6 ( ) ) != ( IDENT_7 . IDENT_8 ) ) , IDENT_6 . METHOD_6 ( ) ) ; METHOD_5 ( ( ( IDENT_6 . METHOD_7 ( ) ) != ( IDENT_1 . IDENT_9 ) ) , IDENT_6 . METHOD_7 ( ) ) ; METHOD_5 ( org . onosproject . net . IDENT_0 . IDENT_10 . contains ( IDENT_6 . METHOD_8 ( ) ) , IDENT_6 . METHOD_8 ( ) ) ; int IDENT_11 = ( ( int ) ( ( 1 - ( IDENT_6 . METHOD_8 ( ) ) ) + ( ( ( IDENT_6 . METHOD_9 ( ) ) * ( IDENT_6 . METHOD_7 ( ) . METHOD_10 ( ) . METHOD_11 ( ) ) ) / ( IDENT_1 . IDENT_9 . METHOD_10 ( ) . METHOD_11 ( ) ) ) ) ) ; return java . util . stream . IDENT_12 . range ( 0 , IDENT_6 . METHOD_8 ( ) ) . METHOD_12 ( ( i ) -> new org . onosproject . net . METHOD_13 ( IDENT_7 . IDENT_8 , IDENT_1 . IDENT_9 , ( IDENT_11 + ( 2 * i ) ) , 1 ) ) . collect ( java . util . stream . IDENT_13 . METHOD_14 ( IDENT_4 :: METHOD_2 ) ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_5 ) 