METHOD_0 ( ) { java . util . IDENT_0 < org . onosproject . net . IDENT_1 > input = org . onosproject . net . IDENT_2 . METHOD_1 ( ) ; input . addAll ( com . google . common . collect . ImmutableList . of ( org . onosproject . net . IDENT_1 . METHOD_2 ( ( 8 - 3 ) ) , org . onosproject . net . IDENT_1 . METHOD_2 ( ( 8 - 1 ) ) , org . onosproject . net . IDENT_1 . METHOD_2 ( ( 8 + 1 ) ) , org . onosproject . net . IDENT_1 . METHOD_2 ( ( 8 + 3 ) ) ) ) ; org . onosproject . net . IDENT_1 expected = org . onosproject . net . IDENT_1 . METHOD_3 ( org . onosproject . net . IDENT_3 . IDENT_4 , 1 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . List , org . onosproject . net . IDENT_3 ) { int IDENT_5 = ( ( int ) ( ( IDENT_6 . METHOD_5 ( ) . METHOD_6 ( ) ) / ( IDENT_3 . IDENT_7 . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) ; METHOD_7 ( ( ( IDENT_8 . size ( ) ) == IDENT_5 ) , STRING_0 , IDENT_8 . size ( ) , IDENT_5 ) ; IDENT_8 . METHOD_8 ( ( x ) -> METHOD_7 ( ( ( x . METHOD_9 ( ) ) == IDENT_9 . IDENT_10 ) , x . METHOD_9 ( ) ) ) ; IDENT_8 . METHOD_8 ( ( x ) -> METHOD_7 ( ( ( x . METHOD_10 ( ) ) == IDENT_3 . IDENT_11 ) , x . METHOD_10 ( ) ) ) ; IDENT_8 . METHOD_8 ( ( x ) -> METHOD_7 ( ( ( x . METHOD_11 ( ) ) == 1 ) , x . METHOD_11 ( ) ) ) ; java . util . stream . IDENT_12 . range ( 1 , IDENT_8 . size ( ) ) . METHOD_8 ( ( i ) -> METHOD_7 ( ( ( IDENT_8 . get ( i ) . METHOD_12 ( ) ) == ( ( IDENT_8 . get ( ( i - 1 ) ) . METHOD_12 ( ) ) + 2 ) ) ) ) ; int METHOD_12 = ( ( IDENT_8 . stream ( ) . METHOD_13 ( org . onosproject . net . IDENT_1 :: METHOD_12 ) . METHOD_14 ( ) ) / ( IDENT_8 . size ( ) ) ) / ( ( int ) ( ( IDENT_6 . METHOD_5 ( ) . METHOD_6 ( ) ) / ( org . onosproject . net . IDENT_3 . IDENT_11 . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) ; return new org . onosproject . net . METHOD_15 ( IDENT_9 . IDENT_13 , IDENT_6 , METHOD_12 , IDENT_8 . size ( ) ) ; }
org . junit . Assert . assertEquals ( expected , org . onosproject . net . METHOD_15 . METHOD_4 ( com . google . common . collect . Lists . newArrayList ( input ) , org . onosproject . net . IDENT_3 . IDENT_4 ) ) 