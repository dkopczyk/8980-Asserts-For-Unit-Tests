METHOD_0 ( ) { org . onosproject . net . IDENT_0 . IDENT_1 IDENT_2 = null ; org . onosproject . net . IDENT_0 . IDENT_1 IDENT_3 = null ; org . onosproject . net . IDENT_0 . IDENT_4 < org . onosproject . net . domain . IDENT_5 > IDENT_6 ; org . onosproject . net . IDENT_0 . IDENT_7 context = new org . onosproject . net . IDENT_0 . METHOD_1 ( IDENT_3 , IDENT_2 ) ; IDENT_6 = new org . onosproject . net . IDENT_0 . METHOD_2 ( com . google . common . collect . ImmutableList . of ( ) , com . google . common . collect . ImmutableList . of ( ) , context ) ; IDENT_8 . apply ( IDENT_6 ) ; org . onosproject . net . IDENT_0 . METHOD_2 IDENT_9 = IDENT_10 . IDENT_9 ; "<AssertPlaceHolder>" ; } apply ( org . onosproject . net . IDENT_0 . METHOD_2 ) { java . util . Optional < org . onosproject . net . IDENT_0 . IDENT_1 > IDENT_3 = context . METHOD_3 ( ) ; java . util . Optional < org . onosproject . net . IDENT_0 . IDENT_1 > IDENT_2 = context . METHOD_4 ( ) ; if ( ( METHOD_4 . METHOD_5 ( ) ) && ( METHOD_3 . METHOD_5 ( ) ) ) { org . onosproject . net . IDENT_0 . IDENT_11 IDENT_12 = METHOD_4 . get ( ) . METHOD_6 ( ) ; if ( ( METHOD_7 ( IDENT_12 ) ) && ( org . onosproject . net . METHOD_6 . IDENT_13 . IDENT_14 . equals ( METHOD_3 . get ( ) . state ( ) ) ) ) { METHOD_8 ( context ) ; return ; } } if ( ( ! ( METHOD_4 . METHOD_5 ( ) ) ) && ( ! ( METHOD_3 . METHOD_5 ( ) ) ) ) { IDENT_10 . METHOD_9 ( context ) ; return ; } java . util . List < org . onosproject . net . METHOD_6 . IDENT_15 > IDENT_16 = context . METHOD_10 ( ) ; java . util . List < org . onosproject . net . METHOD_6 . IDENT_15 > IDENT_17 = context . METHOD_11 ( ) ; java . util . List < org . onosproject . net . flow . IDENT_18 > IDENT_19 ; java . util . List < org . onosproject . net . flow . IDENT_18 > IDENT_20 ; if ( METHOD_3 . METHOD_5 ( ) ) { METHOD_12 ( METHOD_3 . get ( ) , IDENT_16 , org . onosproject . net . METHOD_6 . impl . IDENT_8 . IDENT_21 ) ; IDENT_19 = IDENT_16 . stream ( ) . map ( IDENT_15 :: IDENT_22 ) . METHOD_13 ( Collection :: stream ) . collect ( java . util . stream . IDENT_23 . toList ( ) ) ; } else { IDENT_19 = java . util . Collections . emptyList ( ) ; } if ( METHOD_4 . METHOD_5 ( ) ) { METHOD_12 ( METHOD_4 . get ( ) , IDENT_17 , org . onosproject . net . METHOD_6 . impl . IDENT_8 . IDENT_24 ) ; IDENT_20 = IDENT_17 . stream ( ) . map ( IDENT_15 :: IDENT_22 ) . METHOD_13 ( Collection :: stream ) . collect ( java . util . stream . IDENT_23 . toList ( ) ) ; } else { IDENT_20 = java . util . Collections . emptyList ( ) ; } java . util . List < org . onosproject . net . flow . IDENT_18 > IDENT_25 ; java . util . List < org . onosproject . net . flow . IDENT_18 > IDENT_26 ; IDENT_25 = IDENT_20 . stream ( ) . filter ( ( IDENT_27 ) -> IDENT_19 . stream ( ) . METHOD_14 ( IDENT_27 :: equals ) ) . collect ( java . util . stream . IDENT_23 . toList ( ) ) ; IDENT_26 = IDENT_20 . stream ( ) . filter ( ( IDENT_27 ) -> IDENT_19 . stream ( ) . METHOD_14 ( IDENT_27 :: IDENT_28 ) ) . collect ( java . util . stream . IDENT_23 . toList ( ) ) ; IDENT_19 . METHOD_15 ( IDENT_25 ) ; IDENT_19 . METHOD_15 ( IDENT_26 ) ; IDENT_20 . METHOD_15 ( IDENT_25 ) ; IDENT_20 . METHOD_15 ( IDENT_26 ) ; IDENT_25 . METHOD_15 ( IDENT_26 ) ; if ( ( ( IDENT_20 . isEmpty ( ) ) && ( IDENT_19 . isEmpty ( ) ) ) && ( IDENT_25 . isEmpty ( ) ) ) { IDENT_10 . METHOD_9 ( context ) ; return ; } org . onosproject . net . flow . IDENT_29 . Builder builder = org . onosproject . net . flow . IDENT_29 . builder ( ) ; IDENT_20 . METHOD_16 ( builder :: add ) ; IDENT_25 . METHOD_16 ( builder :: IDENT_30 ) ; IDENT_19 . METHOD_16 ( builder :: remove ) ; org . onosproject . net . flow . IDENT_31 IDENT_32 = new org . onosproject . net . flow . METHOD_17 ( ) { @ org . onosproject . net . METHOD_6 . impl . IDENT_8 . Override public void METHOD_18 ( org . onosproject . net . flow . IDENT_29 IDENT_33 ) { IDENT_10 . METHOD_9 ( context ) ; } @ org . onosproject . net . METHOD_6 . impl . IDENT_8 . Override public void METHOD_19 ( org . onosproject . net . flow . IDENT_29 IDENT_33 ) { IDENT_10 . METHOD_20 ( context ) ; } } ; org . onosproject . net . flow . IDENT_29 operations = builder . build ( IDENT_32 ) ; log . debug ( STRING_0 , METHOD_3 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_21 ( STRING_1 ) , METHOD_4 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_21 ( STRING_1 ) , operations . METHOD_22 ( ) . stream ( ) . METHOD_23 ( Set :: size ) . METHOD_24 ( ) , operations . METHOD_22 ( ) ) ; IDENT_34 . apply ( operations ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_6 ) 