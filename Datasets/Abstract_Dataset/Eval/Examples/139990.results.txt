METHOD_0 ( ) { IDENT_0 = new org . onosproject . net . IDENT_1 . impl . IDENT_2 . METHOD_1 ( ) ; IDENT_2 . IDENT_0 = IDENT_0 ; errors = com . google . common . collect . ImmutableList . of ( org . onosproject . net . IDENT_1 . impl . IDENT_2 . IDENT_3 , org . onosproject . net . IDENT_1 . impl . IDENT_2 . IDENT_4 ) ; IDENT_2 . IDENT_5 = new org . onosproject . net . IDENT_1 . impl . IDENT_2 . IDENT_6 . METHOD_2 ( errors ) ; context = METHOD_3 ( ) ; IDENT_2 . apply ( context ) ; IDENT_7 = IDENT_0 . IDENT_7 ; "<AssertPlaceHolder>" ; } apply ( org . onosproject . net . IDENT_1 . IDENT_8 ) { java . util . Optional < org . onosproject . net . IDENT_1 . IDENT_9 > IDENT_10 = context . METHOD_4 ( ) ; java . util . Optional < org . onosproject . net . IDENT_1 . IDENT_9 > IDENT_11 = context . METHOD_5 ( ) ; if ( ( METHOD_5 . METHOD_6 ( ) ) && ( METHOD_4 . METHOD_6 ( ) ) ) { org . onosproject . net . IDENT_1 . IDENT_12 IDENT_13 = METHOD_5 . get ( ) . METHOD_7 ( ) ; if ( ( METHOD_8 ( IDENT_13 ) ) && ( org . onosproject . net . METHOD_7 . IDENT_14 . IDENT_15 . equals ( METHOD_4 . get ( ) . state ( ) ) ) ) { METHOD_9 ( context ) ; return ; } } if ( ( ! ( METHOD_5 . METHOD_6 ( ) ) ) && ( ! ( METHOD_4 . METHOD_6 ( ) ) ) ) { IDENT_0 . METHOD_10 ( context ) ; return ; } java . util . List < org . onosproject . net . METHOD_7 . IDENT_16 > IDENT_17 = context . METHOD_11 ( ) ; java . util . List < org . onosproject . net . METHOD_7 . IDENT_16 > IDENT_18 = context . METHOD_12 ( ) ; java . util . List < org . onosproject . net . flow . IDENT_19 > IDENT_20 ; java . util . List < org . onosproject . net . flow . IDENT_19 > IDENT_21 ; if ( METHOD_4 . METHOD_6 ( ) ) { METHOD_13 ( METHOD_4 . get ( ) , IDENT_17 , org . onosproject . net . METHOD_7 . impl . IDENT_2 . IDENT_22 ) ; IDENT_20 = IDENT_17 . stream ( ) . map ( IDENT_16 :: IDENT_23 ) . METHOD_14 ( Collection :: stream ) . collect ( java . util . stream . IDENT_24 . toList ( ) ) ; } else { IDENT_20 = java . util . Collections . emptyList ( ) ; } if ( METHOD_5 . METHOD_6 ( ) ) { METHOD_13 ( METHOD_5 . get ( ) , IDENT_18 , org . onosproject . net . METHOD_7 . impl . IDENT_2 . IDENT_25 ) ; IDENT_21 = IDENT_18 . stream ( ) . map ( IDENT_16 :: IDENT_23 ) . METHOD_14 ( Collection :: stream ) . collect ( java . util . stream . IDENT_24 . toList ( ) ) ; } else { IDENT_21 = java . util . Collections . emptyList ( ) ; } java . util . List < org . onosproject . net . flow . IDENT_19 > IDENT_26 ; java . util . List < org . onosproject . net . flow . IDENT_19 > IDENT_27 ; IDENT_26 = IDENT_21 . stream ( ) . filter ( ( IDENT_28 ) -> IDENT_20 . stream ( ) . METHOD_15 ( IDENT_28 :: equals ) ) . collect ( java . util . stream . IDENT_24 . toList ( ) ) ; IDENT_27 = IDENT_21 . stream ( ) . filter ( ( IDENT_28 ) -> IDENT_20 . stream ( ) . METHOD_15 ( IDENT_28 :: IDENT_29 ) ) . collect ( java . util . stream . IDENT_24 . toList ( ) ) ; IDENT_20 . METHOD_16 ( IDENT_26 ) ; IDENT_20 . METHOD_16 ( IDENT_27 ) ; IDENT_21 . METHOD_16 ( IDENT_26 ) ; IDENT_21 . METHOD_16 ( IDENT_27 ) ; IDENT_26 . METHOD_16 ( IDENT_27 ) ; if ( ( ( IDENT_21 . isEmpty ( ) ) && ( IDENT_20 . isEmpty ( ) ) ) && ( IDENT_26 . isEmpty ( ) ) ) { IDENT_0 . METHOD_10 ( context ) ; return ; } org . onosproject . net . flow . IDENT_30 . Builder builder = org . onosproject . net . flow . IDENT_30 . builder ( ) ; IDENT_21 . METHOD_17 ( builder :: add ) ; IDENT_26 . METHOD_17 ( builder :: IDENT_31 ) ; IDENT_20 . METHOD_17 ( builder :: remove ) ; org . onosproject . net . flow . IDENT_32 IDENT_33 = new org . onosproject . net . flow . METHOD_18 ( ) { @ org . onosproject . net . METHOD_7 . impl . IDENT_2 . Override public void METHOD_19 ( org . onosproject . net . flow . IDENT_30 IDENT_34 ) { IDENT_0 . METHOD_10 ( context ) ; } @ org . onosproject . net . METHOD_7 . impl . IDENT_2 . Override public void METHOD_20 ( org . onosproject . net . flow . IDENT_30 IDENT_34 ) { IDENT_0 . METHOD_21 ( context ) ; } } ; org . onosproject . net . flow . IDENT_30 operations = builder . build ( IDENT_33 ) ; log . debug ( STRING_0 , METHOD_4 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_22 ( STRING_1 ) , METHOD_5 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_22 ( STRING_1 ) , operations . METHOD_23 ( ) . stream ( ) . METHOD_24 ( Set :: size ) . METHOD_25 ( ) , operations . METHOD_23 ( ) ) ; IDENT_35 . apply ( operations ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , context ) 