METHOD_0 ( ) { replay ( ) ; org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_3 IDENT_4 = org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . METHOD_1 ( ( ( IDENT_2 . IDENT_5 ) - 1 ) , null , null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( long , java . lang . Long , java . lang . Long ) { long IDENT_6 = java . lang . Math . max ( org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_5 , IDENT_7 ) ; if ( IDENT_6 != IDENT_7 ) { org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . LOG . warn ( STRING_0 , IDENT_7 , IDENT_6 ) ; } long IDENT_8 = 0 ; if ( ( ( IDENT_9 != null ) && ( IDENT_9 < IDENT_6 ) ) && ( ( IDENT_6 OP_0 IDENT_9 ) == 0 ) ) { IDENT_8 = IDENT_9 ; } else { if ( ( IDENT_6 OP_0 ( org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_10 ) ) != 0 ) { IDENT_6 += IDENT_6 OP_0 ( org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_10 ) ; } IDENT_8 = IDENT_6 / ( org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_10 ) ; } long IDENT_11 = ( IDENT_12 != null ) ? IDENT_12 : org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . IDENT_13 ; if ( IDENT_8 < IDENT_11 ) { if ( ( IDENT_11 OP_0 IDENT_8 ) != 0 ) { IDENT_11 += IDENT_8 - ( IDENT_11 OP_0 IDENT_8 ) ; } else { } } else { IDENT_11 = IDENT_8 + 1 ; IDENT_11 += IDENT_11 OP_0 IDENT_8 ; } return new org . opennms . IDENT_0 . IDENT_1 . impl . IDENT_2 . METHOD_2 ( IDENT_6 , IDENT_8 , IDENT_11 ) ; }
org . junit . Assert . assertEquals ( IDENT_2 . IDENT_5 , IDENT_4 . IDENT_7 ) 