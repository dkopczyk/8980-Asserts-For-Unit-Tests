METHOD_0 ( ) { org . opennms . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 monitor = new org . opennms . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) { @ org . opennms . IDENT_0 . IDENT_1 . IDENT_2 . Override MOD_0 java . util . Calendar METHOD_2 ( ) { final java . util . Calendar IDENT_4 = java . util . IDENT_5 . getInstance ( ) ; IDENT_4 . METHOD_3 ( ( ( org . opennms . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 ) - ( INT_0 * 5 ) ) ) ; return IDENT_4 ; } } ; java . util . Map < java . lang . String , java . lang . Object > parameters = new java . util . concurrent . IDENT_8 < java . lang . String , java . lang . Object > ( ) ; parameters . put ( STRING_0 , STRING_1 ) ; parameters . put ( STRING_2 , STRING_3 ) ; parameters . put ( STRING_4 , STRING_5 ) ; parameters . put ( STRING_2 1 , STRING_6 ) ; parameters . put ( STRING_2 3 , STRING_2 0 ) ; parameters . put ( STRING_2 2 , STRING_7 ) ; org . opennms . IDENT_0 . IDENT_1 . IDENT_9 IDENT_10 = org . opennms . IDENT_0 . IDENT_1 . mock . IDENT_11 . METHOD_4 ( 3 , STRING_8 , org . opennms . IDENT_0 . utils . IDENT_12 . METHOD_5 ( STRING_8 , false ) , STRING_9 ) ; org . opennms . IDENT_0 . IDENT_1 . IDENT_13 status = monitor . METHOD_6 ( IDENT_10 , parameters ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { return ( this . IDENT_14 ) == ( org . opennms . IDENT_0 . IDENT_1 . IDENT_13 . IDENT_15 ) ; }
org . junit . Assert . assertTrue ( status . METHOD_7 ( ) ) 