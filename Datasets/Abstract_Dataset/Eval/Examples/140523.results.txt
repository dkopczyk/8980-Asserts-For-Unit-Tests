METHOD_0 ( ) { java . lang . String filter = ( ( ( ( org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ) + STRING_0 ) + STRING_1 ) + ( org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ) ) + STRING_2 ; java . lang . String expected = STRING_3 ; org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . LOG . debug ( ( ( ( STRING_4 + filter ) + STRING_5 ) + expected ) ) ; java . lang . String IDENT_8 = METHOD_1 ( filter ) ; "<AssertPlaceHolder>" ; org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . LOG . debug ( STRING_6 ) ; } METHOD_1 ( java . lang . String ) { java . util . List < org . opennms . IDENT_9 . model . IDENT_10 > IDENT_11 = org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . METHOD_2 ( ) ; java . lang . String IDENT_12 = org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . METHOD_3 ( IDENT_11 ) ; org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . LOG . debug ( ( STRING_7 + IDENT_12 ) ) ; final org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_13 config = new org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . METHOD_4 ( ) . METHOD_5 ( filter ) . build ( ) ; final java . util . Map < java . lang . String , org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_14 > IDENT_15 = new org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . METHOD_6 ( ) . parse ( config . METHOD_7 ( ) ) ; java . util . List < org . opennms . IDENT_9 . model . IDENT_10 > IDENT_16 = METHOD_8 ( IDENT_11 , IDENT_15 ) ; java . lang . String IDENT_8 = org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . METHOD_3 ( IDENT_16 ) ; org . opennms . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . filter . IDENT_7 . LOG . debug ( ( STRING_8 + IDENT_8 ) ) ; return IDENT_8 ; }
org . junit . Assert . assertEquals ( expected , IDENT_8 ) 