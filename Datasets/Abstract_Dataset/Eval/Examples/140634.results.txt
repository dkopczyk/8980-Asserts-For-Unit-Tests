METHOD_0 ( ) { if ( ( java . io . File . IDENT_0 ) != STRING_0 ) { org . opennms . test . mock . IDENT_1 . println ( STRING_1 ) ; org . opennms . test . mock . IDENT_1 . println ( STRING_2 ) ; return ; } java . lang . String input = STRING_3 ; java . lang . String [ ] expected = new java . lang . String [ ] { STRING_4 , STRING_5 0 , STRING_6 , STRING_5 , STRING_7 , STRING_8 } ; java . lang . String [ ] actual = org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( input , " " , false , "" ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String , boolean , java . lang . String ) { java . util . List < java . lang . String > IDENT_6 = new java . util . IDENT_7 < java . lang . String > ( ) ; java . lang . StringBuffer IDENT_8 = new java . lang . StringBuffer ( ) ; boolean IDENT_9 = false ; boolean IDENT_10 = false ; boolean IDENT_11 = java . lang . Boolean . METHOD_2 ( STRING_9 ) ; if ( ! ( org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . METHOD_3 ( ) ) ) IDENT_11 = false ; if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_10 2 , line , IDENT_12 ) ; for ( int i = 0 ; i < ( line . length ( ) ) ; i ++ ) { char ch = line . charAt ( i ) ; if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_11 , ch ) ; if ( IDENT_10 ) { if ( ch == STRING_12 ) { IDENT_8 . append ( org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_4 ( ch , STRING_13 , IDENT_8 ) ) ; } else if ( ch == STRING_14 ) { IDENT_8 . append ( org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_4 ( ch , STRING_15 , IDENT_8 ) ) ; } else if ( ch == STRING_16 ) { IDENT_8 . append ( org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_4 ( ch , STRING_17 , IDENT_8 ) ) ; } else { if ( ( tokens . indexOf ( ch ) ) >= 0 ) { IDENT_8 . append ( STRING_18 ) . append ( ch ) ; } else if ( IDENT_8 . toString ( ) . startsWith ( STRING_19 ) ) { IDENT_8 . append ( STRING_18 ) . append ( ch ) ; } else { IDENT_8 . append ( ch ) ; } } IDENT_10 = false ; if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_10 0 , IDENT_8 ) ; } else if ( ch == STRING_18 ) { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_20 , IDENT_8 ) ; if ( IDENT_9 && ( ! IDENT_13 ) ) IDENT_8 . append ( ch ) ; else IDENT_10 = true ; } else if ( ch == STRING_21 ) { if ( ! IDENT_13 ) IDENT_8 . append ( ch ) ; if ( IDENT_9 ) { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_22 , IDENT_8 ) ; IDENT_9 = false ; } else { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_23 , IDENT_8 ) ; IDENT_9 = true ; } } else if ( ( ! IDENT_9 ) && ( ( IDENT_12 . indexOf ( ch ) ) >= 0 ) ) { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_24 , ch , IDENT_8 ) ; IDENT_6 . add ( IDENT_8 . toString ( ) ) ; IDENT_8 = new java . lang . StringBuffer ( ) ; } else { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_25 , IDENT_8 ) ; IDENT_9 = true ; } } else if ( ( ! IDENT_9 ) && ( ( IDENT_12 . indexOf ( ch ) ) >= 0 ) ) { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_26 , IDENT_10 , IDENT_9 ) ; throw new java . lang . IllegalArgumentException ( ( ( ( STRING_27 + line ) + STRING_28 , IDENT_8 ) ; IDENT_9 = true ; } } else if ( ( ! IDENT_9 ) && ( ( IDENT_12 . indexOf ( ch ) ) >= 0 ) ) { if ( IDENT_11 ) org . opennms . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . LOG . debug ( STRING_29 , IDENT_8 ) ; IDENT_6 . add ( IDENT_8 . toString ( ) ) ; return ( ( java . lang . String [ ] ) ( IDENT_6 . toArray ( new java . lang . String [ IDENT_6 . size ( ) ] ) ) ) ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( expected ) , java . util . Arrays . asList ( actual ) ) 