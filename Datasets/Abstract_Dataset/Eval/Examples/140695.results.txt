METHOD_0 ( ) { java . util . Date IDENT_0 = new java . util . Date ( java . lang . System . currentTimeMillis ( ) ) ; java . util . Date IDENT_1 = new java . util . Date ( ( ( IDENT_0 . getTime ( ) ) - 100 ) ) ; org . opennms . web . rest . v1 . support . IDENT_2 IDENT_3 = new org . opennms . web . rest . v1 . support . METHOD_1 ( ( ( int ) ( ( IDENT_0 . getTime ( ) ) - ( IDENT_1 . getTime ( ) ) ) ) , IDENT_1 , IDENT_0 ) ; org . opennms . web . rest . v1 . IDENT_4 IDENT_5 = new org . opennms . web . rest . v1 . METHOD_2 ( IDENT_3 ) ; IDENT_5 . METHOD_3 ( METHOD_4 ( org . opennms . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_5 ( ) , new java . util . Date ( ( ( IDENT_0 . getTime ( ) ) - INT_0 ) ) ) ) ; IDENT_5 . METHOD_3 ( METHOD_4 ( org . opennms . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_6 ( ) , new java . util . Date ( ( ( IDENT_0 . getTime ( ) ) + 50 ) ) ) ) ; java . util . Collection < org . opennms . IDENT_6 . model . IDENT_9 > IDENT_10 = METHOD_7 ( ) ; double IDENT_11 = IDENT_5 . METHOD_8 ( IDENT_10 , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . util . Collection , int ) { double IDENT_12 = 0.0 ; for ( final org . opennms . IDENT_6 . model . IDENT_9 IDENT_13 : IDENT_10 ) { IDENT_12 += METHOD_9 ( IDENT_13 ) . METHOD_10 ( index ) ; } return ( IDENT_10 . size ( ) ) == 0 ? 1.0 : IDENT_12 / ( IDENT_10 . size ( ) ) ; }
org . junit . Assert . assertEquals ( 0.0 , IDENT_11 , 0.0 ) 