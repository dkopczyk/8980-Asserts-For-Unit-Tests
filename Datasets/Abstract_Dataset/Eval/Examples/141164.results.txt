METHOD_0 ( ) { java . util . List < java . lang . Integer > IDENT_0 = java . util . Arrays . asList ( INT_0 , INT_1 , INT_2 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 , INT_8 , INT_9 , INT_10 , INT_11 , 20 , INT_12 , INT_13 , INT_14 , 16 , 15 , INT_15 , INT_16 , 12 , INT_17 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 ) ; for ( int i = 0 ; i < ( IDENT_1 . IDENT_2 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } java . util . List < java . lang . String > IDENT_3 = java . util . Arrays . asList ( STRING_0 , "foo" , STRING_1 ) ; for ( java . lang . String IDENT_4 : IDENT_3 ) { try { org . IDENT_5 . core . IDENT_6 . util . IDENT_1 . METHOD_1 ( IDENT_4 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . lang . IllegalArgumentException IDENT_7 ) { } } } METHOD_1 ( java . lang . String ) { if ( ! ( org . IDENT_5 . core . IDENT_6 . util . IDENT_1 . IDENT_2 . contains ( IDENT_8 ) ) ) { throw new java . lang . IllegalArgumentException ( ( IDENT_8 + STRING_3 ) ) ; } java . lang . String [ ] IDENT_9 = IDENT_8 . split ( STRING_4 ) ; int IDENT_10 = java . lang . Integer . METHOD_2 ( IDENT_9 [ 0 ] ) ; int IDENT_11 = java . lang . Integer . METHOD_2 ( IDENT_9 [ 1 ] ) ; int IDENT_12 = java . lang . Integer . METHOD_2 ( IDENT_9 [ 2 ] ) ; int IDENT_13 = java . lang . Integer . METHOD_2 ( IDENT_9 [ 3 ] ) ; int IDENT_14 = ( ( ( java . lang . Integer . METHOD_3 ( IDENT_10 ) ) + ( java . lang . Integer . METHOD_3 ( IDENT_11 ) ) ) + ( java . lang . Integer . METHOD_3 ( IDENT_12 ) ) ) + ( java . lang . Integer . METHOD_3 ( IDENT_13 ) ) ; return IDENT_14 ; }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( org . IDENT_5 . core . IDENT_6 . util . IDENT_1 . METHOD_1 ( IDENT_1 . IDENT_2 . get ( i ) ) ) , IDENT_0 . get ( i ) ) 