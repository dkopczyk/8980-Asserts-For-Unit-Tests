METHOD_0 ( ) { java . util . Collection < com . IDENT_0 . IDENT_1 . model . template . IDENT_2 > parameters = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . model . template . IDENT_2 > ( ) ; parameters . add ( new com . IDENT_0 . internal . IDENT_1 . model . template . METHOD_1 ( param ( "foo" , STRING_0 ) ) ) ; parameters . add ( new com . IDENT_0 . internal . IDENT_1 . model . template . METHOD_1 ( param ( STRING_1 , STRING_2 ) ) ) ; template . METHOD_2 ( parameters ) ; java . util . List < java . lang . String > IDENT_3 = new java . util . ArrayList < java . lang . String > ( ) ; for ( com . IDENT_0 . IDENT_1 . model . template . IDENT_2 param : template . METHOD_3 ( ) . values ( ) ) { IDENT_3 . add ( java . lang . String . format ( STRING_3 , param . getName ( ) , param . getValue ( ) ) ) ; } java . lang . String [ ] exp = new java . lang . String [ ] { STRING_4 , STRING_5 , STRING_6 } ; java . lang . String [ ] IDENT_4 = IDENT_3 . toArray ( new java . lang . String [ ] { } ) ; java . util . Arrays . METHOD_4 ( exp ) ; java . util . Arrays . METHOD_4 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return METHOD_5 ( METHOD_6 ( ) , METHOD_7 ( ) , com . IDENT_0 . internal . IDENT_1 . model . IDENT_5 ) ; }
org . junit . Assert . assertArrayEquals ( exp , IDENT_4 ) 