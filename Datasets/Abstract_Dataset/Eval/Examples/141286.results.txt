METHOD_0 ( ) { java . util . List < java . lang . String > result = com . IDENT_0 . internal . util . IDENT_1 . split ( STRING_0 ) ; java . util . List < java . lang . String > expected = java . util . Arrays . asList ( STRING_1 ) ; "<AssertPlaceHolder>" ; } asList ( org . jboss . IDENT_2 . IDENT_3 ) { java . util . List < java . lang . Object > list = new java . util . ArrayList ( ) ; for ( org . jboss . IDENT_2 . IDENT_3 entry : node . asList ( ) ) { switch ( entry . getType ( ) ) { case IDENT_4 : list . add ( METHOD_1 ( entry ) ) ; break ; case IDENT_5 : list . add ( asList ( entry ) ) ; break ; case IDENT_6 : list . add ( entry . METHOD_2 ( ) ) ; break ; case IDENT_7 : list . add ( entry . METHOD_3 ( ) ) ; break ; case IDENT_8 : list . add ( entry . METHOD_4 ( ) ) ; break ; case IDENT_9 : list . add ( entry . METHOD_5 ( ) ) ; break ; case IDENT_10 : list . add ( entry . METHOD_5 ( ) ) ; break ; case IDENT_11 : list . add ( entry . METHOD_6 ( ) ) ; break ; default : list . add ( entry . METHOD_2 ( ) ) ; } } return list ; }
org . junit . Assert . assertThat ( result , org . hamcrest . CoreMatchers . is ( expected ) ) 