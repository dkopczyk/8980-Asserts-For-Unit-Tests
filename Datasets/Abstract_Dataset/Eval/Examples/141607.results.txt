METHOD_0 ( ) { final java . util . List < java . lang . String > values = new java . util . ArrayList ( ) ; values . add ( STRING_0 ) ; values . add ( STRING_1 ) ; for ( com . IDENT_0 . IDENT_1 . util . internal . IDENT_2 IDENT_3 : com . IDENT_0 . IDENT_1 . util . internal . IDENT_2 . values ( ) ) { javax . ws . rs . client . IDENT_4 target = mock ( javax . ws . rs . client . IDENT_4 . class ) ; com . IDENT_0 . IDENT_1 . http . internal . IDENT_5 IDENT_6 = new com . IDENT_0 . IDENT_1 . http . internal . METHOD_1 ( target ) ; com . IDENT_0 . IDENT_1 . http . internal . METHOD_1 result = com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_2 ( IDENT_6 , STRING_2 , values , IDENT_3 ) ; "<AssertPlaceHolder>" ; if ( IDENT_3 == ( IDENT_2 . IDENT_8 ) ) { verify ( target ) . METHOD_3 ( STRING_2 , STRING_3 ) ; } else if ( IDENT_3 == ( IDENT_2 . IDENT_9 ) ) { verify ( target ) . METHOD_3 ( STRING_2 , STRING_4 ) ; } else if ( IDENT_3 == ( IDENT_2 . IDENT_10 ) ) { verify ( target ) . METHOD_3 ( STRING_2 , STRING_5 ) ; } else if ( IDENT_3 == ( IDENT_2 . IDENT_11 ) ) { verify ( target ) . METHOD_3 ( STRING_2 , STRING_6 ) ; } else if ( IDENT_3 == ( IDENT_2 . IDENT_12 ) ) { verify ( target ) . METHOD_3 ( STRING_2 , STRING_0 , STRING_1 ) ; } else { org . junit . Assert . fail ( ( STRING_7 + ( IDENT_3 . toString ( ) ) ) ) ; } } } METHOD_2 ( com . IDENT_0 . IDENT_1 . http . internal . METHOD_1 , java . lang . String , java . util . List , com . IDENT_0 . IDENT_1 . util . internal . IDENT_2 ) { if ( org . apache . commons . lang3 . StringUtils . METHOD_4 ( IDENT_13 ) ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } if ( ( values != null ) && ( ! ( values . isEmpty ( ) ) ) ) { final java . util . List < java . lang . Object > IDENT_14 = new java . util . ArrayList ( ) ; for ( T v : values ) { if ( v == null ) { continue ; } if ( v instanceof java . lang . IDENT_15 ) { final java . lang . Object IDENT_16 = com . IDENT_0 . IDENT_1 . util . internal . IDENT_17 . METHOD_5 ( v , STRING_9 ) ; if ( IDENT_16 != null ) { IDENT_14 . add ( ( ( java . lang . String ) ( IDENT_16 ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_10 , v . getClass ( ) . METHOD_6 ( ) ) ) ; } } else { IDENT_14 . add ( v ) ; } } if ( IDENT_14 . isEmpty ( ) ) { return target ; } if ( IDENT_18 == ( IDENT_2 . IDENT_8 ) ) { target = target . METHOD_3 ( IDENT_13 , com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_7 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_14 , STRING_11 ) ) ) ; } else if ( IDENT_18 == ( IDENT_2 . IDENT_9 ) ) { target = target . METHOD_3 ( IDENT_13 , com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_7 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_14 , STRING_12 ) ) ) ; } else if ( IDENT_18 == ( IDENT_2 . IDENT_10 ) ) { target = target . METHOD_3 ( IDENT_13 , com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_7 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_14 , STRING_13 ) ) ) ; } else if ( IDENT_18 == ( IDENT_2 . IDENT_11 ) ) { target = target . METHOD_3 ( IDENT_13 , com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_7 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_14 , STRING_14 ) ) ) ; } else if ( IDENT_18 == ( IDENT_2 . IDENT_12 ) ) { final java . lang . Object [ ] IDENT_19 = new java . lang . Object [ IDENT_14 . size ( ) ] ; for ( int i = 0 ; i < ( IDENT_14 . size ( ) ) ; i ++ ) { IDENT_19 [ i ] = com . IDENT_0 . IDENT_1 . util . internal . IDENT_7 . METHOD_7 ( IDENT_14 . get ( i ) ) ; } target = target . METHOD_3 ( IDENT_13 , IDENT_19 ) ; } else { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_15 , IDENT_18 ) ) ; } } return target ; }
org . junit . Assert . assertNotNull ( result ) 