METHOD_0 ( ) { METHOD_1 ( ) ; java . io . File root = new java . io . File ( repository . METHOD_2 ( ) , STRING_0 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = ( ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_3 ( root ) ) ) ; java . lang . String [ ] IDENT_6 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 [ 1 ] . split ( STRING_1 ) ; "<AssertPlaceHolder>" ; int IDENT_9 = java . lang . Integer . METHOD_4 ( IDENT_6 [ 0 ] ) ; java . lang . String hash = IDENT_6 [ 1 ] ; java . lang . String IDENT_10 = ( ( IDENT_9 + 1 ) + STRING_1 ) + hash ; try { IDENT_4 . METHOD_5 ( root , IDENT_10 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 IDENT_12 ) { java . lang . String msg = IDENT_12 . getMessage ( ) ; if ( ( msg != null ) && ( msg . contains ( STRING_3 ) ) ) { } else { throw IDENT_12 ; } } } METHOD_3 ( java . io . File ) { return org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_3 ( file , false ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_6 . length ) 