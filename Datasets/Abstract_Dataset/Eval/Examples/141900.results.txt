METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . model . METHOD_1 ( STRING_0 , STRING_1 , false ) ; com . IDENT_0 . IDENT_1 . model . METHOD_1 IDENT_4 = new com . IDENT_0 . IDENT_1 . model . METHOD_1 ( STRING_2 , "" , true ) ; com . IDENT_0 . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = new com . IDENT_0 . IDENT_5 . IDENT_6 . METHOD_2 ( ) ; java . util . function . IDENT_9 < com . IDENT_0 . IDENT_1 . model . METHOD_1 > IDENT_10 = IDENT_8 . METHOD_3 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . IDENT_0 . IDENT_1 . model . METHOD_1 ) { final boolean IDENT_11 = METHOD_4 ( IDENT_12 ) ; final java . util . regex . IDENT_13 pattern = METHOD_5 ( IDENT_12 ) ; java . util . function . IDENT_9 < com . IDENT_0 . IDENT_1 . model . METHOD_1 > IDENT_14 = ( IDENT_15 ) -> { if ( ! IDENT_11 ) { if ( METHOD_4 ( IDENT_15 ) ) { return false ; } } else if ( ! ( IDENT_12 . getType ( ) . equals ( IDENT_15 . getType ( ) ) ) ) { return false ; } if ( pattern != null ) { if ( IDENT_15 . METHOD_6 ( ) ) { return IDENT_12 . getId ( ) . equals ( IDENT_15 . getId ( ) ) ; } return pattern . matcher ( IDENT_15 . getId ( ) ) . find ( ) ; } else { if ( IDENT_15 . METHOD_6 ( ) ) { return METHOD_5 ( IDENT_15 ) . matcher ( IDENT_12 . getId ( ) ) . find ( ) ; } return IDENT_12 . getId ( ) . equals ( IDENT_15 . getId ( ) ) ; } } ; return IDENT_14 ; }
org . junit . Assert . assertFalse ( IDENT_10 . test ( IDENT_3 ) ) 