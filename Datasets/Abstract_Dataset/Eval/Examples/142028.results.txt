METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . IDENT_4 . IDENT_5 str = new org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; str . METHOD_2 ( IDENT_6 . IDENT_7 ) ; str . METHOD_3 ( new org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . parameter . string . METHOD_4 ( IDENT_0 ) ) ; double res = str . METHOD_5 ( null , null , new org . IDENT_1 . IDENT_2 . map . METHOD_6 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . Map , org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . IDENT_4 . IDENT_8 , org . IDENT_1 . IDENT_2 . map . METHOD_6 ) { if ( ( IDENT_9 ) != null ) { try { double IDENT_10 = 0.0 ; java . lang . String IDENT_11 = this . IDENT_9 . getValue ( map ) ; if ( ! ( IDENT_11 . isEmpty ( ) ) ) { java . lang . String [ ] IDENT_12 = IDENT_11 . split ( " " ) ; int size = IDENT_12 . length ; for ( int i = 0 ; i < size ; i ++ ) { IDENT_10 += org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . common . IDENT_6 . METHOD_7 ( java . lang . Double . METHOD_8 ( IDENT_12 [ i ] ) , METHOD_9 ( ) , IDENT_13 . METHOD_10 ( ) , IDENT_13 . METHOD_11 ( ) , null ) ; } if ( ( size OP_0 2 ) == 1 ) { IDENT_10 OP_1 2 ; } return IDENT_10 ; } } catch ( org . IDENT_1 . IDENT_2 . renderer . IDENT_3 . parameter . IDENT_14 ex ) { return Double . IDENT_15 ; } } return Double . IDENT_15 ; }
org . junit . Assert . assertTrue ( ( res == 16 ) ) 