METHOD_0 ( ) { javax . servlet . http . IDENT_0 request = org . mockito . Mockito . mock ( javax . servlet . http . IDENT_0 . class ) ; java . lang . String IDENT_1 = STRING_0 ; org . mockito . Mockito . when ( request . METHOD_1 ( ) ) . thenReturn ( null ) ; org . mockito . Mockito . when ( request . METHOD_2 ( ) ) . thenReturn ( IDENT_1 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_2 = new java . util . HashMap ( ) ; IDENT_2 . put ( STRING_1 , ( ( IDENT_1 + STRING_2 ) + STRING_1 ) ) ; IDENT_2 . put ( STRING_3 , ( ( IDENT_1 + STRING_2 ) + STRING_4 ) ) ; IDENT_2 . put ( STRING_5 , ( ( IDENT_1 + STRING_2 ) + STRING_6 ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_2 . entrySet ( ) ) { org . mockito . Mockito . when ( request . METHOD_3 ( ) ) . thenReturn ( entry . getKey ( ) ) ; java . lang . String uri = org . apache . hadoop . yarn . IDENT_3 . util . IDENT_4 . METHOD_4 ( request ) ; "<AssertPlaceHolder>" ; } } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( entry . getValue ( ) , uri ) 