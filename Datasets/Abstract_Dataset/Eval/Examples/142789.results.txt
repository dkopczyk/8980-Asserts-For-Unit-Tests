METHOD_0 ( ) { com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_4 . IDENT_5 ) ; final long IDENT_6 = com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . METHOD_2 ( com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_7 ) ; "<AssertPlaceHolder>" ; final com . orientechnologies . orient . core . storage . cache . IDENT_8 IDENT_9 = com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . load ( IDENT_6 , 0 , 1 , new com . orientechnologies . common . types . METHOD_3 ( ) , false ) [ 0 ] ; IDENT_9 . METHOD_4 ( ) ; final java . nio . ByteBuffer buffer = IDENT_9 . METHOD_5 ( ) ; buffer . position ( com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_10 ) ; buffer . put ( new byte [ buffer . METHOD_6 ( ) ] ) ; IDENT_9 . METHOD_7 ( ) ; com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . store ( IDENT_6 , 0 , IDENT_9 ) ; IDENT_9 . METHOD_8 ( ) ; com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . METHOD_9 ( ) ; final java . nio . file . Path path = com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_11 . resolve ( com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . METHOD_10 ( IDENT_6 ) ) ; final com . orientechnologies . orient . core . storage . fs . IDENT_12 file = new com . orientechnologies . orient . core . storage . fs . METHOD_11 ( path ) ; file . METHOD_12 ( ) ; file . METHOD_13 ( com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_10 , ( ( byte ) ( 1 ) ) ) ; file . close ( ) ; com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . load ( IDENT_6 , 0 , 1 , new com . orientechnologies . common . types . METHOD_3 ( ) , false ) [ 0 ] . METHOD_8 ( ) ; } METHOD_14 ( long ) { final int IDENT_13 = METHOD_15 ( IDENT_6 ) ; IDENT_14 . METHOD_16 ( ) ; try { final com . orientechnologies . common . collection . IDENT_15 . IDENT_16 < java . lang . Long , com . orientechnologies . orient . core . storage . fs . METHOD_11 > entry = IDENT_17 . METHOD_17 ( IDENT_6 ) ; try { final com . orientechnologies . orient . core . storage . fs . METHOD_11 IDENT_18 = entry . get ( ) ; long IDENT_19 = ( IDENT_18 . METHOD_18 ( ) ) / ( IDENT_20 ) ; while ( true ) { final java . util . concurrent . IDENT_21 . IDENT_22 IDENT_23 = IDENT_24 . METHOD_4 ( new com . orientechnologies . orient . core . storage . cache . IDENT_1 . IDENT_25 . METHOD_19 ( IDENT_13 , IDENT_19 ) ) ; try { if ( ( IDENT_18 . METHOD_18 ( ) ) == ( IDENT_19 * ( IDENT_20 ) ) ) { final long IDENT_26 = IDENT_18 . METHOD_20 ( IDENT_20 ) ; assert ( IDENT_19 * ( IDENT_20 ) ) == IDENT_26 ; METHOD_21 ( ) ; return ( ( int ) ( IDENT_19 ) ) ; } else { IDENT_19 = ( IDENT_18 . METHOD_18 ( ) ) / ( IDENT_20 ) ; } } finally { IDENT_23 . METHOD_22 ( ) ; } } } finally { IDENT_17 . METHOD_23 ( entry ) ; } } catch ( final java . lang . IDENT_27 e ) { throw com . orientechnologies . common . exception . IDENT_28 . METHOD_24 ( new com . orientechnologies . orient . core . exception . METHOD_25 ( STRING_0 ) , e ) ; } finally { IDENT_14 . METHOD_26 ( ) ; } }
org . junit . Assert . assertEquals ( 0 , com . orientechnologies . orient . core . storage . index . IDENT_0 . IDENT_1 . cache . IDENT_2 . IDENT_3 . METHOD_14 ( IDENT_6 ) ) 