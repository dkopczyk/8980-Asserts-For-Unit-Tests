METHOD_0 ( ) { java . io . File IDENT_0 = null ; java . io . File IDENT_1 = null ; java . lang . String IDENT_2 = ( org . apache . hadoop . util . IDENT_3 . IDENT_4 ) ? STRING_0 3 : STRING_1 ; java . io . File IDENT_5 = null ; try { IDENT_0 = org . apache . hadoop . util . IDENT_3 . METHOD_1 ( IDENT_6 , STRING_2 ) ; IDENT_1 = org . apache . hadoop . util . IDENT_3 . METHOD_1 ( IDENT_6 , STRING_3 ) ; java . lang . String IDENT_7 = ( org . apache . hadoop . util . IDENT_3 . IDENT_4 ) ? STRING_4 : STRING_5 ; java . io . IDENT_8 writer = new java . io . METHOD_2 ( new java . io . METHOD_3 ( IDENT_0 ) ) ; org . apache . hadoop . fs . IDENT_9 . METHOD_4 ( IDENT_0 , true ) ; writer . println ( IDENT_7 ) ; writer . close ( ) ; java . util . Map < org . apache . hadoop . fs . Path , java . util . List < java . lang . String > > resources = new java . util . HashMap < org . apache . hadoop . fs . Path , java . util . List < java . lang . String > > ( ) ; org . apache . hadoop . fs . Path path = new org . apache . hadoop . fs . Path ( IDENT_0 . getAbsolutePath ( ) ) ; resources . put ( path , java . util . Arrays . asList ( IDENT_2 ) ) ; java . io . METHOD_3 IDENT_10 = new java . io . METHOD_3 ( IDENT_1 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_11 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; java . util . List < java . lang . String > commands = new java . util . ArrayList < java . lang . String > ( ) ; if ( org . apache . hadoop . util . IDENT_3 . IDENT_4 ) { commands . add ( STRING_6 ) ; commands . add ( STRING_7 ) ; commands . add ( ( ( STRING_8 + IDENT_2 ) + STRING_8 ) ) ; } else { commands . add ( ( ( STRING_9 + IDENT_2 ) + STRING_10 ) ) ; } org . apache . hadoop . yarn . server . IDENT_12 . IDENT_13 IDENT_14 = new org . apache . hadoop . yarn . server . IDENT_12 . METHOD_5 ( ) ; IDENT_14 . METHOD_6 ( new org . apache . hadoop . yarn . conf . METHOD_7 ( ) ) ; java . util . IDENT_15 < java . lang . String > IDENT_16 = new java . util . METHOD_8 ( ) ; IDENT_14 . METHOD_9 ( IDENT_10 , IDENT_11 , resources , commands , new org . apache . hadoop . fs . Path ( IDENT_17 . getAbsolutePath ( ) ) , STRING_0 , IDENT_1 . getName ( ) , IDENT_16 ) ; IDENT_10 . METHOD_10 ( ) ; IDENT_10 . close ( ) ; org . apache . hadoop . fs . IDENT_9 . METHOD_4 ( IDENT_1 , true ) ; org . apache . hadoop . util . IDENT_3 . IDENT_18 IDENT_19 = new org . apache . hadoop . util . IDENT_3 . METHOD_11 ( new java . lang . String [ ] { IDENT_1 . getAbsolutePath ( ) } , IDENT_6 ) ; IDENT_19 . execute ( ) ; "<AssertPlaceHolder>" ; java . util . List < java . lang . String > output = java . nio . file . IDENT_20 . METHOD_12 ( java . nio . file . IDENT_21 . get ( IDENT_17 . getAbsolutePath ( ) , IDENT_22 . IDENT_23 ) , java . nio . IDENT_24 . IDENT_25 . METHOD_13 ( STRING_11 ) ) ; assert output . contains ( STRING_2 ) ; IDENT_5 = new java . io . File ( IDENT_6 , IDENT_2 ) ; } finally { if ( ( IDENT_0 != null ) && ( IDENT_0 . exists ( ) ) ) { IDENT_0 . delete ( ) ; } if ( ( IDENT_1 != null ) && ( IDENT_1 . exists ( ) ) ) { IDENT_1 . delete ( ) ; } if ( ( IDENT_5 != null ) && ( IDENT_5 . exists ( ) ) ) { IDENT_5 . delete ( ) ; } } } METHOD_14 ( ) { return code ; }
org . junit . Assert . assertEquals ( IDENT_19 . METHOD_14 ( ) , 0 ) 