METHOD_0 ( ) { final int IDENT_0 = INT_0 ; final int IDENT_1 = IDENT_0 * 2 ; final int IDENT_2 = IDENT_1 * 2 ; org . IDENT_3 . util . IDENT_4 . METHOD_1 ( IDENT_0 ) ; final int IDENT_5 = INT_1 ; for ( int i = 0 ; i < IDENT_5 ; i ++ ) { final double IDENT_6 = METHOD_2 ( ) ; final double IDENT_7 = METHOD_2 ( ) ; final double IDENT_8 = METHOD_3 ( ) ; final double IDENT_9 = METHOD_3 ( ) ; final org . IDENT_3 . util . IDENT_10 IDENT_11 = new org . IDENT_3 . util . METHOD_4 ( IDENT_6 , IDENT_8 , IDENT_7 , IDENT_9 ) ; final double IDENT_12 = org . IDENT_3 . util . IDENT_13 . IDENT_14 . METHOD_5 ( IDENT_11 , IDENT_1 , IDENT_2 ) ; if ( IDENT_12 == ( Double . IDENT_15 ) ) { "<AssertPlaceHolder>" ; continue ; } final double IDENT_16 = org . IDENT_3 . util . IDENT_4 . METHOD_6 ( IDENT_12 ) ; final long IDENT_17 = org . IDENT_3 . util . IDENT_13 . IDENT_14 . METHOD_7 ( IDENT_9 , IDENT_16 , true ) ; final long IDENT_18 = org . IDENT_3 . util . IDENT_13 . IDENT_14 . METHOD_8 ( IDENT_6 , IDENT_16 , true ) ; final long IDENT_19 = org . IDENT_3 . util . IDENT_13 . IDENT_14 . METHOD_7 ( IDENT_8 , IDENT_16 , true ) ; final long IDENT_20 = org . IDENT_3 . util . IDENT_13 . IDENT_14 . METHOD_8 ( IDENT_7 , IDENT_16 , true ) ; long IDENT_21 = IDENT_19 - IDENT_17 ; if ( IDENT_8 < IDENT_9 ) { IDENT_21 += IDENT_16 ; } final long IDENT_22 = IDENT_20 - IDENT_18 ; METHOD_9 ( IDENT_21 , IDENT_22 , IDENT_1 , IDENT_2 ) ; } } METHOD_3 ( ) { return org . IDENT_3 . IDENT_23 . IDENT_24 . IDENT_14 . METHOD_3 ( org . IDENT_3 . IDENT_23 . IDENT_24 . random . METHOD_10 ( ) ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_6 <= IDENT_7 ) || ( IDENT_8 == IDENT_9 ) ) ) 