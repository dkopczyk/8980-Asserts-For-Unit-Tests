METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_0 . add ( "a" ) ; IDENT_0 . add ( "b" ) ; java . util . List < java . lang . String > IDENT_1 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_1 . add ( STRING_0 ) ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_2 . add ( STRING_1 ) ; IDENT_2 . add ( STRING_2 ) ; java . util . List < java . util . List < java . lang . String > > l = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; l . add ( IDENT_0 ) ; l . add ( IDENT_1 ) ; l . add ( IDENT_2 ) ; java . util . List < java . util . ArrayList < java . lang . String > > IDENT_3 = eu . IDENT_4 . util . IDENT_5 . METHOD_1 ( l ) ; java . util . List < java . util . List < java . lang . String > > IDENT_6 = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; java . util . List < java . lang . String > IDENT_7 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . add ( "a" ) ; IDENT_7 . add ( STRING_0 ) ; IDENT_7 . add ( STRING_1 ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_7 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . add ( "a" ) ; IDENT_7 . add ( STRING_0 ) ; IDENT_7 . add ( STRING_2 ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_7 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . add ( "b" ) ; IDENT_7 . add ( STRING_0 ) ; IDENT_7 . add ( STRING_1 ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_7 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . add ( "b" ) ; IDENT_7 . add ( STRING_0 ) ; IDENT_7 . add ( STRING_2 ) ; IDENT_6 . add ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List ) { final java . math . BigInteger IDENT_8 = java . math . BigInteger . valueOf ( INT_0 ) ; java . math . BigInteger IDENT_9 = java . math . BigInteger . IDENT_10 ; for ( java . util . List < T > set : IDENT_11 ) { IDENT_9 = IDENT_9 . METHOD_2 ( java . math . BigInteger . valueOf ( set . size ( ) ) ) ; } if ( ( IDENT_9 . compareTo ( IDENT_8 ) ) == 1 ) { throw new java . lang . Exception ( ( ( ( ( ( STRING_3 + IDENT_8 ) + STRING_4 ) + STRING_5 ) + IDENT_9 ) + STRING_6 ) ) ; } java . util . List < java . util . ArrayList < T > > METHOD_1 = new java . util . ArrayList < java . util . ArrayList < T > > ( IDENT_9 . METHOD_3 ( ) ) ; for ( int i = 0 ; i < ( IDENT_9 . METHOD_3 ( ) ) ; i ++ ) { METHOD_1 . add ( new java . util . ArrayList < T > ( IDENT_11 . size ( ) ) ) ; } if ( IDENT_9 . equals ( BigInteger . IDENT_12 ) ) { return METHOD_1 ; } int IDENT_13 = IDENT_9 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( IDENT_11 . size ( ) ) ; i ++ ) { java . util . List < T > set = IDENT_11 . get ( i ) ; IDENT_13 OP_0 set . size ( ) ; java . util . Iterator < T > it = set . iterator ( ) ; T e = null ; for ( int j = 0 ; j < ( IDENT_9 . METHOD_3 ( ) ) ; j ++ ) { if ( ( j OP_1 IDENT_13 ) == 0 ) { if ( it . hasNext ( ) ) { e = it . next ( ) ; } else { it = set . iterator ( ) ; e = it . next ( ) ; } } METHOD_1 . get ( j ) . add ( e ) ; } } return METHOD_1 ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_3 ) 