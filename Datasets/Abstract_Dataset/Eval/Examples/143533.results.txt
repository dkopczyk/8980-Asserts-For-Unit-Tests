METHOD_0 ( ) { eu . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new eu . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_3 . METHOD_1 ( eu . IDENT_0 . util . IDENT_6 . METHOD_2 ( ) ) ; eu . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_3 . IDENT_7 IDENT_8 = new eu . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_5 ) ; java . util . Map < java . net . URI , eu . IDENT_0 . xml . IDENT_9 > keys = new java . util . HashMap < java . net . URI , eu . IDENT_0 . xml . IDENT_9 > ( ) ; for ( int i = 0 ; i != 10 ; ++ i ) { eu . IDENT_0 . xml . IDENT_9 IDENT_10 = new eu . IDENT_0 . xml . METHOD_4 ( ) ; eu . IDENT_0 . xml . IDENT_11 IDENT_12 = new eu . IDENT_0 . xml . METHOD_5 ( ) ; IDENT_12 . METHOD_6 ( ) . add ( STRING_0 ) ; IDENT_10 . METHOD_7 ( IDENT_12 ) ; keys . put ( java . net . URI . create ( java . util . UUID . METHOD_8 ( ) . toString ( ) ) , IDENT_10 ) ; } for ( Map . Entry < java . net . URI , eu . IDENT_0 . xml . METHOD_4 > k : keys . entrySet ( ) ) { IDENT_8 . METHOD_9 ( k . getKey ( ) , k . getValue ( ) ) ; } java . lang . Object [ ] IDENT_13 = IDENT_8 . METHOD_10 ( ) . toArray ( ) ; java . lang . Object [ ] IDENT_14 = keys . METHOD_11 ( ) . toArray ( ) ; java . util . Arrays . METHOD_12 ( IDENT_13 ) ; java . util . Arrays . METHOD_12 ( IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ) { return IDENT_15 . METHOD_13 ( IDENT_16 . IDENT_17 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_13 , IDENT_14 ) 