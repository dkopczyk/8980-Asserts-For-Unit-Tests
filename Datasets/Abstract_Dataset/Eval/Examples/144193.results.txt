METHOD_0 ( ) { java . util . ArrayList < java . lang . String > IDENT_0 = new java . util . ArrayList ( java . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ) ; java . util . ArrayList < java . lang . String > IDENT_1 = new java . util . ArrayList ( java . util . Arrays . asList ( STRING_3 , STRING_4 , STRING_0 , STRING_2 , STRING_1 ) ) ; IDENT_2 . IDENT_3 . IDENT_4 . example . IDENT_5 . IDENT_6 < java . lang . String > IDENT_7 = new IDENT_2 . IDENT_3 . IDENT_4 . example . IDENT_5 . IDENT_8 . IDENT_9 . METHOD_1 ( IDENT_0 ) ; IDENT_2 . IDENT_3 . IDENT_4 . example . IDENT_5 . IDENT_10 < java . lang . String > IDENT_11 = new IDENT_2 . IDENT_3 . IDENT_4 . example . IDENT_5 . IDENT_8 . IDENT_9 . METHOD_2 ( ) ; IDENT_11 . METHOD_3 ( String :: compareTo ) ; IDENT_11 . METHOD_4 ( new IDENT_2 . IDENT_3 . IDENT_4 . example . IDENT_5 . IDENT_8 . IDENT_9 . METHOD_5 ( IDENT_0 ) ) ; IDENT_11 . METHOD_6 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String [ ] ) { int n = IDENT_7 . length ; while ( n > 1 ) { for ( int j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( ( IDENT_7 [ j ] . compareTo ( IDENT_7 [ ( j + 1 ) ] ) ) > 0 ) { final java . lang . String IDENT_12 = IDENT_7 [ ( j + 1 ) ] ; IDENT_7 [ ( j + 1 ) ] = IDENT_7 [ j ] ; IDENT_7 [ j ] = IDENT_12 ; } } n OP_0 ; } }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_0 ) 