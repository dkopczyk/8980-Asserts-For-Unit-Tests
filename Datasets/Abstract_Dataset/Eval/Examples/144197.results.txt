METHOD_0 ( ) { final java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 } ; final java . lang . String [ ] expected = new java . lang . String [ ] { STRING_0 , STRING_1 } ; IDENT_1 . IDENT_2 . IDENT_3 . example . IDENT_4 . IDENT_5 < java . lang . String > IDENT_6 = new IDENT_1 . IDENT_2 . IDENT_3 . example . IDENT_4 . IDENT_7 . METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( String :: compareTo ) ; IDENT_6 . METHOD_3 ( new IDENT_1 . IDENT_2 . IDENT_3 . example . IDENT_4 . support . IDENT_8 < java . lang . String > ( IDENT_0 ) ) ; IDENT_6 . METHOD_4 ( new IDENT_1 . IDENT_2 . IDENT_3 . example . IDENT_4 . support . METHOD_5 ( IDENT_0 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String [ ] ) { int n = IDENT_9 . length ; while ( n > 1 ) { for ( int j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( ( IDENT_9 [ j ] . compareTo ( IDENT_9 [ ( j + 1 ) ] ) ) > 0 ) { final java . lang . String IDENT_10 = IDENT_9 [ ( j + 1 ) ] ; IDENT_9 [ ( j + 1 ) ] = IDENT_9 [ j ] ; IDENT_9 [ j ] = IDENT_10 ; } } n OP_0 ; } }
org . junit . Assert . assertArrayEquals ( expected , IDENT_0 ) 