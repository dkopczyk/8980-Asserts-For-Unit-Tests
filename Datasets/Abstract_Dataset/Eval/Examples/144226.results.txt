METHOD_0 ( ) { IDENT_0 . data . IDENT_1 x = IDENT_2 . METHOD_1 ( 0 ) . METHOD_2 ( ) . METHOD_3 ( STRING_0 ) ; IDENT_0 . data . IDENT_1 y = IDENT_2 . METHOD_1 ( 1 ) . METHOD_2 ( ) . METHOD_3 ( STRING_1 ) ; IDENT_0 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_4 = METHOD_4 ( x , y , METHOD_5 ( 2 ) , METHOD_6 ( 20 ) ) . METHOD_7 ( x , y , METHOD_8 ( FLOAT_0 ) ) ; if ( IDENT_0 . IDENT_3 . IDENT_6 . IDENT_7 ) IDENT_0 . IDENT_8 . IDENT_9 . METHOD_9 ( IDENT_4 ) ; if ( IDENT_0 . IDENT_3 . IDENT_6 . IDENT_10 ) IDENT_0 . IDENT_3 . base . IDENT_11 . METHOD_10 ( IDENT_4 , INT_0 , INT_1 , ( ( IDENT_0 . IDENT_3 . IDENT_6 . root ) + STRING_2 ) ) ; java . awt . image . IDENT_12 IDENT_13 = IDENT_0 . IDENT_3 . base . IDENT_11 . METHOD_11 ( IDENT_4 , INT_0 , INT_1 ) ; java . awt . image . IDENT_12 IDENT_14 = javax . IDENT_15 . IDENT_16 . read ( this . getClass ( ) . getResourceAsStream ( STRING_3 ) ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( java . awt . image . IDENT_12 , java . awt . image . IDENT_12 ) { if ( ( ( IDENT_17 . METHOD_13 ( ) ) == ( IDENT_18 . METHOD_13 ( ) ) ) && ( ( IDENT_17 . METHOD_14 ( ) ) == ( IDENT_18 . METHOD_14 ( ) ) ) ) { return true ; } return false ; }
org . junit . Assert . assertTrue ( METHOD_12 ( IDENT_13 , IDENT_14 ) ) 