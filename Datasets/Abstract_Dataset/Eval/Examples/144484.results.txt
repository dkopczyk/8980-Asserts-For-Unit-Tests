METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 r = METHOD_1 ( 2 , 1 , STRING_0 ) ; r . METHOD_2 ( INT_0 ) ; java . util . List < au . edu . IDENT_3 . IDENT_4 . IDENT_5 > e = au . edu . IDENT_3 . IDENT_4 . IDENT_5 . create ( METHOD_3 ( ) , 0 , r ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String ) { assert ( IDENT_6 . length ( ) ) == ( METHOD_4 ( ) . METHOD_5 ( ) ) ; long state = au . edu . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 . METHOD_6 ( METHOD_4 ( ) . METHOD_5 ( ) , au . edu . IDENT_3 . IDENT_4 . IDENT_9 . METHOD_7 ( IDENT_6 . substring ( 0 , METHOD_4 ( ) . METHOD_5 ( ) ) ) ) ; for ( au . edu . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_10 < au . edu . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_11 > IDENT_12 : METHOD_8 ( ) ) { for ( au . edu . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_11 n : au . edu . IDENT_3 . IDENT_4 . IDENT_13 . METHOD_9 ( IDENT_12 . METHOD_10 ( ) ) ) { if ( state == ( n . METHOD_11 ( ) ) ) { return IDENT_12 ; } } } return null ; }
org . junit . Assert . assertTrue ( e . get ( 0 ) . METHOD_0 ( ) ) 