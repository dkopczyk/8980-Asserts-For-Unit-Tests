METHOD_0 ( ) { au . edu . IDENT_0 . IDENT_1 . IDENT_2 builder = new au . edu . IDENT_0 . IDENT_1 . METHOD_1 ( METHOD_2 ( ) , ( ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 ) ( new au . edu . IDENT_0 . IDENT_1 . METHOD_3 ( METHOD_2 ( ) ) { { METHOD_4 ( new au . edu . IDENT_0 . IDENT_1 . METHOD_5 ( 0 , IDENT_4 , INT_0 , 12 , INT_0 , 1 , IDENT_5 , INT_1 , INT_1 , INT_1 ) , STRING_0 ) ; METHOD_6 ( 20 ) ; } } . METHOD_7 ( ) ) ) ) ; java . util . List < au . edu . IDENT_0 . IDENT_1 . IDENT_6 > IDENT_7 = new java . util . ArrayList < au . edu . IDENT_0 . IDENT_1 . IDENT_6 > ( ) ; IDENT_7 . add ( METHOD_8 ( METHOD_9 ( STRING_1 , METHOD_10 ( 0 , 12 , STRING_2 ) ) [ 0 ] , METHOD_9 ( STRING_3 , METHOD_11 ( INT_0 , METHOD_10 ( 1 , INT_1 , STRING_4 ) ) ) [ 0 ] ) ) ; for ( au . edu . IDENT_0 . IDENT_1 . IDENT_6 e : IDENT_7 ) { builder . METHOD_12 ( e ) ; } au . edu . IDENT_0 . IDENT_1 . IDENT_3 call = builder . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( ) { return ( ( au . edu . IDENT_0 . IDENT_1 . METHOD_5 ) ( super . METHOD_13 ( ) ) ) ; }
org . junit . Assert . assertEquals ( new au . edu . IDENT_0 . IDENT_1 . METHOD_5 ( 0 , IDENT_4 , 12 , 12 , 12 , 1 , IDENT_5 , INT_1 , INT_1 , INT_1 ) , call . METHOD_13 ( ) ) 