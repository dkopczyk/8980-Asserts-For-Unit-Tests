METHOD_0 ( ) { int k = 4 ; java . util . List < au . edu . IDENT_0 . IDENT_1 . IDENT_2 > input = new java . util . ArrayList < au . edu . IDENT_0 . IDENT_1 . IDENT_2 > ( ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_0 , METHOD_3 ( 0 , 1 , STRING_1 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_2 , METHOD_3 ( 0 , 1 , STRING_1 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; input . add ( METHOD_1 ( au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 , METHOD_2 ( STRING_3 , METHOD_3 ( 0 , 1 , STRING_4 ) ) ) ) ; java . util . List < au . edu . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_6 > result = METHOD_4 ( input , k , 200 , 200 , 1 ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_7 . size ( ) ; }
org . junit . Assert . assertEquals ( 6 , result . size ( ) ) 