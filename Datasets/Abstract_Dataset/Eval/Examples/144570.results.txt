METHOD_0 ( ) { int k = 4 ; int IDENT_0 = INT_0 ; java . util . List < au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 > input = new java . util . ArrayList < au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 > ( ) ; input . add ( METHOD_1 ( k , STRING_0 , 1 , 1 , false ) ) ; input . add ( METHOD_1 ( k , STRING_1 , 2 , 2 , false ) ) ; input . add ( METHOD_1 ( k , STRING_2 , 2 , 2 , false ) ) ; input . add ( METHOD_1 ( k , STRING_3 , 2 , 2 , false ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( 0 ) , input . get ( 1 ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( 0 ) , input . get ( 2 ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( 0 ) , input . get ( 3 ) ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { input . add ( METHOD_1 ( k , STRING_4 , ( 6 + ( 4 * i ) ) , ( 6 + ( 4 * i ) ) , false ) ) ; input . add ( METHOD_1 ( k , STRING_2 , ( 6 + ( 4 * i ) ) , ( 6 + ( 4 * i ) ) , false ) ) ; input . add ( METHOD_1 ( k , STRING_3 , ( 6 + ( 4 * i ) ) , ( 6 + ( 4 * i ) ) , false ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 2 + ( 3 * i ) ) ) , input . get ( ( 5 + ( 3 * i ) ) ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 2 + ( 3 * i ) ) ) , input . get ( ( 6 + ( 3 * i ) ) ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 3 + ( 3 * i ) ) ) , input . get ( ( 5 + ( 3 * i ) ) ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 3 + ( 3 * i ) ) ) , input . get ( ( 6 + ( 3 * i ) ) ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 1 + ( 3 * i ) ) ) , input . get ( ( 4 + ( 3 * i ) ) ) ) ; } input . add ( METHOD_1 ( k , STRING_3 , ( 6 + ( 4 * IDENT_0 ) ) , ( 6 + ( 4 * IDENT_0 ) ) , false ) ) ; au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( input . get ( ( 1 + ( 3 * IDENT_0 ) ) ) , input . get ( ( 4 + ( 3 * IDENT_0 ) ) ) ) ; java . util . List < au . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 > result = METHOD_3 ( k , INT_1 , INT_1 , input ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_6 . size ( ) ; }
org . junit . Assert . assertEquals ( ( 5 + ( 3 * IDENT_0 ) ) , result . size ( ) ) 