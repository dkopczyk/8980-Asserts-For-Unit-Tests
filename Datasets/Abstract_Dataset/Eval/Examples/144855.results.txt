METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_2 . class ) ; when ( IDENT_3 . METHOD_1 ( ) ) . thenReturn ( true ) ; when ( IDENT_3 . getName ( ) ) . thenReturn ( STRING_0 ) ; com . IDENT_0 . IDENT_1 . model . IDENT_4 IDENT_5 = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_4 . class ) ; com . IDENT_0 . IDENT_1 . model . IDENT_6 IDENT_7 = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_6 . class ) ; com . IDENT_0 . IDENT_1 . model . IDENT_8 IDENT_9 = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_8 . class ) ; when ( IDENT_9 . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) ; when ( IDENT_7 . METHOD_3 ( ) ) . thenReturn ( IDENT_9 ) ; when ( IDENT_7 . getName ( ) ) . thenReturn ( STRING_2 ) ; java . util . List < com . IDENT_0 . IDENT_1 . model . IDENT_10 > params = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . model . IDENT_10 > ( ) ; com . IDENT_0 . IDENT_1 . model . IDENT_10 x = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_10 . class ) ; when ( x . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) ; when ( x . getName ( ) ) . thenReturn ( STRING_3 ) ; params . add ( x ) ; com . IDENT_0 . IDENT_1 . model . IDENT_10 y = mock ( com . IDENT_0 . IDENT_1 . model . IDENT_10 . class ) ; when ( y . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) ; when ( y . getName ( ) ) . thenReturn ( STRING_4 ) ; params . add ( y ) ; when ( IDENT_7 . METHOD_4 ( ) ) . thenReturn ( params ) ; when ( IDENT_5 . METHOD_5 ( ) ) . thenReturn ( java . util . Collections . singletonList ( IDENT_7 ) ) ; when ( IDENT_3 . METHOD_6 ( ) ) . thenReturn ( IDENT_5 ) ; java . lang . String expected = STRING_5 + ( ( ( ( "\n" + STRING_6 ) + "\n" ) + STRING_7 ) + STRING_8 ) ; IDENT_11 . METHOD_7 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } toString ( ) { return STRING_9 + ( getValue ( ) . toString ( ) ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_11 . toString ( ) ) 