METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 IDENT_2 = IDENT_3 . METHOD_1 ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_2 . METHOD_2 ( ) ; METHOD_3 ( ) ; IDENT_2 . METHOD_4 ( ) ; IDENT_2 . end ( ) ; } final long start = java . lang . System . currentTimeMillis ( ) ; long IDENT_4 = 0 ; while ( ( METHOD_5 ( false ) ) > 0 ) { com . IDENT_0 . util . IDENT_5 . sleep ( 1000 ) ; IDENT_4 = ( java . lang . System . currentTimeMillis ( ) ) - start ; if ( IDENT_4 > INT_0 ) { break ; } } "<AssertPlaceHolder>" ; } sleep ( long ) { try { java . lang . Thread . sleep ( IDENT_6 ) ; } catch ( final java . lang . IDENT_7 IDENT_8 ) { throw new com . IDENT_0 . exception . METHOD_6 ( IDENT_8 ) ; } }
org . junit . Assert . assertTrue ( ( IDENT_4 < INT_0 ) ) 