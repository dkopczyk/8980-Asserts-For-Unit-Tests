METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 IDENT_2 = new com . IDENT_0 . METHOD_1 ( IDENT_3 ) ; final com . IDENT_0 . METHOD_1 IDENT_4 = new com . IDENT_0 . METHOD_1 ( IDENT_3 ) ; System . out . METHOD_2 ( STRING_0 ) ; for ( int IDENT_5 = 0 ; IDENT_5 < ( com . IDENT_0 . unit . IDENT_6 . IDENT_7 . length ) ; IDENT_5 ++ ) { for ( int IDENT_8 = 0 ; IDENT_8 < ( com . IDENT_0 . unit . IDENT_6 . IDENT_7 . length ) ; IDENT_8 ++ ) { for ( int s = 0 ; s < 4 ; s ++ ) { IDENT_9 = com . IDENT_0 . unit . IDENT_6 . IDENT_7 [ IDENT_5 ] ; IDENT_10 = com . IDENT_0 . unit . IDENT_6 . IDENT_7 [ IDENT_8 ] ; if ( ( s & 1 ) != 0 ) { IDENT_9 = - ( IDENT_9 ) ; } if ( ( s & 2 ) != 0 ) { IDENT_10 = - ( IDENT_10 ) ; } final java . math . BigInteger IDENT_11 = java . math . BigInteger . valueOf ( IDENT_9 ) ; final java . math . BigInteger IDENT_12 = java . math . BigInteger . valueOf ( IDENT_10 ) ; IDENT_2 . METHOD_3 ( ) ; IDENT_2 . append ( IDENT_11 ) ; IDENT_4 . METHOD_3 ( ) ; IDENT_4 . append ( IDENT_12 ) ; final int compare = IDENT_2 . compareTo ( IDENT_4 ) ; final boolean result = ( ( ( compare == 0 ) && ( ( IDENT_9 ) == ( IDENT_10 ) ) ) || ( ( compare > 0 ) && ( ( IDENT_9 ) > ( IDENT_10 ) ) ) ) || ( ( compare < 0 ) && ( ( IDENT_9 ) < ( IDENT_10 ) ) ) ; "<AssertPlaceHolder>" ; } } } System . out . println ( STRING_1 ) ; } compareTo ( java . lang . Object ) { int size ; byte [ ] bytes ; if ( obj instanceof com . IDENT_0 . METHOD_1 ) { final com . IDENT_0 . METHOD_1 key = ( ( com . IDENT_0 . METHOD_1 ) ( obj ) ) ; bytes = key . METHOD_4 ( ) ; size = key . METHOD_5 ( ) ; } else if ( obj instanceof com . IDENT_0 . IDENT_13 ) { final com . IDENT_0 . IDENT_13 IDENT_14 = ( ( com . IDENT_0 . IDENT_13 ) ( obj ) ) ; bytes = IDENT_14 . IDENT_15 ; size = bytes . length ; } else throw new java . lang . METHOD_6 ( ) ; final int length = java . lang . Math . min ( size , IDENT_15 . length ) ; for ( int i = 0 ; i < length ; i ++ ) { final int a = ( IDENT_15 [ i ] ) & 255 ; final int b = ( bytes [ i ] ) & 255 ; if ( a != b ) return a < b ? - 1 : 1 ; } if ( size != ( IDENT_15 . length ) ) return ( IDENT_15 . length ) < size ? - 1 : 1 ; return 0 ; }
org . junit . Assert . assertTrue ( result ) 