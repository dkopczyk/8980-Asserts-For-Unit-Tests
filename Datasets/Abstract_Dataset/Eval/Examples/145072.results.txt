METHOD_0 ( ) { System . out . METHOD_1 ( STRING_0 ) ; final com . IDENT_0 . IDENT_1 [ ] IDENT_2 = new com . IDENT_0 . IDENT_1 [ 1000 ] ; for ( int IDENT_3 = 0 ; IDENT_3 < 1000 ; IDENT_3 ++ ) { IDENT_2 [ IDENT_3 ] = IDENT_4 . METHOD_2 ( STRING_1 , ( STRING_2 + IDENT_3 ) , true ) ; } for ( int IDENT_3 = 0 ; IDENT_3 < 1000 ; IDENT_3 ++ ) { IDENT_2 [ IDENT_3 ] . METHOD_3 ( ) ; } final java . lang . String [ ] IDENT_5 = IDENT_2 [ 0 ] . METHOD_4 ( ) . METHOD_5 ( ) ; for ( int index = 0 ; index < ( IDENT_5 . length ) ; index ++ ) { "<AssertPlaceHolder>" ; } System . out . println ( STRING_3 ) ; } METHOD_5 ( ) { final java . util . List < java . lang . String > list = new java . util . ArrayList < java . lang . String > ( ) ; final com . IDENT_0 . IDENT_1 ex = METHOD_6 ( ) ; ex . METHOD_7 ( ) . append ( com . IDENT_0 . IDENT_6 . IDENT_7 ) . append ( com . IDENT_0 . IDENT_6 . IDENT_8 ) . append ( "" ) ; while ( ex . next ( ) ) { final java . lang . String IDENT_9 = ex . getKey ( ) . METHOD_8 ( ( - 1 ) ) . METHOD_9 ( ) ; list . add ( IDENT_9 ) ; } final java . lang . String [ ] IDENT_10 = list . toArray ( new java . lang . String [ list . size ( ) ] ) ; return IDENT_10 ; }
org . junit . Assert . assertTrue ( ( ! ( IDENT_5 [ index ] . startsWith ( STRING_2 ) ) ) ) 