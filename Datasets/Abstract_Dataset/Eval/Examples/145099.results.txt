METHOD_0 ( ) { int IDENT_0 = INT_0 ; float IDENT_1 = FLOAT_0 ; double IDENT_2 = FLOAT_1 ; java . lang . String expected = STRING_0 ; java . lang . String IDENT_3 = METHOD_1 ( STRING_1 ) . put ( STRING_2 , IDENT_0 ) . put ( STRING_3 , IDENT_1 ) . put ( STRING_4 , IDENT_2 ) . METHOD_2 ( ) ; METHOD_3 ( STRING_5 , IDENT_3 , expected ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String , java . lang . String , java . lang . String ) { System . out . println ( ( ( ( ( ( ( ( STRING_6 + IDENT_4 ) + STRING_7 ) + ( IDENT_5 . name ( ) ) ) + " " ) + ( IDENT_5 . METHOD_4 ( ) ) ) + ( IDENT_5 . METHOD_5 ( ) ) ) + STRING_8 ) ) ; java . lang . StringBuilder message = new java . lang . StringBuilder ( ) ; int IDENT_6 = ( IDENT_7 ) - ( IDENT_4 . length ( ) ) ; if ( IDENT_6 < 0 ) { IDENT_6 = 0 ; message . append ( STRING_9 ) . append ( IDENT_4 . substring ( 0 , ( ( IDENT_7 ) - 3 ) ) ) . append ( STRING_10 ) ; } else { message . append ( STRING_9 ) . append ( IDENT_4 ) ; } for ( int i = 0 ; i < IDENT_6 ; i ++ ) { message . append ( " " ) ; } message . append ( STRING_11 ) . append ( expected ) ; System . out . println ( message . toString ( ) ) ; METHOD_3 ( IDENT_4 , result ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , expected ) 