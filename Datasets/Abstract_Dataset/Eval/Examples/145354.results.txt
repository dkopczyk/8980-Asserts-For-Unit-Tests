METHOD_0 ( ) { java . lang . RuntimeException IDENT_0 = new java . lang . RuntimeException ( ) ; when ( future . get ( IDENT_1 , unit ) ) . METHOD_1 ( new java . util . concurrent . METHOD_2 ( IDENT_0 ) ) ; try { IDENT_2 . METHOD_3 ( IDENT_1 , unit , IDENT_3 ) ; } catch ( org . pentaho . IDENT_4 . api . mapreduce . IDENT_5 e ) { "<AssertPlaceHolder>" ; throw e ; } } METHOD_3 ( long , java . util . concurrent . TimeUnit , org . pentaho . IDENT_4 . api . mapreduce . IDENT_6 ) { try { future . get ( IDENT_1 , IDENT_7 ) ; org . pentaho . IDENT_4 . api . mapreduce . IDENT_5 IDENT_8 = IDENT_9 . get ( ) ; if ( IDENT_8 != null ) { throw IDENT_8 ; } return true ; } catch ( java . lang . IDENT_10 e ) { METHOD_4 ( ) ; return true ; } catch ( java . util . concurrent . METHOD_2 e ) { java . lang . Throwable IDENT_11 = e . METHOD_5 ( ) ; if ( IDENT_11 instanceof org . pentaho . IDENT_4 . api . mapreduce . IDENT_5 ) { throw ( ( org . pentaho . IDENT_4 . api . mapreduce . IDENT_5 ) ( IDENT_11 ) ) ; } else { throw new org . pentaho . IDENT_4 . api . mapreduce . METHOD_6 ( IDENT_11 ) ; } } catch ( java . util . concurrent . IDENT_12 e ) { return false ; } }
org . junit . Assert . assertEquals ( IDENT_0 , e . METHOD_5 ( ) ) 