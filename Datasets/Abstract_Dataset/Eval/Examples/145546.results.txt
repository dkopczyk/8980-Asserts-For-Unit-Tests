METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . IDENT_3 dto = new org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . METHOD_1 ( ) ; dto . METHOD_2 ( STRING_1 ) ; java . lang . String IDENT_4 = STRING_2 ; java . io . InputStream IDENT_5 = mock ( java . io . InputStream . class ) ; boolean IDENT_6 = false ; boolean IDENT_7 = false ; javax . ws . rs . core . Response IDENT_8 = mock ( javax . ws . rs . core . Response . class ) ; doReturn ( STRING_3 ) . when ( org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . IDENT_9 . IDENT_10 . service ) . METHOD_0 ( eq ( IDENT_0 ) , METHOD_3 ( ) , eq ( IDENT_6 ) , eq ( IDENT_7 ) , eq ( null ) ) ; doReturn ( IDENT_8 ) . when ( org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . IDENT_9 . IDENT_10 ) . METHOD_4 ( STRING_3 ) ; javax . ws . rs . core . Response response = org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . IDENT_9 . IDENT_10 . METHOD_0 ( IDENT_0 , IDENT_4 , IDENT_6 , IDENT_7 , null ) ; verify ( org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . IDENT_9 . IDENT_10 , times ( 1 ) ) . METHOD_0 ( IDENT_0 , IDENT_4 , IDENT_6 , IDENT_7 , null ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . lang . String , java . lang . String , boolean , boolean , org . pentaho . platform . api . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 ) { try { java . lang . String IDENT_15 = service . METHOD_0 ( IDENT_0 , new org . pentaho . platform . IDENT_1 . IDENT_2 . api . resources . METHOD_1 ( IDENT_4 ) , IDENT_6 , IDENT_7 , IDENT_16 ) ; return METHOD_4 ( IDENT_15 ) ; } catch ( org . pentaho . platform . api . engine . IDENT_17 e ) { return METHOD_5 ( ) ; } catch ( java . lang . IllegalArgumentException e ) { return METHOD_6 ( e . getMessage ( ) ) ; } catch ( org . pentaho . platform . IDENT_1 . IDENT_2 . api . IDENT_18 e ) { switch ( e . getType ( ) ) { case IDENT_19 : { return METHOD_7 ( e . getMessage ( ) ) ; } default : { return METHOD_6 ( e . getMessage ( ) ) ; } } } catch ( java . lang . Exception e ) { return METHOD_8 ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_8 , response ) 