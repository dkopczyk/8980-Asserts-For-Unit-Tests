METHOD_0 ( ) { final int IDENT_0 = 100 ; final int IDENT_1 = 5 ; final int IDENT_2 = 10 ; final org . pentaho . di . core . row . IDENT_3 IDENT_4 = new org . pentaho . di . core . row . METHOD_1 ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_4 . METHOD_2 ( new org . pentaho . di . core . row . value . METHOD_3 ( ( STRING_0 + i ) ) ) ; } final java . util . concurrent . atomic . IDENT_5 condition = new java . util . concurrent . atomic . METHOD_4 ( true ) ; java . util . List < org . pentaho . di . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_9 = new java . util . ArrayList < org . pentaho . di . IDENT_6 . IDENT_7 . IDENT_8 > ( IDENT_1 ) ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { IDENT_9 . add ( new org . pentaho . di . IDENT_6 . IDENT_7 . METHOD_5 ( condition , IDENT_4 , org . pentaho . di . IDENT_6 . IDENT_7 . IDENT_10 ) ) ; } java . util . List < org . pentaho . di . IDENT_6 . IDENT_7 . IDENT_11 > IDENT_12 = new java . util . ArrayList < org . pentaho . di . IDENT_6 . IDENT_7 . IDENT_11 > ( IDENT_2 ) ; for ( int i = 0 ; i < IDENT_2 ; i ++ ) { java . lang . String name = STRING_0 + ( new java . util . METHOD_6 ( ) . METHOD_7 ( IDENT_0 ) ) ; "<AssertPlaceHolder>" ; IDENT_12 . add ( new org . pentaho . di . IDENT_6 . IDENT_7 . METHOD_8 ( condition , IDENT_4 , name ) ) ; } org . pentaho . di . IDENT_6 . IDENT_13 . METHOD_9 ( IDENT_9 , IDENT_12 , condition ) ; } METHOD_10 ( java . lang . String ) { if ( IDENT_14 == null ) { return - 1 ; } IDENT_15 . METHOD_11 ( ) . METHOD_12 ( ) ; try { java . lang . Integer index = cache . METHOD_13 ( IDENT_14 , IDENT_16 ) ; for ( int i = 0 ; ( index == null ) && ( i < ( IDENT_16 . size ( ) ) ) ; i ++ ) { if ( IDENT_14 . equalsIgnoreCase ( IDENT_16 . get ( i ) . getName ( ) ) ) { index = i ; cache . METHOD_14 ( IDENT_14 , index ) ; IDENT_17 = null ; } } if ( index == null ) { return - 1 ; } return index ; } finally { METHOD_12 . METHOD_11 ( ) . METHOD_15 ( ) ; } }
org . junit . Assert . assertTrue ( ( ( IDENT_4 . METHOD_10 ( name ) ) >= 0 ) ) 