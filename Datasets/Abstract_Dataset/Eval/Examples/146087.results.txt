METHOD_0 ( ) { org . pentaho . di . core . IDENT_0 . IDENT_1 IDENT_2 = METHOD_1 ( IDENT_3 , null ) ; org . pentaho . di . core . IDENT_0 . IDENT_4 IDENT_5 = IDENT_2 . METHOD_2 ( 0 ) ; org . pentaho . di . core . IDENT_0 . IDENT_6 [ ] row = IDENT_5 . METHOD_3 ( 0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( int ) { if ( ( IDENT_7 < 0 ) || ( IDENT_7 >= ( IDENT_8 ) ) ) { throw new java . lang . METHOD_4 ( IDENT_7 ) ; } if ( ( IDENT_7 + 1 ) < ( IDENT_9 ) ) { return new org . pentaho . di . core . IDENT_0 . IDENT_6 [ 0 ] ; } if ( ( IDENT_7 > 0 ) && ( ( IDENT_10 ) == ( IDENT_7 + 1 ) ) ) { if ( ( IDENT_11 ) != null ) { return IDENT_11 ; } return new org . pentaho . di . core . IDENT_0 . IDENT_6 [ 0 ] ; } try { if ( ( IDENT_10 ) >= ( IDENT_7 + 1 ) ) { METHOD_5 ( ) ; } while ( IDENT_12 . hasNext ( ) ) { int event = IDENT_12 . next ( ) ; if ( ( event == ( javax . xml . stream . IDENT_13 . IDENT_14 ) ) && ( IDENT_12 . METHOD_6 ( ) . equals ( STRING_0 ) ) ) { java . lang . String IDENT_15 = IDENT_12 . METHOD_7 ( null , STRING_1 ) ; IDENT_10 = java . lang . Integer . METHOD_8 ( IDENT_15 ) ; if ( ( IDENT_10 ) < ( IDENT_7 + 1 ) ) { continue ; } IDENT_11 = METHOD_9 ( ) ; return IDENT_11 ; } } } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } IDENT_8 = IDENT_10 ; return new org . pentaho . di . core . IDENT_0 . IDENT_6 [ ] { } ; }
org . junit . Assert . assertEquals ( 0 , row . length ) 