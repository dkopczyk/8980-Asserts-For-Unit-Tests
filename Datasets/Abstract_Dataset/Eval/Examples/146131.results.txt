METHOD_0 ( ) { org . pentaho . di . repository . IDENT_0 IDENT_1 = mock ( org . pentaho . di . repository . IDENT_0 . class ) ; org . pentaho . di . repository . IDENT_2 . IDENT_3 repository = mock ( org . pentaho . di . repository . IDENT_2 . IDENT_3 . class ) ; org . pentaho . di . repository . IDENT_2 . IDENT_4 IDENT_5 = mock ( org . pentaho . di . repository . IDENT_2 . IDENT_4 . class ) ; java . lang . String IDENT_6 = STRING_0 ; when ( IDENT_1 . METHOD_1 ( ) ) . thenReturn ( true ) ; when ( IDENT_1 . getPath ( ) ) . thenReturn ( IDENT_6 ) ; when ( repository . METHOD_2 ( anyString ( ) ) ) . thenReturn ( IDENT_5 ) ; when ( repository . METHOD_3 ( IDENT_1 , IDENT_6 ) ) . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . pentaho . di . repository . IDENT_0 , java . lang . String ) { try { if ( ( IDENT_7 . METHOD_1 ( ) ) && ( ( IDENT_8 . equals ( IDENT_9 . IDENT_10 ) ) || ( ( ! ( IDENT_8 . startsWith ( IDENT_9 . IDENT_11 ) ) ) && ( ! ( IDENT_8 . startsWith ( IDENT_9 . IDENT_12 ) ) ) ) ) ) { throw new org . pentaho . di . core . exception . METHOD_5 ( org . pentaho . di . IDENT_13 . IDENT_14 . getString ( org . pentaho . di . repository . IDENT_2 . IDENT_3 . IDENT_15 , STRING_1 , IDENT_8 ) ) ; } org . pentaho . di . repository . IDENT_0 IDENT_16 = METHOD_2 ( IDENT_7 . getPath ( ) ) ; IDENT_7 . METHOD_6 ( IDENT_16 . METHOD_7 ( ) ) ; java . lang . String [ ] path = org . pentaho . di . core . IDENT_17 . METHOD_8 ( IDENT_8 , IDENT_18 . IDENT_19 ) ; org . pentaho . di . repository . IDENT_0 IDENT_20 = IDENT_7 ; for ( int IDENT_21 = 0 ; IDENT_21 < ( path . length ) ; IDENT_21 ++ ) { org . pentaho . di . repository . IDENT_0 child = IDENT_20 . METHOD_9 ( path [ IDENT_21 ] ) ; if ( child == null ) { child = new org . pentaho . di . repository . METHOD_10 ( IDENT_20 , path [ IDENT_21 ] ) ; METHOD_11 ( child ) ; IDENT_20 . METHOD_12 ( child ) ; } IDENT_20 = child ; } return IDENT_20 ; } catch ( java . lang . Exception e ) { throw new org . pentaho . di . core . exception . METHOD_5 ( ( ( STRING_2 + IDENT_8 ) + "]" ) , e ) ; } }
org . junit . Assert . assertNull ( repository . METHOD_3 ( IDENT_1 , IDENT_6 ) . getPath ( ) ) 