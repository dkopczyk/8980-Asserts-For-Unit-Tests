METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; org . pentaho . di . repository . IDENT_2 IDENT_3 = mock ( org . pentaho . di . repository . IDENT_2 . class ) ; when ( IDENT_3 . getName ( ) ) . thenReturn ( IDENT_0 ) ; org . pentaho . di . repository . IDENT_4 . model . IDENT_5 IDENT_6 = mock ( org . pentaho . di . repository . IDENT_4 . model . IDENT_5 . class ) ; when ( IDENT_6 . METHOD_1 ( ) ) . thenReturn ( IDENT_3 ) ; when ( IDENT_7 . METHOD_2 ( IDENT_8 , false ) ) . thenReturn ( IDENT_6 ) ; IDENT_9 . METHOD_3 ( ) ; org . pentaho . di . ui . repository . IDENT_4 . IDENT_10 . model . IDENT_11 IDENT_12 = new org . pentaho . di . ui . repository . IDENT_4 . IDENT_10 . model . METHOD_4 ( ) ; IDENT_9 . METHOD_5 ( IDENT_12 ) ; verify ( IDENT_7 ) . METHOD_2 ( IDENT_8 , false ) ; "<AssertPlaceHolder>" ; IDENT_12 = new org . pentaho . di . ui . repository . IDENT_4 . IDENT_10 . model . METHOD_4 ( ) ; org . pentaho . di . repository . IDENT_4 . model . IDENT_13 IDENT_14 = new org . pentaho . di . repository . IDENT_4 . model . METHOD_6 ( new org . pentaho . di . repository . IDENT_4 . model . METHOD_7 ( IDENT_1 , org . pentaho . di . repository . IDENT_2 . Type . IDENT_15 ) ) ; IDENT_12 . METHOD_8 ( new org . pentaho . di . repository . IDENT_4 . model . METHOD_6 ( new org . pentaho . di . repository . IDENT_4 . model . METHOD_7 ( IDENT_1 , org . pentaho . di . repository . IDENT_2 . Type . IDENT_15 ) ) ) ; IDENT_9 . METHOD_9 ( IDENT_12 ) ; verify ( IDENT_7 ) . METHOD_10 ( IDENT_8 , IDENT_14 ) ; when ( IDENT_7 . METHOD_2 ( IDENT_8 , false ) ) . METHOD_11 ( new org . pentaho . di . core . exception . METHOD_12 ( "" ) ) ; IDENT_9 . METHOD_3 ( ) ; try { IDENT_9 . METHOD_5 ( IDENT_12 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( org . pentaho . di . ui . repository . IDENT_10 . IDENT_16 e ) { } METHOD_13 ( new org . pentaho . di . core . exception . METHOD_12 ( "" ) ) . when ( IDENT_7 ) . METHOD_10 ( any ( org . pentaho . di . repository . IDENT_17 . class ) , any ( org . pentaho . di . repository . IDENT_4 . model . METHOD_6 . class ) ) ; try { IDENT_9 . METHOD_9 ( IDENT_12 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( org . pentaho . di . ui . repository . IDENT_10 . IDENT_16 e ) { } } METHOD_1 ( ) { return IDENT_0 ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_12 . METHOD_1 ( ) . getName ( ) ) 