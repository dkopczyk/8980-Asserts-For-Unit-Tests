METHOD_0 ( ) { org . pentaho . platform . web . http . api . resources . services . IDENT_0 IDENT_1 = mock ( org . pentaho . platform . web . http . api . resources . services . IDENT_0 . class ) ; METHOD_1 ( IDENT_1 , org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_3 ) ; when ( IDENT_1 . METHOD_2 ( org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_4 , IDENT_0 . IDENT_5 ) ) . METHOD_3 ( ) ; when ( IDENT_1 . METHOD_4 ( org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_6 , org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_4 ) ) . thenReturn ( org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_4 ) ; METHOD_5 ( new java . lang . Exception ( ) ) . when ( IDENT_1 ) . METHOD_6 ( anyString ( ) ) ; boolean result = IDENT_1 . METHOD_2 ( org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_4 , IDENT_0 . IDENT_5 ) ; verify ( IDENT_1 , METHOD_7 ( ) ) . METHOD_8 ( org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_6 , org . pentaho . platform . web . http . api . resources . services . IDENT_2 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . lang . String , java . lang . String ) { java . lang . String IDENT_7 = METHOD_9 ( IDENT_8 ) ; org . pentaho . platform . api . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 IDENT_13 = METHOD_10 ( ) . METHOD_11 ( METHOD_9 ) ; if ( IDENT_13 == null ) { throw new java . io . METHOD_12 ( METHOD_9 ) ; } java . lang . String [ ] IDENT_14 = org . pentaho . platform . web . http . api . resources . utils . IDENT_15 . METHOD_13 ( params ) ; int i = 0 ; try { for ( ; i < ( IDENT_14 . length ) ; i ++ ) { METHOD_10 ( ) . METHOD_14 ( IDENT_14 [ i ] , IDENT_13 . getPath ( ) , null ) ; } } catch ( java . lang . IllegalArgumentException | org . pentaho . platform . api . IDENT_9 . IDENT_10 . IDENT_16 e ) { throw e ; } catch ( java . lang . Exception e ) { throw new java . lang . METHOD_15 ( ) ; } }
org . junit . Assert . assertEquals ( result , false ) 