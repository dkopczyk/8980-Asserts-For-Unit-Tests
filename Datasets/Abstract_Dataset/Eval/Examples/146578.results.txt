METHOD_0 ( ) { org . pentaho . test . platform . plugin . services . metadata . IDENT_0 mock = METHOD_1 ( new org . pentaho . test . platform . plugin . services . metadata . METHOD_2 ( ) ) ; org . pentaho . platform . engine . core . IDENT_1 . IDENT_2 . METHOD_3 ( new org . pentaho . platform . engine . core . IDENT_1 . METHOD_4 ( STRING_0 , "1" ) ) ; org . pentaho . platform . plugin . services . metadata . IDENT_3 repo = new org . pentaho . platform . plugin . services . metadata . METHOD_5 ( mock ) ; org . pentaho . metadata . model . IDENT_4 domain = new org . pentaho . metadata . model . METHOD_6 ( ) ; domain . setId ( STRING_1 ) ; mock . METHOD_7 ( domain ) ; org . pentaho . platform . api . engine . IDENT_5 manager = mock ( org . pentaho . platform . api . engine . IDENT_5 . class ) ; java . util . Set < java . lang . String > IDENT_6 = new java . util . HashSet ( java . util . Arrays . asList ( STRING_2 , STRING_3 ) ) ; when ( manager . METHOD_8 ( STRING_4 , STRING_5 ) ) . thenReturn ( IDENT_6 ) ; repo . IDENT_7 = manager ; repo . IDENT_8 = true ; java . util . Set < java . lang . String > IDENT_9 = repo . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; verify ( mock , times ( 0 ) ) . METHOD_10 ( ) ; verify ( manager , times ( 1 ) ) . METHOD_8 ( STRING_4 , STRING_5 ) ; } METHOD_9 ( ) { org . pentaho . platform . plugin . services . metadata . IDENT_10 . logger . debug ( STRING_6 ) ; METHOD_11 ( ) ; java . util . Collection < java . lang . String > IDENT_11 ; IDENT_12 . METHOD_12 ( ) . METHOD_13 ( ) ; try { IDENT_11 = new java . util . ArrayList < java . lang . String > ( IDENT_13 . METHOD_9 ( ) ) ; } finally { METHOD_13 . METHOD_12 ( ) . METHOD_14 ( ) ; } java . util . Set < java . lang . String > IDENT_9 = new java . util . HashSet < java . lang . String > ( IDENT_11 . size ( ) ) ; for ( java . lang . String domain : IDENT_11 ) { if ( METHOD_15 ( domain ) ) { IDENT_9 . add ( domain ) ; } } return IDENT_9 ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_9 ) 