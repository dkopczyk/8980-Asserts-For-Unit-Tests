METHOD_0 ( ) { org . pentaho . platform . web . http . api . resources . IDENT_0 IDENT_1 = new org . pentaho . platform . web . http . api . resources . METHOD_1 ( ) ; java . lang . String IDENT_2 = STRING_0 ; java . lang . String IDENT_3 = STRING_1 ; IDENT_1 . METHOD_2 ( IDENT_2 ) ; IDENT_1 . METHOD_3 ( IDENT_3 ) ; org . pentaho . platform . api . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = mock ( org . pentaho . platform . api . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; when ( repo . METHOD_4 ( anyString ( ) ) ) . thenReturn ( IDENT_7 ) ; when ( IDENT_7 . METHOD_5 ( ) ) . thenReturn ( true ) ; IDENT_8 = new org . pentaho . platform . web . http . api . resources . METHOD_6 ( IDENT_1 ) ; java . lang . String IDENT_9 = IDENT_8 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; verify ( repo ) . METHOD_4 ( STRING_2 ) ; } METHOD_7 ( ) { java . lang . String IDENT_10 = org . pentaho . platform . repository . IDENT_11 . METHOD_8 ( IDENT_1 . METHOD_9 ( ) ) ; if ( ! ( org . apache . commons . lang . StringUtils . isEmpty ( IDENT_1 . METHOD_10 ( ) ) ) ) { IDENT_10 = IDENT_1 . METHOD_10 ( ) ; } java . lang . String IDENT_12 = ( "/" + IDENT_10 ) + STRING_3 ; java . lang . String IDENT_9 = IDENT_1 . METHOD_11 ( ) ; if ( ( IDENT_9 != null ) && ( IDENT_9 . METHOD_12 ( IDENT_12 ) ) ) { IDENT_9 = IDENT_9 . substring ( 0 , IDENT_9 . indexOf ( IDENT_12 ) ) ; } if ( ( org . apache . commons . lang . StringUtils . METHOD_13 ( IDENT_9 ) ) && ( METHOD_14 ( IDENT_9 ) ) ) { return IDENT_9 + IDENT_12 ; } java . lang . String [ ] IDENT_13 = new java . lang . String [ ] { METHOD_15 ( ) , METHOD_16 ( ) , METHOD_17 ( ) } ; for ( java . lang . String path : IDENT_13 ) { if ( ( org . apache . commons . lang . StringUtils . METHOD_13 ( path ) ) && ( METHOD_14 ( path ) ) ) { return path + IDENT_12 ; } } return null ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_9 ) 