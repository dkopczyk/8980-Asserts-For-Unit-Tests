METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . util . List < java . lang . String > IDENT_2 = com . IDENT_0 . IDENT_1 . util . Arrays . asList ( "1" , "2" , STRING_0 ) ; com . IDENT_0 . IDENT_1 . util . List < java . lang . Integer > expect = com . IDENT_0 . IDENT_1 . util . Arrays . asList ( 1 , 2 , 3 ) ; com . IDENT_0 . IDENT_1 . util . IDENT_3 < com . IDENT_0 . IDENT_1 . util . List < java . lang . Integer > > IDENT_4 = new com . IDENT_0 . IDENT_1 . util . IDENT_3 < com . IDENT_0 . IDENT_1 . util . List < java . lang . Integer > > ( ) { } ; com . IDENT_0 . IDENT_1 . util . List < java . lang . Integer > output = ( ( com . IDENT_0 . IDENT_1 . util . List < java . lang . Integer > ) ( converter . convert ( IDENT_4 . getType ( ) , IDENT_2 ) ) ) ; "<AssertPlaceHolder>" ; } getType ( ) { com . IDENT_0 . IDENT_1 . db . IDENT_5 type = METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; if ( type == null ) { for ( java . lang . Object object : IDENT_6 . values ( ) ) { if ( ( object instanceof com . IDENT_0 . IDENT_1 . db . IDENT_5 ) && ( getId ( ) . equals ( METHOD_4 ( ) ) ) ) { type = ( ( com . IDENT_0 . IDENT_1 . db . IDENT_5 ) ( object ) ) ; type . METHOD_5 ( com . IDENT_0 . IDENT_1 . db . IDENT_5 . class . getName ( ) ) ; type . METHOD_6 ( ) ; } break ; } } return type ; }
org . junit . Assert . assertEquals ( expect , output ) 