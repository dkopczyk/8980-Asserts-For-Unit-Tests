METHOD_0 ( ) { byte [ ] IDENT_0 = de . IDENT_1 . IDENT_2 . utils . IDENT_3 . toByteArray ( STRING_0 ) ; byte [ ] IDENT_4 = de . IDENT_1 . IDENT_2 . utils . IDENT_3 . toByteArray ( STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] ) { if ( ( ( IDENT_5 . length ) OP_0 2 ) > 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } int length = ( IDENT_5 . length ) / 2 ; java . math . BigInteger r = new java . math . BigInteger ( java . util . Arrays . METHOD_2 ( IDENT_5 , 0 , length ) ) ; java . math . BigInteger s = new java . math . BigInteger ( java . util . Arrays . METHOD_2 ( IDENT_5 , length , IDENT_5 . length ) ) ; de . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 IDENT_8 = new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_3 ( ) ; de . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_9 IDENT_10 = new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_5 ( de . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_11 . IDENT_12 ) , de . IDENT_1 . IDENT_2 . crypto . IDENT_13 . METHOD_6 ( r ) ) ; de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 IDENT_14 = new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_5 ( de . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_11 . IDENT_12 ) , de . IDENT_1 . IDENT_2 . crypto . IDENT_13 . METHOD_6 ( s ) ) ; IDENT_8 . METHOD_7 ( IDENT_10 ) ; IDENT_8 . METHOD_7 ( IDENT_14 ) ; return new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_8 ( new de . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_5 ( de . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_11 . IDENT_15 ) , IDENT_8 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_4 , de . IDENT_1 . IDENT_2 . crypto . IDENT_13 . METHOD_1 ( IDENT_0 ) . toByteArray ( ) ) 