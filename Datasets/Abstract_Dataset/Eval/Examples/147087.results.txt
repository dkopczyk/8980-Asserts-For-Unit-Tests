METHOD_0 ( ) { byte [ ] IDENT_0 = new java . math . BigInteger ( STRING_0 , 10 ) . toByteArray ( ) ; byte [ ] IDENT_1 = de . IDENT_2 . IDENT_3 . utils . Utils . METHOD_1 ( IDENT_0 , IDENT_0 ) ; byte [ ] IDENT_4 = de . IDENT_2 . IDENT_3 . utils . Utils . METHOD_1 ( new byte [ ] { de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_7 } , de . IDENT_2 . IDENT_3 . utils . Utils . METHOD_2 ( ( ( byte ) ( ( ( IDENT_0 . length ) + 3 ) * 2 ) ) ) , new byte [ ] { de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_8 } , de . IDENT_2 . IDENT_3 . utils . Utils . METHOD_2 ( ( ( byte ) ( ( IDENT_0 . length ) + 1 ) ) ) , de . IDENT_2 . IDENT_3 . utils . IDENT_9 . toByteArray ( STRING_1 ) , IDENT_0 , new byte [ ] { de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_8 } , de . IDENT_2 . IDENT_3 . utils . Utils . METHOD_2 ( ( ( byte ) ( ( IDENT_0 . length ) + 1 ) ) ) , de . IDENT_2 . IDENT_3 . utils . IDENT_9 . toByteArray ( STRING_1 ) , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( byte [ ] ) { if ( ( ( IDENT_10 . length ) OP_0 2 ) > 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } int length = ( IDENT_10 . length ) / 2 ; java . math . BigInteger r = new java . math . BigInteger ( java . util . Arrays . METHOD_4 ( IDENT_10 , 0 , length ) ) ; java . math . BigInteger s = new java . math . BigInteger ( java . util . Arrays . METHOD_4 ( IDENT_10 , length , IDENT_10 . length ) ) ; de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_11 IDENT_12 = new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_5 ( ) ; de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_13 IDENT_14 = new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_6 ( new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_7 ( de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_8 ) , de . IDENT_2 . IDENT_3 . crypto . IDENT_15 . METHOD_8 ( r ) ) ; de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_6 IDENT_16 = new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_6 ( new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_7 ( de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_8 ) , de . IDENT_2 . IDENT_3 . crypto . IDENT_15 . METHOD_8 ( s ) ) ; IDENT_12 . METHOD_9 ( IDENT_14 ) ; IDENT_12 . METHOD_9 ( IDENT_16 ) ; return new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_10 ( new de . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_7 ( de . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 . IDENT_7 ) , IDENT_12 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_4 , de . IDENT_2 . IDENT_3 . crypto . IDENT_15 . METHOD_3 ( IDENT_1 ) . toByteArray ( ) ) 