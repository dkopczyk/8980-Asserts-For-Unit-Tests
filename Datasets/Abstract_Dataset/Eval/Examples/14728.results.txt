METHOD_0 ( ) { int IDENT_0 = ( INT_0 * INT_1 ) * INT_1 ; int IDENT_1 = 100 ; int IDENT_2 = INT_2 * INT_1 ; org . apache . hadoop . hbase . io . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new org . apache . hadoop . hbase . io . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_0 ) ; int IDENT_7 = IDENT_1 / 10 ; int IDENT_8 = IDENT_1 / 10 ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { byte val = ( ( byte ) ( ( java . lang . Math . random ( ) ) * 255 ) ) ; int IDENT_9 = ( ( int ) ( ( java . lang . Math . random ( ) ) * IDENT_2 ) ) ; if ( IDENT_9 == 0 ) { IDENT_9 = 1 ; } byte [ ] IDENT_10 = new byte [ IDENT_9 ] ; for ( int j = 0 ; j < ( IDENT_10 . length ) ; ++ j ) { IDENT_10 [ j ] = val ; } java . nio . ByteBuffer IDENT_11 = java . nio . ByteBuffer . METHOD_2 ( IDENT_10 ) ; int offset = 0 ; if ( IDENT_7 > 0 ) { IDENT_7 OP_0 ; offset = 0 ; } else if ( IDENT_8 > 0 ) { IDENT_8 OP_0 ; offset = IDENT_0 - IDENT_9 ; } else { offset = ( ( int ) ( ( java . lang . Math . random ( ) ) * ( IDENT_0 - IDENT_2 ) ) ) ; } IDENT_6 . write ( IDENT_11 , offset ) ; org . apache . hadoop . hbase . io . IDENT_3 . IDENT_4 . IDENT_12 . IDENT_13 IDENT_14 = new org . apache . hadoop . hbase . io . IDENT_3 . IDENT_4 . IDENT_12 . METHOD_3 ( ) ; IDENT_6 . read ( offset , IDENT_9 , IDENT_14 ) ; org . apache . hadoop . hbase . nio . IDENT_15 IDENT_16 = IDENT_14 . buf ; for ( int j = 0 ; j < ( IDENT_10 . length ) ; ++ j ) { "<AssertPlaceHolder>" ; } } assert IDENT_7 == 0 ; assert IDENT_8 == 0 ; } get ( java . util . List ) { byte [ ] [ ] IDENT_17 = new byte [ IDENT_18 . size ( ) ] [ ] ; int IDENT_19 = 1 ; int count = 0 ; for ( org . apache . hadoop . hbase . client . IDENT_20 g : IDENT_18 ) { if ( count == 0 ) { IDENT_19 = g . METHOD_4 ( ) ; } else if ( ( g . METHOD_4 ( ) ) != IDENT_19 ) { org . apache . hadoop . hbase . rest . client . IDENT_21 . LOG . warn ( ( ( STRING_0 + IDENT_19 ) + STRING_1 ) ) ; } if ( ( g . METHOD_5 ( ) ) != null ) { org . apache . hadoop . hbase . rest . client . IDENT_21 . LOG . warn ( STRING_2 ) ; } IDENT_17 [ count ] = g . METHOD_6 ( ) ; count ++ ; } java . lang . String spec = METHOD_7 ( IDENT_17 , IDENT_19 ) ; return METHOD_8 ( spec ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_11 . get ( j ) ) == ( IDENT_16 . get ( j ) ) ) ) 