METHOD_0 ( ) { ca . IDENT_0 . IDENT_1 . IDENT_2 . model . List < ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User > IDENT_3 = new ca . IDENT_0 . IDENT_1 . IDENT_2 . model . ArrayList ( ) ; ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User IDENT_4 = new ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User ( ) ; ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User IDENT_5 = new ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User ( ) ; ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User IDENT_6 = new ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User ( ) ; java . text . IDENT_7 sf = new java . text . METHOD_1 ( STRING_0 ) ; IDENT_5 . METHOD_2 ( sf . parse ( STRING_1 ) ) ; IDENT_4 . METHOD_2 ( sf . parse ( STRING_2 ) ) ; IDENT_6 . METHOD_2 ( sf . parse ( STRING_3 ) ) ; IDENT_3 . add ( IDENT_6 ) ; IDENT_3 . add ( IDENT_4 ) ; IDENT_3 . add ( IDENT_5 ) ; ca . IDENT_0 . IDENT_1 . IDENT_2 . model . Collections . METHOD_3 ( IDENT_3 ) ; ca . IDENT_0 . IDENT_1 . IDENT_2 . model . user . User IDENT_8 = IDENT_3 . get ( 0 ) ; for ( int i = 1 ; i < ( IDENT_3 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } compareTo ( ca . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_9 ) { return IDENT_10 . compareTo ( o . IDENT_10 ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_8 . compareTo ( IDENT_3 . get ( i ) ) ) < 0 ) ) 