METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 v1 = IDENT_3 . METHOD_1 ( T . IDENT_4 , STRING_0 , "name" , STRING_1 ) ; org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 v2 = IDENT_3 . METHOD_1 ( T . IDENT_4 , STRING_0 , "name" , STRING_2 ) ; org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 IDENT_5 = IDENT_3 . METHOD_1 ( T . IDENT_4 , STRING_3 , "name" , STRING_4 ) ; v1 . METHOD_2 ( STRING_5 , v2 ) ; IDENT_3 . tx ( ) . commit ( ) ; java . lang . Object IDENT_6 = new java . lang . Object ( ) ; java . lang . Object IDENT_7 = new java . lang . Object ( ) ; java . util . concurrent . atomic . IDENT_8 IDENT_9 = new java . util . concurrent . atomic . METHOD_3 ( 0 ) ; java . lang . Thread IDENT_10 = new java . lang . Thread ( ( ) -> { try { MOD_0 ( IDENT_6 ) { IDENT_6 . METHOD_4 ( ) ; } IDENT_11 < org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 , org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_12 = org . IDENT_13 . IDENT_14 . test . IDENT_15 . IDENT_3 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( STRING_0 ) . out ( STRING_5 ) ; int IDENT_16 = 0 ; while ( IDENT_12 . hasNext ( ) ) { IDENT_12 . next ( ) ; MOD_0 ( IDENT_7 ) { IDENT_7 . METHOD_8 ( ) ; } if ( IDENT_16 == 0 ) { MOD_0 ( IDENT_6 ) { IDENT_6 . METHOD_4 ( 1000 ) ; } } IDENT_16 ++ ; } org . IDENT_13 . IDENT_14 . test . IDENT_15 . IDENT_3 . tx ( ) . commit ( ) ; IDENT_9 . METHOD_9 ( ) ; } catch ( e ) { org . IDENT_13 . IDENT_14 . test . IDENT_15 . e . printStackTrace ( ) ; } } , STRING_6 ) ; IDENT_10 . start ( ) ; java . lang . Thread IDENT_17 = new java . lang . Thread ( ( ) -> { try { MOD_0 ( IDENT_7 ) { IDENT_7 . METHOD_4 ( ) ; } v1 . METHOD_2 ( STRING_5 , IDENT_5 ) ; MOD_0 ( IDENT_6 ) { IDENT_6 . METHOD_8 ( ) ; } org . IDENT_13 . IDENT_14 . test . IDENT_15 . IDENT_3 . tx ( ) . commit ( ) ; IDENT_9 . METHOD_9 ( ) ; } catch ( e ) { org . IDENT_13 . IDENT_14 . test . IDENT_15 . e . printStackTrace ( ) ; } } , STRING_7 ) ; IDENT_17 . start ( ) ; java . lang . Thread . sleep ( 1000 ) ; MOD_0 ( IDENT_6 ) { IDENT_6 . METHOD_10 ( ) ; } IDENT_10 . join ( ) ; IDENT_17 . join ( ) ; "<AssertPlaceHolder>" ; } tx ( ) { return this . IDENT_18 ; }
org . junit . Assert . assertEquals ( 2 , IDENT_9 . get ( ) ) 