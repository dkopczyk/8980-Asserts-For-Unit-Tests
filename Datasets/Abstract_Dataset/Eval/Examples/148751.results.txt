METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_3 = IDENT_4 . METHOD_1 ( 3 , 3 ) ; org . apache . commons . math . IDENT_5 . IDENT_6 [ ] IDENT_7 = new org . apache . commons . math . IDENT_5 . IDENT_6 [ ] { new org . apache . commons . math . IDENT_5 . METHOD_2 ( 0.0 , ( - FLOAT_0 ) ) , new org . apache . commons . math . IDENT_5 . METHOD_2 ( 0.0 , FLOAT_0 ) } ; org . apache . commons . math . IDENT_5 . METHOD_2 [ ] IDENT_8 = new org . apache . commons . math . IDENT_5 . METHOD_2 [ ] { new org . apache . commons . math . IDENT_5 . METHOD_2 ( ( - FLOAT_1 ) , ( - FLOAT_2 ) ) , new org . apache . commons . math . IDENT_5 . METHOD_2 ( ( - FLOAT_3 ) , ( - FLOAT_4 ) ) , new org . apache . commons . math . IDENT_5 . METHOD_2 ( ( - FLOAT_1 ) , FLOAT_2 ) } ; org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_9 = new org . IDENT_0 . IDENT_1 . model . METHOD_3 ( IDENT_7 , IDENT_8 , FLOAT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int , double ) { double IDENT_10 = java . lang . Math . METHOD_4 ( ( ( java . lang . Math . METHOD_5 ( 10 , ( FLOAT_6 * IDENT_11 ) ) ) - 1.0 ) ) ; double IDENT_12 = ( 1.0 / IDENT_13 ) * ( java . lang . Math . log ( ( ( 1.0 + ( java . lang . Math . METHOD_4 ( ( 1.0 + ( IDENT_10 * IDENT_10 ) ) ) ) ) / IDENT_10 ) ) ) ; org . apache . commons . math . IDENT_5 . METHOD_2 [ ] IDENT_8 = new org . apache . commons . math . IDENT_5 . METHOD_2 [ IDENT_13 ] ; double IDENT_14 ; for ( int i = 1 ; i <= IDENT_13 ; i ++ ) { IDENT_14 = ( ( ( Math . IDENT_15 ) / 2.0 ) * ( ( 2 * i ) - 1.0 ) ) / IDENT_13 ; IDENT_8 [ ( i - 1 ) ] = new org . apache . commons . math . IDENT_5 . METHOD_2 ( ( ( - ( java . lang . Math . METHOD_6 ( IDENT_12 ) ) ) * ( java . lang . Math . METHOD_7 ( IDENT_14 ) ) ) , ( ( java . lang . Math . METHOD_8 ( IDENT_12 ) ) * ( java . lang . Math . METHOD_9 ( IDENT_14 ) ) ) ) ; } org . apache . commons . math . IDENT_5 . METHOD_2 IDENT_16 = new org . apache . commons . math . IDENT_5 . METHOD_2 ( 1.0 , 0.0 ) ; for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) IDENT_16 = IDENT_16 . METHOD_10 ( IDENT_8 [ i ] . METHOD_11 ( ) ) ; double IDENT_17 = IDENT_16 . METHOD_12 ( ) ; if ( org . IDENT_0 . IDENT_1 . math . IDENT_18 . METHOD_13 ( IDENT_13 ) ) IDENT_17 = IDENT_17 / ( java . lang . Math . METHOD_4 ( ( 1 + ( IDENT_10 * IDENT_10 ) ) ) ) ; org . IDENT_0 . IDENT_1 . model . METHOD_3 IDENT_19 = new org . IDENT_0 . IDENT_1 . model . METHOD_3 ( new org . apache . commons . math . IDENT_5 . METHOD_2 [ 0 ] , IDENT_8 , IDENT_17 ) ; return IDENT_19 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_9 ) 