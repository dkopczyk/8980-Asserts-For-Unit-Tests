METHOD_0 ( ) { org . apache . commons . math3 . random . IDENT_0 IDENT_1 = METHOD_1 ( ) ; cc . redberry . rings . IDENT_2 domain = new cc . redberry . rings . METHOD_2 ( INT_0 ) ; int IDENT_3 = METHOD_3 ( 100 , INT_1 ) ; int IDENT_4 = 3 ; for ( int i = 0 ; i < IDENT_3 ; i ++ ) { cc . redberry . rings . IDENT_5 . IDENT_6 . List < cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_7 > IDENT_8 = new cc . redberry . rings . IDENT_5 . IDENT_6 . ArrayList ( ) ; for ( int j = 0 ; j < IDENT_4 ; j ++ ) IDENT_8 . add ( cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_9 . METHOD_4 ( 3 , 4 , 3 , domain , cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_10 . IDENT_11 , IDENT_1 ) ) ; cc . redberry . rings . IDENT_5 . IDENT_6 . List < cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_7 > actual = METHOD_5 ( IDENT_8 , cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_10 . IDENT_11 ) ; cc . redberry . rings . IDENT_5 . IDENT_6 . List < cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_7 > expected = cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_12 . METHOD_6 ( IDENT_8 , cc . redberry . rings . IDENT_5 . IDENT_6 . IDENT_10 . IDENT_11 ) ; if ( ! ( actual . equals ( expected ) ) ) { System . out . println ( IDENT_8 ) ; System . out . println ( actual . size ( ) ) ; } "<AssertPlaceHolder>" ; } } size ( ) { return ( cc . redberry . rings . IDENT_5 . IDENT_13 . IDENT_14 . METHOD_7 ( ) ) + 1 ; }
org . junit . Assert . assertEquals ( expected , actual ) 