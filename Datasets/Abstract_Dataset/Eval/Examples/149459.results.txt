METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 } ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_5 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_3 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_9 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_4 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_10 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_5 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; for ( int i = 0 ; i < ( METHOD_2 ( 1 , 1 ) ) ; i ++ ) { cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_12 = cc . redberry . rings . IDENT_1 . IDENT_2 . Arrays . asList ( cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_5 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_9 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( IDENT_10 ) ) ; long start ; start = java . lang . System . METHOD_4 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_13 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_14 . METHOD_5 ( IDENT_12 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ; System . out . println ( ( STRING_6 + ( METHOD_6 ( ( ( java . lang . System . METHOD_4 ( ) ) - start ) ) ) ) ) ; start = java . lang . System . METHOD_4 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_15 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_14 . METHOD_7 ( IDENT_12 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ; System . out . println ( ( STRING_7 + ( METHOD_6 ( ( ( java . lang . System . METHOD_4 ( ) ) - start ) ) ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_6 ( long ) { java . lang . String IDENT_16 = STRING_8 ; if ( ( IDENT_17 / 1000 ) > 1 ) { IDENT_16 = STRING_9 ; IDENT_17 OP_0 1000 ; } if ( ( IDENT_17 / 1000 ) > 1 ) { IDENT_16 = STRING_10 ; IDENT_17 OP_0 1000 ; } if ( ( IDENT_17 / 1000 ) > 1 ) { IDENT_16 = STRING_11 ; IDENT_17 OP_0 1000 ; } return IDENT_17 + IDENT_16 ; }
org . junit . Assert . assertEquals ( IDENT_13 , IDENT_15 ) 