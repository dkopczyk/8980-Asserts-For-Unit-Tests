METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 } ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_5 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_4 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_9 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_5 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_10 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_6 , cc . redberry . rings . IDENT_6 . METHOD_1 ( INT_0 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_12 = cc . redberry . rings . IDENT_1 . IDENT_2 . Arrays . asList ( cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_5 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_9 ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_10 ) ) ; for ( int i = 0 ; i < ( METHOD_3 ( 1 , 1 ) ) ; i ++ ) { long start ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_13 < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_14 > strategy = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_15 . METHOD_4 ( cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_16 = METHOD_6 ( IDENT_12 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , strategy ) ; System . out . println ( ( STRING_7 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; strategy = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_15 . METHOD_8 ( strategy ) ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_11 > IDENT_17 = METHOD_6 ( IDENT_12 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 , strategy ) ; System . out . println ( ( STRING_8 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_7 ( long ) { java . lang . String IDENT_18 = STRING_9 ; if ( ( IDENT_19 / 1000 ) > 1 ) { IDENT_18 = STRING_10 ; IDENT_19 OP_0 1000 ; } if ( ( IDENT_19 / 1000 ) > 1 ) { IDENT_18 = STRING_11 ; IDENT_19 OP_0 1000 ; } if ( ( IDENT_19 / 1000 ) > 1 ) { IDENT_18 = STRING_12 ; IDENT_19 OP_0 1000 ; } return IDENT_19 + IDENT_18 ; }
org . junit . Assert . assertEquals ( IDENT_16 , IDENT_17 ) 