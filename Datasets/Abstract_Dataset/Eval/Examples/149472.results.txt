METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 } ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > a = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_3 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > b = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_4 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > c = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > d = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_6 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_8 = cc . redberry . rings . IDENT_1 . IDENT_2 . Arrays . asList ( a , b , c , d ) ; org . apache . commons . math3 . random . IDENT_9 IDENT_10 = METHOD_1 ( ) ; for ( int i = 0 ; i < ( METHOD_2 ( 1 , 2 ) ) ; ++ i ) { IDENT_10 . METHOD_3 ( ( INT_0 + i ) ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_11 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_12 . METHOD_4 ( IDENT_8 , IDENT_10 , 2 , 3 ) ; long start ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_13 = METHOD_6 ( IDENT_11 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , null , false ) ; System . out . println ( ( STRING_7 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_14 = METHOD_6 ( IDENT_11 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , null , true ) ; System . out . println ( ( STRING_8 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_7 ( long ) { java . lang . String IDENT_15 = STRING_9 ; if ( ( IDENT_16 / 1000 ) > 1 ) { IDENT_15 = STRING_10 ; IDENT_16 OP_0 1000 ; } if ( ( IDENT_16 / 1000 ) > 1 ) { IDENT_15 = STRING_11 ; IDENT_16 OP_0 1000 ; } if ( ( IDENT_16 / 1000 ) > 1 ) { IDENT_15 = STRING_12 ; IDENT_16 OP_0 1000 ; } return IDENT_16 + IDENT_15 ; }
org . junit . Assert . assertEquals ( IDENT_13 , IDENT_14 ) 