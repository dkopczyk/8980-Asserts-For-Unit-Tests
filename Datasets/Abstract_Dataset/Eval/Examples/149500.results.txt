METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 . BigInteger > IDENT_0 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_1 ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_0 ) , 50 ) . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_5 extends cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_6 ) { if ( IDENT_0 . METHOD_4 ( ) ) return ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 < IDENT_5 > ) ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_5 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_6 ) ( IDENT_0 ) ) ) ) ) ; else if ( IDENT_0 . METHOD_6 ( ) ) return cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_7 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 ) ( IDENT_0 ) ) ) ; else if ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_8 ( IDENT_0 ) ) return ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 < IDENT_5 > ) ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_9 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 ) ( IDENT_0 ) ) ) ) ) ; else if ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_10 ( IDENT_0 ) ) return ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 < IDENT_5 > ) ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_11 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 ) ( IDENT_0 ) ) ) ) ) ; else if ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_12 ( IDENT_0 ) ) return ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 < IDENT_5 > ) ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_13 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 ) ( IDENT_0 ) ) ) ) ) ; else { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 < IDENT_5 > IDENT_10 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_14 ( IDENT_0 , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 :: METHOD_3 ) ; if ( IDENT_10 != null ) return IDENT_10 ; throw new java . lang . RuntimeException ( ( STRING_1 + ( IDENT_0 . METHOD_15 ( ) ) ) ) ; } }
org . junit . Assert . assertEquals ( 6 , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_3 ( IDENT_0 ) . size ( ) ) 