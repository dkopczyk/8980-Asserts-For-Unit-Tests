METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { "a" , "b" , STRING_0 } ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 domain = new cc . redberry . rings . IDENT_1 . IDENT_2 . METHOD_1 ( cc . redberry . rings . IDENT_4 . IDENT_5 . METHOD_2 ( INT_0 ) ) ; System . out . println ( domain ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 < cc . redberry . rings . IDENT_7 . BigInteger > a = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . parse ( STRING_1 , domain , IDENT_8 . IDENT_9 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 < cc . redberry . rings . IDENT_7 . BigInteger > b = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . parse ( STRING_2 , domain , IDENT_8 . IDENT_9 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 < cc . redberry . rings . IDENT_7 . BigInteger > IDENT_10 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . parse ( STRING_3 , domain , IDENT_8 . IDENT_9 , IDENT_0 ) ; a = a . METHOD_3 ( ) . METHOD_4 ( IDENT_10 ) ; b = b . METHOD_3 ( ) . METHOD_4 ( IDENT_10 ) ; org . apache . commons . math3 . random . IDENT_11 IDENT_12 = METHOD_5 ( ) ; IDENT_12 . METHOD_6 ( INT_1 ) ; int IDENT_13 = ( a . IDENT_14 ) - 1 ; cc . redberry . rings . IDENT_7 . BigInteger IDENT_15 = cc . redberry . rings . IDENT_7 . BigInteger . valueOf ( INT_2 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 < cc . redberry . rings . IDENT_7 . BigInteger > IDENT_16 = IDENT_10 . evaluate ( IDENT_13 , IDENT_15 ) ; for ( int IDENT_17 : java . util . Arrays . asList ( 1 , Integer . MAX_VALUE ) ) { cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_18 < cc . redberry . rings . IDENT_7 . BigInteger > IDENT_19 = METHOD_7 ( IDENT_13 , a , b , IDENT_16 , IDENT_17 , IDENT_12 ) ; cc . redberry . rings . IDENT_7 . BigInteger IDENT_20 = domain . valueOf ( INT_3 ) ; "<AssertPlaceHolder>" ; } } evaluate ( int , long ) { return evaluate ( IDENT_13 , IDENT_21 . valueOf ( value ) ) ; }
org . junit . Assert . assertEquals ( IDENT_10 . evaluate ( IDENT_13 , IDENT_20 ) , IDENT_19 . evaluate ( IDENT_20 ) ) 