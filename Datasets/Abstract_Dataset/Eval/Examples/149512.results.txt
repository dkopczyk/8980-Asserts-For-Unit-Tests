METHOD_0 ( ) { int IDENT_0 = METHOD_1 ( INT_0 , 1000 ) ; int IDENT_1 = 0 ; org . apache . commons . math3 . random . IDENT_2 IDENT_3 = METHOD_2 ( ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 < cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_8 < cc . redberry . rings . IDENT_9 . BigInteger > , cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 < cc . redberry . rings . IDENT_9 . BigInteger > > IDENT_11 = new cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( cc . redberry . rings . IDENT_12 . IDENT_12 . IDENT_13 , 3 , 5 , 5 , 15 , 5 , 15 , IDENT_3 ) ; for ( int n = 0 ; n < IDENT_0 ; n ++ ) { cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 < cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_8 < cc . redberry . rings . IDENT_9 . BigInteger > , cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 < cc . redberry . rings . IDENT_9 . BigInteger > > IDENT_15 = IDENT_11 . METHOD_4 ( false , false ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_17 = null ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_18 = null ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 actual = null ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_19 domain = null ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_19 IDENT_20 = null ; long IDENT_21 = - 1 ; try { cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 < cc . redberry . rings . IDENT_9 . BigInteger > IDENT_22 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_23 . IDENT_23 . METHOD_5 ( IDENT_15 . a , IDENT_15 . b , 0 , cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_23 . IDENT_23 :: IDENT_24 ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 < cc . redberry . rings . IDENT_9 . BigInteger > a = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_25 . METHOD_6 ( IDENT_15 . a , METHOD_5 ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 < cc . redberry . rings . IDENT_9 . BigInteger > b = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_25 . METHOD_6 ( IDENT_15 . b , METHOD_5 ) ; domain = new cc . redberry . rings . IDENT_4 . IDENT_5 . METHOD_7 ( METHOD_8 ( 20 ) ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_26 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 . METHOD_9 ( a . METHOD_10 ( domain ) ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_27 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 . METHOD_9 ( b . METHOD_10 ( domain ) ) ; IDENT_17 = METHOD_11 ( IDENT_26 , IDENT_27 ) ; if ( ( ( IDENT_26 . METHOD_12 ( ) ) || ( IDENT_27 . METHOD_12 ( ) ) ) || ( ( IDENT_17 . METHOD_13 ( 0 ) ) == 0 ) ) { OP_0 n ; continue ; } IDENT_20 = new cc . redberry . rings . IDENT_4 . IDENT_5 . METHOD_7 ( METHOD_8 ( 20 ) ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_28 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 . METHOD_9 ( a . METHOD_10 ( IDENT_20 ) ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_16 IDENT_29 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_10 . METHOD_9 ( b . METHOD_10 ( IDENT_20 ) ) ; IDENT_18 = METHOD_11 ( IDENT_28 , IDENT_29 ) ; if ( ! ( IDENT_18 . METHOD_14 ( IDENT_17 ) ) ) { OP_0 n ; continue ; } IDENT_3 . METHOD_15 ( ( IDENT_21 = IDENT_3 . METHOD_16 ( ) ) ) ; actual = METHOD_17 ( IDENT_28 , IDENT_29 , IDENT_17 . METHOD_10 ( IDENT_28 . IDENT_30 ) , IDENT_3 ) ; if ( actual == null ) { ++ IDENT_1 ; actual = METHOD_17 ( IDENT_28 , IDENT_29 , IDENT_17 . METHOD_10 ( IDENT_28 . IDENT_30 ) , IDENT_3 ) ; } "<AssertPlaceHolder>" ; } catch ( java . lang . Throwable IDENT_31 ) { System . out . println ( IDENT_21 ) ; System . out . println ( IDENT_15 . domain ) ; System . out . println ( IDENT_15 . a ) ; System . out . println ( IDENT_15 . b ) ; System . out . println ( IDENT_15 . IDENT_18 ) ; System . out . println ( domain ) ; System . out . println ( IDENT_20 ) ; System . out . println ( IDENT_17 ) ; System . out . println ( actual ) ; throw IDENT_31 ; } } System . out . println ( ( STRING_0 + IDENT_1 ) ) ; } METHOD_18 ( ) { if ( METHOD_19 ( ) ) return this ; if ( METHOD_20 ( ) ) return this ; if ( ( METHOD_13 ) == 0 ) { data [ 0 ] = 1 ; return this ; } return METHOD_21 ( IDENT_30 . METHOD_22 ( METHOD_23 ( ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_18 . METHOD_18 ( ) , actual . METHOD_18 ( ) ) 