METHOD_0 ( ) { cc . redberry . rings . IDENT_0 domain = new cc . redberry . rings . METHOD_1 ( INT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > IDENT_1 = parse ( STRING_0 , domain ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > expected = parse ( STRING_1 , domain ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( int , long ) { if ( METHOD_2 == 0 ) return METHOD_3 ( ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 IDENT_7 = new cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_4 ( cc . redberry . rings . IDENT_1 . IDENT_8 . IDENT_9 . create ( METHOD_2 , 1 ) . METHOD_5 ( IDENT_10 ) , IDENT_11 , IDENT_12 , IDENT_13 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 result = METHOD_6 ( ) ; for ( cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_14 IDENT_15 : this ) { int IDENT_16 = IDENT_15 . IDENT_17 [ IDENT_11 ] ; if ( IDENT_16 == 0 ) { result . add ( IDENT_15 ) ; continue ; } result . add ( IDENT_7 . METHOD_7 ( IDENT_16 ) . METHOD_8 ( IDENT_15 . METHOD_9 ( IDENT_11 ) ) ) ; } return result ; }
org . junit . Assert . assertEquals ( expected , IDENT_1 . METHOD_2 ( 2 , 2 ) ) 