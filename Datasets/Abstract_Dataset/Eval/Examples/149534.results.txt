METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { "a" , "b" } ; cc . redberry . rings . IDENT_1 domain = new cc . redberry . rings . METHOD_1 ( INT_0 ) ; cc . redberry . rings . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_4 IDENT_2 = parse ( STRING_0 , domain , cc . redberry . rings . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 , IDENT_0 ) ; cc . redberry . rings . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_4 IDENT_7 = parse ( IDENT_2 . toString ( IDENT_0 ) , domain , cc . redberry . rings . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } toString ( java . util . List ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) . append ( STRING_1 ) ; for ( int i = 0 ; ; i ++ ) { sb . append ( STRING_1 ) . append ( java . util . Arrays . stream ( d . get ( i ) ) . METHOD_2 ( Double :: toString ) . collect ( java . util . stream . IDENT_8 . METHOD_3 ( STRING_2 ) ) ) . append ( STRING_3 ) ; if ( i == ( ( d . size ( ) ) - 1 ) ) break ; sb . append ( STRING_2 ) ; } sb . append ( STRING_3 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 