METHOD_0 ( ) { org . apache . commons . math3 . random . IDENT_0 IDENT_1 = METHOD_1 ( ) ; org . apache . commons . math3 . random . IDENT_2 IDENT_3 = METHOD_2 ( ) ; cc . redberry . rings . IDENT_4 IDENT_5 = cc . redberry . rings . IDENT_6 . METHOD_3 ( cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_4 ( ( 1 << 15 ) ) ) ; org . apache . commons . math3 . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = new org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_5 ( ) ; org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_5 IDENT_13 = new org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_5 ( ) ; org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_5 IDENT_14 = new org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_5 ( ) ; long start ; long IDENT_15 ; int IDENT_16 = 100 ; int IDENT_17 = METHOD_6 ( 10 , 10 ) ; int IDENT_18 = 5 ; int IDENT_19 = INT_0 ; int IDENT_20 = 1000 ; int [ ] IDENT_21 = cc . redberry . rings . util . IDENT_22 . METHOD_7 ( 0 , IDENT_18 ) ; for ( int i = 0 ; i < IDENT_16 ; ++ i ) { if ( i == ( IDENT_16 / 10 ) ) java . util . Arrays . asList ( IDENT_12 , IDENT_13 , IDENT_14 ) . METHOD_8 ( METHOD_5 :: IDENT_23 ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_26 . IDENT_26 p = cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_27 . METHOD_9 ( IDENT_18 , IDENT_3 . METHOD_10 ( IDENT_19 , ( 2 * IDENT_19 ) ) , IDENT_3 . METHOD_10 ( IDENT_20 , ( 2 * IDENT_20 ) ) , IDENT_5 , IDENT_1 ) ; int [ ] IDENT_28 = new int [ 3 + ( IDENT_1 . METHOD_10 ( ( ( p . IDENT_29 ) - 3 ) ) ) ] ; long [ ] values = new long [ IDENT_28 . length ] ; cc . redberry . rings . util . IDENT_22 . METHOD_11 ( IDENT_21 , IDENT_1 ) ; java . lang . System . METHOD_12 ( IDENT_21 , 0 , IDENT_28 , 0 , values . length ) ; start = java . lang . System . METHOD_13 ( ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_30 IDENT_31 = p . METHOD_14 ( IDENT_28 ) ; IDENT_15 = ( java . lang . System . METHOD_13 ( ) ) - start ; IDENT_12 . METHOD_15 ( IDENT_15 ) ; IDENT_13 . METHOD_15 ( IDENT_15 ) ; for ( int IDENT_32 = 0 ; IDENT_32 < IDENT_17 ; ++ IDENT_32 ) { for ( int j = 0 ; j < ( values . length ) ; j ++ ) values [ j ] = IDENT_5 . METHOD_16 ( IDENT_1 ) ; start = java . lang . System . METHOD_13 ( ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_26 . IDENT_26 IDENT_33 = IDENT_31 . evaluate ( values ) ; IDENT_15 = ( java . lang . System . METHOD_13 ( ) ) - start ; IDENT_12 . METHOD_15 ( IDENT_15 ) ; start = java . lang . System . METHOD_13 ( ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_26 . IDENT_26 IDENT_34 = p . METHOD_17 ( IDENT_28 , values ) ; IDENT_15 = ( java . lang . System . METHOD_13 ( ) ) - start ; IDENT_14 . METHOD_15 ( IDENT_15 ) ; "<AssertPlaceHolder>" ; } } System . out . println ( ( STRING_0 + ( METHOD_18 ( IDENT_12 ) ) ) ) ; System . out . println ( ( STRING_1 + ( METHOD_18 ( IDENT_13 ) ) ) ) ; System . out . println ( ( STRING_2 + ( METHOD_18 ( IDENT_14 ) ) ) ) ; } METHOD_17 ( int , long ) { value = IDENT_5 . METHOD_19 ( value ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_35 < cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_36 > IDENT_37 = new cc . redberry . rings . IDENT_24 . IDENT_25 . METHOD_20 ( IDENT_38 ) ; cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_26 . IDENT_39 IDENT_40 = new cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_26 . METHOD_21 ( value , IDENT_5 ) ; for ( cc . redberry . rings . IDENT_24 . IDENT_25 . IDENT_36 el : IDENT_41 ) { long val = IDENT_5 . METHOD_22 ( el . IDENT_42 , IDENT_40 . METHOD_23 ( el . IDENT_43 [ IDENT_44 ] ) ) ; add ( IDENT_37 , el . METHOD_24 ( IDENT_44 ) . METHOD_25 ( val ) ) ; } return new cc . redberry . rings . IDENT_24 . IDENT_25 . METHOD_26 ( ( ( IDENT_29 ) - 1 ) , IDENT_5 , IDENT_38 , IDENT_37 ) ; }
org . junit . Assert . assertEquals ( IDENT_34 , IDENT_33 ) 