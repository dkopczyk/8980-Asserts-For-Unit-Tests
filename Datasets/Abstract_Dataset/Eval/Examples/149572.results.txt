METHOD_0 ( ) { long IDENT_0 = INT_0 ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 a = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_4 . create ( 5 , 9 , 4 , 9 , 8 , 12 , INT_1 , 9 , 1 , 6 , 15 , 7 , INT_1 , 2 , INT_1 , INT_2 , INT_1 , 10 , 5 , 1 ) . METHOD_1 ( METHOD_1 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 b = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_4 . create ( INT_1 , 15 , 9 , 5 , INT_1 , 5 , INT_3 , 9 , 1 , 0 , 16 , 12 , INT_1 , 5 , 15 , 10 , 15 , 2 , INT_3 , 3 , 1 , 16 , 16 , 12 , INT_2 , 1 , 12 , INT_1 , 1 , 15 , 1 ) . METHOD_1 ( METHOD_1 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_5 . IDENT_6 IDENT_7 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_5 . METHOD_2 ( b ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 [ ] IDENT_8 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_5 . METHOD_3 ( a , b , IDENT_7 , true ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 [ ] IDENT_9 = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_5 . METHOD_4 ( a , b , true ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_10 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_10 , boolean ) { cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_10 < IDENT_11 > [ ] r = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_5 ( IDENT_12 , IDENT_13 , IDENT_14 ) ; if ( r != null ) return r ; return cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_6 ( IDENT_12 , IDENT_13 , IDENT_12 . IDENT_15 . METHOD_7 ( ) , IDENT_14 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_8 , IDENT_9 ) 