METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . BigInteger IDENT_1 = new cc . redberry . rings . IDENT_0 . BigInteger ( STRING_0 ) ; org . apache . commons . math3 . random . IDENT_2 IDENT_3 = METHOD_1 ( ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > IDENT_7 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_8 . METHOD_2 ( INT_0 , IDENT_1 , IDENT_3 ) ; org . apache . commons . math3 . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = new org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_3 ( ) ; org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_3 IDENT_13 = new org . apache . commons . math3 . IDENT_9 . IDENT_10 . METHOD_3 ( ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_14 . IDENT_15 < cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > > IDENT_16 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_14 . METHOD_4 ( IDENT_7 ) ; long IDENT_17 = METHOD_5 ( 1000 , INT_1 ) ; for ( int i = 0 ; i < IDENT_17 ; i ++ ) { if ( i == ( IDENT_17 / 10 ) ) { IDENT_12 . METHOD_6 ( ) ; IDENT_13 . METHOD_6 ( ) ; } cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > IDENT_18 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_8 . METHOD_7 ( ( ( 3 * ( IDENT_7 . IDENT_19 ) ) / 2 ) , IDENT_1 , IDENT_3 ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > IDENT_20 = IDENT_18 . METHOD_8 ( new cc . redberry . rings . METHOD_9 ( IDENT_1 ) ) ; long start = java . lang . System . METHOD_10 ( ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > [ ] IDENT_21 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_14 . METHOD_11 ( IDENT_20 , IDENT_7 , true ) ; long IDENT_22 = ( java . lang . System . METHOD_10 ( ) ) - start ; IDENT_12 . METHOD_12 ( IDENT_22 ) ; start = java . lang . System . METHOD_10 ( ) ; cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 < cc . redberry . rings . IDENT_0 . BigInteger > [ ] IDENT_23 = cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_14 . METHOD_13 ( IDENT_20 , IDENT_7 , IDENT_16 , true ) ; long IDENT_24 = ( java . lang . System . METHOD_10 ( ) ) - start ; IDENT_13 . METHOD_12 ( IDENT_24 ) ; "<AssertPlaceHolder>" ; } System . out . println ( STRING_1 ) ; System . out . println ( IDENT_12 . METHOD_14 ( 50 ) ) ; System . out . println ( STRING_2 ) ; System . out . println ( IDENT_13 . METHOD_14 ( 50 ) ) ; } METHOD_13 ( IDENT_25 extends cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_26 , IDENT_25 extends cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_26 , cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_27 , boolean ) { if ( IDENT_20 instanceof cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_28 ) return ( ( IDENT_25 [ ] ) ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . METHOD_13 ( ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_28 ) ( IDENT_20 ) ) , ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_28 ) ( IDENT_7 ) ) , ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_15 ) ( IDENT_29 ) ) , IDENT_30 ) ) ) ; else if ( IDENT_20 instanceof cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 ) return ( ( IDENT_25 [ ] ) ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . METHOD_13 ( ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 ) ( IDENT_20 ) ) , ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_6 ) ( IDENT_7 ) ) , ( ( cc . redberry . rings . IDENT_4 . IDENT_5 . IDENT_14 . IDENT_15 ) ( IDENT_29 ) ) , IDENT_30 ) ) ) ; else throw new java . lang . RuntimeException ( IDENT_20 . getClass ( ) . toString ( ) ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_21 , IDENT_23 ) 