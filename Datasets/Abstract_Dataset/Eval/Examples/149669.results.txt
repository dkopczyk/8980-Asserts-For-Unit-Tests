METHOD_0 ( ) { final java . util . List < java . lang . Exception > exceptions = new java . util . ArrayList < java . lang . Exception > ( ) ; java . lang . Thread [ ] IDENT_0 = new java . lang . Thread [ 100 ] ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { IDENT_0 [ i ] = new java . lang . Thread ( new java . lang . METHOD_1 ( ) { @ IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . report . Override public void run ( ) { try { IDENT_5 . METHOD_2 ( "test" , STRING_0 ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; exceptions . add ( e ) ; } } } ) ; } for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { IDENT_0 [ i ] . start ( ) ; } for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { IDENT_0 [ i ] . join ( ) ; } "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String ) { java . io . File file = new java . io . File ( new java . io . File ( IDENT_6 , host ) , IDENT_7 ) ; if ( ! ( file . exists ( ) ) ) { log . warn ( IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_8 . getMessage ( STRING_1 , host , IDENT_7 ) ) ; return null ; } java . lang . String IDENT_9 = METHOD_3 ( file ) ; org . IDENT_10 . IDENT_11 . IDENT_12 IDENT_10 = new org . IDENT_10 . IDENT_11 . METHOD_4 ( ) ; return ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_10 . load ( IDENT_9 ) ) ) ; }
org . junit . Assert . assertEquals ( 0 , exceptions . size ( ) ) 