METHOD_0 ( ) { when ( fr . gouv . vitam . IDENT_0 . client . IDENT_1 . mock . get ( ) ) . thenReturn ( javax . ws . rs . core . Response . status ( Status . IDENT_2 ) . build ( ) ) ; fr . gouv . vitam . IDENT_0 . client . IDENT_1 . client . METHOD_1 ( fr . gouv . vitam . IDENT_0 . client . IDENT_1 . IDENT_3 , fr . gouv . vitam . IDENT_0 . client . IDENT_1 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { fr . gouv . vitam . common . IDENT_5 . METHOD_2 ( IDENT_6 . IDENT_7 . getMessage ( ) , IDENT_8 , IDENT_9 ) ; javax . ws . rs . core . Response response = null ; try { response = METHOD_3 ( IDENT_10 . IDENT_11 , ( ( ( ( fr . gouv . vitam . IDENT_0 . client . IDENT_12 . IDENT_13 ) + IDENT_8 ) + ( fr . gouv . vitam . IDENT_0 . client . IDENT_12 . IDENT_14 ) ) + IDENT_9 ) , null , IDENT_15 . IDENT_16 ) ; if ( ( Response . Status . IDENT_2 . getStatusCode ( ) ) == ( response . getStatus ( ) ) ) { return response ; } else if ( ( Response . Status . IDENT_17 . getStatusCode ( ) ) == ( response . getStatus ( ) ) ) { fr . gouv . vitam . IDENT_0 . client . IDENT_12 . LOGGER . error ( IDENT_6 . IDENT_18 . getMessage ( ) ) ; throw new fr . gouv . vitam . IDENT_0 . api . exception . METHOD_4 ( IDENT_6 . IDENT_18 . getMessage ( ) ) ; } else { fr . gouv . vitam . IDENT_0 . client . IDENT_12 . LOGGER . error ( response . METHOD_5 ( ) . METHOD_6 ( ) ) ; throw new fr . gouv . vitam . IDENT_0 . api . exception . METHOD_7 ( IDENT_6 . IDENT_19 . getMessage ( ) ) ; } } catch ( final fr . gouv . vitam . common . exception . IDENT_20 e ) { fr . gouv . vitam . IDENT_0 . client . IDENT_12 . LOGGER . error ( fr . gouv . vitam . IDENT_0 . client . IDENT_12 . IDENT_21 , e ) ; throw new fr . gouv . vitam . IDENT_0 . api . exception . METHOD_7 ( e ) ; } finally { if ( ( response != null ) && ( ( response . getStatus ( ) ) != ( Status . IDENT_2 . getStatusCode ( ) ) ) ) { METHOD_8 ( response ) ; } } }
org . junit . Assert . assertTrue ( true ) 