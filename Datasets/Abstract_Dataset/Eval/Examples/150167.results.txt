METHOD_0 ( ) { java . util . List < java . lang . Integer > IDENT_0 = new java . util . ArrayList < java . lang . Integer > ( ) ; IDENT_0 . add ( 5 ) ; IDENT_0 . add ( 6 ) ; IDENT_0 . add ( 7 ) ; IDENT_0 . add ( 8 ) ; java . util . List < java . lang . String > IDENT_1 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_1 . add ( STRING_0 ) ; IDENT_1 . add ( STRING_1 ) ; IDENT_1 . add ( STRING_2 ) ; IDENT_1 . add ( STRING_3 ) ; java . util . Properties props = new java . util . Properties ( ) ; props . put ( IDENT_2 . IDENT_3 , STRING_4 ) ; props . put ( IDENT_2 . IDENT_4 , STRING_5 ) ; props . put ( IDENT_2 . IDENT_5 , STRING_6 ) ; java . lang . String actual = uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . METHOD_1 ( props , IDENT_0 , IDENT_1 ) ; java . lang . String expected = STRING_7 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Properties , java . util . List , java . util . List ) { if ( ( ( ( IDENT_0 != null ) && ( ( IDENT_0 . size ( ) ) > 0 ) ) && ( IDENT_1 != null ) ) && ( ( IDENT_1 . size ( ) ) > 0 ) ) { java . lang . StringBuffer result = new java . lang . StringBuffer ( uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . IDENT_11 ) ; uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . METHOD_2 ( result , uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . IDENT_12 , STRING_8 ) ; uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . METHOD_3 ( result , props ) ; uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . METHOD_4 ( result , IDENT_0 ) ; uk . ac . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_2 . METHOD_5 ( result , IDENT_1 ) ; return result . toString ( ) ; } else { return null ; } }
org . junit . Assert . assertEquals ( expected , actual ) 