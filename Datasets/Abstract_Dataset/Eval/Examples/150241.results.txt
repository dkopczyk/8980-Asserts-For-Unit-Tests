METHOD_0 ( ) { java . lang . Integer [ ] IDENT_0 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . test . Integer [ ] { 0 , 2 } ; java . util . Map < java . lang . Integer , java . lang . String > IDENT_5 = new java . util . HashMap ( ) ; IDENT_5 . put ( 0 , STRING_0 ) ; IDENT_6 . METHOD_1 ( STRING_1 ) ; IDENT_6 . METHOD_1 ( STRING_2 ) ; java . util . concurrent . IDENT_7 < java . lang . Integer , edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 > IDENT_9 = new java . util . concurrent . METHOD_2 ( ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 IDENT_10 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_3 ( STRING_0 , STRING_3 , 3 ) ; IDENT_9 . put ( 0 , IDENT_10 ) ; IDENT_9 . put ( 1 , IDENT_10 ) ; IDENT_9 . put ( 2 , IDENT_10 ) ; java . util . Map < java . lang . String , java . lang . Integer > IDENT_11 = new java . util . HashMap ( ) ; IDENT_11 . put ( STRING_4 , 0 ) ; IDENT_11 . put ( STRING_5 , 1 ) ; IDENT_11 . put ( STRING_6 , 2 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_12 IDENT_13 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_11 , IDENT_9 ) ; System . out . println ( IDENT_13 . METHOD_5 ( ) . toString ( ) ) ; IDENT_6 . METHOD_6 ( STRING_1 , STRING_7 , IDENT_13 ) ; IDENT_6 . METHOD_6 ( STRING_1 , STRING_1 0 , IDENT_13 ) ; IDENT_6 . METHOD_6 ( STRING_2 , STRING_8 , IDENT_13 ) ; IDENT_6 . METHOD_6 ( STRING_2 , STRING_9 , IDENT_13 ) ; IDENT_6 . METHOD_6 ( STRING_2 , STRING_1 1 , IDENT_13 ) ; IDENT_6 . METHOD_7 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( ) { return IDENT_14 ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_6 . METHOD_8 ( ) ) 