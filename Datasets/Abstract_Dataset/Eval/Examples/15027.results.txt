METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; new org . apache . hadoop . hive . IDENT_1 . client . builder . METHOD_1 ( ) . setName ( IDENT_0 ) . METHOD_2 ( STRING_1 ) . create ( client ) ; try { java . lang . String IDENT_2 = java . lang . String . format ( STRING_2 , org . apache . hadoop . hive . IDENT_1 . IDENT_3 . IDENT_4 , IDENT_0 , org . apache . hadoop . hive . IDENT_1 . IDENT_3 . IDENT_5 ) ; org . apache . hadoop . hive . IDENT_1 . tools . IDENT_6 . IDENT_7 . execute ( new org . apache . hadoop . hive . IDENT_1 . tools . IDENT_6 . METHOD_3 ( ) , IDENT_2 ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( org . apache . hadoop . hive . IDENT_1 . IDENT_8 e ) { } java . util . Set < java . lang . String > IDENT_9 = new java . util . HashSet ( client . METHOD_4 ( org . apache . hadoop . hive . IDENT_1 . IDENT_3 . IDENT_5 ) ) ; "<AssertPlaceHolder>" ; } contains ( org . apache . hadoop . hive . IDENT_10 . plan . IDENT_11 ) { return IDENT_12 . containsKey ( IDENT_13 ) ; }
org . junit . Assert . assertTrue ( IDENT_9 . contains ( org . apache . hadoop . hive . IDENT_1 . IDENT_3 . IDENT_4 ) ) 