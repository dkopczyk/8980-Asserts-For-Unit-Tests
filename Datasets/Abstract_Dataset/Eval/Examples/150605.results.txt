METHOD_0 ( ) { java . lang . String [ ] args = new java . lang . String [ ] { STRING_0 , STRING_1 , "" } ; java . util . List < java . lang . String > IDENT_0 = IDENT_1 . METHOD_1 ( IDENT_2 , command , null , args ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_3 . command . IDENT_4 , org . IDENT_3 . command . IDENT_5 , java . lang . String , java . lang . String [ ] ) { if ( METHOD_2 ( command , args ) ) { return null ; } java . lang . String IDENT_6 = args [ 0 ] ; java . util . Collection < java . lang . String > options = java . util . Collections . emptyList ( ) ; if ( ( ( args . length ) == 2 ) && ( STRING_2 . equalsIgnoreCase ( IDENT_6 ) ) ) { options = IDENT_7 ; } else if ( ( ( args . length ) == 2 ) && ( STRING_0 . equalsIgnoreCase ( IDENT_6 ) ) ) { options = IDENT_8 . METHOD_3 ( IDENT_9 . IDENT_10 . toString ( ) ) ; } else if ( ( ( args . length ) == 2 ) && ( org . apache . commons . lang3 . StringUtils . METHOD_4 ( IDENT_6 , STRING_3 , STRING_4 ) ) ) { options = IDENT_11 . METHOD_5 ( ) ; } else if ( ( ( args . length ) == 2 ) && ( STRING_5 . equalsIgnoreCase ( IDENT_6 ) ) ) { options = IDENT_12 . METHOD_5 ( ) ; } else if ( ( ( args . length ) == 2 ) && ( STRING_6 . equalsIgnoreCase ( IDENT_6 ) ) ) { options = java . util . Collections . METHOD_6 ( "1" ) ; } else if ( ( ( args . length ) == 3 ) && ( STRING_6 . equalsIgnoreCase ( IDENT_6 ) ) ) { options = IDENT_7 ; } else if ( ( args . length ) == 1 ) { options = IDENT_13 . stream ( ) . filter ( ( cs ) -> ( cs . METHOD_7 ( ) . isEmpty ( ) ) || ( IDENT_14 . METHOD_8 ( ( STRING_7 + ( cs . METHOD_7 ( ) ) ) ) ) ) . map ( IDENT_15 :: name ) . collect ( java . util . stream . IDENT_16 . METHOD_9 ( ) ) ; } return METHOD_10 ( options , args [ ( ( args . length ) - 1 ) ] ) ; }
org . junit . Assert . assertNull ( IDENT_0 ) 