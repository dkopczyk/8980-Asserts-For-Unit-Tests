METHOD_0 ( ) { METHOD_1 ( STRING_0 6 ) ; METHOD_1 ( STRING_0 1 ) ; METHOD_1 ( STRING_1 ) ; METHOD_1 ( STRING_0 7 ) ; METHOD_1 ( STRING_0 0 ) ; METHOD_1 ( STRING_0 2 ) ; METHOD_1 ( ( ( STRING_2 + ( IDENT_0 ) ) + STRING_3 ) ) ; int [ ] [ ] IDENT_1 = new int [ ] [ ] { new int [ ] { 1 , 5 , 1 } , new int [ ] { 2 , 6 , 1 } , new int [ ] { 1 , INT_0 , 0 } } ; METHOD_1 ( ( STRING_4 + ( METHOD_2 ( IDENT_1 ) ) ) ) ; int [ ] [ ] IDENT_2 = new int [ ] [ ] { new int [ ] { 1 , 7 } , new int [ ] { 3 , 8 } } ; METHOD_1 ( ( STRING_5 + ( METHOD_2 ( IDENT_2 ) ) ) ) ; java . lang . String IDENT_3 = STRING_0 ; java . lang . String IDENT_4 = ( STRING_6 + IDENT_3 ) + STRING_0 4 ; if ( false ) { java . util . List < java . lang . String > IDENT_5 = METHOD_1 ( IDENT_3 ) ; java . util . List < java . lang . String > IDENT_6 = METHOD_1 ( IDENT_4 ) ; } java . lang . String stmt = ( ( ( STRING_0 5 + IDENT_4 ) + STRING_7 ) + STRING_0 3 ) + STRING_8 ; IDENT_7 . METHOD_3 ( IDENT_8 . IDENT_9 . IDENT_10 , false ) ; METHOD_1 ( stmt ) ; int [ ] [ ] IDENT_11 = new int [ ] [ ] { new int [ ] { 1 , 5 , 0 } , new int [ ] { 1 , 7 , 1 } , new int [ ] { 1 , INT_0 , 0 } , new int [ ] { 2 , 6 , 1 } , new int [ ] { 3 , 8 , 1 } } ; java . util . List < java . lang . String > r = METHOD_1 ( STRING_9 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( int [ ] [ ] ) { assert ( IDENT_12 . length ) > 0 ; int [ ] [ ] IDENT_13 = IDENT_12 . METHOD_5 ( ) ; java . util . Arrays . METHOD_6 ( IDENT_13 , new org . apache . hadoop . hive . IDENT_14 . IDENT_15 . METHOD_7 ( ) ) ; java . util . List < java . lang . String > rs = new java . util . ArrayList < java . lang . String > ( ) ; for ( int [ ] row : IDENT_13 ) { assert ( row . length ) > 0 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( int value : row ) { sb . append ( value ) . append ( STRING_10 ) ; } sb . METHOD_8 ( ( ( sb . length ( ) ) - 1 ) ) ; rs . add ( sb . toString ( ) ) ; } return rs ; }
org . junit . Assert . assertEquals ( METHOD_4 ( IDENT_11 ) , r ) 