METHOD_0 ( ) { int [ ] [ ] IDENT_0 = new int [ ] [ ] { new int [ ] { 2 , 1 } , new int [ ] { 4 , 3 } , new int [ ] { 5 , 6 } , new int [ ] { 7 , 8 } } ; METHOD_1 ( ( ( ( STRING_0 + ( org . apache . hadoop . hive . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ) ) + " " ) + ( org . apache . hadoop . hive . IDENT_1 . IDENT_2 . METHOD_2 ( IDENT_0 ) ) ) ) ; java . lang . String query = ( ( ( ( STRING_1 + ( org . apache . hadoop . hive . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ) ) + STRING_2 ) + STRING_3 ) + STRING_4 ) + STRING_5 ; METHOD_1 ( query ) ; java . util . List < java . lang . String > r = METHOD_1 ( ( ( STRING_6 + ( org . apache . hadoop . hive . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ) ) + STRING_7 ) ) ; int [ ] [ ] IDENT_5 = new int [ ] [ ] { new int [ ] { 5 , 6 } , new int [ ] { 7 , 8 } , new int [ ] { INT_0 , INT_0 } } ; "<AssertPlaceHolder>" ; } METHOD_3 ( int [ ] [ ] ) { assert ( IDENT_6 . length ) > 0 ; int [ ] [ ] IDENT_7 = IDENT_6 . METHOD_4 ( ) ; java . util . Arrays . METHOD_5 ( IDENT_7 , new org . apache . hadoop . hive . IDENT_1 . IDENT_2 . METHOD_6 ( ) ) ; java . util . List < java . lang . String > rs = new java . util . ArrayList < java . lang . String > ( ) ; for ( int [ ] row : IDENT_7 ) { assert ( row . length ) > 0 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( int value : row ) { sb . append ( value ) . append ( STRING_8 ) ; } sb . METHOD_7 ( ( ( sb . length ( ) ) - 1 ) ) ; rs . add ( sb . toString ( ) ) ; } return rs ; }
org . junit . Assert . assertEquals ( org . apache . hadoop . hive . IDENT_1 . IDENT_2 . METHOD_3 ( IDENT_5 ) , r ) 