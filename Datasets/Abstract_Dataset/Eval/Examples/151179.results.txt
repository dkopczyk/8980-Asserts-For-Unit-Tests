METHOD_0 ( ) { ch . IDENT_0 . IDENT_1 . IDENT_2 . pattern . IDENT_3 converter = new ch . IDENT_0 . IDENT_1 . IDENT_2 . pattern . METHOD_1 ( ) ; this . IDENT_4 . add ( STRING_0 ) ; converter . METHOD_2 ( this . IDENT_4 ) ; converter . start ( ) ; java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; char c = STRING_1 ; int IDENT_5 = 3 ; int IDENT_6 = ( ch . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) + IDENT_5 ; java . lang . StringBuilder IDENT_9 = new java . lang . StringBuilder ( ) ; java . lang . StringBuilder IDENT_10 = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < IDENT_6 ; i ++ ) { IDENT_9 . append ( c ) . append ( c ) . append ( c ) ; if ( i < ( ch . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ) { IDENT_10 . append ( c ) ; } else { IDENT_10 . append ( c ) . append ( c ) . append ( c ) ; } IDENT_9 . append ( STRING_2 ) ; IDENT_10 . append ( STRING_2 ) ; } IDENT_9 . append ( STRING_3 ) ; IDENT_10 . append ( STRING_3 ) ; IDENT_11 . METHOD_3 ( IDENT_9 . toString ( ) ) ; converter . write ( buf , IDENT_11 ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . String result = ( STRING_4 + STRING_5 ) + ( type ) ; if ( ( payload ) != null ) result += ( STRING_6 + ( payload ) ) + STRING_7 ; result += STRING_8 ; return result ; }
org . junit . Assert . assertEquals ( IDENT_10 . toString ( ) , buf . toString ( ) ) 