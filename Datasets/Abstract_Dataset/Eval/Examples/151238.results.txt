METHOD_0 ( ) { IDENT_0 . METHOD_1 ( IDENT_1 . IDENT_2 ) ; IDENT_0 . METHOD_2 ( IDENT_1 . IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( ( METHOD_4 ( ) ) == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } java . io . InputStream IDENT_4 = null ; try { java . net . URL url = ch . IDENT_5 . IDENT_6 . core . util . IDENT_7 . METHOD_5 ( METHOD_4 ( ) ) ; IDENT_4 = url . METHOD_6 ( ) ; java . security . IDENT_8 IDENT_9 = METHOD_7 ( ) ; IDENT_9 . load ( IDENT_4 , METHOD_8 ( ) . METHOD_9 ( ) ) ; return IDENT_9 ; } catch ( java . security . IDENT_10 ex ) { throw new java . security . METHOD_10 ( ( STRING_1 + ( METHOD_11 ( ) ) ) ) ; } catch ( java . security . IDENT_11 ex ) { throw new java . security . METHOD_12 ( ( STRING_2 + ( getType ( ) ) ) ) ; } catch ( java . io . IDENT_12 ex ) { throw new java . security . METHOD_13 ( ( ( METHOD_4 ( ) ) + STRING_3 ) ) ; } catch ( java . lang . Exception ex ) { throw new java . security . METHOD_13 ( ( ( ( METHOD_4 ( ) ) + STRING_4 ) + ( ex . getMessage ( ) ) ) , ex ) ; } finally { try { if ( IDENT_4 != null ) { IDENT_4 . close ( ) ; } } catch ( java . io . IOException ex ) { ex . printStackTrace ( System . err ) ; } } }
org . junit . Assert . assertNotNull ( IDENT_0 . METHOD_3 ( ) ) 