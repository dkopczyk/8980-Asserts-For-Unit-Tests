METHOD_0 ( ) { java . util . List < java . util . List < java . lang . String > > values = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; java . util . List < java . lang . String > v1 = java . util . Arrays . asList ( "1" , "a" , STRING_0 ) ; java . util . List < java . lang . String > v2 = java . util . Arrays . asList ( "2" , "b" , STRING_0 ) ; java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( "1" , STRING_1 , STRING_0 ) ; java . util . List < java . lang . String > v4 = java . util . Arrays . asList ( "2" , "a" , STRING_2 ) ; values . add ( v1 ) ; values . add ( v2 ) ; values . add ( IDENT_0 ) ; values . add ( v4 ) ; java . util . List < java . util . List < java . lang . String > > IDENT_1 = IDENT_2 . IDENT_3 . METHOD_1 ( values , org . apache . hadoop . hive . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 ) ; java . util . List < java . util . List < java . lang . String > > IDENT_9 = new java . util . ArrayList < java . util . List < java . lang . String > > ( ) ; v1 = java . util . Arrays . asList ( "1" , "2" , STRING_3 ) ; v2 = java . util . Arrays . asList ( "a" , "b" , STRING_1 , STRING_3 ) ; IDENT_0 = java . util . Arrays . asList ( STRING_0 , STRING_2 , STRING_3 ) ; IDENT_9 . add ( v1 ) ; IDENT_9 . add ( v2 ) ; IDENT_9 . add ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } add ( java . util . ArrayList ) { assert ( ( IDENT_10 != null ) && ( ( IDENT_10 . size ( ) ) > 0 ) ) && ( ( IDENT_10 . get ( 0 ) ) != null ) ; java . lang . Double IDENT_11 = IDENT_12 . get ( IDENT_10 ) ; if ( IDENT_11 == null ) { IDENT_11 = java . lang . Double . valueOf ( 1.0 ) ; } else { IDENT_11 ++ ; } IDENT_12 . put ( IDENT_10 , IDENT_11 ) ; if ( ( n ) == 0 ) { n = IDENT_10 . size ( ) ; } else { if ( ( n ) != ( IDENT_10 . size ( ) ) ) { throw new org . apache . hadoop . hive . IDENT_4 . metadata . METHOD_2 ( ( ( ( ( ( ( ( getClass ( ) . METHOD_3 ( ) ) + STRING_4 ) + STRING_5 ) + ( n ) ) + STRING_6 ) + ( IDENT_10 . size ( ) ) ) + STRING_7 ) ) ; } } if ( ( IDENT_12 . size ( ) ) > ( ( ( k ) * ( IDENT_13 ) ) * 2 ) ) { trim ( false ) ; } }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_1 ) 