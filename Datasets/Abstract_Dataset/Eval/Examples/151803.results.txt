METHOD_0 ( ) { final com . IDENT_0 . client . impl . IDENT_1 IDENT_2 = mock ( com . IDENT_0 . client . impl . IDENT_1 . class ) ; final com . IDENT_0 . client . impl . IDENT_1 IDENT_3 = mock ( com . IDENT_0 . client . impl . IDENT_1 . class ) ; final java . util . IDENT_4 < com . IDENT_0 . client . impl . IDENT_1 > IDENT_5 = new java . util . concurrent . IDENT_6 < com . IDENT_0 . client . impl . IDENT_1 > ( 10 ) ; IDENT_5 . add ( IDENT_2 ) ; IDENT_5 . add ( IDENT_3 ) ; com . IDENT_0 . client . IDENT_7 IDENT_8 = new com . IDENT_0 . client . METHOD_1 ( ) { @ com . IDENT_0 . client . test . Override MOD_0 com . IDENT_0 . client . impl . IDENT_1 METHOD_2 ( com . IDENT_0 . client . impl . IDENT_9 params , com . IDENT_0 . client . impl . IDENT_10 IDENT_11 , com . IDENT_0 . client . IDENT_12 IDENT_13 ) { return IDENT_5 . METHOD_3 ( ) ; } @ com . IDENT_0 . client . test . Override MOD_0 MOD_1 com . IDENT_0 . client . impl . IDENT_14 METHOD_4 ( ) { return mock ( com . IDENT_0 . client . impl . IDENT_14 . class ) ; } } ; IDENT_8 . METHOD_5 ( false ) ; METHOD_6 ( java . util . concurrent . IDENT_15 . class ) . when ( IDENT_2 ) . start ( ) ; METHOD_7 ( ) . when ( IDENT_3 ) . start ( ) ; com . IDENT_0 . client . IDENT_16 IDENT_17 = IDENT_8 . METHOD_8 ( new com . IDENT_0 . client . IDENT_18 [ ] { new com . IDENT_0 . client . METHOD_9 ( STRING_0 ) , new com . IDENT_0 . client . METHOD_9 ( STRING_1 ) } ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . util . concurrent . IDENT_19 , java . lang . String ) { return METHOD_8 ( executor , java . util . Collections . singletonList ( new com . IDENT_0 . client . METHOD_9 ( METHOD_10 ( ) , METHOD_11 ( ) ) ) , IDENT_20 ) ; }
org . junit . Assert . assertSame ( IDENT_3 , IDENT_17 ) 