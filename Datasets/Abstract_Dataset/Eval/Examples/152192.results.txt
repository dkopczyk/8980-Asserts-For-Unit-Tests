METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; int offset ; int IDENT_1 = 0 - ( ( ( 1000 * INT_0 ) * INT_0 ) * 8 ) ; java . util . Calendar IDENT_2 ; IDENT_2 = org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ; offset = IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . Calendar out ; java . util . regex . IDENT_6 IDENT_7 ; java . lang . String IDENT_8 ; java . time . IDENT_9 IDENT_10 ; if ( IDENT_11 == null ) { throw new org . IDENT_3 . atlas . util . common . exceptions . METHOD_4 ( new java . lang . METHOD_5 ( ) ) ; } try { IDENT_7 = org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . IDENT_12 . matcher ( IDENT_11 ) ; if ( IDENT_7 . find ( ) ) { IDENT_8 = java . lang . String . format ( STRING_1 , IDENT_7 . group ( 1 ) , IDENT_7 . group ( 2 ) ) ; IDENT_10 = java . time . IDENT_9 . of ( IDENT_8 ) ; IDENT_11 = org . apache . commons . lang3 . StringUtils . METHOD_6 ( IDENT_11 , IDENT_8 ) ; IDENT_11 = IDENT_11 + ( IDENT_10 . toString ( ) ) ; if ( ( IDENT_11 . length ( ) ) == INT_1 ) { java . lang . StringBuffer buffer = new java . lang . StringBuffer ( IDENT_11 ) ; buffer . insert ( IDENT_11 . METHOD_7 ( STRING_2 ) , org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . IDENT_13 ) ; IDENT_11 = buffer . toString ( ) ; } } else { if ( ! ( IDENT_11 . contains ( STRING_3 ) ) ) { IDENT_11 = java . lang . String . format ( STRING_4 , IDENT_11 , org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . IDENT_14 ) ; } else { if ( IDENT_11 . METHOD_8 ( STRING_3 ) ) { IDENT_11 = java . lang . String . format ( STRING_1 , IDENT_11 , org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . IDENT_14 ) ; } else { if ( java . util . regex . IDENT_15 . matches ( STRING_5 , IDENT_11 ) ) { IDENT_11 = IDENT_11 + ( org . IDENT_3 . atlas . util . IDENT_4 . IDENT_5 . IDENT_13 ) ; } } } IDENT_10 = java . time . IDENT_9 . IDENT_16 ; } java . time . IDENT_17 IDENT_18 = java . time . IDENT_17 . of ( java . time . IDENT_19 . parse ( IDENT_11 , IDENT_20 . IDENT_21 ) , IDENT_10 ) ; out = java . util . IDENT_22 . from ( java . time . IDENT_23 . from ( IDENT_18 ) ) ; } catch ( java . lang . Exception ex ) { throw new org . IDENT_3 . atlas . util . common . exceptions . METHOD_4 ( ex ) ; } return out ; }
org . junit . Assert . assertEquals ( IDENT_1 , offset ) 