METHOD_0 ( ) { org . apache . hadoop . hive . common . type . IDENT_0 IDENT_1 = org . apache . hadoop . hive . common . type . IDENT_0 . valueOf ( STRING_0 ) ; org . apache . hadoop . hive . IDENT_2 . io . IDENT_3 IDENT_4 = new org . apache . hadoop . hive . IDENT_2 . io . METHOD_1 ( IDENT_1 ) ; org . apache . hadoop . hive . IDENT_2 . io . METHOD_1 IDENT_5 = new org . apache . hadoop . hive . IDENT_2 . io . METHOD_1 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } valueOf ( java . lang . String ) { org . apache . hadoop . hive . common . type . IDENT_0 result = null ; if ( IDENT_6 == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . util . regex . IDENT_7 IDENT_8 = org . apache . hadoop . hive . common . type . IDENT_0 . IDENT_9 . get ( ) ; IDENT_8 . METHOD_2 ( IDENT_6 ) ; if ( IDENT_8 . matches ( ) ) { try { int IDENT_10 = 1 ; java . lang . String field = IDENT_8 . group ( 1 ) ; if ( ( field != null ) && ( field . equals ( STRING_2 ) ) ) { IDENT_10 = - 1 ; } int IDENT_11 = IDENT_10 * ( org . apache . hive . common . util . IDENT_12 . METHOD_3 ( STRING_3 , IDENT_8 . group ( 2 ) , 0 , Integer . MAX_VALUE ) ) ; byte IDENT_13 = ( ( byte ) ( IDENT_10 * ( org . apache . hive . common . util . IDENT_12 . METHOD_3 ( STRING_4 , IDENT_8 . group ( 3 ) , 0 , INT_0 ) ) ) ) ; byte IDENT_14 = ( ( byte ) ( IDENT_10 * ( org . apache . hive . common . util . IDENT_12 . METHOD_3 ( STRING_5 , IDENT_8 . group ( 4 ) , 0 , INT_1 ) ) ) ) ; int IDENT_15 = 0 ; int IDENT_16 = 0 ; field = IDENT_8 . group ( 5 ) ; if ( field != null ) { java . math . BigDecimal IDENT_17 = new java . math . BigDecimal ( field ) ; if ( ( IDENT_17 . compareTo ( IDENT_12 . IDENT_18 ) ) > 0 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_6 + IDENT_17 ) + STRING_7 ) ) ; } IDENT_15 = IDENT_10 * ( IDENT_17 . METHOD_4 ( ) ) ; IDENT_16 = IDENT_10 * ( IDENT_17 . METHOD_5 ( new java . math . BigDecimal ( IDENT_17 . METHOD_6 ( ) ) ) . METHOD_7 ( IDENT_12 . IDENT_19 ) . METHOD_4 ( ) ) ; } result = new org . apache . hadoop . hive . common . type . METHOD_8 ( IDENT_11 , IDENT_13 , IDENT_14 , IDENT_15 , IDENT_16 ) ; } catch ( java . lang . Exception err ) { throw new java . lang . IllegalArgumentException ( ( STRING_8 + IDENT_6 ) , err ) ; } } else { throw new java . lang . IllegalArgumentException ( ( STRING_9 + IDENT_6 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_5 ) 