METHOD_0 ( ) { java . util . Set < com . IDENT_0 . IDENT_1 . types . IDENT_2 > IDENT_3 = new java . util . HashSet < com . IDENT_0 . IDENT_1 . types . IDENT_2 > ( ) ; IDENT_3 . add ( new com . IDENT_0 . IDENT_1 . types . METHOD_1 ( 0 , INT_0 ) ) ; IDENT_3 . add ( new com . IDENT_0 . IDENT_1 . types . METHOD_1 ( INT_1 , INT_2 ) ) ; IDENT_3 . add ( new com . IDENT_0 . IDENT_1 . types . METHOD_1 ( INT_3 , INT_4 ) ) ; IDENT_3 . add ( new com . IDENT_0 . IDENT_1 . types . METHOD_1 ( INT_5 , INT_6 ) ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 g : new com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 [ ] { IDENT_5 . IDENT_6 , IDENT_5 . IDENT_7 } ) { java . util . Set < com . IDENT_0 . IDENT_1 . types . METHOD_1 > IDENT_8 = new java . util . HashSet < com . IDENT_0 . IDENT_1 . types . METHOD_1 > ( ) ; for ( com . IDENT_0 . IDENT_1 . types . METHOD_1 time : com . IDENT_0 . IDENT_1 . types . METHOD_1 . METHOD_2 ( g , INT_7 , INT_8 ) ) { IDENT_8 . add ( time ) ; METHOD_3 ( time , g ) ; } "<AssertPlaceHolder>" ; } } METHOD_3 ( com . IDENT_0 . IDENT_1 . types . METHOD_1 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 ) { int init = g . METHOD_4 ( r . start ) ; for ( long time = r . start ; time <= ( r . IDENT_9 ) ; time += 1000 ) org . junit . Assert . assertEquals ( init , g . METHOD_4 ( time ) ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_8 ) 