METHOD_0 ( ) { org . glassfish . IDENT_0 . IDENT_1 . binding . IDENT_2 IDENT_3 = new org . glassfish . IDENT_0 . IDENT_1 . binding . METHOD_1 ( ) { @ org . IDENT_4 . tests . Override MOD_0 void METHOD_2 ( ) { METHOD_3 ( org . IDENT_4 . IDENT_5 . METHOD_4 ( org . apache . logging . log4j . IDENT_6 . class , IDENT_7 :: IDENT_8 , org . METHOD_4 . IDENT_9 . METHOD_5 ( ) ) . as ( org . glassfish . IDENT_0 . IDENT_1 . IDENT_10 . class ) ) ; METHOD_6 ( org . METHOD_4 . tests . IDENT_11 . IDENT_12 . class ) ; } } ; org . glassfish . IDENT_0 . api . IDENT_13 IDENT_14 = org . glassfish . IDENT_0 . IDENT_1 . IDENT_15 . METHOD_7 ( IDENT_16 . METHOD_8 ( ) , IDENT_3 ) ; org . METHOD_4 . tests . IDENT_11 . IDENT_12 service = IDENT_14 . METHOD_9 ( org . METHOD_4 . tests . IDENT_11 . IDENT_12 . class ) ; "<AssertPlaceHolder>" ; } as ( java . lang . Class ) { java . util . IDENT_17 < org . METHOD_4 . IDENT_18 < ? , IDENT_19 > > IDENT_20 = java . util . IDENT_17 . load ( IDENT_21 ) ; java . util . stream . IDENT_22 < org . METHOD_4 . IDENT_18 < ? , IDENT_19 > > IDENT_23 = stream ( IDENT_20 . METHOD_10 ( ) , false ) ; java . util . function . IDENT_24 < org . METHOD_4 . IDENT_18 < ? , IDENT_19 > > IDENT_25 = ( service ) -> service . METHOD_11 ( this , binding ) ; java . util . Optional < org . METHOD_4 . IDENT_18 < ? , IDENT_19 > > IDENT_26 = IDENT_23 . filter ( IDENT_25 ) . METHOD_12 ( ) ; @ org . METHOD_4 . METHOD_13 ( STRING_0 ) IDENT_27 IDENT_28 = ( ( IDENT_27 ) ( IDENT_26 . METHOD_14 ( METHOD_15 ( binding ) ) . METHOD_16 ( this ) ) ) ; return IDENT_28 ; }
org . junit . Assert . assertEquals ( org . METHOD_4 . tests . IDENT_11 . IDENT_12 . class . getName ( ) , service . logger . getName ( ) ) 