METHOD_0 ( ) { com . IDENT_0 . example . IDENT_1 example = new com . IDENT_0 . example . METHOD_1 ( ) ; org . apache . hadoop . hive . IDENT_2 . IDENT_3 . IDENT_4 [ ] IDENT_5 = new org . apache . hadoop . hive . IDENT_2 . IDENT_3 . IDENT_4 [ ] { org . apache . hadoop . hive . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_8 } ; java . lang . String name = STRING_0 ; try { example . METHOD_2 ( IDENT_5 ) ; } catch ( java . lang . Exception ex ) { } java . util . ArrayList < java . lang . Object [ ] > results = example . METHOD_3 ( name ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { java . util . ArrayList < java . lang . Object [ ] > result = new java . util . ArrayList < java . lang . Object [ ] > ( ) ; if ( ( name == null ) || ( name . isEmpty ( ) ) ) { return result ; } java . lang . String [ ] tokens = name . split ( STRING_1 ) ; if ( ( tokens . length ) == 2 ) { result . add ( new java . lang . Object [ ] { tokens [ 0 ] , tokens [ 1 ] } ) ; } else if ( ( ( tokens . length ) == 4 ) && ( tokens [ 1 ] . equals ( STRING_2 ) ) ) { result . add ( new java . lang . Object [ ] { tokens [ 0 ] , tokens [ 3 ] } ) ; result . add ( new java . lang . Object [ ] { tokens [ 2 ] , tokens [ 3 ] } ) ; } return result ; }
org . junit . Assert . assertEquals ( 0 , results . size ( ) ) 