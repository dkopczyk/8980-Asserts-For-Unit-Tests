METHOD_0 ( ) { org . apache . hadoop . hive . IDENT_0 . api . IDENT_1 source = METHOD_1 ( org . apache . hadoop . hive . IDENT_0 . client . IDENT_2 . IDENT_3 , STRING_0 1 , org . apache . hadoop . hive . IDENT_0 . client . IDENT_2 . METHOD_2 ( ) , ( ( IDENT_4 . METHOD_3 ( ) ) + STRING_1 ) ) ; org . apache . hadoop . hive . IDENT_0 . api . IDENT_1 IDENT_5 = METHOD_1 ( org . apache . hadoop . hive . IDENT_0 . client . IDENT_2 . IDENT_3 , STRING_2 , org . apache . hadoop . hive . IDENT_0 . client . IDENT_2 . METHOD_2 ( ) , ( ( IDENT_4 . METHOD_3 ( ) ) + STRING_3 ) ) ; org . apache . hadoop . hive . IDENT_0 . api . IDENT_6 [ ] IDENT_7 = new org . apache . hadoop . hive . IDENT_0 . api . IDENT_6 [ 2 ] ; IDENT_7 [ 0 ] = METHOD_4 ( source , com . google . common . collect . Lists . newArrayList ( STRING_4 , STRING_5 , STRING_6 ) , ( ( source . METHOD_5 ( ) . METHOD_6 ( ) ) + STRING_0 0 ) ) ; IDENT_7 [ 1 ] = METHOD_4 ( source , com . google . common . collect . Lists . newArrayList ( STRING_4 , STRING_7 , STRING_8 ) , ( ( source . METHOD_5 ( ) . METHOD_6 ( ) ) + STRING_0 ) ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_8 = org . apache . hadoop . hive . IDENT_0 . client . IDENT_2 . METHOD_7 ( IDENT_7 [ 1 ] ) ; try { client . METHOD_8 ( IDENT_8 , source . METHOD_9 ( ) , source . METHOD_10 ( ) , IDENT_5 . METHOD_9 ( ) , IDENT_5 . METHOD_10 ( ) ) ; org . junit . Assert . fail ( STRING_9 ) ; } catch ( org . apache . hadoop . hive . IDENT_0 . api . IDENT_9 e ) { } METHOD_11 ( source , IDENT_5 , com . google . common . collect . Lists . newArrayList ( IDENT_7 [ 0 ] , IDENT_7 [ 1 ] ) ) ; java . util . List < org . apache . hadoop . hive . IDENT_0 . api . IDENT_6 > IDENT_10 = client . METHOD_12 ( IDENT_5 . METHOD_9 ( ) , IDENT_5 . METHOD_10 ( ) , ( ( short ) ( - 1 ) ) ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { com . google . common . base . IDENT_11 . METHOD_13 ( getPath ( ) ) ; try { org . apache . hadoop . fs . IDENT_12 fs = org . apache . hadoop . fs . IDENT_12 . get ( getPath ( ) . METHOD_14 ( ) , org . apache . hadoop . hive . IDENT_13 . session . IDENT_14 . METHOD_15 ( ) ) ; return ( ! ( fs . exists ( getPath ( ) ) ) ) || ( ( fs . METHOD_16 ( getPath ( ) , IDENT_15 . IDENT_16 ) . length ) == 0 ) ; } catch ( java . io . IOException e ) { throw new org . apache . hadoop . hive . IDENT_13 . metadata . METHOD_17 ( e ) ; } }
org . junit . Assert . assertTrue ( IDENT_10 . isEmpty ( ) ) 