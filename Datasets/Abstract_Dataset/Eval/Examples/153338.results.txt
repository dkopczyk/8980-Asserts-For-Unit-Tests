METHOD_0 ( ) { javax . servlet . http . IDENT_0 IDENT_1 = mock ( javax . servlet . http . IDENT_0 . class ) ; javax . servlet . http . IDENT_2 IDENT_3 = mock ( javax . servlet . http . IDENT_2 . class ) ; uk . ac . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = mock ( uk . ac . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . class ) ; org . json . JSONObject IDENT_10 = new org . json . JSONObject ( ) ; IDENT_10 . put ( STRING_0 , STRING_1 ) ; IDENT_10 . put ( STRING_2 , STRING_3 ) ; IDENT_10 . put ( STRING_4 , org . joda . time . IDENT_11 . parse ( STRING_5 ) ) ; IDENT_10 . put ( STRING_6 , servlet . METHOD_1 ( dataset ) ) ; org . json . IDENT_12 IDENT_13 = new org . json . METHOD_2 ( ) ; for ( uk . ac . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 . IDENT_15 . IDENT_16 IDENT_17 : dataset . METHOD_3 ( ) ) { org . json . JSONObject IDENT_18 = new org . json . JSONObject ( ) ; IDENT_18 . put ( STRING_0 , IDENT_17 . getId ( ) ) ; IDENT_18 . put ( STRING_2 , STRING_7 ) ; IDENT_13 . put ( IDENT_18 ) ; } IDENT_10 . put ( STRING_8 , IDENT_13 ) ; servlet . METHOD_4 ( IDENT_9 ) ; when ( IDENT_1 . METHOD_5 ( STRING_0 ) ) . thenReturn ( STRING_1 ) ; when ( IDENT_9 . METHOD_6 ( ) ) . thenReturn ( config ) ; java . io . StringWriter IDENT_19 = new java . io . StringWriter ( ) ; java . io . IDENT_20 IDENT_21 = new java . io . METHOD_7 ( IDENT_19 ) ; when ( IDENT_3 . METHOD_8 ( ) ) . thenReturn ( IDENT_21 ) ; servlet . METHOD_9 ( IDENT_1 , IDENT_3 ) ; java . lang . String result = IDENT_19 . METHOD_10 ( ) . toString ( ) . trim ( ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( super . toString ( ) ) ; sb . append ( STRING_9 ) ; sb . append ( STRING_10 ) ; sb . append ( IDENT_22 . toString ( ) ) ; sb . append ( STRING_11 ) ; sb . append ( STRING_12 ) ; sb . append ( STRING_13 ) ; sb . append ( IDENT_23 . toString ( ) ) ; sb . append ( STRING_11 ) ; sb . append ( STRING_14 ) ; sb . append ( STRING_13 ) ; sb . append ( IDENT_24 . toString ( ) ) ; sb . append ( "\n" ) ; return sb . toString ( ) ; }
org . junit . Assert . assertTrue ( result . equals ( IDENT_10 . toString ( ) ) ) 