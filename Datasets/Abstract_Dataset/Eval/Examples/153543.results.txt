METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . serialization . IDENT_2 context = mock ( io . IDENT_0 . IDENT_1 . serialization . IDENT_2 . class ) ; when ( context . METHOD_1 ( ) ) . thenReturn ( ( ( java . lang . Class ) ( java . math . BigInteger . class ) ) ) ; when ( context . getInstance ( java . util . List . class ) ) . thenReturn ( new java . util . ArrayList ( ) ) ; java . math . BigInteger IDENT_3 = new java . math . BigInteger ( java . lang . String . valueOf ( Long . MAX_VALUE ) ) . METHOD_2 ( BigInteger . IDENT_4 ) ; java . math . BigInteger IDENT_5 = IDENT_3 . METHOD_3 ( ) ; java . lang . String input = ( ( ( ( ( ( ( STRING_0 + ( IDENT_5 . toString ( 10 ) ) ) + STRING_1 ) + ( BigInteger . IDENT_6 . toString ( 10 ) ) ) + STRING_1 ) + ( BigInteger . IDENT_7 . toString ( 10 ) ) ) + STRING_1 ) + ( IDENT_3 . toString ( 10 ) ) ) + "]" ; java . util . Collection < java . lang . IDENT_8 > expected = new java . util . ArrayList < java . lang . IDENT_8 > ( ) ; java . util . Collections . addAll ( expected , IDENT_5 , BigInteger . IDENT_6 , BigInteger . IDENT_7 , IDENT_3 ) ; java . util . Collection < java . lang . IDENT_8 > output = IDENT_9 . METHOD_4 ( java . util . List . class , input , context ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . Class , java . lang . String , io . IDENT_0 . IDENT_1 . serialization . IDENT_2 ) { IDENT_10 collection = ctx . getInstance ( IDENT_11 ) ; int IDENT_12 = response . indexOf ( STRING_2 ) ; while ( IDENT_12 != ( - 1 ) ) { int IDENT_13 = response . indexOf ( STRING_3 , IDENT_12 ) ; collection . add ( METHOD_4 ( response . substring ( ( IDENT_12 + 4 ) , IDENT_13 ) , ctx ) ) ; IDENT_12 = response . indexOf ( STRING_2 , IDENT_13 ) ; } return collection ; }
org . junit . Assert . assertEquals ( expected , output ) 