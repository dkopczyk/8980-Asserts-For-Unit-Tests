METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . serialization . IDENT_2 context = mock ( io . IDENT_0 . IDENT_1 . serialization . IDENT_2 . class ) ; when ( context . METHOD_1 ( ) ) . thenReturn ( ( ( java . lang . Class ) ( io . IDENT_0 . IDENT_1 . serialization . Long . class ) ) ) ; when ( context . getInstance ( java . util . List . class ) ) . thenReturn ( new java . util . ArrayList ( ) ) ; java . lang . String input = ( ( ( STRING_0 + ( java . lang . String . valueOf ( Long . IDENT_3 ) ) ) + STRING_1 ) + ( java . lang . String . valueOf ( Long . MAX_VALUE ) ) ) + "]" ; java . util . Collection < java . lang . IDENT_4 > expected = new java . util . ArrayList < java . lang . IDENT_4 > ( ) ; java . util . Collections . addAll ( expected , Long . IDENT_3 , Long . MAX_VALUE ) ; java . util . Collection < java . lang . IDENT_4 > output = IDENT_5 . METHOD_2 ( java . util . List . class , input , context ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . Class , java . lang . String , io . IDENT_0 . IDENT_1 . serialization . IDENT_2 ) { IDENT_6 collection = ctx . getInstance ( IDENT_7 ) ; int IDENT_8 = response . indexOf ( STRING_2 ) ; while ( IDENT_8 != ( - 1 ) ) { int IDENT_9 = response . indexOf ( STRING_3 , IDENT_8 ) ; collection . add ( METHOD_2 ( response . substring ( ( IDENT_8 + 4 ) , IDENT_9 ) , ctx ) ) ; IDENT_8 = response . indexOf ( STRING_2 , IDENT_9 ) ; } return collection ; }
org . junit . Assert . assertEquals ( expected , output ) 