METHOD_0 ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; java . nio . IDENT_0 . IDENT_1 IDENT_2 = java . nio . IDENT_0 . IDENT_3 . METHOD_1 ( STRING_0 ) . METHOD_2 ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { org . apache . commons . io . output . ByteArrayOutputStream IDENT_4 = new org . apache . commons . io . output . ByteArrayOutputStream ( ) ; int count = ( new java . util . METHOD_3 ( ) . METHOD_4 ( INT_1 ) ) + INT_1 ; while ( count != 0 ) { char c = ( ( char ) ( new java . util . METHOD_3 ( ) . METHOD_4 ( IDENT_5 . MAX_VALUE ) ) ) ; if ( IDENT_2 . METHOD_5 ( c ) ) { IDENT_4 . write ( IDENT_2 . encode ( java . nio . IDENT_6 . METHOD_6 ( new char [ ] { c } ) ) . array ( ) ) ; count OP_0 ; } } byte [ ] IDENT_7 = IDENT_4 . toByteArray ( ) ; param . METHOD_7 ( IDENT_7 , IDENT_7 . length ) ; sb . append ( new java . lang . String ( IDENT_7 , STRING_0 ) ) ; } param . METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } toString ( ) { return METHOD_9 ( ) . toString ( ) ; }
org . junit . Assert . assertEquals ( sb . toString ( ) , param . getValue ( ) ) 