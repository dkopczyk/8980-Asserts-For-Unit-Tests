METHOD_0 ( ) { java . lang . String IDENT_0 = com . IDENT_1 . IDENT_2 . cache . UUID . METHOD_1 ( ) . toString ( ) ; final com . IDENT_1 . IDENT_2 . cache . IDENT_3 IDENT_4 = com . IDENT_1 . IDENT_2 . cache . IDENT_3 . METHOD_2 ( client . METHOD_3 ( ) , IDENT_0 ) ; final java . util . concurrent . atomic . IDENT_5 IDENT_6 = new java . util . concurrent . atomic . METHOD_4 ( 0 ) ; IDENT_4 . METHOD_5 ( ( IDENT_7 ) -> { IDENT_6 . METHOD_6 ( ) ; java . lang . Thread t = new java . lang . Thread ( ( ) -> IDENT_4 . METHOD_5 ( ( IDENT_8 ) -> IDENT_6 . METHOD_6 ( ) ) ) ; t . start ( ) ; com . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_7 ( java . time . IDENT_10 . METHOD_8 ( INT_0 ) ) ; } ) ; IDENT_4 . start ( ) ; IDENT_4 . METHOD_9 ( 1000 , TimeUnit . IDENT_11 ) ; com . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_7 ( java . time . IDENT_10 . METHOD_10 ( 1 ) ) ; "<AssertPlaceHolder>" ; IDENT_4 . METHOD_11 ( ) ; } get ( ) { if ( ( IDENT_12 ) != null ) { long IDENT_13 = java . time . IDENT_10 . METHOD_12 ( IDENT_12 , java . time . IDENT_14 . now ( ) ) . METHOD_13 ( ) ; org . junit . Assert . assertTrue ( java . lang . String . format ( STRING_0 , IDENT_15 . METHOD_13 ( ) , METHOD_12 ) , ( ( java . lang . Math . METHOD_14 ( ( METHOD_12 - ( IDENT_15 . METHOD_13 ( ) ) ) ) ) < 20 ) ) ; } IDENT_12 = java . time . IDENT_14 . now ( ) ; ( run ) ++ ; java . util . List < java . lang . Integer > response = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_16 ) ; i ++ ) { response . add ( 1 ) ; } return response ; }
org . junit . Assert . assertEquals ( 2 , IDENT_6 . get ( ) ) 