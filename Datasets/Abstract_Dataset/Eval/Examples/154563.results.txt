METHOD_0 ( ) { final com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 < ? > g = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( new com . github . IDENT_0 . IDENT_1 . geom . IDENT_3 < com . github . IDENT_0 . IDENT_1 . geom . IDENT_4 > ( ) ) ; g . METHOD_2 ( new com . github . IDENT_0 . IDENT_1 . geom . METHOD_3 ( 0 , 0 ) , new com . github . IDENT_0 . IDENT_1 . geom . METHOD_3 ( 1 , 0 ) ) ; g . METHOD_2 ( new com . github . IDENT_0 . IDENT_1 . geom . METHOD_3 ( 0 , 0 ) , new com . github . IDENT_0 . IDENT_1 . geom . METHOD_3 ( FLOAT_0 , 0 ) ) ; boolean fail = false ; try { com . github . IDENT_0 . IDENT_1 . core . model . IDENT_5 . IDENT_6 . METHOD_4 ( g ) . METHOD_5 ( ) . METHOD_6 ( 1.0 ) . METHOD_7 ( FLOAT_1 ) . build ( mock ( com . github . IDENT_0 . IDENT_1 . core . model . IDENT_7 . class ) ) ; } catch ( final java . lang . IllegalArgumentException e ) { fail = true ; } "<AssertPlaceHolder>" ; } build ( com . github . IDENT_0 . IDENT_1 . core . model . IDENT_7 ) { final com . github . IDENT_0 . IDENT_1 . core . IDENT_8 IDENT_9 = IDENT_10 . get ( com . github . IDENT_0 . IDENT_1 . core . IDENT_8 . class ) ; return new com . github . IDENT_0 . IDENT_1 . ui . IDENT_11 . IDENT_12 . METHOD_8 ( IDENT_9 ) ; }
org . junit . Assert . assertTrue ( fail ) 