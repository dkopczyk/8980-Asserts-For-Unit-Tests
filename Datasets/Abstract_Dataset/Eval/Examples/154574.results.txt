METHOD_0 ( ) { final com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_3 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 0 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_4 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 1 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_5 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 2 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_6 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 3 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_7 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 4 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_8 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 5 , 0 ) ; final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_9 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 6 , 0 ) ; final java . util . List < com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 > IDENT_10 = java . util . Arrays . asList ( IDENT_4 , IDENT_5 , IDENT_6 , IDENT_7 , IDENT_8 , IDENT_9 ) ; for ( final com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 p : IDENT_10 ) { graph . METHOD_2 ( IDENT_3 , p ) ; } final java . util . List < com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 > IDENT_11 = new java . util . ArrayList < com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 > ( graph . METHOD_3 ( IDENT_3 ) ) ; for ( int i = 0 ; i < ( IDENT_11 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( long ) { return com . github . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 . METHOD_4 ( IDENT_14 . get ( IDENT_15 ) ) ; }
org . junit . Assert . assertSame ( IDENT_11 . get ( i ) , IDENT_10 . get ( i ) ) 