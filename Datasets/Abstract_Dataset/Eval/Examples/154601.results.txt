METHOD_0 ( ) { net . ripe . hadoop . IDENT_0 . IDENT_1 IDENT_2 = new net . ripe . hadoop . IDENT_0 . METHOD_1 ( METHOD_1 . IDENT_3 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( byte [ ] ) { int start = - 1 ; switch ( IDENT_5 ) { case IDENT_4 : return 4 ; case IDENT_6 : start = net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_7 ; int IDENT_8 = net . ripe . hadoop . IDENT_0 . IDENT_9 . METHOD_3 ( packet , net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_10 ) ; if ( IDENT_8 == ( net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_11 ) ) { IDENT_8 = net . ripe . hadoop . IDENT_0 . IDENT_9 . METHOD_3 ( packet , ( ( net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_10 ) + 4 ) ) ; start += 4 ; } if ( ( IDENT_8 == ( net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_12 ) ) || ( IDENT_8 == ( net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_13 ) ) ) return start ; break ; case IDENT_14 : return 0 ; case IDENT_15 : return 4 ; case IDENT_16 : start = net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_17 ; int IDENT_18 = net . ripe . hadoop . IDENT_0 . IDENT_9 . METHOD_3 ( packet , net . ripe . hadoop . IDENT_0 . METHOD_1 . IDENT_19 ) ; start += IDENT_18 ; return start ; } return - 1 ; }
org . junit . Assert . assertEquals ( 4 , IDENT_2 . METHOD_2 ( null ) ) 