METHOD_0 ( ) { org . IDENT_0 . IDENT_1 it = IDENT_2 . METHOD_1 ( ) . METHOD_2 ( new int [ INT_0 ] ) ; org . IDENT_0 . IDENT_3 < org . IDENT_0 . IDENT_4 > IDENT_5 = org . IDENT_0 . IDENT_3 . writer ( ) . METHOD_3 ( ) . METHOD_4 ( IDENT_2 . IDENT_6 . size ) . get ( ) ; while ( it . hasNext ( ) ) { IDENT_5 . add ( it . next ( ) ) ; } org . IDENT_0 . IDENT_4 IDENT_7 = IDENT_5 . get ( ) ; "<AssertPlaceHolder>" ; } next ( ) { try { java . io . IDENT_8 buf = new java . io . METHOD_5 ( new java . io . METHOD_6 ( IDENT_9 ) ) ; java . lang . String IDENT_10 = buf . METHOD_7 ( ) ; java . lang . String [ ] IDENT_11 = IDENT_10 . split ( STRING_0 ) ; int [ ] [ ] IDENT_12 = new int [ IDENT_11 . length ] [ 2 ] ; for ( int i = 0 ; i < ( IDENT_11 . length ) ; i ++ ) { java . lang . String [ ] split = IDENT_11 [ i ] . split ( STRING_1 ) ; IDENT_12 [ i ] [ 0 ] = java . lang . Integer . METHOD_8 ( split [ 0 ] ) ; IDENT_12 [ i ] [ 1 ] = java . lang . Integer . METHOD_8 ( split [ 1 ] ) ; } return IDENT_12 ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } finally { IDENT_13 = METHOD_9 ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 