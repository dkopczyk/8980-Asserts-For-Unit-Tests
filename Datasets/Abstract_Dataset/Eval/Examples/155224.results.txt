METHOD_0 ( ) { for ( int IDENT_0 = 1 ; IDENT_0 <= INT_0 ; IDENT_0 OP_0 2 ) { org . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_1 . METHOD_1 ( ) ; for ( int k = 0 ; k < INT_1 ; k += IDENT_0 ) { IDENT_3 . add ( ( ( 1 << INT_2 ) + k ) ) ; } for ( int k = 0 ; k < ( INT_1 / IDENT_0 ) ; ++ k ) { "<AssertPlaceHolder>" ; } } } select ( int ) { long IDENT_4 = org . IDENT_1 . IDENT_5 . METHOD_2 ( j ) ; for ( int i = 0 ; i < ( this . IDENT_6 . size ( ) ) ; i ++ ) { int IDENT_7 = this . IDENT_6 . METHOD_3 ( i ) ; if ( IDENT_7 > IDENT_4 ) { int IDENT_8 = ( this . IDENT_6 . METHOD_4 ( i ) ) << 16 ; org . IDENT_1 . buffer . IDENT_9 c = this . IDENT_6 . METHOD_5 ( i ) ; int IDENT_10 = org . IDENT_1 . buffer . IDENT_11 . IDENT_11 . METHOD_6 ( c . select ( ( ( int ) ( IDENT_4 ) ) ) ) ; return IDENT_10 + IDENT_8 ; } IDENT_4 OP_1 IDENT_7 ; } throw new java . lang . IllegalArgumentException ( ( ( ( ( STRING_0 + j ) + STRING_1 ) + ( this . METHOD_3 ( ) ) ) + STRING_2 ) ) ; }
org . junit . Assert . assertEquals ( ( ( 1 << INT_2 ) + ( k * IDENT_0 ) ) , IDENT_3 . select ( k ) ) 