METHOD_0 ( ) { int length = 1000 ; int IDENT_0 = 10 ; java . util . IDENT_1 random = new java . util . METHOD_1 ( INT_0 ) ; for ( int test = 0 ; test < 50 ; ++ test ) { final org . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_2 . METHOD_2 ( ) ; final org . IDENT_2 . METHOD_2 IDENT_5 = new org . IDENT_2 . METHOD_2 ( ) ; java . util . Set < java . lang . Integer > IDENT_6 = new java . util . HashSet ( ) ; java . util . Set < java . lang . Integer > IDENT_7 = new java . util . HashSet ( ) ; int IDENT_8 = length / 2 ; for ( int i = 0 ; i < IDENT_8 ; i ++ ) { int IDENT_9 = random . METHOD_3 ( length ) ; int IDENT_10 = random . METHOD_3 ( length ) ; IDENT_4 . add ( ( ( 1 << INT_1 ) + IDENT_9 ) ) ; IDENT_6 . add ( ( ( 1 << INT_1 ) + IDENT_9 ) ) ; IDENT_5 . add ( ( ( 1 << INT_1 ) + IDENT_10 ) ) ; IDENT_7 . add ( ( ( 1 << INT_1 ) + IDENT_10 ) ) ; } java . util . Set < java . lang . Integer > IDENT_11 = new java . util . METHOD_4 ( ) ; IDENT_11 . addAll ( IDENT_6 ) ; IDENT_11 . addAll ( IDENT_7 ) ; java . util . Set < java . lang . Integer > IDENT_12 = new java . util . METHOD_4 ( IDENT_6 ) ; IDENT_12 . METHOD_5 ( IDENT_7 ) ; IDENT_11 . METHOD_6 ( IDENT_12 ) ; for ( int IDENT_13 = 0 ; IDENT_13 < IDENT_0 ; IDENT_13 ++ ) { long IDENT_14 = random . METHOD_3 ( ( length - 1 ) ) ; long IDENT_15 = ( 1L << INT_1 ) + IDENT_14 ; long IDENT_16 = ( random . METHOD_3 ( ( ( int ) ( length - IDENT_14 ) ) ) ) + 1 ; long IDENT_17 = IDENT_15 + IDENT_16 ; java . util . Set < java . lang . Integer > IDENT_18 = new java . util . METHOD_4 ( ) ; for ( int i = ( ( int ) ( IDENT_15 ) ) ; i < ( ( int ) ( IDENT_17 ) ) ; i ++ ) { if ( IDENT_11 . contains ( i ) ) { IDENT_18 . add ( i ) ; } } java . util . List < org . IDENT_2 . METHOD_2 > list = new java . util . ArrayList ( ) ; list . add ( IDENT_4 ) ; list . add ( IDENT_5 ) ; org . IDENT_2 . METHOD_2 result = org . IDENT_2 . METHOD_2 . METHOD_7 ( list . iterator ( ) , IDENT_15 , IDENT_17 ) ; java . util . Set < java . lang . Integer > IDENT_19 = new java . util . METHOD_4 ( ) ; org . IDENT_2 . IDENT_20 IDENT_21 = result . METHOD_8 ( ) ; while ( IDENT_21 . hasNext ( ) ) { IDENT_19 . add ( IDENT_21 . next ( ) ) ; } "<AssertPlaceHolder>" ; } } } next ( ) { return iterator . next ( ) ; }
org . junit . Assert . assertEquals ( IDENT_18 , IDENT_19 ) 