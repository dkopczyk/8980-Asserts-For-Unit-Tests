METHOD_0 ( ) { org . IDENT_0 . IDENT_1 IDENT_2 = org . IDENT_0 . IDENT_1 . METHOD_1 ( 1 , 2 , 3 , 4 ) ; org . IDENT_0 . IDENT_1 IDENT_3 = org . IDENT_0 . IDENT_1 . METHOD_1 ( ( ( 1 << INT_0 ) + 1 ) , ( ( 1 << INT_0 ) + 2 ) , ( ( 1 << INT_0 ) + 3 ) , ( ( 1 << INT_0 ) + 4 ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_0 . buffer . IDENT_4 , int ) { final int IDENT_5 = IDENT_6 . size ( ) ; final int IDENT_7 = other . IDENT_6 . size ( ) ; int IDENT_8 = 0 ; int IDENT_9 = 0 ; int IDENT_10 = IDENT_11 ; while ( ( ( IDENT_10 >= 0 ) && ( IDENT_8 < IDENT_5 ) ) && ( IDENT_9 < IDENT_7 ) ) { final short IDENT_12 = IDENT_6 . METHOD_3 ( IDENT_8 ) ; final short IDENT_13 = other . IDENT_6 . METHOD_3 ( IDENT_9 ) ; org . IDENT_0 . buffer . IDENT_14 IDENT_15 = IDENT_6 . METHOD_4 ( IDENT_8 ) ; org . IDENT_0 . buffer . IDENT_14 IDENT_16 = other . IDENT_6 . METHOD_4 ( IDENT_9 ) ; if ( IDENT_12 == IDENT_13 ) { IDENT_10 OP_0 IDENT_15 . METHOD_5 ( IDENT_16 ) ; ++ IDENT_8 ; ++ IDENT_9 ; } else if ( ( org . IDENT_0 . buffer . IDENT_17 . METHOD_6 ( IDENT_12 , IDENT_13 ) ) < 0 ) { IDENT_10 OP_0 IDENT_15 . METHOD_7 ( ) ; ++ IDENT_8 ; } else { IDENT_10 OP_0 IDENT_16 . METHOD_7 ( ) ; ++ IDENT_9 ; } } while ( ( IDENT_10 >= 0 ) && ( IDENT_8 < IDENT_5 ) ) { org . IDENT_0 . buffer . IDENT_14 container = IDENT_6 . METHOD_4 ( ( IDENT_8 ++ ) ) ; IDENT_10 OP_0 container . METHOD_7 ( ) ; } while ( ( IDENT_10 >= 0 ) && ( IDENT_9 < IDENT_7 ) ) { org . IDENT_0 . buffer . IDENT_14 container = other . IDENT_6 . METHOD_4 ( ( IDENT_9 ++ ) ) ; IDENT_10 OP_0 container . METHOD_7 ( ) ; } return IDENT_10 >= 0 ; }
org . junit . Assert . assertFalse ( IDENT_2 . METHOD_2 ( IDENT_3 , 0 ) ) 