METHOD_0 ( ) { final short [ ] content = new short [ ] { 2 , 3 , 4 , 7 , 8 } ; org . IDENT_0 . buffer . IDENT_1 c = org . IDENT_0 . buffer . IDENT_2 . METHOD_1 ( content ) ; c = c . METHOD_2 ( ) ; final org . IDENT_0 . buffer . IDENT_1 IDENT_3 = c . METHOD_3 ( 0 , INT_0 ) ; final org . IDENT_0 . buffer . IDENT_1 IDENT_4 = IDENT_3 . METHOD_3 ( 0 , INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . IDENT_0 . buffer . IDENT_1 , short [ ] ) { org . IDENT_0 . IDENT_5 IDENT_6 = c . METHOD_5 ( ) ; int IDENT_7 = 0 ; boolean fail = false ; while ( IDENT_6 . hasNext ( ) ) { if ( IDENT_7 == ( s . length ) ) { fail = true ; break ; } if ( ( IDENT_6 . next ( ) ) != ( s [ IDENT_7 ] ) ) { fail = true ; break ; } ++ IDENT_7 ; } if ( IDENT_7 != ( s . length ) ) { fail = true ; } if ( fail ) { System . out . METHOD_6 ( STRING_0 ) ; IDENT_6 = c . METHOD_5 ( ) ; while ( IDENT_6 . hasNext ( ) ) { System . out . METHOD_6 ( ( " " + ( IDENT_6 . next ( ) ) ) ) ; } System . out . METHOD_6 ( STRING_1 ) ; for ( final short IDENT_8 : s ) { System . out . METHOD_6 ( ( " " + IDENT_8 ) ) ; } System . out . println ( ) ; } return ! fail ; }
org . junit . Assert . assertTrue ( org . IDENT_0 . buffer . IDENT_2 . METHOD_4 ( IDENT_4 , content ) ) 