METHOD_0 ( ) { org . IDENT_0 . buffer . IDENT_1 IDENT_2 = org . IDENT_0 . buffer . IDENT_1 . METHOD_1 ( 1 , 2 , 3 , 4 ) ; org . IDENT_0 . buffer . IDENT_1 IDENT_3 = org . IDENT_0 . buffer . IDENT_1 . METHOD_1 ( ( ( 1 << INT_0 ) + 1 ) , ( ( 1 << INT_0 ) + 2 ) , ( ( 1 << INT_0 ) + 3 ) , ( ( 1 << INT_0 ) + 4 ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_0 . buffer . IDENT_1 , int ) { final int IDENT_4 = IDENT_5 . size ( ) ; final int IDENT_6 = other . IDENT_5 . size ( ) ; int IDENT_7 = 0 ; int IDENT_8 = 0 ; int IDENT_9 = IDENT_10 ; while ( ( ( IDENT_9 >= 0 ) && ( IDENT_7 < IDENT_4 ) ) && ( IDENT_8 < IDENT_6 ) ) { final short IDENT_11 = IDENT_5 . METHOD_3 ( IDENT_7 ) ; final short IDENT_12 = other . IDENT_5 . METHOD_3 ( IDENT_8 ) ; org . IDENT_0 . buffer . IDENT_13 IDENT_14 = IDENT_5 . METHOD_4 ( IDENT_7 ) ; org . IDENT_0 . buffer . IDENT_13 IDENT_15 = other . IDENT_5 . METHOD_4 ( IDENT_8 ) ; if ( IDENT_11 == IDENT_12 ) { IDENT_9 OP_0 IDENT_14 . METHOD_5 ( IDENT_15 ) ; ++ IDENT_7 ; ++ IDENT_8 ; } else if ( ( org . IDENT_0 . buffer . IDENT_16 . METHOD_6 ( IDENT_11 , IDENT_12 ) ) < 0 ) { IDENT_9 OP_0 IDENT_14 . METHOD_7 ( ) ; ++ IDENT_7 ; } else { IDENT_9 OP_0 IDENT_15 . METHOD_7 ( ) ; ++ IDENT_8 ; } } while ( ( IDENT_9 >= 0 ) && ( IDENT_7 < IDENT_4 ) ) { org . IDENT_0 . buffer . IDENT_13 container = IDENT_5 . METHOD_4 ( ( IDENT_7 ++ ) ) ; IDENT_9 OP_0 container . METHOD_7 ( ) ; } while ( ( IDENT_9 >= 0 ) && ( IDENT_8 < IDENT_6 ) ) { org . IDENT_0 . buffer . IDENT_13 container = other . IDENT_5 . METHOD_4 ( ( IDENT_8 ++ ) ) ; IDENT_9 OP_0 container . METHOD_7 ( ) ; } return IDENT_9 >= 0 ; }
org . junit . Assert . assertFalse ( IDENT_2 . METHOD_2 ( IDENT_3 , 0 ) ) 