METHOD_0 ( ) { final org . IDENT_0 . buffer . HashSet < java . lang . Integer > IDENT_1 = new org . IDENT_0 . buffer . HashSet < java . lang . Integer > ( ) ; final org . IDENT_0 . buffer . HashSet < java . lang . Integer > IDENT_2 = new org . IDENT_0 . buffer . HashSet < java . lang . Integer > ( ) ; final org . IDENT_0 . buffer . IDENT_3 IDENT_4 = new org . IDENT_0 . buffer . METHOD_1 ( ) ; final org . IDENT_0 . buffer . METHOD_1 IDENT_5 = new org . IDENT_0 . buffer . METHOD_1 ( ) ; for ( int k = 0 ; k < INT_0 ; ++ k ) { IDENT_5 . add ( k ) ; if ( k < INT_1 ) { IDENT_1 . add ( k ) ; } } for ( int k = INT_1 ; k < INT_2 ; ++ k ) { IDENT_4 . add ( k ) ; } for ( int k = INT_0 ; k < INT_3 ; ++ k ) { IDENT_5 . add ( k ) ; if ( k >= INT_2 ) { IDENT_1 . add ( k ) ; } } for ( int k = INT_4 ; k < ( INT_4 + INT_5 ) ; ++ k ) { IDENT_4 . add ( k ) ; } for ( int k = INT_4 ; k < ( INT_4 + INT_6 ) ; ++ k ) { IDENT_5 . add ( k ) ; if ( k >= ( INT_4 + INT_5 ) ) { IDENT_1 . add ( k ) ; } } for ( int k = 4 * INT_7 ; k < ( ( 4 * INT_7 ) + 1000 ) ; ++ k ) { IDENT_4 . add ( k ) ; if ( k >= ( ( 4 * INT_7 ) + INT_8 ) ) { IDENT_1 . add ( k ) ; } } for ( int k = 4 * INT_7 ; k < ( ( 4 * INT_7 ) + INT_8 ) ; ++ k ) { IDENT_5 . add ( k ) ; } for ( int k = 6 * INT_7 ; k < ( ( 6 * INT_7 ) + 1000 ) ; ++ k ) { IDENT_4 . add ( k ) ; IDENT_1 . add ( k ) ; } for ( int k = 7 * INT_7 ; k < ( ( 7 * INT_7 ) + INT_9 ) ; ++ k ) { IDENT_5 . add ( k ) ; IDENT_1 . add ( k ) ; } final org . IDENT_0 . buffer . METHOD_1 IDENT_6 = org . IDENT_0 . buffer . METHOD_1 . METHOD_2 ( IDENT_4 , IDENT_5 ) ; boolean IDENT_7 = true ; final java . lang . Object [ ] IDENT_8 = IDENT_1 . toArray ( ) ; final org . IDENT_0 . buffer . IDENT_9 < java . lang . Integer > IDENT_10 = new org . IDENT_0 . buffer . IDENT_9 < java . lang . Integer > ( ) ; for ( java . lang . Object IDENT_11 : IDENT_8 ) { IDENT_10 . add ( ( ( java . lang . Integer ) ( IDENT_11 ) ) ) ; } for ( final int i : IDENT_6 . toArray ( ) ) { if ( ! ( IDENT_10 . contains ( i ) ) ) { IDENT_7 = false ; } IDENT_2 . add ( i ) ; } for ( int i = 0 ; i < ( IDENT_1 . size ( ) ) ; i ++ ) { if ( ! ( IDENT_2 . contains ( IDENT_10 . METHOD_3 ( i ) ) ) ) { IDENT_7 = false ; } } "<AssertPlaceHolder>" ; } contains ( int ) { throw new java . lang . METHOD_4 ( STRING_0 ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , true ) 