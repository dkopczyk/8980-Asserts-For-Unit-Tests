METHOD_0 ( ) { android . text . format . IDENT_0 time = new android . text . format . METHOD_1 ( ) ; time . set ( 0 , 0 , 0 , 12 , 5 , INT_0 ) ; time . IDENT_1 = STRING_0 ; long IDENT_2 = time . METHOD_2 ( true ) ; int IDENT_3 = android . text . format . METHOD_1 . METHOD_3 ( IDENT_2 , time . IDENT_4 ) ; for ( int IDENT_5 = 0 ; IDENT_5 < INT_1 ; IDENT_5 ++ ) { for ( int IDENT_6 = 0 ; IDENT_6 < INT_2 ; IDENT_6 += 15 ) { time . set ( 0 , IDENT_6 , IDENT_5 , 12 , 5 , INT_0 ) ; IDENT_2 = time . METHOD_2 ( true ) ; int IDENT_7 = android . text . format . METHOD_1 . METHOD_3 ( IDENT_2 , time . IDENT_4 ) ; "<AssertPlaceHolder>" ; } } } METHOD_3 ( long , long ) { long IDENT_8 = IDENT_4 * 1000 ; long IDENT_3 = ( IDENT_2 + IDENT_8 ) / ( org . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 ) ; return ( ( int ) ( IDENT_3 ) ) + ( android . text . format . METHOD_1 . IDENT_13 ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_3 ) 