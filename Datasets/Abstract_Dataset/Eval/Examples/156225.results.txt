METHOD_0 ( ) { java . util . Set < java . lang . Object > IDENT_0 = new java . util . METHOD_1 ( ) ; java . util . Set < java . lang . Object > IDENT_1 = new java . util . METHOD_1 ( ) ; try { java . lang . String [ ] [ ] IDENT_2 = com . IDENT_3 . model . IDENT_4 . IDENT_5 . METHOD_0 ( java . util . Arrays . asList ( new com . IDENT_3 . model . bean . database . METHOD_2 ( this . IDENT_6 , new com . IDENT_3 . model . bean . database . METHOD_3 ( this . IDENT_7 , STRING_0 , new com . IDENT_3 . model . bean . database . METHOD_4 ( this . IDENT_8 , STRING_0 ) ) ) ) ) ; java . util . List < java . lang . String > IDENT_9 = new java . util . ArrayList ( ) ; for ( java . lang . String [ ] v : IDENT_2 ) { IDENT_9 . add ( v [ 2 ] . replaceAll ( STRING_1 , "\n" ) ) ; } IDENT_0 . addAll ( IDENT_9 ) ; IDENT_1 . addAll ( this . IDENT_10 ) ; com . test . IDENT_11 . LOGGER . info ( ( ( ( ( STRING_2 + ( IDENT_0 . toString ( ) . replaceAll ( "\n" , STRING_3 ) . replaceAll ( STRING_4 , STRING_5 ) ) ) + STRING_6 ) + ( IDENT_1 . toString ( ) . replaceAll ( "\n" , STRING_3 ) . replaceAll ( STRING_4 , STRING_5 ) ) ) + STRING_7 ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IDENT_12 e ) { java . util . Set < java . lang . Object > IDENT_13 = new java . util . METHOD_1 ( ) ; for ( java . lang . Object x : IDENT_0 ) { if ( ! ( IDENT_1 . contains ( x ) ) ) { IDENT_13 . add ( x ) ; } } for ( java . lang . Object x : IDENT_1 ) { if ( ! ( IDENT_0 . contains ( x ) ) ) { IDENT_13 . add ( x ) ; } } throw new java . lang . METHOD_5 ( ( ( ( STRING_8 + IDENT_13 ) + "\n" ) + e ) ) ; } } isEmpty ( ) { return this . properties . isEmpty ( ) ; }
org . junit . Assert . assertTrue ( ( ( ( ! ( IDENT_0 . isEmpty ( ) ) ) && ( ! ( IDENT_1 . isEmpty ( ) ) ) ) && ( IDENT_0 . equals ( IDENT_1 ) ) ) ) 