METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 strategy = mock ( net . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; java . lang . String target = STRING_0 ; java . lang . String IDENT_3 = STRING_1 ; java . lang . String IDENT_4 = STRING_2 ; java . lang . String IDENT_5 = STRING_0 ; net . IDENT_0 . IDENT_1 . IDENT_6 expected = new net . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_5 , 1.0 ) ; when ( strategy . METHOD_2 ( IDENT_3 , target ) ) . thenReturn ( FLOAT_0 ) ; when ( strategy . METHOD_2 ( IDENT_4 , target ) ) . thenReturn ( FLOAT_1 ) ; when ( strategy . METHOD_2 ( IDENT_5 , target ) ) . thenReturn ( 1.0 ) ; net . IDENT_0 . IDENT_1 . IDENT_7 service = new net . IDENT_0 . IDENT_1 . METHOD_3 ( strategy ) ; java . util . List < java . lang . String > IDENT_8 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_8 . add ( IDENT_3 ) ; IDENT_8 . add ( IDENT_4 ) ; IDENT_8 . add ( IDENT_5 ) ; net . IDENT_0 . IDENT_1 . IDENT_9 IDENT_10 = new net . IDENT_0 . IDENT_1 . METHOD_4 ( ) ; net . IDENT_0 . IDENT_1 . METHOD_1 IDENT_11 = service . METHOD_5 ( IDENT_8 , target , IDENT_10 ) ; verify ( strategy ) . METHOD_2 ( IDENT_3 , target ) ; verify ( strategy ) . METHOD_2 ( IDENT_4 , target ) ; verify ( strategy ) . METHOD_2 ( IDENT_5 , target ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String ) { java . lang . String IDENT_12 ; java . lang . String IDENT_13 ; if ( ( first . length ( ) ) > ( IDENT_14 . length ( ) ) ) { IDENT_13 = first . toLowerCase ( ) ; IDENT_12 = IDENT_14 . toLowerCase ( ) ; } else { IDENT_13 = IDENT_14 . toLowerCase ( ) ; IDENT_12 = first . toLowerCase ( ) ; } int IDENT_15 = ( ( IDENT_12 . length ( ) ) / 2 ) + 1 ; java . lang . String IDENT_16 = METHOD_6 ( IDENT_12 , IDENT_13 , IDENT_15 ) ; java . lang . String IDENT_17 = METHOD_6 ( IDENT_13 , IDENT_12 , IDENT_15 ) ; if ( ( ( IDENT_16 . length ( ) ) == 0 ) || ( ( IDENT_17 . length ( ) ) == 0 ) ) return 0.0 ; if ( ( IDENT_16 . length ( ) ) != ( IDENT_17 . length ( ) ) ) return 0.0 ; int IDENT_18 = METHOD_7 ( IDENT_16 , IDENT_17 ) ; double IDENT_19 = ( ( ( ( IDENT_16 . length ( ) ) / ( ( double ) ( IDENT_12 . length ( ) ) ) ) + ( ( IDENT_17 . length ( ) ) / ( ( double ) ( IDENT_13 . length ( ) ) ) ) ) + ( ( ( IDENT_16 . length ( ) ) - METHOD_7 ) / ( ( double ) ( IDENT_16 . length ( ) ) ) ) ) / FLOAT_2 ; return IDENT_19 ; }
org . junit . Assert . assertEquals ( expected , IDENT_11 ) 