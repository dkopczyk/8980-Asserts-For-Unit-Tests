METHOD_0 ( ) { com . IDENT_0 . plan . db . Map < com . IDENT_0 . plan . db . UUID , java . lang . Integer > expected = com . IDENT_0 . plan . db . Collections . METHOD_1 ( com . IDENT_0 . plan . db . IDENT_1 . IDENT_2 , 1 ) ; METHOD_2 ( ) ; com . IDENT_0 . plan . db . Map < com . IDENT_0 . plan . db . UUID , java . lang . Integer > result = com . IDENT_0 . plan . db . IDENT_1 . db . query ( com . IDENT_0 . plan . db . IDENT_3 . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { java . lang . String sql = ( ( ( ( STRING_0 + ( IDENT_4 . IDENT_5 ) ) + ( IDENT_6 ) ) + ( IDENT_4 . IDENT_7 ) ) + ( IDENT_8 ) ) + ( IDENT_4 . IDENT_5 ) ; return new com . IDENT_0 . plan . db . IDENT_9 . IDENT_10 < java . util . Map < java . util . UUID , java . lang . Integer > > ( sql , 100 ) { @ com . IDENT_0 . plan . db . IDENT_9 . IDENT_11 . Override public java . util . Map < java . util . UUID , java . lang . Integer > METHOD_4 ( java . sql . ResultSet set ) throws java . sql . IDENT_12 { java . util . Map < java . util . UUID , java . lang . Integer > IDENT_13 = new java . util . HashMap ( ) ; while ( set . next ( ) ) { java . util . UUID IDENT_2 = java . util . UUID . METHOD_5 ( set . getString ( IDENT_4 . IDENT_5 ) ) ; int count = set . METHOD_6 ( STRING_1 ) ; IDENT_13 . put ( IDENT_2 , count ) ; } return IDENT_13 ; } } ; }
org . junit . Assert . assertEquals ( expected , result ) 