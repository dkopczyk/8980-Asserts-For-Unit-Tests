METHOD_0 ( ) { com . IDENT_0 . data . IDENT_1 expected = new com . IDENT_0 . data . METHOD_1 ( ) ; expected . METHOD_2 ( new java . math . BigDecimal ( INT_0 ) ) ; expected . METHOD_3 ( IDENT_2 . IDENT_3 ) ; expected . METHOD_4 ( IDENT_4 . IDENT_5 ) ; expected . METHOD_5 ( new java . math . BigDecimal ( STRING_0 ) ) ; expected . METHOD_6 ( STRING_1 ) ; expected . METHOD_7 ( com . IDENT_0 . data . IDENT_6 ) ; "<AssertPlaceHolder>" ; System . out . println ( ( STRING_2 + expected ) ) ; System . out . println ( ( STRING_3 + ( com . IDENT_0 . data . METHOD_1 . getInstance ( STRING_1 ) ) ) ) ; } getInstance ( java . lang . String ) { com . IDENT_0 . data . METHOD_1 IDENT_7 = null ; for ( com . IDENT_0 . data . IDENT_2 IDENT_8 : IDENT_2 . IDENT_9 ) { if ( IDENT_10 . equals ( IDENT_8 . METHOD_8 ( ) ) ) { IDENT_7 = com . IDENT_0 . data . METHOD_1 . getInstance ( IDENT_8 ) ; } } if ( IDENT_7 == null ) { throw new java . lang . IllegalStateException ( ( STRING_4 + IDENT_10 ) ) ; } return IDENT_7 ; }
org . junit . Assert . assertEquals ( expected , com . IDENT_0 . data . METHOD_1 . getInstance ( STRING_1 ) ) 