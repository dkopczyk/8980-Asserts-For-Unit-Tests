METHOD_0 ( ) { IDENT_0 . IDENT_1 < java . lang . Integer > range = IDENT_0 . IDENT_1 . range ( 0 , ( ( examples . IDENT_2 . IDENT_3 . IDENT_4 ) / 4 ) ) ; org . IDENT_5 . IDENT_6 < examples . IDENT_7 > pub = IDENT_0 . IDENT_8 . METHOD_1 ( range . map ( ( i ) -> new examples . METHOD_2 ( i , java . lang . Math . random ( ) , ( STRING_0 + i ) ) ) ) ; org . IDENT_9 . IDENT_10 . IDENT_5 . IDENT_11 . get ( ) . METHOD_3 ( pub ) . METHOD_4 ( new org . IDENT_9 . IDENT_10 . IDENT_12 . http . IDENT_13 . METHOD_5 ( ) . METHOD_6 ( STRING_1 ) . port ( INT_0 ) . METHOD_7 ( STRING_2 ) ) ; org . IDENT_9 . IDENT_10 . util . IDENT_14 IDENT_15 = new org . IDENT_9 . IDENT_10 . util . METHOD_8 ( STRING_3 ) ; org . IDENT_9 . IDENT_10 . IDENT_5 . IDENT_16 < examples . METHOD_2 > IDENT_17 = org . IDENT_9 . IDENT_10 . IDENT_5 . IDENT_11 . get ( ) . connect ( examples . METHOD_2 . class , new org . IDENT_9 . IDENT_10 . IDENT_12 . IDENT_18 . METHOD_9 ( ) . url ( STRING_4 ) ) ; java . util . concurrent . IDENT_19 IDENT_20 = new java . util . concurrent . METHOD_10 ( ( ( examples . IDENT_2 . IDENT_3 . IDENT_4 ) / 4 ) ) ; IDENT_0 . IDENT_8 . METHOD_11 ( IDENT_17 ) . METHOD_12 ( ( i ) -> { IDENT_15 . count ( ) ; IDENT_20 . METHOD_13 ( ) ; } ) ; IDENT_20 . METHOD_14 ( 50 , TimeUnit . IDENT_21 ) ; "<AssertPlaceHolder>" ; } METHOD_15 ( ) { return count . get ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_20 . METHOD_15 ( ) ) == 0 ) ) 