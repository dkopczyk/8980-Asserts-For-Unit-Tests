METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 count = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; org . IDENT_1 . IDENT_2 . IDENT_3 p = new org . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( 1000 ) ; java . lang . Thread . sleep ( INT_0 ) ; p . METHOD_4 ( new IDENT_2 . METHOD_5 ( ) { @ IDENT_2 . Override public void METHOD_6 ( java . lang . Object result , java . lang . Object error ) { System . out . println ( ( ( ( STRING_0 + result ) + STRING_1 ) + error ) ) ; count . METHOD_7 ( ) ; } } ) . METHOD_8 ( new java . util . function . METHOD_9 ( ) { @ IDENT_2 . Override public void accept ( java . lang . Object o ) { count . METHOD_10 ( 8 ) ; System . out . println ( STRING_2 ) ; } } ) ; java . lang . Thread . sleep ( INT_1 ) ; "<AssertPlaceHolder>" ; } get ( ) { return ( ( T ) ( result ) ) ; }
org . junit . Assert . assertTrue ( ( ( count . get ( ) ) == 9 ) ) 