METHOD_0 ( ) { byte [ ] b = new byte [ INT_0 ] ; for ( int i = 0 ; i < INT_0 ; ++ i ) { b [ i ] = ( ( byte ) ( i ) ) ; } java . io . File file = IDENT_0 . METHOD_1 ( ) ; net . IDENT_1 . cache . fs . IDENT_2 . IDENT_3 IDENT_4 = new net . IDENT_1 . cache . fs . IDENT_2 . METHOD_2 ( file ) ; net . IDENT_1 . cache . fs . IDENT_5 container = new net . IDENT_1 . cache . fs . METHOD_3 ( IDENT_6 . IDENT_7 , INT_1 ) ; container . METHOD_4 ( b , null ) ; byte [ ] IDENT_8 = container . data ; net . IDENT_1 . cache . fs . IDENT_2 . IDENT_9 res = IDENT_4 . write ( INT_1 , INT_2 , IDENT_8 ) ; IDENT_8 = IDENT_4 . read ( INT_1 , INT_2 , res . IDENT_10 , res . IDENT_11 ) ; net . IDENT_1 . cache . fs . METHOD_3 IDENT_12 = net . IDENT_1 . cache . fs . METHOD_3 . METHOD_5 ( IDENT_8 , null ) ; byte [ ] buf = IDENT_12 . data ; "<AssertPlaceHolder>" ; } METHOD_5 ( byte [ ] , int [ ] ) { net . IDENT_1 . cache . io . InputStream stream = new net . IDENT_1 . cache . io . InputStream ( b ) ; int IDENT_13 = stream . METHOD_6 ( ) ; int IDENT_11 = stream . METHOD_7 ( ) ; if ( ( IDENT_11 < 0 ) || ( IDENT_11 > INT_3 ) ) { throw new java . lang . RuntimeException ( STRING_0 ) ; } net . IDENT_1 . cache . util . IDENT_14 IDENT_15 = new net . IDENT_1 . cache . util . METHOD_8 ( ) ; IDENT_15 . update ( b , 0 , 5 ) ; byte [ ] data ; int IDENT_16 = - 1 ; switch ( IDENT_13 ) { case net . IDENT_1 . cache . fs . IDENT_2 . IDENT_6 . IDENT_17 : { byte [ ] IDENT_18 = new byte [ IDENT_11 ] ; stream . METHOD_9 ( IDENT_18 , 0 , IDENT_11 ) ; IDENT_15 . update ( IDENT_18 , 0 , IDENT_11 ) ; byte [ ] IDENT_19 = net . IDENT_1 . cache . fs . METHOD_3 . METHOD_10 ( IDENT_18 , IDENT_18 . length , keys ) ; if ( ( stream . METHOD_11 ( ) ) >= 2 ) { IDENT_16 = stream . METHOD_12 ( ) ; assert IDENT_16 != ( - 1 ) ; } data = IDENT_19 ; break ; } case net . IDENT_1 . cache . fs . IDENT_2 . IDENT_6 . IDENT_7 : { byte [ ] IDENT_18 = new byte [ IDENT_11 + 4 ] ; stream . METHOD_9 ( IDENT_18 ) ; IDENT_15 . update ( IDENT_18 , 0 , IDENT_18 . length ) ; byte [ ] IDENT_19 = net . IDENT_1 . cache . fs . METHOD_3 . METHOD_10 ( IDENT_18 , IDENT_18 . length , keys ) ; if ( ( stream . METHOD_11 ( ) ) >= 2 ) { IDENT_16 = stream . METHOD_12 ( ) ; assert IDENT_16 != ( - 1 ) ; } stream = new net . IDENT_1 . cache . io . InputStream ( IDENT_19 ) ; int IDENT_20 = stream . METHOD_7 ( ) ; data = net . IDENT_1 . cache . util . IDENT_21 . METHOD_5 ( stream . METHOD_13 ( ) , IDENT_11 ) ; if ( data == null ) { return null ; } assert ( data . length ) == IDENT_20 ; break ; } case net . IDENT_1 . cache . fs . IDENT_2 . IDENT_6 . IDENT_22 : { byte [ ] IDENT_18 = new byte [ IDENT_11 + 4 ] ; stream . METHOD_9 ( IDENT_18 ) ; IDENT_15 . update ( IDENT_18 , 0 , IDENT_18 . length ) ; byte [ ] IDENT_19 = net . IDENT_1 . cache . fs . METHOD_3 . METHOD_10 ( IDENT_18 , IDENT_18 . length , keys ) ; if ( ( stream . METHOD_11 ( ) ) >= 2 ) { IDENT_16 = stream . METHOD_12 ( ) ; assert IDENT_16 != ( - 1 ) ; } stream = new net . IDENT_1 . cache . io . InputStream ( IDENT_19 ) ; int IDENT_20 = stream . METHOD_7 ( ) ; data = net . IDENT_1 . cache . util . IDENT_23 . METHOD_5 ( stream . METHOD_13 ( ) , IDENT_11 ) ; if ( data == null ) { return null ; } assert ( data . length ) == IDENT_20 ; break ; } default : throw new java . lang . RuntimeException ( STRING_1 ) ; } net . IDENT_1 . cache . fs . METHOD_3 container = new net . IDENT_1 . cache . fs . METHOD_3 ( IDENT_13 , IDENT_16 ) ; container . data = data ; container . IDENT_24 = IDENT_15 . METHOD_14 ( ) ; return container ; }
org . junit . Assert . assertArrayEquals ( b , buf ) 