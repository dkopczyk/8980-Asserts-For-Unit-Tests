METHOD_0 ( ) { try { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 node = manager . METHOD_1 ( ) ; IDENT_0 . IDENT_1 . security . IDENT_4 IDENT_5 = IDENT_0 . IDENT_1 . testing . IDENT_6 . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( STRING_0 ) ; node . METHOD_4 ( IDENT_5 ) ; node . METHOD_5 ( ) ; IDENT_0 . IDENT_1 . security . IDENT_7 IDENT_8 = node . METHOD_6 ( IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_9 . METHOD_7 ( STRING_1 ) , STRING_2 ) ; java . lang . Object result = node . METHOD_8 ( IDENT_5 , IDENT_8 , STRING_3 , new java . io . IDENT_10 [ ] { new java . lang . Integer ( 10 ) } ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . toString ( ) ) ; } } METHOD_7 ( java . lang . String ) { java . lang . String [ ] a = IDENT_11 . split ( IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_9 . IDENT_12 ) ; if ( ( a . length ) > 1 ) { return new IDENT_0 . IDENT_1 . api . IDENT_2 . METHOD_9 ( a [ 0 ] , a [ 1 ] ) ; } else { return new IDENT_0 . IDENT_1 . api . IDENT_2 . METHOD_9 ( a [ 0 ] , STRING_4 ) ; } }
org . junit . Assert . assertEquals ( 12 , result ) 