METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 2 , STRING_0 3 , STRING_0 7 , STRING_1 4 , STRING_1 7 , STRING_1 3 , STRING_1 8 , STRING_1 1 , STRING_2 , STRING_3 , STRING_0 5 , STRING_1 2 , STRING_4 } ; java . lang . String IDENT_1 = STRING_1 + ( ( ( ( ( ( ( ( ( ( ( STRING_0 4 + STRING_1 5 ) + STRING_1 9 ) + STRING_5 ) + STRING_1 0 ) + STRING_6 ) + STRING_0 0 ) + STRING_1 6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_0 1 ) ; java . lang . StringBuilder output = new java . lang . StringBuilder ( ) ; for ( java . lang . String str : IDENT_0 ) { byte [ ] IDENT_2 = str . getBytes ( ) ; System . out . println ( str ) ; byte [ ] IDENT_3 = IDENT_4 . METHOD_1 ( str ) ; int IDENT_5 = 100 - ( ( 100 * ( IDENT_3 . length ) ) / ( IDENT_2 . length ) ) ; if ( IDENT_5 < 0 ) { output . append ( java . lang . String . format ( STRING_0 6 , str , ( - IDENT_5 ) ) ) ; } else { output . append ( java . lang . String . format ( STRING_0 , str , IDENT_5 ) ) ; } } "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { METHOD_2 ( IDENT_6 ) ; java . lang . StringBuilder IDENT_7 = new java . lang . StringBuilder ( ) ; com . github . IDENT_8 . IDENT_9 . ByteArrayOutputStream output = new com . github . IDENT_8 . IDENT_9 . ByteArrayOutputStream ( ) ; java . nio . IDENT_10 IDENT_11 = java . nio . IDENT_10 . METHOD_3 ( IDENT_6 ) ; int IDENT_12 ; while ( ( IDENT_12 = IDENT_11 . METHOD_4 ( ) ) > 0 ) { int IDENT_13 ; int IDENT_14 ; int IDENT_15 ; IDENT_11 . METHOD_5 ( ) ; IDENT_13 = IDENT_14 = ( IDENT_11 . get ( ) ) << 3 ; if ( IDENT_12 > 1 ) IDENT_14 += IDENT_11 . get ( ) ; if ( IDENT_12 > 2 ) { IDENT_15 = IDENT_14 OP_0 ( IDENT_11 . get ( ) ) ; } else { IDENT_15 = 0 ; } IDENT_11 . METHOD_6 ( ) ; int j = 7 ; if ( j > IDENT_12 ) j = IDENT_12 ; boolean found = false ; for ( ; j > 0 ; j OP_1 ) { java . nio . IDENT_10 IDENT_16 ; if ( j == 1 ) { IDENT_16 = java . nio . IDENT_10 . METHOD_3 ( com . github . IDENT_8 . IDENT_9 . IDENT_17 . IDENT_18 [ ( IDENT_13 OP_2 INT_0 ) ] ) ; } else if ( j == 2 ) { IDENT_16 = java . nio . IDENT_10 . METHOD_3 ( com . github . IDENT_8 . IDENT_9 . IDENT_17 . IDENT_18 [ ( IDENT_14 OP_2 INT_0 ) ] ) ; } else { IDENT_16 = java . nio . IDENT_10 . METHOD_3 ( com . github . IDENT_8 . IDENT_9 . IDENT_17 . IDENT_18 [ ( IDENT_15 OP_2 INT_0 ) ] ) ; } int IDENT_19 = IDENT_16 . length ( ) ; int IDENT_20 = 0 ; int IDENT_21 = ( IDENT_20 + j ) + 1 ; while ( ( IDENT_19 > 0 ) && ( IDENT_21 <= IDENT_19 ) ) { if ( ( ( ( IDENT_16 . get ( IDENT_20 ) ) == j ) && ( IDENT_12 >= j ) ) && ( IDENT_16 . METHOD_7 ( ( IDENT_20 + 1 ) , IDENT_21 ) . toString ( ) . equals ( IDENT_11 . METHOD_7 ( 0 , j ) . toString ( ) ) ) ) { if ( ( IDENT_7 . length ( ) ) > 0 ) { METHOD_8 ( output , IDENT_7 . toString ( ) ) ; IDENT_7 . METHOD_9 ( 0 ) ; } output . write ( IDENT_16 . get ( ( ( ( IDENT_16 . get ( IDENT_20 ) ) + 1 ) + IDENT_20 ) ) ) ; IDENT_11 . position ( ( ( IDENT_11 . position ( ) ) + j ) ) ; IDENT_12 OP_3 j ; found = true ; break ; } else { IDENT_20 ++ ; IDENT_21 = ( IDENT_20 + j ) + 1 ; } } } if ( ! found ) { if ( IDENT_12 > 0 ) { IDENT_12 OP_1 ; IDENT_7 . append ( IDENT_11 . METHOD_7 ( 0 , 1 ) . toString ( ) ) ; } IDENT_11 . position ( ( ( IDENT_11 . position ( ) ) + 1 ) ) ; } int IDENT_22 = IDENT_7 . length ( ) ; if ( ( IDENT_22 == INT_1 ) || ( ( IDENT_22 > 0 ) && ( IDENT_12 == 0 ) ) ) { METHOD_8 ( output , IDENT_7 . toString ( ) ) ; IDENT_7 . METHOD_9 ( 0 ) ; } } return output . toByteArray ( ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , output . toString ( ) ) 