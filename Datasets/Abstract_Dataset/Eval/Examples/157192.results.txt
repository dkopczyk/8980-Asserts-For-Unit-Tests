METHOD_0 ( ) { org . sagebionetworks . repo . model . IDENT_0 . dao . IDENT_1 . IDENT_2 . IDENT_3 object = new org . sagebionetworks . repo . model . IDENT_0 . dao . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; object . METHOD_2 ( org . sagebionetworks . repo . model . IDENT_0 . dao . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 ) ; object . METHOD_3 ( new java . sql . METHOD_4 ( 1L ) ) ; object . METHOD_5 ( Boolean . IDENT_6 ) ; object . METHOD_6 ( new java . util . Date ( ) ) ; object . METHOD_7 ( new byte [ ] { 1 , 2 , 3 , 4 } ) ; object . METHOD_8 ( STRING_0 ) ; object . METHOD_9 ( FLOAT_0 ) ; object . METHOD_10 ( 1L ) ; org . springframework . jdbc . core . IDENT_7 . IDENT_8 source = new org . springframework . jdbc . core . IDENT_7 . METHOD_11 ( object ) ; int expected = ( ( ( ( ( ( ( 3 * ( IDENT_9 . IDENT_10 ) ) + ( Long . IDENT_10 ) ) + 1 ) + ( Long . IDENT_10 ) ) + 4 ) + ( 3 * ( IDENT_9 . IDENT_10 ) ) ) + ( Double . IDENT_10 ) ) + ( Long . IDENT_10 ) ; int size = org . sagebionetworks . repo . model . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_12 ( source ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( org . springframework . jdbc . core . IDENT_7 . METHOD_11 ) { if ( object == null ) return 0 ; int size = 0 ; java . lang . String [ ] IDENT_12 = object . METHOD_13 ( ) ; for ( java . lang . String name : IDENT_12 ) { java . lang . Object value = object . getValue ( name ) ; if ( value != null ) { int type = object . METHOD_14 ( name ) ; if ( ( java . sql . IDENT_13 . IDENT_14 ) == type ) { java . lang . String string = ( ( java . lang . String ) ( value ) ) ; size += ( string . length ( ) ) * ( IDENT_9 . IDENT_10 ) ; } else if ( ( java . sql . IDENT_13 . IDENT_15 ) == type ) { size += Long . IDENT_10 ; } else if ( ( java . sql . IDENT_13 . IDENT_16 ) == type ) { size += Long . IDENT_10 ; } else if ( ( java . sql . IDENT_13 . IDENT_17 ) == type ) { size += Double . IDENT_10 ; } else if ( ( java . sql . IDENT_13 . IDENT_18 ) == type ) { size += Integer . IDENT_10 ; } else if ( ( java . sql . IDENT_13 . IDENT_19 ) == type ) { size += Integer . IDENT_10 ; } else if ( ( java . sql . IDENT_13 . IDENT_20 ) == type ) { size += 1 ; } else if ( ( Integer . IDENT_21 ) == type ) { if ( value instanceof byte [ ] ) { byte [ ] array = ( ( byte [ ] ) ( value ) ) ; size += array . length ; } else if ( value instanceof java . lang . Class ) { } else if ( value . getClass ( ) . METHOD_15 ( ) ) { try { java . lang . reflect . Method IDENT_22 = value . getClass ( ) . METHOD_16 ( "name" ) ; java . lang . String IDENT_23 = ( ( java . lang . String ) ( IDENT_22 . invoke ( value , null ) ) ) ; size += ( IDENT_23 . length ( ) ) * ( IDENT_9 . IDENT_10 ) ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } else if ( value instanceof java . lang . Boolean ) { size += 1 ; } else { } } else { throw new java . lang . IllegalArgumentException ( ( ( ( ( ( STRING_1 + type ) + STRING_2 ) + name ) + STRING_3 ) + ( value . getClass ( ) ) ) ) ; } } } return size ; }
org . junit . Assert . assertEquals ( expected , size ) 