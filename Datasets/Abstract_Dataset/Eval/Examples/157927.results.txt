METHOD_0 ( ) { IDENT_0 = INT_0 ; IDENT_1 = STRING_0 ; IDENT_2 = INT_1 ; offset = 0 ; java . lang . String IDENT_3 = STRING_1 ; java . lang . String IDENT_4 = STRING_2 ; IDENT_5 = new org . sagebionetworks . repo . model . METHOD_1 ( false ) ; IDENT_5 . setId ( IDENT_0 ) ; when ( IDENT_6 . METHOD_2 ( IDENT_0 ) ) . thenReturn ( IDENT_5 ) ; org . sagebionetworks . repo . model . message . IDENT_7 IDENT_8 = new org . sagebionetworks . repo . model . message . METHOD_3 ( ) ; IDENT_8 . METHOD_4 ( java . util . Collections . METHOD_5 ( STRING_3 ) ) ; java . lang . String content = "foo" ; java . util . List < org . sagebionetworks . repo . manager . IDENT_9 > result = java . util . Collections . singletonList ( new org . sagebionetworks . repo . manager . METHOD_6 ( IDENT_8 , content , STRING_4 ) ) ; org . sagebionetworks . IDENT_10 . model . IDENT_11 IDENT_12 = new org . sagebionetworks . IDENT_10 . model . METHOD_7 ( ) ; when ( IDENT_13 . METHOD_8 ( eq ( IDENT_5 ) , eq ( IDENT_12 ) , anyString ( ) , anyString ( ) , METHOD_9 ( ) ) ) . thenReturn ( IDENT_12 ) ; when ( IDENT_13 . METHOD_10 ( eq ( IDENT_5 ) , eq ( IDENT_12 ) , anyString ( ) , eq ( IDENT_3 ) , eq ( IDENT_4 ) ) ) . thenReturn ( result ) ; when ( IDENT_14 . METHOD_11 ( ) ) . thenReturn ( IDENT_15 ) ; IDENT_16 . METHOD_8 ( IDENT_0 , IDENT_12 , STRING_5 , STRING_6 , null , IDENT_3 , IDENT_4 ) ; verify ( IDENT_6 ) . METHOD_2 ( IDENT_0 ) ; verify ( IDENT_13 ) . METHOD_8 ( eq ( IDENT_5 ) , eq ( IDENT_12 ) , eq ( STRING_5 ) , eq ( STRING_6 ) , METHOD_9 ( ) ) ; verify ( IDENT_13 ) . METHOD_10 ( eq ( IDENT_5 ) , any ( org . sagebionetworks . IDENT_10 . model . METHOD_7 . class ) , eq ( STRING_6 ) , eq ( IDENT_3 ) , eq ( IDENT_4 ) ) ; org . mockito . IDENT_17 < java . util . List > IDENT_18 = org . mockito . IDENT_17 . METHOD_12 ( java . util . List . class ) ; verify ( IDENT_19 ) . METHOD_13 ( eq ( IDENT_5 ) , IDENT_18 . METHOD_14 ( ) ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( result , IDENT_18 . getValue ( ) ) 