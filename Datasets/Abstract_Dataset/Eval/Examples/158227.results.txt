METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = org . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_1 ( STRING_1 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String ) { if ( IDENT_1 == null ) { return null ; } char [ ] IDENT_5 = key . METHOD_3 ( ) ; java . lang . String [ ] IDENT_6 = IDENT_1 . split ( STRING_2 ) ; if ( ( ( IDENT_6 . length ) == 4 ) && ( org . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_7 . equals ( IDENT_6 [ 3 ] ) ) ) { } else { throw new java . lang . RuntimeException ( STRING_3 ) ; } byte [ ] IDENT_8 = org . IDENT_2 . IDENT_3 . util . IDENT_9 . METHOD_4 ( IDENT_6 [ 0 ] ) ; byte [ ] IDENT_10 = org . IDENT_2 . IDENT_3 . util . IDENT_9 . METHOD_4 ( IDENT_6 [ 1 ] ) ; byte [ ] IDENT_11 = org . IDENT_2 . IDENT_3 . util . IDENT_9 . METHOD_4 ( IDENT_6 [ 2 ] ) ; try { javax . crypto . IDENT_12 IDENT_13 = org . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_5 ( IDENT_5 , IDENT_8 ) ; javax . crypto . IDENT_14 IDENT_15 = javax . crypto . IDENT_14 . getInstance ( org . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_7 ) ; IDENT_15 . init ( IDENT_14 . IDENT_16 , IDENT_13 , new javax . crypto . spec . METHOD_6 ( IDENT_10 ) ) ; java . lang . String IDENT_17 = new java . lang . String ( IDENT_15 . METHOD_7 ( IDENT_11 ) , STRING_4 ) ; return IDENT_17 ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertEquals ( IDENT_0 , org . IDENT_2 . IDENT_3 . util . IDENT_4 . METHOD_2 ( STRING_1 , IDENT_1 ) ) 