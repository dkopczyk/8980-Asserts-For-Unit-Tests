METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . dao . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . dao . METHOD_1 ( org . IDENT_0 . IDENT_1 . dao . IDENT_4 . IDENT_5 , STRING_0 , STRING_1 , STRING_2 , new java . util . Date ( ) , IDENT_6 . IDENT_7 , org . IDENT_0 . IDENT_1 . dao . IDENT_4 . IDENT_8 ) ; IDENT_9 . create ( IDENT_3 ) ; log . info ( ( STRING_3 + ( IDENT_3 . toString ( ) ) ) ) ; java . util . Optional < org . IDENT_0 . IDENT_1 . dao . METHOD_1 > item = IDENT_9 . get ( IDENT_3 . getId ( ) ) ; if ( item . METHOD_2 ( ) ) { item . get ( ) . METHOD_3 ( IDENT_6 . IDENT_10 ) ; IDENT_9 . save ( item . get ( ) ) ; java . util . Optional < org . IDENT_0 . IDENT_1 . dao . METHOD_1 > IDENT_11 = IDENT_9 . get ( IDENT_3 . getId ( ) ) ; if ( IDENT_11 . METHOD_2 ( ) ) { log . info ( ( STRING_4 + ( IDENT_3 . toString ( ) ) ) ) ; "<AssertPlaceHolder>" ; return ; } } org . junit . Assert . fail ( STRING_5 ) ; } get ( ) { java . lang . String res ; if ( ( IDENT_12 ) == ( - 1 ) ) { if ( ( IDENT_13 ) == ( - 1 ) ) { res = java . lang . String . format ( STRING_6 , IDENT_14 ) ; } else { res = java . lang . String . format ( STRING_7 , IDENT_14 , IDENT_13 ) ; } } else { res = java . lang . String . format ( STRING_8 , IDENT_14 , IDENT_12 , IDENT_13 ) ; } return res ; }
org . junit . Assert . assertEquals ( IDENT_6 . IDENT_10 , IDENT_11 . get ( ) . getStatus ( ) ) 