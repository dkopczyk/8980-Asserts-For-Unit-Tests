METHOD_0 ( ) { IDENT_0 . put ( 0L , FLOAT_0 ) ; IDENT_0 . put ( INT_0 , ( - FLOAT_1 ) ) ; IDENT_0 . put ( INT_1 , 0.0 ) ; IDENT_0 . put ( INT_2 , FLOAT_2 ) ; IDENT_0 . put ( INT_3 , ( - FLOAT_3 ) ) ; IDENT_0 . put ( INT_4 , ( - FLOAT_4 ) ) ; IDENT_0 . put ( INT_5 , FLOAT_5 ) ; IDENT_0 . put ( INT_6 , ( - FLOAT_6 ) ) ; IDENT_0 . put ( INT_7 , FLOAT_7 ) ; IDENT_0 . put ( INT_8 , ( - FLOAT_8 ) ) ; IDENT_0 . put ( INT_9 , FLOAT_9 ) ; IDENT_0 . put ( INT_10 , ( - FLOAT_10 ) ) ; IDENT_0 . put ( INT_11 , FLOAT_11 ) ; IDENT_1 . METHOD_1 ( IDENT_0 ) ; metrics . add ( IDENT_1 ) ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList ( ) ; java . lang . String IDENT_3 = STRING_0 ; IDENT_2 . add ( IDENT_3 ) ; java . util . List < com . IDENT_4 . IDENT_5 . IDENT_6 . entity . IDENT_7 > results = IDENT_8 . transform ( null , metrics , IDENT_2 ) ; java . util . Map < java . lang . Long , java . lang . Double > IDENT_9 = results . get ( 0 ) . METHOD_2 ( ) ; expected . put ( 0L , 0.0 ) ; expected . put ( INT_0 , 0.0 ) ; expected . put ( INT_1 , 0.0 ) ; expected . put ( INT_2 , 0.0 ) ; expected . put ( INT_3 , 0.0 ) ; expected . put ( INT_4 , 0.0 ) ; expected . put ( INT_5 , 0.0 ) ; expected . put ( INT_6 , 0.0 ) ; expected . put ( INT_7 , 0.0 ) ; expected . put ( INT_8 , 0.0 ) ; expected . put ( INT_9 , 0.0 ) ; expected . put ( INT_10 , 0.0 ) ; expected . put ( INT_11 , 0.0 ) ; for ( java . lang . Long IDENT_10 : expected . METHOD_3 ( ) ) { "<AssertPlaceHolder>" ; } } get ( com . IDENT_4 . IDENT_5 . IDENT_6 . entity . IDENT_11 ) { METHOD_4 ( ) ; com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_12 . IDENT_13 . METHOD_5 ( ( query != null ) , STRING_1 1 ) ; long size = ( ( long ) ( query . METHOD_6 ( ) ) ) * ( query . METHOD_7 ( ) ) ; com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_12 . IDENT_13 . METHOD_5 ( ( ( size > 0 ) && ( size <= ( Integer . MAX_VALUE ) ) ) , STRING_1 2 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_14 = new java . util . HashMap ( ) ; IDENT_14 . put ( STRING_2 , STRING_3 ) ; long start = java . lang . System . currentTimeMillis ( ) ; boolean IDENT_15 = false ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) . append ( STRING_1 0 ) . append ( com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_17 ) . append ( STRING_1 0 ) . append ( com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_18 ) . append ( STRING_1 0 ) . append ( STRING_4 ) ; int from = 0 ; int IDENT_19 ; if ( ( ( query . METHOD_6 ( ) ) * ( query . METHOD_7 ( ) ) ) > INT_12 ) { sb . append ( STRING_5 ) . append ( com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_20 ) ; IDENT_15 = true ; int IDENT_21 = ( query . METHOD_6 ( ) ) * ( query . METHOD_7 ( ) ) ; IDENT_19 = ( ( int ) ( IDENT_21 / ( ( IDENT_21 / INT_12 ) + 1 ) ) ) ; } else { from = ( query . METHOD_6 ( ) ) * ( ( query . METHOD_7 ( ) ) - 1 ) ; IDENT_19 = query . METHOD_6 ( ) ; } java . lang . String IDENT_22 = sb . toString ( ) ; java . lang . String IDENT_23 = METHOD_8 ( query , from , IDENT_19 ) ; try { com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_24 . debug ( STRING_6 , IDENT_22 , IDENT_23 ) ; org . elasticsearch . client . Response response = IDENT_25 . METHOD_9 ( com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_26 . IDENT_27 . getName ( ) , IDENT_22 , java . util . Collections . METHOD_10 ( ) , new org . apache . http . entity . METHOD_11 ( IDENT_23 ) ) ; com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_28 list = METHOD_12 ( METHOD_13 ( response ) , new com . fasterxml . jackson . core . type . IDENT_29 < com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_28 > ( ) { } ) ; if ( IDENT_15 ) { IDENT_22 = new java . lang . StringBuilder ( ) . append ( STRING_1 0 ) . append ( STRING_4 ) . append ( STRING_1 0 ) . append ( STRING_7 ) . toString ( ) ; java . util . List < com . IDENT_4 . IDENT_5 . IDENT_6 . entity . IDENT_30 > records = new java . util . METHOD_14 ( list . METHOD_15 ( ) ) ; while ( true ) { java . lang . String IDENT_31 = list . METHOD_16 ( ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_32 = new java . util . HashMap ( ) ; IDENT_32 . put ( STRING_8 , IDENT_31 ) ; IDENT_32 . put ( STRING_7 , com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_20 ) ; java . lang . String IDENT_33 = new com . fasterxml . jackson . databind . METHOD_17 ( ) . METHOD_18 ( IDENT_32 ) ; com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_24 . debug ( STRING_9 , IDENT_22 , IDENT_23 ) ; response = IDENT_25 . METHOD_9 ( com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_16 . IDENT_26 . IDENT_27 . getName ( ) , IDENT_22 , java . util . Collections . METHOD_10 ( ) , new org . apache . http . entity . METHOD_11 ( IDENT_33 ) ) ; list = METHOD_12 ( METHOD_13 ( response ) , new com . fasterxml . jackson . core . type . IDENT_29 < com . IDENT_4 . IDENT_5 . IDENT_6 . service . schema . IDENT_28 > ( ) { } ) ; records . addAll ( list . METHOD_15 ( ) ) ; if ( ( ( records . size ( ) ) >= ( ( query . METHOD_6 ( ) ) * ( query . METHOD_7 ( ) ) ) ) || ( ( list . METHOD_15 ( ) . size ( ) ) < IDENT_19 ) ) { break ; } } int IDENT_34 = ( query . METHOD_6 ( ) ) * ( ( query . METHOD_7 ( ) ) - 1 ) ; if ( ( records . size ( ) ) <= IDENT_34 ) { IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_37 , 1 , IDENT_14 ) ; IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_38 , ( ( java . lang . System . currentTimeMillis ( ) ) - start ) , IDENT_14 ) ; return java . util . Collections . emptyList ( ) ; } IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_37 , 1 , IDENT_14 ) ; IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_38 , ( ( java . lang . System . currentTimeMillis ( ) ) - start ) , IDENT_14 ) ; return records . METHOD_20 ( IDENT_34 , records . size ( ) ) ; } else { IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_37 , 1 , IDENT_14 ) ; IDENT_35 . METHOD_19 ( IDENT_36 . IDENT_38 , ( ( java . lang . System . currentTimeMillis ( ) ) - start ) , IDENT_14 ) ; return list . METHOD_15 ( ) ; } } catch ( java . io . IDENT_39 | com . fasterxml . jackson . core . IDENT_40 e ) { throw new com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_12 . METHOD_21 ( STRING_10 , e ) ; } catch ( java . io . IOException e ) { throw new com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_12 . METHOD_21 ( STRING_1 , e ) ; } }
org . junit . Assert . assertEquals ( expected . get ( IDENT_10 ) , IDENT_9 . get ( IDENT_10 ) , FLOAT_6 ) 