METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_4 IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_6 IDENT_7 = new com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_9 , com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_10 ) ; IDENT_7 . METHOD_3 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_11 ) ; IDENT_7 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_12 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_13 = new com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_9 , com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_10 ) ; IDENT_13 . METHOD_3 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_11 ) ; IDENT_13 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_12 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_14 = new com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_9 , com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_10 ) ; IDENT_14 . METHOD_3 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_11 ) ; IDENT_14 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_12 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > metrics = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > ( ) ; metrics . add ( IDENT_7 ) ; metrics . add ( IDENT_13 ) ; metrics . add ( IDENT_14 ) ; java . util . List < java . lang . String > IDENT_15 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_15 . add ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_8 . IDENT_10 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > result = IDENT_5 . transform ( null , metrics , IDENT_15 ) ; "<AssertPlaceHolder>" ; } transform ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_16 , java . util . List , java . util . List ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_17 . IDENT_18 . METHOD_5 ( ( metrics != null ) , STRING_0 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_17 . IDENT_18 . METHOD_5 ( ( ( IDENT_15 != null ) && ( ( IDENT_15 . size ( ) ) >= 2 ) ) , STRING_1 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_19 . IDENT_20 IDENT_21 = null ; int IDENT_22 = - 1 ; for ( int i = ( IDENT_15 . size ( ) ) - 1 ; i >= 0 ; i OP_0 ) { java . lang . String IDENT_23 = IDENT_15 . get ( i ) ; try { IDENT_21 = IDENT_19 . IDENT_20 . valueOf ( IDENT_23 ) ; IDENT_22 = i ; break ; } catch ( java . lang . IllegalArgumentException ex ) { } } if ( IDENT_21 == null ) { throw new java . lang . METHOD_6 ( STRING_2 ) ; } java . util . List < java . lang . String > IDENT_24 = IDENT_15 . METHOD_7 ( 0 , IDENT_22 ) ; if ( IDENT_24 . isEmpty ( ) ) { throw new java . lang . METHOD_6 ( STRING_3 ) ; } java . util . List < java . lang . String > IDENT_25 = ( IDENT_22 == ( ( IDENT_15 . size ( ) ) - 1 ) ) ? new java . util . ArrayList ( ) : IDENT_15 . METHOD_7 ( ( IDENT_22 + 1 ) , IDENT_15 . size ( ) ) ; java . util . Map < java . lang . String , java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > > IDENT_26 = new java . util . HashMap ( ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_3 : metrics ) { java . lang . String key = IDENT_24 . stream ( ) . map ( IDENT_3 :: IDENT_27 ) . filter ( IDENT_28 :: IDENT_29 ) . collect ( java . util . stream . IDENT_30 . METHOD_8 ( STRING_4 ) ) ; IDENT_26 . METHOD_9 ( key , new java . util . ArrayList ( ) ) ; IDENT_26 . get ( key ) . add ( IDENT_3 ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_4 transform = IDENT_31 . METHOD_10 ( IDENT_21 . getName ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > result = new java . util . ArrayList ( ) ; for ( java . util . Map . Entry < java . lang . String , java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > > entry : IDENT_26 . entrySet ( ) ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > IDENT_32 = entry . getValue ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > IDENT_33 = ( IDENT_25 . isEmpty ( ) ) ? transform . transform ( null , IDENT_32 ) : transform . transform ( null , IDENT_32 , IDENT_25 ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_34 : IDENT_33 ) { IDENT_34 . METHOD_11 ( ( ( ( entry . getKey ( ) ) != null ) && ( ! ( entry . getKey ( ) . trim ( ) . isEmpty ( ) ) ) ? entry . getKey ( ) : STRING_5 ) ) ; } result . addAll ( IDENT_33 ) ; } return result ; }
org . junit . Assert . assertEquals ( result . size ( ) , 0 ) 