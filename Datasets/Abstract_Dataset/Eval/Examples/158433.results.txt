METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > metrics = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > result = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . METHOD_1 ( ) . transform ( null , metrics ) ; "<AssertPlaceHolder>" ; } transform ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_5 , java . util . List ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . METHOD_2 ( ( metrics != null ) , STRING_0 ) ; if ( metrics . isEmpty ( ) ) { return metrics ; } com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . IDENT_8 IDENT_9 = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . METHOD_3 ( new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . METHOD_4 ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > IDENT_10 = IDENT_9 . transform ( null , metrics ) ; java . util . Set < java . lang . Long > IDENT_11 = IDENT_10 . get ( 0 ) . METHOD_5 ( ) . METHOD_6 ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > IDENT_12 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 > ( ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_3 IDENT_4 : metrics ) { java . util . Map < java . lang . Long , java . lang . Double > IDENT_13 = new java . util . METHOD_7 ( ) ; java . util . Set < java . lang . Long > IDENT_14 = IDENT_4 . METHOD_5 ( ) . METHOD_6 ( ) ; for ( java . lang . Long IDENT_15 : IDENT_11 ) { if ( ! ( IDENT_14 . contains ( IDENT_15 ) ) ) { IDENT_13 . put ( IDENT_15 , 0.0 ) ; } } IDENT_13 . METHOD_8 ( IDENT_4 . METHOD_5 ( ) ) ; IDENT_4 . METHOD_9 ( IDENT_13 ) ; IDENT_12 . add ( IDENT_4 ) ; } IDENT_12 . add ( IDENT_10 . get ( 0 ) ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . IDENT_8 IDENT_16 = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . METHOD_10 ( new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_4 . transform . METHOD_11 ( ) ) ; return IDENT_16 . transform ( null , IDENT_12 ) ; }
org . junit . Assert . assertEquals ( 0 , result . size ( ) ) 