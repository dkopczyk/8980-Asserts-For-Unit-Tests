METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 IDENT_4 = IDENT_5 . METHOD_1 ( ) . METHOD_2 ( ) ; int IDENT_6 = 0 ; com . IDENT_0 . IDENT_1 . IDENT_2 . util . ArrayList < java . lang . String > IDENT_7 = new com . IDENT_0 . IDENT_1 . IDENT_2 . util . ArrayList ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 , STRING_3 ) ) ; java . lang . String [ ] [ ] IDENT_8 = new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_4 } , new java . lang . String [ ] { STRING_5 } , new java . lang . String [ ] { STRING_6 , STRING_7 } , new java . lang . String [ ] { STRING_8 } } ; for ( java . lang . String IDENT_9 : IDENT_7 ) { com . IDENT_0 . IDENT_1 . IDENT_2 . util . List < java . lang . String > IDENT_10 = IDENT_4 . METHOD_3 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( java . lang . String ) { java . util . Set < java . lang . String > IDENT_11 = new java . util . HashSet < java . lang . String > ( ) ; java . util . regex . IDENT_12 m ; java . lang . String IDENT_13 = IDENT_14 . getValue ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_15 . IDENT_16 . IDENT_17 ) . replaceAll ( STRING_9 , STRING_10 ) ; java . lang . String IDENT_18 = IDENT_14 . getValue ( IDENT_15 . IDENT_16 . IDENT_19 ) ; java . util . ArrayList < java . lang . String > IDENT_20 = new java . util . ArrayList ( java . util . Arrays . asList ( ( ( STRING_11 + IDENT_13 ) + STRING_12 ) , STRING_13 ) ) ; if ( ( expression == null ) || ( expression . isEmpty ( ) ) ) { IDENT_21 . error ( ( STRING_14 + IDENT_18 ) ) ; IDENT_11 . add ( IDENT_18 ) ; } else { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_22 . IDENT_23 > IDENT_24 = METHOD_4 ( expression ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_22 . IDENT_23 IDENT_25 : IDENT_24 ) { m = java . util . regex . IDENT_26 . METHOD_5 ( IDENT_20 . get ( 0 ) ) . matcher ( IDENT_25 . METHOD_6 ( ) ) ; while ( m . find ( ) ) IDENT_11 . add ( m . group ( ) . substring ( 1 , ( ( m . group ( ) . length ( ) ) - 1 ) ) . METHOD_7 ( ) ) ; m = java . util . regex . IDENT_26 . METHOD_5 ( IDENT_20 . get ( 1 ) ) . matcher ( IDENT_25 . METHOD_6 ( ) ) ; if ( m . find ( ) ) IDENT_11 . add ( IDENT_18 ) ; } } if ( ( IDENT_11 . size ( ) ) == 0 ) { IDENT_21 . info ( ( ( ( STRING_15 + expression ) + STRING_16 ) + IDENT_18 ) ) ; IDENT_11 . add ( IDENT_18 ) ; } return new java . util . ArrayList ( IDENT_11 ) ; }
org . junit . Assert . assertEquals ( IDENT_10 , new com . IDENT_0 . IDENT_1 . IDENT_2 . util . ArrayList ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . Arrays . asList ( IDENT_8 [ ( IDENT_6 ++ ) ] ) ) ) 