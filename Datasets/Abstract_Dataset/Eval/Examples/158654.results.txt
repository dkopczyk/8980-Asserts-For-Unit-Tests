METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . List < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 > IDENT_6 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . ArrayList ( ) ; IDENT_0 . data . IDENT_7 IDENT_8 = new IDENT_0 . data . METHOD_1 ( ) ; IDENT_8 . put ( STRING_0 , 1.0 ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . Map < java . lang . String , java . lang . Integer > IDENT_9 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . HashMap ( ) ; IDENT_9 . put ( IDENT_10 . IDENT_11 , 0 ) ; IDENT_9 . put ( STRING_0 , 1 ) ; IDENT_6 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_2 ( IDENT_8 , 1.0 , IDENT_9 ) ) ; IDENT_6 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_2 ( IDENT_8 , 0.0 , IDENT_9 ) ) ; IDENT_6 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_2 ( IDENT_8 , 0.0 , IDENT_9 ) ) ; IDENT_6 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_2 ( IDENT_8 , 0.0 , IDENT_9 ) ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_12 IDENT_13 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_3 ( ) . METHOD_4 ( INT_0 ) . METHOD_5 ( INT_1 ) . METHOD_6 ( FLOAT_0 ) . METHOD_7 ( FLOAT_1 ) . METHOD_8 ( FLOAT_2 ) . METHOD_9 ( 4 ) . METHOD_10 ( false ) . METHOD_11 ( 1 ) . METHOD_12 ( true ) ; double [ ] result = IDENT_13 . METHOD_13 ( IDENT_6 , 2 ) ; double IDENT_14 = ( ( 4 * ( IDENT_0 . IDENT_15 . METHOD_14 ( ( ( result [ 0 ] ) + ( result [ 1 ] ) ) ) ) ) - 1 ) + ( result [ 1 ] ) ; "<AssertPlaceHolder>" ; int j = 0 ; for ( double value : result ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_16 . logger . info ( STRING_1 , j , value ) ; j ++ ; } } METHOD_14 ( double ) { return 1 / ( 1 + ( java . lang . Math . exp ( ( - IDENT_17 ) ) ) ) ; }
org . junit . Assert . assertEquals ( 0.0 , IDENT_14 , FLOAT_0 ) 