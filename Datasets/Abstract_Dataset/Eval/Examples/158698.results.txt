METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_4 IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . METHOD_1 ( ) ; IDENT_5 . METHOD_2 ( asList ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_6 ) ) ; IDENT_5 . start ( ) ; org . IDENT_7 . IDENT_8 . METHOD_3 ( ) ; org . IDENT_7 . IDENT_8 . put ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_9 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_10 ) ; org . IDENT_7 . IDENT_8 . put ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_6 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_6 ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_11 = METHOD_4 ( IDENT_5 . convert ( METHOD_5 ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_12 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_13 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String [ ] ) { java . util . Map < java . lang . String , java . lang . Object > result = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; java . util . List < java . lang . String > IDENT_14 ; if ( IDENT_15 == null ) { IDENT_14 = java . util . Arrays . asList ( new java . lang . String [ 0 ] ) ; } else { IDENT_14 = java . util . Arrays . asList ( IDENT_15 ) ; } for ( java . util . Map . Entry < java . lang . String , java . lang . String > t : org . IDENT_7 . IDENT_8 . METHOD_7 ( ) . entrySet ( ) ) { if ( ! ( IDENT_14 . contains ( t . getKey ( ) ) ) ) { result . put ( t . getKey ( ) , t . getValue ( ) ) ; } } return result ; }
org . junit . Assert . assertThat ( IDENT_11 , org . hamcrest . core . Is . is ( METHOD_6 ( asList ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . converter . IDENT_6 ) ) ) ) 