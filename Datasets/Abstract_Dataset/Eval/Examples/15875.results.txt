METHOD_0 ( ) { double IDENT_0 = FLOAT_0 ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . IDENT_5 v = new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . METHOD_1 ( new double [ ] { 1.0 , 2.0 } ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . METHOD_1 IDENT_6 = new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . METHOD_1 ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , 0.0 } ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . IDENT_8 m = ( ( org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . IDENT_8 ) ( new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . METHOD_2 ( new double [ ] [ ] { new double [ ] { 1.0 , 0.0 } , new double [ ] { 2.0 , FLOAT_3 } } , IDENT_9 . IDENT_10 ) . times ( IDENT_0 ) ) ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . METHOD_2 a = new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . METHOD_2 ( new double [ ] [ ] { new double [ ] { FLOAT_0 , 0.0 } , new double [ ] { FLOAT_1 , FLOAT_2 } } , IDENT_9 . IDENT_10 ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_11 . METHOD_3 ( IDENT_0 , v , IDENT_6 ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_7 . impl . METHOD_2 IDENT_12 = org . apache . IDENT_1 . IDENT_2 . math . IDENT_13 . METHOD_4 ( IDENT_6 , a . METHOD_5 ( ) , IDENT_9 . IDENT_10 , ( i , j ) -> i >= j ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . apache . IDENT_1 . IDENT_2 . tree . IDENT_14 . data . IDENT_15 . IDENT_16 ) { return new org . apache . IDENT_1 . IDENT_2 . tree . IDENT_14 . data . IDENT_15 . METHOD_7 ( java . lang . Math . min ( this . min , IDENT_17 . min ) , java . lang . Math . max ( this . max , IDENT_17 . max ) , ( ( this . IDENT_18 ) + ( IDENT_17 . IDENT_18 ) ) , ( ( this . IDENT_19 ) + ( IDENT_17 . IDENT_19 ) ) , ( ( this . n ) + ( IDENT_17 . n ) ) ) ; }
org . junit . Assert . assertEquals ( m . METHOD_6 ( a ) , IDENT_12 ) 