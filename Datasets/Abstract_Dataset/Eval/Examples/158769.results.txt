METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . IDENT_4 < com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_5 > IDENT_6 = com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . METHOD_2 ( ) ; java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( ) ; java . util . IDENT_7 IDENT_8 = new java . util . METHOD_3 ( IDENT_9 ) . METHOD_4 ( STRING_1 ) ; while ( IDENT_8 . hasNext ( ) ) { if ( IDENT_8 . hasNext ( com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_10 ) ) { IDENT_8 . next ( com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_10 ) ; java . util . regex . IDENT_11 result = IDENT_8 . match ( ) ; if ( ( result . METHOD_5 ( ) ) == 2 ) { java . lang . String IDENT_12 = result . group ( 1 ) ; double IDENT_13 = ( ( result . group ( 2 ) ) != null ) ? java . lang . Double . METHOD_6 ( result . group ( 2 ) ) : 1.0 ; IDENT_13 = com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . METHOD_7 ( IDENT_12 , IDENT_13 ) ; com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_5 IDENT_14 = new com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . METHOD_8 ( ) . METHOD_9 ( IDENT_13 ) . setValue ( IDENT_12 ) ; IDENT_6 . add ( IDENT_14 ) ; } else { java . lang . String header = IDENT_8 . next ( ) ; IDENT_8 . close ( ) ; throw new com . IDENT_1 . core . IDENT_2 . api . batch . METHOD_10 ( METHOD_10 . IDENT_15 . METHOD_11 ( header ) , com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_16 ) ; } } else { java . lang . String header = IDENT_8 . next ( ) ; IDENT_8 . close ( ) ; throw new com . IDENT_1 . core . IDENT_2 . api . batch . METHOD_10 ( METHOD_10 . IDENT_15 . METHOD_11 ( header ) , com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . IDENT_16 ) ; } } for ( com . IDENT_1 . core . IDENT_2 . core . batch . IDENT_3 . METHOD_8 accept : IDENT_6 ) { IDENT_0 . add ( accept . getValue ( ) ) ; } IDENT_8 . close ( ) ; return IDENT_0 ; }
org . junit . Assert . assertNotNull ( IDENT_0 ) 