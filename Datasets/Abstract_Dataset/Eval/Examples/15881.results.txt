METHOD_0 ( ) { double IDENT_0 = FLOAT_0 ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . IDENT_5 a = ( ( org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . IDENT_5 ) ( new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . impl . METHOD_1 ( 2 , 2 ) . METHOD_2 ( new double [ ] [ ] { new double [ ] { FLOAT_1 , FLOAT_2 } , new double [ ] { 0.0 , 1.0 } } ) ) ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . IDENT_7 x = org . apache . IDENT_1 . IDENT_2 . math . IDENT_8 . METHOD_3 ( new double [ ] { 1.0 , 2.0 } ) ; double IDENT_9 = 2.0 ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . IDENT_10 y = new org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . METHOD_4 ( new double [ ] { FLOAT_0 , FLOAT_3 } ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . METHOD_4 exp = ( ( org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . METHOD_4 ) ( y . times ( IDENT_9 ) . METHOD_5 ( a . times ( x ) . times ( IDENT_0 ) ) ) ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_11 . METHOD_6 ( IDENT_0 , a , x , IDENT_9 , y ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( double , org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_4 . IDENT_12 , org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . IDENT_13 , double , org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . IDENT_13 ) { org . apache . IDENT_1 . IDENT_2 . math . IDENT_11 . METHOD_7 ( a , x ) ; if ( ( a . METHOD_8 ( ) ) != ( y . size ( ) ) ) throw new org . apache . IDENT_1 . IDENT_2 . math . exceptions . METHOD_9 ( a . METHOD_10 ( ) , y . size ( ) ) ; if ( ( IDENT_0 == 0.0 ) && ( IDENT_9 == 1.0 ) ) return ; if ( IDENT_0 == 0.0 ) { org . apache . IDENT_1 . IDENT_2 . math . IDENT_11 . METHOD_11 ( y , IDENT_9 ) ; return ; } double [ ] IDENT_14 = a . METHOD_12 ( ) . data ( ) ; double [ ] IDENT_15 = x . METHOD_12 ( ) . data ( ) ; double [ ] IDENT_16 = y . METHOD_12 ( ) . data ( ) ; org . apache . IDENT_1 . IDENT_2 . math . IDENT_11 . IDENT_17 . METHOD_13 ( STRING_0 , a . METHOD_8 ( ) , a . METHOD_10 ( ) , IDENT_0 , IDENT_14 , a . METHOD_8 ( ) , IDENT_15 , 1 , IDENT_9 , IDENT_16 , 1 ) ; if ( y instanceof org . apache . IDENT_1 . IDENT_2 . math . IDENT_3 . IDENT_6 . impl . IDENT_7 ) y . METHOD_2 ( IDENT_16 ) ; }
org . junit . Assert . assertEquals ( exp , y ) 