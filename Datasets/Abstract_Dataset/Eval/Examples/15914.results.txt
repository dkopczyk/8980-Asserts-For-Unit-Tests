METHOD_0 ( ) { if ( org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . METHOD_1 ( IDENT_3 . IDENT_4 ) ) { org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . info ( STRING_0 ) ; } int IDENT_5 = 2 ; org . apache . IDENT_0 . api . IDENT_6 . value . IDENT_7 [ ] IDENT_8 = new org . apache . IDENT_0 . api . IDENT_6 . value . IDENT_7 [ ] { new org . apache . IDENT_0 . IDENT_6 . common . data . IDENT_9 . METHOD_2 ( ) } ; org . apache . IDENT_0 . IDENT_6 . common . IDENT_10 . io . IDENT_11 IDENT_12 = new org . apache . IDENT_0 . IDENT_6 . common . IDENT_10 . io . METHOD_3 ( IDENT_5 ) ; org . apache . IDENT_0 . IDENT_6 . common . IDENT_10 . io . IDENT_13 tuple = new org . apache . IDENT_0 . IDENT_6 . common . IDENT_10 . io . METHOD_4 ( ) ; java . lang . String s = METHOD_5 ( 100 , IDENT_14 ) ; org . apache . IDENT_0 . IDENT_6 . common . util . IDENT_15 . METHOD_6 ( IDENT_12 , tuple , IDENT_8 , s ) ; int [ ] IDENT_16 = new int [ ] { 0 } ; int length = METHOD_7 ( tuple , IDENT_16 ) ; long [ ] IDENT_17 = new long [ org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_18 . IDENT_19 ] ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_8 ( tuple , IDENT_16 , 0L , IDENT_17 ) ; byte [ ] array = new byte [ length ] ; java . nio . ByteBuffer buffer ; METHOD_9 ( array , IDENT_16 , tuple , length ) ; buffer = java . nio . ByteBuffer . METHOD_10 ( array ) ; long [ ] IDENT_22 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_18 . METHOD_8 ( buffer , 0 , length , 0L ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . nio . ByteBuffer , int , int , long ) { final int IDENT_23 = length > > 4 ; long IDENT_24 = IDENT_25 ; long IDENT_26 = IDENT_25 ; long IDENT_27 = - INT_0 ; long IDENT_28 = INT_1 ; for ( int i = 0 ; i < IDENT_23 ; i ++ ) { long IDENT_29 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_18 . METHOD_11 ( key , offset , ( ( i * 2 ) + 0 ) ) ; long IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_18 . METHOD_11 ( key , offset , ( ( i * 2 ) + 1 ) ) ; IDENT_29 OP_0 IDENT_27 ; IDENT_29 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_29 , INT_2 ) ; IDENT_29 OP_0 IDENT_28 ; IDENT_24 OP_1 IDENT_29 ; IDENT_24 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_24 , INT_3 ) ; IDENT_24 += IDENT_26 ; IDENT_24 = ( IDENT_24 * 5 ) + INT_4 ; IDENT_30 OP_0 IDENT_28 ; IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_30 , INT_5 ) ; IDENT_30 OP_0 IDENT_27 ; IDENT_26 OP_1 IDENT_30 ; IDENT_26 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_26 , INT_2 ) ; IDENT_26 += IDENT_24 ; IDENT_26 = ( IDENT_26 * 5 ) + INT_6 ; } offset += IDENT_23 * 16 ; long IDENT_29 = 0 ; long IDENT_30 = 0 ; switch ( length & 15 ) { case 15 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + INT_7 ) ) ) ) << INT_8 ; case INT_7 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + INT_9 ) ) ) ) << INT_10 ; case INT_9 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 12 ) ) ) ) << INT_11 ; case 12 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + INT_12 ) ) ) ) << INT_13 ; case INT_12 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 10 ) ) ) ) << 16 ; case 10 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 9 ) ) ) ) << 8 ; case 9 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 8 ) ) ) ) << 0 ; IDENT_30 OP_0 IDENT_28 ; IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_30 , INT_5 ) ; IDENT_30 OP_0 IDENT_27 ; IDENT_26 OP_1 IDENT_30 ; case 8 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 7 ) ) ) ) << INT_14 ; case 7 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 6 ) ) ) ) << INT_8 ; case 6 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 5 ) ) ) ) << INT_10 ; case 5 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 4 ) ) ) ) << INT_11 ; case 4 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 3 ) ) ) ) << INT_13 ; case 3 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 2 ) ) ) ) << 16 ; case 2 : IDENT_29 OP_1 ( ( long ) ( key . get ( ( offset + 1 ) ) ) ) << 8 ; case 1 : IDENT_29 OP_1 ( ( long ) ( key . get ( offset ) ) ) ; IDENT_29 OP_0 IDENT_27 ; IDENT_29 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_12 ( IDENT_29 , INT_2 ) ; IDENT_29 OP_0 IDENT_28 ; IDENT_24 OP_1 IDENT_29 ; } IDENT_24 OP_1 length ; IDENT_26 OP_1 length ; IDENT_24 += IDENT_26 ; IDENT_26 += IDENT_24 ; IDENT_24 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_13 ( IDENT_24 ) ; IDENT_26 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 . METHOD_13 ( IDENT_26 ) ; IDENT_24 += IDENT_26 ; IDENT_26 += IDENT_24 ; return new long [ ] { IDENT_24 , IDENT_26 } ; }
org . junit . Assert . assertArrayEquals ( IDENT_22 , IDENT_17 ) 