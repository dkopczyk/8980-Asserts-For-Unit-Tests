METHOD_0 ( ) { final org . IDENT_0 . Context ctx = new org . IDENT_0 . Context ( org . IDENT_0 . script . IDENT_1 . class ) ; final org . IDENT_0 . script . IDENT_1 IDENT_2 = ctx . service ( org . IDENT_0 . script . IDENT_1 . class ) ; final java . lang . Class < ? > [ ] IDENT_3 = new java . lang . Class < ? > [ ] { boolean . class , byte . class , char . class , double . class , float . class , int . class , long . class , short . class , org . IDENT_0 . script . Boolean . class , org . IDENT_0 . script . IDENT_4 . class , org . IDENT_0 . script . IDENT_5 . class , org . IDENT_0 . script . Double . class , org . IDENT_0 . script . IDENT_6 . class , org . IDENT_0 . script . Integer . class , org . IDENT_0 . script . Long . class , org . IDENT_0 . script . IDENT_7 . class , org . IDENT_0 . Context . class , java . math . BigDecimal . class , java . math . BigInteger . class , org . IDENT_0 . util . IDENT_8 . class , org . IDENT_0 . util . IDENT_9 . class , java . util . Date . class , java . io . File . class , java . lang . String . class } ; for ( final java . lang . Class < ? > IDENT_10 : IDENT_3 ) { final java . lang . Class < ? > c = IDENT_2 . METHOD_1 ( IDENT_10 . METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; } ctx . METHOD_3 ( ) ; } METHOD_1 ( java . lang . String ) { final java . lang . String IDENT_11 = METHOD_4 ( IDENT_12 ) ; final java . lang . Class < ? > type = METHOD_5 ( ) . get ( IDENT_11 ) ; if ( type != null ) { final int IDENT_13 = ( ( IDENT_12 . length ( ) ) - ( IDENT_11 . length ( ) ) ) / 2 ; return org . IDENT_0 . util . IDENT_14 . array ( type , IDENT_13 ) ; } try { final java . lang . Class < ? > c = org . IDENT_0 . util . IDENT_14 . load ( IDENT_12 , false ) ; METHOD_5 ( ) . put ( IDENT_12 , c ) ; return c ; } catch ( final java . lang . IllegalArgumentException IDENT_15 ) { final javax . script . IDENT_16 IDENT_17 = new javax . script . METHOD_6 ( ( STRING_0 + IDENT_12 ) ) ; IDENT_17 . METHOD_7 ( IDENT_15 ) ; throw IDENT_17 ; } }
org . junit . Assert . assertSame ( IDENT_10 , c ) 