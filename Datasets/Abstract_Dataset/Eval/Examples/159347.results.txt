METHOD_0 ( ) { java . text . IDENT_0 IDENT_1 = new java . text . METHOD_1 ( STRING_0 ) ; org . oscarehr . common . model . IDENT_2 IDENT_3 = METHOD_2 ( 1 ) ; java . util . Date IDENT_4 = new java . util . Date ( IDENT_1 . parse ( STRING_1 ) . getTime ( ) ) ; IDENT_3 . METHOD_3 ( IDENT_4 ) ; IDENT_3 . METHOD_4 ( STRING_2 ) ; IDENT_3 . METHOD_5 ( STRING_2 ) ; org . oscarehr . common . model . IDENT_2 IDENT_5 = METHOD_2 ( 1 ) ; java . util . Date IDENT_6 = new java . util . Date ( IDENT_1 . parse ( STRING_3 ) . getTime ( ) ) ; IDENT_5 . METHOD_3 ( IDENT_6 ) ; IDENT_5 . METHOD_4 ( STRING_4 ) ; IDENT_5 . METHOD_5 ( STRING_4 ) ; org . oscarehr . common . model . IDENT_2 IDENT_7 = METHOD_2 ( 1 ) ; java . util . Date IDENT_8 = new java . util . Date ( IDENT_1 . parse ( STRING_5 ) . getTime ( ) ) ; IDENT_7 . METHOD_3 ( IDENT_8 ) ; IDENT_7 . METHOD_4 ( STRING_6 ) ; IDENT_7 . METHOD_5 ( STRING_6 ) ; dao . METHOD_6 ( IDENT_3 ) ; dao . METHOD_6 ( IDENT_5 ) ; dao . METHOD_6 ( IDENT_7 ) ; java . util . List < java . lang . String > IDENT_9 = dao . METHOD_7 ( IDENT_3 . METHOD_8 ( ) ) ; java . util . List < java . lang . String > IDENT_10 = new java . util . ArrayList < java . lang . String > ( java . util . Arrays . asList ( STRING_6 , STRING_6 , STRING_4 , STRING_4 , STRING_2 , STRING_2 ) ) ; if ( ( IDENT_9 . size ( ) ) != ( IDENT_10 . size ( ) ) ) { org . junit . Assert . fail ( STRING_7 ) ; } for ( int i = 0 ; i < ( IDENT_9 . size ( ) ) ; i ++ ) { if ( ! ( IDENT_9 . get ( i ) . equals ( IDENT_10 . get ( i ) ) ) ) { org . junit . Assert . fail ( STRING_8 ) ; } } "<AssertPlaceHolder>" ; } get ( java . lang . String ) { try { return IDENT_11 . get ( path ) ; } catch ( ca . uhn . IDENT_12 . IDENT_13 e ) { IDENT_14 . IDENT_15 . ca . IDENT_16 . IDENT_17 . IDENT_18 . logger . warn ( ( STRING_9 + path ) , e ) ; return null ; } }
org . junit . Assert . assertTrue ( true ) 