METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . oscarehr . common . model . IDENT_1 IDENT_2 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_3 . METHOD_2 ( IDENT_2 ) ; IDENT_2 . METHOD_3 ( IDENT_0 ) ; IDENT_2 . METHOD_4 ( "1" ) ; org . oscarehr . common . model . METHOD_1 IDENT_4 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_3 . METHOD_2 ( IDENT_4 ) ; IDENT_4 . METHOD_3 ( STRING_1 ) ; IDENT_4 . METHOD_4 ( "2" ) ; org . oscarehr . common . model . METHOD_1 IDENT_5 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_3 . METHOD_2 ( IDENT_5 ) ; IDENT_5 . METHOD_3 ( IDENT_0 ) ; IDENT_5 . METHOD_4 ( STRING_2 ) ; dao . METHOD_5 ( IDENT_2 ) ; dao . METHOD_5 ( IDENT_4 ) ; dao . METHOD_5 ( IDENT_5 ) ; java . util . List < org . oscarehr . common . model . METHOD_1 > result = dao . METHOD_6 ( IDENT_0 ) ; java . util . List < org . oscarehr . common . model . METHOD_1 > IDENT_6 = new java . util . ArrayList < org . oscarehr . common . model . METHOD_1 > ( java . util . Arrays . asList ( IDENT_2 , IDENT_5 ) ) ; if ( ( result . size ( ) ) != ( IDENT_6 . size ( ) ) ) { logger . warn ( STRING_3 ) ; org . junit . Assert . fail ( STRING_3 ) ; } for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i ++ ) { if ( ! ( IDENT_6 . get ( i ) . equals ( result . get ( i ) ) ) ) { logger . warn ( STRING_4 ) ; org . junit . Assert . fail ( STRING_5 ) ; } } "<AssertPlaceHolder>" ; } get ( java . lang . String ) { try { return IDENT_7 . get ( path ) ; } catch ( ca . uhn . IDENT_8 . IDENT_9 e ) { IDENT_10 . IDENT_11 . ca . IDENT_12 . IDENT_13 . IDENT_14 . logger . warn ( ( STRING_6 + path ) , e ) ; return null ; } }
org . junit . Assert . assertTrue ( true ) 