METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; int IDENT_2 = METHOD_1 ( IDENT_0 , IDENT_1 , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String , java . lang . String ) { java . lang . String [ ] IDENT_3 = new java . lang . String [ ] { STRING_3 , STRING_4 , STRING_5 } ; java . lang . String [ ] IDENT_4 = IDENT_0 . split ( STRING_6 ) ; for ( java . lang . String IDENT_5 : IDENT_3 ) { if ( new java . io . File ( IDENT_5 ) . METHOD_2 ( ) ) { new java . io . File ( IDENT_5 ) . delete ( ) ; } org . junit . Assert . assertFalse ( new java . io . File ( IDENT_5 ) . METHOD_2 ( ) ) ; } IDENT_6 . search . IDENT_7 . IDENT_8 . METHOD_3 ( IDENT_4 ) ; for ( java . lang . String IDENT_5 : IDENT_3 ) org . junit . Assert . assertTrue ( new java . io . File ( IDENT_5 ) . METHOD_2 ( ) ) ; java . lang . String [ ] IDENT_9 = IDENT_1 . split ( STRING_6 ) ; IDENT_6 . search . IDENT_7 . IDENT_10 . List < IDENT_6 . search . IDENT_7 . IDENT_11 > results = IDENT_6 . search . IDENT_7 . IDENT_12 . METHOD_4 ( IDENT_6 . search . IDENT_7 . IDENT_13 . METHOD_5 ( IDENT_9 ) ) ; int IDENT_2 = 1 ; if ( results . isEmpty ( ) ) { throw new java . lang . RuntimeException ( STRING_7 ) ; } else { for ( IDENT_6 . search . IDENT_7 . IDENT_11 result : results ) { java . lang . String IDENT_14 = ( ( java . lang . String ) ( result . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; if ( IDENT_14 . contains ( IDENT_15 ) ) break ; ++ IDENT_2 ; } } for ( java . lang . String IDENT_5 : IDENT_3 ) { System . err . println ( ( STRING_8 + IDENT_5 ) ) ; org . junit . Assert . assertTrue ( ( STRING_9 + IDENT_5 ) , new java . io . File ( IDENT_5 ) . delete ( ) ) ; } return IDENT_2 ; }
org . junit . Assert . assertTrue ( ( IDENT_2 <= 3 ) ) 