METHOD_0 ( ) { org . IDENT_0 . core . IDENT_1 IDENT_2 = org . IDENT_0 . core . IDENT_3 . IDENT_4 . METHOD_1 ( org . IDENT_0 . core . IDENT_3 . IDENT_5 , org . IDENT_0 . core . IDENT_3 . IDENT_6 ) ; org . IDENT_0 . core . IDENT_1 IDENT_7 = org . IDENT_0 . core . IDENT_3 . IDENT_4 . METHOD_1 ( new org . IDENT_0 . core . METHOD_2 ( ( ( org . IDENT_0 . core . IDENT_3 . IDENT_5 . x ) - 1 ) , ( ( org . IDENT_0 . core . IDENT_3 . IDENT_5 . y ) - 1 ) , org . IDENT_0 . core . IDENT_3 . IDENT_5 . IDENT_8 ) , org . IDENT_0 . core . IDENT_3 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_0 . core . METHOD_2 , double ) { org . IDENT_0 . core . METHOD_2 IDENT_9 ; double IDENT_10 = IDENT_11 ; int IDENT_12 ; double solution = 0 ; for ( IDENT_12 = 0 ; IDENT_12 <= ( org . IDENT_0 . core . IDENT_13 . IDENT_14 ) ; ++ IDENT_12 ) { org . IDENT_0 . core . METHOD_2 IDENT_15 = METHOD_3 ( IDENT_10 ) ; org . IDENT_0 . core . METHOD_2 IDENT_16 = METHOD_4 ( IDENT_10 ) ; org . IDENT_0 . core . METHOD_2 IDENT_17 = METHOD_5 ( IDENT_10 ) ; IDENT_9 = IDENT_18 . min ( IDENT_15 ) ; solution = ( - ( METHOD_6 ( IDENT_16 , IDENT_9 ) ) ) / ( METHOD_7 ( IDENT_9 , IDENT_16 , IDENT_17 ) ) ; IDENT_10 += solution ; if ( ( java . lang . Math . METHOD_8 ( solution ) ) < ( org . IDENT_0 . core . IDENT_13 . IDENT_19 ) ) { break ; } } if ( IDENT_12 >= ( org . IDENT_0 . core . IDENT_13 . IDENT_14 ) ) { } org . IDENT_0 . core . METHOD_2 IDENT_15 = METHOD_3 ( IDENT_10 ) ; IDENT_9 = IDENT_18 . min ( IDENT_15 ) ; double IDENT_20 = ( IDENT_9 . METHOD_9 ( ) ) / ( org . IDENT_0 . core . IDENT_13 . IDENT_21 ) ; return new org . IDENT_0 . core . METHOD_2 ( IDENT_20 , IDENT_10 ) ; }
org . junit . Assert . assertFalse ( ( IDENT_2 == IDENT_7 ) ) 