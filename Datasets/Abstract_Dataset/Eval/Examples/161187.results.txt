METHOD_0 ( ) { final double IDENT_0 = FLOAT_0 ; org . IDENT_1 . core . IDENT_2 IDENT_3 = new org . IDENT_1 . core . METHOD_1 ( INT_0 , INT_1 , INT_2 , INT_3 ) ; int IDENT_4 = 1 ; int IDENT_5 = 1 ; double IDENT_6 = FLOAT_1 ; int offset = 0 ; double IDENT_7 = - INT_4 ; final int IDENT_8 = INT_5 ; final int IDENT_9 = INT_6 ; double [ ] [ ] IDENT_10 ; double [ ] [ ] IDENT_11 ; double [ ] [ ] IDENT_12 ; double [ ] [ ] IDENT_13 ; java . lang . String IDENT_14 = STRING_0 ; java . lang . String IDENT_15 ; IDENT_15 = IDENT_14 + STRING_1 ; IDENT_10 = METHOD_2 ( IDENT_15 , IDENT_8 , IDENT_9 ) . METHOD_3 ( ) ; IDENT_15 = IDENT_14 + STRING_2 ; IDENT_11 = METHOD_2 ( IDENT_15 , IDENT_8 , IDENT_9 ) . METHOD_3 ( ) ; IDENT_15 = IDENT_14 + STRING_3 ; IDENT_12 = METHOD_2 ( IDENT_15 , IDENT_8 , IDENT_9 ) . METHOD_3 ( ) ; IDENT_15 = IDENT_14 + STRING_4 ; IDENT_13 = METHOD_2 ( IDENT_15 , INT_7 , INT_8 ) . METHOD_3 ( ) ; double [ ] [ ] IDENT_16 = new double [ INT_7 ] [ INT_8 ] ; for ( int i = 0 ; i < ( IDENT_13 . length ) ; i ++ ) { double [ ] IDENT_17 = IDENT_13 [ i ] ; "<AssertPlaceHolder>" ; } } METHOD_2 ( java . lang . String , int , int ) { return org . IDENT_1 . core . io . IDENT_18 . METHOD_2 ( IDENT_19 , IDENT_20 , IDENT_21 , IDENT_22 . IDENT_23 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_17 , IDENT_16 [ i ] , IDENT_0 ) 