METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_0 ; org . IDENT_2 . core . meta . IDENT_3 IDENT_4 = new org . IDENT_2 . core . meta . METHOD_1 ( ) ; boolean actual = org . IDENT_2 . core . generator . IDENT_5 . METHOD_2 ( IDENT_0 , IDENT_1 , IDENT_4 ) ; boolean expected = true ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String , org . IDENT_2 . core . meta . METHOD_1 ) { org . IDENT_2 . core . util . IDENT_6 . METHOD_3 ( STRING_1 ) . METHOD_4 ( IDENT_0 ) ; org . IDENT_2 . core . util . IDENT_6 . METHOD_3 ( STRING_2 ) . METHOD_4 ( IDENT_1 ) ; org . IDENT_2 . core . util . IDENT_6 . METHOD_3 ( STRING_3 ) . METHOD_4 ( IDENT_4 ) ; if ( ( IDENT_1 . equals ( IDENT_0 ) ) || ( IDENT_1 . equals ( IDENT_0 . replace ( STRING_4 , "" ) ) ) ) { return true ; } else { java . lang . String [ ] IDENT_7 = IDENT_0 . split ( STRING_5 ) ; java . lang . String IDENT_8 = IDENT_7 [ ( ( IDENT_7 . length ) - 1 ) ] ; if ( IDENT_1 . equals ( IDENT_8 ) ) { java . lang . String IDENT_9 = ( ( IDENT_4 . IDENT_10 ) + STRING_6 ) + IDENT_8 ; if ( IDENT_9 . equals ( IDENT_0 ) ) { return true ; } else { for ( java . lang . String IDENT_11 : IDENT_4 . IDENT_12 ) { java . lang . String target = IDENT_0 . METHOD_5 ( IDENT_8 , "" ) ; if ( ( IDENT_11 . matches ( IDENT_0 ) ) || ( IDENT_11 . matches ( ( target + STRING_7 ) ) ) ) { return true ; } } } } } return false ; }
org . junit . Assert . assertThat ( actual , is ( equalTo ( expected ) ) ) 