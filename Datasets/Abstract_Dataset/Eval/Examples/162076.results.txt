METHOD_0 ( ) { org . IDENT_0 . core . config . Configuration config = new org . IDENT_0 . core . config . Configuration ( ) ; config . IDENT_1 = org . IDENT_0 . core . config . IDENT_2 . IDENT_3 ; org . IDENT_0 . core . generator . IDENT_4 target = new org . IDENT_0 . core . generator . METHOD_1 ( config , IDENT_5 ) ; java . lang . String IDENT_6 = STRING_0 ; org . IDENT_0 . core . meta . IDENT_7 IDENT_8 = IDENT_9 . METHOD_2 ( IDENT_6 ) ; target . METHOD_3 ( IDENT_8 ) ; java . lang . String actual = target . METHOD_4 ( ) ; java . lang . String expected = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; if ( ( ( IDENT_8 . IDENT_10 ) != null ) && ( ( IDENT_8 . IDENT_10 . trim ( ) . length ( ) ) > 0 ) ) { buf . append ( STRING_2 ) ; buf . append ( IDENT_8 . IDENT_10 ) ; buf . append ( STRING_3 ) ; IDENT_11 . METHOD_5 ( buf ) ; IDENT_11 . METHOD_5 ( buf ) ; } for ( java . lang . String IDENT_12 : IDENT_8 . IDENT_13 ) { if ( ( IDENT_12 != null ) && ( ( IDENT_12 . trim ( ) . length ( ) ) > 0 ) ) { buf . append ( STRING_2 0 ) ; buf . append ( IDENT_12 ) ; buf . append ( STRING_3 ) ; IDENT_11 . METHOD_5 ( buf ) ; } } if ( ( ( config . IDENT_14 ) != null ) && ( ( config . IDENT_14 . trim ( ) . length ( ) ) > 0 ) ) { if ( ( ( config . IDENT_1 ) == ( org . IDENT_0 . core . config . IDENT_2 . IDENT_3 ) ) || ( ! ( config . IDENT_14 . equals ( STRING_4 ) ) ) ) { buf . append ( STRING_2 0 ) ; buf . append ( config . IDENT_14 ) ; buf . append ( STRING_3 ) ; IDENT_11 . METHOD_5 ( buf ) ; IDENT_11 . METHOD_5 ( buf ) ; } } else { IDENT_11 . METHOD_5 ( buf ) ; } buf . append ( STRING_5 ) ; buf . append ( IDENT_8 . name ) ; buf . append ( STRING_6 ) ; if ( ( ( config . IDENT_14 ) != null ) && ( ( config . IDENT_14 . trim ( ) . length ( ) ) > 0 ) ) { if ( ( ( config . IDENT_1 ) == ( org . IDENT_0 . core . config . IDENT_2 . IDENT_3 ) ) || ( ! ( config . IDENT_14 . equals ( STRING_4 ) ) ) ) { buf . append ( STRING_7 ) ; java . lang . String [ ] IDENT_15 = config . IDENT_14 . split ( STRING_8 ) ; buf . append ( IDENT_15 [ ( ( IDENT_15 . length ) - 1 ) ] ) ; buf . append ( " " ) ; } } buf . append ( STRING_9 ) ; IDENT_11 . METHOD_5 ( buf ) ; IDENT_11 . METHOD_5 ( buf ) ; buf . append ( STRING_10 ) ; IDENT_11 . METHOD_5 ( buf ) ; return METHOD_6 ( buf . toString ( ) ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 