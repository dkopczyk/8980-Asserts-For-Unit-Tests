METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; org . IDENT_2 . core . meta . IDENT_3 IDENT_4 = IDENT_5 . METHOD_1 ( IDENT_1 ) ; target . METHOD_2 ( IDENT_4 ) ; org . IDENT_2 . core . config . IDENT_6 version = org . IDENT_2 . core . config . IDENT_6 . IDENT_7 ; java . lang . String actual = target . METHOD_3 ( IDENT_0 , version ) ; java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String , org . IDENT_2 . core . config . IDENT_6 ) { java . lang . String IDENT_8 = IDENT_0 ; org . IDENT_2 . core . meta . IDENT_3 IDENT_9 = new org . IDENT_2 . core . IDENT_10 . METHOD_4 ( config ) . METHOD_1 ( IDENT_0 ) ; org . IDENT_2 . core . config . Configuration config = org . IDENT_2 . core . util . IDENT_11 . METHOD_5 ( this . config ) ; if ( version == ( org . IDENT_2 . core . config . IDENT_6 . IDENT_12 ) ) { IDENT_8 = IDENT_8 . replaceAll ( STRING_3 , ( STRING_4 4 + ( config . IDENT_13 . IDENT_14 ) ) ) ; java . lang . String [ ] IDENT_15 = config . IDENT_16 . split ( STRING_4 2 ) ; java . lang . String IDENT_17 = IDENT_15 [ ( ( IDENT_15 . length ) - 1 ) ] ; IDENT_8 = IDENT_8 . METHOD_6 ( ( ( IDENT_9 . name ) + STRING_5 ) , ( ( ( ( IDENT_9 . name ) + STRING_6 ) + IDENT_17 ) + STRING_7 ) ) ; config . IDENT_18 = org . IDENT_2 . core . config . IDENT_6 . IDENT_12 ; IDENT_8 = METHOD_7 ( IDENT_8 , IDENT_4 , config ) ; } else if ( version == ( org . IDENT_2 . core . config . IDENT_6 . IDENT_7 ) ) { IDENT_8 = IDENT_8 . replaceAll ( ( STRING_4 4 + ( config . IDENT_13 . IDENT_14 ) ) , STRING_4 3 ) ; java . lang . String IDENT_19 = STRING_4 ; java . lang . String IDENT_20 = STRING_4 5 ; java . lang . String IDENT_21 = STRING_8 ; java . lang . String IDENT_22 = STRING_9 ; java . lang . String IDENT_23 = IDENT_8 . replaceAll ( STRING_10 , STRING_4 0 ) . replaceAll ( STRING_4 1 , STRING_4 0 ) ; if ( IDENT_23 . matches ( IDENT_19 ) ) { java . util . regex . IDENT_24 matcher = java . util . regex . IDENT_25 . METHOD_8 ( IDENT_19 ) . matcher ( IDENT_23 ) ; if ( matcher . matches ( ) ) { java . lang . String IDENT_26 = matcher . group ( 1 ) ; if ( IDENT_26 . trim ( ) . equals ( IDENT_21 ) ) { IDENT_8 = IDENT_8 . METHOD_6 ( ( ( IDENT_9 . name ) + STRING_11 ) , ( ( IDENT_9 . name ) + STRING_7 ) ) ; } else if ( ( IDENT_26 . trim ( ) . equals ( IDENT_22 ) ) && ( IDENT_23 . matches ( IDENT_20 ) ) ) { IDENT_8 = IDENT_8 . METHOD_6 ( ( ( IDENT_9 . name ) + STRING_11 ) , ( ( IDENT_9 . name ) + STRING_7 ) ) . replaceAll ( STRING_12 , STRING_4 0 ) ; } } } config . IDENT_18 = org . IDENT_2 . core . config . IDENT_6 . IDENT_7 ; IDENT_8 = METHOD_7 ( IDENT_8 , IDENT_4 , config ) ; } return IDENT_8 ; }
org . junit . Assert . assertEquals ( expected , actual ) 