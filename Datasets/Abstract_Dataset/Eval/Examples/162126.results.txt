METHOD_0 ( ) { java . lang . String [ ] args = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 0 , STRING_8 } ; java . lang . Class < ? > [ ] expected = new java . lang . Class < ? > [ ] { byte . class , short . class , int . class , long . class , char . class , float . class , double . class , boolean . class , void . class } ; for ( int i = 0 ; i < ( args . length ) ; i ++ ) { java . lang . Class < ? > actual = org . IDENT_0 . core . util . IDENT_1 . METHOD_1 ( args [ i ] ) ; "<AssertPlaceHolder>" ; } try { org . IDENT_0 . core . util . IDENT_1 . METHOD_1 ( STRING_9 ) ; org . junit . Assert . fail ( STRING_7 ) ; } catch ( java . lang . IllegalArgumentException e ) { } } METHOD_1 ( java . lang . String ) { org . IDENT_0 . core . util . IDENT_2 . METHOD_2 ( STRING_10 ) . METHOD_3 ( IDENT_3 ) ; if ( IDENT_3 . equals ( STRING_0 ) ) return byte . class ; if ( IDENT_3 . equals ( STRING_1 ) ) return short . class ; if ( IDENT_3 . equals ( STRING_2 ) ) return int . class ; if ( IDENT_3 . equals ( STRING_3 ) ) return long . class ; if ( IDENT_3 . equals ( STRING_4 ) ) return char . class ; if ( IDENT_3 . equals ( STRING_5 ) ) return float . class ; if ( IDENT_3 . equals ( STRING_6 ) ) return double . class ; if ( IDENT_3 . equals ( STRING_6 0 ) ) return boolean . class ; if ( IDENT_3 . equals ( STRING_8 ) ) return void . class ; throw new java . lang . IllegalArgumentException ( ( STRING_11 + IDENT_3 ) ) ; }
org . junit . Assert . assertEquals ( expected [ i ] , actual ) 