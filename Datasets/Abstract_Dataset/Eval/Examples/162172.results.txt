METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 target = new com . github . IDENT_0 . IDENT_1 . IDENT_2 . impl . METHOD_1 ( ) ; java . util . Calendar IDENT_4 = com . github . IDENT_0 . IDENT_1 . util . IDENT_5 . METHOD_2 ( ) ; IDENT_4 = com . github . IDENT_0 . IDENT_1 . util . IDENT_5 . METHOD_3 ( IDENT_4 , 1 ) ; long actual = target . METHOD_4 ( IDENT_4 , TimeUnit . IDENT_6 ) ; long expected = 1L ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . Calendar , java . util . concurrent . TimeUnit ) { java . util . Calendar IDENT_7 = com . github . IDENT_0 . IDENT_1 . util . IDENT_5 . METHOD_2 ( ) ; long IDENT_8 = ( IDENT_9 . METHOD_5 ( ) ) - ( IDENT_7 . METHOD_5 ( ) ) ; if ( IDENT_10 . equals ( TimeUnit . IDENT_11 ) ) { return ( ( ( IDENT_8 / 1000 ) / INT_0 ) / INT_0 ) / INT_1 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_12 ) ) { return ( ( IDENT_8 / 1000 ) / INT_0 ) / INT_0 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_13 ) ) { return IDENT_8 * 1000 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_14 ) ) { return IDENT_8 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_6 ) ) { return ( IDENT_8 / 1000 ) / INT_0 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_15 ) ) { return ( IDENT_8 * 1000 ) * 1000 ; } else if ( IDENT_10 . equals ( TimeUnit . IDENT_16 ) ) { return IDENT_8 / 1000 ; } else { throw new java . lang . METHOD_6 ( STRING_0 ) ; } }
org . junit . Assert . assertEquals ( expected , actual ) 