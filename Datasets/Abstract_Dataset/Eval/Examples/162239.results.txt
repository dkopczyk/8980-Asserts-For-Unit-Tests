METHOD_0 ( ) { final java . util . List < java . lang . Integer > IDENT_0 = new java . util . ArrayList < java . lang . Integer > ( ) ; IDENT_0 . add ( 1 ) ; IDENT_0 . add ( 2 ) ; java . util . List < com . IDENT_1 . domain . model . IDENT_2 > IDENT_3 = IDENT_4 . METHOD_1 ( com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . id , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . id , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . start , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . IDENT_7 , IDENT_0 ) ; verify ( IDENT_8 ) . METHOD_2 ( METHOD_3 ( new com . IDENT_1 . test . IDENT_9 . IDENT_10 < com . IDENT_1 . domain . mapper . model . IDENT_11 > ( ) { @ com . IDENT_1 . service . IDENT_5 . impl . test . Override public boolean matches ( com . IDENT_1 . domain . mapper . model . common . IDENT_12 example ) { return ( ( ( ( ( ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_4 ( example , STRING_0 , false ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_4 ( example , STRING_1 , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . id ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_4 ( example , STRING_2 , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . id ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_5 ( example , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . start ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_6 ( example , com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . IDENT_7 ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_7 ( example , STRING_3 ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_13 . METHOD_8 ( example , STRING_4 , IDENT_0 ) ) ; } } ) ) ; verify ( IDENT_14 , times ( 2 ) ) . METHOD_9 ( com . IDENT_1 . service . IDENT_5 . impl . test . IDENT_6 . id ) ; verify ( IDENT_15 , times ( 2 ) ) . METHOD_10 ( IDENT_16 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( com . IDENT_1 . domain . model . type . IDENT_17 ) { com . IDENT_1 . domain . model . IDENT_18 IDENT_19 = new com . IDENT_1 . domain . model . METHOD_11 ( ) ; IDENT_19 . METHOD_12 ( IDENT_20 . getId ( ) ) ; IDENT_19 . METHOD_13 ( IDENT_20 . getType ( ) ) ; java . util . List < com . IDENT_1 . domain . model . METHOD_11 > IDENT_21 = IDENT_22 . METHOD_2 ( new com . IDENT_1 . domain . mapper . model . METHOD_14 ( IDENT_19 ) ) ; java . util . List < com . IDENT_1 . domain . model . IDENT_23 > IDENT_24 = new java . util . ArrayList < com . IDENT_1 . domain . model . IDENT_23 > ( ) ; for ( com . IDENT_1 . domain . model . METHOD_11 IDENT_25 : IDENT_21 ) { IDENT_24 . add ( IDENT_26 . METHOD_15 ( IDENT_25 . METHOD_16 ( ) ) ) ; } IDENT_20 . METHOD_17 ( IDENT_24 ) ; }
org . junit . Assert . assertEquals ( list , IDENT_3 ) 