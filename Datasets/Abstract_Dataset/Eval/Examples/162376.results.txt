METHOD_0 ( ) { int [ ] [ ] IDENT_0 = new int [ ] [ ] { new int [ ] { 1 , 1 , 0 } , new int [ ] { 0 , 0 , 0 } , new int [ ] { 0 , 2 , 1 } } ; int [ ] IDENT_1 = new int [ ] { 0 , 2 } ; IDENT_2 . IDENT_3 . io . IDENT_4 test = new IDENT_2 . IDENT_3 . io . METHOD_1 ( IDENT_0 ) ; int [ ] IDENT_5 = test . METHOD_0 ( 1 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( int ) { int [ ] IDENT_6 = new int [ ] { - 1 , - 1 } ; int [ ] IDENT_7 = new int [ ] { - 1 , - 1 } ; int [ ] IDENT_8 = new int [ ] { - 1 , - 1 } ; int [ ] IDENT_9 = new int [ ] { - 1 , - 1 } ; int [ ] IDENT_1 = new int [ ] { - 1 , - 1 } ; int IDENT_10 = 0 ; int IDENT_11 = 0 ; int IDENT_12 = 0 ; int IDENT_13 = 0 ; for ( int i = 0 , k = 0 , v = ( this . IDENT_14 . length ) - 1 ; i < ( this . IDENT_14 . length ) ; i ++ , k ++ , v OP_0 ) { if ( ( this . IDENT_14 [ j ] [ i ] ) == IDENT_15 ) { IDENT_11 ++ ; } else { IDENT_7 [ 0 ] = j ; IDENT_7 [ 1 ] = i ; } } if ( IDENT_10 == 2 ) { IDENT_1 = IDENT_6 ; break ; } else { IDENT_6 [ 0 ] = - 1 ; IDENT_6 [ 1 ] = - 1 ; IDENT_10 = 0 ; } if ( IDENT_11 == 2 ) { IDENT_1 = IDENT_7 ; break ; } else { IDENT_7 [ 0 ] = - 1 ; IDENT_7 [ 1 ] = - 1 ; IDENT_11 = 0 ; } } if ( ( ( IDENT_1 [ 0 ] ) == ( - 1 ) ) && ( ( IDENT_1 [ 1 ] ) == ( - 1 ) ) ) { if ( IDENT_12 == 2 ) { IDENT_1 = IDENT_8 ; } if ( IDENT_13 == 2 ) { IDENT_1 = IDENT_9 ; } } return IDENT_1 ; }
org . junit . Assert . assertThat ( true , org . hamcrest . core . Is . is ( ( ( ( IDENT_5 [ 0 ] ) == ( IDENT_1 [ 0 ] ) ) && ( ( IDENT_5 [ 1 ] ) == ( IDENT_1 [ 1 ] ) ) ) ) ) 