METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; java . lang . String IDENT_2 = org . IDENT_3 . IDENT_4 . web . IDENT_5 . IDENT_6 . METHOD_1 ( IDENT_0 ) ; java . lang . String IDENT_7 = org . IDENT_3 . IDENT_4 . web . IDENT_5 . IDENT_6 . METHOD_1 ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { IDENT_8 = IDENT_8 . trim ( ) . toLowerCase ( Locale . IDENT_9 ) ; java . lang . StringBuilder result = new java . lang . StringBuilder ( ) ; org . IDENT_3 . IDENT_4 . web . IDENT_5 . IDENT_10 IDENT_11 = new org . IDENT_3 . IDENT_4 . web . IDENT_5 . METHOD_2 ( IDENT_8 , STRING_2 ) ; while ( IDENT_11 . METHOD_3 ( ) ) { java . lang . String IDENT_12 = IDENT_11 . METHOD_4 ( ) ; int index ; org . IDENT_3 . IDENT_4 . web . IDENT_5 . List < java . lang . String > IDENT_13 = new org . IDENT_3 . IDENT_4 . web . IDENT_5 . ArrayList < java . lang . String > ( ) ; while ( ( index = IDENT_12 . indexOf ( STRING_3 ) ) != ( - 1 ) ) { java . lang . String IDENT_14 = IDENT_12 . substring ( 0 , index ) ; IDENT_12 = IDENT_12 . substring ( ( index + 3 ) ) ; IDENT_14 = org . IDENT_3 . IDENT_4 . web . IDENT_5 . IDENT_6 . METHOD_5 ( IDENT_14 ) ; IDENT_13 . add ( IDENT_14 ) ; } IDENT_12 = org . IDENT_3 . IDENT_4 . web . IDENT_5 . IDENT_6 . METHOD_5 ( IDENT_12 ) ; IDENT_13 . add ( IDENT_12 ) ; org . IDENT_3 . IDENT_4 . web . IDENT_5 . Collections . METHOD_6 ( IDENT_13 ) ; org . IDENT_3 . IDENT_4 . web . IDENT_5 . Collections . METHOD_7 ( IDENT_13 ) ; for ( int i = 0 ; i < ( IDENT_13 . size ( ) ) ; i ++ ) { if ( i != 0 ) { result . append ( STRING_4 ) ; } java . lang . String IDENT_14 = IDENT_13 . get ( i ) ; result . append ( IDENT_14 ) ; } if ( IDENT_11 . METHOD_3 ( ) ) { result . append ( STRING_5 ) ; } } return result . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 