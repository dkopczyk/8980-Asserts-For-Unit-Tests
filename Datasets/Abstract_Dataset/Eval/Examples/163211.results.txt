METHOD_0 ( ) { org . oscm . IDENT_0 . business . IDENT_1 . IDENT_2 . model . IDENT_3 IDENT_4 = METHOD_1 ( STRING_0 , IDENT_5 . IDENT_6 ) ; long IDENT_7 = org . oscm . test . IDENT_8 . METHOD_2 ( STRING_1 ) ; long IDENT_9 = org . oscm . test . IDENT_8 . METHOD_2 ( STRING_2 ) ; double IDENT_10 = IDENT_11 . METHOD_3 ( IDENT_4 , IDENT_7 , IDENT_9 , true , true ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . oscm . IDENT_0 . business . IDENT_1 . IDENT_2 . model . IDENT_3 , long , long , boolean , boolean ) { if ( IDENT_9 < IDENT_7 ) { throw new org . oscm . internal . types . exception . IllegalArgumentException ( ( ( ( ( STRING_3 + ( new java . util . Date ( IDENT_9 ) ) ) + STRING_4 ) + ( new java . util . Date ( IDENT_7 ) ) ) + STRING_5 ) ) ; } java . util . Calendar IDENT_12 = METHOD_4 ( IDENT_4 . METHOD_5 ( ) , IDENT_4 . METHOD_6 ( ) , IDENT_7 , IDENT_13 ) ; java . util . Calendar IDENT_14 = METHOD_7 ( IDENT_4 . METHOD_5 ( ) , IDENT_4 . METHOD_8 ( ) , IDENT_9 , IDENT_15 ) ; if ( IDENT_12 . METHOD_9 ( IDENT_14 ) ) { throw new org . oscm . types . exceptions . METHOD_10 ( ( ( ( ( ( ( STRING_6 + ( new java . util . Date ( IDENT_7 ) ) ) + STRING_7 ) + ( new java . util . Date ( IDENT_9 ) ) ) + STRING_8 ) + IDENT_4 ) + STRING_5 ) ) ; } else { return METHOD_11 ( IDENT_12 . METHOD_12 ( ) , IDENT_14 . METHOD_12 ( ) , IDENT_4 . METHOD_5 ( ) ) ; } }
org . junit . Assert . assertEquals ( 1.0 , IDENT_10 , 0 ) 