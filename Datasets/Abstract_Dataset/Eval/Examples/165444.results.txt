test ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final java . lang . String IDENT_2 = STRING_2 ; final java . lang . String [ ] args = new java . lang . String [ ] { ( ( ( IDENT_0 + STRING_3 ) + IDENT_1 ) + "/" ) + IDENT_2 , ( ( ( ( IDENT_0 + STRING_3 ) + IDENT_1 ) + "/" ) + IDENT_2 ) + STRING_4 } ; for ( int i = 0 ; i < ( ( args . length ) - 1 ) ; i += 2 ) { final java . lang . String IDENT_3 = args [ i ] ; final java . lang . String IDENT_4 = args [ ( i + 1 ) ] ; final com . IDENT_5 . common . net . IDENT_6 IDENT_7 = com . IDENT_5 . common . net . IDENT_6 . METHOD_0 ( IDENT_3 ) ; final com . IDENT_5 . common . net . IDENT_6 IDENT_8 = com . IDENT_5 . common . net . IDENT_6 . METHOD_0 ( IDENT_4 ) ; com . IDENT_5 . common . net . IDENT_9 . METHOD_1 ( IDENT_7 ) ; com . IDENT_5 . common . net . IDENT_9 . METHOD_1 ( IDENT_8 ) ; final com . IDENT_5 . common . net . IDENT_10 data = com . IDENT_5 . common . net . IDENT_10 . create ( IDENT_8 , STRING_5 ) ; if ( null == data ) { System . err . println ( ( ( ( ( STRING_6 + IDENT_4 ) + STRING_7 ) + IDENT_8 ) + STRING_8 ) ) ; } else { final com . IDENT_5 . common . net . IDENT_6 IDENT_11 = data . METHOD_2 ( IDENT_7 ) ; com . IDENT_5 . common . net . IDENT_9 . METHOD_1 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } } } METHOD_1 ( com . IDENT_5 . common . net . IDENT_6 ) { com . IDENT_5 . common . net . IDENT_9 . METHOD_1 ( ( ( ( ( ( ( ( STRING_9 + uri ) + STRING_10 ) + ( uri . IDENT_12 ) ) + STRING_11 ) + ( uri . IDENT_13 ) ) + STRING_12 ) + ( uri . IDENT_14 ) ) , uri ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_11 ) 