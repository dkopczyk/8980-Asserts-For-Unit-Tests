METHOD_0 ( ) { try ( java . sql . IDENT_0 connection = METHOD_1 ( ) . METHOD_2 ( ) ; java . sql . IDENT_1 IDENT_2 = connection . METHOD_3 ( IDENT_3 . IDENT_4 ) ) { IDENT_2 . METHOD_4 ( 1 , INT_0 ) ; IDENT_2 . METHOD_4 ( 2 , INT_1 ) ; IDENT_2 . METHOD_4 ( 3 , INT_1 ) ; IDENT_2 . METHOD_5 ( 4 , STRING_0 ) ; IDENT_2 . METHOD_6 ( ) ; IDENT_2 . METHOD_7 ( ) ; int [ ] result = IDENT_2 . METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_8 ( ) { final boolean IDENT_5 = org . apache . shardingsphere . core . execute . sql . execute . IDENT_6 . IDENT_7 . METHOD_9 ( ) ; org . apache . shardingsphere . core . execute . sql . execute . IDENT_8 < int [ ] > IDENT_9 = new org . apache . shardingsphere . core . execute . sql . execute . IDENT_8 < int [ ] > ( METHOD_10 ( ) , METHOD_9 ) { @ org . apache . shardingsphere . IDENT_10 . executor . Override MOD_0 int [ ] METHOD_11 ( final org . apache . shardingsphere . core . route . IDENT_11 IDENT_12 , final java . sql . IDENT_13 statement , final org . apache . shardingsphere . core . IDENT_14 . IDENT_15 IDENT_16 ) throws java . sql . IDENT_17 { return statement . METHOD_8 ( ) ; } } ; java . util . List < int [ ] > results = METHOD_12 ( IDENT_9 ) ; if ( METHOD_13 ( ) ) { return METHOD_14 ( results ) ; } else { return results . get ( 0 ) ; } }
org . junit . Assert . assertThat ( result . length , org . hamcrest . CoreMatchers . is ( 0 ) ) 