METHOD_0 ( ) { org . IDENT_0 . api . mockito . IDENT_1 . METHOD_1 ( org . IDENT_2 . core . IDENT_3 . model . IDENT_4 . class ) ; org . IDENT_2 . util . IDENT_5 IDENT_6 = new org . IDENT_2 . util . METHOD_2 ( STRING_0 , STRING_1 ) ; org . IDENT_2 . core . IDENT_7 . IDENT_8 . control . IDENT_9 IDENT_10 = org . IDENT_0 . api . mockito . IDENT_1 . mock ( org . IDENT_2 . core . IDENT_7 . IDENT_8 . control . IDENT_9 . class ) ; java . util . Collection < com . IDENT_11 . IDENT_12 . node . model . IDENT_13 > IDENT_14 = new java . util . ArrayList < com . IDENT_11 . IDENT_12 . node . model . IDENT_13 > ( java . util . Arrays . asList ( new com . IDENT_11 . IDENT_12 . node . model . METHOD_3 ( STRING_0 , STRING_1 ) , new com . IDENT_11 . IDENT_12 . node . model . METHOD_3 ( STRING_2 , STRING_3 0 ) , new com . IDENT_11 . IDENT_12 . node . model . METHOD_3 ( STRING_3 1 , STRING_4 ) ) ) ; java . util . Collection < org . IDENT_2 . core . IDENT_7 . IDENT_8 . model . IDENT_15 > IDENT_16 = new java . util . ArrayList < org . IDENT_2 . core . IDENT_7 . IDENT_8 . model . IDENT_15 > ( IDENT_14 . size ( ) ) ; for ( com . IDENT_11 . IDENT_12 . node . model . METHOD_3 IDENT_17 : IDENT_14 ) { IDENT_16 . add ( new org . IDENT_2 . core . IDENT_7 . IDENT_8 . model . METHOD_4 ( IDENT_17 . getId ( ) , IDENT_17 . METHOD_5 ( ) ) ) ; } org . IDENT_0 . api . mockito . IDENT_1 . when ( IDENT_10 . METHOD_6 ( new org . IDENT_2 . core . IDENT_7 . IDENT_8 . model . METHOD_7 ( STRING_0 , STRING_1 ) ) ) . thenReturn ( IDENT_14 ) ; org . IDENT_0 . api . mockito . IDENT_1 . when ( IDENT_10 . METHOD_8 ( new org . IDENT_2 . core . IDENT_7 . IDENT_8 . model . METHOD_7 ( STRING_0 , STRING_1 ) ) ) . thenReturn ( IDENT_16 ) ; org . IDENT_2 . core . IDENT_7 . IDENT_18 . model . IDENT_19 IDENT_20 = new org . IDENT_2 . core . IDENT_7 . IDENT_18 . model . METHOD_9 ( STRING_5 , STRING_6 ) ; org . IDENT_2 . core . IDENT_7 . IDENT_18 . model . IDENT_21 IDENT_22 = new org . IDENT_2 . core . IDENT_7 . IDENT_18 . model . METHOD_10 ( ) ; IDENT_22 . METHOD_11 ( IDENT_20 ) ; IDENT_22 . METHOD_12 ( IDENT_6 . getId ( ) ) ; final java . lang . String token = STRING_7 ; org . IDENT_2 . core . IDENT_3 . security . IDENT_23 resource = new org . IDENT_2 . core . IDENT_3 . security . METHOD_13 ( token , IDENT_22 ) ; org . IDENT_0 . api . mockito . IDENT_1 . METHOD_1 ( org . IDENT_2 . core . IDENT_3 . services . IDENT_24 . class ) ; org . IDENT_0 . api . mockito . IDENT_1 . when ( org . IDENT_2 . core . IDENT_3 . services . IDENT_24 . METHOD_14 ( ) ) . thenReturn ( new com . IDENT_2 . IDENT_3 . mock . METHOD_15 ( token , IDENT_25 ) ) ; org . IDENT_2 . core . IDENT_3 . model . IDENT_26 instance = new org . IDENT_2 . core . IDENT_3 . model . METHOD_16 ( ) ; boolean result = instance . METHOD_17 ( resource ) ; "<AssertPlaceHolder>" ; } is ( T ) { return java . util . IDENT_27 . equals ( this . value , value ) ; }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . is ( true ) ) 