METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 options = new IDENT_0 . IDENT_1 . METHOD_1 ( ) ; options . METHOD_2 ( ) . METHOD_3 ( ) . add ( new IDENT_0 . filter . METHOD_4 ( STRING_0 ) ) ; java . util . List < IDENT_0 . model . IDENT_3 > IDENT_4 = IDENT_0 . IDENT_1 . IDENT_5 . METHOD_5 ( options , new IDENT_0 . IDENT_1 . IDENT_5 . METHOD_6 ( ) { @ IDENT_0 . IDENT_1 . Override public java . util . List < IDENT_6 . IDENT_7 > METHOD_7 ( IDENT_6 . IDENT_8 IDENT_9 ) throws IDENT_0 . IDENT_1 . Exception { IDENT_6 . IDENT_7 IDENT_10 = IDENT_0 . util . IDENT_11 . create ( ) . name ( STRING_0 ) . METHOD_8 ( IDENT_9 ) ; return java . util . Collections . singletonList ( IDENT_10 ) ; } @ IDENT_0 . IDENT_1 . Override public java . util . List < IDENT_6 . IDENT_7 > METHOD_9 ( IDENT_6 . IDENT_8 IDENT_9 ) throws IDENT_0 . IDENT_1 . Exception { IDENT_6 . IDENT_7 IDENT_10 = IDENT_0 . util . IDENT_11 . create ( ) . name ( STRING_0 ) . METHOD_8 ( IDENT_9 ) ; return java . util . Collections . singletonList ( IDENT_10 ) ; } } ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( IDENT_6 . IDENT_8 ) { IDENT_6 . IDENT_7 IDENT_10 ; if ( this . IDENT_12 . METHOD_10 ( ) ) { IDENT_10 = IDENT_9 . METHOD_11 ( this . name , this . IDENT_12 . get ( ) ) ; } else { IDENT_10 = IDENT_9 . METHOD_11 ( this . name ) ; } IDENT_10 . METHOD_12 ( this . IDENT_13 ) ; for ( java . lang . String annotation : IDENT_14 ) { IDENT_6 . IDENT_15 . IDENT_16 IDENT_17 = IDENT_10 . METHOD_13 ( ) ; IDENT_6 . IDENT_15 . IDENT_18 IDENT_19 = IDENT_17 . METHOD_14 ( ) ; IDENT_6 . IDENT_15 . IDENT_20 IDENT_21 = new IDENT_6 . IDENT_15 . METHOD_15 ( IDENT_19 , IDENT_6 . IDENT_15 . METHOD_15 . IDENT_22 ) ; IDENT_6 . IDENT_15 . annotation . IDENT_23 IDENT_24 = new IDENT_6 . IDENT_15 . annotation . METHOD_16 ( annotation , IDENT_19 ) ; IDENT_21 . METHOD_17 ( IDENT_24 ) ; IDENT_10 . METHOD_18 ( ) . METHOD_19 ( IDENT_21 ) ; } for ( IDENT_6 . IDENT_7 IDENT_25 : interfaces ) { IDENT_10 . METHOD_20 ( IDENT_25 ) ; } return IDENT_10 ; }
org . junit . Assert . assertThat ( IDENT_4 . size ( ) , org . hamcrest . core . Is . is ( 0 ) ) 