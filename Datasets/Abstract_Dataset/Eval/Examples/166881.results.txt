METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 ( org . apache . jena . graph . IDENT_6 . METHOD_2 ( STRING_0 ) ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 IDENT_7 = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 ( ) ; IDENT_7 . METHOD_3 ( new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 ( ) , org . apache . jena . graph . IDENT_6 . METHOD_2 ( STRING_1 ) ) ; IDENT_5 . METHOD_3 ( IDENT_7 , org . apache . jena . graph . IDENT_6 . METHOD_2 ( STRING_1 ) ) ; System . out . println ( IDENT_8 . METHOD_4 ( ) ) ; System . out . println ( IDENT_9 . METHOD_4 ( ) ) ; System . out . println ( IDENT_5 . METHOD_4 ( ) ) ; double IDENT_10 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . METHOD_5 ( IDENT_8 , IDENT_9 ) ; double IDENT_13 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . METHOD_5 ( IDENT_8 , IDENT_5 ) ; double IDENT_14 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . METHOD_5 ( IDENT_9 , IDENT_5 ) ; System . out . println ( ( STRING_2 + IDENT_10 ) ) ; System . out . println ( ( STRING_3 + IDENT_13 ) ) ; System . out . println ( ( STRING_4 + IDENT_14 ) ) ; boolean IDENT_15 = IDENT_10 < IDENT_13 ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 , org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 ) { org . IDENT_0 . IDENT_1 . IDENT_2 . operations . IDENT_16 . IDENT_17 IDENT_18 = new org . IDENT_0 . IDENT_1 . IDENT_2 . operations . IDENT_16 . METHOD_6 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . impl . METHOD_1 IDENT_16 = IDENT_18 . METHOD_7 ( IDENT_8 , IDENT_9 ) ; double IDENT_19 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_20 . METHOD_8 ( IDENT_16 ) ; double IDENT_21 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_20 . METHOD_8 ( IDENT_8 ) ; double IDENT_22 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_20 . METHOD_8 ( IDENT_9 ) ; double IDENT_23 = java . lang . Math . max ( ( IDENT_21 - IDENT_19 ) , ( IDENT_22 - IDENT_19 ) ) ; return IDENT_23 ; }
org . junit . Assert . assertEquals ( ( IDENT_10 < IDENT_13 ) , IDENT_15 ) 