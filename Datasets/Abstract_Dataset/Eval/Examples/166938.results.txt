METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ ] { INT_0 , 0 , 0 , INT_1 , INT_2 , ( ( byte ) ( INT_3 ) ) , INT_4 , 0 , INT_4 , 6 , ( ( byte ) ( INT_5 ) ) , ( ( byte ) ( INT_6 ) ) , ( ( byte ) ( INT_7 ) ) , ( ( byte ) ( INT_8 ) ) , 2 , ( ( byte ) ( INT_9 ) ) , ( ( byte ) ( INT_10 ) ) , INT_11 , ( ( byte ) ( INT_12 ) ) , INT_13 , ( ( byte ) ( INT_14 ) ) , INT_15 , 1 , ( ( byte ) ( INT_16 ) ) , ( ( byte ) ( INT_17 ) ) , INT_18 , ( ( byte ) ( INT_19 ) ) , INT_20 , ( ( byte ) ( INT_21 ) ) , ( ( byte ) ( INT_22 ) ) , ( ( byte ) ( INT_8 ) ) , INT_23 , INT_18 , INT_24 , ( ( byte ) ( 255 ) ) , ( ( byte ) ( 255 ) ) , INT_25 , INT_26 , 0 , 0 , 20 , 3 , 1 , 0 , 1 , 1 } ; net . IDENT_1 . packet . IDENT_2 packet = new net . IDENT_1 . packet . METHOD_1 ( ) ; packet . METHOD_2 ( IDENT_0 , 0 , IDENT_0 . length ) ; byte [ ] IDENT_3 = packet . serialize ( ) ; "<AssertPlaceHolder>" ; } serialize ( ) { int length = 4 ; byte [ ] IDENT_4 = null ; if ( ( payload ) != null ) { payload . METHOD_3 ( this ) ; IDENT_4 = payload . serialize ( ) ; length += IDENT_4 . length ; } byte [ ] data = new byte [ length ] ; java . nio . ByteBuffer IDENT_5 = java . nio . ByteBuffer . METHOD_4 ( data ) ; IDENT_5 . put ( this . IDENT_6 ) ; IDENT_5 . put ( this . IDENT_7 ) ; IDENT_5 . METHOD_5 ( this . IDENT_8 ) ; if ( IDENT_4 != null ) IDENT_5 . put ( IDENT_4 ) ; if ( ( ( this . parent ) != null ) && ( ( this . parent ) instanceof net . IDENT_1 . packet . METHOD_1 ) ) ( ( net . IDENT_1 . packet . METHOD_1 ) ( this . parent ) ) . METHOD_6 ( METHOD_1 . IDENT_9 ) ; if ( ( this . IDENT_8 ) == 0 ) { IDENT_5 . METHOD_7 ( ) ; int IDENT_10 = 0 ; for ( int i = 0 ; i < ( length / 2 ) ; ++ i ) { IDENT_10 += INT_27 & ( IDENT_5 . METHOD_8 ( ) ) ; } if ( ( length OP_0 2 ) > 0 ) { IDENT_10 += ( ( IDENT_5 . get ( ) ) & 255 ) << 8 ; } IDENT_10 = ( ( IDENT_10 > > 16 ) & INT_27 ) + ( IDENT_10 & INT_27 ) ; this . IDENT_8 = ( ( short ) ( ( OP_1 IDENT_10 ) & INT_27 ) ) ; IDENT_5 . METHOD_5 ( 2 , this . IDENT_8 ) ; } return data ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( IDENT_0 , IDENT_3 ) ) 