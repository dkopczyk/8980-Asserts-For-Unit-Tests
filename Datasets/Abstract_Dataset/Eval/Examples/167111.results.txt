METHOD_0 ( ) { info . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new info . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_6 . IDENT_7 < java . lang . Object > IDENT_8 = mock ( info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_6 . IDENT_7 . class ) ; METHOD_2 ( ) . when ( IDENT_8 ) . add ( IDENT_8 ) ; info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_9 . IDENT_10 plugin = IDENT_5 . create ( info . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_11 . class , IDENT_8 ) ; "<AssertPlaceHolder>" ; plugin . load ( ) ; verify ( IDENT_8 , times ( 1 ) ) . add ( any ( java . lang . Object . class ) ) ; } create ( java . lang . Class , info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_6 . IDENT_7 ) { try { java . lang . reflect . IDENT_12 c = clazz . METHOD_3 ( new java . lang . Class [ ] { info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_6 . IDENT_7 . class } ) ; return ( ( info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_9 . IDENT_10 ) ( c . newInstance ( new java . lang . Object [ ] { IDENT_8 } ) ) ) ; } catch ( java . lang . Throwable e ) { throw new info . IDENT_0 . IDENT_1 . IDENT_2 . interfaces . IDENT_13 . exception . METHOD_4 ( STRING_0 , e ) ; } }
org . junit . Assert . assertNotNull ( plugin ) 