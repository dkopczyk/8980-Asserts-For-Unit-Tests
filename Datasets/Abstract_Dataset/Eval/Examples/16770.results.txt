METHOD_0 ( ) { java . lang . String object = STRING_0 ; final org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 ( ) ; final java . lang . String IDENT_4 = IDENT_3 . METHOD_2 ( object , IDENT_5 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , int ) { switch ( IDENT_7 ) { case 10 : final boolean IDENT_8 = java . lang . Boolean . METHOD_3 ( object ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_9 . encode ( IDENT_8 ) ; case 9 : final byte b = java . lang . IDENT_10 . METHOD_4 ( object ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_11 . encode ( b ) ; case 4 : final java . lang . Long IDENT_12 = java . lang . Long . METHOD_5 ( object ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_13 . encode ( IDENT_12 ) ; case 5 : final java . lang . Integer i = java . lang . Integer . METHOD_6 ( object ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_14 . encode ( i ) ; case 6 : java . lang . String exp = object . substring ( 2 , 5 ) ; char IDENT_15 = object . charAt ( 0 ) ; char IDENT_16 = object . charAt ( 1 ) ; java . lang . Integer IDENT_17 = java . lang . Integer . METHOD_6 ( exp ) ; if ( IDENT_16 == STRING_1 ) { IDENT_17 = INT_0 - IDENT_17 ; } final java . lang . String IDENT_18 = java . lang . String . format ( STRING_2 , IDENT_15 , object . substring ( 6 ) , IDENT_16 , IDENT_17 ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_19 . encode ( java . lang . Double . METHOD_7 ( IDENT_18 ) ) ; case 7 : final java . lang . Long l = ( Long . MAX_VALUE ) - ( java . lang . Long . METHOD_5 ( object ) ) ; java . util . Date date = new java . util . Date ( l ) ; return org . apache . rya . accumulo . IDENT_0 . tools . IDENT_1 . METHOD_1 . IDENT_20 . encode ( date ) ; default : return null ; } }
org . junit . Assert . assertEquals ( "1" , METHOD_2 ) 