METHOD_0 ( ) { byte [ ] bytes = new byte [ INT_0 ] ; for ( int i = 0 ; i < ( bytes . length ) ; i ++ ) { bytes [ i ] = ( ( byte ) ( i ) ) ; } for ( int IDENT_0 = 0 ; IDENT_0 < ( bytes . length ) ; IDENT_0 ++ ) { org . IDENT_1 . crypto . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_1 . crypto . IDENT_2 . METHOD_1 ( ) ; IDENT_4 . update ( bytes , 0 , IDENT_0 ) ; byte [ ] IDENT_5 = METHOD_2 ( IDENT_4 ) ; org . IDENT_1 . crypto . IDENT_2 . METHOD_1 IDENT_6 = METHOD_3 ( IDENT_5 , IDENT_0 ) ; byte [ ] IDENT_7 = new byte [ IDENT_8 ] ; byte [ ] IDENT_9 = new byte [ IDENT_8 ] ; IDENT_4 . METHOD_4 ( IDENT_7 , 0 ) ; IDENT_6 . METHOD_4 ( IDENT_9 , 0 ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( byte [ ] , long ) { int IDENT_10 = ( ( int ) ( IDENT_0 OP_0 4 ) ) ; int IDENT_11 = ( ( int ) ( ( IDENT_0 / 4 ) OP_0 16 ) ) ; byte [ ] IDENT_12 = new byte [ INT_1 + ( IDENT_11 * 4 ) ] ; org . IDENT_1 . util . IDENT_13 . METHOD_5 ( IDENT_10 , IDENT_12 , 4 ) ; org . IDENT_1 . util . IDENT_13 . METHOD_6 ( IDENT_0 , IDENT_12 , 8 ) ; org . IDENT_1 . util . IDENT_13 . METHOD_5 ( IDENT_11 , IDENT_12 , INT_2 ) ; java . lang . System . METHOD_7 ( IDENT_14 , 0 , IDENT_12 , 16 , io . IDENT_15 . common . IDENT_16 . IDENT_8 ) ; java . lang . System . METHOD_7 ( IDENT_14 , io . IDENT_15 . common . IDENT_16 . IDENT_8 , IDENT_12 , INT_1 , ( IDENT_11 * 4 ) ) ; java . lang . System . METHOD_7 ( IDENT_14 , ( ( io . IDENT_15 . common . IDENT_16 . IDENT_8 ) + ( IDENT_11 * 4 ) ) , IDENT_12 , 0 , IDENT_10 ) ; return new org . IDENT_1 . crypto . IDENT_2 . METHOD_1 ( IDENT_12 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_7 , IDENT_9 ) 