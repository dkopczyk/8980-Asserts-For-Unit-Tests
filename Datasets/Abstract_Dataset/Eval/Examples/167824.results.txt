METHOD_0 ( ) { byte [ ] key = IDENT_0 . METHOD_1 ( 16 ) ; org . IDENT_1 . IDENT_2 . utils . IDENT_3 . IDENT_4 IDENT_5 = new org . IDENT_1 . IDENT_2 . utils . IDENT_3 . METHOD_2 ( key ) ; byte [ ] IDENT_6 = set . METHOD_3 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_1 . IDENT_2 . utils . IDENT_3 . METHOD_2 ) { int IDENT_7 = IDENT_5 . METHOD_4 ( ) ; byte [ ] IDENT_8 = IDENT_9 . METHOD_5 ( ( IDENT_7 * 2 ) , STRING_0 ) ; byte [ ] IDENT_10 = IDENT_5 . METHOD_6 ( IDENT_8 ) ; byte [ ] IDENT_11 = IDENT_9 . METHOD_7 ( IDENT_10 , IDENT_7 , 0 ) ; byte [ ] IDENT_12 = IDENT_9 . METHOD_8 ( IDENT_10 , IDENT_7 ) ; byte [ ] IDENT_13 = IDENT_9 . METHOD_5 ( IDENT_7 , STRING_0 ) ; byte [ ] IDENT_14 = IDENT_9 . join ( IDENT_13 , IDENT_11 , IDENT_12 ) ; try { IDENT_5 . METHOD_9 ( IDENT_14 ) ; } catch ( org . IDENT_1 . IDENT_2 . utils . IDENT_3 . METHOD_2 . IDENT_15 ex ) { byte [ ] IDENT_16 = ex . METHOD_10 ( ) ; return IDENT_9 . METHOD_7 ( IDENT_16 , IDENT_7 , 1 ) ; } throw new java . lang . IllegalStateException ( STRING_1 ) ; }
org . junit . Assert . assertArrayEquals ( key , IDENT_6 ) 