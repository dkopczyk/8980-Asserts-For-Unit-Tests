METHOD_0 ( ) { org . apache . IDENT_0 . streams . kafka . IDENT_1 . logger . log ( IDENT_2 . IDENT_3 , STRING_0 ) ; org . apache . IDENT_0 . streams . kafka . IDENT_1 . logger . log ( IDENT_2 . IDENT_3 , STRING_1 ) ; org . apache . IDENT_0 . streams . kafka . IDENT_4 instance = new org . apache . IDENT_0 . streams . kafka . METHOD_1 ( org . apache . IDENT_0 . streams . kafka . IDENT_5 . METHOD_2 ( org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_6 , org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_7 ) , org . apache . IDENT_0 . streams . kafka . IDENT_5 . METHOD_3 ( STRING_2 , org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_6 , org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_7 ) , IDENT_8 ) ; instance . METHOD_4 ( ) ; org . apache . IDENT_0 . streams . kafka . IDENT_1 . logger . log ( IDENT_2 . IDENT_3 , STRING_3 ) ; org . apache . kafka . IDENT_9 . consumer . IDENT_10 < java . lang . String , byte [ ] > consumer ; consumer = new org . apache . kafka . IDENT_9 . consumer . METHOD_5 ( org . apache . IDENT_0 . streams . kafka . IDENT_5 . METHOD_2 ( org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_6 , org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_7 ) ) ; consumer . METHOD_6 ( java . util . Arrays . asList ( org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_11 ) ) ; org . apache . IDENT_0 . streams . kafka . IDENT_1 . logger . log ( IDENT_2 . IDENT_3 , STRING_4 ) ; java . util . List < byte [ ] > IDENT_12 = new java . util . ArrayList ( ) ; java . util . IDENT_13 r = new java . util . METHOD_7 ( ) ; org . apache . IDENT_0 . IDENT_14 . IDENT_15 header = org . apache . IDENT_0 . streams . kafka . IDENT_5 . METHOD_8 ( 10 ) ; com . google . gson . IDENT_16 gson = new com . google . gson . METHOD_9 ( ) ; for ( int i = 0 ; i < ( org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_17 ) ; i ++ ) { byte [ ] val = gson . METHOD_10 ( org . apache . IDENT_0 . streams . kafka . IDENT_5 . METHOD_11 ( r , 10 , header ) ) . getBytes ( ) ; IDENT_12 . add ( val ) ; instance . METHOD_12 ( org . apache . IDENT_0 . streams . kafka . IDENT_1 . IDENT_11 , val ) ; } java . lang . Thread . sleep ( ( 2 * ( IDENT_8 ) ) ) ; org . apache . IDENT_0 . streams . kafka . IDENT_1 . logger . log ( IDENT_2 . IDENT_3 , STRING_5 ) ; java . util . List < byte [ ] > IDENT_18 = new java . util . ArrayList ( ) ; while ( ( IDENT_18 . size ( ) ) != ( IDENT_12 . size ( ) ) ) { org . apache . kafka . IDENT_9 . consumer . IDENT_19 < java . lang . String , byte [ ] > records = consumer . METHOD_13 ( IDENT_8 ) ; java . util . Iterator < org . apache . kafka . IDENT_9 . consumer . IDENT_20 < java . lang . String , byte [ ] > > it = records . iterator ( ) ; while ( it . hasNext ( ) ) { IDENT_18 . add ( it . next ( ) . value ( ) ) ; } } consumer . close ( ) ; "<AssertPlaceHolder>" ; } close ( ) { IDENT_21 = false ; }
org . junit . Assert . assertArrayEquals ( IDENT_12 . toArray ( ) , IDENT_18 . toArray ( ) ) 