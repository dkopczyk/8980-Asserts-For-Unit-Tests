METHOD_0 ( ) { org . apache . hadoop . io . IDENT_0 key = new org . apache . hadoop . io . METHOD_1 ( INT_0 ) ; co . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new co . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( key ) ; co . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 IDENT_8 = new co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( ) ; co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 IDENT_9 = new co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( ) ; org . apache . hadoop . io . METHOD_1 IDENT_10 = new org . apache . hadoop . io . METHOD_1 ( INT_1 ) ; org . apache . hadoop . io . METHOD_1 IDENT_11 = new org . apache . hadoop . io . METHOD_1 ( INT_2 ) ; IDENT_8 . METHOD_5 ( IDENT_10 ) ; IDENT_9 . METHOD_5 ( IDENT_11 ) ; IDENT_8 . METHOD_6 ( true ) ; IDENT_9 . METHOD_6 ( false ) ; java . util . ArrayList < co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 > values = new java . util . ArrayList < co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 > ( ) ; values . add ( IDENT_8 ) ; values . add ( IDENT_9 ) ; org . apache . hadoop . mapreduce . IDENT_12 . Context context = mock ( IDENT_12 . Context . class ) ; org . apache . hadoop . mapreduce . IDENT_13 IDENT_14 = new org . apache . hadoop . mapreduce . METHOD_7 ( ) ; org . apache . hadoop . mapreduce . IDENT_15 IDENT_16 = IDENT_14 . METHOD_8 ( IDENT_17 . IDENT_18 ) ; when ( context . METHOD_9 ( IDENT_17 . IDENT_18 ) ) . thenReturn ( IDENT_16 ) ; co . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_19 IDENT_20 = new co . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_10 ( ) ; IDENT_20 . METHOD_11 ( IDENT_5 , values , context ) ; verify ( context ) . write ( IDENT_11 , key ) ; "<AssertPlaceHolder>" ; } write ( IDENT_21 , IDENT_22 ) { METHOD_12 ( value ) ; out . write ( co . IDENT_1 . IDENT_2 . mapreduce . lib . output . IDENT_23 . IDENT_24 . IDENT_25 ) ; }
org . junit . Assert . assertEquals ( 1 , context . METHOD_9 ( IDENT_17 . IDENT_18 ) . getValue ( ) ) 