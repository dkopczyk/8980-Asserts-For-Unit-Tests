METHOD_0 ( ) { IDENT_0 . METHOD_1 ( org . junit . Assert . format ( STRING_0 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_3 . IDENT_4 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_5 ) ) ; com . splicemachine . IDENT_1 . impl . load . IDENT_6 IDENT_7 = IDENT_0 . METHOD_2 ( org . junit . Assert . format ( ( STRING_1 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_2 + STRING_2 ) + STRING_3 ) + STRING_2 ) + STRING_2 ) + STRING_2 ) + STRING_3 ) + STRING_3 ) + STRING_3 ) + STRING_4 ) + STRING_2 ) + STRING_3 ) + STRING_5 ) ) , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_3 . IDENT_4 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_5 , ( ( METHOD_3 ( ) ) + STRING_3 1 ) , STRING_6 , STRING_7 , 0 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_8 . METHOD_4 ( ) ) ) ; IDENT_7 . execute ( ) ; com . splicemachine . IDENT_1 . impl . load . ResultSet rs = IDENT_0 . METHOD_5 ( org . junit . Assert . format ( STRING_8 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_3 . IDENT_4 , com . splicemachine . IDENT_1 . impl . load . IDENT_2 . IDENT_5 ) ) ; com . splicemachine . IDENT_1 . impl . load . List < java . lang . String > results = org . IDENT_9 . IDENT_10 . collect . Lists . newArrayList ( ) ; while ( rs . next ( ) ) { int id = rs . METHOD_6 ( 1 ) ; java . lang . String name = rs . getString ( 2 ) ; int IDENT_11 = rs . METHOD_6 ( 3 ) ; results . add ( java . lang . String . format ( STRING_9 , id , name , IDENT_11 ) ) ; } "<AssertPlaceHolder>" ; } size ( ) { return IDENT_12 . size ( ) ; }
org . junit . Assert . assertEquals ( ( STRING_3 0 + results ) , 3 , results . size ( ) ) 