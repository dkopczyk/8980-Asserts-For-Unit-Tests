METHOD_0 ( ) { java . lang . String IDENT_0 ; java . lang . String expected ; expected = ( com . splicemachine . IDENT_1 . impl . sql . execute . operations . IDENT_2 . IDENT_3 ) ? STRING_0 0 + ( ( ( STRING_1 + STRING_0 4 ) + STRING_0 3 ) + STRING_2 ) : STRING_3 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_4 + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_0 5 ) + STRING_5 ) ; com . splicemachine . IDENT_1 . impl . sql . execute . operations . ResultSet rs ; java . util . List < java . lang . String > IDENT_4 = java . util . Arrays . asList ( STRING_6 , STRING_7 , STRING_8 , STRING_0 1 ) ; for ( java . lang . String IDENT_5 : IDENT_4 ) { IDENT_0 = org . junit . Assert . format ( ( STRING_9 + STRING_0 ) , IDENT_6 , IDENT_5 ) ; rs = com . splicemachine . IDENT_1 . impl . sql . execute . operations . IDENT_2 . IDENT_7 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; rs . close ( ) ; } } toString ( com . splicemachine . IDENT_8 . ResultSet ) { return com . splicemachine . IDENT_8 . TestUtils . IDENT_9 . IDENT_10 . convert ( "" , rs ) . toString ( ) . trim ( ) ; }
org . junit . Assert . assertEquals ( ( ( STRING_0 2 + IDENT_0 ) + STRING_0 2 ) , expected , TestUtils . IDENT_9 . IDENT_10 . toString ( rs ) ) 