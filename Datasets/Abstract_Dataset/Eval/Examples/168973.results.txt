METHOD_0 ( ) { try ( java . sql . IDENT_0 s = conn . METHOD_1 ( ) ) { long IDENT_1 = 1 + ( new com . splicemachine . IDENT_2 . impl . sql . execute . operations . METHOD_2 ( ) . METHOD_3 ( 9 ) ) ; long IDENT_3 = ( 1 + IDENT_1 ) + ( new com . splicemachine . IDENT_2 . impl . sql . execute . operations . METHOD_2 ( ) . METHOD_3 ( 9 ) ) ; insert ( s , IDENT_1 , STRING_0 ) ; insert ( s , IDENT_3 , STRING_1 ) ; com . splicemachine . IDENT_2 . impl . sql . execute . operations . List < java . lang . Long > IDENT_4 = METHOD_4 ( s , ( "" + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) ) ; com . splicemachine . IDENT_2 . impl . sql . execute . operations . Collections . METHOD_5 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( java . sql . IDENT_0 , java . lang . String ) { try ( java . sql . ResultSet rs = s . METHOD_6 ( query ) ) { com . splicemachine . IDENT_2 . impl . sql . execute . operations . List < java . lang . Long > IDENT_5 = new com . splicemachine . IDENT_2 . impl . sql . execute . operations . METHOD_7 ( ) ; while ( rs . next ( ) ) { long val = rs . METHOD_8 ( 1 ) ; if ( rs . METHOD_9 ( ) ) IDENT_5 . add ( null ) ; else IDENT_5 . add ( val ) ; } return IDENT_5 ; } }
org . junit . Assert . assertEquals ( com . splicemachine . IDENT_2 . impl . sql . execute . operations . Arrays . asList ( 0L , 0L , IDENT_1 , IDENT_3 ) , IDENT_4 ) 