METHOD_0 ( ) { int IDENT_0 = IDENT_1 . hash ( IDENT_2 , 0 , IDENT_2 . length ) ; java . nio . ByteBuffer IDENT_3 = java . nio . ByteBuffer . METHOD_1 ( IDENT_2 ) ; int actual = IDENT_1 . hash ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } hash ( java . nio . ByteBuffer ) { int length = bytes . METHOD_2 ( ) ; int IDENT_4 = IDENT_5 ; byte [ ] block = new byte [ 4 ] ; int IDENT_6 = 0 ; while ( ( bytes . METHOD_2 ( ) ) >= 4 ) { bytes . get ( block ) ; int IDENT_7 = com . splicemachine . IDENT_8 . IDENT_9 . METHOD_3 ( block , 0 ) ; IDENT_4 = METHOD_4 ( IDENT_4 , IDENT_7 ) ; IDENT_6 += 4 ; } bytes . get ( block , 0 , ( length - IDENT_6 ) ) ; IDENT_4 = METHOD_5 ( block , length , 0 , IDENT_4 , IDENT_6 ) ; return METHOD_6 ( IDENT_4 ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , actual ) 