METHOD_0 ( ) { org . apache . commons . math3 . linear . IDENT_0 < org . apache . commons . math3 . IDENT_1 . IDENT_2 > m = new org . apache . commons . math3 . linear . IDENT_3 < org . apache . commons . math3 . IDENT_1 . IDENT_2 > ( id ) ; "<AssertPlaceHolder>" ; m = new org . apache . commons . math3 . linear . IDENT_3 < org . apache . commons . math3 . IDENT_1 . IDENT_2 > ( IDENT_4 ) ; try { m . METHOD_1 ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math3 . linear . IDENT_5 ex ) { } } METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } double trace = data [ 0 ] [ 0 ] ; for ( int i = 1 ; i < ( this . METHOD_3 ( ) ) ; i ++ ) { trace += data [ i ] [ i ] ; } return trace ; }
org . junit . Assert . assertEquals ( new org . apache . commons . math3 . IDENT_1 . METHOD_4 ( 3 ) , m . METHOD_1 ( ) ) 