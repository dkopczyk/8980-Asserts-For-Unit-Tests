METHOD_0 ( ) { org . apache . commons . math3 . linear . IDENT_0 IDENT_1 = METHOD_1 ( ) ; org . apache . commons . math3 . linear . IDENT_0 v = org . apache . commons . math3 . linear . IDENT_0 . METHOD_2 ( IDENT_1 ) ; for ( int i = 0 ; i < ( org . apache . commons . math3 . linear . IDENT_2 . IDENT_3 ) ; i ++ ) { for ( int n = 1 ; n < ( ( org . apache . commons . math3 . linear . IDENT_2 . IDENT_3 ) - i ) ; n ++ ) { org . apache . commons . math3 . linear . IDENT_0 exp = IDENT_1 . METHOD_3 ( i , n ) ; org . apache . commons . math3 . linear . IDENT_0 IDENT_4 = v . METHOD_3 ( i , n ) ; "<AssertPlaceHolder>" ; } } } equals ( java . lang . String , java . lang . String ) { return IDENT_5 == null ? IDENT_6 == null : IDENT_5 . equals ( IDENT_6 ) ; }
org . junit . Assert . assertTrue ( org . apache . commons . math3 . linear . IDENT_2 . equals ( exp , IDENT_4 ) ) 