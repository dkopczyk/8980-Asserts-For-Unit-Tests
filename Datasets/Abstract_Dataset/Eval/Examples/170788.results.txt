METHOD_0 ( ) { int IDENT_0 = 100 ; double [ ] IDENT_1 = new double [ IDENT_0 ] ; double [ ] IDENT_2 = new double [ IDENT_0 ] ; double IDENT_3 = FLOAT_0 ; double IDENT_4 = FLOAT_1 ; METHOD_1 ( IDENT_1 , IDENT_2 , IDENT_3 , IDENT_4 ) ; org . apache . commons . math . analysis . IDENT_5 . IDENT_6 IDENT_7 = new org . apache . commons . math . analysis . IDENT_5 . METHOD_2 ( FLOAT_2 , 4 , FLOAT_3 ) ; double [ ] res = IDENT_7 . METHOD_3 ( IDENT_1 , IDENT_2 ) ; double IDENT_8 = 0 ; double IDENT_9 = 0 ; for ( int i = 0 ; i < IDENT_0 ; ++ i ) { double expected = org . apache . commons . math . util . IDENT_10 . METHOD_4 ( IDENT_1 [ i ] ) ; double IDENT_11 = IDENT_2 [ i ] ; double IDENT_12 = res [ i ] ; IDENT_8 += org . apache . commons . math . util . IDENT_10 . METHOD_5 ( ( IDENT_11 - expected ) , 2 ) ; IDENT_9 += org . apache . commons . math . util . IDENT_10 . METHOD_5 ( ( IDENT_12 - expected ) , 2 ) ; } "<AssertPlaceHolder>" ; } METHOD_5 ( org . apache . commons . math . IDENT_13 . IDENT_14 , org . apache . commons . math . IDENT_13 . IDENT_14 ) { return org . apache . commons . math . IDENT_13 . IDENT_15 . exp ( x . METHOD_6 ( org . apache . commons . math . IDENT_13 . IDENT_15 . log ( y ) ) ) ; }
org . junit . Assert . assertTrue ( ( IDENT_9 < IDENT_8 ) ) 