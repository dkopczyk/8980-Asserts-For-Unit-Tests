METHOD_0 ( ) { org . apache . commons . math . linear . IDENT_0 < org . apache . commons . math . IDENT_1 . IDENT_2 > m = new org . apache . commons . math . linear . IDENT_3 < org . apache . commons . math . IDENT_1 . IDENT_2 > ( IDENT_4 ) ; "<AssertPlaceHolder>" ; m . METHOD_1 ( 0 , IDENT_5 [ 0 ] ) ; METHOD_2 ( IDENT_5 [ 0 ] , m . METHOD_3 ( 0 ) ) ; try { m . METHOD_1 ( ( - 1 ) , IDENT_5 [ 0 ] ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math . exception . IDENT_6 ex ) { } try { m . METHOD_1 ( 0 , new org . apache . commons . math . IDENT_1 . IDENT_2 [ 5 ] ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( org . apache . commons . math . linear . IDENT_7 ex ) { } } METHOD_3 ( int ) { if ( ! ( METHOD_4 ( row , 0 ) ) ) { throw new org . apache . commons . math . linear . METHOD_5 ( STRING_2 ) ; } int IDENT_8 = this . METHOD_6 ( ) ; double [ ] out = new double [ IDENT_8 ] ; java . lang . System . METHOD_7 ( data [ row ] , 0 , out , 0 , IDENT_8 ) ; return out ; }
org . junit . Assert . assertTrue ( ( ( IDENT_5 [ 0 ] [ 0 ] ) != ( m . METHOD_3 ( 0 ) [ 0 ] ) ) ) 