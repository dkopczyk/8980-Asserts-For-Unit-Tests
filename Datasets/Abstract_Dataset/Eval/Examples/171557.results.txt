METHOD_0 ( ) { when ( delegate . resolve ( com . spotify . IDENT_0 . IDENT_1 . IDENT_2 ) ) . thenReturn ( com . spotify . IDENT_0 . IDENT_3 . nodes ( STRING_0 ) ) . thenReturn ( com . spotify . IDENT_0 . IDENT_3 . nodes ( ) ) ; resolver . resolve ( com . spotify . IDENT_0 . IDENT_1 . IDENT_2 ) ; java . lang . Thread . sleep ( com . spotify . IDENT_0 . IDENT_1 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } resolve ( java . lang . String ) { com . google . common . base . IDENT_5 . METHOD_1 ( IDENT_6 , STRING_1 ) ; try { final java . util . List < com . spotify . IDENT_0 . IDENT_7 > nodes = delegate . resolve ( IDENT_6 ) ; if ( nodes . isEmpty ( ) ) { java . util . List < com . spotify . IDENT_0 . IDENT_7 > IDENT_8 = cache . METHOD_2 ( IDENT_6 ) ; return IDENT_8 != null ? IDENT_8 : nodes ; } cache . put ( IDENT_6 , nodes ) ; return nodes ; } catch ( java . lang . Exception e ) { if ( ( cache . METHOD_2 ( IDENT_6 ) ) != null ) { return cache . METHOD_2 ( IDENT_6 ) ; } throw com . google . common . base . IDENT_9 . METHOD_3 ( e ) ; } }
org . junit . Assert . assertThat ( resolver . resolve ( com . spotify . IDENT_0 . IDENT_1 . IDENT_2 ) . isEmpty ( ) , org . hamcrest . CoreMatchers . is ( true ) ) 