METHOD_0 ( ) { METHOD_1 ( STRING_0 , STRING_1 ) ; final com . spotify . IDENT_0 . client . messages . IDENT_1 IDENT_2 = com . spotify . IDENT_0 . client . messages . IDENT_1 . builder ( ) . METHOD_2 ( STRING_2 ) . build ( ) ; final com . spotify . IDENT_0 . client . messages . IDENT_3 config = com . spotify . IDENT_0 . client . messages . IDENT_3 . builder ( ) . image ( com . spotify . IDENT_0 . client . IDENT_4 . IDENT_5 ) . METHOD_3 ( STRING_3 , STRING_4 , STRING_5 ) . METHOD_4 ( METHOD_4 ) . build ( ) ; final com . spotify . IDENT_0 . client . messages . IDENT_6 container = IDENT_7 . METHOD_5 ( config , METHOD_6 ( ) ) ; final java . lang . String IDENT_8 = container . id ( ) ; IDENT_7 . METHOD_7 ( IDENT_8 ) ; final com . spotify . IDENT_0 . client . messages . IDENT_9 info = IDENT_7 . METHOD_8 ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . lang . String ) { try { final javax . ws . rs . client . IDENT_10 resource = resource ( ) . path ( STRING_6 ) . path ( IDENT_8 ) . path ( STRING_7 ) ; return request ( javax . ws . rs . IDENT_11 . IDENT_12 , com . spotify . IDENT_0 . client . messages . IDENT_9 . class , resource , resource . request ( com . spotify . IDENT_0 . client . IDENT_13 ) ) ; } catch ( com . spotify . IDENT_0 . client . exceptions . IDENT_14 e ) { switch ( e . status ( ) ) { case INT_0 : throw new com . spotify . IDENT_0 . client . exceptions . METHOD_9 ( IDENT_8 , e ) ; default : throw e ; } } }
org . junit . Assert . assertThat ( info . METHOD_4 ( ) . METHOD_2 ( ) , org . hamcrest . Matchers . is ( STRING_2 ) ) 