METHOD_0 ( ) { final java . lang . String IDENT_0 = "foo" ; when ( model . METHOD_1 ( IDENT_0 ) ) . thenReturn ( com . google . common . collect . ImmutableList . of ( STRING_0 , STRING_1 ) ) ; final com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 IDENT_4 = com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 . parse ( STRING_2 ) ; final com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 IDENT_5 = com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 . parse ( STRING_3 ) ; final com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 IDENT_7 = com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 . METHOD_2 ( ) . build ( ) ; final com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 IDENT_8 = com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 . METHOD_2 ( ) . build ( ) ; final com . spotify . IDENT_1 . common . IDENT_2 . IDENT_9 IDENT_10 = com . spotify . IDENT_1 . IDENT_11 . resources . IDENT_12 . METHOD_3 ( com . google . common . collect . ImmutableMap . of ( IDENT_4 , com . spotify . IDENT_1 . common . IDENT_2 . IDENT_13 . of ( IDENT_4 , IDENT_14 . IDENT_15 ) , IDENT_5 , com . spotify . IDENT_1 . common . IDENT_2 . IDENT_13 . of ( IDENT_5 , IDENT_14 . IDENT_15 ) ) ) ; when ( model . METHOD_4 ( STRING_0 ) ) . thenReturn ( IDENT_10 ) ; when ( model . METHOD_4 ( STRING_1 ) ) . thenReturn ( IDENT_10 ) ; when ( model . METHOD_5 ( IDENT_4 ) ) . thenReturn ( IDENT_7 ) ; when ( model . METHOD_5 ( IDENT_5 ) ) . thenReturn ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } list ( java . lang . String , java . lang . String ) { final java . util . Map < com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 , com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 > IDENT_16 ; if ( ! ( IDENT_17 . isEmpty ( ) ) ) { IDENT_16 = model . METHOD_1 ( IDENT_17 ) . stream ( ) . map ( model :: METHOD_4 ) . METHOD_6 ( ( IDENT_10 ) -> IDENT_10 . METHOD_7 ( ) . METHOD_8 ( ) . stream ( ) ) . METHOD_9 ( ) . collect ( java . util . stream . IDENT_18 . METHOD_10 ( java . util . function . IDENT_19 . METHOD_11 ( ) , model :: METHOD_5 ) ) ; } else { IDENT_16 = model . METHOD_7 ( ) ; } if ( query . isEmpty ( ) ) { metrics . METHOD_12 ( IDENT_16 . size ( ) ) ; return IDENT_16 ; } final java . util . Map < com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 , com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 > IDENT_20 = com . google . common . collect . IDENT_21 . METHOD_13 ( ) ; for ( final Map . Entry < com . spotify . IDENT_1 . common . IDENT_2 . IDENT_3 , com . spotify . IDENT_1 . common . IDENT_2 . IDENT_6 > entry : IDENT_16 . entrySet ( ) ) { if ( entry . getKey ( ) . toString ( ) . contains ( query ) ) { IDENT_20 . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } metrics . METHOD_12 ( IDENT_20 . size ( ) ) ; return IDENT_20 ; }
org . junit . Assert . assertThat ( resource . list ( "" , IDENT_0 ) , org . hamcrest . Matchers . is ( com . google . common . collect . ImmutableMap . of ( IDENT_4 , IDENT_7 , IDENT_5 , IDENT_8 ) ) ) 