METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( true ) ; final com . spotify . IDENT_2 . IDENT_3 IDENT_4 = new com . spotify . IDENT_2 . METHOD_2 ( new java . io . File ( STRING_0 ) ) ; final java . util . List < java . lang . Exception > IDENT_5 = java . util . Collections . METHOD_3 ( new java . util . ArrayList ( ) ) ; java . util . List < java . lang . Thread > IDENT_6 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { java . lang . Thread IDENT_7 = new java . lang . Thread ( ( ) -> { com . spotify . IDENT_2 . METHOD_2 map = IDENT_4 . METHOD_4 ( ) ; while ( IDENT_1 . get ( ) ) { try { map . METHOD_5 ( 1 ) ; map . METHOD_6 ( ) ; map . METHOD_7 ( 1 ) ; } catch ( e ) { if ( ! ( com . spotify . IDENT_2 . e . getMessage ( ) . equals ( STRING_1 ) ) ) { com . spotify . IDENT_2 . e . printStackTrace ( ) ; IDENT_5 . add ( com . spotify . IDENT_2 . e ) ; } } } } ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_7 . start ( ) ; } IDENT_4 . close ( ) ; java . lang . Thread . sleep ( 100 ) ; IDENT_1 . set ( false ) ; for ( java . lang . Thread IDENT_7 : IDENT_6 ) { IDENT_7 . join ( ) ; } "<AssertPlaceHolder>" ; } size ( ) { return com . spotify . IDENT_2 . IDENT_8 . IDENT_9 ; }
org . junit . Assert . assertEquals ( 0 , IDENT_5 . size ( ) ) 