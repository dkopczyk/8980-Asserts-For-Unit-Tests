METHOD_0 ( java . lang . String , java . lang . String , java . lang . String ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . time . IDENT_0 , com . spotify . IDENT_1 . model . IDENT_2 , int ) { com . google . common . base . IDENT_3 . METHOD_2 ( com . spotify . IDENT_1 . util . IDENT_4 . METHOD_3 ( IDENT_5 , IDENT_6 ) , STRING_0 ) ; return IDENT_6 . METHOD_4 ( ) . unit ( ) . map ( ( unit ) -> { try { return IDENT_5 . METHOD_5 ( offset , unit ) ; } catch ( IDENT_7 ) { return null ; } } ) . METHOD_6 ( ( ) -> { final com . IDENT_8 . model . time . IDENT_9 IDENT_10 = com . IDENT_8 . model . time . IDENT_9 . METHOD_7 ( METHOD_8 ( IDENT_6 ) ) ; java . time . IDENT_11 time = IDENT_5 . METHOD_9 ( com . spotify . IDENT_1 . util . IDENT_12 ) ; for ( int i = 0 ; i < ( java . lang . Math . METHOD_10 ( offset ) ) ; i ++ ) { final Optional < java . time . IDENT_11 > IDENT_13 = ( offset <= 0 ) ? IDENT_10 . METHOD_11 ( time ) : IDENT_10 . METHOD_12 ( time ) ; time = IDENT_13 . METHOD_13 ( java . lang . IDENT_14 :: new ) ; } return time . METHOD_14 ( ) ; } ) ; }
org . junit . Assert . assertThat ( com . spotify . IDENT_1 . util . IDENT_4 . METHOD_1 ( parse ( IDENT_5 ) , com . spotify . IDENT_1 . model . IDENT_2 . parse ( IDENT_6 ) , 2 ) , org . hamcrest . Matchers . is ( parse ( expected ) ) ) 