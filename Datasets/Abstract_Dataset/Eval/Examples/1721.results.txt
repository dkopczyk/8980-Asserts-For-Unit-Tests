METHOD_0 ( ) { METHOD_1 ( 3 ) ; java . util . List < java . util . concurrent . IDENT_0 < byte [ ] > > IDENT_1 = new java . util . ArrayList ( ) ; byte [ ] IDENT_2 = new byte [ ] { 1 , 2 } ; IDENT_1 . add ( ( ) -> METHOD_2 ( IDENT_3 . IDENT_4 . IDENT_5 . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 1 ) , new byte [ ] { 1 , 2 } ) ) ; IDENT_1 . add ( ( ) -> METHOD_3 ( IDENT_3 . IDENT_4 . IDENT_5 . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 2 ) , 1 ) ) ; IDENT_1 . add ( ( ) -> METHOD_3 ( IDENT_3 . IDENT_4 . IDENT_5 . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 3 ) , 1 ) ) ; java . util . List < byte [ ] > IDENT_9 = IDENT_10 . METHOD_4 ( IDENT_1 ) ; for ( byte [ ] actual : IDENT_9 ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( java . util . List ) { try { java . util . List < java . util . concurrent . IDENT_11 < T > > results = executor . METHOD_5 ( IDENT_1 , INT_0 , TimeUnit . IDENT_12 ) ; @ IDENT_3 . IDENT_4 . IDENT_5 . tools . helper . METHOD_6 ( STRING_0 ) java . util . List < T > IDENT_13 = results . stream ( ) . map ( ( future ) -> { try { return future . get ( ) ; } catch ( e ) { System . err . println ( STRING_1 ) ; IDENT_3 . IDENT_4 . IDENT_5 . tools . helper . e . printStackTrace ( ) ; } catch ( e ) { System . err . println ( STRING_2 ) ; IDENT_3 . IDENT_4 . IDENT_5 . tools . helper . e . printStackTrace ( ) ; } catch ( e ) { return ( ( IDENT_3 . IDENT_4 . IDENT_5 . tools . helper . T ) ( IDENT_3 . IDENT_4 . IDENT_5 . tools . helper . e . METHOD_7 ( ) ) ) ; } return null ; } ) . collect ( java . util . stream . IDENT_14 . toList ( ) ) ; return IDENT_13 ; } catch ( java . lang . IDENT_15 e ) { System . err . println ( STRING_2 ) ; e . printStackTrace ( ) ; } return new java . util . ArrayList ( ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_2 , actual ) 