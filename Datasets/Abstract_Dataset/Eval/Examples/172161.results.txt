METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( ) ) . thenReturn ( java . util . Arrays . asList ( STRING_0 , STRING_1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( int , int ) { java . util . Collection < java . lang . String > IDENT_1 = new java . util . IDENT_2 < java . lang . String > ( IDENT_0 . METHOD_1 ( ) ) ; IDENT_1 . addAll ( METHOD_3 ( ) ) ; if ( ( start + count ) > ( IDENT_1 . size ( ) ) ) { IDENT_1 . addAll ( IDENT_3 . METHOD_1 ( ) ) ; } if ( start >= ( IDENT_1 . size ( ) ) ) { start = IDENT_1 . size ( ) ; } if ( ( start + count ) >= ( IDENT_1 . size ( ) ) ) { count = ( IDENT_1 . size ( ) ) - start ; } return new java . util . ArrayList < java . lang . String > ( IDENT_1 ) . METHOD_4 ( start , ( start + count ) ) ; }
org . junit . Assert . assertEquals ( 2 , service . METHOD_2 ( 0 , 2 ) . size ( ) ) 