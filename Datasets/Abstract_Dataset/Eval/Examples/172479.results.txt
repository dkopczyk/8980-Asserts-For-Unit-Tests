METHOD_0 ( ) { org . springframework . data . mongodb . core . Calendar IDENT_0 = org . springframework . data . mongodb . core . Calendar . getInstance ( Locale . IDENT_1 ) ; IDENT_0 . set ( INT_0 , 10 , INT_1 , 0 , 0 , 0 ) ; org . springframework . data . mongodb . core . IDENT_2 . IDENT_3 IDENT_4 = new org . springframework . data . mongodb . core . IDENT_2 . METHOD_1 ( ) ; IDENT_4 . date = IDENT_0 . getTime ( ) ; template . save ( IDENT_4 ) ; IDENT_0 . set ( INT_2 , 10 , INT_1 , 0 , 0 , 0 ) ; template . METHOD_2 ( query ( METHOD_3 ( STRING_0 ) . is ( IDENT_4 . id ) ) , new org . springframework . data . mongodb . core . METHOD_4 ( ) . max ( STRING_1 , IDENT_0 . getTime ( ) ) , org . springframework . data . mongodb . core . IDENT_2 . METHOD_1 . class ) ; org . springframework . data . mongodb . core . IDENT_2 . METHOD_1 IDENT_5 = template . find ( query ( METHOD_3 ( STRING_0 ) . is ( IDENT_4 . id ) ) , org . springframework . data . mongodb . core . IDENT_2 . METHOD_1 . class ) . get ( 0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . springframework . data . mongodb . core . query . IDENT_6 ) { super . METHOD_3 ( criteria ) ; return this ; }
org . junit . Assert . assertThat ( IDENT_5 . date , equalTo ( IDENT_0 . getTime ( ) ) ) 