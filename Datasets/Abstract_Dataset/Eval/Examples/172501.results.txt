METHOD_0 ( ) { org . springframework . data . mongodb . core . convert . IDENT_0 converter = new org . springframework . data . mongodb . core . convert . METHOD_1 ( resolver , IDENT_1 ) ; converter . METHOD_2 ( new org . springframework . data . mongodb . core . convert . METHOD_3 ( org . springframework . data . mongodb . core . convert . Arrays . asList ( new org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_4 ( ) , new org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_5 ( ) ) ) ) ; converter . METHOD_6 ( ) ; org . springframework . data . mongodb . core . convert . IDENT_2 . IDENT_3 source = new org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_7 ( ) ; source . map = new org . springframework . data . mongodb . core . convert . HashMap < org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_7 . IDENT_4 , java . lang . String > ( ) ; source . map . put ( org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_7 . IDENT_4 . IDENT_5 , STRING_0 ) ; org . bson . Document target = new org . bson . Document ( ) ; converter . write ( source , target ) ; "<AssertPlaceHolder>" ; } read ( java . lang . Class , org . bson . IDENT_6 . IDENT_7 ) { return ( ( IDENT_8 ) ( person ) ) ; }
org . junit . Assert . assertThat ( converter . read ( org . springframework . data . mongodb . core . convert . IDENT_2 . METHOD_7 . class , target ) . map , is ( source . map ) ) 