METHOD_0 ( ) { @ org . springframework . data . solr . core . query . result . METHOD_1 ( STRING_0 ) org . springframework . data . solr . core . query . result . IDENT_0 < java . lang . Object > IDENT_1 = new org . springframework . data . solr . core . query . result . METHOD_2 ( 1 , null , "name" , org . mockito . Mockito . mock ( org . springframework . data . domain . IDENT_2 . class ) ) ; java . util . Map < java . lang . Object , org . springframework . data . solr . core . query . result . IDENT_0 < java . lang . Object > > IDENT_3 = new java . util . HashMap ( ) ; IDENT_3 . put ( "name" , IDENT_1 ) ; org . springframework . data . solr . core . query . result . IDENT_4 < java . lang . Object > result = new org . springframework . data . solr . core . query . result . METHOD_3 ( java . util . Collections . emptyList ( ) ) ; result . METHOD_4 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . springframework . data . solr . core . query . Field ) { org . springframework . util . Assert . METHOD_6 ( field , STRING_1 ) ; return IDENT_5 . get ( field . getName ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , result . METHOD_5 ( "name" ) ) 