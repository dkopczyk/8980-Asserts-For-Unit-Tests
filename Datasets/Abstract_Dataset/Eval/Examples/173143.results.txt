METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Double > IDENT_0 = IDENT_1 . METHOD_1 ( null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( org . springframework . util . StringUtils . isEmpty ( input ) ) { return java . util . Collections . METHOD_2 ( ) ; } try { java . lang . String [ ] IDENT_2 = input . split ( STRING_0 ) ; java . util . Map < java . lang . String , java . lang . Double > map = new java . util . HashMap < java . lang . String , java . lang . Double > ( ) ; for ( java . lang . String IDENT_3 : IDENT_2 ) { java . lang . String [ ] IDENT_4 = IDENT_3 . split ( STRING_1 ) ; map . put ( IDENT_4 [ 0 ] , java . lang . Double . METHOD_3 ( IDENT_4 [ 1 ] ) ) ; } return map ; } catch ( java . lang . Exception ex ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_2 + input ) + STRING_3 ) ) ; } }
org . junit . Assert . assertThat ( IDENT_0 . size ( ) , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( 0 ) ) ) 