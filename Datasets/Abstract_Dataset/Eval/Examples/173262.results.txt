METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 < java . lang . String > result = new java . util . concurrent . atomic . METHOD_1 ( ) ; final java . util . concurrent . IDENT_1 IDENT_2 = new java . util . concurrent . METHOD_2 ( 1 ) ; java . net . IDENT_3 IDENT_4 = new java . net . METHOD_3 ( 0 ) ; final IDENT_5 . nio . IDENT_6 . IDENT_7 IDENT_8 = new IDENT_5 . nio . IDENT_6 . METHOD_4 ( ) . METHOD_5 ( IDENT_4 ) ; java . util . function . IDENT_9 < IDENT_5 . nio . IDENT_6 . IDENT_10 > IDENT_11 = new java . util . function . IDENT_9 < IDENT_5 . nio . IDENT_6 . IDENT_10 > ( ) { public void accept ( IDENT_5 . nio . IDENT_6 . IDENT_10 IDENT_12 ) { IDENT_8 . accept ( ) . METHOD_6 ( this ) ; java . nio . ByteBuffer IDENT_13 = java . nio . ByteBuffer . METHOD_7 ( INT_0 ) ; IDENT_12 . read ( IDENT_13 ) . METHOD_6 ( ( length ) -> { IDENT_13 . METHOD_8 ( ) ; IDENT_12 . write ( IDENT_13 ) ; IDENT_12 . close ( ) ; } ) ; } } ; IDENT_8 . accept ( ) . METHOD_6 ( IDENT_11 ) ; IDENT_5 . nio . IDENT_6 . IDENT_10 IDENT_12 = new IDENT_5 . nio . IDENT_6 . METHOD_9 ( ) ; java . net . IDENT_3 IDENT_14 = new java . net . METHOD_3 ( STRING_0 , IDENT_8 . METHOD_10 ( ) . METHOD_11 ( ) ) ; IDENT_12 . connect ( IDENT_14 ) . METHOD_6 ( ( v ) -> { IDENT_12 . write ( java . nio . ByteBuffer . METHOD_12 ( STRING_1 . getBytes ( ) ) ) . METHOD_6 ( ( IDENT_15 ) -> { java . nio . ByteBuffer IDENT_16 = java . nio . ByteBuffer . METHOD_7 ( IDENT_15 ) ; IDENT_12 . read ( IDENT_16 ) . METHOD_6 ( ( IDENT_17 ) -> { IDENT_16 . METHOD_8 ( ) ; result . set ( new java . lang . String ( IDENT_16 . array ( ) ) ) ; IDENT_2 . METHOD_13 ( ) ; } ) ; } ) ; } ) ; IDENT_2 . METHOD_14 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { if ( ! ( set ) ) { MOD_0 ( this ) { if ( ! ( set ) ) { try { value = IDENT_18 . call ( ) ; set = true ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( STRING_2 , e ) ; } } } } return value ; }
org . junit . Assert . assertEquals ( STRING_1 , result . get ( ) ) 