METHOD_0 ( ) { org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . IDENT_2 < io . vertx . ext . web . IDENT_3 > param = new org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . METHOD_1 ( ) ; io . vertx . ext . web . IDENT_3 IDENT_4 = org . mockito . Mockito . mock ( io . vertx . ext . web . IDENT_3 . class ) ; java . util . HashSet < io . vertx . ext . web . IDENT_5 > IDENT_6 = new java . util . HashSet ( ) ; java . lang . String IDENT_7 = STRING_0 ; io . vertx . ext . web . impl . IDENT_8 IDENT_9 = new io . vertx . ext . web . impl . METHOD_2 ( org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . element . impl . IDENT_10 . IDENT_11 , IDENT_7 ) ; IDENT_6 . add ( IDENT_9 ) ; org . mockito . Mockito . when ( IDENT_4 . METHOD_3 ( ) ) . thenReturn ( 1 ) ; org . mockito . Mockito . when ( IDENT_4 . METHOD_4 ( ) ) . thenReturn ( IDENT_6 ) ; param . METHOD_5 ( IDENT_4 ) ; java . lang . String result = org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . element . impl . IDENT_10 . IDENT_12 . METHOD_6 ( param ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . METHOD_1 ) { java . util . Set < io . vertx . ext . web . IDENT_5 > IDENT_6 = IDENT_13 . METHOD_7 ( ) . METHOD_4 ( ) ; if ( null == IDENT_6 ) { return org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . element . impl . IDENT_14 . IDENT_15 ; } java . lang . String result = null ; for ( io . vertx . ext . web . IDENT_5 IDENT_9 : IDENT_6 ) { if ( IDENT_16 . equals ( IDENT_9 . getName ( ) ) ) { result = IDENT_9 . getValue ( ) ; } } if ( null == result ) { return org . apache . IDENT_0 . transport . rest . vertx . IDENT_1 . element . impl . IDENT_14 . IDENT_15 ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_7 , result ) 