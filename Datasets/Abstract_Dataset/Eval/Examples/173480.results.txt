METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > v1 = new java . util . HashMap ( ) ; v1 . put ( STRING_0 , STRING_1 ) ; v1 . put ( STRING_2 , STRING_3 ) ; java . util . Map < java . lang . String , java . lang . String > v2 = new java . util . HashMap ( ) ; v2 . put ( STRING_2 , STRING_3 ) ; edu . IDENT_0 . IDENT_1 . IDENT_2 . analysis . IDENT_3 . IDENT_4 . result . IDENT_5 IDENT_6 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . analysis . IDENT_3 . IDENT_4 . result . METHOD_1 ( FLOAT_0 , FLOAT_1 , FLOAT_2 , v1 ) ; edu . IDENT_0 . IDENT_1 . IDENT_2 . analysis . IDENT_3 . IDENT_4 . result . METHOD_1 IDENT_7 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . analysis . IDENT_3 . IDENT_4 . result . METHOD_1 ( FLOAT_3 , FLOAT_4 , FLOAT_5 , v2 ) ; "<AssertPlaceHolder>" ; } contains ( edu . IDENT_0 . IDENT_1 . IDENT_2 . analysis . IDENT_3 . IDENT_4 . result . METHOD_1 ) { java . util . Map < java . lang . String , java . lang . String > IDENT_8 = other . IDENT_9 ; for ( Map . Entry < java . lang . String , java . lang . String > IDENT_10 : IDENT_8 . entrySet ( ) ) { java . lang . String IDENT_11 = IDENT_10 . getKey ( ) ; java . lang . String IDENT_12 = IDENT_10 . getValue ( ) ; boolean match = false ; if ( ( IDENT_9 . containsKey ( IDENT_11 ) ) && ( IDENT_9 . get ( IDENT_11 ) . equals ( IDENT_12 ) ) ) { continue ; } else { return false ; } } return true ; }
org . junit . Assert . assertTrue ( IDENT_6 . contains ( IDENT_7 ) ) 