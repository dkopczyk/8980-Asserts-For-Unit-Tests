METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( false ) ; org . IDENT_2 . javascript . IDENT_3 . IDENT_4 < java . lang . Integer , java . lang . Long , org . IDENT_2 . javascript . IDENT_5 < java . lang . Integer > , java . lang . Boolean > IDENT_6 = new org . IDENT_2 . javascript . IDENT_3 . IDENT_4 < java . lang . Integer , java . lang . Long , org . IDENT_2 . javascript . IDENT_5 < java . lang . Integer > , java . lang . Boolean > ( ) { @ org . IDENT_2 . javascript . Override public org . IDENT_2 . javascript . Boolean METHOD_2 ( java . lang . Integer val , java . lang . Long IDENT_7 , org . IDENT_2 . javascript . IDENT_5 < java . lang . Integer > obj ) { if ( IDENT_7 > 0 ) { IDENT_1 . set ( true ) ; } if ( IDENT_7 == 0 ) { throw new java . lang . METHOD_3 ( STRING_0 ) ; } return true ; } } ; org . IDENT_2 . javascript . IDENT_5 < java . lang . Integer > obj = new org . IDENT_2 . javascript . METHOD_4 ( 20 ) ; obj . METHOD_5 ( 0 , INT_0 ) ; obj . METHOD_5 ( 4 , 10 ) ; obj . METHOD_5 ( 10 , 8 ) ; try { obj . map ( IDENT_6 ) ; throw new java . lang . METHOD_6 ( STRING_1 ) ; } catch ( java . lang . METHOD_3 e ) { "<AssertPlaceHolder>" ; } } get ( ) { return this ; }
org . junit . Assert . assertFalse ( IDENT_1 . get ( ) ) 