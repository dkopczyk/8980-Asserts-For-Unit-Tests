METHOD_0 ( ) { java . security . spec . IDENT_0 IDENT_1 = new java . security . spec . METHOD_1 ( net . IDENT_2 . crypto . IDENT_3 . IDENT_4 . IDENT_5 ) ; net . IDENT_2 . crypto . IDENT_3 . IDENT_6 IDENT_7 = new net . IDENT_2 . crypto . IDENT_3 . METHOD_2 ( IDENT_1 ) ; net . IDENT_2 . crypto . IDENT_3 . spec . IDENT_8 IDENT_9 = new net . IDENT_2 . crypto . IDENT_3 . spec . METHOD_3 ( IDENT_7 . METHOD_4 ( ) , IDENT_7 . METHOD_5 ( ) , IDENT_7 . METHOD_6 ( ) , IDENT_7 . METHOD_7 ( ) , IDENT_7 . METHOD_8 ( ) ) ; net . IDENT_2 . crypto . IDENT_3 . METHOD_2 IDENT_10 = new net . IDENT_2 . crypto . IDENT_3 . METHOD_2 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( ) { if ( ! ( IDENT_11 . equals ( IDENT_12 . IDENT_13 ) ) ) return null ; int IDENT_14 = 12 + ( IDENT_15 . length ) ; byte [ ] IDENT_16 = new byte [ IDENT_14 ] ; int IDENT_17 = 0 ; IDENT_16 [ ( IDENT_17 ++ ) ] = INT_0 ; IDENT_16 [ ( IDENT_17 ++ ) ] = ( ( byte ) ( IDENT_14 - 2 ) ) ; IDENT_16 [ ( IDENT_17 ++ ) ] = INT_0 ; IDENT_16 [ ( IDENT_17 ++ ) ] = 5 ; IDENT_16 [ ( IDENT_17 ++ ) ] = 6 ; IDENT_16 [ ( IDENT_17 ++ ) ] = 3 ; IDENT_16 [ ( IDENT_17 ++ ) ] = ( 1 * INT_1 ) + 3 ; IDENT_16 [ ( IDENT_17 ++ ) ] = INT_2 ; IDENT_16 [ ( IDENT_17 ++ ) ] = ( ( byte ) ( net . IDENT_2 . crypto . IDENT_3 . IDENT_18 . IDENT_19 ) ) ; IDENT_16 [ ( IDENT_17 ++ ) ] = 3 ; IDENT_16 [ ( IDENT_17 ++ ) ] = ( ( byte ) ( 1 + ( IDENT_15 . length ) ) ) ; IDENT_16 [ ( IDENT_17 ++ ) ] = 0 ; java . lang . System . METHOD_10 ( IDENT_15 , 0 , IDENT_16 , IDENT_17 , IDENT_15 . length ) ; return IDENT_16 ; }
org . junit . Assert . assertThat ( IDENT_10 . METHOD_9 ( ) , is ( equalTo ( net . IDENT_2 . crypto . IDENT_3 . IDENT_4 . IDENT_5 ) ) ) 