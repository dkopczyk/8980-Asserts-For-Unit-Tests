METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . IDENT_2 . flink . util . IDENT_3 parser = new de . IDENT_0 . IDENT_1 . IDENT_2 . flink . util . METHOD_1 ( STRING_0 , STRING_1 , "" ) ; java . lang . String IDENT_4 = STRING_2 ; java . util . List < java . lang . String > IDENT_5 = java . util . Arrays . asList ( STRING_3 , null , null , null ) ; java . util . List < java . lang . String > result = parser . parse ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { this . tokens . METHOD_2 ( ) ; int IDENT_6 = 0 ; while ( IDENT_6 <= ( row . length ( ) ) ) { IDENT_6 = METHOD_3 ( row , IDENT_6 ) ; if ( ( this . IDENT_7 ) != null ) { final int IDENT_8 = ( this . tokens . size ( ) ) - 1 ; java . lang . String IDENT_9 = this . tokens . get ( IDENT_8 ) ; if ( this . IDENT_7 . equals ( IDENT_9 ) ) { this . tokens . set ( IDENT_8 , null ) ; } } } if ( ( this . IDENT_10 ) >= 0 ) { final int IDENT_11 = this . tokens . size ( ) ; if ( IDENT_11 != ( this . IDENT_10 ) ) { final java . lang . String msg = java . lang . String . format ( STRING_4 , IDENT_11 , this . IDENT_10 , row ) ; if ( ( ( this . IDENT_12 ) == ( de . IDENT_0 . IDENT_1 . IDENT_2 . flink . util . METHOD_1 . IDENT_13 ) ) || ( ( ( this . IDENT_12 ) == ( de . IDENT_0 . IDENT_1 . IDENT_2 . flink . util . METHOD_1 . IDENT_14 ) ) && ( IDENT_11 > ( this . IDENT_10 ) ) ) ) { throw new java . lang . RuntimeException ( msg ) ; } else { de . IDENT_0 . IDENT_1 . IDENT_2 . flink . util . METHOD_1 . logger . warn ( msg ) ; } } } return this . tokens ; }
org . junit . Assert . assertEquals ( IDENT_5 , result ) 