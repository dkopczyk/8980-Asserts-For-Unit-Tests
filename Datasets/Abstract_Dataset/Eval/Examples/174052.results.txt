METHOD_0 ( ) { eu . IDENT_0 . types . IDENT_1 IDENT_2 = new eu . IDENT_0 . types . METHOD_1 ( "test" ) ; eu . IDENT_0 . util . IDENT_3 . IDENT_4 IDENT_5 = new eu . IDENT_0 . util . IDENT_3 . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( IDENT_2 ) ; IDENT_5 . next ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } next ( eu . IDENT_0 . types . METHOD_1 ) { final char [ ] data = this . IDENT_6 . METHOD_4 ( ) ; final int IDENT_7 = this . IDENT_7 ; int pos = this . pos ; for ( ; ( pos < IDENT_7 ) && ( java . lang . IDENT_8 . METHOD_5 ( data [ pos ] ) ) ; pos ++ ) ; if ( pos >= IDENT_7 ) { this . pos = pos ; return false ; } final int start = pos ; for ( ; ( pos < IDENT_7 ) && ( ! ( java . lang . IDENT_8 . METHOD_5 ( data [ pos ] ) ) ) ; pos ++ ) ; this . pos = pos ; target . setValue ( this . IDENT_6 , start , ( pos - start ) ) ; return true ; }
org . junit . Assert . assertFalse ( IDENT_5 . next ( IDENT_2 ) ) 