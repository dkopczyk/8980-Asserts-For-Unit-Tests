METHOD_0 ( ) { java . util . List < com . streamsets . pipeline . api . IDENT_0 > records = new java . util . ArrayList ( ) ; records . add ( METHOD_1 ( com . google . common . collect . ImmutableMap . of ( "a" , "1" , "b" , 1 , STRING_0 , 1.0 ) ) ) ; records . add ( METHOD_1 ( com . google . common . collect . ImmutableMap . of ( "a" , "2" , "b" , 2 , STRING_0 , 2.0 ) ) ) ; records . add ( METHOD_1 ( com . google . common . collect . ImmutableMap . of ( "a" , STRING_1 , "b" , 3 , STRING_0 , FLOAT_0 ) ) ) ; METHOD_2 ( ( IDENT_1 ) -> { com . google . cloud . IDENT_2 . IDENT_3 IDENT_4 = ( ( com . google . cloud . IDENT_2 . IDENT_3 ) ( IDENT_1 . METHOD_3 ( ) [ 0 ] ) ) ; List < com . google . cloud . IDENT_2 . IDENT_3 . IDENT_5 > IDENT_6 = IDENT_4 . METHOD_4 ( ) ; final java . util . concurrent . atomic . IDENT_7 IDENT_8 = new java . util . concurrent . atomic . METHOD_5 ( 0 ) ; IDENT_6 . METHOD_6 ( ( row ) -> { int IDENT_9 = IDENT_8 . METHOD_7 ( ) ; com . streamsets . pipeline . api . IDENT_0 record = records . get ( IDENT_9 ) ; Map < java . lang . String , ? > IDENT_10 = row . METHOD_8 ( ) ; record . get ( ) . METHOD_9 ( ) . METHOD_6 ( ( k , v ) -> "<AssertPlaceHolder>" ) ; } ) ; com . google . cloud . IDENT_2 . IDENT_11 response = org . IDENT_12 . api . mockito . IDENT_13 . mock ( . class ) ; org . mockito . Mockito . doReturn ( java . util . Collections . METHOD_10 ( ) ) . when ( response ) . METHOD_11 ( ) ; org . mockito . Mockito . doReturn ( false ) . when ( response ) . METHOD_12 ( ) ; return response ; } ) ; com . streamsets . pipeline . IDENT_14 . IDENT_2 . IDENT_15 . IDENT_16 IDENT_17 = new com . streamsets . pipeline . IDENT_14 . IDENT_2 . IDENT_15 . METHOD_13 ( ) ; METHOD_14 ( IDENT_17 . build ( ) , records ) ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( v . getValue ( ) , IDENT_10 . get ( k ) ) 