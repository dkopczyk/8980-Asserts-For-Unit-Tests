METHOD_0 ( ) { com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_0 parser = org . IDENT_1 . IDENT_2 . METHOD_1 ( com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_0 . class ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_3 ; int code ; if ( sql . startsWith ( STRING_0 ) ) { code = com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_5 ; } else if ( sql . startsWith ( STRING_1 ) ) { code = com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_6 ; } else { code = com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_7 ; } IDENT_3 = com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_8 . process ( parser , sql , code , false , false , null ) ; "<AssertPlaceHolder>" ; } process ( com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_0 , java . lang . String , int , boolean , boolean , java . util . Set ) { org . IDENT_1 . IDENT_9 IDENT_10 ; switch ( type ) { case com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_5 : IDENT_10 = parser . METHOD_2 ( ) ; break ; case com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_7 : case com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_11 : IDENT_10 = parser . METHOD_3 ( ) ; break ; case com . streamsets . pipeline . lib . jdbc . IDENT_4 . IDENT_6 : IDENT_10 = parser . METHOD_4 ( ) ; break ; default : throw new com . streamsets . pipeline . lib . jdbc . parser . sql . METHOD_5 ( sql ) ; } org . IDENT_1 . IDENT_12 . IDENT_13 < ? > runner = new org . IDENT_1 . IDENT_12 . METHOD_6 ( IDENT_10 ) ; org . IDENT_1 . support . IDENT_14 < ? > result = runner . run ( sql ) ; if ( ! ( result . IDENT_15 ) ) { throw new com . streamsets . pipeline . lib . jdbc . parser . sql . METHOD_5 ( sql ) ; } java . util . Collection < org . IDENT_1 . Node < java . lang . Object > > IDENT_16 = new java . util . ArrayList ( ) ; org . IDENT_1 . support . IDENT_17 . METHOD_7 ( ( ( org . IDENT_1 . Node < java . lang . Object > ) ( result . IDENT_18 ) ) , ( input ) -> input . METHOD_8 ( ) . equals ( IDENT_19 ) , IDENT_16 ) ; java . util . Collection < org . IDENT_1 . Node < java . lang . Object > > values = new java . util . ArrayList ( ) ; org . IDENT_1 . support . IDENT_17 . METHOD_7 ( ( ( org . IDENT_1 . Node < java . lang . Object > ) ( result . IDENT_18 ) ) , ( input ) -> input . METHOD_8 ( ) . equals ( IDENT_20 ) , values ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap ( ) ; for ( int i = 0 ; i < ( IDENT_16 . size ( ) ) ; i ++ ) { org . IDENT_1 . Node < ? > name = ( ( java . util . ArrayList < org . IDENT_1 . Node < java . lang . Object > > ) ( IDENT_16 ) ) . get ( i ) ; org . IDENT_1 . Node < ? > val = ( ( java . util . ArrayList < org . IDENT_1 . Node < java . lang . Object > > ) ( values ) ) . get ( i ) ; final java . lang . String IDENT_21 = sql . substring ( name . METHOD_9 ( ) , name . METHOD_10 ( ) ) ; final java . lang . String key = com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_8 . METHOD_11 ( IDENT_21 , IDENT_22 ) ; if ( ! ( IDENT_3 . containsKey ( key ) ) ) { IDENT_3 . put ( key , com . streamsets . pipeline . lib . jdbc . parser . sql . IDENT_8 . METHOD_12 ( sql . substring ( val . METHOD_9 ( ) , val . METHOD_10 ( ) ) ) ) ; } } if ( IDENT_23 && ( IDENT_24 != null ) ) { IDENT_24 . METHOD_13 ( ( IDENT_25 ) -> IDENT_3 . METHOD_14 ( IDENT_25 , null ) ) ; } return IDENT_3 ; }
org . junit . Assert . assertEquals ( expected , IDENT_3 ) 