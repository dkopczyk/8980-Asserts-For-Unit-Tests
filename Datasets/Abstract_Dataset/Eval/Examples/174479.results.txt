METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList ( INT_0 ) ; java . util . List < com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList ( INT_0 ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { java . lang . String tableName = org . apache . commons . lang3 . IDENT_6 . METHOD_1 ( 5 ) ; IDENT_0 . add ( com . streamsets . pipeline . api . impl . Utils . format ( STRING_0 , tableName ) ) ; IDENT_5 . add ( new com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . METHOD_2 ( STRING_1 , tableName ) ) ; } com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . IDENT_7 . IDENT_8 IDENT_9 = new com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . IDENT_7 . METHOD_3 ( ) ; IDENT_9 . IDENT_10 = IDENT_11 . IDENT_12 ; com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . IDENT_7 . IDENT_13 source = new com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . IDENT_7 . METHOD_4 ( null , IDENT_9 ) ; java . lang . String actual = source . METHOD_5 ( IDENT_5 ) ; java . lang . String expected = com . streamsets . pipeline . api . impl . Utils . format ( STRING_2 , java . lang . String . join ( STRING_3 , IDENT_0 . METHOD_6 ( 0 , 1000 ) ) , java . lang . String . join ( STRING_3 , IDENT_0 . METHOD_6 ( 1000 , INT_0 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . List ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_14 = new java . util . HashMap ( ) ; for ( com . streamsets . pipeline . IDENT_1 . IDENT_2 . jdbc . IDENT_3 . METHOD_2 IDENT_15 : IDENT_5 ) { if ( IDENT_14 . containsKey ( IDENT_15 . METHOD_7 ( ) ) ) { IDENT_14 . get ( IDENT_15 . METHOD_7 ( ) ) . add ( IDENT_15 . METHOD_8 ( ) ) ; } else { java . util . List < java . lang . String > IDENT_16 = new java . util . ArrayList ( ) ; IDENT_16 . add ( IDENT_15 . METHOD_8 ( ) ) ; IDENT_14 . put ( IDENT_15 . METHOD_7 ( ) , IDENT_16 ) ; } } java . util . List < java . lang . String > IDENT_17 = new java . util . ArrayList ( ) ; for ( Map . Entry < java . lang . String , java . util . List < java . lang . String > > entry : IDENT_14 . entrySet ( ) ) { java . util . List < java . lang . String > IDENT_18 = new java . util . ArrayList ( ) ; int IDENT_19 = 0 ; int range = 1000 ; int IDENT_20 = entry . getValue ( ) . size ( ) ; int IDENT_21 = ( range < IDENT_20 ) ? range : IDENT_20 ; while ( IDENT_19 < IDENT_21 ) { IDENT_18 . add ( com . streamsets . pipeline . api . impl . Utils . format ( STRING_4 , METHOD_9 ( entry . getValue ( ) . METHOD_6 ( IDENT_19 , IDENT_21 ) ) ) ) ; IDENT_19 = IDENT_21 ; IDENT_21 = ( ( IDENT_21 + range ) < IDENT_20 ) ? IDENT_21 + range : IDENT_20 ; } IDENT_17 . add ( com . streamsets . pipeline . api . impl . Utils . format ( STRING_5 , entry . getKey ( ) , java . lang . String . join ( STRING_6 , IDENT_18 ) ) ) ; } return ( STRING_7 + ( java . lang . String . join ( STRING_6 , IDENT_17 ) ) ) + STRING_8 ; }
org . junit . Assert . assertEquals ( expected , actual ) 