METHOD_0 ( ) { java . util . List < io . IDENT_0 . IDENT_1 . api . model . IDENT_2 > IDENT_3 = new java . util . ArrayList ( 3 ) ; IDENT_3 . add ( new io . IDENT_0 . IDENT_1 . api . model . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( STRING_1 ) . build ( ) ) ; IDENT_3 . add ( new io . IDENT_0 . IDENT_1 . api . model . METHOD_1 ( ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( STRING_3 ) . build ( ) ) ; IDENT_3 . add ( new io . IDENT_0 . IDENT_1 . api . model . METHOD_1 ( ) . METHOD_2 ( STRING_4 ) . METHOD_3 ( STRING_5 ) . build ( ) ) ; io . IDENT_4 . kafka . init . IDENT_5 config = io . IDENT_4 . kafka . init . IDENT_5 . METHOD_4 ( io . IDENT_4 . kafka . init . IDENT_6 . IDENT_7 ) ; io . IDENT_0 . IDENT_1 . client . IDENT_8 client = METHOD_5 ( config . METHOD_6 ( ) , io . IDENT_4 . kafka . init . IDENT_6 . IDENT_9 , IDENT_3 ) ; io . IDENT_4 . kafka . init . IDENT_10 writer = new io . IDENT_4 . kafka . init . METHOD_7 ( client , config ) ; java . lang . String address = writer . METHOD_8 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . util . List ) { if ( IDENT_3 == null ) { return null ; } java . util . Map < java . lang . String , java . lang . String > IDENT_11 = IDENT_3 . stream ( ) . collect ( java . util . stream . IDENT_12 . METHOD_9 ( IDENT_2 :: getType , IDENT_2 :: IDENT_13 ) ) ; if ( IDENT_11 . containsKey ( STRING_6 ) ) { return IDENT_11 . get ( STRING_6 ) ; } else if ( IDENT_11 . containsKey ( STRING_7 ) ) { return IDENT_11 . get ( STRING_7 ) ; } else if ( IDENT_11 . containsKey ( STRING_8 ) ) { return IDENT_11 . get ( STRING_8 ) ; } else if ( IDENT_11 . containsKey ( STRING_9 ) ) { return IDENT_11 . get ( STRING_9 ) ; } else if ( IDENT_11 . containsKey ( STRING_10 ) ) { return IDENT_11 . get ( STRING_10 ) ; } return null ; }
org . junit . Assert . assertNull ( address ) 