METHOD_0 ( ) { final byte [ ] data = new byte [ ] { - 1 , 0 , 0 , 0 } ; final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( data ) ; final com . IDENT_0 . transform . IDENT_1 . IDENT_2 fixture = new com . IDENT_0 . transform . IDENT_1 . METHOD_1 ( stream ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { if ( ( ( size ) - ( index ) ) < 2 ) { METHOD_3 ( ) ; } if ( ( ( index ) + 2 ) > ( size ) ) { throw new java . lang . METHOD_4 ( ) ; } int value = ( buffer [ ( ( index ) ++ ) ] ) & ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_3 ) ; value OP_0 ( ( buffer [ ( ( index ) ++ ) ] ) & ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_3 ) ) << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_4 ) ; return value ; }
org . junit . Assert . assertEquals ( 255 , fixture . METHOD_2 ( ) ) 