METHOD_0 ( ) { final byte [ ] data = new byte [ ] { 0 , ( ( byte ) ( INT_0 ) ) } ; final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( data ) ; final com . IDENT_0 . transform . IDENT_1 . IDENT_2 fixture = new com . IDENT_0 . transform . IDENT_1 . METHOD_1 ( stream ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { final int IDENT_3 = METHOD_3 ( ) ; final int IDENT_4 = ( IDENT_3 > > ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_5 ) ) & ( IDENT_6 . IDENT_7 ) ; int exp = ( IDENT_3 > > ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_8 ) ) & ( IDENT_6 . IDENT_9 ) ; int IDENT_10 = IDENT_3 & ( IDENT_6 . IDENT_11 ) ; float value ; if ( exp == 0 ) { if ( IDENT_10 == 0 ) { value = java . lang . IDENT_12 . METHOD_4 ( ( IDENT_4 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_13 ) ) ) ; } else { while ( ( IDENT_10 & ( IDENT_6 . IDENT_14 ) ) == 0 ) { IDENT_10 OP_0 1 ; exp OP_1 1 ; } exp += 1 ; exp = exp + ( ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_15 ) - ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_16 ) ) ; IDENT_10 OP_2 OP_3 ( IDENT_6 . IDENT_14 ) ; IDENT_10 = IDENT_10 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_17 ) ; value = java . lang . IDENT_12 . METHOD_4 ( ( ( ( IDENT_4 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_13 ) ) | ( exp << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_18 ) ) ) | IDENT_10 ) ) ; } } else if ( exp == ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_19 ) ) { if ( IDENT_10 == 0 ) { value = java . lang . IDENT_12 . METHOD_4 ( ( ( IDENT_4 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_13 ) ) | ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_20 ) ) ) ; } else { value = java . lang . IDENT_12 . METHOD_4 ( ( ( ( IDENT_4 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_13 ) ) | ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_20 ) ) | ( IDENT_10 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_17 ) ) ) ) ; } } else { exp = exp + ( ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_15 ) - ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_16 ) ) ; IDENT_10 = IDENT_10 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_17 ) ; value = java . lang . IDENT_12 . METHOD_4 ( ( ( ( IDENT_4 << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_13 ) ) | ( exp << ( com . IDENT_0 . transform . IDENT_1 . METHOD_1 . IDENT_18 ) ) ) | IDENT_10 ) ) ; } return value ; }
org . junit . Assert . assertEquals ( ( - 0.0 ) , fixture . METHOD_2 ( ) , 0.0 ) 