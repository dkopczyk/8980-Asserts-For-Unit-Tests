METHOD_0 ( ) { org . apache . cassandra . db . IDENT_0 table = org . apache . cassandra . db . IDENT_0 . METHOD_1 ( STRING_0 ) ; org . apache . cassandra . db . IDENT_1 IDENT_2 = table . METHOD_2 ( STRING_1 ) ; for ( int i = INT_0 ; i < 1000 ; ++ i ) { org . apache . cassandra . db . IDENT_3 IDENT_4 = new org . apache . cassandra . db . METHOD_3 ( STRING_0 , java . nio . ByteBuffer . METHOD_4 ( java . lang . Integer . toString ( i ) . getBytes ( ) ) ) ; for ( int j = 0 ; j < 8 ; ++ j ) { IDENT_4 . add ( new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 , null , org . apache . cassandra . IDENT_5 . getBytes ( ( j * 2 ) ) ) , org . apache . cassandra . utils . IDENT_6 . bytes ( "a" ) , ( j * 2 ) ) ; } IDENT_4 . apply ( ) ; } METHOD_6 ( table ) ; IDENT_2 . METHOD_7 ( ) ; METHOD_6 ( table ) ; org . apache . cassandra . db . IDENT_7 key = org . apache . cassandra . IDENT_5 . METHOD_8 ( STRING_2 ) ; org . apache . cassandra . db . METHOD_3 IDENT_4 = new org . apache . cassandra . db . METHOD_3 ( STRING_0 , key . key ) ; for ( int j = 0 ; j < 4 ; ++ j ) { IDENT_4 . add ( new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 , null , org . apache . cassandra . IDENT_5 . getBytes ( ( ( j * 2 ) + 1 ) ) ) , org . apache . cassandra . utils . IDENT_6 . bytes ( "b" ) , ( ( j * 2 ) + 1 ) ) ; } IDENT_4 . apply ( ) ; IDENT_4 = new org . apache . cassandra . db . METHOD_3 ( STRING_0 , key . key ) ; IDENT_4 . add ( new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 , null , org . apache . cassandra . IDENT_5 . getBytes ( 0 ) ) , org . apache . cassandra . utils . IDENT_6 . bytes ( STRING_3 ) , 100 ) ; IDENT_4 . add ( new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 , null , org . apache . cassandra . IDENT_5 . getBytes ( 10 ) ) , org . apache . cassandra . utils . IDENT_6 . bytes ( STRING_3 ) , 100 ) ; IDENT_4 . apply ( ) ; org . apache . cassandra . db . IDENT_8 IDENT_9 = IDENT_2 . METHOD_9 ( key , new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 ) , org . apache . cassandra . IDENT_5 . getBytes ( 0 ) , IDENT_10 . IDENT_11 , false , 1000 ) ; org . apache . cassandra . db . Collection < org . apache . cassandra . db . IDENT_12 > IDENT_13 = IDENT_9 . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; org . apache . cassandra . db . Iterator < org . apache . cassandra . db . IDENT_12 > IDENT_14 = IDENT_13 . iterator ( ) ; org . apache . cassandra . db . IDENT_12 column ; for ( int j = 0 ; j < 8 ; j ++ ) { column = IDENT_14 . next ( ) ; assert column . name ( ) . equals ( org . apache . cassandra . IDENT_5 . getBytes ( j ) ) ; } org . apache . cassandra . db . IDENT_15 < java . nio . ByteBuffer > IDENT_16 = new org . apache . cassandra . db . IDENT_15 < java . nio . ByteBuffer > ( org . apache . cassandra . db . IDENT_17 . IDENT_18 . instance ) ; IDENT_16 . add ( org . apache . cassandra . IDENT_5 . getBytes ( 10 ) ) ; IDENT_16 . add ( org . apache . cassandra . IDENT_5 . getBytes ( 0 ) ) ; IDENT_9 = IDENT_2 . METHOD_9 ( org . apache . cassandra . db . filter . IDENT_19 . METHOD_11 ( org . apache . cassandra . IDENT_5 . METHOD_8 ( STRING_2 ) , new org . apache . cassandra . db . filter . METHOD_5 ( STRING_1 ) , IDENT_16 ) ) ; assert STRING_3 . equals ( new java . lang . String ( IDENT_9 . METHOD_12 ( org . apache . cassandra . IDENT_5 . getBytes ( 0 ) ) . value ( ) . array ( ) ) ) ; assert STRING_3 . equals ( new java . lang . String ( IDENT_9 . METHOD_12 ( org . apache . cassandra . IDENT_5 . getBytes ( 10 ) ) . value ( ) . array ( ) ) ) ; } size ( ) { return ( ( super . size ( ) ) + ( IDENT_20 . IDENT_21 ) ) + ( IDENT_20 . IDENT_21 ) ; }
org . junit . Assert . assertEquals ( 12 , IDENT_13 . size ( ) ) 