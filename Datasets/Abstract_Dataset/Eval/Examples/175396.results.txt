METHOD_0 ( ) { try { com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( " " ) ; org . junit . Assert . fail ( ) ; } catch ( com . IDENT_0 . IDENT_1 . IDENT_3 e ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . String [ ] ) { com . IDENT_0 . validate . IDENT_4 . METHOD_2 ( ( ( ( IDENT_5 != null ) && ( ( IDENT_5 . length ) > 0 ) ) && ( ( IDENT_5 . length ) <= ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 ) ) ) ) . METHOD_3 ( ) . METHOD_4 ( ) . validate ( ) ; final java . util . List < com . IDENT_0 . IDENT_1 . IDENT_7 > tokens = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_5 ( IDENT_5 ) ; final com . IDENT_0 . IDENT_1 . IDENT_9 command = com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 ( tokens ) ; final java . util . List < java . lang . String > IDENT_10 = command . METHOD_7 ( ) ; for ( final java . lang . String name : IDENT_10 ) { final com . IDENT_0 . IDENT_1 . IDENT_9 IDENT_11 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 . put ( name , command ) ; if ( IDENT_11 != null ) { throw new com . IDENT_0 . IDENT_1 . METHOD_8 ( ( ( STRING_0 + name ) + STRING_1 ) ) ; } } return com . IDENT_0 . IDENT_1 . IDENT_2 . INSTANCE ; }
org . junit . Assert . assertTrue ( true ) 