METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 . api . core . IDENT_2 p = new org . apache . IDENT_0 . IDENT_1 . api . core . METHOD_1 ( ) ; org . apache . IDENT_0 . IDENT_1 . api . IDENT_3 . IDENT_4 IDENT_5 = new org . apache . IDENT_0 . IDENT_1 . api . IDENT_3 . METHOD_2 ( p ) ; IDENT_5 . add ( METHOD_3 ( 1 , 1 ) ) ; IDENT_5 . add ( METHOD_3 ( 0 , 0 ) ) ; org . apache . IDENT_0 . IDENT_1 . validation . IDENT_6 . IDENT_7 IDENT_8 = new org . apache . IDENT_0 . IDENT_1 . validation . IDENT_6 . METHOD_4 ( ) ; IDENT_8 . METHOD_5 ( ) . METHOD_6 ( p ) ; java . util . Map < org . apache . IDENT_0 . IDENT_1 . api . port . IDENT_9 , java . lang . Integer > IDENT_10 = new java . util . HashMap < org . apache . IDENT_0 . IDENT_1 . api . port . IDENT_9 , java . lang . Integer > ( ) ; IDENT_10 . put ( a , 1 ) ; IDENT_10 . put ( b , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . util . Map ) { org . apache . IDENT_0 . IDENT_1 . api . core . METHOD_1 p = IDENT_11 . get ( ) . METHOD_8 ( ) ; org . apache . IDENT_0 . IDENT_1 . api . IDENT_3 . METHOD_2 IDENT_5 = p . METHOD_9 ( ) ; if ( IDENT_5 == null ) { IDENT_11 . get ( ) . METHOD_10 ( ) . METHOD_11 ( p ) ; IDENT_11 . get ( ) . METHOD_10 ( ) . METHOD_12 ( p ) ; return null ; } if ( IDENT_5 . isEmpty ( ) ) return 0 ; org . apache . IDENT_0 . IDENT_1 . api . IDENT_3 . IDENT_12 IDENT_13 = IDENT_5 . get ( 0 ) ; java . lang . Integer IDENT_14 = METHOD_13 ( IDENT_13 , IDENT_15 ) ; if ( IDENT_14 == null ) return null ; org . apache . IDENT_0 . IDENT_1 . api . IDENT_3 . IDENT_12 IDENT_16 = IDENT_13 ; for ( int index = 1 ; index < ( IDENT_5 . size ( ) ) ; index ++ ) { java . util . Map < org . apache . IDENT_0 . IDENT_1 . api . port . IDENT_9 , java . lang . Integer > IDENT_17 = METHOD_14 ( IDENT_16 ) ; IDENT_13 = IDENT_5 . get ( index ) ; java . lang . Integer IDENT_18 = METHOD_13 ( IDENT_13 , IDENT_17 ) ; if ( IDENT_18 == null ) return null ; IDENT_14 += IDENT_18 ; IDENT_16 = IDENT_13 ; } return IDENT_14 ; }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( 1 ) , IDENT_8 . METHOD_7 ( IDENT_10 ) ) 