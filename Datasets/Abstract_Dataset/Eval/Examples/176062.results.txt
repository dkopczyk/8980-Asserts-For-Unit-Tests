METHOD_0 ( ) { org . talend . IDENT_0 . cache . IDENT_1 key = new org . talend . IDENT_0 . cache . file . METHOD_1 ( STRING_0 ) ; java . lang . String content = STRING_1 ; METHOD_2 ( key , content , IDENT_2 . IDENT_3 . IDENT_4 ) ; final java . lang . String actual = org . apache . commons . io . IDENT_5 . toString ( cache . get ( key ) , java . nio . IDENT_6 . IDENT_7 . UTF_8 ) ; "<AssertPlaceHolder>" ; } get ( org . talend . IDENT_0 . cache . IDENT_1 ) { return METHOD_3 ( delegate . get ( key ) ) . map ( ( entry ) -> { try { return new java . util . IDENT_8 . METHOD_4 ( entry ) ; } catch ( e ) { try { entry . close ( ) ; } catch ( IDENT_9 ) { org . talend . IDENT_0 . cache . IDENT_10 . LOGGER . debug ( STRING_2 , org . talend . IDENT_0 . cache . e ) ; } return delegate . get ( key ) ; } catch ( e ) { throw new < org . talend . IDENT_0 . cache . e > org . talend . IDENT_0 . exception . METHOD_5 ( IDENT_11 . IDENT_12 ) ; } } ) . METHOD_6 ( null ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( content ) ) 