METHOD_0 ( ) { IDENT_0 = IDENT_1 . METHOD_1 ( getClass ( ) . getResourceAsStream ( org . apache . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ) , null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . net . URL , java . lang . String ) { java . net . IDENT_7 connection = url . METHOD_2 ( ) ; if ( ( IDENT_8 != null ) && ( ! ( IDENT_8 . isEmpty ( ) ) ) ) METHOD_3 ( IDENT_8 , connection ) ; else for ( java . lang . String IDENT_9 : METHOD_4 ( ) ) { METHOD_3 ( IDENT_9 , connection ) ; connection . METHOD_5 ( STRING_0 , STRING_1 ) ; } try ( java . io . InputStream IDENT_10 = connection . METHOD_6 ( ) ) { java . lang . String IDENT_11 = connection . METHOD_7 ( ) ; java . util . List < java . lang . String > IDENT_12 = java . util . Arrays . asList ( STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 ) ; if ( ( IDENT_11 == null ) || ( IDENT_11 . isEmpty ( ) ) ) IDENT_11 = IDENT_8 ; else for ( java . lang . String IDENT_13 : IDENT_12 ) if ( ( IDENT_11 != null ) && ( IDENT_11 . toLowerCase ( ) . startsWith ( IDENT_13 ) ) ) IDENT_11 = IDENT_8 ; return METHOD_1 ( url . METHOD_8 ( ) , IDENT_11 ) ; } }
org . junit . Assert . assertNotNull ( IDENT_0 ) 