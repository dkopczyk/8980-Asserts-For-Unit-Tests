METHOD_0 ( ) { java . io . File IDENT_0 = new java . io . File ( IDENT_1 , STRING_0 ) ; IDENT_0 . METHOD_1 ( ) ; boolean IDENT_2 = org . talend . commons . utils . resource . IDENT_3 . METHOD_2 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . File ) { if ( ( file != null ) && ( file . exists ( ) ) ) { if ( ( file . METHOD_3 ( ) ) && ( file . getName ( ) . METHOD_4 ( IDENT_4 . IDENT_5 ) ) ) { org . talend . commons . utils . resource . IDENT_6 status = new org . talend . commons . utils . resource . METHOD_5 ( file ) { java . lang . String IDENT_7 = null ; boolean IDENT_8 = false ; @ org . talend . commons . utils . resource . Override MOD_0 void METHOD_6 ( java . util . IDENT_9 . IDENT_10 IDENT_11 , java . util . IDENT_9 . IDENT_12 entry ) throws java . io . IOException { super . METHOD_6 ( IDENT_11 , entry ) ; java . lang . String path = entry . getName ( ) ; if ( path . METHOD_4 ( IDENT_4 . IDENT_13 ) ) { org . eclipse . core . runtime . IDENT_14 p = new org . eclipse . core . runtime . Path ( path ) ; if ( ( ( p . METHOD_7 ( ) ) > 1 ) && ( p . METHOD_8 ( 1 ) . METHOD_9 ( ) . equals ( org . talend . commons . utils . resource . IDENT_3 . IDENT_15 ) ) ) { java . io . InputStream IDENT_16 = IDENT_11 . METHOD_10 ( entry ) ; if ( org . talend . commons . utils . resource . IDENT_3 . METHOD_11 ( IDENT_16 ) ) { IDENT_8 = true ; IDENT_7 = path ; } } } } @ org . talend . commons . utils . resource . Override MOD_0 void METHOD_12 ( ) { super . METHOD_12 ( ) ; if ( IDENT_8 ) { org . eclipse . core . runtime . IDENT_14 IDENT_17 = new org . eclipse . core . runtime . Path ( IDENT_7 ) . METHOD_8 ( 1 ) ; org . eclipse . core . runtime . IDENT_14 IDENT_18 = new org . eclipse . core . runtime . Path ( IDENT_19 ) ; if ( ! ( IDENT_17 . equals ( IDENT_18 ) ) ) { IDENT_8 = false ; IDENT_20 = false ; IDENT_21 = false ; IDENT_22 = false ; } } else { IDENT_20 = false ; IDENT_21 = false ; IDENT_22 = false ; } } } ; status . METHOD_13 ( ) ; if ( ( ( status . IDENT_20 ) && ( status . IDENT_21 ) ) && ( status . IDENT_22 ) ) { return true ; } } else if ( file . METHOD_14 ( ) ) { if ( ( org . talend . commons . utils . resource . IDENT_3 . METHOD_15 ( file ) ) && ( org . talend . commons . utils . resource . IDENT_3 . METHOD_16 ( file ) ) ) { java . io . File IDENT_23 = new java . io . File ( file , org . talend . commons . utils . resource . IDENT_3 . IDENT_15 ) ; if ( ( IDENT_23 . exists ( ) ) && ( IDENT_23 . METHOD_14 ( ) ) ) { final java . io . File [ ] IDENT_24 = IDENT_23 . METHOD_17 ( ) ; if ( IDENT_24 != null ) { for ( java . io . File f : IDENT_24 ) { try { if ( ( f . getName ( ) . METHOD_4 ( IDENT_4 . IDENT_13 ) ) && ( org . talend . commons . utils . resource . IDENT_3 . METHOD_11 ( new java . io . METHOD_18 ( f ) ) ) ) { return true ; } } catch ( java . io . IDENT_25 e ) { return false ; } } } } } } } return false ; }
org . junit . Assert . assertFalse ( METHOD_2 ) 