METHOD_0 ( ) { java . util . Set < java . lang . String > IDENT_0 = IDENT_1 . list ( ) ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList < java . lang . String > ( ) ; org . talend . core . database . conn . version . IDENT_3 [ ] values = org . talend . core . database . conn . version . IDENT_3 . values ( ) ; for ( org . talend . core . database . conn . version . IDENT_3 driver : values ) { java . util . Set < java . lang . String > IDENT_4 = driver . METHOD_1 ( ) ; IDENT_2 . addAll ( IDENT_4 ) ; } java . util . Set < java . lang . String > IDENT_5 = new java . util . HashSet < java . lang . String > ( ) ; for ( java . lang . String IDENT_6 : IDENT_2 ) { boolean IDENT_7 = false ; for ( java . lang . String IDENT_8 : IDENT_0 ) { if ( IDENT_6 . equals ( IDENT_8 ) ) { IDENT_7 = true ; } } if ( ! IDENT_7 ) { IDENT_5 . add ( IDENT_6 ) ; } } if ( ( IDENT_5 . size ( ) ) > 0 ) { for ( java . lang . String IDENT_9 : IDENT_10 ) { if ( IDENT_5 . contains ( IDENT_9 ) ) { IDENT_5 . remove ( IDENT_9 ) ; } } } if ( ( IDENT_5 . size ( ) ) > 0 ) { java . lang . StringBuffer buffer = new java . lang . StringBuffer ( ) ; buffer . append ( STRING_0 ) ; for ( java . lang . String IDENT_11 : IDENT_5 ) { buffer . append ( ( IDENT_11 + "\n" ) ) ; } throw new java . lang . RuntimeException ( buffer . toString ( ) ) ; } "<AssertPlaceHolder>" ; } size ( ) { return list . size ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_5 . size ( ) ) == 0 ) ) 