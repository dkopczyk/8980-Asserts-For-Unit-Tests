METHOD_0 ( ) { java . lang . String result = org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . Long IDENT_4 = 0L ; try { IDENT_4 = java . lang . Long . METHOD_2 ( time ) ; } catch ( java . lang . IDENT_5 IDENT_6 ) { return "" ; } if ( IDENT_4 < 1000 ) { return IDENT_4 + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 ) ; } else { java . lang . Long IDENT_8 = IDENT_4 / 1000 ; java . lang . Long IDENT_9 = IDENT_4 OP_0 1000 ; if ( IDENT_8 < INT_0 ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( ( IDENT_8 + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 ) ) ) ; if ( IDENT_9 != 0 ) { sb . append ( ( ( ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_11 ) + IDENT_9 ) + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 ) ) ) ; } return sb . toString ( ) ; } else { java . lang . Long IDENT_12 = IDENT_8 / INT_0 ; java . lang . Long IDENT_13 = IDENT_8 OP_0 INT_0 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( ( IDENT_12 + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_14 ) ) ) ; if ( IDENT_13 != 0 ) { sb . append ( ( ( ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_11 ) + IDENT_13 ) + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 ) ) ) ; } if ( IDENT_9 != 0 ) { sb . append ( ( ( ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_11 ) + IDENT_9 ) + ( org . talend . IDENT_0 . core . ui . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 ) ) ) ; } return sb . toString ( ) ; } } }
org . junit . Assert . assertEquals ( result , "" ) 