METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( " " + STRING_1 ) + STRING_2 ) + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ) + STRING_12 ) + STRING_13 ) + STRING_14 ) + STRING_15 ) + STRING_16 ) + STRING_17 ) + STRING_18 ) + STRING_19 ) + STRING_20 ) + STRING_21 ) + STRING_22 ) + STRING_23 ) + STRING_24 ) + STRING_25 ) + STRING_26 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . talend . IDENT_1 . core . ui . IDENT_2 . nodes . Node , java . lang . String ) { org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . METHOD_2 ( false ) ; if ( sql == null ) { return false ; } sql = sql . replaceAll ( STRING_27 , " " ) ; sql = sql . replaceAll ( "\n" , " " ) ; sql = sql . trim ( ) ; if ( "" . equals ( sql ) ) { return false ; } java . util . regex . IDENT_4 IDENT_5 = java . util . regex . IDENT_4 . METHOD_3 ( org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . IDENT_6 , org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . IDENT_7 ) ; java . util . regex . IDENT_8 matcher = IDENT_5 . matcher ( sql ) ; if ( ! ( matcher . find ( ) ) ) { return true ; } matcher . METHOD_4 ( ) ; java . lang . String IDENT_9 = matcher . group ( 4 ) . trim ( ) ; if ( "" . equals ( IDENT_9 ) ) { return false ; } if ( STRING_28 . equals ( IDENT_9 ) ) { return true ; } boolean result = org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . METHOD_5 ( node , IDENT_9 ) ; if ( ! result ) { org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . METHOD_2 ( ( ! result ) ) ; } return result ; }
org . junit . Assert . assertFalse ( org . talend . IDENT_1 . core . ui . IDENT_2 . properties . IDENT_3 . METHOD_1 ( node , IDENT_0 ) ) 