METHOD_0 ( ) { java . util . IDENT_0 < java . lang . String , java . lang . String > IDENT_1 = new java . util . IDENT_2 < java . lang . String , java . lang . String > ( ) ; IDENT_1 . put ( org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_5 , org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_6 ) ; java . util . IDENT_0 < java . lang . String , java . lang . String > IDENT_7 = new java . util . IDENT_2 < java . lang . String , java . lang . String > ( ) ; IDENT_7 . put ( org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_8 , org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_9 ) ; org . talend . IDENT_3 . job . controller . internal . Configuration configuration = new org . talend . IDENT_3 . job . controller . internal . Configuration ( IDENT_1 ) ; configuration . METHOD_1 ( IDENT_7 ) ; java . lang . String [ ] IDENT_10 = new java . lang . String [ ] { ( ( STRING_0 + ( org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_8 ) ) + STRING_1 ) + ( org . talend . IDENT_3 . job . controller . internal . IDENT_4 . IDENT_9 ) } ; java . lang . String [ ] args = configuration . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { if ( IDENT_11 . METHOD_3 ( IDENT_12 , TimeUnit . IDENT_13 ) ) { return IDENT_14 . toArray ( new java . lang . String [ IDENT_14 . size ( ) ] ) ; } else { org . talend . IDENT_3 . job . controller . internal . Configuration . LOG . METHOD_4 ( STRING_2 ) ; return org . talend . IDENT_3 . job . controller . internal . Configuration . IDENT_15 ; } }
org . junit . Assert . assertArrayEquals ( IDENT_10 , args ) 