METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) ; IDENT_0 . add ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ; expect ( IDENT_5 . METHOD_2 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_6 ) ) . METHOD_3 ( IDENT_0 ) ; expect ( IDENT_5 . METHOD_4 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_6 , org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ) . METHOD_3 ( IDENT_7 ) ; expect ( IDENT_7 . METHOD_5 ( ) ) . METHOD_3 ( IDENT_8 . IDENT_9 ) ; METHOD_6 ( ) ; javax . xml . ws . IDENT_10 . IDENT_11 IDENT_12 ; javax . xml . ws . IDENT_10 . IDENT_11 IDENT_13 ; javax . xml . ws . IDENT_10 . IDENT_14 builder = new javax . xml . ws . IDENT_10 . METHOD_7 ( ) ; builder . address ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ; IDENT_13 = builder . build ( ) ; IDENT_12 = IDENT_15 . METHOD_8 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_6 . toString ( ) , new java . util . ArrayList < java . lang . String > ( ) ) ; "<AssertPlaceHolder>" ; } toString ( ) { if ( ( ( ( ( IDENT_16 ) == null ) || ( IDENT_16 . isEmpty ( ) ) ) || ( ( IDENT_17 ) == null ) ) || ( IDENT_17 . isEmpty ( ) ) ) { return STRING_0 ; } final java . lang . StringBuilder buf = new java . lang . StringBuilder ( STRING_1 ) ; buf . append ( IDENT_16 ) . append ( STRING_2 ) . append ( encode ( IDENT_17 ) ) ; if ( ! ( parameters . isEmpty ( ) ) ) { buf . append ( STRING_3 ) ; boolean IDENT_18 = false ; for ( java . util . Map . Entry < java . lang . String , java . lang . String > param : parameters . entrySet ( ) ) { if ( IDENT_18 ) { buf . append ( STRING_4 ) ; } else { IDENT_18 = true ; } buf . append ( encode ( param . getKey ( ) ) ) ; final java . lang . String value = param . getValue ( ) ; if ( ( value != null ) && ( ( value . length ( ) ) > 0 ) ) { buf . append ( STRING_5 ) . append ( encode ( value ) ) ; } } } return buf . toString ( ) ; }
org . junit . Assert . assertTrue ( IDENT_12 . toString ( ) . equals ( IDENT_13 . toString ( ) ) ) 