METHOD_0 ( ) { org . IDENT_0 . handler . events . IDENT_1 IDENT_2 = new org . IDENT_0 . handler . events . METHOD_1 ( new org . IDENT_0 . METHOD_2 ( ) ) ; org . IDENT_0 . model . IDENT_3 position = new org . IDENT_0 . model . METHOD_3 ( ) ; position . set ( METHOD_3 . IDENT_4 , true ) ; position . METHOD_4 ( true ) ; java . util . Map < org . IDENT_0 . model . IDENT_5 , org . IDENT_0 . model . METHOD_3 > events = IDENT_2 . METHOD_5 ( position ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . IDENT_0 . model . METHOD_3 ) { if ( ( ( IDENT_6 . METHOD_6 ( position . METHOD_7 ( ) ) ) == null ) || ( ! ( IDENT_6 . METHOD_8 ( position ) ) ) ) { return null ; } org . IDENT_0 . model . METHOD_3 IDENT_7 = IDENT_6 . METHOD_9 ( position . METHOD_7 ( ) ) ; if ( IDENT_7 == null ) { return null ; } java . util . Map < org . IDENT_0 . model . IDENT_5 , org . IDENT_0 . model . METHOD_3 > events = new java . util . HashMap ( ) ; for ( long IDENT_8 : IDENT_9 . METHOD_10 ( position . METHOD_7 ( ) ) ) { org . IDENT_0 . model . IDENT_10 IDENT_11 = IDENT_9 . METHOD_6 ( IDENT_8 ) ; if ( ( IDENT_11 . METHOD_11 ( ) ) != 0 ) { double IDENT_12 = IDENT_7 . METHOD_12 ( IDENT_11 . getType ( ) ) ; double IDENT_13 = position . METHOD_12 ( IDENT_11 . getType ( ) ) ; if ( ( ( IDENT_12 != 0.0 ) && ( IDENT_13 != 0.0 ) ) && ( ( ( long ) ( ( IDENT_12 - ( IDENT_11 . METHOD_13 ( ) ) ) / ( IDENT_11 . METHOD_11 ( ) ) ) ) < ( ( long ) ( ( IDENT_13 - ( IDENT_11 . METHOD_13 ( ) ) ) / ( IDENT_11 . METHOD_11 ( ) ) ) ) ) ) { org . IDENT_0 . model . IDENT_5 event = new org . IDENT_0 . model . METHOD_14 ( org . IDENT_0 . model . METHOD_14 . IDENT_14 , position . METHOD_7 ( ) , position . getId ( ) ) ; event . METHOD_15 ( IDENT_8 ) ; event . set ( IDENT_11 . getType ( ) , IDENT_13 ) ; events . put ( event , position ) ; } } } return events ; }
org . junit . Assert . assertNull ( events ) 