METHOD_0 ( ) { int IDENT_0 = 1000 ; org . mockito . IDENT_1 < java . lang . Integer > IDENT_2 = org . mockito . IDENT_1 . METHOD_1 ( io . github . IDENT_3 . IDENT_4 . IDENT_5 . Integer . class ) ; when ( IDENT_6 . METHOD_2 ( ) ) . thenReturn ( IDENT_0 ) ; io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_7 < io . github . IDENT_3 . IDENT_4 . api . message . payload . IDENT_8 > IDENT_5 = METHOD_3 ( ) ; IDENT_5 . METHOD_4 ( ) ; IDENT_5 . METHOD_5 ( ) ; verify ( IDENT_9 ) . METHOD_6 ( IDENT_2 . METHOD_7 ( ) , any ( ) ) ; "<AssertPlaceHolder>" . METHOD_8 ( INT_0 , IDENT_0 ) ; } METHOD_6 ( int , io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_7 ) { io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . LOG . debug ( STRING_0 , IDENT_5 . METHOD_9 ( ) . METHOD_10 ( ) , IDENT_0 ) ; if ( IDENT_0 <= 0 ) { io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . LOG . debug ( STRING_1 , IDENT_5 . METHOD_9 ( ) . METHOD_10 ( ) , IDENT_0 ) ; return null ; } try { return IDENT_11 . METHOD_11 ( ( ) -> { if ( IDENT_5 . METHOD_12 ( ) ) { io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . LOG . debug ( STRING_2 , IDENT_5 . METHOD_9 ( ) . METHOD_10 ( ) ) ; return ; } io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . LOG . debug ( STRING_3 , IDENT_5 . METHOD_9 ( ) . METHOD_10 ( ) ) ; IDENT_5 . end ( ) ; } , IDENT_0 , TimeUnit . IDENT_12 ) ; } catch ( java . util . concurrent . IDENT_13 e ) { io . github . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . LOG . warn ( STRING_4 , IDENT_5 . METHOD_9 ( ) . METHOD_10 ( ) , e ) ; return null ; } }
org . junit . Assert . assertThat ( IDENT_2 . getValue ( ) ) 