METHOD_0 ( ) { System . out . println ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_1 ) ) ; java . lang . String in = STRING_2 ; java . lang . String expected = STRING_2 ; java . lang . String out = com . IDENT_0 . iot . IDENT_1 . utils . IDENT_3 . METHOD_2 ( in ) ; try { "<AssertPlaceHolder>" ; System . out . println ( ( ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_3 ) + in ) + STRING_4 ) ) ; } catch ( java . lang . IDENT_4 e ) { System . out . println ( ( ( ( ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_5 ) + in ) + STRING_6 ) + out ) + STRING_7 ) ) ; throw e ; } METHOD_2 ( java . lang . String ) { java . lang . String out = "" ; for ( int i = 0 ; i < ( in . length ( ) ) ; i ++ ) { char c = in . charAt ( i ) ; int code = c ; if ( ( code >= INT_0 ) && ( code <= INT_1 ) ) { out += c ; } else if ( ( code >= INT_2 ) && ( code <= INT_3 ) ) { out += c ; } else if ( c == STRING_8 ) { java . lang . String IDENT_5 ; if ( ( i + 4 ) < ( in . length ( ) ) ) { IDENT_5 = in . substring ( ( i + 1 ) , ( i + 5 ) ) ; } else { IDENT_5 = STRING_9 ; } if ( IDENT_5 . matches ( STRING_10 ) ) { out += STRING_11 ; } else { out += c ; } } else if ( ( code == INT_4 ) || ( code == INT_5 ) ) { out += c ; } else if ( ( code >= INT_6 ) && ( code <= INT_7 ) ) { out += c ; } else if ( c == STRING_12 ) { out += c ; } else if ( c == STRING_13 ) { out += STRING_14 ; } else { java . lang . String IDENT_6 = java . lang . Integer . METHOD_3 ( code ) ; out += STRING_2 + ( ( STRING_15 + IDENT_6 ) . substring ( IDENT_6 . length ( ) ) ) ; } } return out ; }
org . junit . Assert . assertEquals ( expected , out ) 