METHOD_0 ( ) { System . out . println ( ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_1 ) + STRING_2 2 ) ) ; org . json . simple . JSONObject IDENT_3 = new org . json . simple . JSONObject ( ) ; IDENT_3 . put ( "name" , STRING_3 ) ; IDENT_3 . put ( STRING_2 1 , STRING_2 5 ) ; IDENT_3 . put ( "value" , STRING_4 ) ; org . json . simple . IDENT_4 IDENT_5 = new org . json . simple . METHOD_2 ( ) ; IDENT_5 . add ( IDENT_3 ) ; java . lang . String IDENT_6 = IDENT_5 . METHOD_3 ( ) ; java . lang . String IDENT_7 = STRING_5 ; java . lang . String IDENT_8 = STRING_2 3 ; boolean IDENT_9 = false ; org . apache . commons . lang3 . tuple . IDENT_10 < java . lang . String , java . lang . Boolean > geometry = com . IDENT_0 . iot . IDENT_1 . utils . IDENT_11 . METHOD_4 ( IDENT_7 , IDENT_8 , IDENT_6 , IDENT_9 ) ; try { "<AssertPlaceHolder>" ; System . out . println ( ( ( ( ( ( ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_2 4 ) + ( geometry . METHOD_5 ( ) ) ) + STRING_6 ) + IDENT_6 ) + STRING_7 ) + IDENT_7 ) + STRING_2 0 ) ) ; } catch ( java . lang . IDENT_12 e ) { System . out . println ( ( ( ( ( ( ( ( ( com . IDENT_0 . iot . IDENT_1 . utils . IDENT_2 . METHOD_1 ( STRING_0 ) ) + STRING_2 6 ) + ( geometry . METHOD_5 ( ) ) ) + STRING_6 ) + IDENT_6 ) + STRING_7 ) + IDENT_7 ) + STRING_2 0 ) ) ; throw e ; } METHOD_4 ( java . lang . String , java . lang . String , java . lang . String , boolean ) { if ( IDENT_8 . equals ( STRING_8 ) ) { java . lang . String [ ] split = IDENT_7 . split ( "value" 3 ) ; if ( IDENT_9 ) { return new org . apache . commons . lang3 . tuple . METHOD_6 ( ( ( ( ( STRING_9 + ( split [ 1 ] . trim ( ) ) ) + "value" 3 ) + ( split [ 0 ] . trim ( ) ) ) + STRING_10 ) , true ) ; } else { return new org . apache . commons . lang3 . tuple . METHOD_6 ( ( ( ( ( STRING_9 + ( split [ 0 ] . trim ( ) ) ) + "value" 3 ) + ( split [ 1 ] . trim ( ) ) ) + STRING_10 ) , true ) ; } } if ( IDENT_8 . equals ( "value" 2 ) ) { return new org . apache . commons . lang3 . tuple . METHOD_6 ( ( ( STRING_11 + IDENT_7 ) + STRING_12 ) , true ) ; } org . json . simple . parser . IDENT_13 parser = new org . json . simple . parser . METHOD_7 ( ) ; org . json . simple . METHOD_2 IDENT_14 ; try { IDENT_14 = ( ( org . json . simple . METHOD_2 ) ( parser . parse ( metadata ) ) ) ; } catch ( org . json . simple . parser . IDENT_15 e ) { com . IDENT_0 . iot . IDENT_1 . utils . IDENT_11 . LOGGER . error ( ( STRING_13 + ( e . getMessage ( ) ) ) ) ; return new org . apache . commons . lang3 . tuple . METHOD_6 ( IDENT_7 , false ) ; } for ( java . lang . Object IDENT_16 : IDENT_14 ) { org . json . simple . JSONObject IDENT_17 = ( ( org . json . simple . JSONObject ) ( IDENT_16 ) ) ; java . lang . String IDENT_18 = ( ( java . lang . String ) ( IDENT_17 . get ( "name" ) ) ) ; java . lang . String IDENT_19 = ( ( java . lang . String ) ( IDENT_17 . get ( "value" 0 ) ) ) ; java . lang . String IDENT_20 = ( ( java . lang . String ) ( IDENT_17 . get ( "value" ) ) ) ; if ( ( ( IDENT_18 . equals ( STRING_3 ) ) && ( IDENT_19 . equals ( "value" 1 ) ) ) && ( IDENT_20 . equals ( STRING_4 ) ) ) { java . lang . String [ ] split = IDENT_7 . split ( "value" 3 ) ; if ( IDENT_9 ) { return new org . apache . commons . lang3 . tuple . METHOD_6 ( ( ( ( ( STRING_9 + ( split [ 1 ] . trim ( ) ) ) + "value" 3 ) + ( split [ 0 ] . trim ( ) ) ) + STRING_10 ) , true ) ; } else { return new org . apache . commons . lang3 . tuple . METHOD_6 ( ( ( ( ( STRING_9 + ( split [ 0 ] . trim ( ) ) ) + "value" 3 ) + ( split [ 1 ] . trim ( ) ) ) + STRING_10 ) , true ) ; } } } return new org . apache . commons . lang3 . tuple . METHOD_6 ( IDENT_7 , false ) ; }
org . junit . Assert . assertEquals ( STRING_2 , geometry . METHOD_5 ( ) ) 