METHOD_0 ( ) { final org . apache . avro . Schema schema = org . apache . avro . IDENT_0 . record ( STRING_0 5 ) . METHOD_1 ( STRING_0 4 ) . fields ( ) . name ( STRING_1 ) . type ( ) . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( 0 ) . name ( STRING_2 ) . type ( ) . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_0 9 ) . name ( STRING_0 2 ) . type ( ) . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_0 9 ) . name ( STRING_3 ) . type ( ) . METHOD_2 ( ) . METHOD_7 ( ) . METHOD_8 ( false ) . name ( STRING_4 ) . type ( ) . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_0 9 ) . name ( STRING_5 ) . type ( ) . METHOD_2 ( ) . METHOD_9 ( ) . METHOD_10 ( STRING_0 9 ) . name ( STRING_0 1 ) . type ( ) . METHOD_2 ( ) . METHOD_11 ( ) . METHOD_12 ( 0 ) . name ( STRING_0 0 ) . type ( ) . METHOD_5 ( ) . METHOD_6 ( STRING_0 9 ) . METHOD_13 ( ) ; java . lang . String IDENT_1 = com . IDENT_2 . util . IDENT_3 . METHOD_14 ( schema ) ; java . lang . String expected = STRING_0 3 + ( ( ( ( ( ( STRING_6 + STRING_7 ) + STRING_0 7 ) + STRING_0 ) + STRING_8 ) + STRING_9 ) + STRING_0 8 ) ; "<AssertPlaceHolder>" ; } METHOD_14 ( org . apache . avro . Schema ) { if ( schema == null ) { return "" ; } final java . lang . String IDENT_4 = STRING_10 ; final java . lang . String description = "" ; final java . lang . String IDENT_5 = STRING_11 ; final java . lang . String IDENT_6 = STRING_11 ; final java . lang . String IDENT_7 = STRING_11 ; final java . lang . String IDENT_8 = "\n" ; java . lang . StringBuffer IDENT_9 = new java . lang . StringBuffer ( ) ; int IDENT_10 = schema . METHOD_15 ( ) . size ( ) ; int IDENT_11 = 1 ; for ( org . apache . avro . Schema . Field field : schema . METHOD_15 ( ) ) { java . lang . String name = field . name ( ) . toLowerCase ( ) ; java . lang . String IDENT_12 = field . schema ( ) . getType ( ) . name ( ) . toLowerCase ( ) ; if ( IDENT_12 . equals ( STRING_12 ) ) { for ( org . apache . avro . Schema IDENT_13 : field . schema ( ) . METHOD_16 ( ) ) { if ( ! ( IDENT_13 . getName ( ) . toLowerCase ( ) . equals ( STRING_13 ) ) ) { IDENT_12 = com . IDENT_2 . util . IDENT_3 . METHOD_17 ( IDENT_13 . getName ( ) . toLowerCase ( ) ) ; break ; } } if ( IDENT_12 . equals ( STRING_12 ) ) { IDENT_12 = STRING_14 ; } } else { IDENT_12 = com . IDENT_2 . util . IDENT_3 . METHOD_17 ( IDENT_12 ) ; } IDENT_9 . append ( name ) . append ( IDENT_4 ) . append ( IDENT_12 ) . append ( IDENT_4 ) . append ( description ) . append ( IDENT_4 ) . append ( IDENT_5 ) . append ( IDENT_4 ) . append ( IDENT_6 ) . append ( IDENT_4 ) . append ( IDENT_7 ) ; if ( ( IDENT_11 ++ ) < IDENT_10 ) { IDENT_9 . append ( IDENT_8 ) ; } } return IDENT_9 . toString ( ) ; }
org . junit . Assert . assertEquals ( STRING_0 6 , expected , IDENT_1 ) 