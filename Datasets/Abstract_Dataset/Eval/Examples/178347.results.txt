METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . util . List < com . IDENT_1 . policy . IDENT_2 > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( new com . IDENT_1 . policy . IDENT_4 . METHOD_1 ( STRING_1 , "bar" ) ) ; IDENT_3 . add ( new com . IDENT_1 . policy . validation . METHOD_2 ( STRING_2 ) ) ; IDENT_3 . add ( new com . IDENT_1 . policy . IDENT_4 . METHOD_1 ( STRING_3 , "test" ) ) ; IDENT_3 . add ( new com . IDENT_1 . policy . validation . METHOD_2 ( STRING_4 ) ) ; com . IDENT_1 . policy . IDENT_5 IDENT_6 = com . IDENT_1 . policy . IDENT_7 . METHOD_3 ( ) . METHOD_4 ( IDENT_3 ) . tableName ( STRING_5 ) . METHOD_5 ( METHOD_5 ) . METHOD_6 ( METHOD_5 ) . build ( ) ; com . IDENT_1 . spark . validation . IDENT_8 IDENT_9 = com . IDENT_1 . spark . validation . IDENT_8 . METHOD_7 ( METHOD_5 , STRING_6 ) ; com . IDENT_1 . spark . IDENT_10 . IDENT_11 result = validator . METHOD_8 ( IDENT_6 , null , IDENT_9 , new java . util . HashMap < java . lang . Class , java . lang . Class > ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( ) { com . IDENT_1 . policy . validation . IDENT_12 IDENT_13 = IDENT_14 . IDENT_15 ; if ( ( ( IDENT_16 ) == null ) || ( IDENT_16 . isEmpty ( ) ) ) { IDENT_13 = IDENT_14 . IDENT_15 ; } else { for ( com . IDENT_1 . policy . validation . IDENT_12 r : IDENT_16 ) { if ( r != ( IDENT_14 . IDENT_15 ) ) { IDENT_13 = r ; break ; } } } return IDENT_13 ; }
org . junit . Assert . assertEquals ( IDENT_14 . IDENT_15 , result . METHOD_9 ( ) ) 