METHOD_0 ( ) { float [ ] [ ] [ ] IDENT_0 = null ; IDENT_0 = parser . parse ( IDENT_1 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } parse ( java . util . List , IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) { final int IDENT_8 = length ( IDENT_9 ) ; final int IDENT_10 = IDENT_11 . IDENT_12 . size ( ) ; float [ ] [ ] [ ] IDENT_13 = new float [ IDENT_10 ] [ IDENT_8 ] [ IDENT_8 ] ; for ( int i = 0 ; i < IDENT_8 ; i ++ ) { for ( int j = 0 ; j < ( IDENT_11 . rules . size ( ) ) ; j ++ ) { IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 r = ( ( IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 ) ( IDENT_11 . rules . get ( j ) ) ) ; if ( r . METHOD_1 ( IDENT_9 . get ( i ) ) ) { int x = IDENT_11 . IDENT_12 . indexOf ( r . IDENT_15 . get ( 0 ) ) ; IDENT_13 [ x ] [ i ] [ 0 ] = r . IDENT_16 ; } } } for ( int length = 2 ; length <= IDENT_8 ; length ++ ) { for ( int start = 1 ; start <= ( ( IDENT_8 - length ) + 1 ) ; start ++ ) { for ( int IDENT_17 = 1 ; IDENT_17 <= ( length - 1 ) ; IDENT_17 ++ ) { int IDENT_18 = length - IDENT_17 ; for ( IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 r : IDENT_11 . rules ) { if ( ( r . IDENT_19 . size ( ) ) == 2 ) { int x = IDENT_11 . IDENT_12 . indexOf ( r . IDENT_15 . get ( 0 ) ) ; int y = IDENT_11 . IDENT_12 . indexOf ( r . IDENT_19 . get ( 0 ) ) ; int IDENT_20 = IDENT_11 . IDENT_12 . indexOf ( r . IDENT_19 . get ( 1 ) ) ; IDENT_13 [ x ] [ ( start - 1 ) ] [ ( length - 1 ) ] = java . lang . Math . max ( IDENT_13 [ x ] [ ( start - 1 ) ] [ ( length - 1 ) ] , ( ( ( IDENT_13 [ y ] [ ( start - 1 ) ] [ ( IDENT_17 - 1 ) ] ) * ( IDENT_13 [ IDENT_20 ] [ ( ( start + IDENT_17 ) - 1 ) ] [ ( IDENT_18 - 1 ) ] ) ) * ( r . IDENT_16 ) ) ) ; } } } } } return IDENT_13 ; }
org . junit . Assert . assertNotNull ( IDENT_0 ) 