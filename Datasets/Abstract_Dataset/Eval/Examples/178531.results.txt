METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 } ; for ( java . lang . String str : IDENT_0 ) { java . lang . String matcher = STRING_3 + ( org . IDENT_1 . IDENT_2 . web . el . IDENT_3 . METHOD_1 ( str ) ) ; java . util . Map < java . lang . String , java . lang . Object > map = new java . util . IDENT_4 < java . lang . String , java . lang . Object > ( ) ; map . put ( "name" , str ) ; java . lang . String actual = org . IDENT_1 . IDENT_2 . web . el . IDENT_3 . query ( map ) ; "<AssertPlaceHolder>" ; } } query ( java . lang . Object ) { if ( params == null ) { return "" ; } java . lang . Class < ? > clazz = params . getClass ( ) ; if ( org . springframework . beans . IDENT_5 . METHOD_2 ( clazz ) ) { return "" ; } return org . IDENT_1 . IDENT_2 . web . el . IDENT_3 . METHOD_3 ( org . IDENT_1 . IDENT_2 . web . el . IDENT_3 . IDENT_6 . convert ( params ) ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( matcher ) ) 