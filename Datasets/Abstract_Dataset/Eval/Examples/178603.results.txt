METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 IDENT_3 = mock ( org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 . class ) ; org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 IDENT_4 = mock ( org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 . class ) ; when ( IDENT_3 . value ( ) ) . thenReturn ( "test" ) ; when ( IDENT_4 . value ( ) ) . thenReturn ( "test" ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 , org . IDENT_0 . IDENT_1 . web . token . transaction . IDENT_2 ) { java . lang . String IDENT_5 = IDENT_3 . value ( ) ; java . lang . String IDENT_6 = ( IDENT_4 == null ) ? "" : IDENT_4 . value ( ) ; java . lang . StringBuilder IDENT_7 = new java . lang . StringBuilder ( ) ; if ( ( IDENT_6 != null ) && ( ! ( IDENT_6 . isEmpty ( ) ) ) ) { IDENT_7 . append ( IDENT_6 ) ; } if ( ( IDENT_5 != null ) && ( ! ( IDENT_5 . isEmpty ( ) ) ) ) { if ( ( IDENT_7 . length ( ) ) != 0 ) { IDENT_7 . append ( "/" ) ; } IDENT_7 . append ( IDENT_5 ) ; } if ( ( IDENT_7 . length ( ) ) == 0 ) { IDENT_7 . append ( IDENT_8 ) ; } return IDENT_7 . toString ( ) ; }
org . junit . Assert . assertNotNull ( store . METHOD_1 ( IDENT_4 , IDENT_3 ) ) 