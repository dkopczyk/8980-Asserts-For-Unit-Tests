METHOD_0 ( ) { java . nio . IDENT_0 . IDENT_1 IDENT_2 = METHOD_1 ( java . nio . IDENT_0 . IDENT_1 . class ) ; org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 source = new org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_8 ) { @ org . IDENT_3 . IDENT_4 . IDENT_5 . storage . Override public java . nio . IDENT_0 . IDENT_1 METHOD_3 ( ) { return IDENT_2 ; } } ; org . IDENT_3 . IDENT_4 . IDENT_5 . storage . IDENT_9 < byte [ ] , byte [ ] > engine = new org . IDENT_3 . IDENT_4 . IDENT_5 . storage . METHOD_4 ( source , Long . MAX_VALUE , org . IDENT_3 . IDENT_4 . util . IDENT_10 . IDENT_11 , org . IDENT_3 . IDENT_4 . IDENT_5 . storage . IDENT_12 . IDENT_13 . INSTANCE , org . IDENT_3 . IDENT_4 . IDENT_5 . storage . IDENT_12 . IDENT_13 . INSTANCE ) ; when ( IDENT_2 . read ( METHOD_5 ( ) , METHOD_6 ( ) ) ) . METHOD_7 ( ( o ) -> { engine . close ( ) ; throw new java . nio . IDENT_0 . METHOD_8 ( ) ; } ) ; try { byte [ ] buffer = new byte [ 10 ] ; long p = engine . METHOD_9 ( new byte [ 0 ] , buffer , 0 , 0 ) ; "<AssertPlaceHolder>" ; engine . METHOD_10 ( ) ; engine . METHOD_11 ( 0 ) ; } catch ( java . lang . Throwable e ) { java . lang . Throwable IDENT_14 = e ; while ( ( IDENT_14 . METHOD_12 ( ) ) != null ) { IDENT_14 = IDENT_14 . METHOD_12 ( ) ; } throw IDENT_14 ; } finally { source . close ( ) ; } } METHOD_9 ( IDENT_15 , IDENT_16 , int , int ) { java . lang . Integer IDENT_17 = IDENT_18 . write ( key , hash ) ; if ( IDENT_17 == null ) { return null ; } java . lang . Integer IDENT_19 = IDENT_20 . write ( value , hash ) ; if ( IDENT_19 == null ) { IDENT_18 . METHOD_13 ( IDENT_17 ) ; return null ; } return org . IDENT_3 . IDENT_4 . storage . IDENT_21 . METHOD_14 ( IDENT_17 , IDENT_19 ) ; }
org . junit . Assert . assertTrue ( ( p >= 0 ) ) 