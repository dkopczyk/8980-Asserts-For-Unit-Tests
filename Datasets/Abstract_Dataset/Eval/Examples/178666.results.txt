METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 source = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( new org . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_2 ( ) , org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_3 ( INT_0 ) , org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_3 ( INT_0 ) ) ; org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_7 < java . lang . Integer , byte [ ] > cache = METHOD_4 ( source ) ; int IDENT_8 = 0 ; for ( ; ( cache . size ( ) ) == IDENT_8 ; IDENT_8 ++ ) { if ( ( IDENT_8 & 1 ) == 0 ) { cache . METHOD_5 ( IDENT_8 , new byte [ ] { ( ( byte ) ( IDENT_8 ) ) } ) ; } else { cache . put ( IDENT_8 , new byte [ ] { ( ( byte ) ( IDENT_8 ) ) } ) ; } } for ( int i = IDENT_8 + 1 ; i < ( 10 * IDENT_8 ) ; i ++ ) { cache . put ( i , new byte [ ] { ( ( byte ) ( i ) ) } ) ; } for ( int i = 0 ; i < IDENT_8 ; i += 2 ) { "<AssertPlaceHolder>" ; } } containsKey ( java . lang . Object ) { return METHOD_6 ( key ) . containsKey ( key ) ; }
org . junit . Assert . assertTrue ( cache . containsKey ( i ) ) 