METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( new java . util . ArrayList ( java . util . Arrays . asList ( STRING_0 ) ) ) ; IDENT_6 . METHOD_3 ( ) ; java . lang . String text = STRING_1 ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . IDENT_7 > IDENT_8 = IDENT_6 . METHOD_4 ( text ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . IDENT_7 > IDENT_9 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . ArrayList ( ) ; if ( ( text == null ) || ( text . isEmpty ( ) ) ) return IDENT_9 ; if ( IDENT_10 ) { text = text . toLowerCase ( ) ; } edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_11 IDENT_12 = this . IDENT_13 ; char [ ] IDENT_14 = text . METHOD_5 ( ) ; for ( int i = 0 ; i < ( IDENT_14 . length ) ; i ++ ) { java . lang . IDENT_15 IDENT_16 = IDENT_14 [ i ] ; IDENT_12 = METHOD_6 ( IDENT_16 , IDENT_12 ) ; if ( ! ( IDENT_12 . METHOD_7 ( ) . isEmpty ( ) ) ) { IDENT_9 . addAll ( METHOD_8 ( IDENT_12 , i ) ) ; } } return IDENT_9 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_8 . size ( ) ) == 2 ) ) 