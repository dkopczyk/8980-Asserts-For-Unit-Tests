METHOD_0 ( ) { java . lang . String query = "" ; java . util . ArrayList < java . lang . String > IDENT_0 = new java . util . ArrayList ( ) ; IDENT_0 . add ( IDENT_1 . IDENT_2 ) ; IDENT_0 . add ( IDENT_1 . IDENT_3 ) ; IDENT_0 . add ( IDENT_1 . IDENT_4 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . IDENT_9 > list = new java . util . ArrayList ( ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . IDENT_9 IDENT_8 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . METHOD_1 ( STRING_0 , 0 , 4 , "" , "" , 0 ) ; list . add ( IDENT_8 ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_10 [ ] IDENT_11 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_10 [ ( IDENT_1 . IDENT_12 . length ) + 1 ] ; for ( int count = 0 ; count < ( ( IDENT_11 . length ) - 1 ) ; count ++ ) { IDENT_11 [ count ] = edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_13 . test . IDENT_1 . IDENT_12 [ count ] ; } IDENT_11 [ ( ( IDENT_11 . length ) - 1 ) ] = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . METHOD_2 ( edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 , edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_18 . IDENT_19 ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_20 [ ] IDENT_21 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_20 [ ] { new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_4 ( INT_0 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_5 ( FLOAT_0 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_6 ( new java . text . METHOD_7 ( STRING_1 ) . parse ( STRING_2 ) ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_8 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_9 ( list ) } ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_20 [ ] IDENT_22 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_20 [ ] { new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" 0 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_4 ( INT_1 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_5 ( FLOAT_1 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_6 ( new java . text . METHOD_7 ( STRING_1 ) . parse ( STRING_3 ) ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_8 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_9 ( list ) } ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . IDENT_23 IDENT_24 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 ( new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . Schema ( IDENT_11 ) , IDENT_21 ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 IDENT_25 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 ( new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . Schema ( IDENT_11 ) , IDENT_22 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 > IDENT_26 = new java . util . ArrayList ( ) ; IDENT_26 . add ( IDENT_24 ) ; IDENT_26 . add ( IDENT_25 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 > IDENT_27 = edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_14 . IDENT_15 . IDENT_28 . METHOD_11 ( edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_29 , query , IDENT_0 , edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_30 , Integer . MAX_VALUE , 0 ) ; boolean contains = edu . IDENT_5 . IDENT_6 . IDENT_7 . api . utils . TestUtils . equals ( IDENT_26 , IDENT_27 ) ; "<AssertPlaceHolder>" ; } equals ( java . util . List , java . util . List ) { IDENT_31 = METHOD_10 . Builder . METHOD_12 ( IDENT_31 , IDENT_32 . IDENT_33 , IDENT_32 . IDENT_34 ) ; IDENT_35 = METHOD_10 . Builder . METHOD_12 ( IDENT_35 , IDENT_32 . IDENT_33 , IDENT_32 . IDENT_34 ) ; if ( ( IDENT_31 . size ( ) ) != ( IDENT_35 . size ( ) ) ) return false ; return ( IDENT_31 . METHOD_13 ( IDENT_35 ) ) && ( IDENT_35 . METHOD_13 ( IDENT_31 ) ) ; }
org . junit . Assert . assertTrue ( contains ) 