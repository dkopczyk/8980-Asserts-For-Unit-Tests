METHOD_0 ( ) { java . lang . String query = "" ; java . util . ArrayList < java . lang . String > IDENT_0 = new java . util . ArrayList ( ) ; IDENT_0 . add ( IDENT_1 . IDENT_2 ) ; IDENT_0 . add ( IDENT_1 . IDENT_3 ) ; IDENT_0 . add ( IDENT_1 . IDENT_4 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . IDENT_9 > list = new java . util . ArrayList ( ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . IDENT_9 IDENT_10 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . METHOD_1 ( STRING_0 , 0 , 2 , "" , "" ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . METHOD_1 IDENT_11 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . METHOD_1 ( STRING_1 , 3 , 5 , "" , "" , 2 ) ; list . add ( IDENT_10 ) ; list . add ( IDENT_11 ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_12 [ ] IDENT_13 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_12 [ ( IDENT_14 . IDENT_15 . length ) + 1 ] ; for ( int count = 0 ; count < ( ( IDENT_13 . length ) - 1 ) ; count ++ ) { IDENT_13 [ count ] = edu . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_16 . test . IDENT_14 . IDENT_15 [ count ] ; } IDENT_13 [ ( ( IDENT_13 . length ) - 1 ) ] = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . METHOD_2 ( edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_20 , edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . IDENT_21 . IDENT_22 ) ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_23 [ ] IDENT_24 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . IDENT_23 [ ] { new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_3 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_4 ( INT_0 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_5 ( FLOAT_0 ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_6 ( new java . text . METHOD_7 ( STRING_2 ) . parse ( STRING_3 ) ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_8 ( "" ) , new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . field . METHOD_9 ( list ) } ; edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . IDENT_25 IDENT_26 = new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 ( new edu . IDENT_5 . IDENT_6 . IDENT_7 . api . schema . Schema ( IDENT_13 ) , IDENT_24 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 > IDENT_27 = new java . util . ArrayList ( ) ; IDENT_27 . add ( IDENT_26 ) ; java . util . List < edu . IDENT_5 . IDENT_6 . IDENT_7 . api . tuple . METHOD_10 > IDENT_28 = edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_17 . IDENT_18 . IDENT_29 . METHOD_11 ( edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_30 , query , IDENT_0 , edu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_31 , Integer . MAX_VALUE , 0 ) ; boolean contains = edu . IDENT_5 . IDENT_6 . IDENT_7 . api . utils . TestUtils . equals ( IDENT_27 , IDENT_28 ) ; "<AssertPlaceHolder>" ; } equals ( java . util . List , java . util . List ) { IDENT_32 = METHOD_10 . Builder . METHOD_12 ( IDENT_32 , IDENT_33 . IDENT_34 , IDENT_33 . IDENT_35 ) ; IDENT_36 = METHOD_10 . Builder . METHOD_12 ( IDENT_36 , IDENT_33 . IDENT_34 , IDENT_33 . IDENT_35 ) ; if ( ( IDENT_32 . size ( ) ) != ( IDENT_36 . size ( ) ) ) return false ; return ( IDENT_32 . METHOD_13 ( IDENT_36 ) ) && ( IDENT_36 . METHOD_13 ( IDENT_32 ) ) ; }
org . junit . Assert . assertTrue ( contains ) 