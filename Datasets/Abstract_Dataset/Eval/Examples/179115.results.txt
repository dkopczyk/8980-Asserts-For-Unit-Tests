METHOD_0 ( ) { java . lang . String query = STRING_0 ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . IDENT_3 > IDENT_4 = edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_1 ( edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 . IDENT_8 . IDENT_9 , query , java . util . Arrays . asList ( IDENT_10 . IDENT_11 ) ) ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . IDENT_3 > IDENT_12 = new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . IDENT_3 > ( ) ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . IDENT_3 > data = edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_13 . test . IDENT_10 . METHOD_2 ( ) ; edu . IDENT_0 . IDENT_1 . IDENT_2 . api . schema . Schema IDENT_14 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . schema . Schema . Builder ( ) . add ( IDENT_10 . IDENT_15 ) . add ( edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 . IDENT_8 . IDENT_16 , IDENT_17 . IDENT_18 ) . build ( ) ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . IDENT_20 > IDENT_21 = new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . IDENT_20 > ( ) ; IDENT_21 . add ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 ( edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_13 . test . IDENT_10 . IDENT_11 , INT_0 , INT_1 , query , STRING_1 ) ) ; edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 IDENT_23 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_24 < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 > ( new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 > ( IDENT_21 ) ) ; java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 > fields = new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 > ( data . get ( 2 ) . METHOD_4 ( ) ) ; fields . add ( IDENT_23 ) ; IDENT_12 . add ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . METHOD_5 ( IDENT_14 , fields . toArray ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 [ fields . size ( ) ] ) ) ) ; IDENT_21 . METHOD_6 ( ) ; IDENT_21 . add ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 ( edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_13 . test . IDENT_10 . IDENT_11 , 0 , 6 , query , STRING_2 ) ) ; IDENT_23 = new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_24 < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 > ( new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . IDENT_19 . METHOD_3 > ( IDENT_21 ) ) ; fields = new java . util . ArrayList < edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 > ( data . get ( 3 ) . METHOD_4 ( ) ) ; fields . add ( IDENT_23 ) ; IDENT_12 . add ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . tuple . METHOD_5 ( IDENT_14 , fields . toArray ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . api . field . IDENT_22 [ fields . size ( ) ] ) ) ) ; "<AssertPlaceHolder>" ; } equals ( java . util . List , java . util . List ) { IDENT_12 = METHOD_5 . Builder . METHOD_7 ( IDENT_12 , IDENT_25 . IDENT_26 , IDENT_25 . IDENT_27 ) ; IDENT_4 = METHOD_5 . Builder . METHOD_7 ( IDENT_4 , IDENT_25 . IDENT_26 , IDENT_25 . IDENT_27 ) ; if ( ( IDENT_12 . size ( ) ) != ( IDENT_4 . size ( ) ) ) return false ; return ( IDENT_12 . METHOD_8 ( IDENT_4 ) ) && ( IDENT_4 . METHOD_8 ( IDENT_12 ) ) ; }
org . junit . Assert . assertTrue ( edu . IDENT_0 . IDENT_1 . IDENT_2 . api . utils . TestUtils . equals ( IDENT_12 , IDENT_4 ) ) 