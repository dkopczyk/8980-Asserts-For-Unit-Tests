METHOD_0 ( ) { java . lang . String query = STRING_0 ; java . lang . String IDENT_0 = STRING_1 ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . IDENT_4 > IDENT_5 = edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_1 ( edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_9 . IDENT_10 . IDENT_11 , query , IDENT_0 , java . util . Arrays . asList ( IDENT_12 . IDENT_13 ) , "name" , false , Integer . MAX_VALUE , 0 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . IDENT_4 > IDENT_14 = new java . util . ArrayList ( ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . IDENT_4 > data = edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_15 . test . IDENT_12 . METHOD_2 ( ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . Schema IDENT_16 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . Schema . Builder ( ) . add ( IDENT_12 . IDENT_17 ) . add ( edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_9 . IDENT_10 . IDENT_18 , IDENT_19 . IDENT_20 ) . build ( ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_21 . IDENT_22 > IDENT_23 = new java . util . ArrayList ( ) ; IDENT_23 . add ( new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_21 . METHOD_3 ( edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_15 . test . IDENT_12 . IDENT_13 , 0 , INT_0 , query , STRING_1 ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_24 IDENT_25 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_4 ( new java . util . ArrayList ( IDENT_23 ) ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_24 > fields = new java . util . ArrayList ( data . get ( 3 ) . METHOD_5 ( ) ) ; fields . add ( IDENT_25 ) ; IDENT_14 . add ( new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_6 ( IDENT_16 , fields . toArray ( new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_24 [ fields . size ( ) ] ) ) ) ; java . util . List < java . lang . String > IDENT_26 = new java . util . ArrayList ( ) ; IDENT_26 . add ( edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_9 . IDENT_10 . IDENT_18 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . util . List , java . util . List , java . util . List ) { if ( ( IDENT_14 . size ( ) ) != ( IDENT_5 . size ( ) ) ) return false ; if ( ( IDENT_5 . size ( ) ) == 0 ) return true ; java . util . List < java . lang . String > IDENT_27 = new java . util . ArrayList ( IDENT_14 . get ( 0 ) . METHOD_8 ( ) . METHOD_9 ( ) ) ; IDENT_27 . METHOD_10 ( IDENT_26 ) ; java . lang . String [ ] IDENT_28 = IDENT_27 . toArray ( new java . lang . String [ IDENT_27 . size ( ) ] ) ; IDENT_14 = METHOD_6 . Builder . METHOD_11 ( IDENT_14 , IDENT_28 ) ; java . util . List < java . lang . String > IDENT_29 = new java . util . ArrayList ( IDENT_5 . get ( 0 ) . METHOD_8 ( ) . METHOD_9 ( ) ) ; IDENT_29 . METHOD_10 ( IDENT_26 ) ; java . lang . String [ ] IDENT_30 = IDENT_29 . toArray ( new java . lang . String [ IDENT_29 . size ( ) ] ) ; IDENT_5 = METHOD_6 . Builder . METHOD_11 ( IDENT_5 , IDENT_30 ) ; return ( IDENT_14 . METHOD_12 ( IDENT_5 ) ) && ( IDENT_5 . METHOD_12 ( IDENT_14 ) ) ; }
org . junit . Assert . assertTrue ( edu . IDENT_1 . IDENT_2 . IDENT_3 . api . utils . TestUtils . METHOD_7 ( IDENT_14 , IDENT_5 , IDENT_26 ) ) 