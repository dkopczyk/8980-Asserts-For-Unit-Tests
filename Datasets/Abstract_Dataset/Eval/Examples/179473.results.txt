METHOD_0 ( ) { METHOD_1 ( IDENT_0 . METHOD_2 ( ) , STRING_0 ) ; java . util . List < org . IDENT_1 . server . common . data . IDENT_2 . IDENT_3 > IDENT_4 = METHOD_3 ( STRING_1 , new com . fasterxml . jackson . core . type . IDENT_5 < java . util . List < org . IDENT_1 . server . common . data . IDENT_2 . IDENT_3 > > ( ) { } ) ; java . util . List < org . IDENT_1 . server . common . data . IDENT_2 . IDENT_3 > IDENT_6 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { org . IDENT_1 . server . common . data . IDENT_2 . IDENT_3 IDENT_7 = new org . IDENT_1 . server . common . data . IDENT_2 . METHOD_4 ( ) ; IDENT_7 . METHOD_5 ( ( STRING_2 + i ) ) ; IDENT_6 . add ( METHOD_6 ( STRING_3 , IDENT_7 , org . IDENT_1 . server . common . data . IDENT_2 . METHOD_4 . class ) ) ; } IDENT_6 . addAll ( IDENT_4 ) ; java . util . List < org . IDENT_1 . server . common . data . IDENT_2 . METHOD_4 > IDENT_8 = new java . util . ArrayList ( ) ; org . IDENT_1 . server . common . data . page . IDENT_9 IDENT_10 = new org . IDENT_1 . server . common . data . page . METHOD_7 ( INT_1 ) ; org . IDENT_1 . server . common . data . page . IDENT_11 < org . IDENT_1 . server . common . data . IDENT_2 . METHOD_4 > IDENT_12 ; do { IDENT_12 = METHOD_8 ( STRING_1 , new com . fasterxml . jackson . core . type . IDENT_5 < org . IDENT_1 . server . common . data . page . IDENT_11 < org . IDENT_1 . server . common . data . IDENT_2 . METHOD_4 > > ( ) { } , IDENT_10 ) ; IDENT_8 . addAll ( IDENT_12 . METHOD_9 ( ) ) ; if ( IDENT_12 . hasNext ( ) ) { IDENT_10 = IDENT_12 . METHOD_10 ( ) ; } } while ( IDENT_12 . hasNext ( ) ) ; java . util . Collections . METHOD_11 ( IDENT_6 , IDENT_13 ) ; java . util . Collections . METHOD_11 ( IDENT_8 , IDENT_13 ) ; "<AssertPlaceHolder>" ; } hasNext ( ) { return hasNext ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_8 ) 