METHOD_0 ( ) { final int IDENT_0 = 1000 ; final org . IDENT_1 . IDENT_2 . IDENT_3 client = IDENT_4 . METHOD_1 ( STRING_0 , port ) ; client . connect ( ) ; new org . IDENT_1 . test . concurrent . METHOD_2 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_5 . Override public boolean get ( ) { return ( IDENT_6 . METHOD_3 ( ) ) == 1 ; } } . METHOD_4 ( INT_0 ) ; final org . IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = IDENT_6 . METHOD_5 ( 0 ) ; final java . io . InputStream is = new org . IDENT_1 . IDENT_2 . utils . IDENT_8 . METHOD_6 ( client ) ; final java . io . IDENT_9 IDENT_10 = new org . IDENT_1 . IDENT_2 . utils . IDENT_8 . METHOD_7 ( IDENT_7 ) ; final org . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 IDENT_13 = new org . IDENT_1 . IDENT_2 . IDENT_11 . METHOD_8 ( ) ; IDENT_14 . execute ( new java . lang . METHOD_9 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_5 . Override public void run ( ) { int len = 0 ; while ( len >= 0 ) { try { byte [ ] IDENT_15 = new byte [ ( org . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_16 . IDENT_17 . METHOD_10 ( ) ) * ( IDENT_0 / 4 ) ] ; len = is . read ( IDENT_15 ) ; if ( len > 0 ) { java . nio . ByteBuffer IDENT_18 = java . nio . ByteBuffer . METHOD_11 ( IDENT_15 ) ; IDENT_18 . METHOD_12 ( len ) ; IDENT_13 . add ( IDENT_18 ) ; } } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } } } } ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_10 . write ( org . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_16 . IDENT_17 . array ( ) ) ; } new org . IDENT_1 . test . concurrent . METHOD_2 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_5 . Override public boolean get ( ) { return ( IDENT_13 . METHOD_10 ( ) ) == ( ( org . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_16 . IDENT_17 . METHOD_10 ( ) ) * IDENT_0 ) ; } } . METHOD_4 ( INT_0 ) ; client . close ( ) ; int len = is . read ( ) ; "<AssertPlaceHolder>" ; org . IDENT_1 . IDENT_2 . utils . IDENT_8 . METHOD_13 ( is ) ; org . IDENT_1 . IDENT_2 . utils . IDENT_8 . METHOD_13 ( IDENT_10 ) ; } read ( ) { if ( IDENT_19 ) { return - 1 ; } MOD_0 ( IDENT_20 ) { while ( true ) { if ( ( IDENT_20 . METHOD_10 ( ) ) > 0 ) { return ( IDENT_20 . get ( ) ) & ( org . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . IDENT_21 ) ; } else { org . IDENT_1 . IDENT_2 . IDENT_11 . METHOD_8 IDENT_13 = c . METHOD_14 ( ) ; if ( IDENT_13 . METHOD_15 ( ) ) { IDENT_20 . add ( IDENT_13 ) ; } else if ( IDENT_19 ) { return - 1 ; } else { try { IDENT_20 . METHOD_16 ( 1000 ) ; } catch ( java . lang . IDENT_22 e ) { java . lang . Thread . METHOD_17 ( ) . METHOD_18 ( ) ; org . IDENT_1 . util . IDENT_23 . METHOD_19 ( e ) ; } } } } } }
org . junit . Assert . assertEquals ( ( - 1 ) , len ) 