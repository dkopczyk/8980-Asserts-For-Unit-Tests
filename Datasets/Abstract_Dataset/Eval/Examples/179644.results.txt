METHOD_0 ( ) { final int IDENT_0 = 10 ; final int IDENT_1 = INT_0 ; final int IDENT_2 = INT_1 ; final int IDENT_3 = 20 ; long now = org . IDENT_4 . concurrent . IDENT_5 . METHOD_1 ( ) ; now += TimeUnit . IDENT_6 . METHOD_2 ( IDENT_2 ) ; now += TimeUnit . IDENT_7 . METHOD_2 ( IDENT_0 ) ; long result = org . IDENT_4 . concurrent . IDENT_8 . METHOD_3 ( now , IDENT_3 , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( long , int , int ) { long IDENT_9 = TimeUnit . IDENT_7 . METHOD_2 ( IDENT_10 ) ; long IDENT_2 = TimeUnit . IDENT_11 . METHOD_4 ( ( now OP_0 ( TimeUnit . IDENT_12 . METHOD_2 ( 1 ) ) ) ) ; if ( IDENT_13 > IDENT_2 ) { IDENT_9 += TimeUnit . IDENT_6 . METHOD_2 ( ( IDENT_13 - IDENT_2 ) ) ; } else if ( IDENT_13 < IDENT_2 ) { IDENT_9 += TimeUnit . IDENT_6 . METHOD_2 ( ( ( ( TimeUnit . IDENT_12 . METHOD_4 ( 1 ) ) - IDENT_2 ) + IDENT_13 ) ) ; } else { long result = org . IDENT_4 . concurrent . IDENT_8 . METHOD_5 ( org . IDENT_4 . util . IDENT_14 . METHOD_6 ( ) , IDENT_10 ) ; if ( ( TimeUnit . IDENT_11 . METHOD_7 ( result ) ) <= IDENT_10 ) { return result ; } else { return result + ( TimeUnit . IDENT_6 . METHOD_2 ( ( ( TimeUnit . IDENT_12 . METHOD_4 ( 1 ) ) - 1 ) ) ) ; } } long offset = now OP_0 ( TimeUnit . IDENT_6 . METHOD_2 ( 1 ) ) ; return IDENT_9 - offset ; }
org . junit . Assert . assertEquals ( ( ( ( TimeUnit . IDENT_6 . METHOD_2 ( ( IDENT_3 - IDENT_2 ) ) ) + ( TimeUnit . IDENT_7 . METHOD_2 ( IDENT_1 ) ) ) - ( TimeUnit . IDENT_7 . METHOD_2 ( IDENT_0 ) ) ) , result ) 