METHOD_0 ( ) { int IDENT_0 = ( IDENT_1 ) / 2 ; java . util . List < org . IDENT_2 . concurrent . future . IDENT_3 < ? > > IDENT_4 = org . IDENT_2 . concurrent . future . IDENT_5 . METHOD_1 ( org . IDENT_2 . concurrent . future . IDENT_1 , IDENT_0 ) ; org . IDENT_2 . concurrent . future . IDENT_6 . METHOD_2 ( IDENT_4 , ( 1000 * 10 ) ) ; java . util . Iterator < org . IDENT_2 . concurrent . future . IDENT_3 < ? > > it = IDENT_4 . iterator ( ) ; for ( int i = 0 ; i <= IDENT_0 ; i ++ ) { java . util . concurrent . IDENT_7 < ? > f = it . next ( ) ; if ( i < IDENT_0 ) { "<AssertPlaceHolder>" ; } else if ( i == IDENT_0 ) { try { f . get ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . util . concurrent . IDENT_8 e ) { } } } } METHOD_3 ( ) { return true ; }
org . junit . Assert . assertTrue ( f . METHOD_3 ( ) ) 