METHOD_0 ( ) { java . util . List < org . IDENT_0 . concurrent . future . IDENT_1 < java . lang . Boolean > > IDENT_2 = new java . util . ArrayList ( ( ( IDENT_3 ) * 2 ) ) ; for ( int i = 0 ; i < ( ( IDENT_3 ) * 2 ) ; i ++ ) { IDENT_2 . add ( org . IDENT_0 . concurrent . future . IDENT_4 . METHOD_1 ( ( ( i OP_0 2 ) == 1 ) ) ) ; } "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . IDENT_5 , T , long ) { if ( IDENT_2 == null ) { return 0 ; } int IDENT_6 = 0 ; long IDENT_7 = org . IDENT_0 . util . IDENT_8 . METHOD_3 ( ) ; long IDENT_9 ; for ( java . util . concurrent . IDENT_10 < ? > f : IDENT_2 ) { if ( ( IDENT_9 = IDENT_11 - ( ( org . IDENT_0 . util . IDENT_8 . METHOD_4 ( ) ) - IDENT_7 ) ) <= 0 ) { throw new java . util . concurrent . METHOD_5 ( ) ; } try { if ( IDENT_12 == null ) { if ( ( f . get ( IDENT_9 , TimeUnit . IDENT_13 ) ) == null ) { IDENT_6 ++ ; } } else if ( IDENT_12 . equals ( f . get ( IDENT_9 , TimeUnit . IDENT_13 ) ) ) { IDENT_6 ++ ; } } catch ( java . util . concurrent . IDENT_14 | java . util . concurrent . IDENT_15 e ) { } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( org . IDENT_0 . concurrent . future . IDENT_3 , org . IDENT_0 . concurrent . future . IDENT_4 . METHOD_2 ( IDENT_2 , false , 100 ) ) 