METHOD_0 ( ) { org . IDENT_0 . concurrent . IDENT_1 IDENT_2 = new org . IDENT_0 . concurrent . METHOD_1 ( 3 ) ; final java . util . concurrent . atomic . IDENT_3 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( false ) ; try { final java . lang . Integer IDENT_5 = 1 ; final java . lang . Integer IDENT_6 = 2 ; java . util . concurrent . IDENT_7 IDENT_8 = new org . IDENT_0 . concurrent . IDENT_9 . IDENT_10 . METHOD_3 ( IDENT_2 , 1 ) ; final org . IDENT_0 . concurrent . IDENT_9 . IDENT_11 IDENT_12 = new org . IDENT_0 . concurrent . IDENT_9 . METHOD_4 ( IDENT_8 , 2 ) ; final java . util . concurrent . atomic . IDENT_13 IDENT_14 = new java . util . concurrent . atomic . METHOD_5 ( ) ; final java . util . concurrent . atomic . IDENT_15 < org . IDENT_0 . test . concurrent . IDENT_16 > IDENT_17 = new java . util . concurrent . atomic . METHOD_6 ( ) ; IDENT_2 . execute ( new java . lang . METHOD_7 ( ) { @ org . IDENT_0 . concurrent . IDENT_9 . Override public void run ( ) { while ( ! ( IDENT_4 . get ( ) ) ) { org . IDENT_0 . test . concurrent . IDENT_16 next = new org . IDENT_0 . test . concurrent . METHOD_8 ( ) { @ org . IDENT_0 . concurrent . IDENT_9 . Override public void METHOD_9 ( ) { IDENT_14 . METHOD_10 ( ) ; org . IDENT_0 . test . concurrent . TestUtils . sleep ( 20 ) ; } } ; IDENT_17 . set ( next ) ; IDENT_14 . METHOD_11 ( ) ; IDENT_12 . execute ( IDENT_5 , next ) ; } } } ) ; new org . IDENT_0 . test . concurrent . METHOD_12 ( IDENT_14 :: get , ( c ) -> c > 10 ) . METHOD_13 ( ) ; org . IDENT_0 . test . concurrent . METHOD_8 IDENT_18 = new org . IDENT_0 . test . concurrent . METHOD_8 ( ) ; IDENT_12 . execute ( IDENT_6 , IDENT_18 ) ; org . IDENT_0 . test . concurrent . METHOD_8 IDENT_19 = IDENT_17 . get ( ) ; IDENT_18 . METHOD_14 ( ) ; "<AssertPlaceHolder>" ; } finally { IDENT_4 . set ( true ) ; IDENT_2 . METHOD_15 ( ) ; } } METHOD_16 ( ) { return ( IDENT_20 . get ( ) ) == 1 ; }
org . junit . Assert . assertFalse ( IDENT_19 . METHOD_16 ( ) ) 