METHOD_0 ( ) { org . IDENT_0 . concurrent . IDENT_1 IDENT_2 = new org . IDENT_0 . concurrent . METHOD_1 ( 16 ) ; IDENT_2 . METHOD_2 ( ) ; try { java . util . concurrent . IDENT_3 IDENT_4 = new org . IDENT_0 . concurrent . IDENT_5 . IDENT_6 . METHOD_3 ( IDENT_2 ) ; final java . util . concurrent . atomic . IDENT_7 IDENT_8 = new java . util . concurrent . atomic . METHOD_4 ( 0 ) ; final org . IDENT_0 . test . concurrent . IDENT_9 IDENT_10 = new org . IDENT_0 . test . concurrent . METHOD_5 ( ) ; java . util . List < org . IDENT_0 . test . concurrent . IDENT_11 > IDENT_12 = new java . util . ArrayList ( IDENT_13 ) ; for ( int i = 0 ; i < ( IDENT_13 ) ; i ++ ) { org . IDENT_0 . test . concurrent . IDENT_11 IDENT_14 = new org . IDENT_0 . test . concurrent . METHOD_6 ( 20 ) { @ org . IDENT_0 . concurrent . IDENT_5 . IDENT_6 . Override public void METHOD_7 ( ) { int IDENT_15 = IDENT_8 . METHOD_8 ( ) ; if ( IDENT_15 > 1 ) { IDENT_10 . fail ( ( IDENT_15 + STRING_0 ) ) ; } } @ org . IDENT_0 . concurrent . IDENT_5 . IDENT_6 . Override public void METHOD_9 ( ) { IDENT_8 . METHOD_10 ( ) ; IDENT_10 . METHOD_11 ( ) ; } } ; IDENT_4 . execute ( IDENT_14 ) ; IDENT_12 . add ( IDENT_14 ) ; } IDENT_10 . METHOD_12 ( ( 1000 * 10 ) , org . IDENT_0 . concurrent . IDENT_5 . IDENT_6 . IDENT_13 ) ; java . util . Iterator < org . IDENT_0 . test . concurrent . METHOD_6 > it = IDENT_12 . iterator ( ) ; while ( it . hasNext ( ) ) { org . IDENT_0 . test . concurrent . METHOD_6 IDENT_14 = it . next ( ) ; IDENT_14 . METHOD_13 ( ) ; "<AssertPlaceHolder>" ; } } finally { IDENT_2 . METHOD_14 ( ) ; } } METHOD_15 ( ) { return IDENT_16 . get ( ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_14 . METHOD_15 ( ) ) 