METHOD_0 ( ) { IDENT_0 . IDENT_1 . lang . IDENT_2 IDENT_3 = new IDENT_0 . IDENT_1 . lang . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . lang . Integer > map = new java . util . HashMap < java . lang . String , java . lang . Integer > ( ) ; for ( int i = 1 ; i <= 100 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { java . lang . String s = IDENT_3 . METHOD_2 ( ) ; java . lang . Integer x = map . get ( s ) ; if ( x == null ) { x = 0 ; } x ++ ; map . put ( s , x ) ; } for ( java . lang . Integer count : map . values ( ) ) { "<AssertPlaceHolder>" ; } } } get ( java . lang . String [ ] ) { java . util . IDENT_4 random = new java . util . METHOD_3 ( IDENT_5 ) ; java . lang . String [ ] IDENT_6 = IDENT_7 . METHOD_4 ( ) ; java . util . Collections . METHOD_5 ( java . util . Arrays . asList ( IDENT_6 ) , random ) ; return IDENT_6 [ ( ( ( index ) ++ ) OP_0 ( IDENT_6 . length ) ) ] ; }
org . junit . Assert . assertEquals ( i , ( ( int ) ( count ) ) ) 