METHOD_0 ( ) { java . lang . String data = STRING_0 ; byte [ ] bytes = data . getBytes ( ) ; IDENT_0 . util . ByteArrayOutputStream IDENT_1 = new IDENT_0 . util . ByteArrayOutputStream ( ) ; IDENT_2 . METHOD_1 ( new IDENT_0 . util . ByteArrayInputStream ( bytes ) , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( IDENT_0 . util . File , IDENT_0 . util . IDENT_3 ) { IDENT_0 . util . InputStream is = null ; int IDENT_4 = INT_0 ; byte [ ] buf = new byte [ IDENT_4 ] ; try { is = new IDENT_0 . util . METHOD_2 ( file ) ; for ( int read ; ( read = is . read ( buf ) ) != ( - 1 ) ; ) { IDENT_5 . write ( buf , 0 , read ) ; IDENT_5 . METHOD_3 ( ) ; } } catch ( IDENT_0 . util . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } finally { METHOD_4 ( is ) ; } }
org . junit . Assert . assertThat ( new java . lang . String ( IDENT_1 . toByteArray ( ) ) , org . hamcrest . CoreMatchers . equalTo ( data ) ) 