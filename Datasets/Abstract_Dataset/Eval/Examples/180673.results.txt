METHOD_0 ( ) { java . net . IDENT_0 IDENT_1 = java . net . IDENT_2 . METHOD_1 ( STRING_0 ) ; net . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = net . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( ( ( java . net . IDENT_2 ) ( IDENT_1 ) ) ) ; java . net . IDENT_0 IDENT_8 = IDENT_7 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { final byte [ ] IDENT_9 = new byte [ 16 ] ; IDENT_9 [ 0 ] = ( ( byte ) ( ( IDENT_10 ) > > > INT_0 ) ) ; IDENT_9 [ 1 ] = ( ( byte ) ( ( IDENT_10 ) > > > INT_1 ) ) ; IDENT_9 [ 2 ] = ( ( byte ) ( ( IDENT_10 ) > > > INT_2 ) ) ; IDENT_9 [ 3 ] = ( ( byte ) ( ( IDENT_10 ) > > > INT_3 ) ) ; IDENT_9 [ 4 ] = ( ( byte ) ( ( IDENT_10 ) > > > INT_4 ) ) ; IDENT_9 [ 5 ] = ( ( byte ) ( ( IDENT_10 ) > > > 16 ) ) ; IDENT_9 [ 6 ] = ( ( byte ) ( ( IDENT_10 ) > > > 8 ) ) ; IDENT_9 [ 7 ] = ( ( byte ) ( IDENT_10 ) ) ; IDENT_9 [ 8 ] = ( ( byte ) ( ( IDENT_11 ) > > > INT_0 ) ) ; IDENT_9 [ 9 ] = ( ( byte ) ( ( IDENT_11 ) > > > INT_1 ) ) ; IDENT_9 [ 10 ] = ( ( byte ) ( ( IDENT_11 ) > > > INT_2 ) ) ; IDENT_9 [ INT_5 ] = ( ( byte ) ( ( IDENT_11 ) > > > INT_3 ) ) ; IDENT_9 [ 12 ] = ( ( byte ) ( ( IDENT_11 ) > > > INT_4 ) ) ; IDENT_9 [ INT_6 ] = ( ( byte ) ( ( IDENT_11 ) > > > 16 ) ) ; IDENT_9 [ INT_7 ] = ( ( byte ) ( ( IDENT_11 ) > > > 8 ) ) ; IDENT_9 [ 15 ] = ( ( byte ) ( IDENT_11 ) ) ; try { return ( ( java . net . IDENT_2 ) ( java . net . IDENT_2 . METHOD_4 ( IDENT_9 ) ) ) ; } catch ( java . net . IDENT_12 e ) { e . printStackTrace ( ) ; return null ; } }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_8 ) 