METHOD_0 ( ) { final java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( INT_0 ) ; net . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = null ; try { net . IDENT_2 . IDENT_6 . IDENT_7 IDENT_8 = new net . IDENT_2 . IDENT_6 . METHOD_2 ( IDENT_1 ) ; net . IDENT_2 . IDENT_6 . METHOD_2 IDENT_9 = new net . IDENT_2 . IDENT_6 . METHOD_2 ( IDENT_1 ) ; net . IDENT_2 . IDENT_6 . IDENT_10 IDENT_11 = new net . IDENT_2 . IDENT_6 . METHOD_3 ( IDENT_9 ) ; IDENT_11 . METHOD_4 ( ) ; net . IDENT_2 . IDENT_6 . IDENT_12 IDENT_13 = new net . IDENT_2 . IDENT_6 . METHOD_5 ( IDENT_11 ) ; IDENT_5 = new net . IDENT_2 . IDENT_3 . METHOD_6 ( new net . IDENT_2 . IDENT_14 . METHOD_7 ( IDENT_9 ) . METHOD_8 ( 1 ) . METHOD_9 ( INT_1 ) . METHOD_10 ( IDENT_13 ) . start ( ) ) . METHOD_11 ( false ) . start ( ) ; net . IDENT_2 . IDENT_3 . IDENT_4 [ ] nodes = METHOD_12 ( IDENT_5 , INT_2 , IDENT_1 ) ; net . IDENT_2 . IDENT_3 . IDENT_15 IDENT_16 = nodes [ 0 ] . METHOD_13 ( IDENT_8 ) . start ( ) ; IDENT_16 . METHOD_14 ( ) ; for ( int i = 0 ; i < ( nodes . length ) ; i ++ ) { for ( int j = 0 ; j < ( nodes . length ) ; j ++ ) { if ( i != j ) nodes [ i ] . METHOD_15 ( ) . METHOD_16 ( ) . METHOD_10 ( ) . METHOD_17 ( nodes [ j ] . METHOD_18 ( ) , null , null , null ) ; } } net . IDENT_2 . IDENT_3 . IDENT_15 IDENT_17 = nodes [ INT_3 ] . METHOD_19 ( IDENT_8 ) . start ( ) ; IDENT_17 . METHOD_14 ( ) ; "<AssertPlaceHolder>" ; } finally { if ( IDENT_5 != null ) { IDENT_5 . METHOD_15 ( ) . METHOD_20 ( ) . METHOD_21 ( ) ; } } } METHOD_22 ( ) { MOD_0 ( IDENT_18 ) { return IDENT_19 . METHOD_23 ( ) ; } }
org . junit . Assert . assertEquals ( 2 , IDENT_17 . METHOD_22 ( ) . size ( ) ) 