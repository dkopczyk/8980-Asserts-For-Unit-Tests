METHOD_0 ( ) { int IDENT_0 = 1000 ; java . math . BigInteger [ ] IDENT_1 = new java . math . BigInteger [ IDENT_0 ] ; java . math . BigInteger [ ] IDENT_2 = new java . math . BigInteger [ IDENT_0 ] ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_1 [ i ] = new java . math . BigInteger ( INT_0 , IDENT_3 ) ; IDENT_2 [ i ] = new java . math . BigInteger ( INT_0 , IDENT_3 ) ; if ( ( ( IDENT_1 [ i ] . toString ( 16 ) . length ( ) ) != INT_1 ) || ( ( IDENT_2 [ i ] . toString ( 16 ) . length ( ) ) != INT_1 ) ) i OP_0 ; } net . IDENT_4 . IDENT_5 . IDENT_6 [ ] IDENT_7 = new net . IDENT_4 . IDENT_5 . IDENT_6 [ IDENT_0 ] ; net . IDENT_4 . IDENT_5 . IDENT_6 [ ] IDENT_8 = new net . IDENT_4 . IDENT_5 . IDENT_6 [ IDENT_0 ] ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_7 [ i ] = new net . IDENT_4 . IDENT_5 . METHOD_1 ( ( STRING_0 + ( IDENT_1 [ i ] . toString ( 16 ) ) ) ) ; IDENT_8 [ i ] = new net . IDENT_4 . IDENT_5 . METHOD_1 ( ( STRING_0 + ( IDENT_2 [ i ] . toString ( 16 ) ) ) ) ; } long start = java . lang . System . currentTimeMillis ( ) ; java . math . BigInteger IDENT_9 = java . math . BigInteger . IDENT_10 ; for ( int j = 1 ; j < 1000 ; j ++ ) { for ( int i = 0 ; i < IDENT_0 ; i ++ ) IDENT_9 = IDENT_1 [ ( ( i * j ) OP_1 IDENT_0 ) ] . METHOD_2 ( IDENT_2 [ i ] ) . METHOD_2 ( IDENT_9 ) ; } System . err . println ( ( ( ( STRING_1 + ( ( java . lang . System . currentTimeMillis ( ) ) - start ) ) + STRING_2 ) + ( IDENT_9 . toString ( 16 ) ) ) ) ; start = java . lang . System . currentTimeMillis ( ) ; net . IDENT_4 . IDENT_5 . METHOD_1 IDENT_11 = new net . IDENT_4 . IDENT_5 . METHOD_1 ( 10 ) ; for ( int j = 1 ; j < 1000 ; j ++ ) { for ( int i = 0 ; i < IDENT_0 ; i ++ ) IDENT_11 = IDENT_7 [ ( ( i * j ) OP_1 IDENT_0 ) ] . METHOD_2 ( IDENT_8 [ i ] ) . METHOD_2 ( IDENT_11 ) ; } System . err . println ( ( ( ( STRING_3 + ( ( java . lang . System . currentTimeMillis ( ) ) - start ) ) + STRING_2 ) + IDENT_11 ) ) ; java . lang . String IDENT_12 = IDENT_9 . toString ( 16 ) ; while ( ( IDENT_12 . length ( ) ) < INT_1 ) IDENT_12 = STRING_4 + IDENT_12 ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( STRING_5 ) ; sb . append ( IDENT_13 ) . append ( STRING_6 ) . append ( java . util . Arrays . toString ( IDENT_14 ) ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( ( STRING_0 + IDENT_12 ) , IDENT_11 . toString ( ) ) 