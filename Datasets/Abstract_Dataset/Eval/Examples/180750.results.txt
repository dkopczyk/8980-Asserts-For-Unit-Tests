METHOD_0 ( ) { METHOD_1 ( STRING_0 ) ; final java . util . List < com . IDENT_0 . IDENT_1 . utils . IDENT_2 . IDENT_3 > res = IDENT_2 . IDENT_4 . METHOD_2 ( ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; METHOD_4 ( res . get ( 0 ) , 1 , new java . lang . String [ ] [ ] { new java . lang . String [ ] { "1" , "2" , STRING_1 , STRING_2 } } ) ; METHOD_4 ( res . get ( 1 ) , 1 , new java . lang . String [ ] [ ] { new java . lang . String [ ] { "1" , STRING_3 , STRING_2 } } ) ; METHOD_4 ( res . get ( 2 ) , 1 , new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_4 , STRING_5 } } ) ; METHOD_4 ( res . get ( 3 ) , 2 , new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_0 } } ) ; } METHOD_3 ( ) { final org . eclipse . swt . IDENT_5 . IDENT_6 IDENT_7 = IDENT_8 . IDENT_4 . METHOD_2 ( ) . METHOD_5 ( ) ; final java . util . List < com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_3 > results = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_3 > ( ) ; IDENT_10 : for ( final com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_11 cc : IDENT_12 ) { final java . lang . String [ ] [ ] table ; try { table = cc . convert ( IDENT_7 ) ; } catch ( final java . lang . Exception ex ) { com . IDENT_0 . utils . logging . IDENT_13 . error ( cc , ex ) ; continue IDENT_10 ; } if ( table == null ) { continue ; } java . util . Collections . METHOD_6 ( results , new java . util . IDENT_14 < com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_3 > ( ) { @ com . IDENT_0 . IDENT_1 . internal . IDENT_9 . Override public int compare ( com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_3 IDENT_15 , com . IDENT_0 . IDENT_1 . internal . IDENT_9 . IDENT_3 IDENT_16 ) { final int IDENT_17 = ( IDENT_15 . METHOD_7 ( ) ) * ( IDENT_15 . METHOD_8 ( ) ) ; final int IDENT_18 = ( IDENT_16 . METHOD_7 ( ) ) * ( IDENT_16 . METHOD_8 ( ) ) ; if ( IDENT_17 != IDENT_18 ) return IDENT_18 - IDENT_17 ; return ( IDENT_16 . METHOD_9 ( ) . size ( ) ) - ( IDENT_15 . METHOD_9 ( ) . size ( ) ) ; } } ) ; return results ; }
org . junit . Assert . assertEquals ( 4 , res . size ( ) ) 