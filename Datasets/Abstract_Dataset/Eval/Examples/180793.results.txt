METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . util . config . Configuration configuration = mock ( org . IDENT_0 . IDENT_1 . util . config . Configuration . class ) ; when ( configuration . METHOD_1 ( any ( org . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_3 . class ) ) ) . thenReturn ( 200 ) ; javax . servlet . http . IDENT_4 request = mock ( javax . servlet . http . IDENT_4 . class ) ; javax . servlet . http . IDENT_5 response = mock ( javax . servlet . http . IDENT_5 . class ) ; final org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . ByteArrayOutputStream stream = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . ByteArrayOutputStream ( ) ; javax . servlet . IDENT_7 out = new javax . servlet . METHOD_2 ( ) { public org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 METHOD_3 ( ) { return stream ; } @ org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . Override public void write ( int b ) throws org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IOException { stream . write ( b ) ; } } ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . StringWriter IDENT_9 = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . StringWriter ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_10 writer = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( IDENT_9 ) ; try { when ( response . METHOD_3 ( ) ) . thenReturn ( out ) ; } catch ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IOException e ) { e . printStackTrace ( ) ; } try { when ( response . METHOD_5 ( ) ) . thenReturn ( writer ) ; } catch ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IOException e ) { e . printStackTrace ( ) ; } javax . servlet . IDENT_11 IDENT_12 = METHOD_6 ( request , response ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . IDENT_14 IDENT_15 = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . METHOD_7 ( IDENT_12 , java . lang . System . METHOD_8 ( ) ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_16 handler = METHOD_9 ( configuration ) ; handler . METHOD_10 ( STRING_0 , STRING_1 , METHOD_11 ( ) , IDENT_15 ) ; java . lang . String s = new java . lang . String ( stream . toByteArray ( ) ) ; if ( ( s . length ( ) ) == 0 ) { s = IDENT_9 . toString ( ) ; } "<AssertPlaceHolder>" ; IDENT_15 . close ( ) ; verify ( IDENT_12 , times ( 1 ) ) . METHOD_12 ( ) ; } toString ( ) { return new java . lang . String ( id , 0 , length ) ; }
org . junit . Assert . assertEquals ( STRING_0 , s ) 