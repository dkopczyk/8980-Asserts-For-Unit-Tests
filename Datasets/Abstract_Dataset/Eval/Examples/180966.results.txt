METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 IDENT_7 = new org . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_2 ( org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_8 . get ( "2" ) ) ; IDENT_4 . METHOD_3 ( ) . METHOD_4 ( IDENT_9 . IDENT_10 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { org . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_2 IDENT_7 = page . METHOD_6 ( IDENT_9 . IDENT_10 , org . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_2 . class ) ; if ( IDENT_7 == null ) { return new org . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_7 ( page , org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_9 . IDENT_10 ) ; } java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . IDENT_13 > IDENT_14 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_7 . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_15 item = IDENT_7 . METHOD_8 ( i ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . IDENT_12 . IDENT_13 IDENT_16 = METHOD_9 ( item ) . filter ( ( d ) -> d instanceof org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_17 ) . map ( org . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_17 . class :: IDENT_18 ) . map ( IDENT_13 :: new ) . METHOD_10 ( ( ) -> { org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . LOG . warn ( STRING_0 , item ) ; return null ; } ) ; if ( METHOD_11 ( IDENT_16 ) ) { IDENT_14 . add ( IDENT_16 ) ; } } return new org . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_7 ( IDENT_14 , IDENT_7 ) ; }
org . junit . Assert . assertTrue ( IDENT_4 . METHOD_5 ( ) . isEmpty ( ) ) 