METHOD_0 ( ) { final java . util . concurrent . IDENT_0 IDENT_1 = new java . util . concurrent . METHOD_1 ( 1 ) ; org . apache . jackrabbit . oak . plugins . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . jackrabbit . oak . plugins . IDENT_2 . METHOD_2 ( ) { @ org . apache . jackrabbit . oak . plugins . IDENT_2 . Override public boolean METHOD_3 ( ) { IDENT_1 . METHOD_4 ( ) ; return super . METHOD_3 ( ) ; } } ; IDENT_4 . METHOD_0 ( ) ; final java . lang . Thread IDENT_5 = java . lang . Thread . METHOD_5 ( ) ; java . lang . Thread t = new java . lang . Thread ( ) { @ org . apache . jackrabbit . oak . plugins . IDENT_2 . Override public void run ( ) { try { IDENT_1 . METHOD_6 ( ) ; } catch ( java . lang . IDENT_6 e ) { java . lang . Thread . METHOD_5 ( ) . METHOD_7 ( ) ; } IDENT_5 . METHOD_7 ( ) ; } } ; t . start ( ) ; try { IDENT_4 . METHOD_8 ( org . apache . jackrabbit . oak . plugins . IDENT_2 . IDENT_7 , org . apache . jackrabbit . oak . plugins . IDENT_2 . IDENT_8 . IDENT_9 , null ) ; } finally { try { t . join ( ) ; } catch ( java . lang . IDENT_6 e ) { java . lang . Thread . METHOD_5 ( ) . METHOD_7 ( ) ; } "<AssertPlaceHolder>" ; } } METHOD_7 ( ) { org . apache . commons . io . IDENT_10 . METHOD_9 ( new java . io . File ( STRING_0 ) ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_11 . IDENT_12 cache = new org . apache . jackrabbit . oak . plugins . document . IDENT_11 . METHOD_10 ( STRING_1 ) ; try { org . apache . jackrabbit . oak . plugins . document . IDENT_11 . IDENT_13 < java . lang . String , java . lang . String > IDENT_14 = cache . METHOD_11 ( 0 , STRING_2 , null ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_11 . IDENT_13 < java . lang . String , java . lang . String > IDENT_15 = cache . METHOD_11 ( 0 , "test" , null ) ; org . junit . Assert . assertEquals ( 1 , cache . METHOD_12 ( ) ) ; java . lang . String IDENT_16 = new java . lang . String ( new char [ INT_0 * INT_0 ] ) ; int count = 10 ; for ( int i = 0 ; i < count ; i ++ ) { IDENT_14 . put ( ( STRING_3 + i ) , IDENT_16 ) ; IDENT_15 . put ( ( STRING_4 + i ) , IDENT_16 ) ; } java . lang . Thread . METHOD_5 ( ) . METHOD_7 ( ) ; for ( int i = 0 ; i < count ; i ++ ) { IDENT_14 . get ( ( STRING_3 + i ) ) ; IDENT_15 . get ( ( STRING_4 + i ) ) ; } org . junit . Assert . assertEquals ( 2 , cache . METHOD_12 ( ) ) ; org . junit . Assert . assertFalse ( java . lang . Thread . METHOD_13 ( ) ) ; } finally { cache . close ( ) ; } }
org . junit . Assert . assertTrue ( java . lang . Thread . METHOD_13 ( ) ) 