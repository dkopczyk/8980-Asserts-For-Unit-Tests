METHOD_0 ( ) { double [ ] IDENT_0 = new double [ ] { - 1.0 , ( ( double ) ( Integer . MAX_VALUE ) ) + 1 , FLOAT_0 } ; for ( double IDENT_1 : IDENT_0 ) { java . lang . Exception exception = null ; try { IDENT_2 . create ( IDENT_1 , 0.0 ) ; } catch ( java . lang . IllegalArgumentException e ) { exception = e ; } "<AssertPlaceHolder>" ; } } create ( org . eclipse . IDENT_3 . IDENT_4 . core . IDENT_5 . IDENT_6 , int ) { float [ ] components = IDENT_7 . METHOD_1 ( ) ; float IDENT_8 = ( FLOAT_1 - ( components [ 2 ] ) ) / IDENT_9 ; float IDENT_10 = ( components [ 1 ] ) / IDENT_9 ; float IDENT_11 = components [ 0 ] ; float IDENT_12 = FLOAT_1 ; float IDENT_13 = FLOAT_2 ; com . google . common . collect . ImmutableList . Builder < org . eclipse . IDENT_3 . IDENT_4 . core . IDENT_5 . IDENT_6 > builder = new com . google . common . collect . ImmutableList . Builder ( ) ; for ( int i = 0 ; i < IDENT_9 ; i ++ ) { builder . add ( org . eclipse . IDENT_3 . IDENT_4 . core . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_11 , IDENT_13 , IDENT_12 , components [ 3 ] ) ) ; IDENT_13 += IDENT_10 ; IDENT_12 OP_0 IDENT_8 ; } return new org . eclipse . IDENT_3 . IDENT_4 . core . IDENT_5 . METHOD_3 ( builder . build ( ) ) ; }
org . junit . Assert . assertNotNull ( exception ) 