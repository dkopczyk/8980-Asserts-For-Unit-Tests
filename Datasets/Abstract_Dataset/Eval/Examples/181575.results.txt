METHOD_0 ( ) { int IDENT_0 = 100 ; java . nio . ByteBuffer [ ] IDENT_1 = new java . nio . ByteBuffer [ IDENT_0 ] ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_1 [ i ] = java . nio . ByteBuffer . METHOD_1 ( 4 ) ; IDENT_1 [ i ] . METHOD_2 ( 0 , ( ( IDENT_0 - i ) - 1 ) ) ; } IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 writer = IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . create ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { writer . METHOD_3 ( IDENT_1 [ i ] ) ; } writer . METHOD_4 ( ) ; java . util . List < java . nio . ByteBuffer > IDENT_6 = writer . METHOD_5 ( ) ; IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 reader = IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 . create ( METHOD_5 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { java . nio . ByteBuffer IDENT_8 = reader . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_6 ( ) { if ( METHOD_7 ( ) ) { java . nio . ByteBuffer IDENT_9 = IDENT_10 ; METHOD_8 ( ) ; IDENT_11 = true ; return IDENT_9 ; } return null ; }
org . junit . Assert . assertEquals ( IDENT_1 [ ( ( IDENT_0 - i ) - 1 ) ] , IDENT_8 ) 