METHOD_0 ( ) { client = METHOD_1 ( ) ; server . METHOD_2 ( new IDENT_0 . IDENT_1 . METHOD_3 ( ) . METHOD_4 ( STRING_0 ) ) ; com . IDENT_2 . client . model . IDENT_3 IDENT_4 = com . IDENT_2 . client . model . IDENT_3 . builder ( ) . METHOD_5 ( STRING_1 ) . METHOD_6 ( STRING_2 ) . build ( ) ; java . lang . String METHOD_5 = client . METHOD_7 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( com . IDENT_2 . client . model . IDENT_3 ) { java . util . Map < java . lang . String , java . lang . String > IDENT_5 = new java . util . HashMap ( ) ; if ( ( ! ( IDENT_4 . METHOD_8 ( ) . isEmpty ( ) ) ) && ( ! ( IDENT_4 . METHOD_9 ( ) . isEmpty ( ) ) ) ) { IDENT_5 . put ( STRING_3 , IDENT_4 . METHOD_8 ( ) ) ; IDENT_5 . put ( STRING_4 , IDENT_4 . METHOD_9 ( ) ) ; } else if ( ! ( IDENT_4 . METHOD_10 ( ) . isEmpty ( ) ) ) { IDENT_5 . put ( STRING_5 , IDENT_4 . METHOD_10 ( ) ) ; } else { throw new java . lang . IllegalStateException ( STRING_6 ) ; } com . IDENT_2 . client . model . IDENT_6 result = METHOD_11 ( com . IDENT_2 . client . IDENT_7 . METHOD_12 ( STRING_7 , IDENT_4 . METHOD_13 ( ) ) , IDENT_5 , com . IDENT_2 . client . model . IDENT_6 . class ) ; return result . METHOD_13 ( ) ; }
org . junit . Assert . assertEquals ( STRING_1 , METHOD_5 ) 