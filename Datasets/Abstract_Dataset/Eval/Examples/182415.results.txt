METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > input = new java . util . HashMap ( ) ; input . put ( "foo" , "bar" ) ; java . util . Map < java . lang . String , java . lang . String > actual = com . IDENT_0 . converter . IDENT_1 . serialize ( input , STRING_0 ) ; java . util . Map < java . lang . String , java . lang . String > expected = new java . util . HashMap ( ) ; expected . put ( STRING_1 , "bar" ) ; "<AssertPlaceHolder>" ; } serialize ( java . util . Map , java . lang . String ) { if ( ( map == null ) || ( map . isEmpty ( ) ) ) { return java . util . Collections . METHOD_1 ( ) ; } java . util . Map < java . lang . String , java . lang . String > IDENT_2 = com . IDENT_0 . converter . IDENT_1 . METHOD_2 ( map , new java . util . HashMap < java . lang . String , java . lang . String > ( ) , new java . util . ArrayList < java . lang . String > ( ) ) ; java . util . Map < java . lang . String , java . lang . String > result = new java . util . HashMap ( ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_2 . entrySet ( ) ) { result . put ( ( ( IDENT_3 + STRING_2 ) + ( entry . getKey ( ) ) ) , entry . getValue ( ) ) ; } return result ; }
org . junit . Assert . assertEquals ( expected , actual ) 