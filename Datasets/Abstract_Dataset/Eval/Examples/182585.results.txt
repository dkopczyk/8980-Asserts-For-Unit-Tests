METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . trace ( STRING_0 1 , STRING_1 ) ; net . IDENT_0 . IDENT_1 . debug ( STRING_0 1 , STRING_0 ) ; net . IDENT_0 . IDENT_1 . info ( STRING_0 2 , STRING_2 ) ; net . IDENT_0 . IDENT_1 . warn ( STRING_0 2 , STRING_0 3 ) ; net . IDENT_0 . IDENT_1 . warn ( new java . lang . RuntimeException ( STRING_0 4 ) , STRING_0 2 , STRING_0 3 ) ; net . IDENT_0 . IDENT_1 . error ( STRING_0 2 , STRING_3 ) ; net . IDENT_0 . IDENT_1 . error ( new java . lang . RuntimeException ( STRING_4 ) , STRING_0 2 , STRING_3 ) ; net . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 2 , STRING_5 ) ; net . IDENT_0 . IDENT_1 . METHOD_1 ( new java . lang . RuntimeException ( STRING_6 ) , STRING_0 2 , STRING_5 ) ; java . lang . Thread . sleep ( 1000 ) ; java . util . Map < java . lang . String , java . lang . Integer > IDENT_2 = new java . util . HashMap < java . lang . String , java . lang . Integer > ( ) ; IDENT_2 . put ( STRING_7 , 1 ) ; IDENT_2 . put ( STRING_0 5 , 2 ) ; IDENT_2 . put ( STRING_0 4 , 1 ) ; IDENT_2 . put ( STRING_8 , 2 ) ; IDENT_2 . put ( STRING_4 , 1 ) ; IDENT_2 . put ( STRING_9 , 2 ) ; IDENT_2 . put ( STRING_6 , 1 ) ; for ( java . lang . String entry : net . IDENT_0 . IDENT_3 . IDENT_4 ) { java . lang . String IDENT_5 = entry . replaceAll ( STRING_0 6 , STRING_0 0 ) ; java . lang . Integer count = IDENT_2 . get ( IDENT_5 ) ; if ( count == null ) { continue ; } IDENT_2 . put ( IDENT_5 , new java . lang . Integer ( ( ( count . METHOD_2 ( ) ) - 1 ) ) ) ; } for ( java . util . Map . Entry < java . lang . String , java . lang . Integer > count : IDENT_2 . entrySet ( ) ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . Throwable , java . lang . String , java . lang . Object [ ] ) { net . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_1 ( t , message , parameters ) ; }
org . junit . Assert . assertEquals ( count . getKey ( ) , 0 , count . getValue ( ) . METHOD_2 ( ) ) 