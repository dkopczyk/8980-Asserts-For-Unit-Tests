METHOD_0 ( ) { java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { long [ ] l = new long [ ] { IDENT_1 . METHOD_2 ( ) , IDENT_1 . METHOD_2 ( ) } ; int [ ] x = ch . IDENT_2 . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_3 ( INT_0 , l ) ; long [ ] IDENT_6 = ch . IDENT_2 . IDENT_3 . IDENT_4 . util . IDENT_5 . split ( 2 , INT_0 , x ) ; "<AssertPlaceHolder>" ; } } split ( int , int , int [ ] ) { long [ ] IDENT_7 = new long [ IDENT_8 ] ; long IDENT_9 = 1L << ( IDENT_10 - 1 ) ; for ( int k = 0 ; k < IDENT_10 ; k ++ ) { for ( int j = 0 ; j < ( IDENT_7 . length ) ; j ++ ) { int IDENT_11 = ( k * ( IDENT_7 . length ) ) + j ; boolean IDENT_12 = ch . IDENT_2 . IDENT_3 . IDENT_4 . util . IDENT_13 . METHOD_4 ( IDENT_14 , IDENT_11 ) ; if ( IDENT_12 ) { IDENT_7 [ j ] OP_0 IDENT_9 ; } } IDENT_9 OP_1 1 ; } return IDENT_7 ; }
org . junit . Assert . assertArrayEquals ( l , IDENT_6 ) 