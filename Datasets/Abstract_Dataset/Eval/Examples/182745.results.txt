METHOD_0 ( ) { long [ ] [ ] IDENT_0 = new long [ ] [ ] { new long [ ] { - INT_0 , INT_1 , - INT_2 , INT_3 } , new long [ ] { - INT_4 , INT_5 , - INT_6 , INT_7 } , new long [ ] { - INT_8 , INT_9 , - INT_10 , INT_11 } , new long [ ] { - INT_10 , INT_12 , - INT_13 , INT_9 } , new long [ ] { - INT_13 , INT_14 , - INT_15 , INT_12 } , new long [ ] { - INT_16 , INT_7 , - INT_4 , INT_17 } , new long [ ] { - INT_18 , INT_17 , - INT_16 , INT_19 } , new long [ ] { - INT_15 , INT_19 , - INT_18 , INT_14 } , new long [ ] { - INT_20 , INT_3 , - INT_0 , INT_21 } , new long [ ] { - INT_6 , INT_21 , - INT_20 , INT_5 } , new long [ ] { - INT_2 , INT_22 , - INT_23 , INT_1 } , new long [ ] { - INT_24 , INT_25 , - INT_26 , INT_27 } , new long [ ] { - INT_28 , INT_27 , - INT_24 , INT_29 } , new long [ ] { - INT_30 , INT_29 , - INT_28 , INT_31 } , new long [ ] { - INT_32 , INT_31 , - INT_30 , INT_33 } , new long [ ] { - INT_34 , INT_31 , - INT_30 , INT_35 } } ; ch . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new ch . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( 4 ) ; for ( long [ ] v : IDENT_0 ) { IDENT_6 . insert ( v ) ; } for ( long [ ] v : IDENT_0 ) { "<AssertPlaceHolder>" ; } } contains ( long ) { org . IDENT_7 . index . IDENT_8 . IDENT_9 < IDENT_10 > info = this . info ; int size = info . size ; if ( size == 0 ) { return false ; } if ( size == 1 ) { return key == ( info . IDENT_11 ) ; } org . IDENT_7 . index . IDENT_8 . Node < IDENT_10 > n = info . root ; long IDENT_12 = info . IDENT_11 ; while ( METHOD_2 ( n . IDENT_13 , key , IDENT_12 ) ) { if ( org . IDENT_7 . index . IDENT_8 . IDENT_14 . METHOD_3 ( key , n . IDENT_13 ) ) { if ( ( n . IDENT_15 ) != null ) { IDENT_12 = n . IDENT_16 ; n = n . IDENT_15 ; continue ; } return key == ( n . IDENT_16 ) ; } else { if ( ( n . IDENT_17 ) != null ) { IDENT_12 = n . IDENT_18 ; n = n . IDENT_17 ; continue ; } return key == ( n . IDENT_18 ) ; } } return false ; }
org . junit . Assert . assertTrue ( IDENT_6 . contains ( v ) ) 