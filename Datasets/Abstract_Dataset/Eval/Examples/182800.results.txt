METHOD_0 ( ) { javax . IDENT_0 . IDENT_1 IDENT_2 = org . IDENT_3 . test . IDENT_4 . IDENT_5 . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) ; org . IDENT_3 . IDENT_0 . IDENT_6 . schema ( IDENT_2 ) . METHOD_4 ( org . IDENT_3 . test . IDENT_0 . IDENT_7 . class ) ; org . IDENT_3 . IDENT_0 . IDENT_6 . schema ( IDENT_2 ) . METHOD_4 ( org . IDENT_3 . test . IDENT_0 . IDENT_8 . class ) ; org . IDENT_3 . test . IDENT_0 . IDENT_7 IDENT_9 = new org . IDENT_3 . test . IDENT_0 . METHOD_5 ( ) ; org . IDENT_3 . test . IDENT_0 . IDENT_8 IDENT_10 = new org . IDENT_3 . test . IDENT_0 . METHOD_6 ( ) ; IDENT_2 . METHOD_7 ( IDENT_9 ) ; IDENT_2 . METHOD_7 ( IDENT_10 ) ; java . lang . Object IDENT_11 = IDENT_2 . METHOD_8 ( IDENT_9 ) ; java . lang . Object IDENT_12 = IDENT_2 . METHOD_8 ( IDENT_10 ) ; IDENT_2 . METHOD_2 ( ) . commit ( ) ; IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) ; org . IDENT_3 . schema . IDENT_13 IDENT_14 = org . IDENT_3 . IDENT_0 . IDENT_6 . schema ( IDENT_2 ) . METHOD_9 ( ( ( java . lang . Long ) ( IDENT_11 ) ) ) ; org . IDENT_3 . schema . IDENT_13 IDENT_15 = org . IDENT_3 . IDENT_0 . IDENT_6 . schema ( IDENT_2 ) . METHOD_9 ( ( ( java . lang . Long ) ( IDENT_12 ) ) ) ; IDENT_14 . remove ( ) ; IDENT_15 . remove ( ) ; try { IDENT_14 . remove ( ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { } IDENT_2 . METHOD_2 ( ) . commit ( ) ; org . IDENT_3 . test . IDENT_4 . IDENT_5 . METHOD_10 ( ) ; IDENT_2 = org . IDENT_3 . test . IDENT_4 . IDENT_5 . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) ; try { IDENT_2 . METHOD_11 ( IDENT_11 ) ; org . junit . Assert . fail ( ) ; } catch ( javax . IDENT_0 . IDENT_16 e ) { } try { IDENT_2 . METHOD_11 ( IDENT_12 ) ; org . junit . Assert . fail ( ) ; } catch ( javax . IDENT_0 . IDENT_16 e ) { } javax . IDENT_0 . IDENT_17 < ? > ext = IDENT_2 . METHOD_12 ( org . IDENT_3 . test . IDENT_0 . METHOD_5 . class ) ; "<AssertPlaceHolder>" ; ext . METHOD_13 ( ) ; IDENT_2 . METHOD_2 ( ) . commit ( ) ; org . IDENT_3 . test . IDENT_4 . IDENT_5 . METHOD_10 ( ) ; } iterator ( ) { return ext . iterator ( ) ; }
org . junit . Assert . assertFalse ( ext . iterator ( ) . hasNext ( ) ) 