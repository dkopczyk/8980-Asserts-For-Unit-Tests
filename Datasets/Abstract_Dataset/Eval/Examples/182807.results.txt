METHOD_0 ( ) { int IDENT_0 = INT_0 ; javax . IDENT_1 . IDENT_2 IDENT_3 = org . IDENT_4 . test . IDENT_5 . IDENT_6 . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { org . IDENT_4 . test . IDENT_1 . IDENT_7 tc = new org . IDENT_4 . test . IDENT_1 . METHOD_4 ( ) ; tc . METHOD_5 ( i ) ; IDENT_3 . METHOD_6 ( tc ) ; } IDENT_3 . METHOD_2 ( ) . commit ( ) ; IDENT_3 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( org . IDENT_4 . test . IDENT_1 . METHOD_4 tc : IDENT_3 . METHOD_7 ( org . IDENT_4 . test . IDENT_1 . METHOD_4 . class ) ) { tc . METHOD_8 ( 12 ) ; } IDENT_3 . METHOD_2 ( ) . commit ( ) ; IDENT_3 . METHOD_2 ( ) . METHOD_3 ( ) ; java . util . Iterator < org . IDENT_4 . test . IDENT_1 . METHOD_4 > it = IDENT_3 . METHOD_7 ( org . IDENT_4 . test . IDENT_1 . METHOD_4 . class ) . iterator ( ) ; int n = 0 ; while ( ( n < ( IDENT_0 / 2 ) ) && ( it . hasNext ( ) ) ) { n ++ ; it . next ( ) ; } IDENT_3 . METHOD_2 ( ) . commit ( ) ; IDENT_3 . METHOD_2 ( ) . METHOD_3 ( ) ; try { "<AssertPlaceHolder>" ; } catch ( javax . IDENT_1 . IDENT_8 e ) { } try { it . next ( ) ; org . junit . Assert . fail ( ) ; } catch ( javax . IDENT_1 . IDENT_8 | java . util . IDENT_9 e ) { } IDENT_3 . METHOD_2 ( ) . commit ( ) ; org . IDENT_4 . test . IDENT_5 . IDENT_6 . METHOD_9 ( ) ; } hasNext ( ) { if ( ( next ) == null ) { for ( ; ( pos ) < ( table . length ) ; ( pos ) ++ ) { if ( ( table [ pos ] ) != null ) { next = table [ pos ] ; ( pos ) ++ ; return true ; } } return false ; } return true ; }
org . junit . Assert . assertFalse ( it . hasNext ( ) ) 