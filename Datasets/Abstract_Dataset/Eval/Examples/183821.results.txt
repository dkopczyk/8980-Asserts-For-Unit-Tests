METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 obj = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . util . ArrayList < java . lang . String > IDENT_4 = new java . util . ArrayList ( ) ; IDENT_4 . add ( STRING_0 ) ; IDENT_4 . add ( ( ( IDENT_5 ) + STRING_1 ) ) ; java . util . IDENT_6 args = IDENT_4 . METHOD_2 ( ) ; try { "<AssertPlaceHolder>" ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 IDENT_7 ) { } } METHOD_3 ( java . util . IDENT_6 ) { org . apache . IDENT_8 . logging . IDENT_9 . METHOD_4 ( IDENT_10 . IDENT_11 ) ; while ( args . hasNext ( ) ) { java . lang . String IDENT_12 = ( ( java . lang . String ) ( args . next ( ) ) ) ; if ( IDENT_12 . equals ( STRING_2 ) ) { args . remove ( ) ; java . lang . String IDENT_13 = ( ( java . lang . String ) ( args . next ( ) ) ) ; args . remove ( ) ; org . apache . IDENT_8 . logging . IDENT_9 . METHOD_4 ( IDENT_13 ) ; } } while ( args . METHOD_5 ( ) ) { args . METHOD_6 ( ) ; } while ( args . hasNext ( ) ) { java . lang . String IDENT_12 = ( ( java . lang . String ) ( args . next ( ) ) ) ; IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . log . debug ( ( STRING_3 + IDENT_12 ) ) ; if ( IDENT_12 . equalsIgnoreCase ( STRING_0 ) ) { if ( ! ( args . hasNext ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_4 ) ; } IDENT_14 = ( ( java . lang . String ) ( args . next ( ) ) ) ; } else if ( IDENT_12 . equalsIgnoreCase ( STRING_5 ) ) { IDENT_15 = true ; } else if ( IDENT_12 . equalsIgnoreCase ( STRING_6 ) ) { IDENT_16 = true ; } else { throw new java . lang . IllegalArgumentException ( ( STRING_7 + IDENT_12 ) ) ; } } if ( ( IDENT_14 ) == null ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } return METHOD_7 ( ) ; }
org . junit . Assert . assertEquals ( 1 , obj . METHOD_3 ( args ) ) 