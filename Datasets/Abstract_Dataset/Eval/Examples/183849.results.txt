METHOD_0 ( ) { final java . util . IDENT_0 < net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . IDENT_4 > IDENT_5 = new java . util . METHOD_1 ( ) ; IDENT_5 . add ( new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_2 ( STRING_0 , 1 ) ) ; IDENT_5 . add ( new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_2 ( STRING_1 , 2 ) ) ; IDENT_5 . add ( new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_2 ( STRING_2 , 3 ) ) ; IDENT_5 . add ( new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_2 ( STRING_3 , 4 ) ) ; final net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . IDENT_6 loader = new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_3 ( IDENT_5 ) ; final net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_7 IDENT_8 = new net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . METHOD_4 ( this . IDENT_9 , this . IDENT_10 , new net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . METHOD_5 ( loader ) ) ; final javax . servlet . http . IDENT_11 request = mock ( javax . servlet . http . IDENT_11 . class ) ; when ( request . METHOD_6 ( STRING_4 ) ) . thenReturn ( null ) ; when ( request . METHOD_6 ( IDENT_12 . IDENT_13 ) ) . thenReturn ( STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( javax . servlet . http . IDENT_11 ) { net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . IDENT_14 IDENT_15 = null ; for ( final net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_16 IDENT_8 : this . IDENT_17 ) { final net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_12 service = net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_12 . class . METHOD_8 ( IDENT_8 . METHOD_7 ( request ) ) ; if ( ( service != null ) && ( this . IDENT_18 . METHOD_9 ( service . METHOD_10 ( ) , service , request ) ) ) { final net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_2 method = this . IDENT_19 . METHOD_10 ( service . METHOD_10 ( ) ) ; if ( IDENT_15 != null ) { IDENT_15 . METHOD_11 ( net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_20 . METHOD_12 ( service , method . METHOD_13 ( ) ) ) ; } else { IDENT_15 = new net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_14 ( service . getId ( ) ) . METHOD_11 ( net . IDENT_1 . IDENT_2 . IDENT_3 . web . support . IDENT_20 . METHOD_12 ( service , method . METHOD_13 ( ) ) ) ; } } } if ( IDENT_15 != null ) { org . springframework . IDENT_21 . IDENT_22 . IDENT_23 . METHOD_15 ( ) . METHOD_16 ( ) . put ( net . IDENT_1 . IDENT_2 . IDENT_3 . authentication . METHOD_14 . class . METHOD_17 ( ) , IDENT_15 ) ; } return null ; }
org . junit . Assert . assertNull ( IDENT_8 . METHOD_7 ( request ) ) 