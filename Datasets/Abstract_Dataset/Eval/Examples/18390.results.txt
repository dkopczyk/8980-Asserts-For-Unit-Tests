METHOD_0 ( ) { int IDENT_0 = INT_0 ; javax . jcr . IDENT_1 writer = METHOD_1 ( ) ; javax . jcr . Node test = writer . METHOD_2 ( ) . METHOD_3 ( "test" , STRING_0 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { test . METHOD_3 ( ( STRING_1 + i ) , STRING_0 ) ; } writer . save ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { if ( ( i OP_0 2 ) == 0 ) { test . METHOD_4 ( ( STRING_1 + i ) ) . remove ( ) ; } } writer . save ( ) ; test . METHOD_3 ( STRING_2 ) ; writer . save ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . String ) { try { final java . lang . String IDENT_2 = METHOD_6 ( IDENT_3 ) ; return org . apache . jackrabbit . oak . jcr . session . IDENT_4 . METHOD_7 ( new org . apache . jackrabbit . oak . jcr . session . operation . IDENT_5 < java . lang . Boolean > ( IDENT_6 , STRING_3 ) { @ org . IDENT_7 . IDENT_8 . IDENT_9 @ org . apache . jackrabbit . oak . jcr . session . Override public org . apache . jackrabbit . oak . jcr . session . Boolean METHOD_7 ( ) throws javax . jcr . IDENT_10 { return ( node . METHOD_8 ( IDENT_2 ) ) != null ; } } ) ; } catch ( javax . jcr . IDENT_11 e ) { return false ; } }
org . junit . Assert . assertTrue ( test . METHOD_5 ( STRING_2 ) ) 