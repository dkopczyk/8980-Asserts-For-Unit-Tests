METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = IDENT_4 . read ( ) ; IDENT_0 . IDENT_1 . IDENT_2 IDENT_5 = IDENT_6 . read ( ) ; java . util . List < int [ ] > IDENT_7 = new java . util . ArrayList ( ) ; IDENT_7 . add ( new int [ ] { 0 , 0 , 0 , 0 , 0 } ) ; IDENT_7 . add ( new int [ ] { 2 , 20 , 5 , INT_0 , INT_1 } ) ; IDENT_7 . add ( new int [ ] { 1 , 10 , 3 , INT_2 , INT_3 } ) ; IDENT_0 . IDENT_1 . IDENT_8 IDENT_9 = IDENT_0 . IDENT_1 . IDENT_8 . factory ( IDENT_3 . METHOD_1 ( ) ) ; for ( int [ ] IDENT_10 : IDENT_7 ) { IDENT_9 . set ( IDENT_10 ) ; float a = IDENT_3 . METHOD_2 ( IDENT_9 ) ; float b = IDENT_5 . METHOD_2 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( IDENT_11 . core . util . IDENT_8 ) { assert ( data . METHOD_3 ( ) ) == ( IDENT_11 . core . data . IDENT_12 . IDENT_13 . IDENT_14 ) ; try { java . lang . Object value = data . read ( IDENT_9 ) ; value = IDENT_11 . core . util . IDENT_15 . convert ( IDENT_16 . IDENT_17 , this . IDENT_18 , value ) ; return ( ( java . lang . IDENT_19 ) ( java . lang . reflect . IDENT_2 . get ( value , 0 ) ) ) ; } catch ( java . io . IOException IDENT_20 ) { throw new java . lang . METHOD_4 ( IDENT_20 . getMessage ( ) ) ; } }
org . junit . Assert . assertEquals ( a , b , 0 ) 