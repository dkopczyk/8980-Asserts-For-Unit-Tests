METHOD_0 ( ) { org . apache . lucene . store . IDENT_0 IDENT_1 = new org . apache . lucene . store . METHOD_1 ( ) ; org . apache . jackrabbit . oak . plugins . index . lucene . IDENT_2 IDENT_3 = new org . apache . jackrabbit . oak . plugins . index . lucene . METHOD_2 ( root , builder . METHOD_3 ( ) , STRING_0 ) ; org . apache . jackrabbit . oak . plugins . index . lucene . IDENT_4 . IDENT_5 IDENT_6 = new org . apache . jackrabbit . oak . plugins . index . lucene . IDENT_4 . METHOD_4 ( IDENT_1 , METHOD_5 ( ) , METHOD_6 ( ) ) ; org . apache . lucene . store . IDENT_0 remote = new org . apache . lucene . store . METHOD_1 ( ) { @ org . apache . jackrabbit . oak . plugins . index . lucene . Override public org . apache . lucene . store . IDENT_7 METHOD_7 ( java . lang . String name , org . apache . lucene . store . IDENT_8 context ) throws java . io . IOException { throw new java . lang . IllegalStateException ( STRING_1 ) ; } } ; java . lang . String IDENT_9 = STRING_2 ; org . apache . lucene . store . IDENT_0 IDENT_10 = IDENT_6 . METHOD_8 ( STRING_0 , IDENT_3 , remote , org . apache . jackrabbit . oak . plugins . index . lucene . IDENT_11 ) ; byte [ ] IDENT_12 = METHOD_9 ( remote , IDENT_9 ) ; try { org . apache . jackrabbit . oak . plugins . index . lucene . IDENT_4 . METHOD_10 ( IDENT_10 , IDENT_9 , IDENT_12 ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( java . lang . IllegalStateException IDENT_13 ) { } "<AssertPlaceHolder>" ; } METHOD_11 ( java . lang . String ) { return IDENT_14 . containsKey ( name ) ; }
org . junit . Assert . assertFalse ( IDENT_6 . IDENT_1 . METHOD_11 ( IDENT_9 ) ) 