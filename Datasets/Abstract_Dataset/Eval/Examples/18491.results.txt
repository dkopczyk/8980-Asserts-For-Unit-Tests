METHOD_0 ( ) { final int start = 10 ; final int end = INT_0 ; final int k = 10 ; final java . util . IDENT_0 r = new java . util . METHOD_1 ( ) { @ org . apache . jackrabbit . oak . plugins . index . lucene . util . Override public int METHOD_2 ( int i ) { return 0 ; } } ; java . util . List < java . lang . Integer > input = range ( start , end ) ; org . apache . jackrabbit . oak . plugins . index . lucene . util . IDENT_1 < java . lang . Integer > res = new org . apache . jackrabbit . oak . plugins . index . lucene . util . METHOD_3 ( r , input . iterator ( ) , input . size ( ) , k ) ; java . util . List < java . lang . Integer > IDENT_2 = newArrayList ( res . METHOD_4 ( ) ) ; java . util . List < java . lang . Integer > expected = range ( start , ( ( start + k ) - 1 ) ) ; "<AssertPlaceHolder>" ; } range ( int , int ) { java . util . Iterator < java . lang . Integer > IDENT_3 = new com . google . common . collect . IDENT_4 < java . lang . Integer > ( ) { int IDENT_5 = start ; @ org . apache . jackrabbit . oak . plugins . index . lucene . util . Override MOD_0 org . apache . jackrabbit . oak . plugins . index . lucene . util . Integer METHOD_5 ( ) { if ( ( IDENT_5 ) > end ) { return METHOD_6 ( ) ; } return ( IDENT_5 ) ++ ; } } ; return newArrayList ( IDENT_3 ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_2 ) 