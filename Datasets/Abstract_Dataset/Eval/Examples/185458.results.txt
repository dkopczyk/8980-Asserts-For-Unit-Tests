METHOD_0 ( ) { final java . lang . String result = IDENT_0 . METHOD_1 ( 2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int ) { if ( length < 2 ) { length = 2 ; } final java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; final java . util . concurrent . IDENT_1 IDENT_2 = java . util . concurrent . IDENT_1 . METHOD_2 ( ) ; while ( ( sb . length ( ) ) < length ) { if ( ( length OP_0 2 ) == 0 ) { sb . append ( IDENT_3 [ IDENT_2 . METHOD_3 ( IDENT_3 . length ) ] ) ; } else { sb . append ( IDENT_4 [ IDENT_2 . METHOD_3 ( IDENT_4 . length ) ] ) ; } } if ( ( sb . length ( ) ) > length ) { sb . METHOD_4 ( ( ( sb . length ( ) ) - ( ( sb . length ( ) ) - length ) ) ) ; } return METHOD_5 ( sb . toString ( ) ) ; }
org . junit . Assert . assertEquals ( 2 , result . length ( ) ) 