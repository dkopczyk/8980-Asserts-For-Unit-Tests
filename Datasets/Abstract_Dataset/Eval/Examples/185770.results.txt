METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 + ( java . util . UUID . METHOD_1 ( ) . toString ( ) ) ; java . lang . String IDENT_1 = STRING_1 ; server . METHOD_2 ( IDENT_0 , IDENT_1 ) ; org . mockito . IDENT_2 < java . lang . String > IDENT_3 = org . mockito . IDENT_2 . METHOD_3 ( java . lang . String . class ) ; org . mockito . Mockito . verify ( client ) . METHOD_4 ( org . mockito . Mockito . eq ( ( STRING_2 + IDENT_0 ) ) , IDENT_3 . METHOD_5 ( ) ) ; java . lang . String IDENT_4 = IDENT_3 . getValue ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String , java . lang . String ) { org . apache . http . client . methods . IDENT_5 request = new org . apache . http . client . methods . METHOD_6 ( api ( path ) ) ; if ( IDENT_6 != null ) { request . METHOD_7 ( new org . apache . http . entity . METHOD_8 ( IDENT_6 , org . apache . http . entity . IDENT_7 . IDENT_8 ) ) ; } org . apache . http . IDENT_9 response = client . execute ( request , IDENT_10 ) ; int status = response . METHOD_9 ( ) . getStatusCode ( ) ; if ( ( status < 200 ) || ( status >= INT_0 ) ) { throw new org . apache . http . client . METHOD_10 ( status , response . METHOD_9 ( ) . METHOD_11 ( ) ) ; } try { java . io . InputStream content = response . METHOD_12 ( ) . METHOD_13 ( ) ; java . util . IDENT_11 s = new java . util . METHOD_14 ( content , com . IDENT_12 . jenkins . client . IDENT_13 . IDENT_14 ) ; java . lang . StringBuffer sb = new java . lang . StringBuffer ( ) ; while ( s . hasNext ( ) ) { sb . append ( s . next ( ) ) ; } return sb . toString ( ) ; } finally { org . apache . http . util . IDENT_15 . METHOD_15 ( response . METHOD_12 ( ) ) ; } }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_1 ) 