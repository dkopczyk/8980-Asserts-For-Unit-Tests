METHOD_0 ( ) { java . lang . String [ ] [ ] IDENT_0 = new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_0 7 , STRING_0 0 , STRING_1 } , new java . lang . String [ ] { STRING_2 , STRING_3 , STRING_4 } , new java . lang . String [ ] { STRING_5 , STRING_6 , STRING_0 0 } , new java . lang . String [ ] { STRING_0 9 , STRING_6 , STRING_7 } , new java . lang . String [ ] { STRING_0 6 , STRING_0 0 , STRING_0 2 } , new java . lang . String [ ] { STRING_0 1 , STRING_0 , STRING_2 0 } , new java . lang . String [ ] { STRING_8 , STRING_2 0 , STRING_0 3 } , new java . lang . String [ ] { STRING_0 4 , STRING_9 , STRING_0 5 } , new java . lang . String [ ] { STRING_0 8 , STRING_0 0 , STRING_0 0 } } ; java . lang . String IDENT_1 = METHOD_1 ( IDENT_0 ) ; java . io . InputStream stream = new java . io . ByteArrayInputStream ( IDENT_1 . getBytes ( IDENT_2 . UTF_8 ) ) ; java . io . IDENT_3 IDENT_4 = new java . io . METHOD_2 ( new java . io . METHOD_3 ( stream , UTF_8 ) ) ; java . util . Set < java . lang . String > IDENT_5 = new java . util . HashSet ( ) ; IDENT_5 . add ( STRING_0 7 ) ; IDENT_5 . add ( STRING_0 9 ) ; java . util . IDENT_6 < java . lang . String , java . util . List < com . IDENT_7 . IDENT_8 . utils . IDENT_9 > > expected = new java . util . IDENT_10 < java . lang . String , java . util . List < com . IDENT_7 . IDENT_8 . utils . IDENT_9 > > ( ) { { put ( STRING_0 7 , new java . util . ArrayList < com . IDENT_7 . IDENT_8 . utils . IDENT_9 > ( ) { { add ( new com . IDENT_7 . IDENT_8 . utils . METHOD_4 ( STRING_0 7 , 10 , INT_0 ) ) ; } } ) ; put ( STRING_0 9 , new java . util . ArrayList < com . IDENT_7 . IDENT_8 . utils . METHOD_4 > ( ) { { add ( new com . IDENT_7 . IDENT_8 . utils . METHOD_4 ( STRING_0 9 , 9 , INT_1 ) ) ; } } ) ; } } ; java . util . IDENT_6 < java . lang . String , java . util . List < com . IDENT_7 . IDENT_8 . utils . METHOD_4 > > actual = com . IDENT_7 . IDENT_8 . utils . IDENT_11 . METHOD_5 ( IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Map , java . util . Map ) { if ( ( first . size ( ) ) != ( IDENT_12 . size ( ) ) ) { return false ; } for ( java . lang . String key : first . METHOD_7 ( ) ) { if ( ! ( IDENT_12 . containsKey ( key ) ) ) { return false ; } if ( ! ( com . IDENT_7 . IDENT_8 . utils . IDENT_13 . METHOD_8 ( first . get ( key ) , IDENT_12 . get ( key ) ) ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( com . IDENT_7 . IDENT_8 . utils . IDENT_13 . METHOD_6 ( actual , expected ) ) 