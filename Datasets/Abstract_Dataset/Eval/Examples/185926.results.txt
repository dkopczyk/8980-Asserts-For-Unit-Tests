METHOD_0 ( ) { java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > expected = new java . util . ArrayList ( ) ; java . lang . String response = "" ; server . METHOD_1 ( IDENT_0 . IDENT_1 . IDENT_2 . test . unit . IDENT_5 . IDENT_6 , STRING_0 ) . METHOD_2 ( response ) ; java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > actual = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( device ) . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { try ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 input = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_5 ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 ( device . METHOD_7 ( STRING_1 , STRING_2 , STRING_3 ) , java . nio . IDENT_8 . IDENT_9 . UTF_8 ) ) ) { java . util . ArrayList < java . lang . IDENT_4 > result = new java . util . ArrayList ( ) ; java . lang . String line ; while ( ( line = input . METHOD_8 ( ) ) != null ) { final java . lang . String IDENT_10 = STRING_4 ; if ( line . startsWith ( IDENT_10 ) ) { result . add ( new java . lang . METHOD_9 ( line . substring ( IDENT_10 . length ( ) ) ) ) ; } } return result ; } }
org . junit . Assert . assertEquals ( expected , actual ) 