METHOD_0 ( ) { org . springframework . cloud . stream . schema . IDENT_0 client = mock ( org . springframework . cloud . stream . schema . IDENT_0 . class ) ; org . apache . avro . Schema schema = load ( STRING_0 ) ; when ( client . METHOD_1 ( any ( ) ) ) . thenReturn ( 10 ) ; when ( client . METHOD_2 ( eq ( 10 ) ) ) . thenReturn ( schema ) ; org . springframework . cloud . stream . codec . avro . IDENT_1 codec = new org . springframework . cloud . stream . codec . avro . METHOD_3 ( ) ; codec . METHOD_4 ( client ) ; codec . METHOD_5 ( new org . springframework . core . io . support . METHOD_6 ( new org . springframework . context . annotation . METHOD_7 ( ) ) ) ; codec . METHOD_8 ( new org . springframework . cloud . stream . codec . avro . METHOD_9 ( ) ) ; codec . init ( ) ; org . apache . avro . IDENT_2 . IDENT_3 record = new org . apache . avro . IDENT_2 . IDENT_4 . METHOD_10 ( schema ) ; record . put ( STRING_1 , "1" ) ; record . put ( STRING_2 , STRING_3 ) ; record . put ( STRING_4 , java . lang . System . currentTimeMillis ( ) ) ; byte [ ] results = codec . encode ( record ) ; org . springframework . cloud . stream . IDENT_5 . Status status = codec . decode ( results , org . springframework . cloud . stream . IDENT_5 . Status . class ) ; "<AssertPlaceHolder>" ; } get ( int ) { switch ( IDENT_6 ) { case 0 : return name ; case 1 : return IDENT_7 ; case 2 : return IDENT_8 ; default : throw new org . apache . avro . METHOD_11 ( STRING_5 ) ; } }
org . junit . Assert . assertEquals ( record . get ( STRING_1 ) . toString ( ) , status . getId ( ) ) 