METHOD_0 ( ) { base . IDENT_0 IDENT_1 = mock ( base . IDENT_0 . class ) ; base . IDENT_2 IDENT_3 = mock ( base . IDENT_2 . class ) ; when ( IDENT_3 . test ( IDENT_1 ) ) . thenReturn ( true ) ; base . IDENT_4 IDENT_5 = mock ( base . IDENT_4 . class ) ; when ( IDENT_5 . METHOD_1 ( ) ) . thenReturn ( true ) ; IDENT_6 . IDENT_7 IDENT_8 = new IDENT_6 . METHOD_2 ( IDENT_1 , IDENT_5 , IDENT_3 ) ; boolean result = IDENT_8 . process ( ) ; verify ( IDENT_5 , times ( 1 ) ) . run ( ) ; verify ( IDENT_5 , times ( 1 ) ) . METHOD_1 ( ) ; verify ( IDENT_5 , times ( 1 ) ) . METHOD_3 ( ) ; verify ( IDENT_3 , times ( 1 ) ) . test ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } test ( base . IDENT_0 ) { try { java . lang . String value = IDENT_1 . METHOD_4 ( ) [ 0 ] ; java . lang . String url = ( ( ( ( ( STRING_0 + ( IDENT_1 . METHOD_5 ( ) ) ) + STRING_1 ) + ( IDENT_1 . METHOD_6 ( ) ) ) + "/" ) + STRING_2 ) + value ; java . lang . String IDENT_9 = IDENT_10 . http . IDENT_11 . METHOD_7 ( url ) . METHOD_8 ( ) ; return IDENT_9 . equals ( value ) ; } catch ( java . io . IOException e ) { throw new base . METHOD_9 ( e ) ; } }
org . junit . Assert . assertTrue ( result ) 