METHOD_0 ( ) { java . util . Set < java . lang . String > IDENT_0 = IDENT_1 . METHOD_1 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_4 ) { if ( ( IDENT_5 == null ) || ( IDENT_5 . isEmpty ( ) ) ) { return java . util . Collections . METHOD_2 ( ) ; } org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_4 IDENT_6 = IDENT_5 . METHOD_3 ( ) ; if ( IDENT_7 . containsKey ( IDENT_6 ) ) { return IDENT_7 . get ( IDENT_6 ) ; } else { org . apache . jackrabbit . oak . api . IDENT_8 IDENT_9 = METHOD_4 ( ) ; if ( ! ( IDENT_9 . exists ( ) ) ) { return java . util . Collections . METHOD_2 ( ) ; } if ( IDENT_7 . isEmpty ( ) ) { for ( org . apache . jackrabbit . oak . api . IDENT_8 child : IDENT_9 . METHOD_5 ( ) ) { IDENT_7 . put ( org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_4 . getInstance ( child ) , java . util . Collections . METHOD_6 ( child . getName ( ) ) ) ; } } java . util . Set < java . lang . String > IDENT_10 ; if ( IDENT_7 . containsKey ( IDENT_6 ) ) { IDENT_10 = IDENT_7 . get ( IDENT_6 ) ; } else { IDENT_10 = new java . util . HashSet ( ) ; java . util . Set < java . lang . String > IDENT_11 = new java . util . HashSet ( ) ; for ( org . apache . jackrabbit . oak . api . IDENT_8 child : IDENT_9 . METHOD_5 ( ) ) { org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_4 IDENT_2 = org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_4 . getInstance ( child ) ; if ( IDENT_6 . METHOD_7 ( IDENT_2 ) ) { IDENT_10 . add ( child . getName ( ) ) ; if ( child . METHOD_8 ( org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_12 ) ) { IDENT_11 . addAll ( org . apache . jackrabbit . oak . spi . security . IDENT_3 . IDENT_13 . METHOD_9 ( child ) . METHOD_10 ( ) ) ; } } } IDENT_10 . METHOD_11 ( IDENT_11 ) ; IDENT_7 . put ( IDENT_6 , com . google . common . collect . IDENT_14 . METHOD_12 ( IDENT_10 ) ) ; } return IDENT_10 ; } }
org . junit . Assert . assertSame ( IDENT_0 , IDENT_1 . METHOD_1 ( IDENT_2 ) ) 