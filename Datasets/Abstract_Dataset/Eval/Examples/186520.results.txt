METHOD_0 ( ) { java . util . Properties IDENT_0 = new java . util . Properties ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 ) ; com . IDENT_1 . IDENT_2 . IDENT_3 session = com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . METHOD_1 ( STRING_2 , STRING_3 , STRING_4 , INT_0 , IDENT_0 ) ; final java . lang . String IDENT_7 = java . lang . System . getProperty ( STRING_5 ) ; final java . lang . String IDENT_8 = java . lang . String . format ( STRING_6 , IDENT_7 , File . IDENT_9 ) ; boolean IDENT_10 = com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . METHOD_2 ( session , IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( com . IDENT_1 . IDENT_2 . IDENT_3 , java . lang . String ) { if ( session == null ) { com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . warn ( STRING_7 ) ; return false ; } if ( ( IDENT_8 == null ) || ( IDENT_8 . isEmpty ( ) ) ) { com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . warn ( STRING_8 ) ; return false ; } try { session . connect ( ) ; } catch ( com . IDENT_1 . IDENT_2 . IDENT_11 e ) { com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . error ( STRING_9 , session . METHOD_3 ( ) , e ) ; throw e ; } finally { if ( ( session != null ) && ( session . METHOD_4 ( ) ) ) { session . METHOD_5 ( ) ; } } com . IDENT_1 . IDENT_2 . IDENT_12 IDENT_13 = null ; try { IDENT_13 = com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . METHOD_6 ( IDENT_8 ) ; } catch ( com . IDENT_1 . IDENT_2 . IDENT_11 e ) { com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . error ( ( STRING_10 + STRING_11 ) , IDENT_8 , e ) ; throw e ; } com . IDENT_1 . IDENT_2 . IDENT_14 IDENT_15 = session . METHOD_7 ( ) ; if ( IDENT_13 != null ) { if ( ( IDENT_13 . METHOD_8 ( IDENT_15 . METHOD_3 ( ) , IDENT_15 . getKey ( ) . getBytes ( ) ) ) == ( com . IDENT_1 . IDENT_2 . IDENT_12 . IDENT_16 ) ) { IDENT_13 . add ( IDENT_15 , null ) ; com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . debug ( STRING_12 , IDENT_15 . METHOD_3 ( ) ) ; } else { com . vmware . IDENT_4 . IDENT_5 . common . util . IDENT_6 . logger . debug ( ( STRING_13 + STRING_14 ) , IDENT_15 . METHOD_3 ( ) , IDENT_8 ) ; } return true ; } return false ; }
org . junit . Assert . assertTrue ( IDENT_10 ) 