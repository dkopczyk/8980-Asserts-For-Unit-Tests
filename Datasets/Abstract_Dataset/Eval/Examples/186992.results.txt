METHOD_0 ( ) { model = METHOD_1 ( ) ; final com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_2 expected = METHOD_2 ( ) . get ( 0 ) ; com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_3 IDENT_4 = new com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_3 . Builder ( ) . METHOD_3 ( expected . METHOD_4 ( ) ) . METHOD_5 ( expected . METHOD_6 ( ) ) . METHOD_7 ( model . METHOD_8 ( ) ) . build ( ) ; service . METHOD_9 ( IDENT_4 ) . execute ( ) . METHOD_10 ( ) ; com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_5 IDENT_6 = new com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_5 . Builder ( ) . text ( expected . METHOD_4 ( ) ) . METHOD_11 ( IDENT_5 . IDENT_7 . IDENT_8 ) . accept ( IDENT_5 . IDENT_9 . IDENT_10 ) . build ( ) ; final java . io . InputStream IDENT_11 = service . METHOD_12 ( IDENT_6 ) . execute ( ) . METHOD_10 ( ) ; com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_5 IDENT_12 = new com . ibm . IDENT_0 . IDENT_1 . v1 . model . IDENT_5 . Builder ( ) . text ( expected . METHOD_4 ( ) ) . METHOD_11 ( IDENT_5 . IDENT_7 . IDENT_8 ) . accept ( IDENT_5 . IDENT_9 . IDENT_10 ) . METHOD_7 ( model . METHOD_8 ( ) ) . build ( ) ; final java . io . InputStream IDENT_13 = service . METHOD_12 ( IDENT_12 ) . execute ( ) . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( java . io . InputStream , java . io . InputStream ) { try { int IDENT_14 ; int IDENT_15 ; do { IDENT_14 = IDENT_16 . read ( ) ; IDENT_15 = IDENT_17 . read ( ) ; } while ( ( IDENT_14 == IDENT_15 ) && ( IDENT_14 != ( - 1 ) ) ) ; return IDENT_14 == IDENT_15 ; } finally { try { IDENT_16 . close ( ) ; IDENT_17 . close ( ) ; } catch ( java . lang . Exception e ) { } } }
org . junit . Assert . assertFalse ( com . ibm . IDENT_0 . common . TestUtils . METHOD_13 ( IDENT_11 , IDENT_13 ) ) 