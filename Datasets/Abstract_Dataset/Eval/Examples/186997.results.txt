METHOD_0 ( ) { java . util . UUID IDENT_0 = java . util . UUID . METHOD_1 ( ) ; java . util . UUID IDENT_1 = java . util . UUID . METHOD_1 ( ) ; long now = java . lang . System . currentTimeMillis ( ) ; java . lang . String format = STRING_0 ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_2 . add ( STRING_1 ) ; IDENT_2 . add ( STRING_2 ) ; java . lang . String IDENT_3 = com . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_2 ) ; com . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_9 task = new com . IDENT_4 . IDENT_7 . IDENT_8 . METHOD_3 ( IDENT_0 , IDENT_1 , now , format , IDENT_3 ) ; METHOD_4 ( task ) ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_5 ( IDENT_11 , IDENT_1 , now , format , IDENT_3 ) ) . andReturn ( javax . ws . rs . core . Response . status ( Response . Status . IDENT_12 ) . build ( ) ) . METHOD_6 ( ) ; org . easymock . EasyMock . replay ( IDENT_10 ) ; boolean IDENT_13 = false ; try { task . execute ( null ) ; } catch ( java . util . concurrent . IDENT_14 e ) { IDENT_13 = true ; } "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_10 ) ; } build ( ) { switch ( IDENT_15 ) { case IDENT_16 : return new com . IDENT_4 . IDENT_7 . auth . METHOD_7 ( ) ; case IDENT_17 : return new com . IDENT_4 . IDENT_7 . auth . METHOD_8 ( IDENT_18 ) ; case IDENT_19 : return new com . IDENT_4 . IDENT_7 . auth . METHOD_9 ( IDENT_20 , IDENT_21 , IDENT_22 , IDENT_23 , IDENT_24 ) ; case IDENT_25 : return new com . IDENT_4 . IDENT_7 . auth . METHOD_10 ( IDENT_20 , IDENT_21 , IDENT_22 , IDENT_23 , IDENT_24 ) ; default : throw new java . lang . IllegalStateException ( STRING_3 ) ; } }
org . junit . Assert . assertTrue ( IDENT_13 ) 