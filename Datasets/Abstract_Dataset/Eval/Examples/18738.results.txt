METHOD_0 ( ) { java . util . UUID a = java . util . UUID . METHOD_1 ( ) ; java . util . UUID b = java . util . UUID . METHOD_1 ( ) ; java . util . UUID c = java . util . UUID . METHOD_1 ( ) ; java . util . UUID d = java . util . UUID . METHOD_1 ( ) ; METHOD_2 ( a ) ; METHOD_3 ( b , a ) ; METHOD_3 ( c , a ) ; METHOD_3 ( d , b , c ) ; IDENT_0 . METHOD_4 ( ) ; java . lang . String file = IDENT_0 . METHOD_5 ( ) . METHOD_6 ( ) . iterator ( ) . next ( ) ; java . util . Map < java . util . UUID , java . util . Set < java . util . UUID > > graph = IDENT_0 . METHOD_7 ( file ) ; java . util . Map < java . util . UUID , java . util . Set < java . util . UUID > > expected = new java . util . HashMap ( ) ; expected . put ( a , java . util . Collections . METHOD_8 ( ) ) ; expected . put ( b , java . util . Collections . METHOD_9 ( a ) ) ; expected . put ( c , java . util . Collections . METHOD_9 ( a ) ) ; expected . put ( d , METHOD_10 ( b , c ) ) ; "<AssertPlaceHolder>" ; } put ( java . util . Map , java . lang . IDENT_1 , java . lang . String ) { java . lang . String IDENT_2 = ( METHOD_11 ( value ) ) ? value . substring ( 1 ) : value ; for ( java . lang . String key : keys ) { java . util . Set < java . lang . String > values = map . get ( key ) ; if ( values == null ) { values = METHOD_10 ( ) ; } values . add ( IDENT_2 ) ; map . put ( key , values ) ; } }
org . junit . Assert . assertEquals ( expected , graph ) 