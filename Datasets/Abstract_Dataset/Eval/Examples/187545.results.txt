METHOD_0 ( ) { final IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 data = new IDENT_0 . edu . IDENT_1 . IDENT_2 . METHOD_1 ( ( ( ( IDENT_4 ) * ( IDENT_5 ) ) * ( IDENT_6 ) ) ) ; java . lang . String msg = ( java . lang . String . format ( org . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 , IDENT_11 , IDENT_4 , IDENT_5 , IDENT_6 ) ) + STRING_0 ; for ( int s = 0 ; s < ( IDENT_4 ) ; s ++ ) { for ( int r = 0 ; r < ( IDENT_5 ) ; r ++ ) { for ( int c = 0 ; c < ( 2 * ( IDENT_6 ) ) ; c ++ ) { final double expected = random . METHOD_2 ( ) ; try { IDENT_12 . METHOD_3 ( expected , s , r , c , data , 0 ) ; final double actual = IDENT_12 . METHOD_4 ( s , r , c , data , 0 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IllegalArgumentException e ) { } } } } } METHOD_4 ( long , long , long , IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_13 , long ) { final long i = METHOD_5 ( s , r , c ) ; if ( i >= 0 ) { return IDENT_14 . METHOD_6 ( ( pos + i ) ) ; } else if ( i > ( Long . IDENT_15 ) ) { return - ( IDENT_14 . METHOD_6 ( ( pos - i ) ) ) ; } else { return org . IDENT_7 . IDENT_8 . IDENT_16 . IDENT_17 ; } }
org . junit . Assert . assertEquals ( java . lang . String . format ( msg , s , r , c ) , expected , actual , 0.0 ) 