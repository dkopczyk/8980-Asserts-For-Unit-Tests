METHOD_0 ( ) { org . apache . jackrabbit . oak . plugins . document . IDENT_0 IDENT_1 = IDENT_2 . METHOD_1 ( ) . update ( IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_3 builder = new org . apache . jackrabbit . oak . plugins . document . METHOD_4 ( IDENT_2 , IDENT_1 ) ; org . apache . jackrabbit . oak . plugins . document . Path path = org . apache . jackrabbit . oak . plugins . document . Path . METHOD_5 ( STRING_0 ) ; builder . METHOD_6 ( path ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_4 IDENT_5 = IDENT_2 . METHOD_2 ( ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_6 c = builder . build ( IDENT_5 ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_7 IDENT_8 = c . METHOD_7 ( path ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_7 . Operation op = IDENT_8 . METHOD_8 ( ) . get ( new org . apache . jackrabbit . oak . plugins . document . IDENT_7 . METHOD_9 ( STRING_1 , IDENT_5 ) ) ; "<AssertPlaceHolder>" ; } get ( IDENT_9 , int ) { int hashCode = key . hashCode ( ) ; for ( int k = 0 ; k <= ( IDENT_10 ) ; k ++ ) { int i = project ( hashCode , k ) ; org . apache . jackrabbit . oak . IDENT_11 . file . IDENT_12 . Entry < ? , ? > entry = IDENT_13 [ i ] ; if ( ( IDENT_14 == ( entry . IDENT_14 ) ) && ( key . equals ( entry . key ) ) ) { if ( ( entry . IDENT_15 ) < ( IDENT_16 . MAX_VALUE ) ) { ( IDENT_17 [ ( ( entry . IDENT_15 ) - ( IDENT_16 . IDENT_18 ) ) ] ) OP_0 ; ( entry . IDENT_15 ) ++ ; ( IDENT_17 [ ( ( entry . IDENT_15 ) - ( IDENT_16 . IDENT_18 ) ) ] ) ++ ; } ( IDENT_19 ) ++ ; return ( ( IDENT_20 ) ( entry . value ) ) ; } } ( IDENT_21 ) ++ ; return null ; }
org . junit . Assert . assertNotNull ( op ) 