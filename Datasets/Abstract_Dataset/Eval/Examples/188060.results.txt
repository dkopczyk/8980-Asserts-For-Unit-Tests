METHOD_0 ( ) { org . apache . camel . IDENT_0 IDENT_1 = new org . apache . camel . impl . METHOD_1 ( ) ; IDENT_1 . METHOD_2 ( new org . apache . camel . builder . METHOD_3 ( ) { @ org . wildfly . camel . test . IDENT_2 . Override public void METHOD_4 ( ) throws org . wildfly . camel . test . IDENT_2 . Exception { from ( STRING_0 ) . METHOD_5 ( METHOD_6 ( STRING_1 ) ) ; } } ) ; IDENT_1 . start ( ) ; try { org . apache . camel . IDENT_3 template = IDENT_1 . METHOD_7 ( ) ; org . wildfly . camel . test . common . http . IDENT_4 . get ( STRING_2 ) . METHOD_8 ( false ) . METHOD_9 ( ) ; java . lang . String IDENT_5 = ( java . lang . System . getProperty ( STRING_3 ) ) + STRING_4 ; java . lang . System . setProperty ( STRING_5 , STRING_6 ) ; java . lang . System . setProperty ( STRING_7 , IDENT_5 ) ; java . lang . String result = template . METHOD_10 ( STRING_8 , null , java . lang . String . class ) ; "<AssertPlaceHolder>" ; } finally { java . lang . System . METHOD_11 ( STRING_5 ) ; java . lang . System . METHOD_11 ( STRING_7 ) ; IDENT_1 . METHOD_12 ( ) ; } } METHOD_9 ( ) { java . util . concurrent . IDENT_6 < org . wildfly . camel . test . common . http . IDENT_4 . IDENT_7 > task = new java . util . concurrent . IDENT_6 < org . wildfly . camel . test . common . http . IDENT_4 . IDENT_7 > ( ) { @ org . wildfly . camel . test . common . http . Override public org . wildfly . camel . test . common . http . IDENT_4 . IDENT_7 call ( ) throws org . wildfly . camel . test . common . http . Exception { java . net . URL url = new java . net . URL ( IDENT_8 ) ; final java . net . IDENT_9 conn = ( ( java . net . IDENT_9 ) ( url . METHOD_13 ( ) ) ) ; conn . METHOD_14 ( true ) ; conn . METHOD_15 ( method ) ; conn . METHOD_16 ( IDENT_10 ) ; java . util . Set < java . lang . String > IDENT_11 = headers . METHOD_17 ( ) ; for ( java . lang . String IDENT_12 : IDENT_11 ) { conn . METHOD_18 ( IDENT_12 , headers . get ( IDENT_12 ) ) ; } if ( ( method . equals ( STRING_9 ) ) || ( method . equals ( STRING_10 ) ) ) { conn . METHOD_19 ( true ) ; } if ( ( ( content ) != null ) && ( ! ( content . isEmpty ( ) ) ) ) { java . io . IDENT_13 IDENT_14 = conn . METHOD_20 ( ) ; IDENT_14 . write ( content . getBytes ( STRING_11 ) ) ; IDENT_14 . METHOD_21 ( ) ; IDENT_14 . close ( ) ; } return METHOD_22 ( conn ) ; } } ; return METHOD_23 ( task , IDENT_15 , IDENT_16 ) ; }
org . junit . Assert . assertEquals ( STRING_1 , result ) 