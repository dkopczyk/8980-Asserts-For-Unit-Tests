METHOD_0 ( ) { final javax . security . IDENT_0 . IDENT_1 factory = METHOD_1 ( org . wildfly . security . IDENT_0 . IDENT_2 . IDENT_3 . class ) ; final javax . security . IDENT_0 . IDENT_4 IDENT_5 = factory . METHOD_2 ( org . wildfly . security . IDENT_0 . IDENT_2 . IDENT_6 . IDENT_7 , org . wildfly . security . IDENT_0 . IDENT_2 . IDENT_6 . IDENT_8 , "test" , STRING_0 , METHOD_3 ( ) , null ) ; try { IDENT_5 . METHOD_4 ( new byte [ ] { } , 0 , 0 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . lang . IllegalStateException e ) { } try { IDENT_5 . METHOD_5 ( new byte [ ] { } , 0 , 0 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . lang . IllegalStateException e ) { } IDENT_5 . METHOD_6 ( org . wildfly . security . IDENT_0 . IDENT_2 . IDENT_6 . IDENT_9 ) ; "<AssertPlaceHolder>" ; try { IDENT_5 . METHOD_4 ( new byte [ ] { } , 0 , 0 ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( java . lang . IllegalStateException e ) { } try { IDENT_5 . METHOD_5 ( new byte [ ] { } , 0 , 0 ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( java . lang . IllegalStateException e ) { } } METHOD_7 ( ) { return delegate . METHOD_7 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_5 . METHOD_7 ( ) ) 