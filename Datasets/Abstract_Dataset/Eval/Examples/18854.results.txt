METHOD_0 ( ) { org . apache . jackrabbit . oak . plugins . document . IDENT_0 IDENT_1 = METHOD_1 ( ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_2 store = new org . apache . jackrabbit . oak . plugins . document . IDENT_3 . Builder ( ) . METHOD_2 ( IDENT_1 ) . METHOD_3 ( 0 ) . METHOD_4 ( ) ; org . apache . jackrabbit . oak . plugins . document . IDENT_4 IDENT_5 = org . apache . jackrabbit . oak . plugins . document . IDENT_4 . METHOD_5 ( 0 ) ; java . util . List < org . apache . jackrabbit . oak . plugins . document . IDENT_6 > IDENT_7 = new java . util . ArrayList < org . apache . jackrabbit . oak . plugins . document . IDENT_6 > ( ) ; for ( int i = 0 ; i < ( ( IDENT_3 . IDENT_8 ) * 2 ) ; i ++ ) { org . apache . jackrabbit . oak . plugins . document . IDENT_9 n = new org . apache . jackrabbit . oak . plugins . document . METHOD_6 ( store , org . apache . jackrabbit . oak . plugins . document . Path . METHOD_7 ( ( STRING_0 + i ) ) , new org . apache . jackrabbit . oak . plugins . document . METHOD_8 ( IDENT_5 ) ) ; IDENT_7 . add ( n . METHOD_9 ( IDENT_5 ) ) ; } IDENT_1 . create ( Collection . IDENT_10 , IDENT_7 ) ; java . util . List < org . apache . jackrabbit . oak . plugins . document . IDENT_11 > IDENT_12 = IDENT_1 . query ( Collection . IDENT_10 , org . apache . jackrabbit . oak . plugins . document . util . Utils . METHOD_10 ( Path . IDENT_13 ) , org . apache . jackrabbit . oak . plugins . document . util . Utils . METHOD_11 ( Path . IDENT_13 ) , IDENT_3 . IDENT_8 ) ; "<AssertPlaceHolder>" ; store . METHOD_12 ( ) ; } size ( ) { return size ; }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_8 , IDENT_12 . size ( ) ) 