compareTo ( ) { org . apache . jackrabbit . oak . plugins . document . Path IDENT_0 = org . apache . jackrabbit . oak . plugins . document . Path . METHOD_0 ( STRING_0 ) ; org . apache . jackrabbit . oak . plugins . document . Path IDENT_1 = org . apache . jackrabbit . oak . plugins . document . Path . METHOD_0 ( STRING_1 ) ; org . apache . jackrabbit . oak . plugins . document . Path IDENT_2 = org . apache . jackrabbit . oak . plugins . document . Path . METHOD_0 ( STRING_2 ) ; java . util . List < org . apache . jackrabbit . oak . plugins . document . Path > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( root ) ; IDENT_3 . add ( IDENT_0 ) ; IDENT_3 . add ( IDENT_4 ) ; IDENT_3 . add ( IDENT_5 ) ; IDENT_3 . add ( IDENT_1 ) ; IDENT_3 . add ( IDENT_6 ) ; IDENT_3 . add ( IDENT_7 ) ; IDENT_3 . add ( IDENT_8 ) ; IDENT_3 . add ( IDENT_2 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { java . util . Collections . METHOD_1 ( IDENT_3 ) ; java . util . Collections . METHOD_2 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( java . util . List [ ] ) { java . util . List < java . util . Iterator < java . lang . Integer > > IDENT_9 = com . google . common . collect . Lists . newArrayList ( ) ; for ( java . util . List < java . lang . Integer > list : IDENT_10 ) { IDENT_9 . add ( list . iterator ( ) ) ; } final java . util . Iterator < java . util . Iterator < java . lang . Integer > > it = IDENT_9 . iterator ( ) ; org . apache . jackrabbit . oak . plugins . document . util . IDENT_11 < java . lang . Integer > METHOD_2 = new org . apache . jackrabbit . oak . plugins . document . util . IDENT_11 < java . lang . Integer > ( new java . util . IDENT_12 < java . lang . Integer > ( ) { @ org . apache . jackrabbit . oak . plugins . document . util . Override public int compare ( java . lang . Integer IDENT_13 , java . lang . Integer IDENT_14 ) { return IDENT_13 . compareTo ( IDENT_14 ) ; } } ) { @ org . apache . jackrabbit . oak . plugins . document . util . Override public java . util . Iterator < java . lang . Integer > METHOD_3 ( ) { return it . hasNext ( ) ? it . next ( ) : null ; } } ; java . util . List < java . lang . Integer > IDENT_15 = new java . util . ArrayList < java . lang . Integer > ( ) ; while ( METHOD_2 . hasNext ( ) ) { IDENT_15 . add ( METHOD_2 . next ( ) ) ; } return IDENT_15 ; }
org . junit . Assert . assertThat ( IDENT_3 , org . hamcrest . Matchers . contains ( root , IDENT_0 , IDENT_4 , IDENT_5 , IDENT_6 , IDENT_1 , IDENT_7 , IDENT_8 , IDENT_2 ) ) 