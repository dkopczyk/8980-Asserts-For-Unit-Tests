METHOD_0 ( ) { java . util . List < iot . IDENT_0 . query . result . IDENT_1 > errors ; iot . IDENT_0 . domain . IDENT_2 IDENT_3 = iot . IDENT_0 . domain . IDENT_4 . METHOD_1 ( test . IDENT_5 . IDENT_6 . IDENT_7 , test . IDENT_5 . IDENT_6 . IDENT_8 ) ; iot . IDENT_0 . domain . IDENT_2 IDENT_9 ; test . IDENT_5 . IDENT_10 . IDENT_11 IDENT_12 = new test . IDENT_5 . IDENT_10 . METHOD_2 ( ) ; test . IDENT_5 . IDENT_10 . METHOD_2 IDENT_13 ; boolean equals ; java . util . List < java . lang . Object > IDENT_14 = new java . util . ArrayList < java . lang . Object > ( ) ; java . util . List < java . lang . Object > IDENT_15 = new java . util . ArrayList < java . lang . Object > ( ) ; java . util . List < java . lang . Object > IDENT_16 = new java . util . ArrayList < java . lang . Object > ( ) ; java . util . List < java . lang . Object > IDENT_17 = new java . util . ArrayList < java . lang . Object > ( ) ; IDENT_17 . add ( new test . IDENT_5 . IDENT_10 . METHOD_3 ( STRING_0 ) ) ; IDENT_17 . add ( IDENT_15 ) ; IDENT_17 . add ( IDENT_15 ) ; IDENT_17 . add ( IDENT_14 ) ; IDENT_16 . add ( new test . IDENT_5 . IDENT_10 . METHOD_3 ( STRING_1 ) ) ; IDENT_16 . add ( IDENT_17 ) ; IDENT_16 . add ( IDENT_15 ) ; IDENT_16 . add ( IDENT_16 ) ; IDENT_15 . add ( new test . IDENT_5 . IDENT_10 . METHOD_3 ( STRING_2 ) ) ; IDENT_15 . add ( IDENT_16 ) ; IDENT_14 . add ( new test . IDENT_5 . IDENT_10 . METHOD_3 ( STRING_3 ) ) ; IDENT_14 . add ( IDENT_15 ) ; IDENT_12 . METHOD_4 ( IDENT_14 ) ; errors = test . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_5 ( ) ; if ( ( errors . size ( ) ) > 0 ) { METHOD_6 ( errors ) ; throw new iot . IDENT_0 . query . result . METHOD_7 ( errors ) ; } errors = IDENT_3 . store ( IDENT_12 ) ; if ( ( errors . size ( ) ) > 0 ) { METHOD_6 ( errors ) ; throw new iot . IDENT_0 . query . result . METHOD_7 ( errors ) ; } iot . IDENT_0 . domain . IDENT_18 IDENT_19 = IDENT_3 . METHOD_8 ( IDENT_12 ) ; IDENT_9 = iot . IDENT_0 . domain . IDENT_4 . METHOD_1 ( test . IDENT_5 . IDENT_6 . IDENT_7 , test . IDENT_5 . IDENT_6 . IDENT_8 ) ; IDENT_13 = IDENT_9 . METHOD_9 ( test . IDENT_5 . IDENT_10 . METHOD_2 . class , ( - 1 ) , IDENT_19 . getId ( ) ) ; equals = test . IDENT_5 . util . IDENT_20 . METHOD_10 ( IDENT_12 , IDENT_13 ) ; "<AssertPlaceHolder>" ; return ; } METHOD_10 ( test . IDENT_5 . IDENT_10 . METHOD_2 , test . IDENT_5 . IDENT_10 . METHOD_2 ) { return test . IDENT_5 . util . IDENT_20 . METHOD_10 ( IDENT_21 , IDENT_22 , new java . util . ArrayList < test . IDENT_5 . util . IDENT_23 > ( ) ) ; }
org . junit . Assert . assertTrue ( equals ) 