METHOD_0 ( ) { double [ ] [ ] IDENT_0 = new double [ ] [ ] { new double [ ] { 1.0 , 1.0 } , new double [ ] { 2.0 , 2.0 } } ; double [ ] x = new double [ ] { FLOAT_0 , FLOAT_1 } ; double [ ] solution = new double [ ] { FLOAT_2 , FLOAT_3 } ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new com . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_0 , true ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = new com . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( x , true ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 IDENT_8 = IDENT_5 . METHOD_3 ( IDENT_7 ) ; for ( int i = 0 ; i < ( IDENT_8 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( int ) { if ( ! ( IDENT_9 ) ) { throw new java . lang . RuntimeException ( STRING_0 ) ; } else if ( i >= ( IDENT_10 ) ) { throw new java . lang . METHOD_4 ( java . lang . String . format ( STRING_1 , i , IDENT_10 ) ) ; } return IDENT_11 [ i ] ; }
org . junit . Assert . assertTrue ( ( ( IDENT_8 . get ( i ) ) == ( solution [ i ] ) ) ) 