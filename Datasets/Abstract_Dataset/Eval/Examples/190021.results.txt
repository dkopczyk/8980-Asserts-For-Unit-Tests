METHOD_0 ( ) { int IDENT_0 = 10 ; final java . util . concurrent . IDENT_1 IDENT_2 = new java . util . concurrent . METHOD_1 ( IDENT_0 ) ; final java . util . concurrent . atomic . IDENT_3 count = new java . util . concurrent . atomic . METHOD_2 ( ) ; final IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = new IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { new java . lang . Thread ( new java . lang . METHOD_4 ( ) { @ IDENT_4 . IDENT_5 . IDENT_6 . Override public void run ( ) { if ( IDENT_8 . METHOD_5 ( client , 1 ) ) count . METHOD_6 ( ) ; IDENT_2 . METHOD_7 ( ) ; } } ) . start ( ) ; } IDENT_2 . METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( IDENT_4 . IDENT_5 . IDENT_9 , java . lang . Object ) { return ( this . METHOD_9 ( client , request ) ) != null ; }
org . junit . Assert . assertEquals ( 1 , count . get ( ) ) 