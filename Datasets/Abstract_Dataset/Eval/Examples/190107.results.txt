METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . io . File IDENT_1 = IDENT_2 . METHOD_1 ( STRING_1 ) ; java . lang . String IDENT_3 = java . lang . String . format ( IDENT_4 , STRING_2 , IDENT_1 , IDENT_0 , STRING_3 ) ; org . IDENT_5 . tools . IDENT_6 . options . IDENT_7 . IDENT_8 = new java . io . METHOD_2 ( IDENT_9 ) ; java . lang . String [ ] IDENT_10 = IDENT_3 . split ( " " ) ; org . IDENT_5 . tools . IDENT_6 . IDENT_11 . METHOD_3 ( IDENT_10 ) ; org . IDENT_5 . tools . IDENT_6 . IDENT_12 . IDENT_13 . IDENT_14 m = new org . IDENT_5 . tools . IDENT_6 . IDENT_12 . IDENT_13 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; IDENT_1 . delete ( ) ; } METHOD_5 ( java . io . File , java . io . File , org . IDENT_5 . tools . IDENT_6 . IDENT_12 . IDENT_13 . IDENT_15 ) { org . IDENT_5 . IDENT_6 . collection . IDENT_16 < org . IDENT_5 . IDENT_6 . IDENT_17 > IDENT_18 = org . IDENT_5 . IDENT_6 . collection . IDENT_19 . read ( IDENT_20 , STRING_4 ) ; org . IDENT_5 . IDENT_6 . collection . IDENT_16 < org . IDENT_5 . IDENT_6 . IDENT_17 > IDENT_21 = org . IDENT_5 . IDENT_6 . collection . IDENT_19 . read ( IDENT_22 , STRING_4 ) ; org . IDENT_5 . IDENT_6 . collection . IDENT_23 < org . IDENT_5 . IDENT_6 . IDENT_17 > IDENT_24 = new org . IDENT_5 . IDENT_6 . collection . IDENT_23 < org . IDENT_5 . IDENT_6 . IDENT_17 > ( ) ; for ( org . IDENT_5 . IDENT_6 . IDENT_17 IDENT_25 : IDENT_18 ) { if ( IDENT_25 . METHOD_6 ( ) ) continue ; IDENT_24 . add ( IDENT_25 ) ; } org . IDENT_5 . IDENT_6 . collection . IDENT_23 < org . IDENT_5 . IDENT_6 . IDENT_17 > IDENT_26 = new org . IDENT_5 . IDENT_6 . collection . IDENT_23 < org . IDENT_5 . IDENT_6 . IDENT_17 > ( ) ; for ( org . IDENT_5 . IDENT_6 . IDENT_17 IDENT_25 : IDENT_21 ) { if ( IDENT_25 . METHOD_6 ( ) ) continue ; IDENT_26 . add ( IDENT_25 ) ; } int IDENT_27 = 10 ; int [ ] IDENT_28 = null ; if ( ( IDENT_24 . size ( ) ) < IDENT_27 ) { IDENT_28 = range ( 0 , IDENT_24 . size ( ) ) ; } else { IDENT_28 = org . IDENT_5 . data . IDENT_29 . METHOD_7 ( IDENT_27 , 0 , IDENT_24 . size ( ) ) ; java . util . Arrays . METHOD_8 ( IDENT_28 ) ; } System . out . format ( STRING_5 , IDENT_28 . length ) ; System . out . format ( STRING_6 , java . util . Arrays . toString ( IDENT_28 ) ) ; int IDENT_30 = ( ( ( IDENT_28 . length ) / 10 ) > 0 ) ? ( IDENT_28 . length ) / 10 : 1 ; for ( int i = 0 ; i < ( IDENT_28 . length ) ; i ++ ) { if ( ( i OP_0 IDENT_30 ) == 0 ) System . out . format ( STRING_7 , i ) ; int index = IDENT_28 [ i ] ; org . IDENT_5 . IDENT_6 . IDENT_17 IDENT_31 = IDENT_24 . get ( index ) ; m . process ( IDENT_31 ) ; org . IDENT_5 . IDENT_6 . IDENT_17 IDENT_32 = IDENT_26 . get ( index ) ; if ( ! ( IDENT_31 . equals ( IDENT_32 ) ) ) return false ; } System . out . println ( ) ; return true ; }
org . junit . Assert . assertTrue ( METHOD_5 ( IDENT_9 , IDENT_1 , m ) ) 