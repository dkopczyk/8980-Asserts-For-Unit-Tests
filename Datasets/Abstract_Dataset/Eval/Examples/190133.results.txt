METHOD_0 ( ) { final com . github . IDENT_0 . engine . IDENT_1 e = new com . github . IDENT_0 . test . engine . IDENT_2 . METHOD_1 ( ) ; final java . util . List < com . github . IDENT_0 . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList < com . github . IDENT_0 . IDENT_3 . IDENT_4 > ( ) ; for ( int i = 0 ; i < 6 ; i ++ ) { final com . github . IDENT_0 . IDENT_3 . IDENT_4 IDENT_3 = org . mockito . Mockito . mock ( com . github . IDENT_0 . IDENT_3 . IDENT_4 . class ) ; org . mockito . Mockito . when ( IDENT_3 . METHOD_2 ( ) ) . thenReturn ( new com . github . IDENT_0 . METHOD_3 ( com . github . IDENT_0 . IDENT_6 . IDENT_7 , java . nio . IDENT_8 . IDENT_9 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; org . mockito . Mockito . when ( IDENT_3 . METHOD_6 ( ) ) . thenReturn ( ( i + STRING_0 ) ) ; org . mockito . Mockito . when ( IDENT_3 . METHOD_7 ( ) ) . thenReturn ( ( ( i OP_0 2 ) == 0 ) ) ; org . mockito . Mockito . when ( IDENT_3 . METHOD_8 ( ) ) . thenReturn ( new com . github . IDENT_0 . util . METHOD_9 ( 1L ) ) ; IDENT_5 . add ( IDENT_3 ) ; } final com . github . IDENT_0 . IDENT_3 . IDENT_10 IDENT_11 = org . mockito . Mockito . mock ( com . github . IDENT_0 . IDENT_3 . IDENT_10 . class ) ; org . mockito . Mockito . when ( IDENT_11 . METHOD_10 ( ) ) . thenReturn ( IDENT_5 ) ; final java . util . List < com . github . IDENT_0 . IDENT_3 . IDENT_12 > res = e . parse ( new com . github . IDENT_0 . engine . METHOD_11 ( "" , IDENT_11 , null , new com . github . IDENT_0 . METHOD_12 ( java . nio . IDENT_8 . IDENT_9 . METHOD_4 ( ) . METHOD_5 ( ) ) ) . METHOD_13 ( com . github . IDENT_0 . test . engine . IDENT_2 . METHOD_13 . METHOD_14 ( ) ) . build ( ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return com . github . IDENT_0 . IDENT_3 . IDENT_13 . class . METHOD_15 ( METHOD_16 ( ) ) . size ( ) ; }
org . junit . Assert . assertEquals ( 4 , res . size ( ) ) 