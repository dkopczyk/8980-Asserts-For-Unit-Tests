METHOD_0 ( ) { try ( IDENT_0 . feature . IDENT_1 . IDENT_2 IDENT_3 = IDENT_0 . feature . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; IDENT_0 . feature . IDENT_1 . IDENT_4 dao = IDENT_3 . METHOD_2 ( ) ) { dao . METHOD_3 ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { dao . METHOD_4 ( java . lang . String . format ( STRING_0 , i ) , java . lang . String . format ( STRING_1 , i ) , java . lang . String . format ( STRING_2 , i ) , new java . util . Date ( ) ) ; } com . IDENT_5 . IDENT_6 . android . IDENT_0 . IDENT_7 < IDENT_0 . feature . IDENT_1 . model . Person > result = dao . select ( 10 ) ; int i = 0 ; result . METHOD_5 ( ) ; while ( result . hasNext ( ) ) { com . IDENT_5 . IDENT_6 . android . IDENT_8 . info ( STRING_3 ) ; com . IDENT_5 . IDENT_6 . android . IDENT_8 . info ( ( STRING_4 + i ) ) ; com . IDENT_5 . IDENT_6 . android . IDENT_8 . info ( STRING_3 ) ; for ( IDENT_0 . feature . IDENT_1 . model . Person item : result . METHOD_6 ( ) ) { com . IDENT_5 . IDENT_6 . android . IDENT_8 . info ( item . toString ( ) ) ; } "<AssertPlaceHolder>" ; i ++ ; result . METHOD_7 ( ) ; } } } get ( int ) { if ( ( i < 0 ) || ( i >= ( size ( ) ) ) ) { throw new java . lang . METHOD_8 ( ( ( ( STRING_5 + i ) + STRING_6 ) + ( size ( ) ) ) ) ; } int IDENT_9 = i - ( IDENT_10 ) ; if ( ( IDENT_9 < 0 ) || ( IDENT_9 >= ( IDENT_11 ) ) ) { return null ; } int IDENT_12 ; int IDENT_13 ; if ( METHOD_9 ( ) ) { IDENT_12 = IDENT_9 / ( IDENT_14 ) ; IDENT_13 = IDENT_9 OP_0 ( IDENT_14 ) ; } else { IDENT_13 = IDENT_9 ; final int IDENT_15 = IDENT_16 . size ( ) ; for ( IDENT_12 = 0 ; IDENT_12 < IDENT_15 ; IDENT_12 ++ ) { int IDENT_17 = IDENT_16 . get ( IDENT_12 ) . size ( ) ; if ( IDENT_17 > IDENT_13 ) { break ; } IDENT_13 OP_1 IDENT_17 ; } } java . util . List < T > page = IDENT_16 . get ( IDENT_12 ) ; if ( ( page == null ) || ( ( page . size ( ) ) == 0 ) ) { return null ; } return page . get ( IDENT_13 ) ; }
org . junit . Assert . assertTrue ( result . METHOD_6 ( ) . get ( 0 ) . name . equals ( java . lang . String . format ( STRING_0 , ( i * 10 ) ) ) ) 