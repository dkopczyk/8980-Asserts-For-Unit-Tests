METHOD_0 ( ) { char [ ] IDENT_0 = STRING_0 . METHOD_1 ( ) ; byte [ ] IDENT_1 = org . IDENT_2 . util . IDENT_3 . METHOD_2 ( STRING_1 ) ; int IDENT_4 = 1000 ; byte [ ] IDENT_5 = org . IDENT_2 . IDENT_0 . IDENT_6 . METHOD_3 ( org . IDENT_2 . IDENT_0 . test . IDENT_7 . IDENT_8 , IDENT_1 , IDENT_0 , IDENT_4 , org . IDENT_2 . IDENT_0 . test . IDENT_7 . IDENT_9 ) ; byte [ ] IDENT_10 = org . IDENT_2 . IDENT_0 . IDENT_6 . METHOD_4 ( org . IDENT_2 . IDENT_0 . test . IDENT_7 . IDENT_8 , IDENT_5 , IDENT_0 , IDENT_4 , org . IDENT_2 . IDENT_0 . test . IDENT_7 . IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . IDENT_2 . IDENT_0 . IDENT_11 , byte [ ] , char [ ] , int , byte [ ] ) { org . IDENT_2 . util . IDENT_12 . METHOD_5 ( IDENT_13 , STRING_2 ) ; org . IDENT_2 . util . IDENT_12 . METHOD_5 ( IDENT_0 , STRING_3 ) ; org . IDENT_2 . util . IDENT_12 . METHOD_6 ( IDENT_4 , STRING_4 ) ; org . IDENT_2 . util . IDENT_12 . METHOD_5 ( IDENT_9 , STRING_5 ) ; javax . crypto . spec . IDENT_14 IDENT_15 = new javax . crypto . spec . METHOD_7 ( IDENT_0 ) ; javax . crypto . IDENT_16 IDENT_17 = javax . crypto . IDENT_16 . getInstance ( IDENT_8 . METHOD_8 ( ) ) ; javax . crypto . IDENT_18 IDENT_19 = IDENT_17 . METHOD_9 ( IDENT_15 ) ; javax . crypto . IDENT_20 IDENT_21 = javax . crypto . IDENT_20 . getInstance ( IDENT_8 . METHOD_8 ( ) ) ; byte IDENT_22 = IDENT_13 [ 0 ] ; int IDENT_23 = ( IDENT_22 < 0 ) ? INT_0 + IDENT_22 : IDENT_22 ; javax . crypto . spec . IDENT_24 IDENT_25 ; if ( IDENT_23 == 0 ) { IDENT_25 = new javax . crypto . spec . METHOD_10 ( IDENT_9 , IDENT_4 ) ; } else { byte [ ] IDENT_26 = new byte [ IDENT_23 ] ; java . lang . System . METHOD_11 ( IDENT_13 , 1 , IDENT_26 , 0 , IDENT_23 ) ; IDENT_25 = new javax . crypto . spec . METHOD_10 ( IDENT_9 , IDENT_4 , new javax . crypto . spec . METHOD_12 ( IDENT_26 ) ) ; } int IDENT_27 = 1 + IDENT_23 ; byte [ ] IDENT_28 = new byte [ ( IDENT_13 . length ) - IDENT_27 ] ; java . lang . System . METHOD_11 ( IDENT_13 , ( 1 + IDENT_23 ) , IDENT_28 , 0 , IDENT_28 . length ) ; IDENT_21 . init ( IDENT_20 . IDENT_29 , IDENT_19 , IDENT_25 ) ; return IDENT_21 . METHOD_13 ( IDENT_28 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_1 , IDENT_10 ) 