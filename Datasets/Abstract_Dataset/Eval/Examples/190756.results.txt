METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( 3 ) ; org . IDENT_1 . common . IDENT_2 . IDENT_3 . client . METHOD_2 ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_5 , org . IDENT_1 . common . IDENT_2 . IDENT_3 . auth , org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 , IDENT_0 ) ; org . IDENT_1 . common . IDENT_2 . IDENT_7 IDENT_8 = org . IDENT_1 . common . IDENT_2 . IDENT_3 . client . METHOD_3 ( IDENT_0 , null , org . IDENT_1 . common . IDENT_2 . IDENT_3 . options ) ; IDENT_8 . start ( ) ; IDENT_8 . METHOD_4 ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 , "/" , IDENT_9 . IDENT_10 , 3 , org . IDENT_1 . common . IDENT_11 . IDENT_12 . METHOD_5 ( 0 ) ) ; org . IDENT_1 . common . IDENT_2 . IDENT_13 IDENT_14 = IDENT_8 . METHOD_6 ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 , STRING_1 , ( ( IDENT_15 . IDENT_16 . METHOD_7 ( ) ) | ( IDENT_15 . IDENT_17 . METHOD_7 ( ) ) ) , INT_0 ) ; java . lang . String IDENT_18 = IDENT_14 . METHOD_8 ( 0 ) . METHOD_9 ( 0 ) ; java . lang . String content = "" ; for ( int i = 0 ; i < INT_1 ; i ++ ) { content = content . METHOD_10 ( STRING_2 ) ; } byte [ ] IDENT_19 = content . getBytes ( ) ; int length = IDENT_19 . length ; org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_11 ( IDENT_18 ) ; IDENT_14 . write ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 , IDENT_19 , length , 0 ) ; IDENT_14 . close ( ) ; org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_12 ( IDENT_18 ) ; long size = 0 ; do { while ( ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_13 ( IDENT_14 . METHOD_14 ( ) ) ) != null ) { java . lang . Thread . sleep ( INT_2 ) ; } size = IDENT_14 . METHOD_15 ( ) ; } while ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_13 ( IDENT_14 . METHOD_14 ( ) ) . equals ( IDENT_18 ) ) ; "<AssertPlaceHolder>" ; org . IDENT_1 . common . IDENT_2 . IDENT_3 . client . METHOD_16 ( org . IDENT_1 . common . IDENT_2 . IDENT_3 . auth , org . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 , IDENT_0 ) ; } equals ( java . lang . Object ) { try { org . IDENT_1 . IDENT_20 . IDENT_21 . IDENT_22 o = ( ( org . IDENT_1 . IDENT_20 . IDENT_21 . IDENT_22 ) ( other ) ) ; boolean IDENT_23 = ( o . IDENT_24 ) == ( this . IDENT_24 ) ; return ( METHOD_17 ( o ) ) && IDENT_23 ; } catch ( java . lang . IDENT_25 ex ) { return false ; } }
org . junit . Assert . assertEquals ( length , size ) 