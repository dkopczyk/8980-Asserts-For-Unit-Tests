METHOD_0 ( ) { org . xwiki . mail . IDENT_0 state = org . xwiki . mail . IDENT_0 . parse ( STRING_0 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { org . xwiki . mail . IDENT_0 result ; if ( ( state . equalsIgnoreCase ( org . xwiki . mail . IDENT_0 . IDENT_1 . toString ( ) ) ) || ( state . equalsIgnoreCase ( STRING_1 ) ) ) { result = org . xwiki . mail . IDENT_0 . IDENT_1 ; } else if ( state . equalsIgnoreCase ( org . xwiki . mail . IDENT_0 . IDENT_2 . toString ( ) ) ) { result = org . xwiki . mail . IDENT_0 . IDENT_2 ; } else if ( ( state . equalsIgnoreCase ( org . xwiki . mail . IDENT_0 . IDENT_3 . toString ( ) ) ) || ( state . equalsIgnoreCase ( STRING_2 ) ) ) { result = org . xwiki . mail . IDENT_0 . IDENT_3 ; } else if ( ( state . equalsIgnoreCase ( org . xwiki . mail . IDENT_0 . IDENT_4 . toString ( ) ) ) || ( state . equalsIgnoreCase ( STRING_3 ) ) ) { result = org . xwiki . mail . IDENT_0 . IDENT_4 ; } else if ( state . equalsIgnoreCase ( org . xwiki . mail . IDENT_0 . IDENT_5 . toString ( ) ) ) { result = org . xwiki . mail . IDENT_0 . IDENT_5 ; } else { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_4 , state ) ) ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_0 . IDENT_5 , state ) 