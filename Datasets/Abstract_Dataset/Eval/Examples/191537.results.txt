METHOD_0 ( ) { METHOD_1 ( 1 , 100 ) ; METHOD_2 ( INT_0 ) . METHOD_3 ( ) ; final int IDENT_0 = 5 ; final java . util . concurrent . IDENT_1 IDENT_2 = java . util . concurrent . IDENT_3 . METHOD_4 ( IDENT_0 ) ; final java . util . List < java . util . concurrent . IDENT_4 < java . lang . Boolean > > IDENT_5 = com . google . common . collect . Lists . METHOD_5 ( IDENT_0 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_5 . add ( ( ) -> METHOD_6 ( ) . execute ( ) ) ; } final java . util . Collection < java . util . concurrent . IDENT_6 < java . lang . Boolean > > results = IDENT_2 . METHOD_7 ( IDENT_5 ) ; boolean IDENT_7 = false ; for ( final java . util . concurrent . IDENT_6 < java . lang . Boolean > future : results ) { if ( future . get ( ) ) { IDENT_7 = true ; } } IDENT_2 . METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } execute ( ) { return build ( ) . execute ( ) ; }
org . junit . Assert . assertTrue ( IDENT_7 ) 