METHOD_0 ( ) { final java . util . List < com . IDENT_0 . IDENT_1 . util . IDENT_2 > elements = new java . util . ArrayList ( ) ; elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( 0 ) ) ; elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( 1 ) ) ; elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( 2 ) ) ; elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( 3 ) ) ; elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( 4 ) ) ; final com . IDENT_0 . IDENT_1 . util . buf . IDENT_4 IDENT_5 = METHOD_1 ( elements ) ; final com . IDENT_0 . IDENT_1 . util . IDENT_6 . IDENT_7 list = com . IDENT_0 . IDENT_1 . util . IDENT_6 . impl . IDENT_8 . from ( IDENT_5 ) ; for ( int i = 0 ; i < ( elements . size ( ) ) ; i ++ ) { final long IDENT_9 = ( elements . get ( i ) . METHOD_2 ( ) . METHOD_3 ( ) ) OP_0 ( Integer . IDENT_10 ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( int ) { assert ( 0 <= IDENT_11 ) && ( IDENT_11 < ( IDENT_12 ) ) ; final long IDENT_13 = ( IDENT_14 . apply ( IDENT_11 ) ) * ( Long . IDENT_15 ) ; final long start = IDENT_16 . METHOD_5 ( IDENT_13 ) ; return ( elements . METHOD_3 ( start ) ) OP_0 ( Integer . IDENT_10 ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , list . METHOD_4 ( i ) ) 