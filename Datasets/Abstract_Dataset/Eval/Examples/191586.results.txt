METHOD_0 ( ) { "<AssertPlaceHolder>" ; } build ( ) { final com . google . common . collect . IDENT_0 < java . lang . Integer , java . lang . Integer > elements = com . google . common . collect . IDENT_0 . create ( ) ; for ( int i = 0 , j = 0 ; i < ( com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . IDENT_4 . IDENT_5 ) ; ++ i , j = i / 2 ) { elements . put ( j , i ) ; } final com . IDENT_1 . IDENT_2 . util . mutable . impl . IDENT_6 mutable = new com . IDENT_1 . IDENT_2 . util . mutable . impl . METHOD_1 ( elements . METHOD_2 ( ) . values ( ) , com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . IDENT_4 . IDENT_5 ) ; java . io . ByteArrayOutputStream IDENT_7 = new java . io . ByteArrayOutputStream ( ) ; try { mutable . METHOD_3 ( IDENT_7 ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } final com . IDENT_1 . IDENT_2 . util . buf . IDENT_8 buf = com . IDENT_1 . IDENT_2 . util . buf . IDENT_8 . from ( IDENT_7 . toByteArray ( ) ) ; org . junit . Assert . assertEquals ( IDENT_9 . IDENT_10 . IDENT_11 . getCode ( ) , buf . METHOD_4 ( ) ) ; final com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . METHOD_1 result = com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . METHOD_1 . from ( buf ) ; org . junit . Assert . assertEquals ( ( ( com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . IDENT_4 . IDENT_5 ) / 2 ) , result . METHOD_5 ( ) ) ; return result ; }
org . junit . Assert . assertNotNull ( com . IDENT_1 . IDENT_2 . util . IDENT_3 . impl . IDENT_4 . build ( ) . toString ( ) ) 