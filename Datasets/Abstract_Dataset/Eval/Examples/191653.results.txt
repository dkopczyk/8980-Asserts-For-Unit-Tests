METHOD_0 ( ) { engine . IDENT_0 = true ; double IDENT_1 = ( ( double ) ( java . lang . Math . random ( ) ) ) ; engine . set ( STRING_0 , STRING_1 ) ; java . io . File f = new java . io . File ( ( ( STRING_2 0 + IDENT_1 ) + STRING_2 2 ) ) ; engine . save ( f , STRING_0 ) ; engine . METHOD_1 ( STRING_0 ) ; engine . load ( f ) ; assert engine . METHOD_2 ( engine . METHOD_3 ( STRING_0 ) ) . equals ( STRING_1 ) : STRING_3 ; engine . set ( "a" , STRING_2 ) ; engine . set ( "b" , STRING_4 ) ; IDENT_1 = ( ( double ) ( java . lang . Math . random ( ) ) ) ; java . io . File IDENT_2 = new java . io . File ( ( ( STRING_2 0 + IDENT_1 ) + STRING_2 2 ) ) ; engine . save ( f , STRING_0 , "a" ) ; engine . METHOD_1 ( STRING_0 ) ; engine . METHOD_1 ( "a" ) ; engine . METHOD_1 ( "b" ) ; engine . load ( f ) ; assert engine . METHOD_2 ( engine . METHOD_3 ( "a" ) ) . equals ( STRING_2 ) : STRING_3 ; assert engine . METHOD_2 ( engine . METHOD_3 ( STRING_0 ) ) . equals ( STRING_1 ) : STRING_3 ; try { java . lang . Object b = engine . METHOD_3 ( "b" ) ; assert false : b + "" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; "<AssertPlaceHolder>" ; } engine . set ( STRING_0 , STRING_1 ) ; engine . set ( "a" , STRING_2 ) ; engine . set ( "b" , STRING_4 ) ; engine . METHOD_4 ( f , "" ) ; engine . METHOD_1 ( STRING_0 ) ; engine . METHOD_1 ( "a" ) ; engine . METHOD_1 ( "b" ) ; engine . load ( f ) ; assert java . util . Arrays . equals ( engine . METHOD_5 ( ) , new java . lang . String [ ] { "a" , "b" , STRING_0 } ) : java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ; assert engine . METHOD_6 ( ) ; assert java . util . Arrays . equals ( engine . METHOD_5 ( ) , new java . lang . String [ ] { } ) : java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ; engine . METHOD_3 ( STRING_5 ) ; engine . set ( "a" , STRING_2 ) ; engine . set ( "b" , STRING_4 ) ; System . err . println ( java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ) ; assert java . util . Arrays . equals ( engine . METHOD_5 ( ) , new java . lang . String [ ] { "a" , "b" , STRING_6 } ) : java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ; engine . METHOD_4 ( f , "" ) ; engine . METHOD_1 ( STRING_6 ) ; engine . METHOD_1 ( "a" ) ; engine . METHOD_1 ( "b" ) ; assert java . util . Arrays . equals ( engine . METHOD_5 ( ) , new java . lang . String [ ] { } ) : java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ; engine . load ( f ) ; assert java . util . Arrays . equals ( engine . METHOD_5 ( ) , new java . lang . String [ ] { "a" , "b" , STRING_6 } ) : java . util . Arrays . toString ( engine . METHOD_5 ( ) ) ; assert ( ( double ) ( engine . METHOD_3 ( STRING_2 1 ) ) ) == FLOAT_0 : engine . METHOD_3 ( STRING_2 1 ) ; } METHOD_2 ( java . lang . Object ) { if ( o == null ) { return null ; } if ( o instanceof java . lang . String ) { return ( ( java . lang . String ) ( o ) ) ; } if ( ! ( o instanceof org . IDENT_3 . IDENT_4 . IDENT_5 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_7 + o ) ) ; } try { return ( ( org . IDENT_3 . IDENT_4 . IDENT_5 ) ( o ) ) . METHOD_2 ( ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . METHOD_7 ( ( STRING_8 + o ) ) ; } }
org . junit . Assert . assertTrue ( true ) 