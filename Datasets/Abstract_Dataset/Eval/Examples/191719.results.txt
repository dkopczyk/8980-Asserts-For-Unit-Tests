METHOD_0 ( ) { int [ ] [ ] IDENT_0 = new int [ ] [ ] { new int [ ] { 8 , 2 } , new int [ ] { 4 , 2 } , new int [ ] { 4 , 5 } , new int [ ] { 2 , 0 } , new int [ ] { 7 , 2 } , new int [ ] { 1 , 4 } , new int [ ] { 9 , 1 } , new int [ ] { 3 , 1 } , new int [ ] { 9 , 0 } , new int [ ] { 1 , 0 } } ; IDENT_0 = t . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int [ ] [ ] ) { if ( ( IDENT_0 == null ) || ( ( IDENT_0 . length ) == 0 ) ) { return IDENT_0 ; } java . util . List < com . IDENT_1 . IDENT_2 . IDENT_3 . Person > list = new java . util . ArrayList ( ) ; for ( int [ ] person : IDENT_0 ) { list . add ( new com . IDENT_1 . IDENT_2 . IDENT_3 . Person ( person [ 0 ] , person [ 1 ] ) ) ; } list . METHOD_2 ( ( IDENT_4 , IDENT_5 ) -> { int c = - ( java . lang . Integer . compare ( IDENT_4 . IDENT_6 , IDENT_5 . IDENT_6 ) ) ; if ( c == 0 ) { c = java . lang . Integer . compare ( IDENT_4 . IDENT_7 , IDENT_5 . IDENT_7 ) ; } return c ; } ) ; java . util . List < com . IDENT_1 . IDENT_2 . IDENT_3 . Person > queue = new java . util . ArrayList ( ) ; for ( com . IDENT_1 . IDENT_2 . IDENT_3 . Person p : list ) { queue . add ( p . IDENT_7 , p ) ; } IDENT_0 = new int [ IDENT_0 . length ] [ 2 ] ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { IDENT_0 [ i ] = new int [ 2 ] ; IDENT_0 [ i ] [ 0 ] = queue . get ( i ) . IDENT_6 ; IDENT_0 [ i ] [ 1 ] = queue . get ( i ) . IDENT_7 ; } return IDENT_0 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_0 [ 0 ] [ 0 ] ) 