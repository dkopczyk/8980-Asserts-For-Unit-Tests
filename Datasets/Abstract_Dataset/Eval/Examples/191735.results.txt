METHOD_0 ( ) { java . util . List < IDENT_0 . xml . Element > IDENT_1 = new java . util . ArrayList < IDENT_0 . xml . Element > ( ) ; IDENT_0 . IDENT_2 . IDENT_3 result = null ; IDENT_1 . add ( new IDENT_0 . xml . Element ( STRING_0 , new java . lang . String [ ] { STRING_1 , "value" , STRING_2 , STRING_3 } , new java . lang . String [ ] { STRING_4 , STRING_5 , STRING_0 0 , STRING_6 } ) ) ; IDENT_1 . add ( new IDENT_0 . xml . Element ( STRING_0 , new java . lang . String [ ] { STRING_2 , STRING_3 } , new java . lang . String [ ] { STRING_7 , STRING_8 } ) ) ; result = IDENT_0 . IDENT_2 . impl . IDENT_4 . METHOD_1 ( null , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( IDENT_0 . IDENT_2 . IDENT_5 , java . util . List ) { IDENT_0 . IDENT_2 . IDENT_3 result = null ; try { java . util . HashSet < java . lang . Integer > IDENT_6 = new java . util . HashSet < java . lang . Integer > ( ) ; java . util . HashSet < java . lang . String > IDENT_7 = new java . util . HashSet < java . lang . String > ( ) ; if ( session != null ) { IDENT_0 . IDENT_2 . IDENT_8 [ ] IDENT_9 = IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_10 . METHOD_2 ( session ) ; if ( IDENT_9 != null ) { for ( IDENT_0 . IDENT_2 . IDENT_8 IDENT_11 : IDENT_9 ) { java . lang . String [ ] IDENT_12 = IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_10 . METHOD_3 ( session , IDENT_11 ) ; if ( IDENT_12 != null ) { for ( java . lang . String group : IDENT_12 ) { IDENT_7 . add ( group ) ; } } } } } for ( IDENT_0 . xml . Element item : IDENT_1 ) { IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_13 type = IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_13 . IDENT_14 ; if ( ( item . METHOD_4 ( IDENT_0 . IDENT_2 . impl . IDENT_15 ) ) != null ) { type = IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_13 . valueOf ( item . METHOD_4 ( IDENT_0 . IDENT_2 . impl . IDENT_15 ) ) ; } java . lang . String value = item . METHOD_4 ( IDENT_0 . IDENT_2 . impl . IDENT_16 ) ; switch ( type ) { case IDENT_11 : IDENT_0 . IDENT_2 . IDENT_8 . METHOD_5 ( value ) ; break ; case group : boolean IDENT_17 = IDENT_7 . contains ( value ) ; if ( ! IDENT_17 ) { result = IDENT_0 . IDENT_2 . IDENT_3 . IDENT_18 ; } break ; case IDENT_19 : IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_20 . valueOf ( value ) ; break ; case IDENT_14 : default : break ; } if ( result != null ) { break ; } IDENT_0 . IDENT_2 . impl . IDENT_4 . IDENT_21 . valueOf ( item . METHOD_4 ( IDENT_0 . IDENT_2 . impl . IDENT_22 ) ) ; java . lang . Integer order = java . lang . Integer . METHOD_6 ( item . METHOD_4 ( IDENT_0 . IDENT_2 . impl . IDENT_23 ) ) ; if ( ( ( order == null ) || ( order < 0 ) ) || ( ! ( IDENT_6 . add ( order ) ) ) ) { result = IDENT_0 . IDENT_2 . IDENT_3 . IDENT_24 ; } if ( result != null ) { break ; } } } catch ( java . lang . Exception ex ) { result = IDENT_0 . IDENT_2 . IDENT_3 . IDENT_24 ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_24 , result ) 