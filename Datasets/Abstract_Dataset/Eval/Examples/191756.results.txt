METHOD_0 ( ) { java . util . Map < io . github . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 , java . lang . String > IDENT_4 = new java . util . HashMap ( io . github . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . values ( ) . length ) ; IDENT_4 . put ( IDENT_3 . IDENT_5 , "b" 6 ) ; IDENT_4 . put ( IDENT_3 . IDENT_6 , STRING_0 6 ) ; IDENT_4 . put ( IDENT_3 . IDENT_7 , "b" 4 ) ; IDENT_4 . put ( IDENT_3 . IDENT_8 , STRING_1 ) ; IDENT_4 . put ( IDENT_3 . IDENT_9 , STRING_0 1 ) ; IDENT_4 . put ( IDENT_3 . IDENT_10 , "b" ) ; IDENT_4 . put ( IDENT_3 . IDENT_11 , STRING_2 ) ; IDENT_4 . put ( IDENT_3 . IDENT_12 , STRING_0 4 ) ; IDENT_4 . put ( IDENT_3 . IDENT_13 , "b" 1 ) ; IDENT_4 . put ( IDENT_3 . IDENT_14 , STRING_0 7 ) ; IDENT_4 . put ( IDENT_3 . IDENT_15 , STRING_3 ) ; IDENT_4 . put ( IDENT_3 . IDENT_16 , STRING_3 4 ) ; java . lang . String [ ] IDENT_17 = new java . lang . String [ ] { STRING_4 , "b" 3 , STRING_2 1 , STRING_2 6 , STRING_3 6 , "b" 0 , "b" 2 , STRING_0 2 , STRING_0 3 , STRING_3 9 , STRING_2 9 , STRING_3 6 , STRING_2 5 , STRING_2 0 , STRING_3 3 , "b" 8 , STRING_0 5 , STRING_3 7 , STRING_5 , STRING_0 8 } ; java . lang . String [ ] IDENT_18 = new java . lang . String [ ] { STRING_6 , STRING_2 2 , "b" 1 , STRING_3 0 , STRING_7 , STRING_2 3 , STRING_3 8 , "b" 7 , STRING_0 , STRING_2 8 , "b" 5 , STRING_7 , STRING_8 , STRING_0 0 , STRING_3 1 , STRING_3 2 , "b" 9 , STRING_3 5 , STRING_2 4 , STRING_2 7 } ; for ( int i = 0 ; i < ( IDENT_17 . length ) ; i ++ ) { io . github . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_19 IDENT_20 = io . github . IDENT_0 . IDENT_1 . process . IDENT_21 . METHOD_0 ( IDENT_17 [ i ] , true ) ; java . lang . String result = java . util . stream . IDENT_22 . of ( IDENT_20 . METHOD_1 ( ) ) . map ( IDENT_4 :: get ) . collect ( java . util . stream . IDENT_23 . METHOD_2 ( STRING_0 9 ) ) ; if ( ! ( IDENT_18 [ i ] . equals ( result ) ) ) { System . out . println ( IDENT_17 [ i ] ) ; } "<AssertPlaceHolder>" ; } } METHOD_1 ( ) { return java . util . Arrays . METHOD_3 ( IDENT_24 , 0 , IDENT_25 ) ; }
org . junit . Assert . assertEquals ( IDENT_18 [ i ] , result ) 