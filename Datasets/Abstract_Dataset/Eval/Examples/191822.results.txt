METHOD_0 ( ) { try { IDENT_0 . METHOD_1 ( org . easymock . EasyMock . METHOD_2 ( ) ) ; org . easymock . EasyMock . METHOD_3 ( ) . andReturn ( new net . IDENT_1 . IDENT_2 . bean . METHOD_4 ( ) ) . times ( 1 ) ; control . replay ( ) ; test = IDENT_3 . METHOD_5 ( 0L ) ; "<AssertPlaceHolder>" ; control . verify ( ) ; control . METHOD_6 ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } } METHOD_5 ( java . lang . Long ) { try { if ( ( id == null ) || ( id < 0 ) ) { return IDENT_4 . IDENT_5 . IDENT_6 ; } net . IDENT_1 . IDENT_2 . bean . METHOD_4 result = this . IDENT_3 . METHOD_5 ( id ) ; return net . IDENT_1 . util . generator . IDENT_4 . METHOD_7 ( result ) ; } catch ( net . IDENT_1 . util . exception . IDENT_7 IDENT_8 ) { return net . IDENT_1 . util . generator . IDENT_4 . METHOD_8 ( ( "" + ( IDENT_8 . getKey ( ) ) ) ) ; } catch ( java . lang . Exception e ) { net . IDENT_1 . IDENT_2 . controller . IDENT_9 . IDENT_10 . logger . error ( ( ( STRING_0 + id ) + ( e . getMessage ( ) ) ) ) ; return net . IDENT_1 . util . generator . IDENT_4 . METHOD_8 ( ( ( STRING_0 + id ) + ( e . getMessage ( ) ) ) ) ; } }
org . junit . Assert . assertNotNull ( test ) 