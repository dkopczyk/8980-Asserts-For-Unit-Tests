METHOD_0 ( ) { java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( ) ; for ( int c = 0 ; c < 10 ; ++ c ) { int length = ( IDENT_1 . METHOD_2 ( 20 ) ) + 10 ; int x = IDENT_1 . METHOD_2 ( length ) ; algorithm . common . IDENT_2 IDENT_3 = new algorithm . common . METHOD_3 ( 0 ) ; algorithm . common . METHOD_3 IDENT_4 = IDENT_3 ; for ( int i = 0 ; i < length ; ++ i ) { IDENT_4 . next = new algorithm . common . METHOD_3 ( IDENT_1 . METHOD_2 ( 100 ) ) ; IDENT_4 = IDENT_4 . next ; } algorithm . common . METHOD_3 IDENT_5 = IDENT_6 . METHOD_4 ( IDENT_3 , x ) ; IDENT_4 = IDENT_5 ; boolean IDENT_7 = ( IDENT_5 . val ) >= x ; while ( IDENT_4 != null ) { if ( x <= ( IDENT_4 . val ) ) { IDENT_7 = true ; } if ( IDENT_7 ) { "<AssertPlaceHolder>" ; } IDENT_4 = IDENT_4 . next ; } } } METHOD_4 ( algorithm . common . METHOD_3 , int ) { if ( IDENT_3 == null ) { return null ; } algorithm . common . METHOD_3 IDENT_8 = new algorithm . common . METHOD_3 ( 0 ) ; algorithm . common . METHOD_3 IDENT_9 = new algorithm . common . METHOD_3 ( 0 ) ; algorithm . common . METHOD_3 IDENT_10 = IDENT_8 ; algorithm . common . METHOD_3 IDENT_11 = IDENT_9 ; algorithm . common . METHOD_3 IDENT_4 = IDENT_3 ; while ( IDENT_4 != null ) { if ( ( IDENT_4 . val ) < x ) { IDENT_10 . next = new algorithm . common . METHOD_3 ( IDENT_4 . val ) ; IDENT_10 = IDENT_10 . next ; } else { IDENT_11 . next = new algorithm . common . METHOD_3 ( IDENT_4 . val ) ; IDENT_11 = IDENT_11 . next ; } IDENT_4 = IDENT_4 . next ; } IDENT_10 . next = IDENT_9 . next ; return IDENT_8 . next ; }
org . junit . Assert . assertTrue ( ( x <= ( IDENT_4 . val ) ) ) 