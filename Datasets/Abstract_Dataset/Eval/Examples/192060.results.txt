METHOD_0 ( ) { char [ ] [ ] IDENT_0 = new char [ ] [ ] { STRING_0 . METHOD_1 ( ) , STRING_1 . METHOD_1 ( ) , STRING_2 . METHOD_1 ( ) } ; java . lang . String [ ] res = new java . lang . String [ ] { STRING_3 , STRING_4 , STRING_5 } ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; ++ i ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( char [ ] ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; java . util . IDENT_1 < java . lang . IDENT_2 > IDENT_3 = new java . util . IDENT_1 < java . lang . IDENT_2 > ( ) ; for ( int i = 0 ; i < ( input . length ) ; ++ i ) { if ( java . lang . IDENT_2 . METHOD_3 ( input [ i ] ) ) { sb . append ( input [ i ] ) ; } else if ( ( input [ i ] ) == STRING_6 ) { while ( ! ( IDENT_3 . isEmpty ( ) ) ) { char IDENT_4 = IDENT_3 . METHOD_4 ( ) ; if ( IDENT_4 == STRING_7 ) { break ; } sb . append ( IDENT_4 ) ; } } else if ( ( ( input [ i ] ) == STRING_8 ) || ( ( input [ i ] ) == STRING_9 ) ) { while ( ( ! ( IDENT_3 . isEmpty ( ) ) ) && ( ( ( IDENT_3 . METHOD_5 ( ) ) == STRING_10 ) || ( ( IDENT_3 . METHOD_5 ( ) ) == STRING_11 ) ) ) { sb . append ( IDENT_3 . METHOD_4 ( ) ) ; } IDENT_3 . METHOD_6 ( input [ i ] ) ; } else if ( ( ( ( input [ i ] ) == STRING_10 ) || ( ( input [ i ] ) == STRING_11 ) ) || ( ( input [ i ] ) == STRING_7 ) ) { IDENT_3 . METHOD_6 ( input [ i ] ) ; } } while ( ! ( IDENT_3 . isEmpty ( ) ) ) { sb . append ( IDENT_3 . METHOD_4 ( ) ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( res [ i ] , generator . METHOD_2 ( IDENT_0 [ i ] ) ) 