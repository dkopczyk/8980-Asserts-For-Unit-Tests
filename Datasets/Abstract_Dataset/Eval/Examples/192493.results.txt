METHOD_0 ( ) { org . apache . IDENT_0 . utils . IDENT_1 IDENT_2 = new org . apache . IDENT_0 . utils . METHOD_1 ( ) ; int length = IDENT_2 . METHOD_2 ( ) . length ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { sb . append ( STRING_0 ) ; } java . lang . String s = sb . toString ( ) ; IDENT_2 . METHOD_3 ( s ) ; org . apache . IDENT_0 . utils . IDENT_3 is = new org . apache . IDENT_0 . utils . METHOD_4 ( IDENT_2 . METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; IDENT_2 . close ( ) ; } METHOD_5 ( ) { int IDENT_4 = buffer . METHOD_6 ( ) ; byte [ ] IDENT_5 = new byte [ IDENT_4 ] ; char [ ] IDENT_6 = new char [ IDENT_4 ] ; int c ; int IDENT_7 ; int IDENT_8 ; int count = 0 ; int IDENT_9 = 0 ; buffer . METHOD_7 ( IDENT_5 , 0 , IDENT_4 ) ; while ( count < IDENT_4 ) { c = ( ( int ) ( IDENT_5 [ count ] ) ) & 255 ; if ( c > INT_0 ) { break ; } count ++ ; IDENT_6 [ ( IDENT_9 ++ ) ] = ( ( char ) ( c ) ) ; } while ( count < IDENT_4 ) { c = ( ( int ) ( IDENT_5 [ count ] ) ) & 255 ; switch ( c > > 4 ) { case 0 : case 1 : case 2 : case 3 : case 4 : case 5 : case 6 : case 7 : throw new java . io . METHOD_8 ( ( STRING_1 + count ) ) ; } } return new java . lang . String ( IDENT_6 , 0 , IDENT_9 ) ; }
org . junit . Assert . assertEquals ( s , is . METHOD_5 ( ) ) 