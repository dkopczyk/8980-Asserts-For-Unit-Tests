METHOD_0 ( ) { model . put ( STRING_0 , STRING_1 ) ; model . put ( STRING_2 , STRING_3 ) ; model . put ( STRING_4 , STRING_5 ) ; METHOD_1 ( ( ) -> model . METHOD_2 ( STRING_6 , STRING_7 , STRING_8 ) ) ; METHOD_1 ( ( ) -> model . METHOD_2 ( STRING_2 , STRING_9 , STRING_8 ) ) ; METHOD_1 ( ( ) -> model . METHOD_2 ( STRING_2 , STRING_7 , STRING_8 ) ) ; METHOD_1 ( ( ) -> model . METHOD_2 ( STRING_6 , STRING_7 , STRING_8 ) ) ; METHOD_3 ( ( ) -> model . METHOD_2 ( STRING_2 , STRING_3 0 , STRING_8 ) ) ; java . lang . String [ ] keys = model . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . stream ( ) . map ( IDENT_0 :: IDENT_1 ) . toArray ( java . lang . String [ ] :: new ) ; "<AssertPlaceHolder>" ; } toArray ( java . util . Map ) { if ( args . isEmpty ( ) ) return new java . lang . Object [ 0 ] ; final java . util . List < java . lang . Object > IDENT_2 = new java . util . IDENT_3 < java . lang . Object > ( ) ; for ( int j = 0 ; ; j ++ ) { final java . lang . String IDENT_4 = STRING_10 + j ; if ( args . containsKey ( IDENT_4 ) ) IDENT_2 . add ( args . remove ( IDENT_4 ) ) ; else break ; } IDENT_2 . addAll ( args . values ( ) ) ; return IDENT_2 . toArray ( new java . lang . Object [ IDENT_2 . size ( ) ] ) ; }
org . junit . Assert . assertArrayEquals ( new java . lang . String [ ] { STRING_9 , STRING_3 0 , STRING_6 , STRING_7 } , keys ) 