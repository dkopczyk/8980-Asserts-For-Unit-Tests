METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ INT_0 ] ; java . util . Arrays . METHOD_1 ( IDENT_0 , "a" ) ; java . lang . String [ ] IDENT_1 = IDENT_0 . METHOD_2 ( ) ; java . lang . String [ ] IDENT_2 = IDENT_0 . METHOD_2 ( ) ; java . util . Arrays . METHOD_1 ( IDENT_1 , 50 , INT_1 , null ) ; org . IDENT_3 . base . Arrays . METHOD_1 ( IDENT_2 , 50 , INT_1 , null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] , int , int , byte ) { int len = IDENT_4 - IDENT_5 ; if ( len > 0 ) { if ( ( IDENT_4 > ( array . length ) ) || ( IDENT_5 < 0 ) ) { throw new java . lang . IllegalArgumentException ( ( ( ( STRING_0 + IDENT_5 ) + STRING_1 ) + IDENT_4 ) ) ; } if ( len <= ( org . IDENT_3 . base . Arrays . IDENT_6 ) ) { for ( int i = IDENT_5 ; i < IDENT_4 ; i ++ ) { array [ i ] = value ; } } else { int IDENT_7 = IDENT_5 + ( org . IDENT_3 . base . Arrays . IDENT_6 ) ; for ( int i = IDENT_5 ; i < IDENT_7 ; i ++ ) { array [ i ] = value ; } array [ IDENT_5 ] = value ; for ( int i = org . IDENT_3 . base . Arrays . IDENT_6 ; i < len ; i += i ) { int IDENT_8 = len - i ; int from = IDENT_5 + i ; if ( IDENT_8 < i ) { if ( IDENT_8 < ( org . IDENT_3 . base . Arrays . IDENT_6 ) ) { int IDENT_9 = from + IDENT_8 ; for ( int j = from ; j < IDENT_9 ; j ++ ) { array [ j ] = value ; } } else { java . lang . System . METHOD_3 ( array , IDENT_5 , array , from , IDENT_8 ) ; } } else { java . lang . System . METHOD_3 ( array , IDENT_5 , array , from , i ) ; } } } } else if ( len < 0 ) { throw new java . lang . IllegalArgumentException ( ( ( ( STRING_0 + IDENT_5 ) + STRING_1 ) + IDENT_4 ) ) ; } }
org . junit . Assert . assertArrayEquals ( IDENT_1 , IDENT_2 ) 