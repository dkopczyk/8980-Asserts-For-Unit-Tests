METHOD_0 ( ) { org . IDENT_0 . concurrent . IDENT_1 executor = org . IDENT_0 . concurrent . IDENT_2 . METHOD_1 ( ) . METHOD_2 ( 0 ) . METHOD_3 ( 1 ) . METHOD_4 ( 0 ) . METHOD_5 ( IDENT_3 . IDENT_4 ) . build ( ) ; final java . util . concurrent . atomic . IDENT_5 < java . lang . Thread > ref = new java . util . concurrent . atomic . METHOD_6 ( ) ; try { executor . execute ( ( ) -> { try { java . lang . Thread . sleep ( INT_0 ) ; } catch ( ex ) { java . lang . Thread . METHOD_7 ( ) ; } } ) ; executor . execute ( ( ) -> { ref . set ( java . lang . Thread . METHOD_8 ( ) ) ; } ) ; "<AssertPlaceHolder>" ; } finally { executor . METHOD_9 ( ) ; } } get ( ) { org . apache . avro . IDENT_6 result = replace . get ( root ) ; if ( result == null ) { throw new java . lang . IllegalStateException ( ( ( ( STRING_0 + ( root ) ) + STRING_1 ) + ( replace ) ) ) ; } return result ; }
org . junit . Assert . assertEquals ( java . lang . Thread . METHOD_8 ( ) , ref . get ( ) ) 