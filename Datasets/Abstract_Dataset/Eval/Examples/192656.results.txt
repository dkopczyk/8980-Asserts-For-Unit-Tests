METHOD_0 ( ) { org . IDENT_0 . io . IDENT_1 . test ( STRING_0 , 2 , true ) ; "<AssertPlaceHolder>" ; } test ( java . lang . String , int , boolean ) { final org . IDENT_0 . io . IDENT_2 pos = new org . IDENT_0 . io . METHOD_1 ( IDENT_3 ) ; final java . io . InputStream IDENT_4 ; if ( IDENT_5 ) { IDENT_4 = new org . IDENT_0 . io . METHOD_2 ( pos . METHOD_3 ( ) ) ; } else { IDENT_4 = pos . METHOD_3 ( ) ; } IDENT_6 . INSTANCE . execute ( new org . IDENT_0 . base . METHOD_4 ( ) { @ org . IDENT_0 . io . Override public void METHOD_5 ( ) throws org . IDENT_0 . io . Exception { try ( java . io . IDENT_7 IDENT_8 = pos ) { final byte [ ] IDENT_9 = org . IDENT_0 . base . IDENT_10 . METHOD_6 ( IDENT_11 ) ; IDENT_8 . write ( IDENT_9 [ 0 ] ) ; IDENT_8 . write ( IDENT_9 , 1 , ( ( IDENT_9 . length ) - 1 ) ) ; } } } ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; try ( java . io . InputStream is = IDENT_4 ) { byte [ ] buffer = new byte [ INT_0 ] ; int read ; while ( ( read = is . read ( buffer ) ) > 0 ) { sb . append ( org . IDENT_0 . base . IDENT_10 . METHOD_7 ( buffer , 0 , read ) ) ; } } org . junit . Assert . assertEquals ( ( ( ( STRING_1 + IDENT_3 ) + STRING_2 ) + IDENT_5 ) , IDENT_11 , sb . toString ( ) ) ; }
org . junit . Assert . assertTrue ( true ) 