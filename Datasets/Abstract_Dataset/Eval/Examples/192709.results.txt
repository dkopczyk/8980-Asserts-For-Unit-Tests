METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = com . IDENT_1 . IDENT_2 . generator . util . IDENT_3 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( ) { java . util . List < java . lang . String > IDENT_4 = new java . util . ArrayList ( ) ; java . net . URL url = java . lang . Thread . METHOD_2 ( ) . METHOD_3 ( ) . getResource ( STRING_0 ) ; try { java . io . File file ; if ( url . getPath ( ) . contains ( STRING_1 ) ) { file = new java . io . File ( STRING_2 ) ; } else { file = new java . io . File ( STRING_3 ) ; } com . IDENT_1 . IDENT_2 . generator . util . IDENT_3 . IDENT_5 . info ( STRING_4 , file . METHOD_4 ( ) ) ; java . io . File [ ] IDENT_6 = file . METHOD_5 ( ) ; if ( ( IDENT_6 != null ) && ( ( IDENT_6 . length ) > 0 ) ) { for ( java . io . File IDENT_7 : IDENT_6 ) { com . IDENT_1 . IDENT_2 . generator . util . IDENT_3 . IDENT_5 . info ( STRING_5 , IDENT_7 . getAbsolutePath ( ) ) ; if ( ( IDENT_7 . METHOD_6 ( ) ) && ( IDENT_7 . getAbsolutePath ( ) . METHOD_7 ( STRING_1 ) ) ) { IDENT_4 . add ( IDENT_7 . getAbsolutePath ( ) ) ; } } } } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( "" ) ; } return IDENT_4 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_0 != null ) && ( ( IDENT_0 . size ( ) ) > 0 ) ) ) 