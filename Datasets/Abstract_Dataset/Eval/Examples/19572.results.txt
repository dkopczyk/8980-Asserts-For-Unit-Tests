METHOD_0 ( ) { client . METHOD_1 ( METHOD_2 ( node , IDENT_0 . IDENT_1 ) ) ; IDENT_2 . METHOD_3 ( time . METHOD_4 ( Long . MAX_VALUE ) ) ; final java . util . List < org . apache . kafka . IDENT_3 . consumer . IDENT_4 > IDENT_5 = java . util . Collections . METHOD_5 ( new java . util . ArrayList < org . apache . kafka . IDENT_3 . consumer . IDENT_4 > ( ) ) ; final org . apache . kafka . IDENT_3 . consumer . IDENT_4 IDENT_6 = new org . apache . kafka . IDENT_3 . consumer . METHOD_6 ( 0L ) ; final org . apache . kafka . IDENT_3 . consumer . METHOD_6 IDENT_7 = new org . apache . kafka . IDENT_3 . consumer . METHOD_6 ( 1L ) ; IDENT_2 . METHOD_7 ( METHOD_8 ( IDENT_8 , IDENT_6 ) , new org . apache . kafka . IDENT_3 . consumer . METHOD_9 ( ) { @ org . apache . kafka . IDENT_3 . consumer . IDENT_9 . Override public void METHOD_10 ( java . util . Map < org . apache . kafka . common . IDENT_10 , org . apache . kafka . IDENT_3 . consumer . METHOD_6 > IDENT_11 , java . lang . Exception exception ) { IDENT_5 . add ( IDENT_6 ) ; } } ) ; java . lang . Thread IDENT_12 = new java . lang . Thread ( ) { @ org . apache . kafka . IDENT_3 . consumer . IDENT_9 . Override public void run ( ) { IDENT_2 . METHOD_11 ( METHOD_8 ( IDENT_8 , IDENT_7 ) , time . METHOD_4 ( INT_0 ) ) ; IDENT_5 . add ( IDENT_7 ) ; } } ; IDENT_12 . start ( ) ; client . METHOD_12 ( 2 , INT_1 ) ; METHOD_13 ( METHOD_8 ( IDENT_8 , IDENT_6 . offset ( ) ) , IDENT_0 . IDENT_1 ) ; METHOD_13 ( METHOD_8 ( IDENT_8 , IDENT_7 . offset ( ) ) , IDENT_0 . IDENT_1 ) ; IDENT_12 . join ( ) ; "<AssertPlaceHolder>" ; } offset ( ) { return offset ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( IDENT_6 , IDENT_7 ) , IDENT_5 ) 