METHOD_0 ( ) { org . apache . kafka . connect . data . Schema source = org . apache . kafka . connect . data . IDENT_0 . METHOD_1 ( ) . field ( STRING_0 , Schema . IDENT_1 ) . field ( STRING_1 , Schema . IDENT_1 ) . build ( ) ; org . apache . kafka . connect . data . IDENT_2 IDENT_3 = new org . apache . kafka . connect . data . METHOD_2 ( source ) ; IDENT_3 . put ( STRING_0 , 1 ) ; IDENT_3 . put ( STRING_1 , INT_0 ) ; org . apache . kafka . connect . data . Schema target = org . apache . kafka . connect . data . IDENT_0 . METHOD_1 ( ) . field ( STRING_0 , Schema . IDENT_1 ) . build ( ) ; org . apache . kafka . connect . data . METHOD_2 IDENT_4 = ( ( org . apache . kafka . connect . data . METHOD_2 ) ( org . apache . kafka . connect . data . IDENT_5 . project ( source , IDENT_3 , target ) ) ) ; "<AssertPlaceHolder>" ; try { IDENT_4 . get ( STRING_1 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( org . apache . kafka . connect . errors . IDENT_6 e ) { } } get ( org . apache . kafka . connect . data . Field ) { java . lang . Object val = values [ field . index ( ) ] ; if ( ( val == null ) && ( ( field . schema ( ) . METHOD_3 ( ) ) != null ) ) { val = field . schema ( ) . METHOD_3 ( ) ; } return val ; }
org . junit . Assert . assertEquals ( 1 , IDENT_4 . get ( STRING_0 ) ) 