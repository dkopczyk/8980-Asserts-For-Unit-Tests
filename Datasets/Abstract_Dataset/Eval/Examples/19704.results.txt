METHOD_0 ( ) { @ org . apache . kafka . connect . storage . METHOD_1 ( STRING_0 ) org . apache . kafka . connect . util . IDENT_0 < java . lang . IDENT_1 > IDENT_2 = org . IDENT_3 . api . easymock . IDENT_4 . METHOD_2 ( org . apache . kafka . connect . util . IDENT_0 . class ) ; METHOD_3 ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_6 , org . apache . kafka . connect . storage . IDENT_5 . IDENT_7 , org . apache . kafka . connect . storage . IDENT_5 . IDENT_8 , org . apache . kafka . connect . storage . IDENT_5 . IDENT_9 , IDENT_2 , false , null ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_4 ( ) ; writer . offset ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_6 , org . apache . kafka . connect . storage . IDENT_5 . IDENT_8 ) ; "<AssertPlaceHolder>" ; writer . METHOD_5 ( IDENT_2 ) . get ( 1000 , TimeUnit . IDENT_10 ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_6 ( ) ; } METHOD_7 ( ) { if ( METHOD_8 ( ) ) { org . apache . kafka . connect . storage . IDENT_11 . log . error ( ( STRING_1 + STRING_2 ) ) ; throw new org . apache . kafka . connect . errors . METHOD_9 ( STRING_3 ) ; } if ( data . isEmpty ( ) ) return false ; assert ! ( METHOD_8 ( ) ) ; IDENT_12 = data ; data = new java . util . HashMap ( ) ; return true ; }
org . junit . Assert . assertTrue ( writer . METHOD_7 ( ) ) 