METHOD_0 ( ) { @ org . apache . kafka . connect . storage . METHOD_1 ( STRING_0 ) org . apache . kafka . connect . util . IDENT_0 < java . lang . IDENT_1 > IDENT_2 = org . IDENT_3 . api . easymock . IDENT_4 . METHOD_2 ( org . apache . kafka . connect . util . IDENT_0 . class ) ; java . util . concurrent . IDENT_5 IDENT_6 = new java . util . concurrent . METHOD_3 ( 1 ) ; METHOD_4 ( org . apache . kafka . connect . storage . IDENT_7 . IDENT_8 , org . apache . kafka . connect . storage . IDENT_7 . IDENT_9 , org . apache . kafka . connect . storage . IDENT_7 . IDENT_10 , org . apache . kafka . connect . storage . IDENT_7 . IDENT_11 , null , false , IDENT_6 ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_5 ( ) ; writer . offset ( org . apache . kafka . connect . storage . IDENT_7 . IDENT_8 , org . apache . kafka . connect . storage . IDENT_7 . IDENT_10 ) ; "<AssertPlaceHolder>" ; java . util . concurrent . IDENT_12 < java . lang . IDENT_1 > IDENT_13 = writer . METHOD_6 ( IDENT_2 ) ; writer . METHOD_7 ( ) ; IDENT_6 . METHOD_8 ( ) ; IDENT_13 . get ( 1000 , TimeUnit . IDENT_14 ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_9 ( ) ; } METHOD_10 ( ) { if ( METHOD_11 ( ) ) { org . apache . kafka . connect . storage . IDENT_15 . log . error ( ( STRING_1 + STRING_2 ) ) ; throw new org . apache . kafka . connect . errors . METHOD_12 ( STRING_3 ) ; } if ( data . isEmpty ( ) ) return false ; assert ! ( METHOD_11 ( ) ) ; IDENT_16 = data ; data = new java . util . HashMap ( ) ; return true ; }
org . junit . Assert . assertTrue ( writer . METHOD_10 ( ) ) 