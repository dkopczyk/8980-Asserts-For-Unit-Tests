METHOD_0 ( ) { final java . lang . String key = "a" ; IDENT_0 . put ( METHOD_1 ( new org . apache . kafka . streams . IDENT_1 . METHOD_2 ( key , IDENT_2 [ 0 ] ) ) , METHOD_3 ( 10 ) ) ; IDENT_0 . put ( METHOD_1 ( new org . apache . kafka . streams . IDENT_1 . METHOD_2 ( key , IDENT_2 [ 1 ] ) ) , METHOD_3 ( 50 ) ) ; IDENT_0 . put ( METHOD_1 ( new org . apache . kafka . streams . IDENT_1 . METHOD_2 ( key , IDENT_2 [ 2 ] ) ) , METHOD_3 ( 100 ) ) ; final org . apache . kafka . streams . state . IDENT_3 < org . apache . kafka . common . utils . IDENT_4 , byte [ ] > values = IDENT_0 . METHOD_4 ( org . apache . kafka . common . utils . IDENT_4 . METHOD_5 ( key . getBytes ( ) ) , 0 , INT_0 ) ; final java . util . List < org . apache . kafka . streams . IDENT_5 < org . apache . kafka . streams . IDENT_1 . METHOD_2 < java . lang . String > , java . lang . Long > > expected = java . util . Arrays . asList ( org . apache . kafka . streams . IDENT_5 . METHOD_6 ( new org . apache . kafka . streams . IDENT_1 . METHOD_2 ( key , IDENT_2 [ 0 ] ) , INT_1 ) , org . apache . kafka . streams . IDENT_5 . METHOD_6 ( new org . apache . kafka . streams . IDENT_1 . METHOD_2 ( key , IDENT_2 [ 1 ] ) , INT_2 ) ) ; "<AssertPlaceHolder>" ; } toList ( java . util . Iterator ) { java . util . List < T > res = new java . util . ArrayList ( ) ; while ( iterator . hasNext ( ) ) res . add ( iterator . next ( ) ) ; return res ; }
org . junit . Assert . assertEquals ( expected , toList ( values ) ) 