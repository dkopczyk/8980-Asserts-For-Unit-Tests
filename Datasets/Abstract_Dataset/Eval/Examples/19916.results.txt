METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final java . lang . String IDENT_2 = STRING_2 ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_5 = builder . stream ( java . util . Collections . METHOD_1 ( IDENT_0 ) , IDENT_6 ) ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_7 = builder . stream ( java . util . Collections . METHOD_1 ( IDENT_1 ) , IDENT_6 ) ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_8 = builder . stream ( java . util . Collections . METHOD_1 ( IDENT_2 ) , IDENT_6 ) ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_9 = IDENT_5 . METHOD_2 ( new org . apache . kafka . streams . IDENT_3 . IDENT_10 < java . lang . String , java . lang . String > ( ) { @ org . apache . kafka . streams . IDENT_3 . IDENT_11 . Override public java . lang . String apply ( final java . lang . String value ) { return value ; } } ) . filter ( new org . apache . kafka . streams . IDENT_3 . IDENT_12 < java . lang . String , java . lang . String > ( ) { @ org . apache . kafka . streams . IDENT_3 . IDENT_11 . Override public boolean test ( final java . lang . String key , final java . lang . String value ) { return true ; } } ) ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_13 = IDENT_7 . filter ( new org . apache . kafka . streams . IDENT_3 . IDENT_12 < java . lang . String , java . lang . String > ( ) { @ org . apache . kafka . streams . IDENT_3 . IDENT_11 . Override public boolean test ( final java . lang . String key , final java . lang . String value ) { return true ; } } ) ; final org . apache . kafka . streams . IDENT_3 . IDENT_4 < java . lang . String , java . lang . String > IDENT_14 = IDENT_9 . METHOD_3 ( IDENT_13 ) . METHOD_3 ( IDENT_8 ) ; IDENT_14 . METHOD_4 ( ) . count ( org . apache . kafka . streams . IDENT_3 . IDENT_15 . < java . lang . String , java . lang . Long , org . apache . kafka . streams . state . IDENT_16 < org . apache . kafka . common . utils . IDENT_17 , byte [ ] > > as ( STRING_3 ) ) ; builder . METHOD_5 ( ) ; final java . util . Map < java . lang . String , java . util . List < java . lang . String > > actual = builder . IDENT_18 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } get ( org . apache . kafka . connect . data . Field ) { java . lang . Object val = values [ field . index ( ) ] ; if ( ( val == null ) && ( ( field . schema ( ) . METHOD_7 ( ) ) != null ) ) { val = field . schema ( ) . METHOD_7 ( ) ; } return val ; }
org . junit . Assert . assertEquals ( asList ( STRING_0 , STRING_1 , STRING_2 ) , actual . get ( STRING_3 ) ) 