METHOD_0 ( ) { for ( java . io . File f : new java . io . File ( ( ( org . apache . IDENT_0 . common . util . IDENT_1 . IDENT_2 ) + STRING_0 ) ) . METHOD_1 ( ) ) { if ( f . getName ( ) . METHOD_2 ( STRING_1 ) ) { java . lang . String path = f . getPath ( ) ; f . METHOD_3 ( new java . io . File ( path . substring ( 0 , ( ( path . length ( ) ) - 4 ) ) ) ) ; } } org . apache . IDENT_0 . IDENT_3 . model . validation . IDENT_4 IDENT_5 = new org . apache . IDENT_0 . IDENT_3 . model . validation . METHOD_4 ( ) ; org . apache . IDENT_0 . IDENT_3 . model . IDENT_6 IDENT_7 = org . apache . IDENT_0 . common . util . IDENT_8 . METHOD_5 ( new java . io . METHOD_6 ( ( ( org . apache . IDENT_0 . common . util . IDENT_1 . IDENT_2 ) + STRING_2 ) ) , org . apache . IDENT_0 . IDENT_3 . model . IDENT_6 . class ) ; org . apache . IDENT_0 . IDENT_3 . model . validation . IDENT_9 < org . apache . IDENT_0 . IDENT_3 . model . IDENT_6 > rule = METHOD_7 ( ) ; try { IDENT_7 . init ( METHOD_8 ( ) ) ; } catch ( java . lang . Exception ex ) { } rule . validate ( IDENT_7 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( ) { return results ; }
org . junit . Assert . assertEquals ( 1 , IDENT_5 . METHOD_9 ( ) . length ) 