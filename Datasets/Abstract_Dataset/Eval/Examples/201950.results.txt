queue ( ) { final IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_4 . User > queue = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_4 . User > ( ) ; final java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 > IDENT_7 = java . util . Arrays . asList ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_0 ( queue ) , new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_0 ( queue ) ) ; for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_0 IDENT_8 : IDENT_7 ) { IDENT_8 . start ( ) ; } IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_9 IDENT_10 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_1 ( queue , java . util . Arrays . asList ( new IDENT_0 . IDENT_1 . IDENT_4 . User ( "1" , "1" ) , new IDENT_0 . IDENT_1 . IDENT_4 . User ( "2" , "2" ) , new IDENT_0 . IDENT_1 . IDENT_4 . User ( STRING_0 , STRING_0 ) , new IDENT_0 . IDENT_1 . IDENT_4 . User ( STRING_1 , STRING_1 ) ) ) ; IDENT_10 . start ( ) ; IDENT_10 . join ( ) ; java . lang . Thread . sleep ( INT_0 ) ; int count = 0 ; for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_0 IDENT_8 : IDENT_7 ) { count += IDENT_8 . size ( ) ; } "<AssertPlaceHolder>" ; }
org . junit . Assert . assertEquals ( count , IDENT_10 . size ( ) ) 