METHOD_0 ( ) { java . io . File file = org . apache . maven . shared . utils . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_2 , STRING_0 ) ; try { java . lang . String [ ] data = new java . lang . String [ ] { STRING_1 , STRING_2 , "" , STRING_3 , STRING_4 } ; org . apache . maven . shared . utils . IDENT_0 . IDENT_1 . METHOD_2 ( file , data ) ; java . util . List < java . lang . String > IDENT_3 = org . apache . maven . shared . utils . io . IDENT_4 . METHOD_3 ( file ) ; "<AssertPlaceHolder>" ; } finally { METHOD_4 ( file ) ; } } METHOD_2 ( org . apache . maven . shared . utils . IDENT_0 . File , java . lang . String [ ] ) { if ( ( ( file . METHOD_5 ( ) ) != null ) && ( ! ( file . METHOD_5 ( ) . exists ( ) ) ) ) { throw new org . apache . maven . shared . utils . IDENT_0 . IOException ( ( ( STRING_5 + file ) + STRING_6 ) ) ; } org . apache . maven . shared . utils . IDENT_0 . IDENT_5 out = null ; try { out = new org . apache . maven . shared . utils . IDENT_0 . METHOD_6 ( new org . apache . maven . shared . utils . IDENT_0 . METHOD_7 ( new org . apache . maven . shared . utils . IDENT_0 . METHOD_8 ( file ) , STRING_7 ) ) ; for ( java . lang . String IDENT_6 : data ) { out . println ( IDENT_6 ) ; } out . close ( ) ; out = null ; } finally { org . apache . maven . shared . utils . io . IDENT_7 . close ( out ) ; } }
org . junit . Assert . assertThat ( IDENT_3 , org . hamcrest . CoreMatchers . is ( java . util . Arrays . asList ( data ) ) ) 