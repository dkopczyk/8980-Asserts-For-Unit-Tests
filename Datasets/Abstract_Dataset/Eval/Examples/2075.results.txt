METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = null ; try { long [ ] IDENT_5 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_1 ( ) ; java . lang . Long [ ] IDENT_7 = new java . lang . Long [ IDENT_5 . length ] ; for ( int i = 0 ; i < ( IDENT_5 . length ) ; i ++ ) { IDENT_7 [ i ] = IDENT_5 [ i ] ; } long [ ] IDENT_1 = IDENT_5 . METHOD_2 ( ) ; java . util . Arrays . METHOD_3 ( IDENT_7 , new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_4 ( ) ) ; IDENT_4 = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 ) ; for ( int i = 0 ; i < ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 ) ; i ++ ) { IDENT_4 . set ( i , IDENT_1 [ i ] ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_3 ( IDENT_4 , 0 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 , new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_6 ( ) ) ; for ( int i = 0 ; i < ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_8 ) ; i ++ ) { IDENT_1 [ i ] = IDENT_4 . get ( i ) ; } long [ ] IDENT_10 = new long [ IDENT_5 . length ] ; for ( int i = 0 ; i < ( IDENT_5 . length ) ; i ++ ) { IDENT_10 [ i ] = IDENT_7 [ i ] ; } "<AssertPlaceHolder>" ; IDENT_4 . METHOD_7 ( ) ; } finally { METHOD_7 ( IDENT_4 ) ; } } get ( long ) { assert index < ( size ) : index ; return IDENT_11 . METHOD_8 ( ( index * ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 . IDENT_13 ) ) ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_10 , IDENT_1 ) 