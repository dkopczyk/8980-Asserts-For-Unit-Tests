METHOD_0 ( ) { java . io . File IDENT_0 = METHOD_1 ( ) ; METHOD_2 ( STRING_0 , STRING_1 , IDENT_0 ) ; METHOD_2 ( STRING_2 , STRING_3 , IDENT_0 ) ; com . IDENT_1 . IDENT_2 . processor . IDENT_3 IDENT_4 = new com . IDENT_1 . IDENT_2 . processor . METHOD_3 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { if ( IDENT_5 == null ) { return com . IDENT_1 . IDENT_2 . processor . METHOD_3 . IDENT_6 ; } java . util . List < com . IDENT_1 . IDENT_2 . IDENT_7 > commands = IDENT_8 . METHOD_5 ( IDENT_5 ) ; if ( commands == null ) { if ( IDENT_5 . toLowerCase ( ) . METHOD_6 ( IDENT_9 . IDENT_10 ) ) { return com . IDENT_1 . IDENT_2 . processor . METHOD_3 . IDENT_11 ; } return com . IDENT_1 . IDENT_2 . processor . METHOD_3 . IDENT_12 ; } else if ( ( commands . size ( ) ) == 0 ) { return 0 ; } int i = 0 ; for ( com . IDENT_1 . IDENT_2 . IDENT_7 IDENT_13 : commands ) { if ( STRING_4 . equalsIgnoreCase ( IDENT_13 . METHOD_7 ( ) ) ) { i ++ ; } else if ( STRING_5 . equalsIgnoreCase ( IDENT_13 . METHOD_7 ( ) ) ) { if ( ( IDENT_13 . METHOD_8 ( ) . size ( ) ) == 0 ) { i ++ ; } else { java . lang . String IDENT_14 = IDENT_13 . METHOD_8 ( ) . get ( 0 ) ; java . util . List < java . util . Map < java . lang . String , java . lang . String > > data = IDENT_8 . METHOD_9 ( IDENT_14 ) ; if ( data == null ) { i ++ ; } else if ( ( data . size ( ) ) == 0 ) { i ++ ; } else { i += data . size ( ) ; } } } else if ( STRING_6 . equalsIgnoreCase ( IDENT_13 . METHOD_7 ( ) ) ) { i += METHOD_4 ( IDENT_13 . METHOD_10 ( ) ) ; } } return i ; }
org . junit . Assert . assertThat ( IDENT_4 . METHOD_4 ( STRING_0 ) , org . hamcrest . CoreMatchers . is ( 1 ) ) 