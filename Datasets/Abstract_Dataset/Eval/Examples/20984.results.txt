METHOD_0 ( ) { final long IDENT_0 = INT_0 ; java . lang . String query = STRING_0 ; "<AssertPlaceHolder>" ; } run ( org . apache . IDENT_1 . framework . IDENT_2 , org . apache . commons . cli . IDENT_3 ) { final boolean IDENT_4 = org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_1 ( cli ) ; java . lang . String IDENT_9 = org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_10 . get ( cli ) ; java . util . Optional < java . lang . String > IDENT_11 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_12 . get ( cli ) ) ; java . util . Optional < java . lang . String > IDENT_13 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_14 . get ( cli ) ) ; switch ( IDENT_9 . toLowerCase ( ) ) { case STRING_1 : java . lang . String IDENT_15 = org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_16 . get ( cli ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_15 ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } if ( IDENT_11 . METHOD_3 ( ) ) { METHOD_4 ( IDENT_15 , client , org . apache . IDENT_5 . common . configuration . IDENT_17 . valueOf ( IDENT_11 . get ( ) ) , IDENT_13 ) ; } else { METHOD_4 ( IDENT_15 , client ) ; } break ; case STRING_3 : if ( IDENT_11 . METHOD_3 ( ) ) { METHOD_5 ( client , org . apache . IDENT_5 . common . configuration . IDENT_17 . valueOf ( IDENT_11 . get ( ) ) , IDENT_13 ) ; } else { METHOD_5 ( client ) ; } break ; case STRING_4 : METHOD_6 ( client , org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_18 . get ( cli ) , IDENT_4 ) ; break ; case STRING_5 : if ( IDENT_11 . METHOD_3 ( ) ) { java . util . Optional < java . lang . String > IDENT_19 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_20 . get ( cli ) ) ; java . util . Optional < java . lang . String > IDENT_21 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_22 . get ( cli ) ) ; java . util . Optional < java . lang . String > IDENT_23 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_24 . get ( cli ) ) ; java . util . Optional < java . lang . String > IDENT_25 = java . util . Optional . METHOD_2 ( org . apache . IDENT_5 . common . cli . IDENT_6 . IDENT_7 . IDENT_26 . get ( cli ) ) ; METHOD_7 ( client , org . apache . IDENT_5 . common . configuration . IDENT_17 . valueOf ( IDENT_11 . get ( ) ) , IDENT_13 , IDENT_21 , IDENT_19 , IDENT_23 , IDENT_25 ) ; } else { throw new java . lang . IllegalArgumentException ( STRING_6 ) ; } break ; default : throw new java . lang . IllegalStateException ( ( ( STRING_7 + IDENT_9 ) + STRING_8 ) ) ; } }
org . junit . Assert . assertEquals ( ( IDENT_0 + 2 ) , run ( query , new java . util . HashMap ( ) ) ) 