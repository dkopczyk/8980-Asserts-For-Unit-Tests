METHOD_0 ( ) { org . apache . nifi . remote . client . http . IDENT_0 . IDENT_1 = new java . util . HashSet ( ) ; try ( org . apache . nifi . remote . client . IDENT_2 client = METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . build ( ) ) { final org . apache . nifi . remote . IDENT_3 transaction = client . METHOD_3 ( IDENT_4 . IDENT_5 ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( org . apache . nifi . remote . IDENT_4 ) { final int IDENT_6 = ( ( int ) ( config . METHOD_4 ( TimeUnit . IDENT_7 ) ) ) ; org . apache . nifi . remote . IDENT_8 IDENT_9 ; while ( ( IDENT_9 = IDENT_10 . METHOD_5 ( IDENT_11 ) ) != null ) { org . apache . nifi . remote . client . http . IDENT_12 . logger . debug ( STRING_1 , IDENT_9 ) ; final org . apache . nifi . remote . protocol . IDENT_13 IDENT_14 = new org . apache . nifi . remote . io . http . METHOD_6 ( ) ; final java . lang . String IDENT_15 = METHOD_7 ( IDENT_9 . METHOD_8 ( ) ) ; final java . lang . StringBuilder IDENT_16 = new java . lang . StringBuilder ( ) ; config . METHOD_9 ( ) . METHOD_10 ( ( url ) -> { if ( ( IDENT_16 . length ( ) ) > 0 ) { IDENT_16 . append ( STRING_2 ) ; IDENT_16 . append ( url ) ; } } ) ; final org . apache . nifi . remote . IDENT_17 IDENT_18 = new org . apache . nifi . remote . METHOD_11 ( IDENT_9 . METHOD_8 ( ) , IDENT_14 , IDENT_15 , IDENT_16 . toString ( ) ) ; final int IDENT_19 = ( ( int ) ( config . METHOD_12 ( TimeUnit . IDENT_7 ) ) ) ; java . lang . String IDENT_20 = config . METHOD_13 ( ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_20 ) ) { IDENT_20 = IDENT_21 . METHOD_13 ( config . METHOD_14 ( ) , IDENT_11 ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_20 ) ) { IDENT_18 . close ( ) ; throw new java . io . IOException ( ( STRING_3 + ( config . METHOD_14 ( ) ) ) ) ; } } final org . apache . nifi . remote . util . IDENT_22 IDENT_23 = new org . apache . nifi . remote . util . METHOD_15 ( config . METHOD_16 ( ) , config . METHOD_17 ( ) , config . METHOD_18 ( ) ) ; IDENT_23 . METHOD_19 ( IDENT_18 . METHOD_20 ( ) ) ; IDENT_23 . METHOD_21 ( IDENT_6 ) ; IDENT_23 . METHOD_22 ( IDENT_6 ) ; IDENT_23 . METHOD_23 ( config . METHOD_24 ( TimeUnit . IDENT_7 ) ) ; IDENT_23 . METHOD_25 ( config . METHOD_26 ( ) ) ; IDENT_23 . METHOD_27 ( config . METHOD_28 ( ) ) ; IDENT_23 . METHOD_29 ( config . METHOD_30 ( TimeUnit . IDENT_7 ) ) ; IDENT_23 . METHOD_31 ( config . METHOD_32 ( ) ) ; IDENT_23 . METHOD_33 ( config . METHOD_34 ( ) ) ; IDENT_23 . METHOD_35 ( config . METHOD_36 ( TimeUnit . IDENT_7 ) ) ; final java . lang . String IDENT_24 ; try { IDENT_24 = IDENT_23 . METHOD_37 ( IDENT_11 , IDENT_20 ) ; IDENT_14 . METHOD_38 ( IDENT_23 . METHOD_39 ( ) ) ; } catch ( final java . lang . Exception e ) { IDENT_23 . close ( ) ; org . apache . nifi . remote . client . http . IDENT_12 . logger . warn ( STRING_4 , IDENT_18 , e . toString ( ) ) ; IDENT_10 . METHOD_40 ( IDENT_18 , IDENT_19 ) ; if ( ( ( e instanceof org . apache . nifi . remote . exception . IDENT_25 ) || ( e instanceof org . apache . nifi . remote . exception . IDENT_26 ) ) || ( e instanceof org . apache . nifi . remote . exception . IDENT_27 ) ) { throw e ; } org . apache . nifi . remote . client . http . IDENT_12 . logger . debug ( STRING_5 ) ; continue ; } final java . lang . Integer IDENT_28 = IDENT_23 . METHOD_41 ( ) ; final org . apache . nifi . remote . protocol . http . IDENT_29 transaction = new org . apache . nifi . remote . protocol . http . METHOD_42 ( IDENT_28 , IDENT_18 , IDENT_11 , config . METHOD_28 ( ) , IDENT_20 , IDENT_19 , config . METHOD_18 ( ) ) { @ org . apache . nifi . remote . client . http . Override MOD_0 void close ( ) throws java . io . IOException { try { super . close ( ) ; } finally { IDENT_30 . remove ( this ) ; } } } ; try { transaction . METHOD_43 ( IDENT_23 , IDENT_24 ) ; } catch ( final java . lang . Exception e ) { transaction . error ( ) ; throw e ; } IDENT_30 . add ( transaction ) ; return transaction ; } org . apache . nifi . remote . client . http . IDENT_12 . logger . info ( STRING_6 ) ; return null ; }
org . junit . Assert . assertNull ( transaction ) 