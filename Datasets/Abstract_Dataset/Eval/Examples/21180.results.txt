METHOD_0 ( ) { final java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_0 = java . util . Collections . METHOD_1 ( STRING_0 , java . util . Arrays . asList ( STRING_1 , STRING_2 ) ) ; final java . util . Map < java . lang . String , java . lang . String > IDENT_1 = java . util . Collections . METHOD_1 ( STRING_3 , STRING_0 ) ; final com . IDENT_2 . client . IDENT_3 connection = new org . apache . nifi . IDENT_4 . IDENT_5 . METHOD_2 ( IDENT_1 , IDENT_0 ) ; try ( org . apache . nifi . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = new org . apache . nifi . IDENT_4 . IDENT_5 . METHOD_3 ( connection , mock ( org . apache . nifi . logging . IDENT_8 . class ) ) ) { IDENT_7 . METHOD_4 ( STRING_4 . getBytes ( ) , IDENT_9 . IDENT_10 , STRING_0 , STRING_3 ) ; org . apache . nifi . IDENT_4 . IDENT_5 . IDENT_11 IDENT_12 = new org . apache . nifi . IDENT_4 . IDENT_5 . IDENT_13 . METHOD_5 ( connection ) ; org . apache . nifi . util . IDENT_14 runner = org . apache . nifi . util . IDENT_15 . METHOD_6 ( IDENT_12 ) ; runner . setProperty ( IDENT_11 . IDENT_16 , STRING_5 ) ; runner . setProperty ( IDENT_11 . IDENT_17 , STRING_1 ) ; runner . run ( ) ; final org . apache . nifi . util . IDENT_18 IDENT_19 = runner . METHOD_7 ( IDENT_20 . IDENT_21 ) . get ( 0 ) ; "<AssertPlaceHolder>" ; } } get ( int ) { final java . util . List < org . apache . nifi . IDENT_22 . IDENT_23 > IDENT_24 = new java . util . ArrayList ( java . lang . Math . min ( INT_0 , IDENT_25 ) ) ; for ( int i = 0 ; i < IDENT_25 ; i ++ ) { final org . apache . nifi . util . IDENT_18 IDENT_26 = get ( ) ; if ( IDENT_26 == null ) { return IDENT_24 ; } IDENT_24 . add ( IDENT_26 ) ; } return IDENT_24 ; }
org . junit . Assert . assertNotNull ( IDENT_19 ) 