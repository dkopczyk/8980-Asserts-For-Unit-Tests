METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 < org . apache . nifi . controller . queue . IDENT_1 > IDENT_2 = new java . util . concurrent . atomic . METHOD_1 ( ) ; final java . util . concurrent . atomic . METHOD_1 < org . apache . nifi . controller . queue . IDENT_1 > IDENT_3 = new java . util . concurrent . atomic . METHOD_1 ( ) ; final java . util . List < org . apache . nifi . IDENT_4 . IDENT_5 > IDENT_6 = new java . util . ArrayList ( ) ; final org . apache . nifi . IDENT_4 . IDENT_5 IDENT_7 = METHOD_2 ( IDENT_2 ) ; final org . apache . nifi . IDENT_4 . IDENT_5 IDENT_8 = METHOD_2 ( IDENT_3 ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_6 . add ( IDENT_8 ) ; final org . apache . nifi . controller . queue . IDENT_1 IDENT_9 = IDENT_3 . get ( ) ; final org . apache . nifi . controller . repository . IDENT_10 IDENT_11 = new org . apache . nifi . controller . repository . IDENT_12 . Builder ( ) . id ( INT_0 ) . METHOD_3 ( STRING_0 , STRING_1 ) . METHOD_4 ( java . lang . System . currentTimeMillis ( ) ) . build ( ) ; IDENT_9 . put ( IDENT_11 ) ; when ( IDENT_4 . METHOD_5 ( ) ) . thenReturn ( IDENT_6 ) ; java . util . List < org . apache . nifi . IDENT_13 . IDENT_14 > result = session . get ( 2 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 , times ( 1 ) ) . METHOD_6 ( any ( org . apache . nifi . processor . IDENT_15 . class ) , any ( java . util . Set . class ) ) ; verify ( IDENT_8 , times ( 1 ) ) . METHOD_6 ( any ( org . apache . nifi . processor . IDENT_15 . class ) , any ( java . util . Set . class ) ) ; } size ( ) { return bytes . length ; }
org . junit . Assert . assertEquals ( 1 , result . size ( ) ) 