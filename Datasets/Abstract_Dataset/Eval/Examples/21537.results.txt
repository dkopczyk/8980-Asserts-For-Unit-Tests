METHOD_0 ( ) { org . apache . olingo . odata2 . api . uri . info . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . apache . olingo . odata2 . api . uri . info . IDENT_0 . class ) ; org . apache . olingo . odata2 . api . IDENT_2 . IDENT_3 IDENT_4 = org . easymock . EasyMock . METHOD_1 ( org . apache . olingo . odata2 . api . IDENT_2 . IDENT_3 . class ) ; org . apache . olingo . odata2 . api . IDENT_2 . IDENT_5 IDENT_6 = org . easymock . EasyMock . METHOD_1 ( org . apache . olingo . odata2 . api . IDENT_2 . IDENT_5 . class ) ; try { org . easymock . EasyMock . expect ( IDENT_6 . getName ( ) ) . METHOD_2 ( new org . apache . olingo . odata2 . api . IDENT_2 . METHOD_3 ( null ) ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_4 ( ) ) . METHOD_2 ( new org . apache . olingo . odata2 . api . IDENT_2 . METHOD_3 ( null ) ) ; } catch ( org . apache . olingo . odata2 . api . IDENT_2 . METHOD_3 IDENT_7 ) { } org . easymock . EasyMock . replay ( IDENT_6 ) ; org . easymock . EasyMock . replay ( IDENT_4 ) ; org . easymock . EasyMock . expect ( IDENT_1 . METHOD_5 ( ) ) . METHOD_6 ( IDENT_4 ) ; org . easymock . EasyMock . expect ( IDENT_1 . METHOD_7 ( ) ) . METHOD_6 ( null ) ; org . easymock . EasyMock . expect ( IDENT_1 . METHOD_8 ( ) ) . METHOD_6 ( null ) ; org . easymock . EasyMock . replay ( IDENT_1 ) ; try { org . apache . olingo . odata2 . jpa . processor . core . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 = ( ( org . apache . olingo . odata2 . jpa . processor . core . IDENT_8 . IDENT_9 . IDENT_10 ) ( org . apache . olingo . odata2 . jpa . processor . api . IDENT_8 . IDENT_12 . METHOD_9 ( IDENT_13 . IDENT_14 , IDENT_1 ) ) ) ; IDENT_11 . build ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_15 e ) { org . junit . Assert . fail ( ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_16 e ) { "<AssertPlaceHolder>" ; } } build ( ) { return properties ; }
org . junit . Assert . assertTrue ( true ) 