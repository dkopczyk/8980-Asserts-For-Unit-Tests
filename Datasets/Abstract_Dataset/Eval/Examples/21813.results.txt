METHOD_0 ( ) { IDENT_0 = new org . apache . IDENT_1 . commons . IDENT_2 . IDENT_3 < java . lang . String > ( ) { MOD_0 java . lang . String build ( java . lang . String IDENT_4 , java . lang . String IDENT_5 , java . lang . String IDENT_6 , java . lang . String IDENT_7 ) { return "" ; } } ; java . lang . String IDENT_8 = STRING_0 ; "<AssertPlaceHolder>" ; } read ( java . lang . String ) { if ( ( IDENT_9 == null ) || ( IDENT_9 . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . lang . StringBuilder buffer = new java . lang . StringBuilder ( ) ; java . io . IDENT_10 reader = new java . io . METHOD_1 ( new java . io . METHOD_2 ( IDENT_9 ) ) ; java . lang . String line = null ; try { while ( ( line = reader . METHOD_3 ( ) ) != null ) { buffer . append ( line . trim ( ) ) ; } } catch ( java . io . IOException e ) { } finally { try { reader . close ( ) ; } catch ( java . io . IOException e ) { } } java . util . regex . IDENT_11 matcher = IDENT_12 . matcher ( buffer . toString ( ) ) ; if ( ! ( matcher . matches ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( IDENT_9 + STRING_2 ) + ( IDENT_12 . pattern ( ) ) ) ) ; } java . lang . String header = matcher . group ( 1 ) ; java . lang . String IDENT_5 = METHOD_4 ( header ) ; java . lang . String IDENT_13 = matcher . group ( 2 ) ; java . lang . StringBuilder IDENT_14 = new java . lang . StringBuilder ( ) ; IDENT_14 . append ( matcher . group ( 3 ) ) . append ( STRING_3 ) ; IDENT_14 . append ( matcher . group ( 4 ) ) . append ( STRING_3 ) ; IDENT_14 . append ( matcher . group ( 5 ) ) ; return build ( IDENT_5 , IDENT_13 , IDENT_14 . toString ( ) ) ; }
org . junit . Assert . assertNotNull ( IDENT_0 . read ( IDENT_8 ) ) 