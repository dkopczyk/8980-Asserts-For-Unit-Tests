METHOD_0 ( ) { final java . lang . String IDENT_0 = ( IDENT_1 . IDENT_2 . IDENT_3 . maven . plugin . support . IDENT_4 . IDENT_5 ) + STRING_0 ; final java . lang . String IDENT_6 = ( IDENT_0 + ( IDENT_1 . IDENT_2 . IDENT_3 . maven . plugin . support . IDENT_4 . IDENT_5 ) ) + STRING_1 ; final java . lang . String IDENT_7 = ( IDENT_8 . getPath ( ) ) + IDENT_6 ; final java . lang . String IDENT_9 = ( IDENT_8 . getPath ( ) ) + IDENT_0 ; IDENT_10 . METHOD_1 ( new java . io . File ( IDENT_7 ) ) ; IDENT_10 . METHOD_2 ( ( ( IDENT_7 + STRING_2 ) + IDENT_9 ) ) ; "<AssertPlaceHolder>" ; } resolve ( ) { org . apache . commons . lang3 . IDENT_11 . METHOD_3 ( IDENT_8 , STRING_3 ) ; org . apache . commons . lang3 . IDENT_11 . METHOD_3 ( log , STRING_4 ) ; java . lang . String result = null ; final java . io . File IDENT_12 = ( ( IDENT_13 ) == null ) ? IDENT_14 : IDENT_13 ; java . io . File IDENT_15 = null ; org . apache . commons . lang3 . IDENT_11 . METHOD_3 ( IDENT_12 , STRING_5 ) ; if ( ( ( IDENT_16 ) != null ) && ( IDENT_12 . getPath ( ) . startsWith ( IDENT_16 . getPath ( ) ) ) ) { IDENT_15 = IDENT_16 ; } else if ( IDENT_12 . getPath ( ) . startsWith ( IDENT_8 . getPath ( ) ) ) { IDENT_15 = IDENT_8 ; } else { for ( final java . lang . String IDENT_17 : METHOD_4 ( ) ) { if ( IDENT_12 . getPath ( ) . startsWith ( IDENT_17 ) ) { IDENT_15 = new java . io . File ( IDENT_17 ) ; break ; } } } log . debug ( ( STRING_6 + ( IDENT_8 ) ) ) ; log . debug ( ( STRING_7 + ( IDENT_18 ) ) ) ; log . debug ( ( STRING_8 + IDENT_12 ) ) ; log . debug ( ( STRING_9 + IDENT_15 ) ) ; if ( IDENT_15 != null ) { result = org . apache . commons . lang3 . StringUtils . METHOD_5 ( IDENT_12 . getPath ( ) , IDENT_15 . getPath ( ) ) ; } log . debug ( ( STRING_10 + result ) ) ; return result ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_10 . resolve ( ) ) 