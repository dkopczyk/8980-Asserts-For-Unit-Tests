METHOD_0 ( ) { org . apache . poi . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . apache . poi . IDENT_0 . IDENT_4 . METHOD_1 ( STRING_0 ) ; org . apache . poi . IDENT_0 . IDENT_1 . IDENT_5 IDENT_6 = IDENT_3 . METHOD_2 ( 0 ) ; IDENT_6 . METHOD_3 ( 3 , 3 , ( - 1 ) ) ; for ( org . apache . poi . IDENT_0 . IDENT_1 . IDENT_7 r : IDENT_6 ) { r . METHOD_4 ( ) ; } IDENT_6 . METHOD_3 ( 6 , 6 , 1 ) ; org . apache . poi . IDENT_0 . IDENT_1 . IDENT_2 read = org . apache . poi . IDENT_0 . IDENT_4 . METHOD_5 ( IDENT_3 ) ; IDENT_3 . close ( ) ; "<AssertPlaceHolder>" ; org . apache . poi . IDENT_0 . IDENT_1 . IDENT_5 IDENT_8 = read . METHOD_2 ( 0 ) ; METHOD_6 ( IDENT_8 , 0 , STRING_1 ) ; METHOD_6 ( IDENT_8 , 1 , STRING_2 ) ; METHOD_6 ( IDENT_8 , 2 , STRING_3 ) ; METHOD_6 ( IDENT_8 , 3 , null ) ; METHOD_6 ( IDENT_8 , 4 , STRING_4 ) ; METHOD_6 ( IDENT_8 , 5 , STRING_5 ) ; METHOD_6 ( IDENT_8 , 6 , null ) ; METHOD_6 ( IDENT_8 , 7 , STRING_6 ) ; METHOD_6 ( IDENT_8 , 8 , STRING_7 ) ; read . close ( ) ; } close ( ) { IDENT_9 = true ; IDENT_10 . close ( ) ; }
org . junit . Assert . assertNotNull ( read ) 