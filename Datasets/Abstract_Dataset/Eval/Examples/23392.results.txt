METHOD_0 ( ) { METHOD_1 ( ) ; org . apache . IDENT_0 . plugin . util . IDENT_1 IDENT_2 = new org . apache . IDENT_0 . plugin . util . METHOD_2 ( ) ; IDENT_2 . METHOD_3 ( METHOD_2 . IDENT_3 , STRING_0 ) ; IDENT_2 . METHOD_3 ( METHOD_2 . IDENT_4 , STRING_1 ) ; org . apache . IDENT_0 . view . IDENT_5 IDENT_6 = IDENT_7 . METHOD_4 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . apache . IDENT_0 . plugin . util . METHOD_2 ) { org . apache . IDENT_0 . view . IDENT_5 IDENT_8 = new org . apache . IDENT_0 . view . METHOD_5 ( ) ; int IDENT_9 = IDENT_2 . METHOD_6 ( ) ; int IDENT_10 = IDENT_2 . METHOD_7 ( ) ; IDENT_2 . METHOD_8 ( 0 ) ; IDENT_2 . METHOD_9 ( Integer . MAX_VALUE ) ; boolean IDENT_11 = false ; if ( ( IDENT_2 . METHOD_10 ( STRING_2 ) ) != null ) { IDENT_11 = true ; } java . util . List < T > IDENT_12 = METHOD_11 ( IDENT_2 , IDENT_13 , IDENT_14 , IDENT_8 ) ; java . util . List < T > IDENT_15 = new java . util . ArrayList < T > ( ) ; for ( T IDENT_16 : IDENT_12 ) { if ( ( IDENT_17 . METHOD_12 ( IDENT_16 , null ) ) || ( ( IDENT_17 . METHOD_13 ( ) ) && IDENT_11 ) ) { IDENT_15 . add ( IDENT_16 ) ; } } if ( ! ( IDENT_15 . isEmpty ( ) ) ) { METHOD_14 ( IDENT_15 , IDENT_9 , IDENT_10 , IDENT_8 ) ; } return IDENT_8 ; }
org . junit . Assert . assertNotNull ( IDENT_6 ) 