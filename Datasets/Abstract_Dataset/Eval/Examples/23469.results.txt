METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 x = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; final int IDENT_1 = 100 ; final java . util . List < java . lang . Integer > IDENT_2 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { IDENT_2 . add ( i ) ; } final org . apache . IDENT_3 . IDENT_4 . impl . IDENT_5 < java . lang . Integer > IDENT_6 = new org . apache . IDENT_3 . IDENT_4 . impl . METHOD_2 ( new org . apache . IDENT_3 . IDENT_4 . IDENT_7 < java . lang . Integer > ( ) { @ org . apache . IDENT_3 . IDENT_4 . test . Override public void METHOD_3 ( final java . lang . Integer value ) { java . util . logging . IDENT_8 . METHOD_4 ( ) . info ( ( STRING_0 + value ) ) ; x . METHOD_5 ( value ) ; } } , IDENT_1 , 1 ) ; IDENT_6 . METHOD_3 ( IDENT_2 ) ; try { IDENT_6 . close ( ) ; } catch ( final java . lang . Exception e ) { org . junit . Assert . fail ( e . toString ( ) ) ; } "<AssertPlaceHolder>" ; } get ( ) { return this . IDENT_9 ; }
org . junit . Assert . assertEquals ( ( ( ( IDENT_1 - 1 ) * IDENT_1 ) / 2 ) , x . get ( ) ) 