METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( ) ) . andReturn ( null ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_2 ( ) ) . andReturn ( false ) ; response = control . METHOD_3 ( org . apache . shindig . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; control . replay ( ) ; "<AssertPlaceHolder>" ; control . verify ( ) ; } process ( org . apache . http . IDENT_4 , org . apache . http . protocol . IDENT_5 ) { org . apache . http . IDENT_6 entity = response . METHOD_4 ( ) ; if ( entity != null ) { org . apache . http . IDENT_7 IDENT_8 = entity . METHOD_5 ( ) ; if ( IDENT_8 != null ) { for ( org . apache . http . IDENT_9 codec : IDENT_8 . METHOD_6 ( ) ) { java . lang . String IDENT_10 = codec . getName ( ) ; if ( STRING_0 . equalsIgnoreCase ( IDENT_10 ) ) { response . METHOD_7 ( new org . apache . shindig . IDENT_1 . http . IDENT_11 . METHOD_8 ( response . METHOD_4 ( ) ) ) ; return ; } else if ( STRING_1 . equals ( IDENT_10 ) ) { response . METHOD_7 ( new org . apache . shindig . IDENT_1 . http . IDENT_11 . METHOD_9 ( response . METHOD_4 ( ) ) ) ; return ; } } } } }
org . junit . Assert . assertTrue ( processor . process ( request , response ) ) 