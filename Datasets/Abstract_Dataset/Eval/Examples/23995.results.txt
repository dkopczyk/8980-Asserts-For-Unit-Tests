METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 0 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 } ; org . apache . IDENT_1 . IDENT_2 . IDENT_3 builder = new org . apache . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; builder . METHOD_2 ( STRING_7 , STRING_6 ) . METHOD_3 ( STRING_8 , STRING_3 ) . METHOD_4 ( STRING_9 , STRING_1 ) ; org . apache . IDENT_1 . IDENT_2 . METHOD_1 IDENT_4 = new org . apache . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; IDENT_4 . with ( builder ) ; java . lang . String [ ] IDENT_5 = IDENT_4 . build ( ) ; "<AssertPlaceHolder>" ; } build ( ) { java . util . List < java . lang . String > result = new java . util . ArrayList ( ) ; if ( IDENT_6 ) { org . apache . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_5 ( result ) ; } if ( ! ( properties . isEmpty ( ) ) ) { java . util . Collections . addAll ( result , METHOD_6 ( properties . values ( ) ) ) ; } if ( ! ( options . isEmpty ( ) ) ) { java . util . Collections . addAll ( result , METHOD_7 ( options . values ( ) ) ) ; } if ( ! ( IDENT_8 . isEmpty ( ) ) ) { result . add ( org . apache . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 ) ; java . util . Collections . addAll ( result , METHOD_7 ( IDENT_8 . values ( ) ) ) ; } return result . toArray ( new java . lang . String [ result . size ( ) ] ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , IDENT_5 ) 