METHOD_0 ( ) { try { when ( IDENT_0 . METHOD_1 ( STRING_0 , STRING_1 ) ) . thenReturn ( true ) ; when ( IDENT_0 . METHOD_2 ( ) ) . thenReturn ( true ) ; when ( IDENT_0 . METHOD_3 ( ) ) . thenReturn ( false ) ; when ( IDENT_0 . METHOD_4 ( ) ) . thenReturn ( 200 ) ; when ( IDENT_0 . METHOD_5 ( STRING_2 ) ) . thenReturn ( true ) ; org . apache . commons . net . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . commons . net . IDENT_1 . METHOD_6 ( ) ; IDENT_3 . setName ( STRING_3 ) ; IDENT_3 . METHOD_7 ( METHOD_6 . IDENT_4 ) ; org . apache . commons . net . IDENT_1 . METHOD_6 IDENT_5 = new org . apache . commons . net . IDENT_1 . METHOD_6 ( ) ; IDENT_5 . setName ( STRING_4 ) ; IDENT_5 . METHOD_7 ( METHOD_6 . IDENT_4 ) ; when ( IDENT_0 . METHOD_8 ( IDENT_6 . IDENT_7 , "" ) ) . thenReturn ( IDENT_8 ) ; when ( IDENT_8 . hasNext ( ) ) . thenReturn ( true , false ) ; when ( IDENT_8 . METHOD_9 ( INT_0 ) ) . thenReturn ( new org . apache . commons . net . IDENT_1 . METHOD_6 [ ] { IDENT_3 , IDENT_5 } ) ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( STRING_5 ) ; } METHOD_10 ( ) ; conf . set ( IDENT_6 . IDENT_9 , STRING_6 ) ; conf . set ( IDENT_6 . IDENT_10 , STRING_7 ) ; try { java . lang . String IDENT_11 = conf . get ( IDENT_6 . IDENT_10 ) ; java . util . List < java . lang . String > IDENT_12 = org . apache . IDENT_13 . util . IDENT_14 . METHOD_11 ( IDENT_11 , conf ) ; "<AssertPlaceHolder>" ; } catch ( java . io . IOException IDENT_15 ) { org . junit . Assert . fail ( STRING_5 ) ; } } size ( ) { return this . IDENT_16 . size ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_12 . size ( ) ) 