METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . IDENT_3 resources = new org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 ( METHOD_2 ( java . util . Collections . METHOD_3 ( ) ) ) ; org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 IDENT_4 = new org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 ( METHOD_2 ( java . util . Collections . METHOD_3 ( ) ) ) ; double min = resources . METHOD_4 ( IDENT_4 , 0 , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 , double , double ) { if ( org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 . LOG . METHOD_5 ( ) ) { org . apache . IDENT_0 . IDENT_1 . resource . IDENT_2 . METHOD_1 . LOG . trace ( ( STRING_0 + STRING_1 ) , IDENT_5 , IDENT_6 , METHOD_6 ( ) , IDENT_7 . METHOD_6 ( ) ) ; } double min = 1.0 ; if ( IDENT_6 > IDENT_5 ) { METHOD_7 ( IDENT_7 , IDENT_5 , IDENT_6 ) ; } if ( IDENT_5 != 0.0 ) { min = java . lang . Math . min ( min , ( IDENT_6 / IDENT_5 ) ) ; } double IDENT_8 = METHOD_8 ( ) ; if ( ( IDENT_7 . METHOD_8 ( ) ) > IDENT_8 ) { METHOD_7 ( IDENT_7 , IDENT_5 , IDENT_6 ) ; } if ( IDENT_8 != 0.0 ) { min = java . lang . Math . min ( min , ( ( IDENT_7 . METHOD_8 ( ) ) / IDENT_8 ) ) ; } if ( ( IDENT_7 . IDENT_9 . length ) > ( IDENT_9 . length ) ) { METHOD_7 ( IDENT_7 , IDENT_5 , IDENT_6 ) ; } for ( int i = 0 ; i < ( IDENT_9 . length ) ; i ++ ) { if ( ( IDENT_9 [ i ] ) == 0.0 ) { continue ; } if ( i >= ( IDENT_7 . IDENT_9 . length ) ) { return 0 ; } if ( ( IDENT_7 . IDENT_9 [ i ] ) > ( IDENT_9 [ i ] ) ) { METHOD_7 ( IDENT_7 , IDENT_5 , IDENT_6 ) ; } min = java . lang . Math . min ( min , ( ( IDENT_7 . IDENT_9 [ i ] ) / ( IDENT_9 [ i ] ) ) ) ; } return min * FLOAT_0 ; }
org . junit . Assert . assertThat ( min , org . hamcrest . CoreMatchers . is ( FLOAT_0 ) ) 