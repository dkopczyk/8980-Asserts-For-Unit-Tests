METHOD_0 ( ) { org . apache . IDENT_0 . catalog . Schema schema = org . apache . IDENT_0 . catalog . IDENT_1 . builder ( ) . add ( STRING_0 , Type . IDENT_2 ) . add ( STRING_1 , Type . IDENT_2 ) . build ( ) ; org . apache . IDENT_0 . catalog . IDENT_3 [ ] IDENT_4 = org . apache . IDENT_0 . plan . util . IDENT_5 . METHOD_1 ( schema ) ; org . apache . IDENT_0 . storage . IDENT_6 s = new org . apache . IDENT_0 . storage . METHOD_2 ( 2 ) ; s . put ( 0 , org . apache . IDENT_0 . IDENT_7 . IDENT_8 . METHOD_3 ( ) ) ; s . put ( 1 , org . apache . IDENT_0 . IDENT_7 . IDENT_8 . METHOD_4 ( STRING_2 ) ) ; org . apache . IDENT_0 . storage . METHOD_2 e = new org . apache . IDENT_0 . storage . METHOD_2 ( 2 ) ; e . put ( 0 , org . apache . IDENT_0 . IDENT_7 . IDENT_8 . METHOD_4 ( STRING_3 ) ) ; e . put ( 1 , org . apache . IDENT_0 . IDENT_7 . IDENT_8 . METHOD_3 ( ) ) ; org . apache . IDENT_0 . storage . IDENT_9 expected = new org . apache . IDENT_0 . storage . METHOD_5 ( IDENT_4 , s , e ) ; org . apache . IDENT_0 . engine . IDENT_10 . IDENT_11 IDENT_12 = new org . apache . IDENT_0 . engine . IDENT_10 . METHOD_6 ( expected , IDENT_4 , true ) ; org . apache . IDENT_0 . storage . METHOD_5 [ ] IDENT_13 = IDENT_12 . METHOD_7 ( 1 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( int ) { com . google . common . base . IDENT_14 . METHOD_8 ( ( IDENT_15 > 0 ) , ( STRING_4 + IDENT_15 ) ) ; com . google . common . base . IDENT_14 . METHOD_8 ( ( ( IDENT_16 . compareTo ( java . math . BigInteger . valueOf ( IDENT_15 ) ) ) >= 0 ) , ( ( STRING_5 + ( IDENT_16 ) ) + STRING_6 ) ) ; int IDENT_17 ; for ( IDENT_17 = 0 ; IDENT_17 < ( IDENT_18 . length ) ; IDENT_17 ++ ) { if ( ( IDENT_18 [ IDENT_17 ] . compareTo ( java . math . BigInteger . valueOf ( IDENT_15 ) ) ) >= 0 ) break ; } this . IDENT_19 = IDENT_17 ; java . math . BigInteger [ ] IDENT_20 = new java . math . BigInteger [ ( IDENT_19 ) + 1 ] ; for ( int i = IDENT_19 ; i >= 0 ; i OP_0 ) { if ( i == ( IDENT_19 ) ) { IDENT_20 [ i ] = IDENT_21 [ i ] ; } else { IDENT_20 [ i ] = IDENT_20 [ ( i + 1 ) ] . METHOD_9 ( IDENT_21 [ i ] ) ; } } java . util . List < org . apache . IDENT_0 . storage . METHOD_5 > IDENT_13 = com . google . common . collect . Lists . newArrayList ( ) ; java . math . BigDecimal x = new java . math . BigDecimal ( IDENT_20 [ 0 ] ) ; java . math . BigInteger IDENT_22 = x . METHOD_10 ( java . math . BigDecimal . valueOf ( IDENT_15 ) , IDENT_23 . IDENT_24 ) . METHOD_11 ( ) ; java . math . BigInteger IDENT_25 = IDENT_20 [ 0 ] ; org . apache . IDENT_0 . storage . IDENT_26 IDENT_27 = IDENT_28 . METHOD_12 ( ) ; org . apache . IDENT_0 . storage . METHOD_5 IDENT_29 ; while ( ( IDENT_25 . compareTo ( BigInteger . IDENT_30 ) ) > 0 ) { if ( ( IDENT_25 . compareTo ( IDENT_22 ) ) <= 0 ) { IDENT_29 = new org . apache . IDENT_0 . storage . METHOD_5 ( IDENT_4 , IDENT_27 , IDENT_28 . METHOD_13 ( ) ) ; } else { org . apache . IDENT_0 . storage . IDENT_26 next = METHOD_14 ( IDENT_27 , IDENT_22 , IDENT_19 ) ; IDENT_29 = new org . apache . IDENT_0 . storage . METHOD_5 ( IDENT_4 , IDENT_27 , next ) ; } IDENT_13 . add ( IDENT_29 ) ; IDENT_27 = IDENT_13 . get ( ( ( IDENT_13 . size ( ) ) - 1 ) ) . METHOD_13 ( ) ; IDENT_25 = IDENT_25 . METHOD_15 ( IDENT_22 ) ; } IDENT_13 . get ( 0 ) . METHOD_16 ( IDENT_31 . METHOD_12 ( ) ) ; IDENT_13 . get ( ( ( IDENT_13 . size ( ) ) - 1 ) ) . METHOD_17 ( IDENT_31 . METHOD_13 ( ) ) ; for ( int i = 0 ; i < ( IDENT_13 . size ( ) ) ; i ++ ) { if ( i > 1 ) { com . google . common . base . IDENT_14 . METHOD_18 ( ( ( IDENT_13 . get ( ( i - 2 ) ) . compareTo ( IDENT_13 . get ( ( i - 1 ) ) ) ) < 0 ) , ( ( ( STRING_7 + ( IDENT_13 . get ( ( i - 2 ) ) ) ) + STRING_8 ) + ( IDENT_13 . get ( ( i - 1 ) ) ) ) ) ; } } return IDENT_13 . toArray ( new org . apache . IDENT_0 . storage . METHOD_5 [ IDENT_13 . size ( ) ] ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_13 [ 0 ] ) 