METHOD_0 ( ) { org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 [ ] IDENT_3 = org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_1 ( conf , IDENT_7 , IDENT_8 . METHOD_2 ( ) , new org . apache . hadoop . fs . Path ( IDENT_8 . METHOD_3 ( ) ) , Integer . MAX_VALUE ) ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 [ ] IDENT_9 = org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_1 ( conf , IDENT_10 , IDENT_11 . METHOD_2 ( ) , new org . apache . hadoop . fs . Path ( IDENT_11 . METHOD_3 ( ) ) , Integer . MAX_VALUE ) ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 [ ] IDENT_12 = org . apache . IDENT_0 . util . IDENT_13 . METHOD_4 ( IDENT_3 , IDENT_9 ) ; org . apache . hadoop . fs . Path IDENT_14 = org . apache . IDENT_0 . util . IDENT_15 . METHOD_5 ( ( ( org . apache . IDENT_0 . IDENT_16 . IDENT_17 ) + STRING_0 ) ) ; org . apache . IDENT_0 . IDENT_18 . IDENT_19 ctx = new org . apache . IDENT_0 . IDENT_18 . METHOD_6 ( new org . apache . IDENT_0 . engine . query . METHOD_7 ( conf ) , org . apache . IDENT_0 . IDENT_20 . METHOD_8 ( ) , IDENT_12 , IDENT_14 ) ; ctx . METHOD_9 ( new org . apache . IDENT_0 . engine . IDENT_4 . IDENT_21 . METHOD_10 ( ) ) ; org . apache . IDENT_0 . IDENT_22 . IDENT_23 expr = IDENT_24 . parse ( IDENT_25 [ 3 ] ) ; org . apache . IDENT_0 . plan . IDENT_26 . IDENT_27 plan = IDENT_4 . METHOD_11 ( IDENT_28 , expr ) . METHOD_12 ( ) . METHOD_13 ( ) ; org . apache . IDENT_0 . engine . IDENT_4 . IDENT_29 IDENT_30 = new org . apache . IDENT_0 . engine . IDENT_4 . METHOD_14 ( conf ) ; org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_31 exec = IDENT_30 . METHOD_11 ( ctx , plan ) ; org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_32 IDENT_33 = ( ( org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_32 ) ( exec ) ) ; org . apache . IDENT_0 . engine . IDENT_4 . IDENT_5 . IDENT_34 tuple ; int count = 0 ; int i = 1 ; exec . init ( ) ; while ( ( tuple = exec . next ( ) ) != null ) { count = count + 1 ; } exec . close ( ) ; "<AssertPlaceHolder>" ; } close ( ) { if ( IDENT_35 ) { return ; } IDENT_35 = true ; if ( ( IDENT_36 ) != null ) { IDENT_36 . close ( ) ; IDENT_36 = null ; } if ( ( IDENT_37 ) != null ) { IDENT_37 . METHOD_15 ( ) ; IDENT_37 = null ; } if ( ( IDENT_38 ) != null ) { org . apache . IDENT_0 . IDENT_39 . exec . IDENT_40 . METHOD_16 ( IDENT_38 . METHOD_17 ( ) ) ; } if ( ! ( IDENT_41 . METHOD_18 ( IDENT_42 . IDENT_43 . . IDENT_44 ) ) ) { org . apache . hadoop . fs . Path IDENT_45 = org . apache . IDENT_0 . conf . IDENT_42 . METHOD_19 ( IDENT_41 , IDENT_46 ) ; if ( IDENT_47 . METHOD_3 ( ) . equals ( IDENT_45 . METHOD_20 ( ) ) ) { IDENT_48 . run ( ( ) -> { try { IDENT_45 . METHOD_21 ( IDENT_41 ) . delete ( IDENT_45 . METHOD_22 ( ) , true ) ; } catch ( e ) { org . apache . IDENT_0 . IDENT_39 . exec . IDENT_49 . LOG . error ( org . apache . IDENT_0 . IDENT_39 . exec . e ) ; } } ) ; } } org . apache . IDENT_0 . IDENT_39 . exec . IDENT_49 . LOG . info ( java . lang . String . format ( STRING_1 , IDENT_50 , IDENT_46 , ( ( IDENT_51 ) != null ? STRING_2 + ( IDENT_51 ) : "" ) , IDENT_52 ) ) ; }
org . junit . Assert . assertEquals ( 7 , count ) 