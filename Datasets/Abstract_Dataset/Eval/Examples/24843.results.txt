METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_1 ( ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_2 . io . IDENT_6 writer = METHOD_2 ( IDENT_7 ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_2 . io . IDENT_8 reader = METHOD_3 ( IDENT_7 ) ; final org . apache . tinkerpop . IDENT_0 . process . IDENT_9 . util . IDENT_10 IDENT_11 = IDENT_4 . METHOD_4 ( ) . METHOD_5 ( 1 ) . as ( "a" ) . METHOD_6 ( "name" ) . as ( "b" ) . out ( STRING_0 ) . out ( STRING_1 ) . as ( STRING_2 ) . METHOD_6 ( "name" , STRING_3 ) . values ( "name" ) . as ( STRING_4 ) . METHOD_7 ( ) . as ( STRING_5 ) . METHOD_8 ( ) . next ( ) ; try ( final java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ) { writer . METHOD_9 ( out , IDENT_11 ) ; final java . lang . String json = out . toString ( ) ; final org . apache . tinkerpop . IDENT_0 . process . METHOD_4 . util . IDENT_10 IDENT_12 = ( ( org . apache . tinkerpop . IDENT_0 . process . METHOD_4 . util . IDENT_10 ) ( reader . METHOD_10 ( new java . io . ByteArrayInputStream ( json . getBytes ( ) ) , java . lang . Object . class ) ) ) ; "<AssertPlaceHolder>" ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ( STRING_6 + ( e . getMessage ( ) ) ) ) ; } } toString ( ) { return ( ( STRING_7 + ( this . IDENT_13 ) ) + "]" ) + ( METHOD_11 ( ) ) ; }
org . junit . Assert . assertTrue ( IDENT_11 . toString ( ) . equals ( IDENT_12 . toString ( ) ) ) 