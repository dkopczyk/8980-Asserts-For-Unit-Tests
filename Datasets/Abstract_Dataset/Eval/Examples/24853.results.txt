METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . IDENT_2 result = graph . compute ( IDENT_3 . METHOD_1 ( graph ) . getClass ( ) ) . METHOD_2 ( org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . IDENT_4 . build ( ) . source ( IDENT_5 . METHOD_3 ( "name" , STRING_0 ) ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( FLOAT_0 ) . create ( graph ) ) . METHOD_6 ( ) . get ( ) ; "<AssertPlaceHolder>" ; final org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . List < org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . Path > IDENT_7 = result . METHOD_7 ( ) . get ( IDENT_4 . IDENT_8 ) ; final org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . List < org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . Path > expected = java . util . stream . IDENT_9 . METHOD_8 ( org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . Arrays . stream ( org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . IDENT_10 . IDENT_11 ) . filter ( ( p ) -> ( p [ 0 ] . equals ( STRING_0 ) ) && ( org . apache . tinkerpop . IDENT_0 . process . IDENT_1 . search . path . Arrays . asList ( STRING_0 , STRING_2 , STRING_3 , STRING_4 ) . contains ( p [ ( p . length - 1 ) ] ) ) ) . map ( helper :: IDENT_12 ) , java . util . stream . IDENT_9 . of ( helper . METHOD_9 ( STRING_0 , STRING_2 , STRING_3 , STRING_5 ) ) ) . collect ( java . util . stream . IDENT_13 . toList ( ) ) ; helper . METHOD_10 ( expected , IDENT_7 ) ; } METHOD_7 ( ) { return this . METHOD_7 ; }
org . junit . Assert . assertTrue ( result . METHOD_7 ( ) . exists ( IDENT_4 . IDENT_8 ) ) 