METHOD_0 ( ) { java . util . IDENT_0 random = new java . util . METHOD_1 ( ) ; int k = ( random . METHOD_2 ( 10 ) ) + 1 ; java . util . List < org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList < org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > ( ) ; int IDENT_6 = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int IDENT_7 = ( random . METHOD_2 ( 5 ) ) + 1 ; org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_8 = mock ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; when ( IDENT_8 . METHOD_3 ( ) ) . thenReturn ( java . lang . Long . valueOf ( IDENT_7 ) ) ; IDENT_5 . add ( IDENT_8 ) ; IDENT_6 += IDENT_7 ; } int IDENT_9 = ( random . METHOD_2 ( 100 ) ) + 1 ; java . util . HashMap < org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 , java . lang . Integer > IDENT_10 = IDENT_11 . METHOD_4 ( IDENT_5 , IDENT_9 ) ; int IDENT_12 = IDENT_6 + IDENT_9 ; int IDENT_13 = 0 ; java . util . Collection < java . lang . Integer > values = METHOD_4 . values ( ) ; for ( java . lang . Integer value : values ) { IDENT_13 += value ; } "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . List , int ) { java . util . IDENT_14 < org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 , java . lang . Integer > IDENT_15 = new java . util . IDENT_14 < org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 , java . lang . Integer > ( ) ; int [ ] IDENT_16 = METHOD_5 ( IDENT_5 . size ( ) , IDENT_9 ) ; int IDENT_17 = 0 ; for ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_18 : IDENT_5 ) { int records = ( ( int ) ( ( IDENT_18 . METHOD_3 ( ) ) + ( METHOD_5 [ IDENT_17 ] ) ) ) ; IDENT_15 . put ( IDENT_18 , records ) ; IDENT_17 ++ ; } return IDENT_15 ; }
org . junit . Assert . assertEquals ( IDENT_12 , IDENT_13 ) 