METHOD_0 ( ) { java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_3 = new java . util . concurrent . IDENT_4 < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > ( ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_5 = new java . util . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_6 = new java . util . METHOD_1 ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . model . IDENT_2 > emptyList = new java . util . ArrayList ( ) ; when ( IDENT_7 . METHOD_2 ( ) ) . thenReturn ( IDENT_3 ) ; IDENT_5 = METHOD_3 ( emptyList ) ; IDENT_6 = IDENT_8 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( org . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . logger . METHOD_5 ( ) ) { org . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . logger . debug ( STRING_0 ) ; } java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_11 = IDENT_7 . METHOD_2 ( ) ; java . util . Map < java . lang . String , java . lang . Object > data = new java . util . METHOD_1 ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_12 = new java . util . ArrayList ( ) ; if ( ( IDENT_11 != null ) && ( ! ( IDENT_11 . isEmpty ( ) ) ) ) { for ( org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_13 : IDENT_11 . values ( ) ) { IDENT_12 . add ( IDENT_13 ) ; } } data . put ( STRING_1 , IDENT_12 ) ; return data ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_6 ) 