METHOD_0 ( ) { java . util . List < java . lang . String > expected = java . util . Arrays . asList ( STRING_0 ) ; java . util . List < java . lang . String > actual = IDENT_0 . METHOD_1 ( STRING_1 , java . util . Arrays . asList ( STRING_0 ) , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . util . List , java . lang . String ) { java . util . List < java . lang . String > results = java . util . Collections . emptyList ( ) ; org . IDENT_1 . api . IDENT_2 api = IDENT_3 . METHOD_2 ( ) ; org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_3 + api ) ) ; org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_4 + IDENT_6 ) ) ; org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_5 + IDENT_7 ) ) ; org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_6 + IDENT_8 ) ) ; try { org . IDENT_1 . query . IDENT_9 IDENT_10 = api . query ( IDENT_6 , new java . util . HashSet ( IDENT_7 ) ) ; if ( ( IDENT_10 . METHOD_3 ( ) ) != 0 ) { results = IDENT_10 . METHOD_4 ( ) ; } else { org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_7 + IDENT_7 ) ) ; map = IDENT_10 . METHOD_5 ( ) ; java . util . IDENT_11 < org . IDENT_1 . core . IDENT_12 > IDENT_13 = new java . util . METHOD_6 ( map . values ( ) ) ; results = new java . util . METHOD_6 ( IDENT_10 . METHOD_7 ( ) ) ; org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_8 + results ) ) ; } } catch ( java . lang . Exception e ) { org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . error ( ( STRING_9 + ( e . toString ( ) ) ) ) ; for ( java . lang . IDENT_14 IDENT_15 : e . METHOD_8 ( ) ) org . IDENT_4 . service . IDENT_1 . impl . IDENT_5 . LOGGER . info ( ( ( ( ( ( ( ( STRING_10 + ( IDENT_15 . METHOD_9 ( ) ) ) + " " ) + ( IDENT_15 . METHOD_10 ( ) ) ) + " " ) + ( IDENT_15 . METHOD_11 ( ) ) ) + " " ) + ( IDENT_15 . METHOD_12 ( ) ) ) ) ; } return results ; }
org . junit . Assert . assertEquals ( expected , actual ) 