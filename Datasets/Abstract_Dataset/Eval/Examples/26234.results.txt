METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . query . expr . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . query . expr . METHOD_1 ( null , expr ( STRING_0 , null ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_0 . IDENT_1 . IDENT_4 ) { java . lang . Object l = ( IDENT_5 ) ? IDENT_6 : m . get ( IDENT_6 . toString ( ) ) ; java . lang . Object r = ( IDENT_7 ) ? IDENT_8 : m . get ( IDENT_8 . toString ( ) ) ; try { int IDENT_9 = org . IDENT_0 . IDENT_1 . query . command . IDENT_10 . IDENT_11 . compare ( l , r ) ; switch ( IDENT_12 ) { case IDENT_13 : return IDENT_9 == 0 ; case IDENT_14 : return IDENT_9 != 0 ; case IDENT_15 : return IDENT_9 > 0 ; case IDENT_16 : return IDENT_9 < 0 ; case IDENT_17 : return IDENT_9 >= 0 ; case IDENT_18 : return IDENT_9 <= 0 ; case IDENT_19 : return l . toString ( ) . contains ( r . toString ( ) ) ; case IDENT_20 : { if ( l == null ) return false ; if ( IDENT_7 ) return p . matcher ( l . toString ( ) ) . find ( ) ; else { java . util . regex . IDENT_21 IDENT_22 = java . util . regex . IDENT_21 . METHOD_3 ( m . get ( IDENT_8 . toString ( ) ) . toString ( ) , IDENT_21 . IDENT_23 ) ; return IDENT_22 . matcher ( l . toString ( ) ) . find ( ) ; } } case IDENT_24 : return java . util . Arrays . asList ( r . toString ( ) . replaceAll ( STRING_1 , STRING_0 ) . split ( STRING_0 ) ) . contains ( l . toString ( ) ) ; case IDENT_25 : return ( l == null ) || ( l . toString ( ) . isEmpty ( ) ) ; case IDENT_26 : return ( l != null ) && ( ! ( l . toString ( ) . isEmpty ( ) ) ) ; } } catch ( java . lang . Exception e ) { } return false ; }
org . junit . Assert . assertEquals ( null , IDENT_3 . METHOD_2 ( null ) ) 