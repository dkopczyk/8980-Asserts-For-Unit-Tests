METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_4 engine = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . METHOD_1 ( ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . IDENT_5 first = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_0 , STRING_1 , ( - 100 ) ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_6 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_2 , STRING_1 , ( - 1 ) ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_7 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_3 , STRING_1 , 10 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_8 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_4 , STRING_1 , 100 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_9 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_5 , STRING_1 , 10 ) ; java . util . List < net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 > IDENT_10 = java . util . Arrays . asList ( new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 [ ] { IDENT_6 , IDENT_8 , first , IDENT_7 , IDENT_9 } ) ; engine . METHOD_3 ( IDENT_10 . get ( 0 ) ) ; engine . METHOD_3 ( IDENT_10 . get ( 1 ) ) ; engine . METHOD_3 ( IDENT_10 . get ( 2 ) ) ; engine . METHOD_3 ( IDENT_10 . get ( 3 ) ) ; engine . METHOD_3 ( IDENT_10 . get ( 4 ) ) ; java . util . List < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > IDENT_12 = engine . METHOD_4 ( IDENT_13 . IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_13 ) { java . util . ArrayList < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > rules = new java . util . ArrayList < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > ( IDENT_15 . METHOD_5 ( ) . size ( ) ) ; for ( net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_16 IDENT_17 : IDENT_15 . values ( ) ) { rules . add ( IDENT_17 . METHOD_6 ( ) ) ; } if ( IDENT_18 == ( IDENT_13 . IDENT_19 ) ) { java . util . Collections . METHOD_7 ( rules , new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_20 . METHOD_8 ( ) ) ; } return rules ; }
org . junit . Assert . assertEquals ( IDENT_10 , IDENT_12 ) 