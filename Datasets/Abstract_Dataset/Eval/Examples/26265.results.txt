METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_4 engine = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . METHOD_1 ( ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . IDENT_5 first = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_0 , STRING_1 , ( - 100 ) ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_6 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_2 , STRING_1 , ( - 1 ) ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_7 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_3 , STRING_1 , 10 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_8 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_4 , STRING_1 , 10 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 IDENT_9 = new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 ( STRING_5 , STRING_1 , 100 ) ; engine . METHOD_3 ( IDENT_6 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_10 handler = engine . METHOD_3 ( IDENT_7 ) ; engine . METHOD_3 ( IDENT_8 ) ; engine . METHOD_3 ( first ) ; engine . METHOD_3 ( IDENT_9 ) ; handler . METHOD_4 ( ) ; java . util . List < net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 > expect = java . util . Arrays . asList ( new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . rules . METHOD_2 [ ] { first , IDENT_6 , IDENT_8 , IDENT_9 } ) ; java . util . List < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > IDENT_12 = engine . METHOD_5 ( IDENT_13 . IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_13 ) { java . util . ArrayList < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > rules = new java . util . ArrayList < net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_11 > ( IDENT_15 . METHOD_6 ( ) . size ( ) ) ; for ( net . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_10 IDENT_16 : IDENT_15 . values ( ) ) { rules . add ( IDENT_16 . METHOD_7 ( ) ) ; } if ( IDENT_17 == ( IDENT_13 . IDENT_14 ) ) { java . util . Collections . METHOD_8 ( rules , new net . IDENT_0 . IDENT_1 . IDENT_2 . client . impl . IDENT_3 . IDENT_18 . METHOD_9 ( ) ) ; } return rules ; }
org . junit . Assert . assertEquals ( expect , IDENT_12 ) 