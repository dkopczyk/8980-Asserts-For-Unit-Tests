METHOD_0 ( ) { final org . IDENT_0 . IDENT_1 . IDENT_2 record = METHOD_1 ( eu . IDENT_3 . IDENT_4 . pipeline . format . IDENT_1 . IDENT_5 . IDENT_6 . IDENT_7 , STRING_0 , STRING_1 , STRING_2 , STRING_3 ) ; final java . lang . String [ ] IDENT_8 = new java . lang . String [ ] { STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 } ; for ( final java . lang . String IDENT_9 : IDENT_8 ) { final eu . IDENT_3 . IDENT_4 . pipeline . format . IDENT_1 . IDENT_5 . IDENT_6 . IDENT_10 expression = new eu . IDENT_3 . IDENT_4 . pipeline . format . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_2 ( ( ( ( ( IDENT_7 ) + STRING_9 ) + IDENT_9 ) + STRING_10 ) ) ; "<AssertPlaceHolder>" ; } } evaluate ( org . xml . IDENT_11 . IDENT_12 ) { throw new java . lang . METHOD_3 ( ) ; }
org . junit . Assert . assertNull ( expression . evaluate ( record ) ) 