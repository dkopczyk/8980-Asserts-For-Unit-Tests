METHOD_0 ( ) { final java . lang . IDENT_0 original = java . lang . Thread . METHOD_1 ( ) . METHOD_2 ( ) ; java . lang . IDENT_0 IDENT_1 = new java . lang . METHOD_3 ( java . lang . METHOD_3 . METHOD_4 ( ) . METHOD_5 ( ) ) { @ org . IDENT_2 . jdbc . test . Override MOD_0 java . lang . Class < ? > METHOD_6 ( java . lang . String name ) throws org . IDENT_2 . jdbc . test . IDENT_3 { if ( ! ( name . startsWith ( STRING_0 ) ) ) { java . io . InputStream IDENT_4 = original . getResourceAsStream ( ( ( name . replace ( STRING_1 , "/" ) ) + STRING_2 ) ) ; if ( IDENT_4 == null ) { throw new java . lang . METHOD_7 ( name ) ; } java . io . ByteArrayOutputStream IDENT_5 = new java . io . ByteArrayOutputStream ( ) ; try { int i ; while ( ( i = IDENT_4 . read ( ) ) != ( - 1 ) ) { IDENT_5 . write ( i ) ; } byte [ ] bytes = IDENT_5 . toByteArray ( ) ; return METHOD_8 ( name , bytes , 0 , bytes . length ) ; } catch ( java . io . IOException e ) { throw new java . lang . METHOD_7 ( e . getMessage ( ) , e ) ; } finally { try { IDENT_4 . close ( ) ; } catch ( java . io . IOException e ) { } } } else { throw new java . lang . METHOD_7 ( name ) ; } } } ; java . lang . Thread . METHOD_1 ( ) . METHOD_9 ( IDENT_1 ) ; try { java . lang . Class < ? > jpa = IDENT_1 . METHOD_10 ( org . IDENT_2 . jdbc . impl . IDENT_6 . class . getName ( ) ) ; java . lang . Class < ? > IDENT_7 = IDENT_1 . METHOD_10 ( org . IDENT_2 . util . IDENT_8 . class . getName ( ) ) ; java . lang . Object consumer = IDENT_1 . METHOD_10 ( org . IDENT_2 . util . IDENT_9 . class . getName ( ) ) . newInstance ( ) ; jpa . METHOD_11 ( STRING_3 , IDENT_7 ) . invoke ( jpa . METHOD_12 ( ) . newInstance ( ) , consumer ) ; java . util . List < java . lang . String > list = ( ( java . util . List < java . lang . String > ) ( consumer . getClass ( ) . METHOD_11 ( STRING_4 ) . invoke ( consumer ) ) ) ; "<AssertPlaceHolder>" ; } finally { java . lang . Thread . METHOD_1 ( ) . METHOD_9 ( original ) ; } } isEmpty ( ) { return false ; }
org . junit . Assert . assertTrue ( list . isEmpty ( ) ) 