METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 } ; java . lang . String [ ] IDENT_1 = new java . lang . String [ ] { STRING_3 , STRING_4 , STRING_5 } ; boolean result = false ; for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { for ( int j = 0 ; j < ( IDENT_0 . length ) ; j ++ ) { java . lang . String IDENT_2 = IDENT_1 [ i ] ; java . lang . String IDENT_3 = IDENT_0 [ j ] ; if ( IDENT_4 . matches ( IDENT_3 , IDENT_2 ) ) { result = true ; } if ( result == true ) { break ; } } "<AssertPlaceHolder>" ; result = false ; } } matches ( java . lang . String , java . lang . String ) { if ( ( pattern == null ) || ( source == null ) ) { return false ; } pattern = pattern . trim ( ) ; source = source . trim ( ) ; else if ( pattern . startsWith ( STRING_6 ) ) { int length = ( pattern . length ( ) ) - 1 ; if ( ( ( source . length ( ) ) >= length ) && ( source . METHOD_1 ( pattern . substring ( 1 ) ) ) ) { return true ; } } else if ( pattern . contains ( STRING_6 ) ) { int start = pattern . indexOf ( STRING_6 ) ; int end = pattern . METHOD_2 ( STRING_6 ) ; if ( ( source . startsWith ( pattern . substring ( 0 , start ) ) ) && ( source . METHOD_1 ( pattern . substring ( ( end + 1 ) ) ) ) ) { return true ; } } else { if ( pattern . equals ( source ) ) { return true ; } } return false ; }
org . junit . Assert . assertThat ( true , org . hamcrest . CoreMatchers . equalTo ( result ) ) 