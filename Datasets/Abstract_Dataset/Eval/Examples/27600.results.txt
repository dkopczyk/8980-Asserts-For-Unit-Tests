METHOD_0 ( ) { IDENT_0 . add ( IDENT_1 ) ; IDENT_2 . add ( IDENT_3 ) ; IDENT_2 . add ( IDENT_4 ) ; IDENT_2 . add ( IDENT_1 ) ; IDENT_2 . add ( IDENT_5 ) ; java . util . List < com . IDENT_6 . kernel . plugin . IDENT_7 . IDENT_8 > IDENT_9 = new com . IDENT_6 . kernel . plugin . METHOD_1 ( ) . METHOD_2 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . List ) { java . util . List < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_11 = new java . util . ArrayList < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; java . util . List < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_12 = new java . util . ArrayList < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; java . util . List < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_13 = new java . util . ArrayList < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; java . util . List < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_14 = new java . util . ArrayList < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; java . util . List < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_15 = new java . util . ArrayList < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; java . util . Set < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > IDENT_16 = new java . util . HashSet < com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 > ( ) ; if ( ( IDENT_17 != null ) && ( ( IDENT_17 . size ( ) ) > 0 ) ) { for ( int i = 0 ; i < ( IDENT_17 . size ( ) ) ; i ++ ) { com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_8 element = IDENT_17 . get ( i ) ; com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_10 IDENT_18 = new com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_3 ( i , element ) ; IDENT_11 . add ( IDENT_18 ) ; } for ( com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_3 IDENT_18 : IDENT_11 ) { METHOD_4 ( IDENT_18 . METHOD_5 ( ) . METHOD_6 ( ) , IDENT_18 , IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 , IDENT_15 , IDENT_16 ) ; } for ( com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_3 IDENT_19 : IDENT_15 ) { java . lang . String r = IDENT_19 . METHOD_7 ( ) ; com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_3 IDENT_20 = METHOD_8 ( r , IDENT_11 ) ; if ( ( IDENT_20 != null ) && ( IDENT_13 . contains ( IDENT_20 ) ) ) { if ( r . startsWith ( com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_21 ) ) { IDENT_20 . METHOD_9 ( IDENT_19 ) ; } else if ( r . startsWith ( com . IDENT_6 . kernel . plugin . METHOD_1 . IDENT_22 ) ) { IDENT_20 . METHOD_10 ( IDENT_19 ) ; } else { IDENT_16 . add ( IDENT_19 ) ; } } else { IDENT_16 . add ( IDENT_19 ) ; } } java . util . Collections . METHOD_2 ( IDENT_12 , new com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_11 ( ) ) ; java . util . Collections . METHOD_2 ( IDENT_14 , new com . IDENT_6 . kernel . plugin . METHOD_1 . METHOD_11 ( ) ) ; return METHOD_12 ( IDENT_12 , IDENT_13 , IDENT_14 , IDENT_16 ) ; } return null ; }
org . junit . Assert . assertArrayEquals ( IDENT_2 . toArray ( ) , IDENT_9 . toArray ( ) ) 