METHOD_0 ( ) { java . util . List < java . lang . IDENT_0 > IDENT_1 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_1 . add ( ( ( short ) ( i ) ) ) ; } java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_1 ( ( ( ( IDENT_1 . size ( ) ) * 2 ) + 2 ) ) ; buffer . METHOD_2 ( ( ( short ) ( IDENT_1 . size ( ) ) ) ) ; for ( java . lang . IDENT_0 s : IDENT_1 ) { buffer . METHOD_2 ( s ) ; } buffer . position ( 0 ) ; short count = buffer . METHOD_3 ( ) ; java . util . List < java . lang . IDENT_0 > IDENT_2 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < count ; i ++ ) { IDENT_2 . add ( buffer . METHOD_3 ( ) ) ; } for ( int i = 0 ; i < ( IDENT_1 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( int ) { assert ( key >= 0 ) && ( key < ( size ) ) ; final int IDENT_3 = ( key + 1 ) * ( com . IDENT_4 . IDENT_5 . buffer . IDENT_6 . IDENT_7 ) ; final int IDENT_8 = buffer . METHOD_4 ( IDENT_3 ) ; int length = buffer . METHOD_3 ( IDENT_8 ) ; if ( ( length & ( com . IDENT_4 . IDENT_5 . buffer . IDENT_6 . IDENT_9 ) ) != 0 ) { length OP_0 com . IDENT_4 . IDENT_5 . buffer . IDENT_6 . IDENT_10 ; return METHOD_5 ( ( IDENT_8 + ( com . IDENT_4 . IDENT_5 . buffer . IDENT_6 . IDENT_11 ) ) , length ) ; } else { return getString ( ( IDENT_8 + ( com . IDENT_4 . IDENT_5 . buffer . IDENT_6 . IDENT_11 ) ) , length ) ; } }
org . junit . Assert . assertEquals ( IDENT_2 . get ( i ) , IDENT_1 . get ( i ) ) 