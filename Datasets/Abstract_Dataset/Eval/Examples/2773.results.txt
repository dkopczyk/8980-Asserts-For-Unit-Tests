METHOD_0 ( ) { com . IDENT_0 . util . IDENT_1 . IDENT_2 runner = new com . IDENT_0 . util . IDENT_1 . METHOD_1 ( false , true ) ; java . lang . String [ ] IDENT_3 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 } ; for ( java . lang . String exp : IDENT_3 ) { java . util . ArrayList < java . lang . String > IDENT_4 = new java . util . ArrayList < java . lang . String > ( ) ; "<AssertPlaceHolder>" ; System . out . println ( ( STRING_4 + IDENT_4 ) ) ; } } METHOD_2 ( java . lang . String , boolean , com . IDENT_0 . util . IDENT_1 . List ) { try { com . IDENT_0 . util . IDENT_1 . Map < java . lang . String , java . lang . String > IDENT_5 = new com . IDENT_0 . util . IDENT_1 . HashMap < java . lang . String , java . lang . String > ( ) ; for ( com . IDENT_0 . util . IDENT_1 . IDENT_6 item : this . loader . METHOD_3 ( ) ) { if ( item . getType ( ) . equals ( IDENT_7 . IDENT_8 ) ) { IDENT_5 . put ( item . getName ( ) , item . getName ( ) ) ; } } com . IDENT_0 . util . IDENT_1 . IDENT_9 [ ] IDENT_10 = this . parse . METHOD_4 ( IDENT_11 , text , IDENT_12 , IDENT_5 ) ; com . IDENT_0 . util . IDENT_1 . IDENT_13 root = this . parse . parse ( this . IDENT_11 , IDENT_10 , text , IDENT_12 , IDENT_5 , IDENT_14 ) ; com . IDENT_0 . util . IDENT_1 . IDENT_7 result = METHOD_5 ( root , STRING_5 ) ; if ( ( this . IDENT_12 ) && ( com . IDENT_0 . util . IDENT_1 . METHOD_1 . log . METHOD_6 ( ) ) ) { com . IDENT_0 . util . IDENT_1 . METHOD_1 . log . debug ( result ) ; } if ( IDENT_14 && ( IDENT_15 != null ) ) { IDENT_15 . addAll ( com . IDENT_0 . util . IDENT_1 . Arrays . asList ( result . METHOD_7 ( ) ) ) ; } return true ; } catch ( java . lang . Exception e ) { com . IDENT_0 . util . IDENT_1 . METHOD_1 . log . error ( STRING_6 , e ) ; return false ; } }
org . junit . Assert . assertTrue ( runner . METHOD_2 ( exp , true , IDENT_4 ) ) 