METHOD_0 ( ) { parser = ( ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 ) ( context . METHOD_1 ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_4 . class ) ) ) ; com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . IDENT_6 packet = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . METHOD_2 ( INT_0 , INT_1 , INT_2 , 16 , IDENT_7 ) ; com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . IDENT_8 IDENT_9 = parser . METHOD_3 ( packet ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . METHOD_2 ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . IDENT_8 domain = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_5 . METHOD_4 ( ) ; domain . METHOD_5 ( packet ) ; start = packet . METHOD_6 ( ) ; data = packet . METHOD_7 ( ) ; bytes = java . nio . ByteBuffer . METHOD_8 ( data ) ; bytes . position ( start ) ; bytes . METHOD_9 ( ) ; short IDENT_10 = bytes . METHOD_9 ( ) ; boolean response = ( IDENT_10 & INT_3 ) != 0 ; domain . METHOD_10 ( response ) ; short IDENT_11 = bytes . METHOD_9 ( ) ; if ( IDENT_11 != 1 ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . LOGGER . warn ( STRING_0 ) ; return null ; } short IDENT_12 = bytes . METHOD_9 ( ) ; bytes . METHOD_9 ( ) ; bytes . METHOD_9 ( ) ; java . lang . String IDENT_13 = METHOD_11 ( ) ; short IDENT_14 = bytes . METHOD_9 ( ) ; short IDENT_15 = bytes . METHOD_9 ( ) ; if ( ( ( IDENT_14 != ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . IDENT_16 ) ) && ( IDENT_14 != ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . IDENT_17 ) ) ) || ( IDENT_15 != 1 ) ) { return null ; } domain . METHOD_12 ( IDENT_13 ) ; if ( response ) { java . util . Set < java . net . IDENT_18 > IDENT_19 = new java . util . HashSet < java . net . IDENT_18 > ( ) ; java . lang . String IDENT_20 = IDENT_13 ; for ( int i = 0 ; i < IDENT_12 ; ++ i ) { java . lang . String IDENT_21 = METHOD_11 ( ) ; IDENT_14 = bytes . METHOD_9 ( ) ; IDENT_15 = bytes . METHOD_9 ( ) ; bytes . METHOD_13 ( ) ; short len = bytes . METHOD_9 ( ) ; if ( ( ! ( IDENT_21 . equals ( IDENT_13 ) ) ) && ( ! ( IDENT_21 . equals ( IDENT_20 ) ) ) ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . LOGGER . warn ( ( STRING_1 + IDENT_21 ) ) ; bytes . position ( ( ( bytes . position ( ) ) + len ) ) ; continue ; } if ( IDENT_15 != 1 ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . LOGGER . warn ( ( STRING_2 + IDENT_15 ) ) ; bytes . position ( ( ( bytes . position ( ) ) + len ) ) ; continue ; } switch ( IDENT_14 ) { case com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . IDENT_16 : case com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . IDENT_17 : byte [ ] IDENT_22 = new byte [ len ] ; bytes . get ( IDENT_22 , 0 , len ) ; try { IDENT_19 . add ( java . net . IDENT_18 . METHOD_14 ( IDENT_22 ) ) ; } catch ( java . net . IDENT_23 e ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . LOGGER . warn ( STRING_3 ) ; } break ; case com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . IDENT_24 : IDENT_20 = METHOD_11 ( ) ; break ; default : com . IDENT_0 . IDENT_1 . core . IDENT_2 . impl . IDENT_3 . LOGGER . warn ( ( STRING_4 + IDENT_14 ) ) ; bytes . position ( ( ( bytes . position ( ) ) + len ) ) ; } } domain . METHOD_15 ( IDENT_20 ) ; domain . METHOD_16 ( IDENT_19 ) ; } return domain ; }
org . junit . Assert . assertNotNull ( IDENT_9 ) 