METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = this . METHOD_1 ( 1 ) ; java . util . Calendar IDENT_5 = new java . util . METHOD_2 ( INT_0 , java . util . Calendar . IDENT_6 , 1 ) ; java . util . Calendar IDENT_7 = new java . util . METHOD_2 ( INT_0 , java . util . Calendar . IDENT_8 , INT_1 ) ; java . util . Date IDENT_9 = new java . util . METHOD_2 ( INT_0 , java . util . Calendar . IDENT_6 , 10 ) . getTime ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_10 = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( ) ; IDENT_10 . METHOD_4 ( false ) ; IDENT_10 . METHOD_5 ( new java . util . METHOD_2 ( INT_0 , java . util . Calendar . IDENT_6 , 1 ) . getTime ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 > IDENT_11 = java . util . Arrays . asList ( IDENT_10 ) ; doReturn ( IDENT_11 ) . when ( IDENT_12 ) . METHOD_6 ( any ( ) , any ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 > result = IDENT_13 . METHOD_7 ( IDENT_5 , IDENT_7 , IDENT_4 , IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . util . Calendar , java . util . Calendar , java . util . List , java . util . Date ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 > IDENT_14 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 > ( ) ; if ( ( ( IDENT_7 . get ( Calendar . IDENT_15 ) ) - ( IDENT_5 . get ( Calendar . IDENT_15 ) ) ) > 0 ) { for ( int IDENT_16 = IDENT_5 . get ( Calendar . IDENT_15 ) ; IDENT_16 <= ( IDENT_7 . get ( Calendar . IDENT_15 ) ) ; IDENT_16 ++ ) { IDENT_14 = java . util . stream . IDENT_17 . METHOD_8 ( METHOD_9 ( IDENT_18 , METHOD_10 ( IDENT_9 ) , IDENT_16 ) . stream ( ) , IDENT_14 . stream ( ) ) . collect ( java . util . stream . IDENT_19 . toList ( ) ) ; } } else { IDENT_14 = METHOD_9 ( IDENT_18 , METHOD_10 ( IDENT_9 ) , IDENT_7 . get ( Calendar . IDENT_15 ) ) ; } return IDENT_14 ; }
org . junit . Assert . assertThat ( result , org . hamcrest . core . Is . is ( org . hamcrest . Matchers . empty ( ) ) ) 