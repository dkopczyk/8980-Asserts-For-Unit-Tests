METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( STRING_0 , STRING_1 ) ; fr . IDENT_1 . IDENT_2 . command . IDENT_3 command = fr . IDENT_1 . IDENT_2 . command . IDENT_4 . METHOD_1 ( fr . IDENT_1 . IDENT_2 . command . IDENT_5 . IDENT_6 . commands , STRING_0 , STRING_2 ) ; java . util . List < java . lang . String > result = fr . IDENT_1 . IDENT_2 . command . IDENT_5 . IDENT_7 . METHOD_2 ( command , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( fr . IDENT_1 . IDENT_2 . command . IDENT_3 , java . util . List ) { java . util . List < fr . IDENT_1 . IDENT_2 . command . IDENT_3 > commands = fr . IDENT_1 . IDENT_2 . command . IDENT_8 . METHOD_3 ( command ) ; java . util . List < java . lang . String > IDENT_9 = new java . util . ArrayList ( ) ; boolean IDENT_10 = false ; for ( int i = 0 ; i < ( commands . size ( ) ) ; ++ i ) { if ( ( ( ! IDENT_10 ) && ( i < ( IDENT_0 . size ( ) ) ) ) && ( commands . get ( i ) . METHOD_4 ( IDENT_0 . get ( i ) ) ) ) { IDENT_9 . add ( IDENT_0 . get ( i ) ) ; } else { IDENT_10 = true ; IDENT_9 . add ( commands . get ( i ) . METHOD_5 ( ) . get ( 0 ) ) ; } } return IDENT_9 ; }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . contains ( STRING_0 , STRING_2 ) ) 