METHOD_0 ( ) { final java . io . IOException exception = new java . io . IOException ( STRING_0 ) ; com . amazonaws . http . IDENT_0 < com . amazonaws . IDENT_1 < java . lang . Object > > handler = org . easymock . EasyMock . METHOD_1 ( com . amazonaws . http . IDENT_0 . class ) ; org . easymock . EasyMock . expect ( handler . METHOD_2 ( ) ) . andReturn ( false ) . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( handler . METHOD_4 ( org . easymock . EasyMock . < com . amazonaws . http . IDENT_2 > METHOD_5 ( ) ) ) . METHOD_6 ( exception ) . times ( 4 ) ; com . amazonaws . http . IDENT_2 response = com . amazonaws . http . IDENT_2 . builder ( ) . content ( new java . io . ByteArrayInputStream ( new byte [ 0 ] ) ) . METHOD_7 ( 200 ) . METHOD_8 ( STRING_1 ) . build ( ) ; org . easymock . EasyMock . expect ( IDENT_3 . execute ( org . easymock . EasyMock . < com . amazonaws . http . IDENT_4 > METHOD_5 ( ) ) ) . andReturn ( response ) . times ( 4 ) ; org . easymock . EasyMock . replay ( handler , IDENT_3 ) ; com . amazonaws . http . IDENT_5 context = new com . amazonaws . http . METHOD_9 ( ) ; com . amazonaws . IDENT_6 < ? > request = new com . amazonaws . IDENT_7 < java . lang . Object > ( STRING_2 ) ; request . METHOD_10 ( java . net . URI . create ( STRING_3 ) ) ; request . METHOD_11 ( IDENT_8 . IDENT_9 , STRING_4 ) ; request . METHOD_12 ( new java . io . ByteArrayInputStream ( new byte [ 0 ] ) ) ; try { client . execute ( request , handler , null , context ) ; org . junit . Assert . fail ( STRING_5 ) ; } catch ( com . amazonaws . IDENT_10 e ) { "<AssertPlaceHolder>" ; } org . easymock . EasyMock . verify ( IDENT_3 ) ; } METHOD_13 ( ) { return IDENT_11 ; }
org . junit . Assert . assertSame ( exception , e . METHOD_13 ( ) ) 