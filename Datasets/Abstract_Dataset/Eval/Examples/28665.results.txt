METHOD_0 ( ) { java . util . List < com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = new java . util . ArrayList < com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 obj = METHOD_1 ( ) ; IDENT_4 . add ( obj ) ; } for ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 obj : IDENT_4 ) { com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . mapper . save ( obj ) ; } for ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 obj : IDENT_4 ) { com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_6 = METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( obj . getKey ( ) ) ; IDENT_6 . METHOD_3 ( obj . METHOD_4 ( ) ) ; IDENT_6 . METHOD_5 ( obj . METHOD_6 ( ) ) ; com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . mapper . save ( IDENT_6 ) ; com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . mapper . load ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class , obj . getKey ( ) , obj . METHOD_4 ( ) ) ; "<AssertPlaceHolder>" ; IDENT_6 . METHOD_5 ( ( ( IDENT_6 . METHOD_6 ( ) ) - 1 ) ) ; try { com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . mapper . save ( IDENT_6 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . Exception expected ) { } } } METHOD_4 ( ) { return this . IDENT_8 ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_7 ) 