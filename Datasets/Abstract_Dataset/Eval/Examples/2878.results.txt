METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . model . IDENT_2 . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( STRING_0 ) ; java . util . Set < javax . validation . IDENT_5 < org . IDENT_0 . IDENT_1 . model . IDENT_2 . METHOD_1 > > IDENT_6 = validator . validate ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } validate ( org . IDENT_0 . IDENT_7 . IDENT_8 . configuration . model . IDENT_9 ) { if ( ( IDENT_10 == null ) || ( org . apache . commons . lang3 . StringUtils . METHOD_3 ( IDENT_10 . METHOD_4 ( ) ) ) ) { return null ; } java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 . METHOD_1 > IDENT_11 = IDENT_12 . METHOD_5 ( IDENT_10 . METHOD_4 ( ) ) ; if ( org . apache . commons . IDENT_13 . IDENT_14 . isEmpty ( IDENT_11 ) ) { return null ; } java . util . Map < java . lang . String , java . lang . String > properties = IDENT_10 . METHOD_6 ( ) ; if ( properties == null ) { properties = com . google . common . collect . IDENT_15 . METHOD_7 ( ) ; } IDENT_0 . IDENT_16 . task . IDENT_17 task = null ; java . util . List < java . lang . String > IDENT_18 = com . google . common . collect . Lists . newArrayList ( ) ; for ( java . util . Map . Entry < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 . METHOD_1 > entry : IDENT_11 . entrySet ( ) ) { if ( entry . getValue ( ) . METHOD_8 ( ) ) { java . lang . String value = properties . get ( entry . getKey ( ) ) ; if ( org . apache . commons . lang3 . StringUtils . METHOD_3 ( value ) ) { IDENT_18 . add ( entry . getKey ( ) ) ; } } } if ( org . apache . commons . IDENT_13 . IDENT_19 . METHOD_9 ( IDENT_18 ) ) { task = new IDENT_0 . IDENT_16 . task . METHOD_10 ( com . google . common . collect . IDENT_15 . < IDENT_0 . IDENT_16 . task . IDENT_20 , java . util . List < java . lang . String > > METHOD_7 ( ) ) ; task . METHOD_11 ( IDENT_21 . IDENT_22 ) ; task . METHOD_12 ( ) . put ( IDENT_20 . IDENT_23 , IDENT_18 ) ; } return task ; }
org . junit . Assert . assertEquals ( 1 , IDENT_6 . size ( ) ) 