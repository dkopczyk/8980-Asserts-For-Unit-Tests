METHOD_0 ( ) { IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 IDENT_5 = IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 . create ( STRING_0 , INT_0 , STRING_1 ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 IDENT_6 = IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 . create ( STRING_2 3 , INT_1 , STRING_3 ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_7 expected = IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_7 . builder ( ) . METHOD_1 ( STRING_4 ) . tests ( new IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_8 [ ] { IDENT_5 , IDENT_6 } ) . build ( ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_9 IDENT_10 = new IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . METHOD_2 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_7 . class , IDENT_11 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_2 2 , expected . METHOD_1 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_5 , IDENT_5 . getClass ( ) . getName ( ) ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_6 , IDENT_5 . IDENT_13 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_2 0 , IDENT_5 . IDENT_14 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_2 1 , IDENT_5 . IDENT_15 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_7 , IDENT_6 . getClass ( ) . getName ( ) ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_2 , IDENT_6 . IDENT_13 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_8 , IDENT_6 . IDENT_14 ) ; IDENT_12 . setProperty ( IDENT_10 , STRING_9 , IDENT_6 . IDENT_15 ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_7 actual = IDENT_10 . build ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_7 . class ) ; "<AssertPlaceHolder>" ; } build ( java . util . function . IDENT_16 [ ] ) { java . lang . reflect . Method IDENT_17 ; try { IDENT_17 = IDENT_18 . METHOD_3 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_19 . IDENT_20 ) ; } catch ( java . lang . IDENT_21 e ) { throw new java . lang . RuntimeException ( e ) ; } java . lang . Object source ; try { source = IDENT_17 . invoke ( null ) ; } catch ( java . lang . IDENT_22 | java . lang . reflect . IDENT_23 e ) { throw new java . lang . RuntimeException ( e ) ; } for ( Map . Entry < java . lang . String , java . lang . Object > setValue : values . entrySet ( ) ) { java . lang . Object IDENT_24 = METHOD_4 ( setValue ) ; java . lang . reflect . Method IDENT_25 = properties . get ( setValue . getKey ( ) ) . stream ( ) . filter ( ( t ) -> org . apache . commons . lang3 . IDENT_26 . METHOD_5 ( IDENT_24 . getClass ( ) , t . type ) ) . METHOD_6 ( ) . map ( ( a ) -> a . IDENT_17 ) . METHOD_7 ( ( ) -> new java . lang . IllegalStateException ( java . lang . String . format ( STRING_10 , setValue . getKey ( ) , IDENT_24 . getClass ( ) . getName ( ) ) ) ) ; try { source = IDENT_25 . invoke ( source , IDENT_24 ) ; } catch ( java . lang . IDENT_22 | java . lang . reflect . IDENT_23 e ) { throw new java . lang . RuntimeException ( e ) ; } } if ( IDENT_27 != null ) { for ( java . util . function . IDENT_16 < java . lang . Object , java . lang . Object > IDENT_25 : IDENT_27 ) { source = IDENT_25 . apply ( source ) ; } } java . lang . reflect . Method IDENT_28 ; try { IDENT_28 = IDENT_29 . METHOD_3 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_19 . IDENT_30 ) ; return IDENT_28 . invoke ( source ) ; } catch ( java . lang . IDENT_22 | java . lang . IDENT_21 | java . lang . reflect . IDENT_23 e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . equalTo ( expected ) ) 