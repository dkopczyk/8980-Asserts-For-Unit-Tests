METHOD_0 ( ) { final java . util . List < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_3 > IDENT_4 = new java . util . ArrayList ( ) ; final IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_5 IDENT_6 = IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_5 . builder ( ) . METHOD_1 ( null ) . METHOD_2 ( IDENT_4 ) . build ( ) ; final java . util . concurrent . IDENT_7 < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_5 > future = java . util . concurrent . IDENT_7 . METHOD_3 ( IDENT_6 ) ; when ( client . METHOD_4 ( any ( IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_8 . class ) ) ) . thenReturn ( future ) ; final java . util . List < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_3 > METHOD_2 = IDENT_9 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; verify ( client ) . METHOD_4 ( eq ( IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_8 . builder ( ) . METHOD_5 ( IDENT_0 . amazon . IDENT_2 . IDENT_10 . IDENT_11 . IDENT_12 ) . build ( ) ) ) ; } METHOD_4 ( ) { final java . util . List < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_3 > METHOD_2 = new java . util . ArrayList ( ) ; IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . model . IDENT_5 result ; java . lang . String METHOD_1 = null ; do { result = METHOD_4 ( METHOD_1 ) ; if ( result == null ) { return null ; } else { METHOD_2 . addAll ( result . METHOD_2 ( ) ) ; METHOD_1 = result . METHOD_1 ( ) ; } } while ( org . apache . commons . lang3 . StringUtils . METHOD_6 ( result . METHOD_1 ( ) ) ) ; METHOD_7 ( METHOD_2 ) ; return METHOD_2 ; }
org . junit . Assert . assertThat ( METHOD_2 , org . hamcrest . CoreMatchers . equalTo ( IDENT_4 ) ) 