METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( STRING_0 0 , STRING_1 , STRING_0 2 , STRING_2 , STRING_0 4 ) ; com . amazonaws . services . IDENT_1 . IDENT_2 . util . IDENT_3 < java . lang . String > generator = new com . amazonaws . services . IDENT_1 . IDENT_2 . util . IDENT_3 < java . lang . String > ( IDENT_0 , 3 ) ; java . util . List < java . lang . String > IDENT_4 = java . util . Arrays . asList ( STRING_0 1 , STRING_3 , STRING_4 , STRING_5 , STRING_0 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_0 3 ) ; int i = 0 ; for ( java . util . List < java . lang . String > IDENT_5 : generator ) { "<AssertPlaceHolder>" ; } } toString ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( STRING_10 ) ; for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i ++ ) { if ( i > 0 ) { sb . append ( STRING_11 ) ; } sb . append ( IDENT_6 . get ( i ) ) ; } sb . append ( "]" ) ; sb . append ( java . lang . System . getProperty ( STRING_12 ) ) ; for ( java . util . Map . Entry < com . amazonaws . services . IDENT_1 . IDENT_2 . IDENT_7 < T > . IDENT_8 , java . util . Collection < T > > entry : IDENT_9 . entrySet ( ) ) { sb . append ( STRING_10 ) ; for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i ++ ) { if ( i > 0 ) { sb . append ( STRING_11 ) ; } sb . append ( entry . getKey ( ) . get ( i ) ) ; } sb . append ( STRING_13 ) ; for ( int i = 0 ; i < ( entry . getValue ( ) . size ( ) ) ; i ++ ) { if ( i > 0 ) { sb . append ( STRING_11 ) ; } sb . append ( entry . getValue ( ) . toArray ( ) [ i ] . toString ( ) ) ; } sb . append ( "]" ) ; sb . append ( java . lang . System . getProperty ( STRING_12 ) ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_4 . get ( ( i ++ ) ) , IDENT_5 . toString ( ) ) 