METHOD_0 ( ) { final com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = com . microsoft . azure . IDENT_0 . lib . IDENT_4 . METHOD_1 ( ) ; com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 = com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_7 . METHOD_2 ( IDENT_3 . toString ( ) , java . util . concurrent . IDENT_8 . METHOD_3 ( 1 ) ) ; final com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_9 batch = com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_4 ( ) ; final com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_10 IDENT_11 = com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_10 . create ( new byte [ INT_0 ] ) ; final com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_10 IDENT_12 = com . microsoft . azure . IDENT_0 . IDENT_1 . IDENT_10 . create ( new byte [ ( INT_0 * INT_0 ) * 2 ] ) ; "<AssertPlaceHolder>" ; batch . METHOD_5 ( IDENT_12 ) ; } METHOD_5 ( com . microsoft . azure . IDENT_0 . IDENT_10 ) { if ( IDENT_13 == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } final com . microsoft . azure . IDENT_0 . impl . IDENT_14 IDENT_15 = ( ( com . microsoft . azure . IDENT_0 . impl . IDENT_14 ) ( IDENT_13 ) ) ; final int size ; try { size = METHOD_6 ( IDENT_15 , events . isEmpty ( ) ) ; } catch ( com . microsoft . azure . IDENT_0 . impl . java exception ) { throw new com . microsoft . azure . IDENT_0 . METHOD_7 ( java . lang . String . format ( Locale . IDENT_16 , STRING_1 , ( ( this . IDENT_17 ) / INT_0 ) ) ) ; } if ( ( ( this . IDENT_18 ) + size ) > ( this . IDENT_17 ) ) return false ; this . events . add ( IDENT_15 ) ; this . IDENT_18 += size ; return true ; }
org . junit . Assert . assertTrue ( batch . METHOD_5 ( IDENT_11 ) ) 