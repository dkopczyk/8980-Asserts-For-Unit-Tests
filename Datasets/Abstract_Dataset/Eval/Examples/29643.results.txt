METHOD_0 ( com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . IDENT_1 , java . net . URL ) { final java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_2 = new java . util . HashMap ( ) ; final java . lang . String field = STRING_0 ; final java . util . List < java . lang . String > values = new java . util . METHOD_1 ( ) ; final java . lang . String value = STRING_1 ; values . add ( value ) ; IDENT_2 . put ( field , values ) ; final com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . IDENT_3 IDENT_4 = com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . IDENT_3 . IDENT_5 ; final byte [ ] body = new byte [ 0 ] ; final java . lang . String IDENT_6 = value ; new tests . unit . com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . METHOD_2 ( ) { { IDENT_7 . METHOD_3 ( ) ; result = STRING_2 ; IDENT_8 . connect ( ) ; result = new java . io . IOException ( ) ; IDENT_8 . METHOD_4 ( ) ; result = IDENT_2 ; } } ; com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . IDENT_9 request = new com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . METHOD_5 ( IDENT_7 , IDENT_4 , body ) ; com . microsoft . azure . sdk . iot . IDENT_0 . transport . http . IDENT_10 response = request . METHOD_6 ( ) ; java . lang . String IDENT_11 = response . METHOD_7 ( field ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . lang . String ) { java . lang . String IDENT_12 = com . microsoft . azure . sdk . iot . service . transport . http . IDENT_10 . METHOD_8 ( field ) ; java . lang . String values = this . IDENT_2 . get ( IDENT_12 ) ; if ( values == null ) { java . lang . String IDENT_13 = java . lang . String . format ( ( STRING_3 + STRING_4 ) , field ) ; throw new java . lang . IllegalArgumentException ( IDENT_13 ) ; } return values ; }
org . junit . Assert . assertThat ( IDENT_11 , org . hamcrest . CoreMatchers . is ( IDENT_6 ) ) 