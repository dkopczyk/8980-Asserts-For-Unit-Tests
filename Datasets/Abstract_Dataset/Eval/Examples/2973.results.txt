METHOD_0 ( ) { java . lang . String resource = STRING_0 4 ; java . lang . String IDENT_0 = STRING_1 ; com . IDENT_1 . IDENT_2 . commons . transport . IDENT_3 request = new com . IDENT_1 . IDENT_2 . commons . transport . METHOD_1 ( ) ; request . METHOD_2 ( Method . IDENT_4 ) ; request . METHOD_3 ( STRING_0 3 , STRING_2 ) ; request . METHOD_3 ( STRING_0 1 , STRING_3 ) ; request . METHOD_3 ( STRING_0 0 , STRING_4 ) ; request . METHOD_3 ( STRING_5 , STRING_6 ) ; request . METHOD_3 ( STRING_0 , STRING_2 ) ; request . METHOD_3 ( STRING_0 2 , STRING_7 ) ; request . METHOD_4 ( 0L ) ; java . lang . String IDENT_5 = STRING_8 + ( STRING_9 + STRING_0 4 ) ; java . lang . String result = com . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . METHOD_5 ( resource , request , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . String , com . IDENT_1 . IDENT_2 . commons . transport . METHOD_1 , java . lang . String ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( ( ( request . METHOD_6 ( ) ) + ( com . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . IDENT_8 ) ) ) ; java . util . Map < java . lang . String , java . lang . String > headers = request . METHOD_7 ( ) ; java . util . IDENT_9 < java . lang . String , java . lang . String > IDENT_10 = new java . util . IDENT_9 < java . lang . String , java . lang . String > ( ) ; if ( headers != null ) { for ( java . util . Map . Entry < java . lang . String , java . lang . String > header : headers . entrySet ( ) ) { if ( ( header . getKey ( ) ) == null ) { continue ; } java . lang . String IDENT_11 = header . getKey ( ) . toLowerCase ( ) ; if ( ( ( ( IDENT_11 . equals ( IDENT_12 . IDENT_13 . toLowerCase ( ) ) ) || ( IDENT_11 . equals ( IDENT_12 . IDENT_14 . toLowerCase ( ) ) ) ) || ( IDENT_11 . equals ( IDENT_12 . IDENT_15 . toLowerCase ( ) ) ) ) || ( IDENT_11 . startsWith ( IDENT_0 ) ) ) { IDENT_10 . put ( IDENT_11 , header . getValue ( ) ) ; } } } if ( ! ( IDENT_10 . containsKey ( IDENT_12 . IDENT_13 . toLowerCase ( ) ) ) ) { IDENT_10 . put ( IDENT_12 . IDENT_13 . toLowerCase ( ) , "" ) ; } if ( ! ( IDENT_10 . containsKey ( IDENT_12 . IDENT_14 . toLowerCase ( ) ) ) ) { IDENT_10 . put ( IDENT_12 . IDENT_14 . toLowerCase ( ) , "" ) ; } if ( ( request . METHOD_8 ( ) ) != null ) { for ( Map . Entry < java . lang . String , java . lang . String > p : request . METHOD_8 ( ) . entrySet ( ) ) { if ( p . getKey ( ) . startsWith ( IDENT_0 ) ) { IDENT_10 . put ( p . getKey ( ) , p . getValue ( ) ) ; } } } for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_10 . entrySet ( ) ) { java . lang . String key = entry . getKey ( ) ; java . lang . Object value = entry . getValue ( ) ; if ( key . startsWith ( IDENT_0 ) ) { builder . append ( key ) ; builder . append ( STRING_10 ) ; if ( value != null ) { builder . append ( value ) ; } } else { builder . append ( value ) ; } builder . append ( "\n" ) ; } builder . append ( com . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . METHOD_9 ( resource , request . METHOD_8 ( ) ) ) ; return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , result ) 