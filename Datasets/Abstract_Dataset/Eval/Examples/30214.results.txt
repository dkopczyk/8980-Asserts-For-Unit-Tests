METHOD_0 ( tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_1 ) { final java . lang . String IDENT_2 = STRING_0 ; tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_3 IDENT_4 = tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_3 . METHOD_1 ( IDENT_2 ) ; new tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . METHOD_2 ( ) { { tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_5 . newInstance ( tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . Query . class , new java . lang . Class [ ] { java . lang . String . class , tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . Integer . class , tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_6 . class } , anyString , IDENT_7 , IDENT_6 . IDENT_8 ) ; result = IDENT_9 ; tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_5 . invoke ( IDENT_9 , STRING_1 ) ; result = true ; } } ; tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . Query IDENT_10 = IDENT_4 . METHOD_3 ( tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_11 . IDENT_12 ) ; boolean result = IDENT_4 . METHOD_4 ( IDENT_10 ) ; new tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . METHOD_5 ( ) { { tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . IDENT_5 . invoke ( IDENT_9 , STRING_2 , new java . lang . Class [ ] { com . microsoft . azure . sdk . iot . service . IDENT_13 . class , java . net . URL . class , com . microsoft . azure . sdk . iot . service . transport . http . IDENT_14 . class , tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_0 . Long . class } , any , any , IDENT_14 . IDENT_15 , any ) ; times = 1 ; } } ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . microsoft . azure . sdk . iot . service . IDENT_0 . Query ) { if ( IDENT_16 == null ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } return IDENT_16 . hasNext ( ) ; }
org . junit . Assert . assertTrue ( result ) 