METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( com . microsoft . azure . management . IDENT_0 ) { final java . lang . String IDENT_1 = com . microsoft . azure . management . resources . IDENT_2 . utils . IDENT_3 . METHOD_2 ( STRING_0 , INT_0 ) ; final java . lang . String IDENT_4 = com . microsoft . azure . management . resources . IDENT_2 . utils . IDENT_3 . METHOD_2 ( STRING_1 , INT_0 ) ; try { java . lang . String IDENT_5 = com . microsoft . azure . management . resources . IDENT_6 . IDENT_7 . METHOD_3 ( ) ; System . out . println ( ( STRING_2 0 + IDENT_1 ) ) ; azure . METHOD_4 ( ) . METHOD_5 ( IDENT_1 ) . METHOD_6 ( IDENT_8 . IDENT_9 ) . create ( ) ; System . out . println ( ( STRING_2 4 + IDENT_1 ) ) ; System . out . println ( ( STRING_3 + IDENT_4 ) ) ; com . microsoft . azure . management . resources . IDENT_10 IDENT_11 = azure . METHOD_7 ( ) . METHOD_5 ( IDENT_4 ) . METHOD_8 ( IDENT_1 ) . METHOD_9 ( IDENT_5 ) . METHOD_10 ( STRING_4 ) . METHOD_11 ( IDENT_12 . IDENT_13 ) . create ( ) ; System . out . println ( ( STRING_5 + IDENT_4 ) ) ; java . util . List < com . microsoft . azure . management . resources . IDENT_14 > operations = IDENT_11 . METHOD_12 ( ) . list ( ) ; java . util . List < com . microsoft . azure . management . resources . IDENT_15 > IDENT_16 = new java . util . ArrayList ( ) ; for ( com . microsoft . azure . management . resources . IDENT_14 operation : operations ) { if ( ( operation . METHOD_13 ( ) ) != null ) { IDENT_16 . add ( azure . METHOD_14 ( ) . METHOD_15 ( operation . METHOD_13 ( ) . id ( ) ) ) ; } } System . out . println ( ( STRING_2 + IDENT_4 ) ) ; for ( com . microsoft . azure . management . resources . IDENT_15 IDENT_17 : METHOD_14 ) { System . out . println ( ( ( ( ( ( IDENT_17 . METHOD_16 ( ) ) + STRING_2 1 ) + ( IDENT_17 . METHOD_17 ( ) ) ) + STRING_2 2 ) + ( IDENT_17 . name ( ) ) ) ) ; IDENT_17 . update ( ) . METHOD_18 ( STRING_6 , STRING_7 ) . apply ( ) ; } METHOD_14 = azure . METHOD_14 ( ) . METHOD_19 ( IDENT_1 , STRING_6 , STRING_7 ) ; System . out . println ( ( STRING_2 5 + IDENT_4 ) ) ; for ( com . microsoft . azure . management . resources . IDENT_15 IDENT_17 : METHOD_14 ) { System . out . println ( ( ( ( ( ( IDENT_17 . METHOD_16 ( ) ) + STRING_2 1 ) + ( IDENT_17 . METHOD_17 ( ) ) ) + STRING_2 2 ) + ( IDENT_17 . name ( ) ) ) ) ; } return true ; } catch ( java . lang . Exception f ) { System . out . println ( f . getMessage ( ) ) ; f . printStackTrace ( ) ; } finally { try { System . out . println ( ( STRING_8 + IDENT_1 ) ) ; azure . METHOD_4 ( ) . METHOD_20 ( IDENT_1 ) ; System . out . println ( ( STRING_9 + IDENT_1 ) ) ; } catch ( java . lang . IDENT_18 IDENT_19 ) { System . out . println ( STRING_2 3 ) ; } catch ( java . lang . Exception g ) { g . printStackTrace ( ) ; } } return false ; }
org . junit . Assert . assertTrue ( com . microsoft . azure . management . resources . IDENT_6 . IDENT_7 . METHOD_1 ( azure ) ) 