METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 actual = IDENT_4 . METHOD_1 ( com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 ) { if ( METHOD_2 ( ) ) { com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_8 . METHOD_3 ( address ) ; if ( handler != null ) { final java . util . concurrent . IDENT_9 < java . lang . String , com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . IDENT_11 < com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . IDENT_12 > > map = ( handler instanceof com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . IDENT_14 ) ? IDENT_15 : IDENT_16 ; final com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . IDENT_11 < com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . IDENT_12 > IDENT_17 = map . get ( address ) ; if ( IDENT_17 != null ) { MOD_0 ( IDENT_17 ) { final int size = IDENT_17 . list . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . IDENT_12 entry = IDENT_17 . list . get ( i ) ; if ( ( entry . handler ) == handler ) { IDENT_17 . list . remove ( i ) ; if ( IDENT_17 . list . isEmpty ( ) ) { map . remove ( address ) ; if ( ( ! ( entry . IDENT_18 ) ) && ( ! ( handler instanceof com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . IDENT_14 ) ) ) { IDENT_19 . remove ( address ) ; METHOD_4 ( new com . IDENT_0 . IDENT_1 . internal . IDENT_2 . METHOD_5 ( this , address , false ) ) ; } } com . IDENT_0 . IDENT_1 . internal . IDENT_2 . IDENT_10 . LOG . trace ( STRING_0 , entry . handler , address ) ; return this ; } } } } } } return this ; }
org . junit . Assert . assertEquals ( IDENT_4 , actual ) 