METHOD_0 ( ) { final org . baeldung . persistence . model . IDENT_0 IDENT_1 = new org . baeldung . persistence . model . METHOD_1 ( ) ; IDENT_1 . METHOD_2 ( 5 ) ; IDENT_1 . METHOD_3 ( true ) ; final org . baeldung . IDENT_2 . util . IDENT_3 IDENT_4 = new org . baeldung . IDENT_2 . util . METHOD_4 ( 2 , 10 , 1 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . baeldung . persistence . model . METHOD_1 , org . baeldung . IDENT_2 . util . METHOD_4 ) { final java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; if ( ( IDENT_4 . METHOD_6 ( ) ) >= ( IDENT_1 . METHOD_7 ( ) ) ) { builder . append ( STRING_0 ) ; builder . append ( java . lang . String . format ( org . baeldung . IDENT_2 . persistence . service . impl . IDENT_5 . IDENT_6 , IDENT_4 . METHOD_6 ( ) , STRING_1 , IDENT_1 . METHOD_7 ( ) ) ) ; return builder . toString ( ) ; } if ( ( ( IDENT_1 . METHOD_8 ( ) ) > 0 ) && ( ( IDENT_4 . METHOD_9 ( ) ) >= ( IDENT_1 . METHOD_8 ( ) ) ) ) { builder . append ( STRING_0 ) ; builder . append ( java . lang . String . format ( org . baeldung . IDENT_2 . persistence . service . impl . IDENT_5 . IDENT_7 , IDENT_4 . METHOD_9 ( ) , STRING_1 , IDENT_1 . METHOD_8 ( ) ) ) ; return builder . toString ( ) ; } return STRING_2 ; }
org . junit . Assert . assertTrue ( METHOD_5 ( IDENT_1 , IDENT_4 ) . contains ( STRING_2 ) ) 