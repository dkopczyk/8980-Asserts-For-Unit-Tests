METHOD_0 ( ) { long start = ( java . lang . System . currentTimeMillis ( ) ) / 1000 ; java . util . List < com . IDENT_0 . IDENT_1 . simple . IDENT_2 . IDENT_3 > IDENT_4 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . simple . IDENT_2 . IDENT_3 > ( ) ; IDENT_4 . add ( new com . IDENT_0 . IDENT_1 . simple . IDENT_2 . METHOD_1 ( properties . getProperty ( STRING_0 ) , "" ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . simple . IDENT_2 . IDENT_5 > IDENT_6 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . simple . IDENT_2 . IDENT_5 > ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { com . IDENT_0 . IDENT_1 . simple . IDENT_2 . IDENT_5 IDENT_7 = new com . IDENT_0 . IDENT_1 . simple . IDENT_2 . METHOD_2 ( STRING_1 , new javax . IDENT_8 . METHOD_3 ( STRING_2 ) ) ; IDENT_6 . add ( IDENT_7 ) ; } java . util . List < com . IDENT_0 . IDENT_1 . simple . IDENT_2 > IDENT_9 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . simple . IDENT_2 > ( ) ; for ( int i = 0 ; i < 2 ; i ++ ) { com . IDENT_0 . IDENT_1 . simple . IDENT_2 IDENT_10 = com . IDENT_0 . IDENT_1 . simple . IDENT_2 . builder ( ) . from ( properties . getProperty ( STRING_3 ) , STRING_4 ) . to ( properties . getProperty ( STRING_5 ) ) . subject ( ( STRING_6 + i ) ) . METHOD_4 ( STRING_7 ) . METHOD_5 ( new com . IDENT_0 . IDENT_1 . simple . IDENT_2 . METHOD_1 ( properties . getProperty ( STRING_5 ) ) ) . METHOD_6 ( IDENT_6 ) . build ( ) ; IDENT_9 . add ( IDENT_10 ) ; } java . util . List < java . lang . String > result = IDENT_11 . METHOD_7 ( IDENT_9 ) ; java . lang . String IDENT_12 = "" ; for ( java . lang . String s : result ) { IDENT_12 = IDENT_12 + s ; } long end = ( java . lang . System . currentTimeMillis ( ) ) / 1000 ; System . out . println ( ( STRING_8 + ( end - start ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( com . IDENT_0 . IDENT_1 . simple . List ) { com . IDENT_0 . IDENT_1 . simple . List < java . lang . String > IDENT_13 = new com . IDENT_0 . IDENT_1 . simple . ArrayList < java . lang . String > ( ) ; com . IDENT_0 . IDENT_1 . simple . IDENT_14 executor = com . IDENT_0 . IDENT_1 . simple . IDENT_15 . METHOD_8 ( com . IDENT_0 . IDENT_1 . simple . IDENT_16 . IDENT_17 ) ; final com . IDENT_0 . IDENT_1 . simple . IDENT_18 IDENT_19 = new com . IDENT_0 . IDENT_1 . simple . METHOD_9 ( IDENT_9 . size ( ) ) ; com . IDENT_0 . IDENT_1 . simple . List < com . IDENT_0 . IDENT_1 . simple . IDENT_20 < java . lang . String > > IDENT_21 = new com . IDENT_0 . IDENT_1 . simple . ArrayList < com . IDENT_0 . IDENT_1 . simple . IDENT_20 < java . lang . String > > ( ) ; for ( int i = 0 ; i < ( IDENT_9 . size ( ) ) ; i ++ ) { com . IDENT_0 . IDENT_1 . simple . IDENT_20 < java . lang . String > f = executor . METHOD_10 ( new com . IDENT_0 . IDENT_1 . simple . IDENT_16 . METHOD_11 ( IDENT_19 , IDENT_9 . get ( i ) ) ) ; IDENT_21 . add ( f ) ; } try { IDENT_19 . METHOD_12 ( ) ; for ( com . IDENT_0 . IDENT_1 . simple . IDENT_20 < java . lang . String > f : IDENT_21 ) { IDENT_13 . add ( f . get ( ) ) ; } executor . METHOD_13 ( ) ; executor . METHOD_14 ( com . IDENT_0 . IDENT_1 . simple . IDENT_16 . IDENT_22 , TimeUnit . IDENT_23 ) ; } catch ( java . lang . IDENT_24 e ) { e . printStackTrace ( ) ; } catch ( com . IDENT_0 . IDENT_1 . simple . IDENT_25 e ) { e . printStackTrace ( ) ; } finally { if ( ! ( executor . METHOD_15 ( ) ) ) { System . err . println ( STRING_9 ) ; } executor . METHOD_16 ( ) ; System . out . println ( STRING_10 ) ; } return IDENT_13 ; }
org . junit . Assert . assertEquals ( ( ( IDENT_12 . length ( ) ) / 7 ) , 10 ) 