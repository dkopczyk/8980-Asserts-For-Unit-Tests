METHOD_0 ( ) { org . batfish . common . IDENT_0 . IDENT_1 IDENT_2 = new org . batfish . common . IDENT_0 . METHOD_1 ( ) ; net . sf . IDENT_3 . IDENT_4 IDENT_5 = IDENT_2 . METHOD_2 ( ) . value ( IDENT_6 . IDENT_7 ) ; net . sf . IDENT_3 . IDENT_4 IDENT_8 = IDENT_2 . METHOD_2 ( ) . value ( IDENT_6 . IDENT_9 ) ; org . batfish . common . IDENT_0 . IDENT_10 IDENT_11 = new org . batfish . common . IDENT_0 . METHOD_3 ( com . google . common . collect . ImmutableList . of ( IDENT_5 , IDENT_8 ) ) ; net . sf . IDENT_3 . IDENT_4 IDENT_0 = IDENT_2 . METHOD_2 ( ) . value ( IDENT_6 . IDENT_7 ) ; net . sf . IDENT_3 . IDENT_4 IDENT_12 = IDENT_11 . METHOD_4 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } and ( java . lang . IDENT_13 ) { java . util . Iterator < org . batfish . datamodel . IDENT_14 . IDENT_15 > IDENT_16 = IDENT_17 . iterator ( ) ; if ( ! ( IDENT_16 . hasNext ( ) ) ) { return IDENT_18 . INSTANCE ; } org . batfish . datamodel . IDENT_14 . IDENT_15 first = IDENT_16 . next ( ) ; if ( ! ( IDENT_16 . hasNext ( ) ) ) { return first ; } return new org . batfish . datamodel . IDENT_14 . METHOD_5 ( IDENT_17 ) ; }
org . junit . Assert . assertThat ( IDENT_12 . and ( IDENT_0 ) , org . hamcrest . Matchers . equalTo ( IDENT_12 ) ) 