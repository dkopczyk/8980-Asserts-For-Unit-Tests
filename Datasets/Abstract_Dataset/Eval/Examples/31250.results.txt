METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Object ) { if ( input == null ) { return IDENT_0 . INSTANCE ; } METHOD_2 ( ( input instanceof java . lang . String ) , ( ( org . batfish . IDENT_1 . IDENT_2 . IDENT_3 ) + STRING_0 ) ) ; java . lang . String IDENT_4 = ( ( java . lang . String ) ( input ) ) . trim ( ) ; java . util . regex . IDENT_5 matcher = org . batfish . IDENT_1 . IDENT_2 . IDENT_6 . matcher ( IDENT_4 ) ; if ( matcher . find ( ) ) { java . lang . String [ ] IDENT_7 = matcher . group ( 1 ) . trim ( ) . split ( STRING_1 ) ; METHOD_2 ( ( ( ( IDENT_7 . length ) == 1 ) || ( ( IDENT_7 . length ) == 2 ) ) , ( ( STRING_2 + ( matcher . group ( 1 ) ) ) + STRING_3 ) ) ; java . util . regex . IDENT_8 IDENT_9 = java . util . regex . IDENT_8 . METHOD_3 ( IDENT_7 [ 0 ] . trim ( ) , IDENT_8 . IDENT_10 ) ; java . lang . String IDENT_11 = ( ( IDENT_7 . length ) == 1 ) ? null : IDENT_7 [ 1 ] . trim ( ) ; return new org . batfish . IDENT_1 . METHOD_4 ( IDENT_9 , IDENT_11 ) ; } java . util . regex . IDENT_5 IDENT_12 = org . batfish . IDENT_1 . IDENT_2 . IDENT_13 . matcher ( IDENT_4 ) ; if ( IDENT_12 . find ( ) ) { return new org . batfish . IDENT_1 . METHOD_5 ( METHOD_1 ( IDENT_12 . group ( 1 ) ) , METHOD_1 ( IDENT_12 . group ( 2 ) ) ) ; } return new org . batfish . IDENT_1 . METHOD_6 ( java . util . regex . IDENT_8 . METHOD_3 ( IDENT_4 , IDENT_8 . IDENT_10 ) ) ; }
org . junit . Assert . assertThat ( new org . batfish . IDENT_1 . METHOD_7 ( ) . METHOD_1 ( null ) , org . hamcrest . Matchers . equalTo ( IDENT_0 . INSTANCE ) ) 