METHOD_0 ( ) { org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 element = new org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 , 0 , null ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . List , int ) { if ( IDENT_4 < 0 ) { return java . util . Optional . empty ( ) ; } org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 element = IDENT_5 . get ( IDENT_4 ) ; if ( IDENT_4 > 0 ) { java . util . Optional < org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_6 = org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( IDENT_5 , ( IDENT_4 - 1 ) ) ; if ( IDENT_6 . METHOD_4 ( ) ) { return org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 ( IDENT_5 , ( ( IDENT_6 . get ( ) . METHOD_5 ( ) ) - 1 ) ) ; } } if ( ( element . METHOD_6 ( ) ) == ( Type . IDENT_7 ) ) { if ( ( IDENT_4 > 0 ) && ( ( IDENT_5 . get ( ( IDENT_4 - 1 ) ) . METHOD_6 ( ) ) == ( Type . IDENT_8 ) ) ) { return java . util . Optional . of ( IDENT_5 . get ( ( IDENT_4 - 1 ) ) ) ; } return java . util . Optional . of ( element ) ; } else if ( ( ( element . METHOD_6 ( ) ) != null ) && ( ( element . METHOD_6 ( ) ) != ( Type . IDENT_9 ) ) ) { return java . util . Optional . of ( element ) ; } return org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 ( IDENT_5 , ( IDENT_4 - 1 ) ) ; }
org . junit . Assert . assertThat ( org . batfish . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 ( com . google . common . collect . ImmutableList . of ( element ) , 0 ) , org . hamcrest . Matchers . equalTo ( java . util . Optional . of ( element ) ) ) 