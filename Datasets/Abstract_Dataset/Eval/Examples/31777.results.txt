METHOD_0 ( ) { IDENT_0 . METHOD_1 ( STRING_0 , STRING_1 ) ; IDENT_0 . METHOD_1 ( STRING_0 , STRING_2 ) ; IDENT_0 . METHOD_2 ( STRING_0 , STRING_2 ) ; final java . util . List < java . lang . String > IDENT_1 = IDENT_0 . METHOD_3 ( STRING_0 ) ; final java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList < java . lang . String > ( 2 ) ; IDENT_2 . add ( STRING_1 ) ; "<AssertPlaceHolder>" ; } add ( org . IDENT_3 . beam . IDENT_4 . IDENT_5 ) { if ( ( size ) >= ( IDENT_6 ) ) { throw new java . lang . IllegalStateException ( STRING_3 ) ; } MOD_0 ( IDENT_7 ) { try { int IDENT_8 = METHOD_4 ( size ) ; if ( IDENT_8 != ( IDENT_9 ) ) { METHOD_5 ( IDENT_9 , IDENT_7 ) ; IDENT_7 . METHOD_6 ( ) ; METHOD_7 ( IDENT_8 , IDENT_7 ) ; IDENT_9 = IDENT_8 ; } IDENT_7 . add ( IDENT_10 ) ; } catch ( java . io . IOException e ) { org . IDENT_3 . beam . IDENT_4 . IDENT_11 . IDENT_12 . logger . log ( IDENT_13 . IDENT_14 , STRING_4 , e ) ; return false ; } } ( size ) ++ ; return true ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_1 ) 