METHOD_0 ( ) { final java . util . Properties properties = new java . util . Properties ( ) ; properties . setProperty ( STRING_0 , STRING_1 ) ; final java . lang . String IDENT_0 = STRING_2 ; final java . lang . String IDENT_1 = net . sf . IDENT_2 . IDENT_3 . util . IDENT_4 . format ( STRING_2 , properties , IDENT_5 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } format ( java . lang . String , java . util . Properties , net . sf . IDENT_2 . IDENT_3 . util . IDENT_7 ) { net . sf . IDENT_2 . IDENT_8 . METHOD_1 ( code , STRING_3 ) ; net . sf . IDENT_2 . IDENT_8 . METHOD_1 ( options , STRING_4 ) ; net . sf . IDENT_2 . IDENT_8 . METHOD_2 ( IDENT_9 , STRING_5 ) ; final org . eclipse . IDENT_10 . core . IDENT_11 . IDENT_12 IDENT_11 = org . eclipse . IDENT_10 . core . IDENT_13 . METHOD_3 ( options ) ; final java . lang . String IDENT_14 = net . sf . IDENT_2 . IDENT_3 . util . IDENT_4 . IDENT_5 . find ( IDENT_9 , code ) ; org . eclipse . text . IDENT_15 . IDENT_16 IDENT_17 = null ; try { IDENT_17 = IDENT_11 . format ( org . eclipse . IDENT_10 . core . IDENT_11 . IDENT_12 . IDENT_18 , code , 0 , code . length ( ) , 0 , IDENT_14 ) ; } catch ( final java . lang . Exception IDENT_19 ) { net . sf . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . warn ( STRING_6 , IDENT_19 ) ; } java . lang . String IDENT_20 = code ; if ( IDENT_17 == null ) { net . sf . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . info ( STRING_7 ) ; } else { final org . eclipse . IDENT_21 . text . IDENT_22 doc = new org . eclipse . IDENT_21 . text . Document ( code ) ; try { IDENT_17 . apply ( doc ) ; } catch ( final java . lang . Exception e ) { net . sf . IDENT_2 . IDENT_3 . util . IDENT_4 . LOG . warn ( e . METHOD_4 ( ) , e ) ; } IDENT_20 = doc . get ( ) ; } return IDENT_20 ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 