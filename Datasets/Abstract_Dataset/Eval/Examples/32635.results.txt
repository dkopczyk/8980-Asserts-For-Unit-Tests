METHOD_0 ( ) { ch . IDENT_0 . IDENT_1 . math . function . classes . IDENT_2 f = ch . IDENT_0 . IDENT_1 . math . function . classes . IDENT_2 . getInstance ( this . IDENT_3 . METHOD_1 ( 4 ) ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_4 . IDENT_5 . interfaces . IDENT_6 IDENT_7 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_4 . IDENT_5 . classes . IDENT_8 . getInstance ( ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_10 . classes . IDENT_11 . getInstance ( f . METHOD_2 ( ) . METHOD_3 ( ) ) , this . IDENT_12 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_4 . classes . IDENT_13 IDENT_14 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_4 . classes . IDENT_13 . getInstance ( IDENT_7 , f ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_15 . interfaces . Element IDENT_16 = this . IDENT_3 . METHOD_4 ( ) . METHOD_1 ( 4 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_15 . interfaces . Element IDENT_17 = this . IDENT_3 . METHOD_1 ( INT_0 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_15 . classes . IDENT_18 IDENT_19 = IDENT_14 . METHOD_5 ( IDENT_16 , IDENT_17 ) ; boolean v = IDENT_14 . verify ( IDENT_19 , IDENT_17 ) ; "<AssertPlaceHolder>" ; } verify ( ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_15 . interfaces . Element , ch . IDENT_0 . IDENT_1 . math . IDENT_9 . IDENT_15 . interfaces . Element ) { if ( ( ! ( this . METHOD_6 ( ) . contains ( IDENT_19 ) ) ) || ( ! ( this . METHOD_7 ( ) . contains ( IDENT_17 ) ) ) ) { throw new java . lang . IllegalArgumentException ( ) ; } return this . METHOD_8 ( ( ( IDENT_20 ) ( IDENT_19 ) ) , ( ( IDENT_21 ) ( IDENT_17 ) ) ) ; }
org . junit . Assert . assertTrue ( ( ! v ) ) 