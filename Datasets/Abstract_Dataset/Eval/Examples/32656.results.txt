METHOD_0 ( ) { ch . IDENT_0 . IDENT_1 . helper . IDENT_2 . classes . IDENT_3 IDENT_2 = ch . IDENT_0 . IDENT_1 . helper . IDENT_2 . classes . IDENT_3 . getInstance ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { java . math . BigInteger IDENT_4 = java . math . BigInteger . valueOf ( i ) ; "<AssertPlaceHolder>" ; } try { IDENT_2 . METHOD_1 ( java . math . BigInteger . valueOf ( ( - 1 ) ) ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { } } METHOD_2 ( ch . IDENT_0 . IDENT_1 . helper . tree . IDENT_5 ) { if ( tree == null ) { throw new java . lang . IllegalArgumentException ( ) ; } if ( tree . METHOD_3 ( ) ) { ch . IDENT_0 . IDENT_1 . helper . tree . IDENT_6 < IDENT_7 > IDENT_8 = ( ( ch . IDENT_0 . IDENT_1 . helper . tree . IDENT_6 < IDENT_7 > ) ( tree ) ) ; return this . METHOD_4 ( IDENT_8 . getValue ( ) ) ; } final ch . IDENT_0 . IDENT_1 . helper . tree . Node < IDENT_7 > node = ( ( ch . IDENT_0 . IDENT_1 . helper . tree . Node < IDENT_7 > ) ( tree ) ) ; ch . IDENT_0 . IDENT_1 . helper . IDENT_9 . IDENT_10 < IDENT_7 > values = node . METHOD_5 ( ) . map ( this . IDENT_11 ) ; return this . METHOD_6 ( values ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_2 . METHOD_2 ( IDENT_2 . METHOD_1 ( IDENT_4 ) ) ) 