METHOD_0 ( ) { try { ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_5 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . METHOD_1 ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_10 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . METHOD_1 ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_11 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . METHOD_2 ( IDENT_5 , IDENT_10 ) ; "<AssertPlaceHolder>" ; } catch ( ch . IDENT_0 . IDENT_1 . IDENT_12 ex ) { org . junit . Assert . fail ( ) ; } } METHOD_1 ( IDENT_13 , ch . IDENT_0 . IDENT_1 . helper . converter . classes . IDENT_14 , ch . IDENT_0 . IDENT_1 . helper . IDENT_15 . interfaces . IDENT_16 , ch . IDENT_0 . IDENT_1 . helper . converter . interfaces . IDENT_17 ) { if ( ( ( ( value == null ) || ( IDENT_18 == null ) ) || ( IDENT_15 == null ) ) || ( IDENT_19 == null ) ) { throw new ch . IDENT_0 . IDENT_1 . METHOD_3 ( ch . IDENT_0 . IDENT_1 . IDENT_20 . IDENT_21 , this , value , IDENT_18 , IDENT_15 , IDENT_19 ) ; } try { ch . IDENT_0 . IDENT_1 . helper . tree . IDENT_22 < IDENT_23 > tree = IDENT_15 . METHOD_4 ( IDENT_19 . METHOD_5 ( value ) ) ; return this . METHOD_6 ( tree , IDENT_18 ) ; } catch ( java . lang . Exception exception ) { throw new ch . IDENT_0 . IDENT_1 . METHOD_7 ( ch . IDENT_0 . IDENT_1 . IDENT_20 . IDENT_24 , exception ) ; } }
org . junit . Assert . assertEquals ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . METHOD_1 ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_9 , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_8 ) , IDENT_11 ) 