METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_1 ( STRING_0 ) ; for ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 c : IDENT_4 . METHOD_2 ( ) ) { int IDENT_7 = 0 ; java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 > IDENT_9 = c . METHOD_3 ( ) ; for ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 g : IDENT_9 ) { if ( ( IDENT_7 != 0 ) && ( IDENT_7 < ( IDENT_9 . size ( ) ) ) ) { java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 > IDENT_11 = g . METHOD_4 ( ) ; for ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 a : IDENT_11 ) { if ( a . getName ( ) . equals ( STRING_1 ) ) { java . util . List < java . lang . Integer > IDENT_12 = new java . util . ArrayList ( ) ; for ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 b : a . METHOD_5 ( ) ) { IDENT_12 . add ( IDENT_11 . indexOf ( b . METHOD_6 ( a ) ) ) ; } "<AssertPlaceHolder>" ; } } } IDENT_7 ++ ; } } } contains ( org . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 ) { if ( METHOD_7 ( other ) ) { return ( ( IDENT_18 ) <= ( other . IDENT_18 ) ) && ( ( IDENT_19 ) >= ( other . IDENT_19 ) ) ; } else { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } }
org . junit . Assert . assertTrue ( IDENT_12 . contains ( ( - 1 ) ) ) 