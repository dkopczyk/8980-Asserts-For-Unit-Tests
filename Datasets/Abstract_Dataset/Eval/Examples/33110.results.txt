METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . lang . Long [ ] IDENT_0 = new java . lang . Long [ 0 ] ; net . sf . json . JSONObject result = IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Long [ ] ) { net . sf . json . JSONObject result = new net . sf . json . JSONObject ( ) ; java . util . Arrays . METHOD_2 ( IDENT_0 ) ; double [ ] IDENT_6 = new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , FLOAT_6 , FLOAT_7 , 1.0 } ; java . util . IDENT_7 < java . lang . Long > IDENT_8 = new java . util . METHOD_3 ( ) ; IDENT_8 . addAll ( java . util . Arrays . asList ( IDENT_0 ) ) ; double IDENT_9 = 1.0 ; java . lang . Object IDENT_10 = 0 ; for ( int IDENT_11 = ( IDENT_6 . length ) - 1 ; IDENT_11 >= 0 ; IDENT_11 OP_0 ) { double IDENT_12 = IDENT_6 [ IDENT_11 ] ; while ( ( IDENT_9 >= IDENT_12 ) && ( ! ( IDENT_8 . empty ( ) ) ) ) { IDENT_10 = IDENT_8 . METHOD_4 ( ) ; IDENT_9 OP_1 1.0 / ( IDENT_0 . length ) ; } result . element ( java . lang . String . valueOf ( ( IDENT_12 * 100 ) ) , IDENT_10 ) ; } return result ; }
org . junit . Assert . assertNotNull ( result ) 