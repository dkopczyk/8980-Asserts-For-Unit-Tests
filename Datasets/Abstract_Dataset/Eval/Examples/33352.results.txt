METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . LOG . info ( ) . METHOD_1 ( STRING_0 ) . METHOD_1 ( ) ; int IDENT_3 = INT_0 ; int size = INT_0 * IDENT_3 ; com . IDENT_0 . IDENT_1 . IDENT_4 < com . IDENT_0 . IDENT_1 . IDENT_5 > queue = new com . IDENT_0 . IDENT_1 . METHOD_2 ( IDENT_5 . IDENT_6 , IDENT_3 ) ; com . IDENT_0 . IDENT_1 . IDENT_7 IDENT_8 = new com . IDENT_0 . IDENT_1 . METHOD_3 ( IDENT_3 ) ; com . IDENT_0 . IDENT_1 . IDENT_7 IDENT_9 = new com . IDENT_0 . IDENT_1 . METHOD_4 ( new com . IDENT_0 . IDENT_1 . METHOD_5 ( ) ) ; IDENT_8 . METHOD_6 ( IDENT_9 ) . METHOD_6 ( IDENT_8 ) ; java . util . concurrent . IDENT_10 IDENT_11 = new java . util . concurrent . METHOD_7 ( 2 ) ; java . util . concurrent . IDENT_12 IDENT_13 = new java . util . concurrent . METHOD_8 ( 1 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_14 consumer = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_9 ( size , IDENT_9 , queue , IDENT_11 , IDENT_13 ) ; consumer . start ( ) ; IDENT_11 . METHOD_10 ( ) ; int i = 0 ; while ( true ) { long IDENT_15 = IDENT_8 . next ( ) ; if ( IDENT_15 < 0 ) { continue ; } queue . get ( IDENT_15 ) . value = i ++ ; IDENT_8 . METHOD_11 ( IDENT_15 ) ; if ( i == size ) { break ; } } com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_12 ( queue , IDENT_8 ) ; IDENT_13 . METHOD_10 ( ) ; int [ ] buf = consumer . buf ; for ( i = 0 ; i < ( buf . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_10 ( ) { IDENT_16 . METHOD_13 ( ) ; try { if ( IDENT_17 ) { throw IDENT_18 . INSTANCE ; } if ( ! ( condition . METHOD_10 ( time , unit ) ) ) { throw IDENT_19 . INSTANCE ; } } catch ( java . lang . IDENT_20 e ) { throw IDENT_19 . INSTANCE ; } finally { METHOD_13 . METHOD_14 ( ) ; } }
org . junit . Assert . assertEquals ( i , buf [ i ] ) 