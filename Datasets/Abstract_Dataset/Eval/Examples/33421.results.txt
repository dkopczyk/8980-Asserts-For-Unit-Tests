METHOD_0 ( ) { java . time . IDENT_0 IDENT_1 = java . time . IDENT_0 . of ( STRING_0 ) ; com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 rules = new com . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( STRING_0 , IDENT_1 . METHOD_2 ( ) ) ; int y = INT_0 ; int m = 3 ; int d = INT_1 ; java . time . IDENT_6 IDENT_7 = java . time . IDENT_6 . of ( y , m , d , 0 , 0 ) ; long IDENT_8 = com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . METHOD_3 ( y , m , d , 0 , 0 ) ; java . time . IDENT_10 IDENT_11 = IDENT_7 . METHOD_4 ( IDENT_1 ) ; long expected = IDENT_11 . METHOD_5 ( ) . METHOD_6 ( ) ; long IDENT_12 = ( com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . METHOD_3 ( IDENT_11 . METHOD_7 ( ) , IDENT_11 . METHOD_8 ( ) , IDENT_11 . METHOD_9 ( ) , IDENT_11 . METHOD_10 ( ) , IDENT_11 . METHOD_11 ( ) ) ) + ( ( IDENT_11 . METHOD_12 ( ) ) * 1000 ) ; expected += ( IDENT_12 - IDENT_8 ) / 1000 ; long offset = rules . METHOD_5 ( IDENT_8 , y , com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . METHOD_13 ( y ) ) ; try { "<AssertPlaceHolder>" ; } catch ( java . lang . Throwable e ) { System . out . println ( ( ( ( ( ( IDENT_1 . getId ( ) ) + STRING_1 ) + IDENT_11 ) + STRING_1 ) + ( com . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . toString ( ( IDENT_8 + offset ) ) ) ) ) ; throw e ; } } METHOD_13 ( int ) { return ( ( IDENT_13 & 3 ) == 0 ) && ( ( ( IDENT_13 OP_0 100 ) != 0 ) || ( ( IDENT_13 OP_0 INT_2 ) == 0 ) ) ; }
org . junit . Assert . assertEquals ( expected , ( offset / 1000 ) ) 