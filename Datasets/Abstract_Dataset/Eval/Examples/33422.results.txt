METHOD_0 ( ) { java . util . Set < java . lang . String > IDENT_0 = java . time . IDENT_1 . METHOD_1 ( ) ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList ( IDENT_0 ) ; java . util . Collections . METHOD_2 ( IDENT_2 ) ; java . util . List < java . time . IDENT_1 > IDENT_3 = new java . util . ArrayList ( IDENT_2 . size ( ) ) ; java . util . List < com . IDENT_4 . IDENT_5 . time . IDENT_6 > IDENT_7 = new java . util . ArrayList ( IDENT_2 . size ( ) ) ; for ( java . lang . String IDENT_8 : IDENT_2 ) { java . time . IDENT_1 IDENT_9 = java . time . IDENT_1 . of ( IDENT_8 ) ; IDENT_3 . add ( IDENT_9 ) ; IDENT_7 . add ( new com . IDENT_4 . IDENT_5 . time . METHOD_3 ( IDENT_8 , IDENT_9 . METHOD_4 ( ) ) ) ; } long IDENT_10 = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_5 ( INT_0 , 1 , 1 , 0 , 0 ) ; long IDENT_12 = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_5 ( INT_1 , 12 , INT_2 , 0 , 0 ) ; while ( IDENT_10 < IDENT_12 ) { int y = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_6 ( IDENT_10 ) ; boolean IDENT_13 = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_7 ( y ) ; int m = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_8 ( IDENT_10 , y , IDENT_13 ) ; int d = com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_9 ( IDENT_10 , y , m , IDENT_13 ) ; java . time . IDENT_14 IDENT_15 = java . time . IDENT_14 . of ( y , m , d , 0 , 0 ) ; for ( int i = 0 , n = IDENT_3 . size ( ) ; i < n ; i ++ ) { java . time . IDENT_1 IDENT_9 = IDENT_3 . get ( i ) ; com . IDENT_4 . IDENT_5 . time . METHOD_3 rules = IDENT_7 . get ( i ) ; java . time . IDENT_16 IDENT_17 = IDENT_15 . METHOD_10 ( IDENT_9 ) ; long expected = IDENT_17 . METHOD_11 ( ) . METHOD_12 ( ) ; long IDENT_18 = ( com . IDENT_4 . IDENT_5 . time . IDENT_11 . METHOD_5 ( IDENT_17 . METHOD_6 ( ) , IDENT_17 . METHOD_13 ( ) , IDENT_17 . METHOD_9 ( ) , IDENT_17 . METHOD_14 ( ) , IDENT_17 . METHOD_15 ( ) ) ) + ( ( IDENT_17 . METHOD_16 ( ) ) * ( IDENT_11 . IDENT_19 ) ) ; expected += ( IDENT_18 - IDENT_10 ) / ( IDENT_11 . IDENT_19 ) ; long offset = rules . METHOD_11 ( IDENT_10 , y , IDENT_13 ) ; try { "<AssertPlaceHolder>" ; } catch ( java . lang . Throwable e ) { System . out . println ( ( ( ( ( ( IDENT_9 . getId ( ) ) + STRING_0 ) + IDENT_17 ) + STRING_0 ) + ( com . IDENT_4 . IDENT_5 . time . IDENT_11 . toString ( ( IDENT_10 + offset ) ) ) ) ) ; System . out . println ( ( ( ( STRING_1 + expected ) + STRING_2 ) + offset ) ) ; System . out . println ( IDENT_15 ) ; System . out . println ( com . IDENT_4 . IDENT_5 . time . IDENT_11 . toString ( IDENT_10 ) ) ; throw e ; } } IDENT_10 += IDENT_11 . IDENT_20 ; } } METHOD_11 ( long , int , boolean ) { return offset ; }
org . junit . Assert . assertEquals ( expected , ( offset / ( IDENT_11 . IDENT_19 ) ) ) 