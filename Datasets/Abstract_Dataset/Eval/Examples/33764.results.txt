METHOD_0 ( ) { for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 : new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 [ ] { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 , IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 } ) { java . util . Map < io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 , java . util . function . IDENT_11 < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 , java . lang . Boolean > > IDENT_13 = new java . util . HashMap ( ) ; IDENT_13 . put ( IDENT_10 . IDENT_14 , ( IDENT_15 ) -> { return IDENT_16 . METHOD_1 ( IDENT_15 ) ; } ) ; IDENT_13 . put ( IDENT_10 . IDENT_17 , ( IDENT_15 ) -> { return IDENT_16 . METHOD_2 ( IDENT_15 ) ; } ) ; java . util . Map < io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 , java . util . function . IDENT_18 < IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 > > IDENT_19 = new java . util . HashMap ( ) ; IDENT_19 . put ( IDENT_10 . IDENT_14 , ( IDENT_20 ) -> { verify ( IDENT_21 ) . METHOD_3 ( eq ( IDENT_4 ) , eq ( IDENT_20 ) ) ; } ) ; IDENT_19 . put ( IDENT_10 . IDENT_17 , ( IDENT_20 ) -> { verify ( IDENT_21 ) . METHOD_4 ( eq ( IDENT_4 ) , eq ( IDENT_20 ) ) ; } ) ; for ( io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 type : new io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 [ ] { io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 . IDENT_14 , io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . persistence . IDENT_10 . IDENT_17 } ) { METHOD_5 ( IDENT_22 ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 IDENT_20 = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 ( io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_23 . IDENT_24 , io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_23 . IDENT_25 , io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_23 . IDENT_26 , IDENT_0 . IDENT_1 . IDENT_2 . IDENT_27 . IDENT_28 , new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_27 [ 0 ] , IDENT_0 . IDENT_1 . IDENT_2 . IDENT_27 . IDENT_29 , new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_27 [ 0 ] , IDENT_0 . IDENT_1 . IDENT_2 . IDENT_30 . IDENT_31 , new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_30 [ 0 ] ) ; when ( IDENT_22 . METHOD_7 ( IDENT_20 , type ) ) . thenReturn ( new io . IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_32 < IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 > ( IDENT_20 , IDENT_4 ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_22 ) . METHOD_7 ( IDENT_20 , type ) ; IDENT_19 . get ( type ) . accept ( IDENT_20 ) ; } } } get ( java . lang . String ) { io . IDENT_0 . IDENT_33 . IDENT_34 . IDENT_35 . logger . trace ( STRING_0 , IDENT_36 ) ; METHOD_8 ( ) ; io . IDENT_0 . IDENT_33 . IDENT_34 . IDENT_35 . IDENT_37 IDENT_38 = IDENT_39 . get ( IDENT_36 ) ; if ( IDENT_38 == null ) { io . IDENT_0 . IDENT_33 . IDENT_34 . IDENT_35 . logger . trace ( STRING_1 , IDENT_36 ) ; return null ; } io . IDENT_0 . IDENT_33 . IDENT_34 . IDENT_35 . logger . trace ( STRING_2 , IDENT_36 , IDENT_38 . METHOD_9 ( ) ) ; return IDENT_38 . METHOD_9 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_13 . get ( type ) . apply ( IDENT_20 ) ) 