METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Class < ? > [ ] > fixture = new java . util . HashMap ( ) ; METHOD_1 ( fixture , STRING_0 , io . IDENT_0 . IDENT_1 . IDENT_2 . Boolean . class ) ; METHOD_1 ( fixture , STRING_1 5 , io . IDENT_0 . IDENT_1 . IDENT_2 . Boolean [ ] . class ) ; METHOD_1 ( fixture , STRING_2 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; METHOD_1 ( fixture , STRING_3 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 [ ] . class ) ; METHOD_1 ( fixture , STRING_4 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . class ) ; METHOD_1 ( fixture , STRING_5 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 [ ] . class ) ; METHOD_1 ( fixture , STRING_1 0 , io . IDENT_0 . IDENT_1 . IDENT_2 . Integer . class ) ; METHOD_1 ( fixture , STRING_1 1 , io . IDENT_0 . IDENT_1 . IDENT_2 . Integer [ ] . class ) ; METHOD_1 ( fixture , STRING_6 , io . IDENT_0 . IDENT_1 . IDENT_2 . Long . class ) ; METHOD_1 ( fixture , STRING_1 4 , io . IDENT_0 . IDENT_1 . IDENT_2 . Long [ ] . class ) ; METHOD_1 ( fixture , STRING_1 6 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . class ) ; METHOD_1 ( fixture , STRING_1 2 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 [ ] . class ) ; METHOD_1 ( fixture , STRING_1 , io . IDENT_0 . IDENT_1 . IDENT_2 . Double . class ) ; METHOD_1 ( fixture , STRING_1 3 , io . IDENT_0 . IDENT_1 . IDENT_2 . Double [ ] . class ) ; METHOD_1 ( fixture , STRING_7 , java . lang . String . class ) ; METHOD_1 ( fixture , STRING_8 , java . lang . String [ ] . class ) ; METHOD_1 ( fixture , STRING_1 7 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . class ) ; METHOD_1 ( fixture , STRING_9 , io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 [ ] . class ) ; for ( Map . Entry < java . lang . String , java . lang . Class < ? > [ ] > entry : fixture . entrySet ( ) ) { java . lang . String IDENT_7 = io . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_2 ( entry . getValue ( ) ) [ 0 ] ; java . lang . String key = entry . getKey ( ) ; "<AssertPlaceHolder>" ; } } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( key , IDENT_7 ) 