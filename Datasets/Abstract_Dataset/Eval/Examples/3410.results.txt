METHOD_0 ( ) { final com . allanbank . mongodb . bson . builder . IDENT_0 db = com . allanbank . mongodb . bson . builder . IDENT_1 . start ( ) . METHOD_1 ( STRING_0 , 1 ) ; db . METHOD_2 ( STRING_1 ) ; db . METHOD_3 ( "value" ) ; final java . util . List < com . allanbank . mongodb . bson . Document > IDENT_2 = java . util . Collections . singletonList ( db . build ( ) ) ; final com . allanbank . mongodb . client . message . IDENT_3 IDENT_4 = new com . allanbank . mongodb . client . message . METHOD_4 ( 0 , 0 , 0 , IDENT_2 , false , false , false , true ) ; final com . allanbank . mongodb . IDENT_5 < com . allanbank . mongodb . bson . Document > IDENT_6 = METHOD_5 ( com . allanbank . mongodb . IDENT_5 . class ) ; replay ( IDENT_6 ) ; final com . allanbank . mongodb . client . IDENT_7 . IDENT_8 IDENT_7 = new com . allanbank . mongodb . client . IDENT_7 . METHOD_6 ( IDENT_6 ) ; final com . allanbank . mongodb . error . IDENT_9 error = ( ( com . allanbank . mongodb . error . IDENT_9 ) ( IDENT_7 . METHOD_7 ( IDENT_4 ) ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_6 ) ; } METHOD_7 ( com . allanbank . mongodb . client . message . METHOD_4 ) { com . allanbank . mongodb . IDENT_10 error = super . METHOD_7 ( IDENT_4 ) ; if ( error == null ) { final java . util . List < com . allanbank . mongodb . bson . Document > results = IDENT_4 . METHOD_8 ( ) ; if ( ( results . size ( ) ) != 1 ) { error = new com . allanbank . mongodb . error . METHOD_9 ( IDENT_4 , STRING_2 ) ; } } return error ; }
org . junit . Assert . assertNull ( error ) 