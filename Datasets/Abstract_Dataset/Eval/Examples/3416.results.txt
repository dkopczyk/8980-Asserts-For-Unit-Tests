METHOD_0 ( ) { final java . util . List < com . allanbank . mongodb . bson . Document > IDENT_0 = java . util . Arrays . asList ( com . allanbank . mongodb . bson . builder . IDENT_1 . start ( ) . METHOD_1 ( STRING_0 , 1 ) . METHOD_1 ( STRING_1 , INT_0 ) . build ( ) , com . allanbank . mongodb . bson . builder . IDENT_1 . start ( ) . build ( ) ) ; final com . allanbank . mongodb . client . message . IDENT_2 IDENT_3 = new com . allanbank . mongodb . client . message . METHOD_2 ( 0 , 0 , 0 , IDENT_0 , false , false , false , true ) ; final com . allanbank . mongodb . IDENT_4 < java . lang . Integer > IDENT_5 = METHOD_3 ( com . allanbank . mongodb . IDENT_4 . class ) ; replay ( IDENT_5 ) ; final com . allanbank . mongodb . client . IDENT_6 . IDENT_7 IDENT_6 = new com . allanbank . mongodb . client . IDENT_6 . METHOD_4 ( STRING_1 , IDENT_5 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_5 ) ; } METHOD_5 ( com . allanbank . mongodb . client . message . METHOD_2 ) { com . allanbank . mongodb . IDENT_8 error = super . METHOD_5 ( IDENT_3 ) ; if ( error == null ) { final java . util . List < com . allanbank . mongodb . bson . Document > results = IDENT_3 . METHOD_6 ( ) ; if ( ( results . size ( ) ) != 1 ) { error = new com . allanbank . mongodb . error . METHOD_7 ( IDENT_3 , STRING_2 ) ; } } return error ; }
org . junit . Assert . assertNull ( IDENT_6 . METHOD_5 ( IDENT_3 ) ) 