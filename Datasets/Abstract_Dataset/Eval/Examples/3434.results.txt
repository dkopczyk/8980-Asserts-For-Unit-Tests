METHOD_0 ( ) { final java . util . List < com . allanbank . mongodb . bson . Document > IDENT_0 = java . util . Arrays . asList ( com . allanbank . mongodb . bson . builder . IDENT_1 . start ( ) . add ( STRING_0 , 1 ) . build ( ) ) ; final com . allanbank . mongodb . IDENT_2 < com . allanbank . mongodb . IDENT_3 < com . allanbank . mongodb . builder . IDENT_4 > > IDENT_5 = org . easymock . EasyMock . METHOD_1 ( com . allanbank . mongodb . IDENT_2 . class ) ; final org . easymock . IDENT_6 < com . allanbank . mongodb . IDENT_3 < com . allanbank . mongodb . builder . IDENT_4 > > IDENT_7 = new org . easymock . IDENT_6 < com . allanbank . mongodb . IDENT_3 < com . allanbank . mongodb . builder . IDENT_4 > > ( ) ; IDENT_5 . METHOD_2 ( METHOD_3 ( METHOD_3 ) ) ; METHOD_4 ( ) ; replay ( IDENT_5 ) ; final com . allanbank . mongodb . client . METHOD_2 . IDENT_8 cb = new com . allanbank . mongodb . client . METHOD_2 . METHOD_5 ( IDENT_5 ) ; cb . METHOD_2 ( new com . allanbank . mongodb . client . IDENT_9 < com . allanbank . mongodb . bson . Document > ( IDENT_0 ) ) ; verify ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } getValue ( ) { final int state = com . allanbank . mongodb . client . IDENT_10 . IDENT_11 . METHOD_6 ( ) ; switch ( state ) { case com . allanbank . mongodb . client . IDENT_10 . IDENT_11 . IDENT_12 : if ( ( IDENT_13 ) != null ) { throw new java . util . concurrent . METHOD_7 ( IDENT_13 ) ; } return IDENT_14 ; case com . allanbank . mongodb . client . IDENT_10 . IDENT_11 . IDENT_15 : case com . allanbank . mongodb . client . IDENT_10 . IDENT_11 . IDENT_16 : final java . util . concurrent . IDENT_17 IDENT_18 = new java . util . concurrent . METHOD_8 ( STRING_1 ) ; IDENT_18 . METHOD_9 ( IDENT_13 ) ; throw IDENT_18 ; default : throw new java . lang . IllegalStateException ( ( STRING_2 + state ) ) ; } }
org . junit . Assert . assertThat ( METHOD_3 . getValue ( ) . toList ( ) , org . hamcrest . Matchers . is ( java . util . Collections . singletonList ( new com . allanbank . mongodb . builder . METHOD_10 ( IDENT_0 . get ( 0 ) ) ) ) ) 