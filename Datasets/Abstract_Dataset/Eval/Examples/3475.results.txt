METHOD_0 ( ) { final com . allanbank . mongodb . IDENT_0 config = new com . allanbank . mongodb . METHOD_1 ( ) ; final com . allanbank . mongodb . client . state . IDENT_1 cluster = new com . allanbank . mongodb . client . state . METHOD_2 ( config , com . allanbank . mongodb . client . IDENT_2 . IDENT_3 ) ; final com . allanbank . mongodb . client . state . IDENT_4 server = cluster . add ( STRING_0 ) ; final com . allanbank . mongodb . client . connection . IDENT_5 IDENT_6 = METHOD_3 ( com . allanbank . mongodb . client . connection . IDENT_5 . class ) ; final com . allanbank . mongodb . client . state . IDENT_7 IDENT_8 = METHOD_3 ( com . allanbank . mongodb . client . state . IDENT_7 . class ) ; final com . allanbank . mongodb . client . connection . proxy . IDENT_9 IDENT_10 = METHOD_3 ( com . allanbank . mongodb . client . connection . proxy . IDENT_9 . class ) ; final org . easymock . IDENT_11 < java . beans . IDENT_12 > listener = new org . easymock . IDENT_11 < java . beans . IDENT_12 > ( ) ; IDENT_6 . METHOD_4 ( METHOD_5 ( listener ) ) ; METHOD_6 ( ) ; replay ( IDENT_6 , IDENT_8 , IDENT_10 ) ; final com . allanbank . mongodb . client . connection . IDENT_13 . IDENT_14 conn = new com . allanbank . mongodb . client . connection . IDENT_13 . METHOD_7 ( IDENT_6 , server , cluster , IDENT_8 , IDENT_10 , config ) ; "<AssertPlaceHolder>" ; verify ( IDENT_6 , IDENT_8 , IDENT_10 ) ; METHOD_8 ( IDENT_6 , IDENT_8 , IDENT_10 ) ; IDENT_6 . METHOD_9 ( listener . getValue ( ) ) ; METHOD_6 ( ) ; IDENT_6 . close ( ) ; replay ( IDENT_6 , IDENT_8 , IDENT_10 ) ; conn . close ( ) ; verify ( IDENT_6 , IDENT_8 , IDENT_10 ) ; } connection ( com . allanbank . mongodb . client . state . IDENT_4 ) { com . allanbank . mongodb . client . connection . IDENT_13 . METHOD_7 . LOG . debug ( STRING_1 , server . METHOD_10 ( ) ) ; return super . connection ( server ) ; }
org . junit . Assert . assertThat ( conn . connection ( server ) , org . hamcrest . Matchers . is ( IDENT_6 ) ) 