METHOD_0 ( ) { com . IDENT_0 . tuple . IDENT_1 < java . lang . Long > pool = new com . IDENT_0 . tuple . METHOD_1 ( 10 , false , new com . IDENT_0 . tuple . IDENT_2 < java . lang . Long > ( ) { @ com . IDENT_0 . tuple . Override public com . IDENT_0 . tuple . Long [ ] METHOD_2 ( int size ) throws java . lang . Exception { java . lang . Long [ ] IDENT_3 = new java . lang . Long [ size ] ; for ( int i = 0 ; i < ( IDENT_3 . length ) ; i ++ ) { IDENT_3 [ i ] = 0L ; } return IDENT_3 ; } } , new com . IDENT_0 . tuple . IDENT_4 < java . lang . Long > ( ) { @ com . IDENT_0 . tuple . Override public void METHOD_3 ( java . lang . Long [ ] IDENT_3 ) { } } ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . Long n = pool . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } exception . expect ( com . IDENT_0 . tuple . IllegalStateException . class ) ; pool . METHOD_4 ( ) ; } METHOD_4 ( ) { java . util . IDENT_5 < T > IDENT_6 = pool . get ( ) ; METHOD_5 ( IDENT_6 ) ; T obj = IDENT_6 . METHOD_6 ( ) ; METHOD_7 ( obj ) ; return obj ; }
org . junit . Assert . assertEquals ( new java . lang . Long ( 0L ) , n ) 