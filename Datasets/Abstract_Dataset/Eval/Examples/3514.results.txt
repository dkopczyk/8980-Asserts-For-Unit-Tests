METHOD_0 ( ) { final com . allanbank . mongodb . bson . builder . IDENT_0 IDENT_1 = com . allanbank . mongodb . bson . builder . IDENT_2 . start ( ) ; IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 ) . add ( IDENT_3 . IDENT_4 , 0 ) . add ( IDENT_3 . IDENT_5 , INT_0 ) ; final com . allanbank . mongodb . bson . builder . IDENT_0 IDENT_6 = com . allanbank . mongodb . bson . builder . IDENT_2 . start ( ) ; IDENT_6 . METHOD_2 ( STRING_2 , new byte [ ] { } ) . add ( IDENT_3 . IDENT_7 , 0 ) ; final com . allanbank . mongodb . IDENT_8 IDENT_9 = METHOD_3 ( com . allanbank . mongodb . IDENT_8 . class ) ; final com . allanbank . mongodb . IDENT_10 IDENT_11 = METHOD_3 ( com . allanbank . mongodb . IDENT_10 . class ) ; final com . allanbank . mongodb . IDENT_10 IDENT_12 = METHOD_3 ( com . allanbank . mongodb . IDENT_10 . class ) ; final com . allanbank . mongodb . IDENT_13 < com . allanbank . mongodb . bson . Document > IDENT_14 = METHOD_3 ( com . allanbank . mongodb . IDENT_13 . class ) ; expect ( IDENT_9 . METHOD_4 ( ( STRING_3 + ( IDENT_3 . IDENT_15 ) ) ) ) . andReturn ( IDENT_11 ) ; expect ( IDENT_9 . METHOD_4 ( ( STRING_3 + ( IDENT_3 . IDENT_16 ) ) ) ) . andReturn ( IDENT_12 ) ; expect ( IDENT_11 . METHOD_5 ( METHOD_6 ( com . allanbank . mongodb . bson . IDENT_17 . class ) ) ) . andReturn ( IDENT_1 . build ( ) ) ; expect ( IDENT_12 . find ( METHOD_6 ( com . allanbank . mongodb . builder . IDENT_18 . class ) ) ) . andReturn ( IDENT_14 ) ; expect ( IDENT_14 . iterator ( ) ) . andReturn ( IDENT_14 ) ; expect ( IDENT_14 . hasNext ( ) ) . andReturn ( Boolean . IDENT_19 ) ; expect ( IDENT_14 . next ( ) ) . andReturn ( IDENT_6 . build ( ) ) ; expect ( IDENT_14 . hasNext ( ) ) . andReturn ( Boolean . IDENT_20 ) ; IDENT_14 . close ( ) ; METHOD_7 ( ) ; replay ( IDENT_9 , IDENT_11 , IDENT_12 , IDENT_14 ) ; final com . allanbank . mongodb . IDENT_21 . IDENT_3 fs = new com . allanbank . mongodb . IDENT_21 . METHOD_8 ( IDENT_9 ) ; final java . io . ByteArrayOutputStream IDENT_22 = new java . io . ByteArrayOutputStream ( 4 ) ; fs . read ( "foo" , IDENT_22 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_9 , IDENT_11 , IDENT_12 , IDENT_14 ) ; } read ( com . allanbank . mongodb . bson . element . IDENT_23 , java . io . IDENT_24 ) { final com . allanbank . mongodb . bson . Document IDENT_25 = IDENT_26 . METHOD_5 ( METHOD_9 ( com . allanbank . mongodb . IDENT_21 . METHOD_8 . IDENT_27 ) . equals ( id ) ) ; if ( IDENT_25 == null ) { throw new java . io . METHOD_10 ( id . toString ( ) ) ; } METHOD_11 ( IDENT_25 , IDENT_22 ) ; }
org . junit . Assert . assertArrayEquals ( new byte [ ] { } , IDENT_22 . toByteArray ( ) ) 