METHOD_0 ( ) { final com . allanbank . mongodb . bson . builder . IDENT_0 IDENT_1 = com . allanbank . mongodb . bson . builder . IDENT_2 . start ( ) ; IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 ) . add ( IDENT_3 . IDENT_4 , 0 ) . add ( IDENT_3 . IDENT_5 , INT_0 ) ; final com . allanbank . mongodb . IDENT_6 IDENT_7 = METHOD_2 ( com . allanbank . mongodb . IDENT_6 . class ) ; final com . allanbank . mongodb . IDENT_8 IDENT_9 = METHOD_2 ( com . allanbank . mongodb . IDENT_8 . class ) ; final com . allanbank . mongodb . IDENT_8 IDENT_10 = METHOD_2 ( com . allanbank . mongodb . IDENT_8 . class ) ; final com . allanbank . mongodb . IDENT_11 < com . allanbank . mongodb . bson . Document > IDENT_12 = METHOD_2 ( com . allanbank . mongodb . IDENT_11 . class ) ; expect ( IDENT_7 . METHOD_3 ( ( STRING_2 + ( IDENT_3 . IDENT_13 ) ) ) ) . andReturn ( IDENT_9 ) ; expect ( IDENT_7 . METHOD_3 ( ( STRING_2 + ( IDENT_3 . IDENT_14 ) ) ) ) . andReturn ( IDENT_10 ) ; expect ( IDENT_9 . METHOD_4 ( METHOD_5 ( com . allanbank . mongodb . bson . IDENT_15 . class ) ) ) . andReturn ( IDENT_1 . build ( ) ) ; expect ( IDENT_10 . find ( METHOD_5 ( com . allanbank . mongodb . builder . IDENT_16 . class ) ) ) . andReturn ( IDENT_12 ) ; expect ( IDENT_12 . iterator ( ) ) . andReturn ( IDENT_12 ) ; expect ( IDENT_12 . hasNext ( ) ) . andReturn ( Boolean . IDENT_17 ) ; IDENT_12 . close ( ) ; METHOD_6 ( ) ; replay ( IDENT_7 , IDENT_9 , IDENT_10 , IDENT_12 ) ; final com . allanbank . mongodb . IDENT_18 . IDENT_3 fs = new com . allanbank . mongodb . IDENT_18 . METHOD_7 ( IDENT_7 ) ; final java . io . ByteArrayOutputStream IDENT_19 = new java . io . ByteArrayOutputStream ( 4 ) ; fs . read ( "foo" , IDENT_19 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 , IDENT_9 , IDENT_10 , IDENT_12 ) ; } read ( com . allanbank . mongodb . bson . element . IDENT_20 , java . io . IDENT_21 ) { final com . allanbank . mongodb . bson . Document IDENT_22 = IDENT_23 . METHOD_4 ( METHOD_8 ( com . allanbank . mongodb . IDENT_18 . METHOD_7 . IDENT_24 ) . equals ( id ) ) ; if ( IDENT_22 == null ) { throw new java . io . METHOD_9 ( id . toString ( ) ) ; } METHOD_10 ( IDENT_22 , IDENT_19 ) ; }
org . junit . Assert . assertArrayEquals ( new byte [ ] { } , IDENT_19 . toByteArray ( ) ) 