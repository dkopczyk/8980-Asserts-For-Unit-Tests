METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . util . Collection < com . sun . IDENT_0 . util . IDENT_1 > IDENT_2 = java . util . Arrays . asList ( new com . sun . IDENT_0 . util . METHOD_1 ( 1 , 6 ) , new com . sun . IDENT_0 . util . METHOD_1 ( 6 , 10 ) , new com . sun . IDENT_0 . util . METHOD_1 ( 8 , 12 ) ) ; java . util . List < com . sun . IDENT_0 . util . METHOD_1 > expResult = java . util . Arrays . asList ( new com . sun . IDENT_0 . util . METHOD_1 ( 1 , 12 ) ) ; java . util . List < com . sun . IDENT_0 . util . METHOD_1 > result = com . sun . IDENT_0 . util . METHOD_1 . METHOD_2 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( com . sun . IDENT_0 . util . Collection ) { com . sun . IDENT_0 . util . Set < com . sun . IDENT_0 . util . METHOD_1 > IDENT_3 = new com . sun . IDENT_0 . util . METHOD_3 ( ) ; IDENT_3 . addAll ( IDENT_2 ) ; com . sun . IDENT_0 . util . Iterator < com . sun . IDENT_0 . util . METHOD_1 > IDENT_4 = IDENT_3 . iterator ( ) ; com . sun . IDENT_0 . util . METHOD_1 IDENT_5 = null ; while ( IDENT_4 . hasNext ( ) ) { if ( IDENT_5 == null ) { IDENT_5 = IDENT_4 . next ( ) ; continue ; } com . sun . IDENT_0 . util . METHOD_1 IDENT_6 = IDENT_4 . next ( ) ; if ( ( IDENT_6 . a ) <= ( ( IDENT_5 . b ) != ( Integer . MAX_VALUE ) ? ( IDENT_5 . b ) + 1 : Integer . MAX_VALUE ) ) { IDENT_5 . b = IDENT_6 . b ; IDENT_4 . remove ( ) ; } else { IDENT_5 = IDENT_6 ; } } return new com . sun . IDENT_0 . util . ArrayList ( IDENT_3 ) ; }
org . junit . Assert . assertEquals ( expResult , result ) 