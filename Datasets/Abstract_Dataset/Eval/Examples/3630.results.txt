METHOD_0 ( ) { java . lang . String IDENT_0 = METHOD_1 ( STRING_0 , IDENT_1 . METHOD_2 ( ) ) ; try ( java . io . IDENT_2 c = new alluxio . METHOD_3 ( com . google . common . collect . ImmutableMap . of ( IDENT_3 . IDENT_4 , IDENT_0 ) , IDENT_5 ) . METHOD_4 ( ) ) { alluxio . IDENT_6 . IDENT_7 IDENT_8 = alluxio . network . IDENT_9 . create ( IDENT_5 ) ; alluxio . IDENT_6 . IDENT_7 expected = new alluxio . IDENT_6 . METHOD_5 ( java . util . Arrays . asList ( new alluxio . IDENT_6 . METHOD_5 . METHOD_6 ( STRING_1 , STRING_2 ) , new alluxio . IDENT_6 . METHOD_5 . METHOD_6 ( STRING_3 , STRING_4 ) ) ) ; "<AssertPlaceHolder>" ; } } create ( alluxio . conf . IDENT_10 ) { alluxio . IDENT_6 . METHOD_5 IDENT_11 = alluxio . network . IDENT_9 . METHOD_7 ( conf ) ; java . util . List < alluxio . IDENT_6 . METHOD_5 . METHOD_6 > IDENT_12 = new java . util . ArrayList ( ) ; java . util . List < java . lang . String > IDENT_13 = conf . METHOD_8 ( IDENT_3 . IDENT_14 , STRING_5 ) ; for ( int i = 0 ; i < ( IDENT_13 . size ( ) ) ; i ++ ) { java . lang . String IDENT_15 = IDENT_13 . get ( i ) ; java . lang . String value = null ; if ( IDENT_11 != null ) { alluxio . IDENT_6 . METHOD_5 . METHOD_6 IDENT_16 = IDENT_11 . METHOD_9 ( i ) ; com . google . common . base . IDENT_17 . METHOD_10 ( IDENT_16 . METHOD_11 ( ) . equals ( IDENT_15 ) ) ; value = IDENT_16 . getValue ( ) ; } if ( conf . METHOD_12 ( IDENT_18 . IDENT_19 . format ( IDENT_15 ) ) ) { value = conf . get ( IDENT_18 . IDENT_19 . format ( IDENT_15 ) ) ; } IDENT_12 . add ( new alluxio . IDENT_6 . METHOD_5 . METHOD_6 ( IDENT_15 , value ) ) ; } if ( ( ( ( IDENT_12 . size ( ) ) > 0 ) && ( IDENT_12 . get ( 0 ) . METHOD_11 ( ) . equals ( Constants . IDENT_20 ) ) ) && ( ( IDENT_12 . get ( 0 ) . getValue ( ) ) == null ) ) { java . lang . String name = alluxio . util . network . IDENT_21 . METHOD_13 ( conf ) ; IDENT_12 . set ( 0 , new alluxio . IDENT_6 . METHOD_5 . METHOD_6 ( alluxio . Constants . IDENT_20 , name ) ) ; } return new alluxio . IDENT_6 . METHOD_5 ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_8 ) 