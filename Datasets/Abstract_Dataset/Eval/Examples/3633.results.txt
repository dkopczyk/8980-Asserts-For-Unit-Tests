METHOD_0 ( ) { for ( int i = 0 ; i < 100 ; i ++ ) { alluxio . IDENT_0 . IDENT_1 IDENT_0 = new alluxio . IDENT_0 . METHOD_1 ( ) ; alluxio . time . IDENT_2 IDENT_3 = new alluxio . time . METHOD_2 ( ) ; long IDENT_4 = INT_0 ; long IDENT_5 = 20 ; alluxio . IDENT_6 . IDENT_7 IDENT_6 = alluxio . IDENT_6 . IDENT_7 . builder ( ) . METHOD_3 ( new alluxio . time . METHOD_4 ( IDENT_0 , IDENT_3 ) ) . METHOD_5 ( java . time . IDENT_8 . METHOD_6 ( IDENT_4 ) ) . METHOD_7 ( java . time . IDENT_8 . METHOD_6 ( 10 ) ) . METHOD_8 ( java . time . IDENT_8 . METHOD_6 ( 100 ) ) . build ( ) ; java . lang . Thread IDENT_9 = new java . lang . Thread ( ( ) -> { while ( IDENT_6 . METHOD_9 ( ) ) { IDENT_0 . METHOD_10 ( IDENT_5 ) ; } } ) ; IDENT_9 . METHOD_11 ( true ) ; IDENT_9 . setName ( STRING_0 ) ; IDENT_9 . start ( ) ; long IDENT_10 = IDENT_4 - IDENT_5 ; java . util . Iterator < java . lang . Long > IDENT_11 = java . util . Arrays . asList ( INT_1 , INT_2 , INT_3 , INT_4 , INT_5 ) . iterator ( ) ; long IDENT_12 = IDENT_11 . next ( ) ; while ( IDENT_10 > 0 ) { java . time . IDENT_8 IDENT_13 = IDENT_3 . METHOD_12 ( ) ; METHOD_13 ( IDENT_12 , ( IDENT_12 * FLOAT_0 ) , IDENT_13 ) ; IDENT_10 OP_0 ( IDENT_13 . METHOD_14 ( ) ) + IDENT_5 ; IDENT_0 . METHOD_15 ( IDENT_13 ) ; IDENT_3 . METHOD_16 ( ) ; if ( IDENT_11 . hasNext ( ) ) { IDENT_12 = IDENT_11 . next ( ) ; } if ( IDENT_10 < 100 ) { IDENT_12 = IDENT_10 ; } } IDENT_9 . METHOD_17 ( ) ; IDENT_9 . join ( ( 10 * ( alluxio . Constants . IDENT_14 ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_9 ( ) { if ( ( IDENT_15 ) <= ( IDENT_16 ) ) { ( IDENT_15 ) ++ ; return true ; } return false ; }
org . junit . Assert . assertFalse ( IDENT_6 . METHOD_9 ( ) ) 