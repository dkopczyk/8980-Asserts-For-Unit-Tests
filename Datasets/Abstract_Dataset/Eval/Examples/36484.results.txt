METHOD_0 ( ) { br . com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new br . com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; java . lang . String IDENT_6 = IDENT_7 . METHOD_2 ( ) . METHOD_3 ( IDENT_7 ) ; java . lang . String IDENT_8 = STRING_0 ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String , br . com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 ) { if ( ( IDENT_6 . length ( ) ) != INT_0 ) { throw new java . lang . IllegalArgumentException ( ( STRING_1 + STRING_2 ) ) ; } br . com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_10 IDENT_11 = IDENT_12 . METHOD_5 ( ) ; java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( IDENT_6 . substring ( 0 , 3 ) ) ; builder . append ( IDENT_6 . substring ( 3 , 4 ) ) ; builder . append ( IDENT_6 . substring ( INT_1 , INT_2 ) ) ; builder . append ( IDENT_11 . METHOD_6 ( builder . toString ( ) ) ) ; builder . append ( IDENT_6 . substring ( INT_2 , INT_3 ) ) ; builder . append ( IDENT_11 . METHOD_6 ( builder . substring ( 10 , 20 ) ) ) ; builder . append ( IDENT_6 . substring ( INT_3 ) ) ; builder . append ( IDENT_11 . METHOD_6 ( builder . substring ( INT_4 , INT_5 ) ) ) ; builder . append ( IDENT_6 . substring ( 4 , 5 ) ) ; builder . append ( IDENT_6 . substring ( 5 , 9 ) ) ; builder . append ( IDENT_6 . substring ( 9 , INT_1 ) ) ; return METHOD_7 ( builder ) . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_5 . METHOD_4 ( IDENT_6 , this . IDENT_12 ) ) 