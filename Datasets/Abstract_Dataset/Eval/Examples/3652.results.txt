METHOD_0 ( ) { int IDENT_0 = 5 ; final java . util . concurrent . atomic . IDENT_1 id = new java . util . concurrent . atomic . METHOD_1 ( ) ; java . util . List < java . util . concurrent . IDENT_2 < java . lang . IDENT_3 > > IDENT_4 = new java . util . ArrayList ( ) ; final java . lang . Exception IDENT_5 = new java . lang . Exception ( STRING_0 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_4 . add ( new java . util . concurrent . IDENT_2 < java . lang . IDENT_3 > ( ) { @ alluxio . util . Override public alluxio . util . IDENT_3 call ( ) throws alluxio . util . Exception { int IDENT_6 = id . METHOD_2 ( ) ; if ( IDENT_6 == 3 ) { throw IDENT_5 ; } return null ; } } ) ; } try { alluxio . util . IDENT_7 . METHOD_3 ( IDENT_4 , ( 2 * ( alluxio . Constants . IDENT_8 ) ) ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . util . concurrent . IDENT_9 e ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( ) { return IDENT_10 ; }
org . junit . Assert . assertSame ( IDENT_5 , e . METHOD_4 ( ) ) 