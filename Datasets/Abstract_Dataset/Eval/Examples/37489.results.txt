METHOD_0 ( ) { IDENT_0 . METHOD_1 ( STRING_0 , STRING_1 , STRING_2 ) ; METHOD_2 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_3 , 0 , 5 , 10 ) ; METHOD_2 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_3 , ( - 6 ) , 5 , 10 ) ; METHOD_2 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_4 , ( - 6 ) , null , 10 ) ; METHOD_2 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_5 , ( - 6 ) , 5 , 10 ) ; java . util . List < org . camunda . bpm . engine . IDENT_1 . IDENT_6 > IDENT_7 = IDENT_8 . METHOD_3 ( ) . list ( ) ; java . lang . String IDENT_9 = IDENT_10 . METHOD_4 ( ) . METHOD_5 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_4 ) . METHOD_6 ( ) . getId ( ) ; org . camunda . bpm . engine . IDENT_1 . IDENT_6 IDENT_11 = IDENT_8 . METHOD_3 ( ) . METHOD_7 ( IDENT_9 ) . METHOD_6 ( ) ; org . camunda . bpm . engine . IDENT_1 . IDENT_6 IDENT_12 = IDENT_8 . METHOD_3 ( ) . METHOD_8 ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_5 ) . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; for ( org . camunda . bpm . engine . IDENT_1 . IDENT_6 result : IDENT_7 ) { if ( result . METHOD_9 ( ) . equals ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_3 ) ) { METHOD_10 ( result , 10 , 20 ) ; } else if ( result . METHOD_9 ( ) . equals ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_4 ) ) { METHOD_10 ( result , 0 , 10 ) ; } else if ( result . METHOD_9 ( ) . equals ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_5 ) ) { METHOD_10 ( result , 10 , 10 ) ; } else if ( result . METHOD_9 ( ) . equals ( org . camunda . bpm . engine . test . IDENT_1 . IDENT_2 . IDENT_13 ) ) { METHOD_10 ( result , 0 , 0 ) ; } } METHOD_10 ( IDENT_11 , 0 , 10 ) ; METHOD_10 ( IDENT_12 , 10 , 10 ) ; } size ( ) { return ( ( ( IDENT_14 . size ( ) ) + ( IDENT_15 . size ( ) ) ) + ( IDENT_16 . size ( ) ) ) + ( IDENT_17 . size ( ) ) ; }
org . junit . Assert . assertEquals ( 4 , IDENT_7 . size ( ) ) 