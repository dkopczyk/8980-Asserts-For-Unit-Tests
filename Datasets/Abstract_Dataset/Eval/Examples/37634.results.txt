METHOD_0 ( ) { IDENT_0 = org . jboss . IDENT_1 . mock . IDENT_2 . create ( STRING_0 , STRING_1 ) ; when ( IDENT_3 . METHOD_1 ( ) ) . thenReturn ( IDENT_0 . METHOD_2 ( ) ) ; interceptor . filter ( IDENT_3 ) ; org . IDENT_4 . common . IDENT_5 . IDENT_6 p = org . jboss . IDENT_1 . spi . IDENT_7 . METHOD_3 ( org . IDENT_4 . common . IDENT_5 . IDENT_6 . class ) ; "<AssertPlaceHolder>" ; } filter ( javax . ws . rs . container . IDENT_8 ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_9 = IDENT_10 . METHOD_1 ( ) . METHOD_4 ( ) ; boolean IDENT_11 = IDENT_9 . containsKey ( STRING_2 ) ; boolean IDENT_12 = IDENT_9 . containsKey ( STRING_3 ) ; org . IDENT_4 . common . jackson . IDENT_13 IDENT_14 = new org . IDENT_4 . common . jackson . METHOD_5 ( ) ; if ( IDENT_9 . containsKey ( STRING_4 ) ) { java . util . List < java . lang . String > values = IDENT_9 . get ( STRING_4 ) ; IDENT_14 . METHOD_6 ( STRING_5 . equalsIgnoreCase ( values . get ( 0 ) ) ) ; } else { IDENT_14 . METHOD_6 ( ( IDENT_12 && ( ! IDENT_11 ) ) ) ; } if ( IDENT_12 ) { for ( java . lang . String path : IDENT_9 . get ( STRING_3 ) ) { IDENT_14 . METHOD_7 ( path ) ; } } if ( IDENT_11 ) { for ( java . lang . String path : IDENT_9 . get ( STRING_2 ) ) { IDENT_14 . METHOD_8 ( path ) ; } } if ( IDENT_12 || IDENT_11 ) { org . jboss . IDENT_1 . spi . IDENT_7 . METHOD_9 ( org . IDENT_4 . common . jackson . METHOD_5 . class , IDENT_14 ) ; } }
org . junit . Assert . assertNull ( p ) 