METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . nio . file . IDENT_1 . METHOD_1 ( IDENT_2 . METHOD_2 ( ) ) ; int from = ( IDENT_0 . indexOf ( STRING_0 ) ) + 1 ; int to = IDENT_0 . indexOf ( STRING_1 ) ; java . util . List < java . lang . String > IDENT_3 = IDENT_0 . stream ( ) . METHOD_3 ( from ) . METHOD_4 ( ( to - from ) ) . collect ( java . util . stream . IDENT_4 . toList ( ) ) ; java . io . ByteArrayOutputStream IDENT_5 = new java . io . ByteArrayOutputStream ( ) ; for ( java . lang . String line : IDENT_3 ) { IDENT_5 . write ( line . getBytes ( ) ) ; } byte [ ] IDENT_6 = IDENT_5 . toByteArray ( ) ; java . util . Set < java . math . BigInteger > IDENT_7 = new java . util . HashSet ( ) ; try ( java . io . InputStream IDENT_8 = new org . apache . commons . codec . IDENT_9 . METHOD_5 ( new java . io . ByteArrayInputStream ( IDENT_6 ) ) ) { java . security . IDENT_10 . IDENT_11 IDENT_12 = java . security . IDENT_10 . IDENT_11 . getInstance ( STRING_2 ) ; java . security . IDENT_10 . IDENT_13 IDENT_14 = ( ( java . security . IDENT_10 . IDENT_13 ) ( IDENT_12 . METHOD_6 ( IDENT_8 ) ) ) ; for ( java . security . IDENT_10 . IDENT_15 entry : IDENT_14 . METHOD_7 ( ) ) { IDENT_7 . add ( entry . METHOD_8 ( ) ) ; } } try ( org . IDENT_16 . util . IDENT_17 stream = IDENT_18 . newInstance ( IDENT_19 ) ) { java . util . Set < java . math . BigInteger > IDENT_20 = new java . util . HashSet ( ) ; while ( stream . hasNext ( ) ) { IDENT_20 . add ( stream . next ( ) . METHOD_8 ( ) ) ; } "<AssertPlaceHolder>" ; } } METHOD_8 ( ) { return IDENT_21 . METHOD_8 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_20 ) 