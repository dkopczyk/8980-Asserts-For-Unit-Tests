METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = METHOD_1 ( STRING_0 ) ; final java . util . List < com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 > IDENT_8 = IDENT_6 . METHOD_0 ( ) ; final java . util . List < com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 > expected = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 > ( ) ; expected . add ( new com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( STRING_1 , STRING_2 , 1 ) ) ; expected . add ( new com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( STRING_3 , STRING_4 , 2 ) ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( ) { final java . util . List < com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 > result = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 > ( ) ; final java . util . List IDENT_9 = METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; for ( final java . util . IDENT_10 IDENT_11 = IDENT_9 . METHOD_6 ( ) ; IDENT_11 . hasNext ( ) ; ) { final org . apache . IDENT_4 . IDENT_12 . IDENT_13 page = ( ( org . apache . IDENT_4 . IDENT_12 . IDENT_13 ) ( IDENT_11 . next ( ) ) ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_7 ( result , page , IDENT_11 . METHOD_8 ( ) ) ; } return result ; }
org . junit . Assert . assertEquals ( expected , IDENT_8 ) 