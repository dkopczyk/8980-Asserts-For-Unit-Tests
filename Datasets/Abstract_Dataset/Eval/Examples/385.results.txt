METHOD_0 ( ) { org . IDENT_0 . IDENT_1 connection = null ; try { connection = IDENT_0 . METHOD_1 ( ) ; java . lang . String IDENT_2 = STRING_0 ; connection . METHOD_2 ( IDENT_2 ) . METHOD_3 ( ) ; java . util . UUID IDENT_3 = java . util . UUID . METHOD_4 ( ) ; java . lang . String IDENT_4 = STRING_1 ; connection . METHOD_2 ( IDENT_4 ) . METHOD_5 ( STRING_2 , IDENT_3 ) . METHOD_3 ( ) ; java . lang . String IDENT_5 = STRING_3 ; java . util . UUID IDENT_6 = connection . METHOD_2 ( IDENT_5 ) . METHOD_6 ( java . util . UUID . class ) ; "<AssertPlaceHolder>" ; } finally { if ( connection != null ) { connection . METHOD_7 ( ) ; } } } METHOD_6 ( java . lang . Class ) { try { org . IDENT_0 . IDENT_7 . IDENT_8 < IDENT_9 > converter ; converter = METHOD_8 ( IDENT_10 , METHOD_9 ( ) . METHOD_10 ( IDENT_10 ) ) ; METHOD_11 ( ) ; return METHOD_6 ( converter ) ; } catch ( org . IDENT_0 . IDENT_7 . IDENT_11 e ) { throw new org . IDENT_0 . METHOD_12 ( ( STRING_4 + IDENT_10 ) , e ) ; } }
org . junit . Assert . assertThat ( IDENT_6 , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( IDENT_3 ) ) ) 