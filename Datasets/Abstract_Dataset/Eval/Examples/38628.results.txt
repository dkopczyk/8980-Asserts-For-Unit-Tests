METHOD_0 ( ) { java . util . Set < java . lang . String > services = com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ; co . IDENT_1 . IDENT_2 . spec . template . IDENT_3 template = co . IDENT_1 . IDENT_2 . spec . template . IDENT_3 . builder ( ) . setName ( STRING_3 ) . METHOD_1 ( STRING_4 ) . METHOD_2 ( co . IDENT_1 . IDENT_2 . spec . template . IDENT_4 . builder ( ) . METHOD_3 ( services ) . METHOD_4 ( STRING_5 ) . build ( ) ) . METHOD_5 ( co . IDENT_1 . IDENT_2 . spec . template . IDENT_5 . builder ( ) . METHOD_3 ( services ) . build ( ) ) . METHOD_6 ( new co . IDENT_1 . IDENT_2 . spec . template . METHOD_7 ( com . google . common . collect . ImmutableMap . < java . lang . String , co . IDENT_1 . IDENT_2 . spec . template . IDENT_6 > of ( STRING_0 , new co . IDENT_1 . IDENT_2 . spec . template . METHOD_8 ( null , null , 1 , 1 ) ) , new co . IDENT_1 . IDENT_2 . spec . template . METHOD_9 ( com . google . common . collect . IDENT_0 . < java . util . Set < java . lang . String > > of ( com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ) , com . google . common . collect . IDENT_0 . < java . util . Set < java . lang . String > > of ( ) ) , co . IDENT_1 . IDENT_2 . spec . template . IDENT_7 . IDENT_8 ) ) . build ( ) ; java . util . List < co . IDENT_1 . IDENT_2 . layout . IDENT_9 > IDENT_10 = com . google . common . collect . ImmutableList . of ( new co . IDENT_1 . IDENT_2 . layout . METHOD_10 ( STRING_6 , STRING_7 , com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ) ) ; co . IDENT_1 . IDENT_2 . layout . IDENT_11 IDENT_12 = new co . IDENT_1 . IDENT_2 . layout . METHOD_11 ( IDENT_10 , template , services , 2 ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( ) { int [ ] IDENT_13 = METHOD_13 ( ) ; if ( IDENT_13 == null ) { return null ; } co . IDENT_1 . IDENT_2 . layout . IDENT_14 IDENT_15 = new co . IDENT_1 . IDENT_2 . layout . METHOD_14 ( IDENT_13 , METHOD_15 ( ) ) ; int [ ] IDENT_16 = IDENT_13 ; while ( IDENT_15 . hasNext ( ) ) { int [ ] IDENT_17 = IDENT_15 . next ( ) ; for ( int i = 0 ; i < ( IDENT_17 . length ) ; i ++ ) { int IDENT_18 = ( IDENT_17 [ i ] ) - ( IDENT_16 [ i ] ) ; METHOD_16 ( i , IDENT_18 ) ; } if ( METHOD_17 ( IDENT_19 ) ) { return IDENT_17 ; } IDENT_16 = IDENT_17 ; } return null ; }
org . junit . Assert . assertNull ( IDENT_12 . METHOD_12 ( ) ) 