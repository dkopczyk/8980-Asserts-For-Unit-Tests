METHOD_0 ( ) { java . util . Set < java . lang . String > services = com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ; co . IDENT_1 . IDENT_2 . spec . template . IDENT_3 template = co . IDENT_1 . IDENT_2 . spec . template . IDENT_3 . builder ( ) . setName ( STRING_3 ) . METHOD_1 ( STRING_4 ) . METHOD_2 ( co . IDENT_1 . IDENT_2 . spec . template . IDENT_4 . builder ( ) . METHOD_3 ( services ) . METHOD_4 ( STRING_5 ) . build ( ) ) . METHOD_5 ( co . IDENT_1 . IDENT_2 . spec . template . IDENT_5 . builder ( ) . METHOD_3 ( services ) . build ( ) ) . METHOD_6 ( new co . IDENT_1 . IDENT_2 . spec . template . METHOD_7 ( com . google . common . collect . ImmutableMap . < java . lang . String , co . IDENT_1 . IDENT_2 . spec . template . IDENT_6 > of ( STRING_0 , new co . IDENT_1 . IDENT_2 . spec . template . METHOD_8 ( null , null , 1 , 1 ) ) , new co . IDENT_1 . IDENT_2 . spec . template . METHOD_9 ( com . google . common . collect . IDENT_0 . < java . util . Set < java . lang . String > > of ( com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ) , com . google . common . collect . IDENT_0 . < java . util . Set < java . lang . String > > of ( ) ) , co . IDENT_1 . IDENT_2 . spec . template . IDENT_7 . IDENT_8 ) ) . build ( ) ; java . util . List < co . IDENT_1 . IDENT_2 . layout . IDENT_9 > expected = com . google . common . collect . ImmutableList . of ( new co . IDENT_1 . IDENT_2 . layout . METHOD_10 ( STRING_6 , STRING_7 , com . google . common . collect . IDENT_0 . of ( STRING_0 , STRING_1 , STRING_2 ) ) ) ; co . IDENT_1 . IDENT_2 . layout . IDENT_10 IDENT_11 = new co . IDENT_1 . IDENT_2 . layout . METHOD_11 ( template , services , com . google . common . collect . IDENT_0 . < java . lang . String > of ( STRING_6 ) , com . google . common . collect . IDENT_0 . < java . lang . String > of ( STRING_7 ) ) ; java . util . List < co . IDENT_1 . IDENT_2 . layout . METHOD_10 > actual = IDENT_11 . METHOD_12 ( ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( ) { long start = java . lang . System . METHOD_13 ( ) ; java . util . Set < java . lang . String > IDENT_12 = METHOD_14 ( ) ; java . util . Set < java . lang . String > IDENT_13 = com . google . common . collect . IDENT_14 . METHOD_15 ( IDENT_15 , IDENT_12 ) ; java . util . Set < java . util . Set < java . lang . String > > IDENT_16 = METHOD_16 ( com . google . common . collect . IDENT_14 . METHOD_17 ( IDENT_13 ) ) ; if ( ! ( IDENT_12 . isEmpty ( ) ) ) { for ( java . util . Set < java . lang . String > IDENT_17 : IDENT_16 ) { IDENT_17 . addAll ( IDENT_12 ) ; } IDENT_16 . add ( IDENT_12 ) ; } long IDENT_18 = ( ( java . lang . System . METHOD_13 ( ) ) - start ) / INT_0 ; co . IDENT_1 . IDENT_2 . layout . METHOD_11 . LOG . debug ( STRING_8 , IDENT_18 , IDENT_16 . size ( ) ) ; start = java . lang . System . METHOD_13 ( ) ; java . util . Set < co . IDENT_1 . IDENT_2 . layout . METHOD_10 > IDENT_19 = METHOD_18 ( IDENT_16 ) ; IDENT_18 = ( ( java . lang . System . METHOD_13 ( ) ) - start ) / INT_0 ; co . IDENT_1 . IDENT_2 . layout . METHOD_11 . LOG . debug ( STRING_9 , IDENT_18 , IDENT_19 . size ( ) ) ; start = java . lang . System . METHOD_13 ( ) ; java . util . List < co . IDENT_1 . IDENT_2 . layout . METHOD_10 > IDENT_20 = co . IDENT_1 . IDENT_2 . layout . METHOD_11 . METHOD_19 ( IDENT_19 , null , null ) ; IDENT_18 = ( ( java . lang . System . METHOD_13 ( ) ) - start ) / INT_0 ; co . IDENT_1 . IDENT_2 . layout . METHOD_11 . LOG . debug ( STRING_10 , IDENT_18 , IDENT_20 . size ( ) ) ; return IDENT_20 ; }
org . junit . Assert . assertEquals ( expected , actual ) 