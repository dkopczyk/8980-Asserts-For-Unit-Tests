METHOD_0 ( ) { io . cdap . plugin . IDENT_0 . IDENT_1 config = new io . cdap . plugin . IDENT_0 . METHOD_1 ( 5 ) ; io . cdap . cdap . IDENT_2 . api . IDENT_3 < io . cdap . cdap . api . data . format . IDENT_4 , io . cdap . cdap . api . data . format . IDENT_4 > transform = new io . cdap . plugin . METHOD_2 ( config ) ; io . cdap . cdap . IDENT_2 . mock . common . IDENT_5 IDENT_6 = new io . cdap . cdap . IDENT_2 . mock . common . METHOD_3 ( io . cdap . plugin . IDENT_7 . IDENT_8 ) ; transform . METHOD_4 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { java . util . List < io . cdap . cdap . api . data . schema . Schema . Field > fields = new java . util . ArrayList ( ) ; java . lang . String [ ] IDENT_9 = IDENT_10 . split ( STRING_0 ) ; for ( java . lang . String mapping : IDENT_9 ) { java . lang . String [ ] params = mapping . split ( STRING_1 ) ; java . lang . String IDENT_11 = params [ 0 ] . trim ( ) ; if ( com . google . common . base . IDENT_12 . METHOD_6 ( IDENT_11 ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } else if ( ( ( params . length ) < 2 ) || ( com . google . common . base . IDENT_12 . METHOD_6 ( params [ 1 ] ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + IDENT_11 ) ) ; } io . cdap . cdap . api . data . schema . Schema . Field field = Schema . Field . of ( IDENT_11 , io . cdap . cdap . api . data . schema . Schema . METHOD_7 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . valueOf ( params [ 1 ] . trim ( ) . METHOD_8 ( ) ) ) ) ) ; if ( fields . contains ( field ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_4 , IDENT_11 , IDENT_11 ) ) ; } else { fields . add ( field ) ; } } return io . cdap . cdap . api . data . schema . Schema . METHOD_9 ( STRING_5 , fields ) ; }
org . junit . Assert . assertEquals ( io . cdap . plugin . IDENT_7 . IDENT_8 , IDENT_6 . METHOD_5 ( ) ) 