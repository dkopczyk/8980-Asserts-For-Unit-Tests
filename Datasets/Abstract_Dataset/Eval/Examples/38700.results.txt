METHOD_0 ( ) { io . cdap . cdap . api . data . schema . Schema IDENT_0 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_0 , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_4 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_5 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_6 , io . cdap . cdap . api . data . schema . Schema . METHOD_2 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) ) ) ; io . cdap . plugin . IDENT_7 . IDENT_8 config = new io . cdap . plugin . IDENT_7 . METHOD_3 ( STRING_1 , STRING_2 ) ; io . cdap . cdap . IDENT_9 . mock . common . IDENT_10 IDENT_11 = new io . cdap . cdap . IDENT_9 . mock . common . METHOD_4 ( IDENT_0 ) ; new io . cdap . plugin . METHOD_5 ( config ) . METHOD_6 ( IDENT_11 ) ; io . cdap . cdap . api . data . schema . Schema IDENT_12 = IDENT_11 . METHOD_7 ( ) ; io . cdap . cdap . api . data . schema . Schema IDENT_13 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_3 , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_4 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_5 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) , Schema . Field . of ( io . cdap . plugin . IDENT_1 . IDENT_14 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { java . util . List < io . cdap . cdap . api . data . schema . Schema . Field > fields = new java . util . ArrayList ( ) ; java . lang . String [ ] IDENT_15 = IDENT_16 . split ( STRING_4 ) ; for ( java . lang . String mapping : IDENT_15 ) { java . lang . String [ ] params = mapping . split ( STRING_5 ) ; java . lang . String IDENT_17 = params [ 0 ] . trim ( ) ; if ( com . google . common . base . IDENT_18 . METHOD_8 ( IDENT_17 ) ) { throw new java . lang . IllegalArgumentException ( STRING_6 ) ; } else if ( ( ( params . length ) < 2 ) || ( com . google . common . base . IDENT_18 . METHOD_8 ( params [ 1 ] ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_7 + IDENT_17 ) ) ; } io . cdap . cdap . api . data . schema . Schema . Field field = Schema . Field . of ( IDENT_17 , io . cdap . cdap . api . data . schema . Schema . METHOD_2 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . valueOf ( params [ 1 ] . trim ( ) . METHOD_9 ( ) ) ) ) ) ; if ( fields . contains ( field ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_8 , IDENT_17 , IDENT_17 ) ) ; } else { fields . add ( field ) ; } } return io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_9 , fields ) ; }
org . junit . Assert . assertEquals ( IDENT_13 , IDENT_12 ) 