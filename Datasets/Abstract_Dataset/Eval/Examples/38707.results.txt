METHOD_0 ( ) { byte [ ] IDENT_0 = STRING_0 . getBytes ( IDENT_1 . UTF_8 ) ; final co . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new co . IDENT_2 . IDENT_3 . METHOD_1 ( new co . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_2 ( co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_8 . IDENT_9 ) , co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_10 . create ( IDENT_0 ) ) ; IDENT_5 . start ( ) ; final co . IDENT_2 . IDENT_3 . METHOD_1 IDENT_11 = new co . IDENT_2 . IDENT_3 . METHOD_1 ( new co . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_2 ( co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_8 . IDENT_9 ) , co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_10 . create ( IDENT_0 ) ) ; IDENT_11 . start ( ) ; co . IDENT_2 . IDENT_3 . METHOD_1 IDENT_12 = new co . IDENT_2 . IDENT_3 . METHOD_1 ( new co . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_2 ( co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_8 . IDENT_9 ) , co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_10 . create ( IDENT_0 ) ) ; IDENT_12 . start ( ) ; final java . util . concurrent . atomic . IDENT_13 IDENT_14 = new java . util . concurrent . atomic . METHOD_3 ( ) ; co . IDENT_2 . IDENT_3 . IDENT_15 IDENT_16 = new co . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_2 ( co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_8 . IDENT_9 ) { @ co . IDENT_2 . IDENT_3 . IDENT_7 . Override public co . IDENT_2 . IDENT_3 . IDENT_17 METHOD_4 ( ) { co . IDENT_2 . IDENT_3 . IDENT_17 transaction = super . METHOD_4 ( ) ; try { switch ( IDENT_14 . METHOD_5 ( ) ) { case 0 : IDENT_5 . METHOD_6 ( ) ; break ; case 1 : IDENT_11 . METHOD_6 ( ) ; break ; case 2 : break ; default : throw new java . lang . IllegalStateException ( STRING_1 ) ; } } catch ( co . IDENT_2 . IDENT_3 . IDENT_18 e ) { com . google . common . base . IDENT_19 . METHOD_7 ( e ) ; } return transaction ; } } ; co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_20 IDENT_21 = co . IDENT_2 . IDENT_3 . IDENT_7 . IDENT_10 . METHOD_8 ( IDENT_0 , IDENT_16 ) ; IDENT_21 . METHOD_9 ( 1000 , TimeUnit . IDENT_22 ) ; "<AssertPlaceHolder>" ; try { IDENT_12 . METHOD_6 ( ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( co . IDENT_2 . IDENT_3 . IDENT_23 e ) { IDENT_12 . METHOD_10 ( ) ; } IDENT_12 . start ( ) ; IDENT_12 . METHOD_6 ( ) ; } get ( ) { return org . apache . hadoop . hbase . IDENT_24 . create ( ) ; }
org . junit . Assert . assertEquals ( 3 , IDENT_14 . get ( ) ) 