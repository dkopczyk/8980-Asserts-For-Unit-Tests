METHOD_0 ( ) { int IDENT_0 = INT_0 ; int IDENT_1 = INT_1 ; int IDENT_2 = IDENT_1 * INT_2 ; long IDENT_3 = 2 * IDENT_2 ; com . IDENT_4 . IDENT_5 . store . IDENT_6 . IDENT_7 IDENT_8 = new com . IDENT_4 . IDENT_5 . store . IDENT_6 . METHOD_1 ( new com . IDENT_4 . IDENT_5 . metrics . METHOD_2 ( new org . apache . hadoop . conf . Configuration ( ) ) , true , IDENT_3 , IDENT_2 , IDENT_1 ) ; byte [ ] buffer = new byte [ INT_1 ] ; java . util . IDENT_9 random = new java . util . METHOD_3 ( ) ; byte [ ] IDENT_10 = new byte [ IDENT_1 ] ; java . util . concurrent . atomic . IDENT_11 IDENT_12 = new java . util . concurrent . atomic . METHOD_4 ( ) ; java . util . concurrent . atomic . METHOD_4 IDENT_13 = new java . util . concurrent . atomic . METHOD_4 ( ) ; long IDENT_14 = 0 ; long IDENT_15 = 0 ; int IDENT_16 = INT_3 ; com . IDENT_4 . IDENT_5 . store . IDENT_6 . IDENT_17 IDENT_18 = new com . IDENT_4 . IDENT_5 . store . IDENT_6 . METHOD_5 ( ) ; for ( int j = 0 ; j < IDENT_16 ; j ++ ) { long block = random . METHOD_6 ( IDENT_0 ) ; int file = 0 ; IDENT_18 . METHOD_7 ( block ) ; IDENT_18 . METHOD_8 ( file ) ; if ( IDENT_8 . METHOD_9 ( IDENT_18 , buffer ) ) { IDENT_12 . METHOD_10 ( ) ; } else { IDENT_13 . METHOD_10 ( ) ; } byte [ ] IDENT_19 = com . IDENT_4 . IDENT_5 . store . IDENT_6 . IDENT_20 . METHOD_11 ( random , IDENT_1 , IDENT_10 ) ; long IDENT_21 = java . lang . System . METHOD_12 ( ) ; IDENT_8 . store ( IDENT_18 , METHOD_11 ) ; IDENT_14 += ( java . lang . System . METHOD_12 ( ) ) - IDENT_21 ; long IDENT_22 = java . lang . System . METHOD_12 ( ) ; if ( IDENT_8 . METHOD_9 ( IDENT_18 , buffer ) ) { IDENT_15 += ( java . lang . System . METHOD_12 ( ) ) - IDENT_22 ; "<AssertPlaceHolder>" ; } } System . out . println ( ( STRING_0 + ( IDENT_12 . get ( ) ) ) ) ; System . out . println ( ( STRING_1 + ( IDENT_13 . get ( ) ) ) ) ; System . out . println ( ( STRING_2 + ( ( IDENT_14 / ( ( double ) ( IDENT_16 ) ) ) / FLOAT_0 ) ) ) ; System . out . println ( ( STRING_3 + ( ( IDENT_15 / ( ( double ) ( IDENT_16 ) ) ) / FLOAT_0 ) ) ) ; System . out . println ( ( STRING_4 + ( IDENT_8 . METHOD_13 ( ) ) ) ) ; } METHOD_9 ( com . IDENT_4 . IDENT_5 . store . IDENT_6 . METHOD_5 , byte [ ] ) { METHOD_14 ( buffer ) ; return METHOD_9 ( IDENT_18 , buffer , 0 , 0 , IDENT_23 ) ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( METHOD_11 , buffer ) ) 