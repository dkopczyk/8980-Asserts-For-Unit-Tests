METHOD_0 ( ) { org . openscience . cdk . geometry . IDENT_0 . IDENT_1 IDENT_2 = new org . openscience . cdk . geometry . IDENT_0 . METHOD_1 ( org . openscience . cdk . geometry . IDENT_0 . rules . IDENT_3 . IDENT_4 , new org . openscience . cdk . geometry . IDENT_0 . METHOD_2 ( ) , org . openscience . cdk . geometry . IDENT_0 . rules . IDENT_3 . IDENT_4 . METHOD_3 ( 1 ) , org . openscience . cdk . geometry . IDENT_0 . rules . IDENT_3 . IDENT_4 . METHOD_3 ( 0 ) ) ; org . openscience . cdk . geometry . IDENT_0 . rules . IDENT_5 < org . openscience . cdk . geometry . IDENT_0 . IDENT_1 > rule = new org . openscience . cdk . geometry . IDENT_0 . rules . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } compare ( org . openscience . cdk . geometry . IDENT_0 . IDENT_1 , org . openscience . cdk . geometry . IDENT_0 . IDENT_1 ) { int IDENT_6 = IDENT_7 . compare ( IDENT_8 , IDENT_9 ) ; if ( IDENT_6 != 0 ) return IDENT_6 ; org . openscience . cdk . geometry . IDENT_0 . IDENT_1 [ ] IDENT_10 = org . openscience . cdk . geometry . IDENT_0 . IDENT_11 . METHOD_5 ( IDENT_8 ) ; org . openscience . cdk . geometry . IDENT_0 . IDENT_1 [ ] IDENT_12 = org . openscience . cdk . geometry . IDENT_0 . IDENT_11 . METHOD_5 ( IDENT_9 ) ; if ( ( ( IDENT_10 . length ) == 0 ) && ( ( IDENT_12 . length ) == 0 ) ) return 0 ; if ( ( IDENT_10 . length ) == 0 ) return - 1 ; if ( ( IDENT_12 . length ) == 0 ) return 1 ; int IDENT_13 = java . lang . Math . min ( IDENT_10 . length , IDENT_12 . length ) ; if ( ( IDENT_10 . length ) > 1 ) IDENT_10 = order ( IDENT_10 ) ; if ( ( IDENT_12 . length ) > 1 ) IDENT_12 = order ( IDENT_12 ) ; for ( int i = 0 ; i < IDENT_13 ; i ++ ) { int IDENT_14 = IDENT_7 . compare ( IDENT_10 [ i ] , IDENT_12 [ i ] ) ; if ( IDENT_14 != 0 ) return IDENT_14 ; } if ( ( IDENT_10 . length ) == ( IDENT_12 . length ) ) { for ( int i = 0 ; i < IDENT_13 ; i ++ ) { int IDENT_14 = compare ( IDENT_10 [ i ] , IDENT_12 [ i ] ) ; if ( IDENT_14 != 0 ) return IDENT_14 ; } } if ( ( IDENT_10 . length ) > ( IDENT_12 . length ) ) return 1 ; else if ( ( IDENT_10 . length ) < ( IDENT_12 . length ) ) return - 1 ; else return 0 ; }
org . junit . Assert . assertEquals ( 0 , rule . compare ( IDENT_2 , IDENT_2 ) ) 