METHOD_0 ( ) { org . openscience . cdk . interfaces . IDENT_0 IDENT_1 = mock ( org . openscience . cdk . interfaces . IDENT_0 . class ) ; org . openscience . cdk . interfaces . IDENT_0 IDENT_2 = mock ( org . openscience . cdk . interfaces . IDENT_0 . class ) ; when ( IDENT_1 . METHOD_1 ( ) ) . thenReturn ( new javax . IDENT_3 . METHOD_2 ( 0 , 0 ) ) ; when ( IDENT_2 . METHOD_1 ( ) ) . thenReturn ( new javax . IDENT_3 . METHOD_2 ( 1 , 0 ) ) ; "<AssertPlaceHolder>" ; } position ( org . openscience . cdk . interfaces . IDENT_0 , java . util . List ) { final java . util . List < javax . IDENT_3 . IDENT_4 > IDENT_5 = org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_3 ( IDENT_9 , IDENT_10 ) ; if ( ( IDENT_10 . size ( ) ) > 2 ) { return org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . METHOD_4 ( IDENT_5 ) ; } else if ( ( IDENT_10 . size ( ) ) > 1 ) { return org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . METHOD_5 ( org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_6 ( IDENT_5 ) ) ; } else if ( ( IDENT_10 . size ( ) ) == 1 ) { return ( IDENT_5 . get ( 0 ) . x ) > ( org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_12 ) ? org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_13 : org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_14 ; } else { return org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . METHOD_7 ( IDENT_9 ) ; } }
org . junit . Assert . assertThat ( org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . position ( IDENT_1 , java . util . Arrays . asList ( IDENT_2 ) ) , org . hamcrest . CoreMatchers . is ( org . openscience . cdk . renderer . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_13 ) ) 