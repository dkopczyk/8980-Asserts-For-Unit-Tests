METHOD_0 ( ) { final double [ ] IDENT_0 = new double [ INT_0 ] ; METHOD_1 ( IDENT_0 ) ; IDENT_1 . METHOD_2 ( "1" , IDENT_2 ) ; com . IDENT_3 . IDENT_1 . IDENT_4 IDENT_5 = IDENT_1 . METHOD_3 ( ) ; IDENT_1 . METHOD_4 ( "1" , IDENT_0 ) ; com . IDENT_3 . IDENT_1 . IDENT_4 IDENT_6 = IDENT_1 . METHOD_3 ( ) ; double IDENT_7 = IDENT_5 . METHOD_5 ( new com . IDENT_3 . IDENT_1 . IDENT_8 . METHOD_6 ( ) , IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( double [ ] , double [ ] ) { double IDENT_7 = METHOD_7 ( IDENT_9 , IDENT_10 ) ; if ( IDENT_7 < 0 ) { if ( ( IDENT_9 . length ) != ( IDENT_10 . length ) ) { throw new java . lang . IllegalArgumentException ( ( ( ( ( STRING_0 + ( + ( IDENT_9 . length ) ) ) + STRING_1 ) + ( IDENT_10 . length ) ) + "]" ) ) ; } IDENT_7 = 0.0 ; for ( int i = 0 ; i < ( IDENT_9 . length ) ; i ++ ) { double IDENT_11 = ( IDENT_9 [ i ] ) - ( IDENT_10 [ i ] ) ; IDENT_7 += IDENT_11 * IDENT_11 ; } } return IDENT_7 ; }
org . junit . Assert . assertThat ( IDENT_7 , org . hamcrest . Matchers . is ( org . hamcrest . Matchers . equalTo ( Double . MAX_VALUE ) ) ) 