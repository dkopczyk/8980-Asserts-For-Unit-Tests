METHOD_0 ( ) { int IDENT_0 = ( ( int ) ( ( java . lang . Math . log ( FLOAT_0 ) ) / ( java . lang . Math . log ( 2 ) ) ) ) ; double expected = java . lang . Math . METHOD_1 ( 1 , IDENT_0 ) ; double IDENT_1 = ( java . lang . Math . METHOD_1 ( 1 , ( IDENT_0 - 1 ) ) ) - ( java . lang . Math . METHOD_1 ( 1 , ( IDENT_0 - 2 ) ) ) ; double IDENT_2 = ( java . lang . Math . METHOD_1 ( 1 , ( IDENT_0 - 1 ) ) ) - ( java . lang . Math . METHOD_1 ( 1 , ( IDENT_0 - 3 ) ) ) ; double IDENT_3 = expected + IDENT_1 ; double IDENT_4 = expected + IDENT_2 ; double IDENT_5 = java . lang . Math . METHOD_2 ( ( ( IDENT_6 . IDENT_7 . Utils . METHOD_3 ( IDENT_3 , IDENT_0 ) ) - ( IDENT_6 . IDENT_7 . Utils . METHOD_3 ( IDENT_4 , IDENT_0 ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( double , int ) { double IDENT_8 = java . lang . Math . METHOD_1 ( value , ( - IDENT_9 ) ) ; return java . lang . Math . METHOD_1 ( java . lang . Math . METHOD_4 ( IDENT_8 ) , IDENT_9 ) ; }
org . junit . Assert . assertTrue ( ( IDENT_5 < ( java . lang . Math . METHOD_1 ( 1 , IDENT_0 ) ) ) ) 