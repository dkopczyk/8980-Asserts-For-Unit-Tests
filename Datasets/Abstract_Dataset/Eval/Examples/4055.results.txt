METHOD_0 ( ) { int IDENT_0 = INT_0 ; int IDENT_1 = IDENT_2 . METHOD_1 ( IDENT_0 ) ; double [ ] IDENT_3 = new double [ INT_1 ] ; java . util . Arrays . METHOD_2 ( IDENT_3 , 0 , IDENT_1 , 1.0 ) ; METHOD_3 ( IDENT_3 , IDENT_0 , IDENT_1 , IDENT_3 . length ) ; double [ ] output = IDENT_2 . METHOD_4 ( IDENT_3 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( double [ ] , float ) { int IDENT_4 = ( ( int ) ( IDENT_0 ) ) / 1000 ; int length = IDENT_5 . length ; int IDENT_6 = ( com . IDENT_7 . IDENT_8 . IDENT_2 . IDENT_9 . IDENT_10 ) * IDENT_4 ; int IDENT_11 = METHOD_1 ( IDENT_0 ) ; boolean [ ] result = new boolean [ length ] ; if ( length < IDENT_11 ) { return IDENT_5 ; } int IDENT_12 = ( com . IDENT_7 . IDENT_8 . IDENT_2 . IDENT_9 . IDENT_13 ) * IDENT_4 ; double [ ] IDENT_14 = new double [ IDENT_12 ] ; double [ ] IDENT_15 = new double [ IDENT_12 ] ; for ( int position = 0 ; ( position + IDENT_12 ) < length ; position += IDENT_12 ) { java . lang . System . METHOD_5 ( IDENT_5 , position , IDENT_15 , 0 , IDENT_12 ) ; double IDENT_16 = METHOD_6 ( IDENT_15 , IDENT_14 ) ; java . util . Arrays . METHOD_2 ( result , position , ( position + IDENT_12 ) , ( IDENT_16 > ( IDENT_17 ) ) ) ; } METHOD_7 ( result , IDENT_6 ) ; int IDENT_18 = METHOD_8 ( result , IDENT_11 ) ; if ( IDENT_18 > 0 ) { int IDENT_19 = ( com . IDENT_7 . IDENT_8 . IDENT_2 . IDENT_9 . IDENT_20 ) * IDENT_4 ; METHOD_9 ( IDENT_19 ) ; double [ ] IDENT_21 = new double [ ( IDENT_5 . length ) - IDENT_18 ] ; int IDENT_22 = 0 ; for ( int i = 0 ; i < ( result . length ) ; i ++ ) { if ( result [ i ] ) { int IDENT_23 = i ; int IDENT_24 = 0 ; while ( ( i < ( result . length ) ) && ( result [ ( i ++ ) ] ) ) { IDENT_24 ++ ; } int IDENT_25 = IDENT_23 + IDENT_24 ; METHOD_10 ( IDENT_5 , IDENT_19 , IDENT_23 , IDENT_25 ) ; java . lang . System . METHOD_5 ( IDENT_5 , IDENT_23 , IDENT_21 , IDENT_22 , IDENT_24 ) ; IDENT_22 += IDENT_24 ; } } return IDENT_21 ; } else { return IDENT_5 ; } }
org . junit . Assert . assertThat ( output . length , org . hamcrest . Matchers . is ( org . hamcrest . Matchers . equalTo ( IDENT_1 ) ) ) 