METHOD_0 ( ) { System . out . println ( ( ( IDENT_0 . IDENT_1 . IDENT_2 . core . entry . IDENT_3 . IDENT_4 ) + STRING_0 ) ) ; IDENT_0 . IDENT_1 . IDENT_2 . core . api . IDENT_5 IDENT_6 = new IDENT_0 . IDENT_1 . IDENT_2 . core . api . METHOD_1 ( IDENT_2 . METHOD_2 ( ) . METHOD_3 ( IDENT_7 , ( ( IDENT_0 . IDENT_1 . IDENT_2 . core . api . IDENT_8 . IDENT_9 ) + STRING_1 ) ) ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_10 = new java . util . METHOD_4 ( ) ; IDENT_10 . put ( STRING_2 , STRING_3 ) ; IDENT_6 . setValue ( IDENT_10 ) ; IDENT_2 . METHOD_2 ( ) . METHOD_5 ( IDENT_7 , IDENT_11 , IDENT_6 ) ; java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . core . api . METHOD_1 > attributes = METHOD_6 ( ) ; int i = 0 ; for ( IDENT_0 . IDENT_1 . IDENT_2 . core . api . METHOD_1 a : attributes ) { if ( a . METHOD_7 ( ) . startsWith ( STRING_4 ) ) { if ( i == 0 ) a . setValue ( INT_0 ) ; else a . setValue ( INT_1 ) ; try { IDENT_12 . METHOD_0 ( ( ( IDENT_0 . IDENT_1 . IDENT_2 . core . impl . IDENT_13 ) ( IDENT_7 ) ) , a ) ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . core . api . exceptions . IDENT_14 ex ) { i ++ ; } } } "<AssertPlaceHolder>" ; } METHOD_0 ( IDENT_0 . IDENT_1 . IDENT_2 . core . impl . IDENT_13 , IDENT_0 . IDENT_1 . IDENT_2 . core . api . METHOD_1 ) { IDENT_0 . IDENT_1 . IDENT_2 . core . impl . Utils . METHOD_8 ( IDENT_15 , STRING_5 ) ; java . lang . Integer IDENT_16 = null ; if ( ( IDENT_15 . getValue ( ) ) != null ) IDENT_16 = ( ( java . lang . Integer ) ( IDENT_15 . getValue ( ) ) ) ; if ( IDENT_16 == null ) throw new IDENT_0 . IDENT_1 . IDENT_2 . core . api . exceptions . METHOD_9 ( IDENT_15 , STRING_6 ) ; java . lang . String IDENT_17 = IDENT_15 . METHOD_10 ( ) ; IDENT_0 . IDENT_1 . IDENT_2 . core . api . METHOD_1 IDENT_18 = IDENT_7 . METHOD_11 ( ) . METHOD_2 ( ) . METHOD_12 ( IDENT_7 , IDENT_17 , IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_19 . IDENT_20 . IDENT_21 ) ; java . util . Map < java . lang . Integer , java . lang . Integer > IDENT_6 = METHOD_13 ( IDENT_18 ) ; if ( ! ( METHOD_14 ( IDENT_6 , IDENT_16 ) ) ) { throw new IDENT_0 . IDENT_1 . IDENT_2 . core . api . exceptions . METHOD_9 ( IDENT_15 , ( ( ( STRING_7 + IDENT_6 ) + STRING_8 ) + IDENT_17 ) ) ; } }
org . junit . Assert . assertEquals ( 1 , i ) 