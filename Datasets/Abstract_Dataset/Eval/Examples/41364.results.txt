METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_2 IDENT_3 = new de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_1 ( IDENT_4 , 0 , IDENT_5 . IDENT_6 ) ; de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_7 IDENT_8 = IDENT_9 . METHOD_2 ( IDENT_3 ) ; de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_10 IDENT_11 = new de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_3 ( IDENT_8 , "" , STRING_0 , IDENT_12 . IDENT_13 ) ; de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_3 IDENT_14 = de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_15 . METHOD_4 ( this . IDENT_4 , IDENT_11 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_16 , de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_3 , de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_1 ) { assert ( IDENT_11 . METHOD_5 ( ) . length ( ) ) == 0 ; if ( ( IDENT_11 . METHOD_6 ( ) . METHOD_7 ( ) ) != ( IDENT_17 . METHOD_7 ( ) ) ) IDENT_11 = IDENT_11 . METHOD_8 ( IDENT_17 . METHOD_7 ( ) ) ; int pos = IDENT_3 . METHOD_9 ( ) ; java . lang . StringBuilder builder = new java . lang . StringBuilder ( IDENT_17 . METHOD_10 ( ) ) ; builder . insert ( pos , IDENT_11 . METHOD_11 ( ) ) ; int IDENT_18 = 0 ; final int IDENT_19 = IDENT_11 . METHOD_11 ( ) . length ( ) ; final java . lang . String IDENT_20 = builder . toString ( ) ; final int IDENT_21 = java . lang . Math . min ( IDENT_20 . length ( ) , IDENT_17 . METHOD_12 ( ) ) ; while ( ( ( pos + IDENT_19 ) < IDENT_21 ) && ( ( IDENT_20 . charAt ( pos ) ) == ( IDENT_20 . charAt ( ( pos + IDENT_19 ) ) ) ) ) { ++ IDENT_18 ; ++ pos ; } final de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_22 IDENT_23 = new de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_13 ( IDENT_17 ) ; final de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_7 IDENT_24 ; try { IDENT_24 = IDENT_23 . METHOD_2 ( IDENT_3 . METHOD_14 ( IDENT_18 ) ) ; } catch ( de . IDENT_0 . IDENT_1 . jannovar . reference . IDENT_25 e ) { throw new java . lang . RuntimeException ( STRING_1 , e ) ; } if ( IDENT_18 == 0 ) return IDENT_11 ; else return new de . IDENT_0 . IDENT_1 . jannovar . reference . METHOD_3 ( IDENT_24 , "" , IDENT_20 . substring ( pos , ( pos + IDENT_19 ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_14 ) 