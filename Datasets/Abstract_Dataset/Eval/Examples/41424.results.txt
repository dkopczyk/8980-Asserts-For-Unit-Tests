METHOD_0 ( ) { final com . puppycrawl . tools . checkstyle . IDENT_0 IDENT_1 = METHOD_1 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; IDENT_1 . METHOD_2 ( STRING_0 , STRING_1 7 ) ; "<AssertPlaceHolder>" ; final java . lang . String [ ] expected = new java . lang . String [ ] { STRING_1 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_1 9 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_1 4 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_3 7 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 9 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 7 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_1 8 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 5 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_5 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_6 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_4 3 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_1 2 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_1 5 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_4 8 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 1 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_3 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 2 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_3 1 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_4 4 ) ) , STRING_1 6 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_3 4 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_7 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_2 ) ) , STRING_4 0 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_1 3 ) ) , STRING_3 2 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_1 0 ) ) , STRING_8 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 0 ) ) , STRING_1 1 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_4 6 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_3 8 ) ) , STRING_3 5 + ( METHOD_3 ( com . puppycrawl . tools . checkstyle . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , STRING_9 ) ) } ; verify ( IDENT_1 , getPath ( STRING_3 3 ) , expected ) ; } METHOD_4 ( java . lang . String ) { if ( ! ( IDENT_6 . containsKey ( IDENT_7 ) ) ) { throw new com . puppycrawl . tools . checkstyle . api . METHOD_5 ( ( ( ( STRING_10 + IDENT_7 ) + STRING_11 ) + ( name ) ) ) ; } return IDENT_6 . get ( IDENT_7 ) ; }
org . junit . Assert . assertNotNull ( STRING_3 6 , IDENT_1 . METHOD_4 ( STRING_0 ) ) 