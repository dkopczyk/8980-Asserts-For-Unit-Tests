METHOD_0 ( ) { java . lang . String host = STRING_0 ; int port = INT_0 ; int IDENT_0 = 5 ; int IDENT_1 = 2 ; int IDENT_2 = INT_1 ; final org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 client = new org . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( ) . METHOD_2 ( host ) . METHOD_3 ( port ) . METHOD_4 ( INT_1 ) . METHOD_5 ( IDENT_0 ) . METHOD_6 ( IDENT_2 ) . METHOD_7 ( IDENT_1 ) . build ( ) ; try { final java . util . concurrent . IDENT_7 IDENT_8 = new java . util . concurrent . METHOD_8 ( 1 ) ; client . get ( null , STRING_1 ) ; client . get ( null , STRING_2 ) ; client . get ( null , STRING_3 ) ; client . get ( null , STRING_4 ) ; client . get ( null , STRING_5 ) ; client . get ( new org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_9 < java . lang . String > ( ) { @ org . IDENT_3 . IDENT_4 . IDENT_5 . test . connection . Override public void METHOD_9 ( java . lang . Throwable IDENT_10 ) { } @ org . IDENT_3 . IDENT_4 . IDENT_5 . test . connection . Override public void METHOD_10 ( java . lang . String result ) { IDENT_8 . METHOD_11 ( ) ; } } , STRING_6 ) ; IDENT_8 . METHOD_12 ( ) ; java . lang . Thread . sleep ( ( IDENT_2 + INT_2 ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IDENT_11 e ) { e . printStackTrace ( ) ; } finally { client . METHOD_13 ( ) ; } } METHOD_14 ( ) { METHOD_15 ( ) ; return IDENT_12 . METHOD_16 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , client . METHOD_14 ( ) ) 