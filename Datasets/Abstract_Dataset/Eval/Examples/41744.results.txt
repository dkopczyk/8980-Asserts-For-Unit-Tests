METHOD_0 ( ) { java . lang . IDENT_0 [ ] IDENT_1 = new java . lang . IDENT_0 [ 2 ] ; IDENT_1 [ 0 ] = new java . lang . METHOD_1 ( STRING_0 , STRING_1 , STRING_2 , 5 ) ; IDENT_1 [ 1 ] = new java . lang . METHOD_1 ( STRING_3 , STRING_1 , STRING_4 , 5 ) ; java . lang . String IDENT_2 = org . openqa . selenium . IDENT_3 . METHOD_2 ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . METHOD_1 [ ] ) { java . lang . String IDENT_4 = STRING_5 ; for ( java . lang . METHOD_1 e : IDENT_5 ) { if ( e . METHOD_3 ( ) . METHOD_4 ( STRING_6 ) ) { java . lang . String [ ] IDENT_6 = e . METHOD_3 ( ) . split ( STRING_7 ) ; IDENT_4 = IDENT_6 [ ( ( IDENT_6 . length ) - 1 ) ] ; } } return IDENT_4 ; }
org . junit . Assert . assertEquals ( STRING_5 , IDENT_2 ) 