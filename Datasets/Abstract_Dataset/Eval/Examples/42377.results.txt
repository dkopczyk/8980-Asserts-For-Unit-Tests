METHOD_0 ( ) { java . io . File file = new java . io . File ( IDENT_0 , STRING_0 ) ; org . apache . IDENT_1 . collection . IDENT_2 reader = org . apache . IDENT_1 . IDENT_3 . factory . IDENT_4 . METHOD_1 ( org . IDENT_5 . util . IDENT_6 . IDENT_7 . IDENT_8 . class , null , IDENT_8 . IDENT_9 , file . getPath ( ) , IDENT_8 . IDENT_10 , new java . lang . String [ ] { STRING_1 } , IDENT_8 . IDENT_11 , false ) ; org . apache . IDENT_1 . IDENT_3 . pipeline . IDENT_12 IDENT_13 = new org . apache . IDENT_1 . IDENT_3 . pipeline . METHOD_2 ( reader ) . iterator ( ) ; test ( IDENT_13 , "" , ( ( file . METHOD_3 ( ) ) + STRING_2 ) ) ; test ( IDENT_13 , "" , ( ( file . METHOD_3 ( ) ) + STRING_3 ) ) ; test ( IDENT_13 , "" , ( ( file . METHOD_3 ( ) ) + STRING_4 ) ) ; test ( IDENT_13 , STRING_5 , ( ( file . METHOD_3 ( ) ) + STRING_6 ) ) ; test ( IDENT_13 , "" , ( ( file . METHOD_3 ( ) ) + STRING_7 ) ) ; test ( IDENT_13 , " " , ( ( file . METHOD_3 ( ) ) + STRING_2 0 ) ) ; "<AssertPlaceHolder>" ; } hasNext ( ) { if ( ( line ) == null ) { line = input . METHOD_4 ( ) ; if ( ( line ) != null ) { for ( java . lang . String IDENT_14 : IDENT_15 ) { if ( line . startsWith ( IDENT_14 ) ) { line = null ; return hasNext ( ) ; } } if ( ( IDENT_16 ) && ( line . trim ( ) . equals ( "" ) ) ) { line = null ; return hasNext ( ) ; } } } if ( ( line ) == null ) { if ( METHOD_5 ( ) ) return hasNext ( ) ; else return false ; } return true ; }
org . junit . Assert . assertFalse ( IDENT_13 . hasNext ( ) ) 