test ( ) { java . util . List < edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . IDENT_4 > IDENT_5 = edu . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_6 . METHOD_0 ( new edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . METHOD_1 ( STRING_0 , STRING_1 ) , new edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . METHOD_1 ( STRING_2 , STRING_3 ) , new edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . METHOD_1 ( STRING_4 , STRING_5 ) ) ; edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . map . IDENT_7 map = new edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . map . METHOD_2 ( ) ; for ( edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . METHOD_1 item : IDENT_5 ) map . put ( item . IDENT_8 , item . IDENT_9 ) ; java . io . ByteArrayOutputStream IDENT_10 = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_11 out = new java . io . METHOD_3 ( new java . io . METHOD_4 ( IDENT_10 ) ) ; out . METHOD_5 ( map ) ; out . close ( ) ; java . io . IDENT_12 in = new java . io . METHOD_6 ( new java . io . METHOD_7 ( new java . io . ByteArrayInputStream ( IDENT_10 . toByteArray ( ) ) ) ) ; map = ( ( edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . map . METHOD_2 ) ( in . METHOD_8 ( ) ) ) ; in . close ( ) ; for ( edu . IDENT_0 . IDENT_1 . IDENT_2 . collection . IDENT_3 . METHOD_1 item : IDENT_5 ) "<AssertPlaceHolder>" ; } get ( int ) { return IDENT_13 . get ( key ) ; }
org . junit . Assert . assertEquals ( item . IDENT_9 , map . get ( item . IDENT_8 ) ) 