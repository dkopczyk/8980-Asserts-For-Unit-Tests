METHOD_0 ( ) { int count = 10 ; com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_4 [ ] IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_4 [ count ] ; for ( int i = 0 ; i < count ; ++ i ) { IDENT_3 . METHOD_2 ( new com . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_0 , ( INT_0 + i ) ) ) ; } com . IDENT_0 . IDENT_1 . IDENT_6 . LOG . info ( STRING_1 ) ; for ( int i = 0 ; i < count ; ++ i ) { IDENT_5 [ i ] = new com . IDENT_0 . IDENT_1 . METHOD_4 ( IDENT_3 , new com . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_0 , ( INT_0 + i ) ) ) ; IDENT_5 [ i ] . start ( ) ; } IDENT_5 [ 0 ] . METHOD_5 ( IDENT_3 , STRING_2 FLOAT_0 getBytes ( ) ) ; IDENT_5 [ 1 ] . METHOD_5 ( IDENT_3 , STRING_3 . getBytes ( ) ) ; IDENT_5 [ 0 ] . METHOD_5 ( IDENT_3 , STRING_2 FLOAT_1 getBytes ( ) ) ; IDENT_5 [ 5 ] . METHOD_5 ( IDENT_3 , STRING_4 . getBytes ( ) ) ; IDENT_5 [ 4 ] . METHOD_5 ( IDENT_3 , STRING_5 . getBytes ( ) ) ; IDENT_5 [ 6 ] . METHOD_5 ( IDENT_3 , STRING_6 . getBytes ( ) ) ; com . IDENT_0 . IDENT_1 . IDENT_6 . LOG . info ( STRING_7 ) ; java . lang . Thread . sleep ( INT_1 ) ; for ( com . IDENT_0 . IDENT_1 . METHOD_4 g : IDENT_5 ) { com . IDENT_0 . IDENT_1 . IDENT_6 . LOG . info ( ( STRING_2 + ( g . node . toString ( ) ) ) ) ; g . METHOD_6 ( ) ; } for ( com . IDENT_0 . IDENT_1 . METHOD_4 g : IDENT_5 ) { com . IDENT_0 . IDENT_1 . IDENT_6 . LOG . info ( ( ( ( ( STRING_8 + ( g . node . toString ( ) ) ) + STRING_2 1 ) + ( g . IDENT_7 . size ( ) ) ) + STRING_9 ) ) ; "<AssertPlaceHolder>" ; } } size ( ) { return IDENT_8 . size ( ) ; }
org . junit . Assert . assertEquals ( 6 , g . IDENT_7 . size ( ) ) 