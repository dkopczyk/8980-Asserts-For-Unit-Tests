METHOD_0 ( ) { System . out . println ( STRING_0 ) ; long IDENT_0 = INT_0 ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 > IDENT_8 = new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 > ( "test" , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . IDENT_11 , IDENT_0 , new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ) { @ com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . Override public com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 METHOD_2 ( com . IDENT_1 . IDENT_2 . IDENT_12 . IDENT_13 . IDENT_14 format ) throws java . io . IOException { com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 count = new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_3 ( STRING_1 ) { public void append ( com . IDENT_1 . IDENT_2 . core . IDENT_15 e ) throws com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_16 , java . io . IOException { super . append ( e ) ; System . out . println ( e ) ; } } ; return count ; } @ com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . Override public com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_17 METHOD_4 ( ) { return null ; } @ com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . Override public void METHOD_5 ( java . lang . String IDENT_18 , java . util . Map < java . lang . String , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_17 > IDENT_19 ) { IDENT_19 . put ( ( IDENT_18 + ( getName ( ) ) ) , METHOD_4 ( ) ) ; } } ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_20 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_3 > > IDENT_21 = new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_20 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 < com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_3 > > ( IDENT_8 , FLOAT_0 , INT_1 ) ; IDENT_21 . METHOD_6 ( ) ; int [ ] events = new int [ ] { 15 , 4 , INT_2 , 20 } ; for ( int i = 0 ; i < ( events . length ) ; i ++ ) { for ( int j = 0 ; j < ( events [ i ] ) ; j ++ ) { java . lang . String s = ( ( STRING_2 + i ) + STRING_3 ) + j ; IDENT_21 . append ( new com . IDENT_1 . IDENT_2 . core . METHOD_7 ( s . getBytes ( ) ) ) ; } IDENT_8 . METHOD_8 ( ) ; } int [ ] IDENT_22 = new int [ ] { 1 , 0 , 20 , 4 } ; java . util . List < com . IDENT_1 . util . IDENT_23 < java . lang . Long , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_3 > > IDENT_24 = IDENT_8 . METHOD_9 ( ) ; int i = 0 ; for ( com . IDENT_1 . util . IDENT_23 < java . lang . Long , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_3 > p : IDENT_24 ) { long count = p . METHOD_10 ( ) . METHOD_11 ( ) ; System . out . println ( ( ( ( p . METHOD_12 ( ) ) + STRING_4 ) + count ) ) ; "<AssertPlaceHolder>" ; i ++ ; } } METHOD_12 ( ) { return IDENT_25 ; }
org . junit . Assert . assertEquals ( IDENT_22 [ i ] , count ) 