METHOD_0 ( ) { java . sql . IDENT_0 conn = java . sql . IDENT_1 . METHOD_1 ( METHOD_2 ( ) ) ; java . sql . IDENT_2 stmt = conn . METHOD_3 ( ( STRING_0 + ( STRING_1 + STRING_2 ) ) ) ; stmt . METHOD_4 ( 1 , new byte [ ] { 0 , 1 , 1 } ) ; stmt . METHOD_4 ( 2 , new byte [ ] { 0 , 2 , 1 } ) ; stmt . METHOD_4 ( 3 , new byte [ ] { 0 , 3 , 1 } ) ; stmt . METHOD_4 ( 4 , new byte [ ] { 1 , 1 , 1 } ) ; stmt . METHOD_4 ( 5 , new byte [ ] { 1 , 2 , 1 } ) ; stmt . METHOD_4 ( 6 , new byte [ ] { 1 , 3 , 1 } ) ; stmt . METHOD_4 ( 7 , new byte [ ] { 2 , 1 , 1 } ) ; stmt . METHOD_4 ( 8 , new byte [ ] { 2 , 2 , 1 } ) ; stmt . METHOD_4 ( 9 , new byte [ ] { 2 , 3 , 1 } ) ; stmt . METHOD_4 ( 10 , new byte [ ] { 3 , 1 , 1 } ) ; stmt . METHOD_4 ( INT_0 , new byte [ ] { 3 , 2 , 1 } ) ; stmt . METHOD_4 ( 12 , new byte [ ] { 3 , 3 , 1 } ) ; stmt . execute ( ) ; java . sql . ResultSet rs = conn . METHOD_5 ( ) . METHOD_6 ( STRING_3 ) ; "<AssertPlaceHolder>" ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . METHOD_7 ( ) ; } return IDENT_3 . get ( ( ( position ) ++ ) ) ; }
org . junit . Assert . assertTrue ( rs . next ( ) ) 