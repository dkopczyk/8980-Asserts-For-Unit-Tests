METHOD_0 ( ) { java . sql . IDENT_0 conn ; java . sql . IDENT_1 stmt ; java . sql . ResultSet rs ; java . util . Properties props = org . apache . phoenix . util . IDENT_2 . METHOD_1 ( org . apache . phoenix . IDENT_3 . IDENT_4 ) ; conn = java . sql . IDENT_5 . METHOD_2 ( METHOD_3 ( ) , props ) ; conn . METHOD_4 ( ) . execute ( ( STRING_0 + STRING_1 ) ) ; conn . METHOD_4 ( ) . execute ( ( STRING_2 + STRING_1 ) ) ; java . lang . String [ ] s ; java . sql . IDENT_6 array ; conn = METHOD_5 ( props , STRING_3 ) ; conn = METHOD_5 ( props , STRING_4 1 ) ; stmt = conn . METHOD_6 ( STRING_5 ) ; stmt . execute ( ) ; stmt = conn . METHOD_6 ( STRING_6 ) ; stmt . execute ( ) ; stmt = METHOD_7 ( conn , STRING_3 ) ; stmt . METHOD_8 ( 1 , STRING_4 1 ) ; s = new java . lang . String [ ] { STRING_4 2 , STRING_4 3 , STRING_4 4 , STRING_4 0 , null , null , STRING_4 } ; array = conn . METHOD_9 ( STRING_7 , s ) ; stmt . METHOD_10 ( 2 , array ) ; s = new java . lang . String [ ] { STRING_8 , STRING_4 3 , STRING_4 4 , STRING_4 0 , null , null , null , STRING_4 } ; array = conn . METHOD_9 ( STRING_7 , s ) ; stmt . METHOD_10 ( 3 , array ) ; stmt . execute ( ) ; stmt = METHOD_7 ( conn , STRING_4 1 ) ; stmt . METHOD_8 ( 1 , STRING_4 1 ) ; s = new java . lang . String [ ] { STRING_4 2 , STRING_4 3 , STRING_4 4 , STRING_4 0 , null , null , STRING_4 } ; array = conn . METHOD_9 ( STRING_7 , s ) ; stmt . METHOD_10 ( 2 , array ) ; s = new java . lang . String [ ] { STRING_8 , STRING_4 3 , STRING_4 4 , STRING_4 0 , null , null , null , STRING_4 } ; array = conn . METHOD_9 ( STRING_7 , s ) ; stmt . METHOD_10 ( 3 , array ) ; stmt . execute ( ) ; conn . close ( ) ; conn = java . sql . IDENT_5 . METHOD_2 ( METHOD_3 ( ) , props ) ; stmt = conn . METHOD_6 ( STRING_6 ) ; stmt . execute ( ) ; rs = conn . METHOD_4 ( ) . METHOD_11 ( STRING_9 ) ; "<AssertPlaceHolder>" ; conn . close ( ) ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . METHOD_12 ( ) ; } return IDENT_7 . get ( ( ( position ) ++ ) ) ; }
org . junit . Assert . assertTrue ( rs . next ( ) ) 