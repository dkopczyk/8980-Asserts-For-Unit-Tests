METHOD_0 ( ) { com . IDENT_0 . test . Map result = api . METHOD_1 ( com . IDENT_0 . test . IDENT_1 . IDENT_2 , com . IDENT_0 . utils . IDENT_3 . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , INT_0 ) ) ; com . IDENT_0 . test . List < com . IDENT_0 . test . Map > resources = ( ( com . IDENT_0 . test . List < com . IDENT_0 . test . Map > ) ( result . get ( STRING_5 ) ) ) ; com . IDENT_0 . test . ArrayList < java . lang . String > IDENT_4 = new com . IDENT_0 . test . ArrayList < java . lang . String > ( ) ; for ( com . IDENT_0 . test . Map resource : resources ) { IDENT_4 . add ( ( ( java . lang . String ) ( resource . get ( STRING_6 ) ) ) ) ; } result = api . METHOD_1 ( com . IDENT_0 . test . IDENT_1 . IDENT_2 , com . IDENT_0 . utils . IDENT_3 . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , ( - 1 ) , STRING_4 , INT_0 ) ) ; com . IDENT_0 . test . List < com . IDENT_0 . test . Map > IDENT_5 = ( ( com . IDENT_0 . test . List < com . IDENT_0 . test . Map > ) ( result . get ( STRING_5 ) ) ) ; com . IDENT_0 . test . ArrayList < java . lang . String > IDENT_6 = new com . IDENT_0 . test . ArrayList < java . lang . String > ( ) ; for ( com . IDENT_0 . test . Map resource : IDENT_5 ) { IDENT_6 . add ( ( ( java . lang . String ) ( resource . get ( STRING_6 ) ) ) ) ; } com . IDENT_0 . test . Collections . METHOD_3 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String ) { if ( key == null ) { throw new org . IDENT_0 . json . METHOD_4 ( STRING_7 ) ; } java . lang . Object object = this . METHOD_5 ( key ) ; if ( object == null ) { throw new org . IDENT_0 . json . METHOD_4 ( ( ( STRING_8 + ( org . IDENT_0 . json . JSONObject . METHOD_6 ( key ) ) ) + STRING_9 ) ) ; } return object ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_6 ) 