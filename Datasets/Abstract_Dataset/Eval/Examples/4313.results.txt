METHOD_0 ( ) { final com . IDENT_0 . stream . function . IDENT_1 < java . lang . Integer > op = IDENT_1 . IDENT_2 . METHOD_1 ( com . IDENT_0 . stream . IDENT_3 . METHOD_2 ( ) ) ; final int size = com . IDENT_0 . stream . function . IDENT_4 . data . size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { final java . lang . Integer IDENT_5 = com . IDENT_0 . stream . function . IDENT_4 . data . get ( i ) ; final java . lang . Integer IDENT_6 = com . IDENT_0 . stream . function . IDENT_4 . data . get ( ( ( size - 1 ) - i ) ) ; final java . lang . Integer expected = java . lang . Math . max ( IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } } apply ( int , java . lang . Integer ) { return ( index + value ) / 2 ; }
org . junit . Assert . assertEquals ( expected , op . apply ( IDENT_5 , IDENT_6 ) ) 