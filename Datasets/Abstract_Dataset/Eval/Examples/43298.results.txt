METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_1 ( INT_0 ) ; int IDENT_3 = 15 ; int IDENT_4 = 5 ; int IDENT_5 = 10 ; for ( int i = 0 ; i < IDENT_5 ; i ++ ) { edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_7 = edu . IDENT_0 . IDENT_1 . test . IDENT_8 . METHOD_2 ( IDENT_3 , IDENT_4 , IDENT_3 , 10 , 10 , 10 , false ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_9 IDENT_10 = new edu . IDENT_0 . IDENT_1 . test . METHOD_3 ( new edu . IDENT_0 . IDENT_1 . test . METHOD_4 ( IDENT_7 ) , new edu . IDENT_0 . IDENT_1 . test . METHOD_5 ( IDENT_7 ) ) ; IDENT_10 . METHOD_6 ( false ) ; IDENT_10 . METHOD_7 ( true ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_11 = IDENT_10 . search ( ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_12 IDENT_13 = new edu . IDENT_0 . IDENT_1 . test . METHOD_8 ( IDENT_7 ) ; IDENT_13 . METHOD_6 ( false ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_14 = IDENT_13 . convert ( ) ; "<AssertPlaceHolder>" ; } } convert ( ) { logger . log ( STRING_0 , STRING_1 ) ; if ( IDENT_15 ) { System . out . println ( STRING_2 ) ; } edu . IDENT_0 . IDENT_1 . search . IDENT_6 graph = METHOD_9 ( ) ; if ( IDENT_15 ) { System . out . println ( STRING_3 ) ; } METHOD_10 ( graph , IDENT_7 ) ; if ( IDENT_15 ) { System . out . println ( STRING_4 ) ; } final edu . IDENT_0 . IDENT_1 . search . IDENT_16 IDENT_17 = new edu . IDENT_0 . IDENT_1 . search . METHOD_11 ( new edu . IDENT_0 . IDENT_1 . search . METHOD_12 ( IDENT_7 ) ) ; System . out . println ( ( STRING_5 + ( IDENT_18 ) ) ) ; IDENT_17 . METHOD_6 ( IDENT_18 ) ; IDENT_17 . METHOD_13 ( false ) ; IDENT_17 . METHOD_14 ( IDENT_19 ) ; IDENT_17 . METHOD_15 ( IDENT_20 ) ; IDENT_17 . METHOD_16 ( graph ) ; IDENT_17 . METHOD_17 ( graph ) ; if ( IDENT_15 ) { System . out . println ( STRING_6 ) ; } return graph ; }
org . junit . Assert . assertEquals ( IDENT_14 , IDENT_11 ) 