METHOD_0 ( ) { java . util . List < edu . IDENT_0 . IDENT_1 . test . Node > nodes = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { nodes . add ( new edu . IDENT_0 . IDENT_1 . test . METHOD_1 ( ( STRING_0 + ( i + 1 ) ) ) ) ; } edu . IDENT_0 . IDENT_1 . test . IDENT_2 graph = new edu . IDENT_0 . IDENT_1 . test . METHOD_2 ( new edu . IDENT_0 . IDENT_1 . test . METHOD_3 ( edu . IDENT_0 . IDENT_1 . test . IDENT_3 . METHOD_4 ( nodes , 0 , 5 , INT_0 , 15 , 15 , false ) ) ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 IDENT_6 = new edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_5 ( graph ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_7 IDENT_8 = new edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_6 ( IDENT_6 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_9 IDENT_10 = IDENT_8 . METHOD_7 ( 1000 , false ) ; edu . IDENT_0 . IDENT_1 . util . IDENT_11 IDENT_12 = IDENT_10 . METHOD_8 ( ) ; IDENT_12 = edu . IDENT_0 . IDENT_1 . test . IDENT_13 . METHOD_9 ( IDENT_12 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_9 IDENT_14 = edu . IDENT_0 . IDENT_1 . test . IDENT_15 . METHOD_10 ( IDENT_10 . METHOD_11 ( ) , IDENT_12 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_13 . METHOD_12 ( IDENT_12 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_13 . METHOD_13 ( IDENT_12 ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_16 IDENT_17 = new edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_14 ( IDENT_14 , IDENT_6 ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_6 IDENT_18 = IDENT_17 . METHOD_15 ( ) ; IDENT_18 . METHOD_16 ( ) ; IDENT_18 . METHOD_17 ( ) ; new edu . IDENT_0 . IDENT_1 . util . METHOD_18 ( IDENT_18 . METHOD_19 ( ) ) ; IDENT_18 . METHOD_16 ( ) ; IDENT_18 . METHOD_17 ( ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_19 IDENT_4 = new edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_20 ( IDENT_8 ) ; IDENT_18 . METHOD_16 ( ) ; IDENT_18 . METHOD_17 ( ) ; "<AssertPlaceHolder>" ; } METHOD_21 ( edu . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_20 ) { edu . IDENT_0 . IDENT_1 . test . IDENT_9 IDENT_10 = IDENT_4 . METHOD_7 ( INT_1 , false ) ; edu . IDENT_0 . IDENT_1 . util . IDENT_11 IDENT_12 = IDENT_10 . METHOD_8 ( ) ; edu . IDENT_0 . IDENT_1 . util . IDENT_11 METHOD_12 = edu . IDENT_0 . IDENT_1 . test . IDENT_13 . METHOD_12 ( IDENT_12 ) ; edu . IDENT_0 . IDENT_1 . util . METHOD_18 IDENT_20 = edu . IDENT_0 . IDENT_1 . test . IDENT_13 . METHOD_13 ( IDENT_12 ) ; for ( int i = 0 ; i < ( METHOD_12 . METHOD_22 ( ) ) ; i ++ ) { if ( ! ( ( java . lang . Math . METHOD_23 ( ( ( METHOD_12 . get ( i , i ) ) - 1 ) ) ) < FLOAT_0 ) ) { return false ; } if ( ! ( ( java . lang . Math . METHOD_23 ( IDENT_20 . get ( i ) ) ) < FLOAT_0 ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( METHOD_21 ( IDENT_4 ) ) 