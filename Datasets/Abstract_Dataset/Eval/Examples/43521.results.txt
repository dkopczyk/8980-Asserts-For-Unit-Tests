METHOD_0 ( ) { byte [ ] value = new byte [ ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) * 2 ] ; for ( int i = 0 ; i < ( ( ( buffer . METHOD_1 ( ) ) - ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ) + 1 ) ; i += org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) { random . METHOD_2 ( value ) ; buffer . METHOD_3 ( i , value , random . METHOD_4 ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) , org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ; } random . METHOD_5 ( IDENT_2 ) ; byte [ ] IDENT_3 = new byte [ ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) * 2 ] ; org . jboss . netty . buffer . IDENT_4 IDENT_5 = METHOD_6 ( IDENT_3 ) ; for ( int i = 0 ; i < ( ( ( buffer . METHOD_1 ( ) ) - ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ) + 1 ) ; i += org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) { random . METHOD_2 ( IDENT_3 ) ; int IDENT_6 = random . METHOD_4 ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ; buffer . getBytes ( i , value , IDENT_6 , org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ; for ( int j = IDENT_6 ; j < ( IDENT_6 + ( org . jboss . netty . buffer . IDENT_0 . IDENT_1 ) ) ; j ++ ) { "<AssertPlaceHolder>" ; } } } METHOD_7 ( int ) { return array [ index ] ; }
org . junit . Assert . assertEquals ( IDENT_5 . METHOD_7 ( j ) , value [ j ] ) 