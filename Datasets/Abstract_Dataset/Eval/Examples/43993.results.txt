METHOD_0 ( ) { java . util . HashMap < java . lang . String , java . lang . String > map = METHOD_1 ( "a" , "b" ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Map ) { if ( ( ! ( map . containsKey ( null ) ) ) && ( ! ( map . METHOD_3 ( null ) ) ) ) { return map ; } com . google . common . base . IDENT_0 < java . lang . String , java . lang . String > function = new com . google . common . base . IDENT_0 < java . lang . String , java . lang . String > ( ) { @ IDENT_1 . utils . Override public java . lang . String apply ( java . lang . String input ) { return IDENT_1 . utils . StringUtils . METHOD_4 ( input ) ; } } ; java . util . Map < java . lang . String , java . lang . String > IDENT_2 = com . google . common . collect . IDENT_3 . METHOD_5 ( com . google . common . collect . IDENT_3 . METHOD_6 ( map , function ) ) ; if ( IDENT_2 . containsKey ( null ) ) { if ( IDENT_2 . containsKey ( "" ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_0 + map ) ) ; } else { IDENT_1 . utils . IDENT_4 . log . debug ( ( STRING_1 + ( IDENT_2 . get ( null ) ) ) ) ; IDENT_2 . put ( "" , IDENT_2 . remove ( null ) ) ; } } return IDENT_2 ; }
org . junit . Assert . assertEquals ( map , IDENT_1 . utils . IDENT_4 . METHOD_2 ( map ) ) 