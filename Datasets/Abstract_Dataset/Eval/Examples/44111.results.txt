METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 IDENT_4 = new com . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 ( 1 , 0 , STRING_0 , STRING_1 ) ; IDENT_5 . METHOD_2 ( IDENT_4 , ( ( com . IDENT_0 . IDENT_1 . IDENT_2 . model . TestUtils . IDENT_6 ) / 2 ) , com . IDENT_0 . IDENT_1 . IDENT_2 . model . TestUtils . IDENT_7 ) ; "<AssertPlaceHolder>" ; } accept ( com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 , int , int ) { if ( METHOD_3 ( IDENT_4 , x , y ) ) { return false ; } java . math . BigInteger [ ] IDENT_8 = METHOD_4 ( IDENT_4 , x , true ) ; boolean IDENT_9 = false ; for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) { java . math . BigInteger IDENT_10 = IDENT_8 [ i ] ; int pos = ( y - i ) + ( IDENT_4 . METHOD_5 ( ) ) ; if ( pos >= ( IDENT_11 ) ) { continue ; } java . math . BigInteger line = this . IDENT_9 . get ( pos ) ; IDENT_9 OP_0 ( line . and ( IDENT_10 ) . compareTo ( BigInteger . IDENT_12 ) ) == 1 ; } return ! IDENT_9 ; }
org . junit . Assert . assertTrue ( IDENT_5 . accept ( IDENT_4 , ( ( ( com . IDENT_0 . IDENT_1 . IDENT_2 . model . TestUtils . IDENT_6 ) / 2 ) + 1 ) , 2 ) ) 