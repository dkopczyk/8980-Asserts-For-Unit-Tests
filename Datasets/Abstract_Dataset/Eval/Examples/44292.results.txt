METHOD_0 ( ) { java . lang . Object array = org . IDENT_0 . core . impl . provider . json . IDENT_1 . METHOD_1 ( java . lang . String [ ] . class , new org . IDENT_0 . core . impl . provider . json . METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Class , org . IDENT_0 . core . impl . provider . json . IDENT_2 ) { if ( ( IDENT_3 == null ) || ( IDENT_3 . METHOD_3 ( ) ) ) { return null ; } java . lang . Class < ? > IDENT_4 = IDENT_5 . METHOD_4 ( ) ; java . lang . Object array = java . lang . reflect . IDENT_6 . newInstance ( IDENT_4 , IDENT_3 . size ( ) ) ; java . util . Iterator < org . IDENT_0 . core . impl . provider . json . IDENT_2 > values = IDENT_3 . METHOD_5 ( ) ; int i = 0 ; if ( IDENT_4 . METHOD_6 ( ) ) { if ( org . IDENT_0 . core . impl . provider . json . IDENT_7 . METHOD_7 ( IDENT_4 ) ) { while ( values . hasNext ( ) ) { java . lang . reflect . IDENT_6 . set ( array , ( i ++ ) , org . IDENT_0 . core . impl . provider . json . IDENT_1 . METHOD_8 ( IDENT_4 , values . next ( ) ) ) ; } } else { while ( values . hasNext ( ) ) { java . lang . reflect . IDENT_6 . set ( array , ( i ++ ) , org . IDENT_0 . core . impl . provider . json . IDENT_1 . METHOD_1 ( IDENT_4 , values . next ( ) ) ) ; } } } else { if ( org . IDENT_0 . core . impl . provider . json . IDENT_7 . METHOD_7 ( IDENT_4 ) ) { while ( values . hasNext ( ) ) { java . lang . reflect . IDENT_6 . set ( array , ( i ++ ) , org . IDENT_0 . core . impl . provider . json . IDENT_1 . METHOD_8 ( IDENT_4 , values . next ( ) ) ) ; } } else { while ( values . hasNext ( ) ) { java . lang . reflect . IDENT_6 . set ( array , ( i ++ ) , org . IDENT_0 . core . impl . provider . json . IDENT_1 . METHOD_9 ( IDENT_4 , values . next ( ) ) ) ; } } } return array ; }
org . junit . Assert . assertNull ( array ) 