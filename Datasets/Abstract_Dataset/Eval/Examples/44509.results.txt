METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( ) ) . thenReturn ( STRING_0 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_1 = IDENT_2 . METHOD_2 ( IDENT_0 , null ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap ( 3 ) ; IDENT_3 . put ( "a" , "b" ) ; IDENT_3 . put ( STRING_1 , STRING_2 ) ; IDENT_3 . put ( STRING_3 , STRING_4 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( com . fasterxml . jackson . core . IDENT_4 , com . fasterxml . jackson . databind . IDENT_5 ) { if ( ( IDENT_6 . METHOD_1 ( ) ) == null ) { return null ; } java . util . Map < java . lang . String , java . lang . String > IDENT_7 = com . google . common . base . IDENT_8 . METHOD_3 ( "\n" ) . METHOD_4 ( ) . METHOD_5 ( STRING_5 ) . split ( IDENT_6 . METHOD_1 ( ) ) ; IDENT_7 = com . google . common . collect . IDENT_9 . METHOD_6 ( IDENT_7 , new com . google . common . base . IDENT_10 < java . lang . String , java . lang . String > ( ) { @ com . IDENT_11 . api . IDENT_12 . internal . Override public java . lang . String apply ( java . lang . String value ) { return value . trim ( ) ; } } ) ; return IDENT_7 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_1 ) 