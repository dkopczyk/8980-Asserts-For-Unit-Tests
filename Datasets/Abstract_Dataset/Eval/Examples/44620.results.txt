METHOD_0 ( ) { java . util . List < ddf . catalog . source . IDENT_0 > IDENT_1 = METHOD_1 ( true ) ; ddf . catalog . util . impl . IDENT_2 IDENT_3 = mock ( ddf . catalog . util . impl . IDENT_2 . class ) ; when ( IDENT_3 . METHOD_2 ( METHOD_3 ( ddf . catalog . source . IDENT_4 . class ) ) ) . thenReturn ( null ) ; ddf . catalog . impl . IDENT_5 framework = new ddf . catalog . impl . METHOD_4 ( null , ( ( ddf . catalog . source . IDENT_6 ) ( null ) ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_7 > ( ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_8 > ( ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_9 > ( ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_10 > ( ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_11 > ( ) , new java . util . ArrayList < ddf . catalog . plugin . IDENT_12 > ( ) , new java . util . ArrayList < ddf . catalog . source . IDENT_13 > ( ) , IDENT_1 , new java . util . ArrayList < ddf . catalog . resource . IDENT_14 > ( ) , null , null , null , IDENT_3 , null , null , null ) ; ddf . catalog . operation . IDENT_15 request = new ddf . catalog . operation . impl . METHOD_5 ( true ) ; ddf . catalog . operation . IDENT_16 response = null ; try { response = framework . METHOD_6 ( request ) ; } catch ( ddf . catalog . source . IDENT_17 e ) { org . junit . Assert . fail ( ) ; } java . util . Set < ddf . catalog . source . IDENT_18 > IDENT_19 = response . METHOD_6 ( ) ; for ( ddf . catalog . source . IDENT_18 IDENT_20 : IDENT_19 ) { ddf . catalog . impl . IDENT_21 . LOGGER . debug ( STRING_0 , IDENT_20 . METHOD_7 ( ) ) ; } "<AssertPlaceHolder>" ; } size ( ) { return IDENT_22 . size ( ) ; }
org . junit . Assert . assertEquals ( ( ( IDENT_1 . size ( ) ) + 1 ) , IDENT_19 . size ( ) ) 