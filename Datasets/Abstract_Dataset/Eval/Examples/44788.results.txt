METHOD_0 ( ) { java . io . File [ ] IDENT_0 = METHOD_1 ( 9 , IDENT_1 , STRING_0 ) ; IDENT_2 . METHOD_2 ( ) ; init ( ) ; IDENT_3 . set ( IDENT_0 . length ) ; java . util . stream . IDENT_4 . of ( IDENT_0 ) . METHOD_3 ( this :: IDENT_5 ) ; IDENT_2 . METHOD_2 ( ) ; verify ( IDENT_6 , times ( IDENT_0 . length ) ) . METHOD_4 ( any ( java . io . File . class ) , any ( org . apache . camel . spi . IDENT_7 . class ) ) ; IDENT_2 . METHOD_2 ( ) ; verify ( IDENT_6 , METHOD_5 ( ) ) . METHOD_6 ( any ( java . io . File . class ) , any ( org . apache . camel . spi . IDENT_7 . class ) ) ; verify ( IDENT_6 , METHOD_5 ( ) ) . METHOD_7 ( any ( java . io . File . class ) , any ( org . apache . camel . spi . IDENT_7 . class ) ) ; verify ( IDENT_6 , times ( ( ( IDENT_0 . length ) + ( IDENT_8 ) ) ) ) . METHOD_4 ( any ( java . io . File . class ) , any ( org . apache . camel . spi . IDENT_7 . class ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . io . File , org . apache . camel . spi . IDENT_7 ) { java . lang . String IDENT_9 = file . METHOD_8 ( ) . METHOD_9 ( ) ; java . lang . String IDENT_10 = METHOD_10 ( IDENT_9 , org . codice . ddf . catalog . content . monitor . IDENT_11 . IDENT_12 , IDENT_13 ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_10 ) ) { cb . METHOD_11 ( null ) ; return ; } org . apache . camel . IDENT_14 IDENT_15 = new org . codice . ddf . catalog . content . monitor . IDENT_16 . METHOD_12 ( file , ( ( org . apache . camel . component . file . IDENT_17 ) ( consumer . METHOD_13 ( ) ) ) ) . METHOD_14 ( java . util . Collections . singletonList ( IDENT_10 ) ) . METHOD_15 ( org . codice . ddf . catalog . content . monitor . IDENT_11 . IDENT_18 , org . codice . ddf . catalog . content . monitor . IDENT_11 . IDENT_12 ) . METHOD_16 ( new org . codice . ddf . catalog . content . monitor . IDENT_19 . METHOD_17 ( IDENT_9 , IDENT_13 ) ) . METHOD_16 ( cb ) . METHOD_18 ( ) ; consumer . METHOD_19 ( IDENT_15 ) ; }
org . junit . Assert . assertThat ( IDENT_8 , org . hamcrest . Matchers . is ( IDENT_0 . length ) ) 