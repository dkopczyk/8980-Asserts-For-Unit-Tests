METHOD_0 ( ) { entry = new org . codice . ddf . configuration . IDENT_0 . METHOD_1 ( IDENT_1 , com . google . common . collect . ImmutableMap . of ( IDENT_2 . IDENT_3 , org . codice . ddf . configuration . IDENT_0 . IDENT_4 . IDENT_5 , IDENT_2 . IDENT_6 , true ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 , METHOD_2 ( ) ) . METHOD_3 ( any ( java . nio . file . Path . class ) ) ; METHOD_4 ( report , STRING_0 ) ; } METHOD_5 ( org . codice . ddf . util . function . IDENT_8 ) { org . apache . commons . lang . IDENT_9 . METHOD_6 ( consumer , STRING_1 ) ; if ( ( IDENT_10 ) == null ) { this . IDENT_10 = false ; java . util . Optional < java . io . InputStream > is = java . util . Optional . empty ( ) ; try { is = METHOD_7 ( true ) ; final java . util . Optional < java . io . InputStream > IDENT_11 = is ; this . IDENT_10 = METHOD_8 ( ) . METHOD_9 ( ( ) -> consumer . accept ( METHOD_8 ( ) , IDENT_11 ) ) ; } catch ( java . io . IOException e ) { METHOD_8 ( ) . record ( new org . codice . ddf . IDENT_0 . METHOD_10 ( IDENT_12 . IDENT_13 , path , context . METHOD_11 ( ) . METHOD_12 ( ) , e ) ) ; } finally { is . METHOD_13 ( org . apache . commons . io . IDENT_14 :: IDENT_15 ) ; } } return IDENT_10 ; }
org . junit . Assert . assertThat ( entry . METHOD_5 ( true ) , org . hamcrest . CoreMatchers . equalTo ( false ) ) 