METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 } ; for ( java . lang . String IDENT_1 : IDENT_0 ) { edu . illinois . cs . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_5 < java . lang . String > IDENT_6 = edu . illinois . cs . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_7 . METHOD_1 ( ) . parse ( IDENT_1 ) ; edu . illinois . cs . IDENT_2 . core . IDENT_8 . IDENT_9 < java . lang . String > matcher = new edu . illinois . cs . IDENT_2 . core . IDENT_8 . METHOD_2 ( IDENT_6 ) ; boolean result = matcher . matches ( tree ) ; "<AssertPlaceHolder>" ; } } matches ( edu . illinois . cs . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_5 ) { boolean found = false ; IDENT_10 = new java . util . ArrayList ( ) ; for ( edu . illinois . cs . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_5 < T > node : edu . illinois . cs . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_11 . METHOD_3 ( tree ) ) { if ( IDENT_12 ) { edu . illinois . cs . IDENT_2 . core . IDENT_8 . METHOD_2 . logger . info ( STRING_2 ) ; edu . illinois . cs . IDENT_2 . core . IDENT_8 . METHOD_2 . logger . info ( node . toString ( ) ) ; } IDENT_13 = new java . util . ArrayList ( ) ; IDENT_13 = METHOD_4 ( node , METHOD_5 ( ) , IDENT_13 ) ; if ( ( IDENT_13 . size ( ) ) > 0 ) { if ( IDENT_12 ) { edu . illinois . cs . IDENT_2 . core . IDENT_8 . METHOD_2 . logger . info ( STRING_3 ) ; } IDENT_10 . addAll ( IDENT_13 ) ; found = true ; } } return found ; }
org . junit . Assert . assertEquals ( true , result ) 