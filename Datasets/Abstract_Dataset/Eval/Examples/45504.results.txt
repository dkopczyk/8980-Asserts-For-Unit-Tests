METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . runtime . options . IDENT_2 IDENT_3 = com . IDENT_0 . IDENT_1 . runtime . options . IDENT_2 . empty ( ) . with ( java . util . Arrays . asList ( "foo" , "bar" ) ) ; "<AssertPlaceHolder>" ; } resolve ( com . IDENT_0 . IDENT_1 . runtime . IDENT_4 , com . IDENT_0 . IDENT_1 . IDENT_5 ) { com . IDENT_0 . IDENT_1 . lang . IDENT_6 IDENT_7 = new com . IDENT_0 . IDENT_1 . lang . METHOD_1 ( IDENT_8 ) ; java . util . Properties properties = new java . util . Properties ( ) ; for ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 property : this . properties . values ( ) ) { java . lang . String name = property . getName ( ) ; java . lang . Object value = property . getValue ( ) ; if ( value != null ) { if ( value instanceof com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 . IDENT_10 ) { com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 . IDENT_10 IDENT_11 = ( ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 . IDENT_10 ) ( value ) ) ; value = IDENT_11 . resolve ( name , platform , IDENT_8 ) ; } if ( value instanceof java . util . Iterator < ? > ) { java . util . Iterator < ? > iterator = ( ( java . util . Iterator < ? > ) ( value ) ) ; if ( iterator . hasNext ( ) ) { value = iterator . next ( ) . toString ( ) ; } else { throw new java . lang . METHOD_2 ( java . lang . String . format ( STRING_0 , name ) ) ; } } if ( value != null ) { java . lang . String expression = value . toString ( ) . trim ( ) ; if ( ! ( expression . isEmpty ( ) ) ) { java . lang . Object result = IDENT_7 . evaluate ( expression , java . lang . Object . class ) ; expression = ( result == null ) ? "" : result . toString ( ) ; } com . IDENT_0 . IDENT_1 . IDENT_5 IDENT_12 = property . METHOD_3 ( ) ; java . lang . IDENT_13 < com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 . IDENT_14 > IDENT_15 = IDENT_12 . METHOD_4 ( IDENT_9 . IDENT_14 . class ) ; for ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_9 . IDENT_14 handler : IDENT_15 ) { try { handler . METHOD_5 ( name , expression , IDENT_8 ) ; } catch ( java . lang . Throwable t ) { t . printStackTrace ( ) ; } } properties . put ( name , expression ) ; } } } return properties ; }
org . junit . Assert . assertThat ( IDENT_3 . resolve ( null , null ) , contains ( "foo" , "bar" ) ) 