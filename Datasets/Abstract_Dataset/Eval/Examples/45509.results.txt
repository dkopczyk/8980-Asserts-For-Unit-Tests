METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = com . IDENT_0 . IDENT_1 . IDENT_2 . empty ( ) ; IDENT_3 . add ( com . IDENT_0 . IDENT_1 . runtime . options . IDENT_4 . of ( STRING_0 , STRING_0 ) ) ; IDENT_3 . add ( com . IDENT_0 . IDENT_1 . runtime . options . IDENT_4 . of ( STRING_1 ) ) ; IDENT_3 . add ( com . IDENT_0 . IDENT_1 . runtime . options . IDENT_4 . of ( STRING_2 ) ) ; IDENT_3 . add ( com . IDENT_0 . IDENT_1 . runtime . options . IDENT_4 . of ( STRING_3 , STRING_3 ) ) ; com . IDENT_0 . IDENT_1 . runtime . options . IDENT_5 IDENT_6 = IDENT_3 . get ( com . IDENT_0 . IDENT_1 . runtime . options . IDENT_5 . class ) . replace ( null , STRING_4 ) ; "<AssertPlaceHolder>" ; } resolve ( com . IDENT_0 . IDENT_1 . runtime . IDENT_7 , com . IDENT_0 . IDENT_1 . IDENT_2 ) { com . IDENT_0 . IDENT_1 . lang . IDENT_8 IDENT_9 = new com . IDENT_0 . IDENT_1 . lang . METHOD_1 ( IDENT_3 ) ; java . util . Properties properties = new java . util . Properties ( ) ; for ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 property : this . properties . values ( ) ) { java . lang . String name = property . getName ( ) ; java . lang . Object value = property . getValue ( ) ; if ( value != null ) { if ( value instanceof com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 . IDENT_11 ) { com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 . IDENT_11 IDENT_12 = ( ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 . IDENT_11 ) ( value ) ) ; value = IDENT_12 . resolve ( name , platform , IDENT_3 ) ; } if ( value instanceof java . util . Iterator < ? > ) { java . util . Iterator < ? > iterator = ( ( java . util . Iterator < ? > ) ( value ) ) ; if ( iterator . hasNext ( ) ) { value = iterator . next ( ) . toString ( ) ; } else { throw new java . lang . METHOD_2 ( java . lang . String . format ( STRING_5 , name ) ) ; } } if ( value != null ) { java . lang . String expression = value . toString ( ) . trim ( ) ; if ( ! ( expression . isEmpty ( ) ) ) { java . lang . Object result = IDENT_9 . evaluate ( expression , java . lang . Object . class ) ; expression = ( result == null ) ? "" : result . toString ( ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_13 = property . METHOD_3 ( ) ; java . lang . IDENT_14 < com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 . IDENT_15 > IDENT_16 = IDENT_13 . METHOD_4 ( IDENT_10 . IDENT_15 . class ) ; for ( com . IDENT_0 . IDENT_1 . runtime . java . options . IDENT_10 . IDENT_15 handler : IDENT_16 ) { try { handler . METHOD_5 ( name , expression , IDENT_3 ) ; } catch ( java . lang . Throwable t ) { t . printStackTrace ( ) ; } } properties . put ( name , expression ) ; } } } return properties ; }
org . junit . Assert . assertThat ( IDENT_6 . resolve ( null , null ) , contains ( STRING_0 , STRING_0 , STRING_4 , STRING_2 , STRING_3 , STRING_3 ) ) 