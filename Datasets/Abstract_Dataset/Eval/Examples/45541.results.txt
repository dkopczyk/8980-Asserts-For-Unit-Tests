METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 args = new com . github . IDENT_0 . METHOD_1 ( ) ; java . lang . String IDENT_2 = ( IDENT_3 ) + STRING_0 ; java . lang . String [ ] options = new java . lang . String [ ] { STRING_1 + ( IDENT_4 . IDENT_5 . METHOD_2 ( ) ) , STRING_1 + ( IDENT_4 . IDENT_6 . METHOD_2 ( ) ) , IDENT_2 } ; args . parse ( options ) ; args . METHOD_3 ( IDENT_4 . IDENT_7 ) ; com . github . IDENT_0 . IDENT_8 . IDENT_9 builder = new com . github . IDENT_0 . IDENT_8 . METHOD_4 ( args ) ; com . github . IDENT_0 . IDENT_10 IDENT_11 = new com . github . IDENT_0 . METHOD_5 ( builder . build ( ) ) ; IDENT_12 . IDENT_13 . METHOD_6 ( IDENT_11 ) ; java . lang . Class < ? > IDENT_14 = java . lang . IDENT_15 . METHOD_7 ( ) . METHOD_8 ( IDENT_3 ) ; IDENT_12 . IDENT_13 . METHOD_9 ( IDENT_14 ) ; java . lang . Object object = IDENT_14 . newInstance ( ) ; for ( int i = 0 ; i < ( IDENT_16 . length ) ; i ++ ) { java . lang . reflect . Method method = IDENT_14 . METHOD_10 ( methods [ i ] ) ; double [ ] res = ( ( double [ ] ) ( method . invoke ( object ) ) ) ; double [ ] expect = IDENT_16 [ i ] ; java . lang . String out = ( ( ( ( ( ( ( ( ( STRING_2 + ( methods [ i ] ) ) + STRING_3 ) + ( res [ 0 ] ) ) + STRING_4 ) + ( res [ 1 ] ) ) + STRING_5 ) + ( expect [ 0 ] ) ) + STRING_4 ) + ( expect [ 1 ] ) ) + "]" ; "<AssertPlaceHolder>" ; } IDENT_12 . IDENT_13 . METHOD_11 ( IDENT_11 ) ; } invoke ( org . IDENT_17 . IDENT_18 . IDENT_19 ) { IDENT_20 . METHOD_12 ( IDENT_21 , IDENT_22 , method , IDENT_23 , ( ( IDENT_21 ) == ( IDENT_24 ) ) ) ; }
org . junit . Assert . assertTrue ( out , ( ( ( res [ 0 ] ) == ( expect [ 0 ] ) ) && ( ( res [ 1 ] ) == ( expect [ 1 ] ) ) ) ) 