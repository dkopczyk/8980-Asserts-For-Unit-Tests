METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = METHOD_1 ( STRING_0 ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { IDENT_3 . store ( IDENT_4 . IDENT_5 , key ( i ) , value ( 1 ) ) ; } IDENT_6 . METHOD_2 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_7 c = IDENT_3 . METHOD_3 ( null ) ; c . first ( ) ; c . METHOD_4 ( INT_1 ) ; METHOD_5 ( key ( INT_1 ) , c . key ( ) ) ; IDENT_6 . METHOD_2 ( ) ; c . first ( ) ; c . METHOD_4 ( INT_1 ) ; METHOD_5 ( key ( INT_1 ) , c . key ( ) ) ; c . METHOD_4 ( INT_2 ) ; METHOD_5 ( key ( INT_3 ) , c . key ( ) ) ; IDENT_6 . METHOD_2 ( ) ; c . METHOD_6 ( ) ; c . METHOD_4 ( ( - INT_4 ) ) ; METHOD_5 ( key ( INT_5 ) , c . key ( ) ) ; c . METHOD_6 ( ) ; c . METHOD_4 ( ( - INT_6 ) ) ; METHOD_5 ( key ( INT_7 ) , c . key ( ) ) ; c . METHOD_4 ( ( - INT_8 ) ) ; METHOD_5 ( key ( INT_1 ) , c . key ( ) ) ; c . METHOD_4 ( Long . IDENT_8 ) ; "<AssertPlaceHolder>" ; try { c . METHOD_4 ( Long . MAX_VALUE ) ; org . junit . Assert . fail ( ) ; } catch ( org . IDENT_0 . IDENT_1 . IDENT_9 e ) { } } key ( ) { return IDENT_10 . key ( ) ; }
org . junit . Assert . assertNull ( c . key ( ) ) 