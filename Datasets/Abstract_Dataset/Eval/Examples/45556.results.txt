METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 db = METHOD_1 ( getClass ( ) , METHOD_2 ( new org . IDENT_0 . IDENT_1 . METHOD_3 ( ) . METHOD_4 ( ( - 1 ) , null ) ) ) ; org . IDENT_0 . IDENT_1 . IDENT_3 IDENT_4 = db . METHOD_5 ( "test" ) ; final int IDENT_5 = INT_0 ; int [ ] IDENT_6 = new int [ ] { 0 , 10 , INT_1 , 100 , INT_2 , 1000 , INT_3 , INT_4 , INT_5 } ; for ( int t = 0 ; t < 2 ; t ++ ) { for ( int q = 0 ; q < 3 ; q ++ ) { for ( int p : IDENT_6 ) { byte [ ] IDENT_7 = new byte [ p ] ; new org . IDENT_0 . IDENT_1 . METHOD_6 ( ( IDENT_5 + p ) ) . METHOD_7 ( IDENT_7 ) ; org . IDENT_0 . IDENT_1 . IDENT_8 view = IDENT_4 . METHOD_8 ( IDENT_7 , IDENT_7 . length ) ; org . IDENT_0 . IDENT_1 . METHOD_6 IDENT_9 = new org . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_5 ) ; byte [ ] value = new byte [ 4 ] ; for ( int i = 0 ; i < 1000 ; i ++ ) { int IDENT_10 = ( IDENT_9 . METHOD_9 ( INT_5 ) ) + 1 ; byte [ ] key = new byte [ IDENT_10 ] ; IDENT_9 . METHOD_7 ( key ) ; org . IDENT_0 . IDENT_1 . Utils . METHOD_10 ( value , 0 , org . IDENT_0 . IDENT_1 . IDENT_11 . hash ( key ) ) ; if ( t == 0 ) { view . store ( IDENT_12 . IDENT_13 , key , value ) ; } else { byte [ ] found = view . load ( IDENT_12 . IDENT_13 , key ) ; METHOD_11 ( value , found ) ; } } } if ( t == 0 ) { "<AssertPlaceHolder>" ; } } } } verify ( org . IDENT_0 . IDENT_1 . IDENT_14 ) { if ( IDENT_15 == null ) { IDENT_15 = new org . IDENT_0 . IDENT_1 . METHOD_12 ( ) ; } org . IDENT_0 . IDENT_1 . IDENT_3 view = METHOD_13 ( ) ; IDENT_15 . IDENT_16 = false ; METHOD_14 ( view , IDENT_15 ) ; boolean IDENT_17 = ! ( IDENT_15 . IDENT_16 ) ; IDENT_15 . METHOD_15 ( view , IDENT_17 , null ) ; return IDENT_17 ; }
org . junit . Assert . assertTrue ( IDENT_4 . verify ( null ) ) 