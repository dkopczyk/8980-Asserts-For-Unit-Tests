METHOD_0 ( ) { final int count = INT_0 ; final long IDENT_0 = INT_1 ; java . util . IDENT_1 IDENT_2 = new java . util . METHOD_1 ( IDENT_0 ) ; org . IDENT_3 . IDENT_4 . IDENT_5 s = IDENT_6 . METHOD_2 ( null ) ; for ( int i = 0 ; i < count ; i ++ ) { byte [ ] key = METHOD_3 ( IDENT_2 , 100 , INT_2 ) ; byte [ ] value = METHOD_3 ( IDENT_2 , 100 , INT_3 ) ; s . add ( key , value ) ; } org . IDENT_3 . IDENT_4 . IDENT_7 IDENT_8 = s . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; IDENT_2 = new java . util . METHOD_1 ( IDENT_0 ) ; for ( int i = 0 ; i < count ; i ++ ) { byte [ ] key = METHOD_3 ( IDENT_2 , 100 , INT_2 ) ; byte [ ] value = METHOD_3 ( IDENT_2 , 100 , INT_3 ) ; METHOD_5 ( value , IDENT_8 . load ( null , key ) ) ; } } count ( byte [ ] , byte [ ] ) { org . IDENT_3 . IDENT_4 . IDENT_9 IDENT_10 = METHOD_6 ( IDENT_11 . IDENT_12 ) ; org . IDENT_3 . IDENT_4 . IDENT_9 IDENT_13 = null ; try { if ( IDENT_14 != null ) { IDENT_13 = METHOD_6 ( IDENT_11 . IDENT_12 ) ; IDENT_13 . IDENT_15 = true ; IDENT_13 . find ( IDENT_14 ) ; if ( ( IDENT_13 . IDENT_16 ) == null ) { return 0 ; } } return IDENT_10 . count ( IDENT_17 , IDENT_13 ) ; } finally { IDENT_10 . METHOD_7 ( ) ; if ( IDENT_13 != null ) { IDENT_13 . METHOD_7 ( ) ; } } }
org . junit . Assert . assertEquals ( count , IDENT_8 . count ( null , null ) ) 