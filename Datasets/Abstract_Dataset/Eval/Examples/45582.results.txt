METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = IDENT_4 . METHOD_1 ( "test" ) ; byte [ ] key = STRING_0 . getBytes ( ) ; byte [ ] value = "value" . getBytes ( ) ; org . IDENT_0 . IDENT_1 . IDENT_5 IDENT_6 = IDENT_3 . METHOD_2 ( IDENT_7 . IDENT_8 , key ) ; IDENT_6 . METHOD_3 ( 0 , 10 ) ; "<AssertPlaceHolder>" ; IDENT_3 . store ( IDENT_7 . IDENT_8 , key , value ) ; IDENT_6 . METHOD_3 ( 0 , value . length ) ; METHOD_4 ( new byte [ value . length ] , IDENT_3 . load ( IDENT_7 . IDENT_8 , key ) ) ; IDENT_3 . store ( IDENT_7 . IDENT_8 , key , value ) ; IDENT_6 . METHOD_3 ( 1 , ( ( value . length ) - 2 ) ) ; byte [ ] expected = value . METHOD_5 ( ) ; for ( int i = 1 ; i < ( ( expected . length ) - 1 ) ; i ++ ) { expected [ i ] = 0 ; } METHOD_4 ( expected , IDENT_3 . load ( IDENT_7 . IDENT_8 , key ) ) ; IDENT_3 . store ( IDENT_7 . IDENT_8 , key , value ) ; IDENT_6 . METHOD_3 ( 1 , 1000 ) ; expected = value . METHOD_5 ( ) ; for ( int i = 1 ; i < ( expected . length ) ; i ++ ) { expected [ i ] = 0 ; } METHOD_4 ( expected , IDENT_3 . load ( IDENT_7 . IDENT_8 , key ) ) ; try { IDENT_6 . METHOD_3 ( ( - 1 ) , 1000 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalArgumentException e ) { } IDENT_6 . close ( ) ; } load ( org . IDENT_0 . IDENT_1 . IDENT_7 , byte [ ] ) { return METHOD_6 ( key ) ? IDENT_9 . load ( IDENT_10 , key ) : null ; }
org . junit . Assert . assertNull ( IDENT_3 . load ( IDENT_7 . IDENT_8 , key ) ) 