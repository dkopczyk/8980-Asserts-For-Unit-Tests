METHOD_0 ( ) { System . out . println ( STRING_0 ) ; gov . hhs . fha . nhinc . common . IDENT_0 . IDENT_1 IDENT_2 = new gov . hhs . fha . nhinc . common . IDENT_0 . METHOD_1 ( ) ; gov . hhs . fha . nhinc . common . IDENT_0 . IDENT_3 user = new gov . hhs . fha . nhinc . common . IDENT_0 . METHOD_2 ( ) ; gov . hhs . fha . nhinc . common . IDENT_0 . IDENT_4 hc = new gov . hhs . fha . nhinc . common . IDENT_0 . METHOD_3 ( ) ; hc . METHOD_4 ( STRING_1 ) ; hc . setName ( "test" ) ; user . METHOD_5 ( "test" ) ; user . METHOD_6 ( hc ) ; IDENT_2 . METHOD_7 ( user ) ; gov . hhs . fha . nhinc . transform . IDENT_5 . IDENT_6 instance = new gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 ( ) ; boolean expResult = false ; boolean result = instance . METHOD_9 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( gov . hhs . fha . nhinc . common . IDENT_0 . METHOD_1 ) { if ( ( IDENT_7 != null ) && ( ( IDENT_7 . METHOD_10 ( ) ) != null ) ) { if ( ( IDENT_7 . METHOD_10 ( ) . METHOD_11 ( ) ) != null ) { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . debug ( ( STRING_2 + ( IDENT_7 . METHOD_10 ( ) . METHOD_11 ( ) ) ) ) ; } else { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . error ( STRING_3 ) ; return true ; } if ( ( IDENT_7 . METHOD_10 ( ) . METHOD_12 ( ) . METHOD_13 ( ) ) != null ) { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . debug ( ( STRING_4 + ( IDENT_7 . METHOD_10 ( ) . METHOD_12 ( ) . METHOD_13 ( ) ) ) ) ; } else { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . error ( STRING_5 ) ; return true ; } if ( ( IDENT_7 . METHOD_10 ( ) . METHOD_12 ( ) . getName ( ) ) != null ) { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . debug ( ( STRING_6 + ( IDENT_7 . METHOD_10 ( ) . METHOD_12 ( ) . getName ( ) ) ) ) ; } else { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . error ( STRING_7 ) ; return true ; } } else { gov . hhs . fha . nhinc . transform . IDENT_5 . METHOD_8 . LOG . error ( STRING_8 ) ; return true ; } return false ; }
org . junit . Assert . assertEquals ( expResult , result ) 