METHOD_0 ( ) { gov . hhs . fha . nhinc . configuration . IDENT_0 . IDENT_1 registry = gov . hhs . fha . nhinc . configuration . IDENT_0 . IDENT_1 . getInstance ( ) ; gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_3 IDENT_4 = gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_3 . IDENT_5 ; gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_6 IDENT_7 = gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_6 . IDENT_8 ; boolean status = true ; gov . hhs . fha . nhinc . IDENT_9 . configuration . IDENT_0 . IDENT_10 IDENT_11 = mock ( gov . hhs . fha . nhinc . IDENT_9 . configuration . IDENT_0 . IDENT_10 . class ) ; when ( IDENT_11 . METHOD_1 ( ) ) . thenReturn ( status ) ; when ( IDENT_11 . METHOD_2 ( ) ) . thenReturn ( IDENT_3 . IDENT_5 ) ; registry . METHOD_3 ( IDENT_11 ) ; boolean IDENT_12 = registry . METHOD_4 ( IDENT_4 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_3 , gov . hhs . fha . nhinc . configuration . IDENT_2 . IDENT_6 ) { boolean IDENT_13 = false ; for ( gov . hhs . fha . nhinc . configuration . IDENT_0 . IDENT_14 b : IDENT_15 ) { if ( ( ( gov . hhs . fha . nhinc . configuration . IDENT_0 . IDENT_1 . METHOD_5 ( IDENT_7 ) ) && ( b . METHOD_2 ( ) . equals ( IDENT_4 ) ) ) && ( b . METHOD_1 ( ) ) ) { IDENT_13 = true ; } if ( ( ( gov . hhs . fha . nhinc . configuration . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_7 ) ) && ( b . METHOD_2 ( ) . equals ( IDENT_4 ) ) ) && ( b . METHOD_7 ( ) ) ) { IDENT_13 = true ; } } return IDENT_13 ; }
org . junit . Assert . assertEquals ( true , IDENT_12 ) 