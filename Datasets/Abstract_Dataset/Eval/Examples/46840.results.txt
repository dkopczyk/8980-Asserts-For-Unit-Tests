METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . db . client . model . IDENT_2 project = new com . IDENT_0 . IDENT_1 . db . client . model . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_3 = new java . util . HashMap ( ) ; IDENT_3 . put ( STRING_0 , asList ( STRING_1 , STRING_0 ) ) ; IDENT_3 . put ( STRING_2 , asList ( STRING_3 , STRING_4 ) ) ; IDENT_3 . put ( STRING_5 , asList ( STRING_1 , STRING_0 ) ) ; IDENT_3 . put ( STRING_3 3 , asList ( STRING_3 , STRING_4 ) ) ; IDENT_3 . put ( STRING_6 , asList ( STRING_1 , STRING_6 ) ) ; IDENT_3 . put ( STRING_7 , asList ( STRING_3 , STRING_8 ) ) ; IDENT_3 . put ( STRING_9 , asList ( STRING_1 , STRING_3 2 , STRING_6 ) ) ; IDENT_3 . put ( STRING_3 1 , asList ( STRING_3 , STRING_3 0 , STRING_8 ) ) ; for ( Map . Entry < java . lang . String , java . util . List < java . lang . String > > entry : IDENT_3 . entrySet ( ) ) { project . METHOD_2 ( entry . getKey ( ) ) ; com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 IDENT_5 = com . IDENT_0 . IDENT_1 . IDENT_6 . impl . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_3 ( project ) ; for ( java . lang . String name : IDENT_5 ) { "<AssertPlaceHolder>" ; } } } getValue ( ) { return this . value ; }
org . junit . Assert . assertTrue ( entry . getValue ( ) . contains ( name ) ) 