METHOD_0 ( ) { METHOD_1 ( ) ; int IDENT_0 = IDENT_1 . METHOD_2 ( ) . METHOD_3 ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_5 . IDENT_6 . info ( STRING_0 , i ) ; com . IDENT_2 . IDENT_3 . db . IDENT_4 . List < java . lang . Class < ? extends com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_7 > > types = IDENT_1 . METHOD_2 ( ) . METHOD_4 ( i ) ; for ( java . lang . Class < ? extends com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_7 > type : types ) { if ( ( ! ( type . METHOD_5 ( com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_8 . class ) ) ) || ( type . METHOD_6 ( com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_8 . class ) . value ( ) . equals ( IDENT_9 . IDENT_10 ) ) ) { METHOD_7 ( i , type ) ; } } } com . IDENT_2 . IDENT_3 . db . client . IDENT_11 . IDENT_12 list = new com . IDENT_2 . IDENT_3 . db . client . IDENT_11 . METHOD_8 ( ) ; IDENT_13 . METHOD_9 ( IDENT_14 . IDENT_15 . METHOD_10 ( com . IDENT_2 . IDENT_3 . db . IDENT_4 . IDENT_16 . class , 0 ) , list ) ; com . IDENT_2 . IDENT_3 . db . IDENT_4 . List < java . net . URI > IDENT_17 = new com . IDENT_2 . IDENT_3 . db . IDENT_4 . ArrayList < java . net . URI > ( ) ; for ( com . IDENT_2 . IDENT_3 . db . IDENT_4 . Iterator < java . net . URI > iterator = list . iterator ( ) ; iterator . hasNext ( ) ; ) { IDENT_17 . add ( iterator . next ( ) ) ; } "<AssertPlaceHolder>" ; } isEmpty ( ) { throw new java . lang . METHOD_11 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_17 . isEmpty ( ) ) 