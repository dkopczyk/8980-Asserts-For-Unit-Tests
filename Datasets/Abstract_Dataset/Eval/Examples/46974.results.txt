METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . json . mapping . IDENT_2 > IDENT_3 = null ; java . io . InputStream IDENT_4 = this . getClass ( ) . getResourceAsStream ( STRING_0 ) ; IDENT_5 = new com . IDENT_0 . IDENT_1 . json . jackson . METHOD_1 ( METHOD_2 ( IDENT_4 ) ) ; try { IDENT_3 = IDENT_5 . METHOD_3 ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } for ( com . IDENT_0 . IDENT_1 . json . mapping . IDENT_6 IDENT_7 : IDENT_3 ) { System . out . println ( IDENT_7 . toString ( ) ) ; } "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; java . lang . String nl = java . lang . System . getProperty ( STRING_1 ) ; builder . append ( STRING_2 ) ; builder . append ( nl ) ; for ( java . lang . String IDENT_8 : IDENT_9 ) { builder . append ( IDENT_8 ) ; builder . append ( nl ) ; } builder . append ( nl ) ; builder . append ( STRING_3 ) ; builder . append ( nl ) ; if ( ( IDENT_10 ) != null ) { for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_10 . entrySet ( ) ) { builder . append ( ( ( ( entry . getKey ( ) ) + STRING_4 ) + ( entry . getValue ( ) ) ) ) ; builder . append ( nl ) ; } builder . append ( nl ) ; } builder . append ( STRING_5 ) ; builder . append ( nl ) ; if ( ( IDENT_11 ) != null ) { for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_11 . entrySet ( ) ) { builder . append ( ( ( ( entry . getKey ( ) ) + STRING_4 ) + ( entry . getValue ( ) ) ) ) ; builder . append ( nl ) ; } builder . append ( nl ) ; } return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( true , ( ( IDENT_3 . get ( 0 ) ) instanceof com . IDENT_0 . IDENT_1 . json . mapping . IDENT_2 ) ) 