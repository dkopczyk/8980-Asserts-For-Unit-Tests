METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . User user = METHOD_1 ( IDENT_2 , STRING_0 ) ; org . IDENT_0 . IDENT_1 . model . IDENT_3 root = ( ( org . IDENT_0 . IDENT_1 . model . IDENT_3 ) ( IDENT_4 . METHOD_2 ( user ) ) ) ; org . IDENT_0 . IDENT_1 . model . IDENT_3 a = new org . IDENT_0 . IDENT_1 . model . hibernate . METHOD_3 ( ) ; a . setName ( "a" ) ; a . METHOD_4 ( user ) ; a = IDENT_4 . METHOD_5 ( root , a ) ; org . IDENT_0 . IDENT_1 . model . IDENT_5 item = METHOD_6 ( ) ; item . setName ( "test" ) ; org . IDENT_0 . IDENT_1 . model . IDENT_5 IDENT_6 = IDENT_4 . METHOD_7 ( a , item ) ; METHOD_8 ( ) ; org . IDENT_0 . IDENT_1 . model . IDENT_5 IDENT_7 = ( ( org . IDENT_0 . IDENT_1 . model . IDENT_5 ) ( IDENT_4 . METHOD_9 ( IDENT_6 . METHOD_10 ( ) ) ) ) ; "<AssertPlaceHolder>" ; org . IDENT_0 . IDENT_1 . model . IDENT_3 b = new org . IDENT_0 . IDENT_1 . model . hibernate . METHOD_3 ( ) ; b . setName ( "b" ) ; b . METHOD_4 ( user ) ; b = IDENT_4 . METHOD_5 ( root , b ) ; org . IDENT_0 . IDENT_1 . model . IDENT_5 IDENT_8 = METHOD_6 ( ) ; IDENT_8 . setName ( "test" ) ; IDENT_4 . METHOD_7 ( b , IDENT_8 ) ; try { IDENT_4 . METHOD_11 ( IDENT_7 , b ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( org . IDENT_0 . IDENT_1 . dao . IDENT_9 e ) { } } METHOD_12 ( ) { if ( ( IDENT_10 ) != null ) { return IDENT_10 ; } IDENT_10 = new java . util . HashSet < org . IDENT_0 . IDENT_1 . model . IDENT_3 > ( ) ; for ( org . IDENT_0 . IDENT_1 . model . IDENT_11 IDENT_12 : IDENT_13 ) { IDENT_10 . add ( IDENT_12 . METHOD_13 ( ) ) ; } IDENT_10 = java . util . Collections . METHOD_14 ( IDENT_10 ) ; return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_7 . METHOD_12 ( ) . size ( ) , 1 ) 