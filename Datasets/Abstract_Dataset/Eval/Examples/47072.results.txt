METHOD_0 ( ) { com . couchbase . client . core . message . IDENT_0 . IDENT_1 IDENT_2 = new com . couchbase . client . core . message . IDENT_0 . METHOD_1 ( 1 , INT_0 , 1000 , STRING_0 ) ; com . couchbase . client . core . message . IDENT_0 . METHOD_1 IDENT_3 = new com . couchbase . client . core . message . IDENT_0 . METHOD_1 ( 2 , INT_1 , INT_2 , STRING_0 ) ; com . couchbase . client . java . document . IDENT_4 IDENT_5 = com . couchbase . client . java . document . IDENT_4 . create ( STRING_1 , 0 , com . couchbase . client . java . document . json . IDENT_6 . empty ( ) , 0 , IDENT_2 ) ; com . couchbase . client . java . document . IDENT_4 IDENT_7 = com . couchbase . client . java . document . IDENT_4 . create ( STRING_1 , 0 , com . couchbase . client . java . document . json . IDENT_6 . empty ( ) , 0 , IDENT_3 ) ; com . couchbase . client . java . search . IDENT_8 p = new com . couchbase . client . java . search . METHOD_2 ( "foo" , null ) . METHOD_3 ( IDENT_9 . IDENT_10 ) . METHOD_4 ( IDENT_5 , IDENT_7 ) ; com . couchbase . client . java . document . json . IDENT_6 result = com . couchbase . client . java . document . json . IDENT_6 . empty ( ) ; p . METHOD_5 ( result ) ; com . couchbase . client . java . document . json . IDENT_6 IDENT_11 = com . couchbase . client . java . document . json . IDENT_6 . create ( ) . put ( "foo" , com . couchbase . client . java . document . json . IDENT_6 . create ( ) . put ( STRING_2 , INT_3 ) . put ( STRING_3 , INT_4 ) ) ; com . couchbase . client . java . document . json . IDENT_6 expected = com . couchbase . client . java . document . json . IDENT_6 . create ( ) . put ( STRING_4 , com . couchbase . client . java . document . json . IDENT_6 . create ( ) . put ( STRING_5 , com . couchbase . client . java . document . json . IDENT_6 . create ( ) . put ( STRING_6 , STRING_7 ) . put ( STRING_8 , IDENT_11 ) ) ) ; "<AssertPlaceHolder>" ; } put ( java . lang . String , IDENT_12 ) { if ( key == null ) { throw new java . lang . METHOD_6 ( STRING_9 ) ; } if ( ! ( com . couchbase . client . java . document . json . IDENT_13 . METHOD_7 ( value ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_10 ) ; } for ( int i = 0 ; i < ( com . couchbase . client . java . IDENT_14 . collections . IDENT_15 . IDENT_16 ) ; i ++ ) { try { com . couchbase . client . java . IDENT_17 . IDENT_18 < com . couchbase . client . core . message . IDENT_0 . IDENT_17 . IDENT_19 . IDENT_20 > IDENT_21 = IDENT_22 . METHOD_8 ( id ) . get ( key ) . execute ( ) ; long IDENT_23 = IDENT_21 . METHOD_9 ( ) ; java . lang . Object result = null ; if ( IDENT_21 . exists ( key ) ) { result = IDENT_21 . content ( key ) ; } IDENT_22 . METHOD_10 ( id ) . METHOD_11 ( key , value , false ) . METHOD_12 ( IDENT_23 ) . execute ( ) ; return ( ( IDENT_12 ) ( result ) ) ; } catch ( com . couchbase . client . java . error . IDENT_24 ex ) { } } throw new java . util . METHOD_13 ( ( ( STRING_11 + ( com . couchbase . client . java . IDENT_14 . collections . IDENT_15 . IDENT_16 ) ) + STRING_12 ) ) ; }
org . junit . Assert . assertEquals ( expected , result ) 