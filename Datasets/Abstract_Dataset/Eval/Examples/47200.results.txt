METHOD_0 ( ) { com . couchbase . client . core . message . IDENT_0 IDENT_1 = com . couchbase . client . core . message . IDENT_0 . convert ( io . netty . buffer . IDENT_2 . buffer ( ) ) ; "<AssertPlaceHolder>" ; } convert ( io . netty . buffer . IDENT_3 ) { if ( ( input . METHOD_1 ( ) ) <= 0 ) { return null ; } try { byte [ ] IDENT_4 = new byte [ input . METHOD_1 ( ) ] ; input . METHOD_2 ( IDENT_4 ) ; java . util . HashMap < java . lang . String , java . util . HashMap < java . lang . String , java . lang . String > > result = com . couchbase . client . core . utils . IDENT_5 . METHOD_3 ( IDENT_4 , com . couchbase . client . core . message . IDENT_0 . IDENT_6 ) ; java . util . HashMap < java . lang . String , java . lang . String > IDENT_7 = result . get ( STRING_0 ) ; if ( IDENT_7 == null ) { com . couchbase . client . core . message . IDENT_0 . LOGGER . warn ( STRING_1 ) ; return null ; } return new com . couchbase . client . core . message . METHOD_4 ( IDENT_7 . get ( STRING_2 ) , IDENT_7 . get ( STRING_3 ) ) ; } catch ( java . lang . Exception ex ) { com . couchbase . client . core . message . METHOD_4 . LOGGER . warn ( STRING_4 , ex ) ; return null ; } }
org . junit . Assert . assertNull ( IDENT_1 ) 