METHOD_0 ( ) { java . util . Calendar actual = IDENT_0 . common . type . IDENT_1 . METHOD_1 ( STRING_0 ) ; java . util . Calendar expected = IDENT_0 . common . IDENT_2 . METHOD_2 ( INT_0 , 9 , INT_1 , 3 , INT_2 , INT_3 , INT_4 ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . Calendar , boolean ) { if ( METHOD_2 == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } int IDENT_3 = METHOD_2 . get ( IDENT_0 . common . type . IDENT_4 ) ; if ( ( METHOD_2 . METHOD_5 ( IDENT_0 . common . type . IDENT_5 ) ) && ( ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_5 ) ) == ( IDENT_6 ) ) ) { java . lang . StringBuilder buffer = new java . lang . StringBuilder ( ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_7 . format ( IDENT_3 ) ) ; buffer . append ( STRING_2 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( ( ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_9 ) ) + 1 ) ) ) ; buffer . append ( STRING_2 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_10 ) ) ) ; buffer . append ( STRING_3 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_11 ) ) ) ; buffer . append ( STRING_4 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_12 ) ) ) ; buffer . append ( STRING_4 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_13 ) ) ) ; if ( IDENT_14 ) { buffer . append ( STRING_5 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_15 . format ( METHOD_2 . get ( IDENT_0 . common . type . IDENT_16 ) ) ) ; } if ( METHOD_2 . METHOD_6 ( ) . equals ( IDENT_0 . common . type . IDENT_17 . IDENT_18 ) ) buffer . append ( STRING_6 ) ; else { buffer . append ( STRING_7 ) ; int IDENT_19 = ( ( METHOD_2 . METHOD_6 ( ) . METHOD_7 ( ) ) / 1000 ) / INT_5 ; int IDENT_20 = ( ( ( METHOD_2 . METHOD_6 ( ) . METHOD_7 ( ) ) / 1000 ) / INT_6 ) - ( IDENT_19 * INT_6 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( IDENT_19 ) ) ; buffer . append ( STRING_4 ) ; buffer . append ( IDENT_0 . common . type . IDENT_1 . IDENT_8 . format ( IDENT_20 ) ) ; } return buffer . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 . common . type . IDENT_1 . METHOD_4 ( expected , true ) , IDENT_0 . common . type . IDENT_1 . METHOD_4 ( actual , true ) ) 