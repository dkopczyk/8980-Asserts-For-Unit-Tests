METHOD_0 ( ) { java . util . List < co . IDENT_0 . in . IDENT_1 . model . IDENT_2 > IDENT_3 = new co . IDENT_0 . in . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( 1 ) . METHOD_2 ( INT_0 ) . METHOD_3 ( ) . add ( 1 ) . add ( 2 ) . end ( ) . build ( ) ; java . io . ByteArrayOutputStream IDENT_4 = new java . io . ByteArrayOutputStream ( ) ; co . IDENT_0 . in . IDENT_1 . IDENT_5 IDENT_6 = new co . IDENT_0 . in . IDENT_1 . METHOD_4 ( IDENT_4 ) ; IDENT_6 . encode ( IDENT_3 ) ; java . io . ByteArrayInputStream IDENT_7 = new java . io . ByteArrayInputStream ( IDENT_4 . toByteArray ( ) ) ; co . IDENT_0 . in . IDENT_1 . IDENT_8 IDENT_9 = new co . IDENT_0 . in . IDENT_1 . METHOD_5 ( IDENT_7 ) ; co . IDENT_0 . in . IDENT_1 . model . IDENT_10 expected = new co . IDENT_0 . in . IDENT_1 . model . METHOD_6 ( new co . IDENT_0 . in . IDENT_1 . model . METHOD_7 ( 1 ) , new co . IDENT_0 . in . IDENT_1 . model . METHOD_7 ( 2 ) ) ; expected . METHOD_8 ( ) . METHOD_9 ( new co . IDENT_0 . in . IDENT_1 . model . METHOD_10 ( 1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( ) { int IDENT_11 ; try { IDENT_11 = IDENT_12 . read ( ) ; } catch ( java . io . IOException IDENT_13 ) { throw new co . IDENT_0 . in . IDENT_1 . METHOD_12 ( IDENT_13 ) ; } if ( IDENT_11 == ( - 1 ) ) { return null ; } switch ( co . IDENT_0 . in . IDENT_1 . model . IDENT_14 . METHOD_13 ( IDENT_11 ) ) { case IDENT_15 : return IDENT_16 . decode ( IDENT_11 ) ; case IDENT_17 : return IDENT_18 . decode ( IDENT_11 ) ; case IDENT_19 : return IDENT_20 . decode ( IDENT_11 ) ; case IDENT_21 : return IDENT_22 . decode ( IDENT_11 ) ; case IDENT_23 : return IDENT_24 . decode ( IDENT_11 ) ; case IDENT_25 : return IDENT_26 . decode ( IDENT_11 ) ; case IDENT_27 : return IDENT_28 . decode ( IDENT_11 ) ; case IDENT_29 : co . IDENT_0 . in . IDENT_1 . model . METHOD_10 IDENT_30 = IDENT_31 . decode ( IDENT_11 ) ; co . IDENT_0 . in . IDENT_1 . model . IDENT_2 next = METHOD_11 ( ) ; if ( next == null ) { throw new co . IDENT_0 . in . IDENT_1 . METHOD_12 ( STRING_0 ) ; } else { if ( ( IDENT_32 ) && ( ( IDENT_30 . getValue ( ) ) == INT_0 ) ) { return METHOD_14 ( next ) ; } else if ( ( IDENT_33 ) && ( ( IDENT_30 . getValue ( ) ) == INT_1 ) ) { return METHOD_15 ( next ) ; } else { co . IDENT_0 . in . IDENT_1 . model . IDENT_2 IDENT_34 = next ; while ( IDENT_34 . METHOD_16 ( ) ) IDENT_34 = IDENT_34 . METHOD_8 ( ) ; IDENT_34 . METHOD_9 ( IDENT_30 ) ; return next ; } } case IDENT_35 : default : throw new co . IDENT_0 . in . IDENT_1 . METHOD_12 ( ( STRING_1 + IDENT_11 ) ) ; } }
org . junit . Assert . assertEquals ( expected , IDENT_9 . METHOD_11 ( ) ) 