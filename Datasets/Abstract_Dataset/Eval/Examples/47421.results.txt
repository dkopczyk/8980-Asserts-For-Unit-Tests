METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . core . task . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . core . task . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . core . task . IDENT_4 IDENT_5 = com . IDENT_0 . IDENT_1 . core . task . IDENT_6 . METHOD_2 ( STRING_0 , java . util . Arrays . asList ( STRING_1 , STRING_2 ) ) ; com . IDENT_0 . IDENT_1 . core . context . IDENT_7 ctx = new com . IDENT_0 . IDENT_1 . core . context . METHOD_3 ( ) ; ctx . put ( STRING_3 , STRING_4 ) ; ctx . put ( STRING_5 , STRING_6 ) ; com . IDENT_0 . IDENT_1 . core . task . IDENT_4 IDENT_8 = IDENT_3 . evaluate ( IDENT_5 , ctx ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . Object , java . lang . Class ) { com . IDENT_0 . IDENT_1 . core . List list = get ( IDENT_9 , com . IDENT_0 . IDENT_1 . core . List . class ) ; if ( list == null ) { return null ; } com . IDENT_0 . IDENT_1 . core . List < T > IDENT_10 = new com . IDENT_0 . IDENT_1 . core . ArrayList ( ) ; for ( java . lang . Object item : list ) { if ( ( IDENT_11 . equals ( com . IDENT_0 . IDENT_1 . core . IDENT_12 . class ) ) || ( IDENT_11 . equals ( com . IDENT_0 . IDENT_1 . core . IDENT_13 . class ) ) ) { IDENT_10 . add ( ( ( T ) ( new com . IDENT_0 . IDENT_1 . core . METHOD_5 ( ( ( com . IDENT_0 . IDENT_1 . core . Map < java . lang . String , java . lang . Object > ) ( item ) ) ) ) ) ) ; } else { IDENT_10 . add ( ( ( T ) ( org . apache . commons . IDENT_14 . IDENT_15 . convert ( item , IDENT_11 ) ) ) ) ; } } return com . IDENT_0 . IDENT_1 . core . Collections . METHOD_6 ( IDENT_10 ) ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( STRING_4 , STRING_6 ) , IDENT_8 . METHOD_4 ( STRING_0 , java . lang . String . class ) ) 