METHOD_0 ( ) { IDENT_0 = new com . IDENT_1 . IDENT_2 . utils . METHOD_1 ( file , new com . IDENT_1 . IDENT_2 . api . utils . METHOD_2 ( ) { @ com . IDENT_1 . IDENT_2 . utils . Override public long METHOD_3 ( java . util . function . IDENT_3 IDENT_4 ) { return ( IDENT_4 . METHOD_4 ( ) ) - 100 ; } } ) ; long IDENT_5 = 0 ; for ( int i = 0 ; i < ( IDENT_6 ) ; i ++ ) { int IDENT_7 = METHOD_5 ( 1 , INT_0 ) ; IDENT_0 . METHOD_6 ( ) . write ( java . nio . ByteBuffer . METHOD_7 ( METHOD_8 ( IDENT_7 ) . getBytes ( ) ) ) ; IDENT_5 += IDENT_7 ; "<AssertPlaceHolder>" ; } } size ( ) { try { return METHOD_6 ( ) . size ( ) ; } catch ( java . io . IDENT_8 e ) { throw new com . IDENT_1 . IDENT_2 . exception . METHOD_9 ( java . lang . String . format ( STRING_0 , file ) , e ) ; } catch ( java . io . IOException e ) { logger . warn ( ( STRING_1 + ( file ) ) , e ) ; } if ( ! ( file . exists ( ) ) ) { throw new com . IDENT_1 . IDENT_2 . exception . METHOD_9 ( java . lang . String . format ( STRING_0 , file ) ) ; } return file . length ( ) ; }
org . junit . Assert . assertEquals ( ( IDENT_5 - 100 ) , IDENT_0 . size ( ) ) 