METHOD_0 ( ) { java . lang . String cluster = STRING_0 ; java . lang . String IDENT_0 = STRING_1 ; com . IDENT_1 . IDENT_2 . redis . IDENT_3 . model . IDENT_4 IDENT_5 = new com . IDENT_1 . IDENT_2 . redis . IDENT_3 . model . METHOD_1 ( ) . METHOD_2 ( IDENT_0 ) . METHOD_3 ( IDENT_0 ) ; com . IDENT_1 . IDENT_2 . redis . IDENT_3 . model . METHOD_1 expected = new com . IDENT_1 . IDENT_2 . redis . IDENT_3 . model . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_1 ) ; when ( IDENT_6 . METHOD_4 ( cluster ) ) . thenReturn ( com . google . common . collect . Lists . newArrayList ( expected ) ) ; when ( IDENT_6 . METHOD_5 ( ) ) . thenReturn ( com . google . common . collect . IDENT_7 . METHOD_6 ( STRING_1 , ( ( cluster + STRING_2 ) + ( IDENT_5 . METHOD_7 ( ) ) ) ) ) ; when ( IDENT_6 . METHOD_8 ( cluster , IDENT_5 , com . google . common . collect . IDENT_8 . METHOD_9 ( ) ) ) . thenReturn ( IDENT_5 ) ; com . IDENT_1 . IDENT_2 . redis . IDENT_3 . model . METHOD_1 IDENT_9 = IDENT_10 . METHOD_10 ( cluster , IDENT_5 , com . google . common . collect . IDENT_8 . METHOD_9 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( java . lang . String , com . IDENT_1 . IDENT_2 . redis . IDENT_3 . service . impl . METHOD_1 , java . util . Map ) { logger . info ( STRING_3 , IDENT_0 ) ; java . lang . String IDENT_11 = IDENT_0 . METHOD_11 ( ) ; java . util . List < com . IDENT_1 . IDENT_2 . redis . IDENT_3 . service . impl . METHOD_1 > IDENT_12 = IDENT_6 . METHOD_4 ( IDENT_13 ) ; java . util . Set < java . lang . String > IDENT_14 = IDENT_6 . METHOD_5 ( ) ; com . IDENT_1 . IDENT_2 . redis . IDENT_3 . service . impl . METHOD_1 IDENT_15 = null ; if ( IDENT_12 != null ) { for ( com . IDENT_1 . IDENT_2 . redis . IDENT_3 . service . impl . METHOD_1 IDENT_9 : IDENT_12 ) { if ( IDENT_9 . METHOD_7 ( ) . equals ( IDENT_0 . METHOD_7 ( ) ) ) { logger . info ( STRING_4 , IDENT_9 , IDENT_0 ) ; IDENT_15 = IDENT_9 ; } } } if ( com . IDENT_1 . IDENT_2 . utils . IDENT_16 . isEmpty ( IDENT_11 ) ) { return METHOD_12 ( IDENT_15 , IDENT_14 , IDENT_13 , IDENT_0 , IDENT_17 ) ; } else { return METHOD_13 ( IDENT_15 , IDENT_14 , IDENT_13 , IDENT_0 , IDENT_17 ) ; } }
org . junit . Assert . assertTrue ( ( expected == IDENT_9 ) ) 