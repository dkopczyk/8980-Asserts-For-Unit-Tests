METHOD_0 ( ) { org . antlr . runtime . tree . IDENT_0 t = new org . antlr . runtime . tree . METHOD_1 ( new org . antlr . runtime . METHOD_2 ( INT_0 , "a" ) ) ; t . METHOD_3 ( new org . antlr . runtime . tree . METHOD_1 ( new org . antlr . runtime . METHOD_2 ( INT_0 , "b" ) ) ) ; t . METHOD_3 ( new org . antlr . runtime . tree . METHOD_1 ( new org . antlr . runtime . METHOD_2 ( INT_0 , STRING_0 ) ) ) ; t . METHOD_3 ( new org . antlr . runtime . tree . METHOD_1 ( new org . antlr . runtime . METHOD_2 ( INT_0 , STRING_1 ) ) ) ; org . antlr . runtime . tree . METHOD_1 IDENT_1 = new org . antlr . runtime . tree . METHOD_1 ( new org . antlr . runtime . METHOD_2 ( INT_0 , STRING_2 ) ) ; t . METHOD_4 ( 0 , 2 , IDENT_1 ) ; java . lang . String IDENT_2 = STRING_3 ; "<AssertPlaceHolder>" ; t . METHOD_5 ( ) ; } METHOD_6 ( ) { if ( ( ( IDENT_3 ) == null ) || ( IDENT_3 . isEmpty ( ) ) ) { return this . toString ( ) ; } java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; if ( ! ( METHOD_7 ( ) ) ) { buf . append ( STRING_4 ) ; buf . append ( this . toString ( ) ) ; buf . append ( STRING_5 ) ; } for ( int i = 0 ; ( ( IDENT_3 ) != null ) && ( i < ( IDENT_3 . size ( ) ) ) ; i ++ ) { org . antlr . runtime . tree . IDENT_4 t = ( ( org . antlr . runtime . tree . IDENT_4 ) ( IDENT_3 . get ( i ) ) ) ; if ( i > 0 ) { buf . append ( STRING_5 ) ; } buf . append ( t . METHOD_6 ( ) ) ; } if ( ! ( METHOD_7 ( ) ) ) { buf . append ( STRING_6 ) ; } return buf . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , t . METHOD_6 ( ) ) 