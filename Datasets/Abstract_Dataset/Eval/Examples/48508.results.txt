METHOD_0 ( ) { IDENT_0 . eclipse . plugin . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_0 . eclipse . plugin . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_0 ) ; java . util . List < IDENT_0 . eclipse . plugin . IDENT_5 . IDENT_6 < IDENT_0 . eclipse . plugin . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 > > IDENT_9 = IDENT_10 . METHOD_1 ( IDENT_4 , IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( IDENT_0 . eclipse . plugin . IDENT_1 . IDENT_2 . IDENT_3 , java . util . List ) { if ( ( ! ( IDENT_4 . IDENT_12 ) ) && ( ( IDENT_4 . METHOD_2 ( 0 ) . IDENT_13 . length ( ) ) == 0 ) ) return METHOD_3 ( IDENT_14 ) ; return IDENT_14 . METHOD_4 ( ) . map ( ( item ) -> new IDENT_0 . eclipse . plugin . IDENT_5 . IDENT_6 < > ( item ) ) . map ( ( item ) -> METHOD_5 ( item , IDENT_4 ) ) . filter ( ( item ) -> ( item . METHOD_6 ( ) ) > 0 ) . METHOD_7 ( java . util . IDENT_15 . METHOD_8 ( ( IDENT_0 . eclipse . plugin . IDENT_5 . IDENT_6 < T > item ) -> item . METHOD_6 ( ) ) . METHOD_9 ( ) . METHOD_10 ( ( item ) -> IDENT_16 . apply ( ( ( IDENT_0 . eclipse . plugin . IDENT_5 . T ) ( item . IDENT_17 ) ) ) ) ) . collect ( java . util . stream . IDENT_18 . toList ( ) ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_9 . size ( ) ) 