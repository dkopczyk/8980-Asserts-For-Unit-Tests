METHOD_0 ( ) { org . jfree . data . IDENT_0 . IDENT_1 IDENT_2 = new org . jfree . data . IDENT_0 . METHOD_1 ( 2 , 3 , ( - 1.0 ) , FLOAT_0 , ( - 2.0 ) , FLOAT_1 ) ; IDENT_2 . METHOD_2 ( 0 , 0 , FLOAT_2 ) ; IDENT_2 . METHOD_2 ( 0 , 1 , Double . IDENT_3 ) ; IDENT_2 . METHOD_2 ( 0 , 2 , Double . IDENT_4 ) ; IDENT_2 . METHOD_2 ( 1 , 0 , Double . IDENT_5 ) ; org . jfree . data . IDENT_0 . METHOD_1 IDENT_6 = ( ( org . jfree . data . IDENT_0 . METHOD_1 ) ( org . jfree . chart . IDENT_7 . METHOD_3 ( IDENT_2 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Object ) { java . lang . Object result = null ; java . io . ByteArrayOutputStream buffer = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_8 out ; try { out = new java . io . METHOD_4 ( buffer ) ; out . METHOD_5 ( original ) ; out . close ( ) ; java . io . IDENT_9 in = new java . io . METHOD_6 ( new java . io . ByteArrayInputStream ( buffer . toByteArray ( ) ) ) ; result = in . METHOD_7 ( ) ; in . close ( ) ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } catch ( java . lang . IDENT_10 e ) { throw new java . lang . RuntimeException ( e ) ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_6 ) 