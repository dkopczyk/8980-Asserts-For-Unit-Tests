METHOD_0 ( ) { java . net . URL IDENT_0 = org . IDENT_1 . IDENT_2 . IDENT_3 . class . getResource ( STRING_0 ) ; java . lang . String IDENT_4 = IDENT_0 . getPath ( ) . split ( STRING_1 ) [ 1 ] ; org . IDENT_1 . IDENT_2 . IDENT_5 config = mock ( org . IDENT_1 . IDENT_2 . IDENT_5 . class ) ; when ( config . METHOD_1 ( ) ) . thenReturn ( com . google . common . collect . Lists . newArrayList ( IDENT_4 ) ) ; java . util . IDENT_6 < org . IDENT_1 . IDENT_2 . Configuration > IDENT_7 = new java . util . IDENT_6 < org . IDENT_1 . IDENT_2 . Configuration > ( ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( config , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_1 . IDENT_2 . IDENT_5 , java . util . IDENT_6 ) { java . util . List < java . lang . String > IDENT_8 = config . METHOD_1 ( ) ; if ( IDENT_8 != null ) { java . lang . IDENT_9 IDENT_10 = java . lang . Thread . METHOD_3 ( ) . METHOD_4 ( ) ; for ( java . lang . String IDENT_11 : IDENT_8 ) { org . IDENT_1 . IDENT_2 . IDENT_3 . LOGGER . info ( ( STRING_2 + IDENT_11 ) ) ; java . io . InputStream IDENT_12 = IDENT_10 . getResourceAsStream ( IDENT_11 ) ; if ( IDENT_12 == null ) { org . IDENT_1 . IDENT_2 . IDENT_3 . LOGGER . warn ( ( STRING_3 + IDENT_11 ) ) ; } else { try { java . util . IDENT_13 < java . lang . String , java . util . ArrayList < java . util . IDENT_13 < java . lang . String , java . lang . Object > > > IDENT_14 = ( ( java . util . IDENT_13 < java . lang . String , java . util . ArrayList < java . util . IDENT_13 < java . lang . String , java . lang . Object > > > ) ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_15 . get ( ) . load ( IDENT_12 ) ) ) ; java . util . ArrayList < java . util . IDENT_13 < java . lang . String , java . lang . Object > > IDENT_16 = IDENT_14 . get ( STRING_4 ) ; if ( IDENT_16 != null ) { for ( java . util . IDENT_13 < java . lang . String , java . lang . Object > conf : IDENT_16 ) { IDENT_7 . add ( new org . IDENT_1 . IDENT_2 . Configuration ( conf ) ) ; } } else { org . IDENT_1 . IDENT_2 . IDENT_3 . LOGGER . warn ( ( STRING_5 + IDENT_11 ) ) ; } } catch ( java . lang . Exception e ) { org . IDENT_1 . IDENT_2 . IDENT_3 . LOGGER . warn ( ( STRING_6 + IDENT_11 ) , e ) ; } finally { try { IDENT_12 . close ( ) ; } catch ( java . io . IOException e ) { } } } } } }
org . junit . Assert . assertEquals ( 2 , IDENT_7 . size ( ) ) 