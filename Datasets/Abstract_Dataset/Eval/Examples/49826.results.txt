METHOD_0 ( ) { com . github . davidmoten . IDENT_0 . IDENT_1 IDENT_2 = com . github . davidmoten . IDENT_0 . IDENT_3 . METHOD_1 ( com . github . davidmoten . IDENT_0 . IDENT_4 . IDENT_5 , com . github . davidmoten . IDENT_0 . IDENT_4 . IDENT_6 , com . github . davidmoten . IDENT_0 . IDENT_4 . IDENT_7 , com . github . davidmoten . IDENT_0 . IDENT_4 . IDENT_8 , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( double , double , double , double , int ) { com . github . davidmoten . IDENT_0 . IDENT_9 IDENT_2 = null ; int IDENT_10 = com . github . davidmoten . IDENT_0 . IDENT_3 . METHOD_2 ( IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 ) ; if ( IDENT_10 == 0 ) IDENT_10 = 1 ; for ( int length = IDENT_10 ; length <= ( com . github . davidmoten . IDENT_0 . IDENT_3 . IDENT_15 ) ; length ++ ) { com . github . davidmoten . IDENT_0 . IDENT_9 c = com . github . davidmoten . IDENT_0 . IDENT_3 . METHOD_3 ( IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 , length ) ; if ( ( c . METHOD_4 ( ) ) > IDENT_16 ) return IDENT_2 == null ? null : new com . github . davidmoten . IDENT_0 . METHOD_5 ( IDENT_2 ) ; else IDENT_2 = c ; } return new com . github . davidmoten . IDENT_0 . METHOD_5 ( IDENT_2 ) ; }
org . junit . Assert . assertNull ( IDENT_2 ) 