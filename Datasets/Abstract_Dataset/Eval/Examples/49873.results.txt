METHOD_0 ( ) { com . github . davidmoten . IDENT_0 . geometry . IDENT_1 r = com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_1 ( FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 ) ; com . github . davidmoten . IDENT_0 . geometry . IDENT_3 [ ] IDENT_4 = new com . github . davidmoten . IDENT_0 . geometry . IDENT_3 [ ] { com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_2 ( FLOAT_4 , FLOAT_5 ) , com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_2 ( FLOAT_6 , FLOAT_7 ) , com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_2 ( FLOAT_8 , FLOAT_9 ) , com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_2 ( FLOAT_10 , FLOAT_8 ) , com . github . davidmoten . IDENT_0 . IDENT_2 . METHOD_2 ( FLOAT_7 , FLOAT_11 ) } ; com . github . davidmoten . IDENT_0 . IDENT_5 < java . lang . Integer , com . github . davidmoten . IDENT_0 . geometry . IDENT_6 > tree = com . github . davidmoten . IDENT_0 . IDENT_5 . create ( ) ; for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { com . github . davidmoten . IDENT_0 . geometry . IDENT_3 METHOD_2 = IDENT_4 [ i ] ; System . out . println ( ( ( ( ( ( STRING_0 + ( METHOD_2 . x ( ) ) ) + STRING_1 ) + ( METHOD_2 . y ( ) ) ) + STRING_2 ) + ( i + 1 ) ) ) ; tree = tree . add ( ( i + 1 ) , METHOD_2 ) ; } System . out . println ( tree . METHOD_3 ( ) ) ; System . out . println ( ( STRING_3 + r ) ) ; java . util . Set < java . lang . Integer > set = new java . util . HashSet < java . lang . Integer > ( tree . search ( r ) . map ( com . github . davidmoten . IDENT_0 . IDENT_2 . < java . lang . Integer > METHOD_4 ( ) ) . toList ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; "<AssertPlaceHolder>" ; } search ( com . github . davidmoten . IDENT_0 . IDENT_5 ) { tree . search ( com . github . davidmoten . IDENT_0 . geometry . IDENT_7 . METHOD_1 ( INT_0 , INT_0 , 0 , INT_1 , INT_1 , 1 ) ) . METHOD_7 ( ) ; }
org . junit . Assert . assertEquals ( new java . util . HashSet < java . lang . Integer > ( asList ( 3 , 5 ) ) , set ) 