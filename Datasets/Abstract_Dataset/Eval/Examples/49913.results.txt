METHOD_0 ( ) { final com . github . davidmoten . IDENT_0 . IDENT_1 IDENT_2 = com . github . davidmoten . IDENT_0 . IDENT_3 . r ( 1 ) ; final com . github . davidmoten . IDENT_0 . IDENT_1 IDENT_4 = com . github . davidmoten . IDENT_0 . IDENT_3 . r ( 2 ) ; final com . github . davidmoten . IDENT_0 . IDENT_1 IDENT_5 = com . github . davidmoten . IDENT_0 . IDENT_3 . r ( 10 ) ; final java . util . List < com . github . davidmoten . IDENT_0 . IDENT_1 > list = java . util . Collections . singletonList ( IDENT_2 ) ; final java . util . List < com . github . davidmoten . IDENT_0 . IDENT_1 > group = java . util . Arrays . asList ( IDENT_4 , IDENT_5 ) ; final com . github . davidmoten . IDENT_0 . IDENT_1 r = com . github . davidmoten . IDENT_0 . IDENT_6 . METHOD_1 ( list , group , com . github . davidmoten . IDENT_0 . internal . IDENT_7 . METHOD_2 ( group ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Collection ) { com . github . davidmoten . IDENT_8 . IDENT_9 . METHOD_3 ( ( ! ( IDENT_10 . isEmpty ( ) ) ) ) ; double IDENT_11 = Double . MAX_VALUE ; double IDENT_12 = Double . MAX_VALUE ; double IDENT_13 = - ( Double . MAX_VALUE ) ; double IDENT_14 = - ( Double . MAX_VALUE ) ; boolean IDENT_15 = false ; for ( final com . github . davidmoten . IDENT_0 . geometry . IDENT_16 item : IDENT_10 ) { com . github . davidmoten . IDENT_0 . geometry . IDENT_17 r = item . geometry ( ) . METHOD_2 ( ) ; if ( r . METHOD_4 ( ) ) { METHOD_4 = true ; } if ( ( r . METHOD_5 ( ) ) < IDENT_11 ) IDENT_11 = r . METHOD_5 ( ) ; if ( ( r . METHOD_6 ( ) ) < IDENT_12 ) IDENT_12 = r . METHOD_6 ( ) ; if ( ( r . METHOD_7 ( ) ) > IDENT_13 ) IDENT_13 = r . METHOD_7 ( ) ; if ( ( r . METHOD_8 ( ) ) > IDENT_14 ) IDENT_14 = r . METHOD_8 ( ) ; } if ( METHOD_4 ) { return com . github . davidmoten . IDENT_0 . geometry . IDENT_18 . METHOD_9 ( IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 ) ; } else { return com . github . davidmoten . IDENT_0 . geometry . IDENT_18 . METHOD_9 ( ( ( float ) ( IDENT_11 ) ) , ( ( float ) ( IDENT_12 ) ) , ( ( float ) ( IDENT_13 ) ) , ( ( float ) ( IDENT_14 ) ) ) ; } }
org . junit . Assert . assertEquals ( IDENT_2 , r ) 