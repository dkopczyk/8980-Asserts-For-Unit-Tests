METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; io . IDENT_2 . IDENT_3 < java . lang . String > source = io . IDENT_2 . IDENT_3 . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; final com . github . davidmoten . IDENT_4 . IDENT_5 . IDENT_6 < java . util . List < java . lang . String > > IDENT_7 = com . github . davidmoten . IDENT_4 . IDENT_8 . cache ( source . METHOD_3 ( new io . IDENT_2 . IDENT_9 . IDENT_10 < org . IDENT_11 . IDENT_12 > ( ) { @ com . github . davidmoten . IDENT_4 . Override public void accept ( @ io . IDENT_2 . IDENT_13 . IDENT_14 org . IDENT_11 . IDENT_12 IDENT_15 ) throws com . github . davidmoten . IDENT_4 . Exception { IDENT_1 . METHOD_4 ( ) ; } } ) . toList ( ) . METHOD_5 ( ) , 3 , TimeUnit . IDENT_16 , io . IDENT_2 . IDENT_17 . IDENT_18 . METHOD_6 ( ) ) ; io . IDENT_2 . IDENT_3 < java . util . List < java . lang . String > > IDENT_19 = IDENT_7 . METHOD_7 ( ) . METHOD_8 ( new io . IDENT_2 . IDENT_9 . IDENT_10 < java . util . List < java . lang . String > > ( ) { @ com . github . davidmoten . IDENT_4 . Override public void accept ( @ io . IDENT_2 . IDENT_13 . IDENT_14 java . util . List < java . lang . String > s ) throws com . github . davidmoten . IDENT_4 . Exception { IDENT_7 . METHOD_9 ( ) ; } } ) ; IDENT_19 . METHOD_10 ( ) ; try { java . lang . Thread . sleep ( 1000 ) ; } catch ( java . lang . IDENT_20 e ) { e . printStackTrace ( ) ; } IDENT_19 . METHOD_10 ( ) ; try { java . lang . Thread . sleep ( INT_0 ) ; } catch ( java . lang . IDENT_20 e ) { e . printStackTrace ( ) ; } IDENT_19 . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { com . github . davidmoten . IDENT_21 . IDENT_22 . METHOD_11 ( t ) ; return t ; }
org . junit . Assert . assertTrue ( ( ( IDENT_1 . get ( ) ) == 2 ) ) 