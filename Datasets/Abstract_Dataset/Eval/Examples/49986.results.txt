METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( boolean ) { final java . util . concurrent . atomic . IDENT_0 count = new java . util . concurrent . atomic . METHOD_2 ( ) ; final io . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . Integer , io . IDENT_1 . IDENT_4 < java . lang . Integer > > mapper = new io . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . Integer , io . IDENT_1 . IDENT_4 < java . lang . Integer > > ( ) { @ com . github . davidmoten . IDENT_5 . IDENT_6 . Override public io . IDENT_1 . IDENT_4 < java . lang . Integer > apply ( java . lang . Integer t ) throws com . github . davidmoten . IDENT_5 . IDENT_6 . Exception { count . METHOD_3 ( ) ; throw new com . github . davidmoten . IDENT_5 . exceptions . METHOD_4 ( ) ; } } ; new io . IDENT_1 . IDENT_7 < java . lang . Integer > ( ) { @ com . github . davidmoten . IDENT_5 . IDENT_6 . Override MOD_0 void METHOD_5 ( final org . IDENT_8 . IDENT_9 < ? super java . lang . Integer > s ) { s . METHOD_6 ( new org . IDENT_8 . METHOD_7 ( ) { @ com . github . davidmoten . IDENT_5 . IDENT_6 . Override public void request ( long n ) { s . METHOD_8 ( 1 ) ; s . METHOD_8 ( 2 ) ; if ( IDENT_10 ) { s . METHOD_9 ( ) ; } else { s . METHOD_10 ( new java . io . IOException ( STRING_0 ) ) ; } } @ com . github . davidmoten . IDENT_5 . IDENT_6 . Override public void METHOD_11 ( ) { } } ) ; } } . METHOD_12 ( com . github . davidmoten . IDENT_5 . IDENT_6 . IDENT_11 . insert ( mapper ) ) . test ( ) . METHOD_13 ( 1 ) . METHOD_14 ( com . github . davidmoten . IDENT_5 . exceptions . METHOD_4 . class ) ; return count . get ( ) ; }
org . junit . Assert . assertEquals ( 1 , METHOD_1 ( false ) ) 