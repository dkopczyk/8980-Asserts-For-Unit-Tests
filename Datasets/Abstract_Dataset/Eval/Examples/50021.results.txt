METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 s = new io . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; java . util . concurrent . atomic . IDENT_3 count = new java . util . concurrent . atomic . METHOD_2 ( ) ; java . util . concurrent . atomic . METHOD_2 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( ) ; org . davidmoten . IDENT_5 . pool . IDENT_6 < java . lang . Integer > pool = org . davidmoten . IDENT_5 . pool . IDENT_7 . factory ( ( ) -> count . METHOD_3 ( ) ) . METHOD_4 ( ( n ) -> true ) . METHOD_5 ( 3 ) . METHOD_6 ( 1 , TimeUnit . IDENT_8 ) . METHOD_7 ( ( n ) -> IDENT_4 . METHOD_3 ( ) ) . METHOD_8 ( s ) . build ( ) ; java . util . concurrent . atomic . METHOD_2 result = new java . util . concurrent . atomic . METHOD_2 ( 0 ) ; pool . METHOD_9 ( ) . METHOD_10 ( new io . IDENT_0 . IDENT_9 < org . davidmoten . IDENT_5 . pool . IDENT_10 < java . lang . Integer > > ( ) { @ org . davidmoten . IDENT_5 . pool . Override public void METHOD_11 ( io . IDENT_0 . IDENT_11 . IDENT_12 d ) { d . METHOD_12 ( ) ; } @ org . davidmoten . IDENT_5 . pool . Override public void METHOD_13 ( org . davidmoten . IDENT_5 . pool . IDENT_10 < java . lang . Integer > t ) { result . set ( 1 ) ; } @ org . davidmoten . IDENT_5 . pool . Override public void METHOD_14 ( java . lang . Throwable e ) { e . printStackTrace ( ) ; result . set ( 2 ) ; } } ) ; "<AssertPlaceHolder>" ; } get ( ) { return IDENT_13 . METHOD_15 ( IDENT_14 ) ; }
org . junit . Assert . assertEquals ( 0 , result . get ( ) ) 