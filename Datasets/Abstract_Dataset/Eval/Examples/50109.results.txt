METHOD_0 ( ) { com . github . davidmoten . IDENT_0 . example . IDENT_1 . IDENT_2 < java . lang . String > IDENT_3 = com . github . davidmoten . IDENT_0 . persistence . IDENT_4 . METHOD_1 ( ) ; java . util . function . IDENT_5 < java . lang . Class < ? > , com . github . davidmoten . IDENT_0 . runtime . IDENT_6 < ? , java . lang . String > > IDENT_7 = ( IDENT_8 ) -> IDENT_3 ; com . github . davidmoten . IDENT_0 . runtime . IDENT_9 executor = new com . github . davidmoten . IDENT_0 . runtime . METHOD_2 ( ) ; com . github . davidmoten . IDENT_0 . persistence . IDENT_10 p = com . github . davidmoten . IDENT_0 . persistence . IDENT_4 . METHOD_3 ( ) . METHOD_4 ( METHOD_4 ) . METHOD_5 ( com . github . davidmoten . IDENT_0 . example . IDENT_11 . IDENT_12 . class , ( m ) -> com . github . davidmoten . IDENT_13 . Lists . newArrayList ( com . github . davidmoten . IDENT_0 . persistence . IDENT_14 . create ( STRING_0 , STRING_1 ) ) ) . executor ( executor ) . build ( ) ; p . create ( ) ; p . METHOD_6 ( ) ; com . github . davidmoten . IDENT_0 . persistence . IDENT_4 . METHOD_7 ( p , new com . github . davidmoten . IDENT_0 . example . IDENT_11 . event . METHOD_8 ( ) ) ; java . util . Set < com . github . davidmoten . IDENT_0 . persistence . IDENT_10 . IDENT_15 < com . github . davidmoten . IDENT_0 . example . IDENT_11 . IDENT_12 > > set = p . get ( com . github . davidmoten . IDENT_0 . example . IDENT_11 . IDENT_12 . class , STRING_0 , STRING_1 ) ; "<AssertPlaceHolder>" ; } get ( java . lang . Class , java . lang . String , java . sql . IDENT_16 ) { try ( java . sql . IDENT_17 IDENT_18 = IDENT_19 . METHOD_9 ( sql . METHOD_10 ( ) ) ) { IDENT_18 . METHOD_11 ( 1 , IDENT_8 . getName ( ) ) ; IDENT_18 . METHOD_11 ( 2 , id ) ; try ( java . sql . ResultSet rs = IDENT_18 . METHOD_12 ( ) ) { if ( rs . next ( ) ) { T t = ( ( T ) ( IDENT_20 . METHOD_13 ( IDENT_8 , com . github . davidmoten . IDENT_0 . persistence . IDENT_10 . METHOD_14 ( rs . METHOD_15 ( 1 ) . METHOD_16 ( ) ) ) ) ) ; return java . util . Optional . of ( t ) ; } else { return java . util . Optional . empty ( ) ; } } } }
org . junit . Assert . assertEquals ( 1 , set . size ( ) ) 