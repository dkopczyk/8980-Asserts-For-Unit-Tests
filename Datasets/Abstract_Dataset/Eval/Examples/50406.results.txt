METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . ext . IDENT_2 . model . IDENT_3 IDENT_4 = METHOD_1 ( STRING_0 2 , STRING_1 , 1 ) ; java . util . List < org . IDENT_0 . IDENT_1 . ext . IDENT_2 . model . IDENT_3 > IDENT_5 = java . util . Collections . singletonList ( IDENT_4 ) ; org . mockito . Mockito . when ( IDENT_6 . getString ( STRING_0 ) ) . thenReturn ( STRING_0 1 ) ; org . mockito . Mockito . when ( IDENT_6 . getString ( STRING_0 0 ) ) . thenReturn ( "" ) ; org . mockito . Mockito . when ( IDENT_6 . getString ( STRING_2 ) ) . thenReturn ( STRING_3 ) ; org . mockito . Mockito . when ( IDENT_6 . getString ( STRING_4 ) ) . thenReturn ( "" ) ; org . IDENT_0 . IDENT_1 . ext . IDENT_2 . model . IDENT_7 table = new org . IDENT_0 . IDENT_1 . ext . IDENT_2 . model . METHOD_2 ( IDENT_8 , IDENT_6 ) ; METHOD_3 ( IDENT_5 , table ) ; java . lang . String IDENT_9 = STRING_5 + ( ( STRING_6 + STRING_7 ) + STRING_8 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . IDENT_0 . IDENT_1 . model . runtime . IDENT_10 ) { java . lang . StringBuilder IDENT_11 = new java . lang . StringBuilder ( ) ; IDENT_11 . append ( STRING_9 1 ) . append ( ( this . METHOD_5 ( ) ? STRING_10 : "" ) ) . append ( STRING_11 ) . append ( ( METHOD_6 ( ) ? STRING_12 6 : "" ) ) . append ( ( this . METHOD_7 ( ) ? STRING_13 : "" ) ) . append ( STRING_14 ) . append ( METHOD_8 ( ) ) . append ( this . getName ( ) ) . append ( STRING_9 0 ) ; java . util . List < org . IDENT_0 . IDENT_1 . ext . IDENT_12 . model . IDENT_3 > IDENT_5 = METHOD_9 ( monitor ) ; if ( ( IDENT_5 . size ( ) ) == 0 ) { IDENT_11 . append ( STRING_9 2 ) ; } else if ( ( IDENT_5 . size ( ) ) == 1 ) { org . IDENT_0 . IDENT_1 . ext . IDENT_12 . model . IDENT_3 column = IDENT_5 . get ( 0 ) ; IDENT_11 . append ( ( ( ( ( STRING_15 + ( column . getName ( ) ) ) + STRING_12 0 ) + ( column . METHOD_10 ( ) ) ) + STRING_9 2 ) ) ; } else { IDENT_11 . append ( IDENT_5 . stream ( ) . map ( ( field ) -> ( ( STRING_15 + ( field . getName ( ) ) ) + STRING_12 0 ) + ( field . METHOD_10 ( ) ) ) . collect ( java . util . stream . IDENT_13 . METHOD_11 ( STRING_12 4 ) ) ) ; IDENT_11 . append ( STRING_9 2 ) ; } if ( org . IDENT_0 . utils . IDENT_14 . METHOD_12 ( this . METHOD_13 ( ) ) ) { IDENT_11 . append ( STRING_12 7 ) ; IDENT_11 . append ( this . IDENT_15 . stream ( ) . map ( ( location ) -> ( STRING_12 2 + location ) + STRING_12 1 ) . collect ( java . util . stream . IDENT_13 . METHOD_11 ( STRING_12 4 ) ) ) ; IDENT_11 . append ( ( ( STRING_12 5 + ( METHOD_14 ( ) ) ) + STRING_12 9 ) ) ; } else if ( METHOD_15 ( ) ) { IDENT_11 . append ( ( ( ( ( STRING_12 8 + ( this . METHOD_16 ( ) ) ) + STRING_16 ) + ( METHOD_14 ( ) ) ) + STRING_12 9 ) ) ; } IDENT_11 . append ( STRING_12 3 ) . append ( this . METHOD_17 ( ) ) . append ( STRING_12 1 ) ; if ( ( this . METHOD_18 ( ) ) != null ) { IDENT_11 . append ( METHOD_19 ( this . IDENT_16 , this . METHOD_18 ( ) ) ) ; } if ( ( ( this . METHOD_20 ( ) ) != null ) && ( ( this . METHOD_20 ( ) . length ( ) ) > 0 ) ) { IDENT_11 . append ( ( ( STRING_17 + ( this . METHOD_20 ( ) ) ) + STRING_12 1 ) ) ; } if ( this . METHOD_21 ( ) ) { IDENT_11 . append ( STRING_9 ) ; } if ( ( ( this . METHOD_22 ( ) ) > 0 ) && ( ( this . METHOD_23 ( ) ) != null ) ) { IDENT_11 . append ( ( this . METHOD_21 ( ) ? STRING_12 0 : STRING_12 9 ) ) . append ( STRING_12 ) . append ( this . METHOD_22 ( ) ) . append ( STRING_12 0 ) . append ( this . METHOD_23 ( ) . getValue ( ) ) ; } return IDENT_11 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , table . METHOD_4 ( monitor ) ) 