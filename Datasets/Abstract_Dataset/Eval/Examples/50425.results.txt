METHOD_0 ( ) { int IDENT_0 = java . util . concurrent . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( ) ; int IDENT_2 = java . util . concurrent . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( 0 , INT_0 ) ; short IDENT_3 = ( ( short ) ( java . util . concurrent . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( 0 , IDENT_4 . MAX_VALUE ) ) ) ; int IDENT_5 = java . util . concurrent . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( 0 , INT_0 ) ; org . IDENT_6 . common . model . impl . id . IDENT_7 IDENT_8 = new org . IDENT_6 . common . model . impl . id . METHOD_3 ( IDENT_0 , IDENT_2 , IDENT_3 , IDENT_5 ) ; byte [ ] bytes = new byte [ METHOD_3 . IDENT_9 ] ; java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_4 ( bytes ) ; buffer . METHOD_5 ( IDENT_0 ) ; byte IDENT_10 ; byte IDENT_11 ; byte IDENT_12 ; IDENT_12 = ( ( byte ) ( IDENT_2 & 255 ) ) ; IDENT_11 = ( ( byte ) ( ( IDENT_2 > > 8 ) & 255 ) ) ; IDENT_10 = ( ( byte ) ( ( IDENT_2 > > 16 ) & 255 ) ) ; buffer . put ( IDENT_10 ) ; buffer . put ( IDENT_11 ) ; buffer . put ( IDENT_12 ) ; buffer . METHOD_6 ( IDENT_3 ) ; IDENT_12 = ( ( byte ) ( IDENT_5 & 255 ) ) ; IDENT_11 = ( ( byte ) ( ( IDENT_5 > > 8 ) & 255 ) ) ; IDENT_10 = ( ( byte ) ( ( IDENT_5 > > 16 ) & 255 ) ) ; buffer . put ( IDENT_10 ) ; buffer . put ( IDENT_11 ) ; buffer . put ( IDENT_12 ) ; org . IDENT_6 . common . model . impl . id . METHOD_3 IDENT_13 = org . IDENT_6 . common . model . impl . id . METHOD_3 . METHOD_7 ( bytes ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( byte [ ] ) { return new org . IDENT_6 . common . model . impl . id . METHOD_8 ( bytes ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_13 ) 