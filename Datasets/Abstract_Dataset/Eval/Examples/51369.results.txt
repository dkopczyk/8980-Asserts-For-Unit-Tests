METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new org . nd4j . linalg . api . buffer . IDENT_2 [ ] { org . nd4j . linalg . api . buffer . IDENT_2 . IDENT_3 , org . nd4j . linalg . api . buffer . IDENT_2 . IDENT_4 , org . nd4j . linalg . api . buffer . IDENT_2 . IDENT_5 , org . nd4j . linalg . api . buffer . IDENT_2 . IDENT_6 } ; IDENT_0 . val IDENT_7 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) ; for ( IDENT_0 . val IDENT_8 : IDENT_1 ) { org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_8 ) ; int IDENT_9 = INT_0 ; int IDENT_10 = INT_1 ; int IDENT_11 = 3 ; IDENT_0 . val loader = new org . IDENT_12 . image . loader . METHOD_3 ( IDENT_10 , IDENT_9 , IDENT_11 ) ; java . io . File IDENT_13 = new org . nd4j . linalg . io . METHOD_4 ( STRING_0 ) . METHOD_5 ( ) ; org . IDENT_12 . image . data . IDENT_14 IDENT_15 = loader . METHOD_6 ( IDENT_13 ) ; IDENT_0 . val array = loader . METHOD_7 ( IDENT_15 ) ; "<AssertPlaceHolder>" ; } org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_7 ) ; } METHOD_1 ( ) { return data ( ) . METHOD_1 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , array . METHOD_1 ( ) ) 