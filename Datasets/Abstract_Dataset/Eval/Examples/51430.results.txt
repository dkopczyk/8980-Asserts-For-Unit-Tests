METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; int IDENT_0 = 2 ; int IDENT_1 = 5 ; int IDENT_2 = 5 ; int IDENT_3 = 3 ; int IDENT_4 = 2 ; for ( int IDENT_5 = 2 ; IDENT_5 <= 3 ; IDENT_5 ++ ) { int [ ] IDENT_6 = new int [ ] { 1 , 3 } ; org . IDENT_7 . IDENT_8 . IDENT_9 [ ] IDENT_10 = new org . IDENT_7 . IDENT_8 . IDENT_9 [ ] { IDENT_9 . IDENT_11 , IDENT_9 . IDENT_12 , IDENT_9 . IDENT_13 , IDENT_9 . IDENT_14 } ; for ( int IDENT_15 : IDENT_6 ) { for ( org . IDENT_7 . IDENT_8 . IDENT_9 IDENT_16 : IDENT_10 ) { int [ ] kernel ; int [ ] IDENT_17 ; if ( IDENT_5 == 2 ) { kernel = new int [ ] { 2 , IDENT_2 } ; IDENT_17 = new int [ ] { 1 , IDENT_2 } ; } else { kernel = new int [ ] { IDENT_1 , 2 } ; IDENT_17 = new int [ ] { IDENT_1 , 1 } ; } org . IDENT_7 . IDENT_18 . conf . IDENT_19 conf = new org . IDENT_7 . IDENT_18 . conf . IDENT_20 . Builder ( ) . METHOD_3 ( new org . nd4j . linalg . IDENT_21 . config . METHOD_4 ( ) ) . METHOD_5 ( new org . IDENT_7 . IDENT_18 . conf . IDENT_22 . METHOD_6 ( 0 , 1.0 ) ) . METHOD_7 ( IDENT_23 . IDENT_24 ) . METHOD_8 ( INT_0 ) . list ( ) . METHOD_9 ( 0 , new org . IDENT_7 . IDENT_8 . IDENT_25 . Builder ( ) . METHOD_10 ( kernel ) . METHOD_11 ( METHOD_11 ) . METHOD_12 ( IDENT_3 ) . build ( ) ) . METHOD_9 ( 1 , new org . IDENT_7 . IDENT_8 . IDENT_26 . Builder ( ) . METHOD_13 ( IDENT_16 ) . build ( ) ) . METHOD_9 ( 2 , new org . IDENT_7 . IDENT_8 . IDENT_27 . Builder ( IDENT_28 . IDENT_29 . IDENT_30 ) . METHOD_14 ( IDENT_31 . IDENT_32 ) . METHOD_12 ( METHOD_12 ) . build ( ) ) . METHOD_15 ( org . IDENT_7 . IDENT_18 . conf . IDENT_33 . IDENT_34 . METHOD_16 ( IDENT_1 , IDENT_2 , IDENT_0 ) ) . build ( ) ; org . IDENT_7 . IDENT_18 . IDENT_35 . IDENT_36 IDENT_37 = new org . IDENT_7 . IDENT_18 . IDENT_35 . METHOD_17 ( conf ) ; IDENT_37 . init ( ) ; java . util . IDENT_38 r = new java . util . METHOD_18 ( INT_0 ) ; org . nd4j . linalg . api . ndarray . INDArray input = org . nd4j . linalg . factory . Nd4j . METHOD_19 ( new int [ ] { IDENT_15 , IDENT_0 , IDENT_1 , IDENT_2 } ) . METHOD_20 ( FLOAT_0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_39 ; if ( IDENT_15 == 1 ) { IDENT_39 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 1 , 1 , 1 , 0 } ) . METHOD_21 ( 1 , 1 , ( IDENT_5 == 2 ? IDENT_1 : 1 ) , ( IDENT_5 == 3 ? IDENT_2 : 1 ) ) ; } else if ( IDENT_15 == 3 ) { IDENT_39 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 1 , 1 , 1 , 1 , 1 } , new double [ ] { 1 , 1 , 1 , 1 , 0 } , new double [ ] { 1 , 1 , 1 , 0 , 0 } } ) . METHOD_21 ( IDENT_15 , 1 , ( IDENT_5 == 2 ? IDENT_1 : 1 ) , ( IDENT_5 == 3 ? IDENT_2 : 1 ) ) ; } else { throw new java . lang . RuntimeException ( ) ; } org . nd4j . linalg . api . ndarray . INDArray IDENT_40 = org . nd4j . linalg . factory . Nd4j . METHOD_22 ( IDENT_15 , METHOD_12 ) ; for ( int i = 0 ; i < IDENT_15 ; i ++ ) { int IDENT_41 = r . METHOD_23 ( METHOD_12 ) ; IDENT_40 . METHOD_24 ( i , IDENT_41 , 1.0 ) ; } if ( org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_43 ) { System . out . println ( ( ( ( STRING_0 + IDENT_16 ) + STRING_1 ) + IDENT_15 ) ) ; for ( int j = 0 ; j < ( IDENT_37 . METHOD_25 ( ) ) ; j ++ ) System . out . println ( ( ( ( STRING_2 + j ) + STRING_3 ) + ( IDENT_37 . METHOD_26 ( j ) . METHOD_27 ( ) ) ) ) ; } boolean IDENT_44 = org . IDENT_7 . IDENT_8 . IDENT_45 . METHOD_28 ( IDENT_37 , org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_46 , org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_47 , org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_48 , org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_43 , org . IDENT_7 . IDENT_8 . IDENT_42 . IDENT_49 , input , IDENT_40 , IDENT_39 , null ) ; "<AssertPlaceHolder>" ; org . IDENT_7 . TestUtils . METHOD_29 ( IDENT_37 ) ; } } } } METHOD_28 ( org . IDENT_7 . IDENT_18 . IDENT_35 . METHOD_17 , double , double , double , boolean , boolean , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray ) { return org . IDENT_7 . IDENT_8 . IDENT_45 . METHOD_28 ( IDENT_37 , IDENT_50 , IDENT_51 , IDENT_52 , IDENT_53 , IDENT_54 , input , IDENT_40 , IDENT_39 , IDENT_55 , false , ( - 1 ) ) ; }
org . junit . Assert . assertTrue ( IDENT_44 ) 