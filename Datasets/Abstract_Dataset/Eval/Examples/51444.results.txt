METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; int IDENT_0 = 2 ; boolean [ ] IDENT_1 = new boolean [ ] { false , true } ; for ( boolean IDENT_2 : IDENT_1 ) { for ( double IDENT_3 : new double [ ] { 0.0 , FLOAT_0 , 2.0 } ) { org . IDENT_4 . IDENT_5 . conf . IDENT_6 conf = new org . IDENT_4 . IDENT_5 . conf . IDENT_7 . Builder ( ) . METHOD_3 ( INT_0 ) . METHOD_4 ( IDENT_8 . IDENT_9 ) . METHOD_5 ( new org . IDENT_4 . IDENT_5 . conf . IDENT_10 . METHOD_6 ( 0 , 1 ) ) . METHOD_7 ( new org . nd4j . linalg . IDENT_11 . config . METHOD_8 ( ) ) . METHOD_9 ( ) . METHOD_10 ( STRING_0 ) . METHOD_11 ( STRING_1 , new org . IDENT_4 . IDENT_12 . IDENT_13 . Builder ( ) . METHOD_12 ( 4 ) . METHOD_13 ( 5 ) . METHOD_14 ( IDENT_14 . IDENT_15 ) . build ( ) , STRING_0 ) . METHOD_11 ( STRING_2 , new org . IDENT_4 . IDENT_12 . IDENT_16 . Builder ( ) . METHOD_15 ( IDENT_17 . IDENT_18 . IDENT_19 ) . METHOD_12 ( 5 ) . METHOD_13 ( IDENT_0 ) . METHOD_16 ( 1.0 ) . METHOD_17 ( METHOD_17 ) . METHOD_18 ( true ) . METHOD_14 ( IDENT_14 . IDENT_20 ) . build ( ) , STRING_1 ) . METHOD_19 ( STRING_2 ) . build ( ) ; org . IDENT_4 . IDENT_5 . graph . IDENT_21 graph = new org . IDENT_4 . IDENT_5 . graph . METHOD_20 ( conf ) ; graph . init ( ) ; org . nd4j . linalg . api . ndarray . INDArray example = org . nd4j . linalg . factory . Nd4j . METHOD_21 ( INT_1 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_22 = org . nd4j . linalg . factory . Nd4j . METHOD_22 ( INT_1 , IDENT_0 ) ; java . util . IDENT_23 r = new java . util . METHOD_23 ( INT_0 ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { IDENT_22 . METHOD_24 ( i , r . METHOD_25 ( IDENT_0 ) , 1.0 ) ; } if ( IDENT_2 ) { for ( int i = 0 ; i < 10 ; i ++ ) { org . nd4j . linalg . api . ndarray . INDArray f = org . nd4j . linalg . factory . Nd4j . METHOD_21 ( 10 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray l = org . nd4j . linalg . factory . Nd4j . METHOD_22 ( 10 , IDENT_0 ) ; for ( int j = 0 ; j < 10 ; j ++ ) { l . METHOD_24 ( j , r . METHOD_25 ( IDENT_0 ) , 1.0 ) ; } graph . METHOD_26 ( new org . nd4j . linalg . api . ndarray . INDArray [ ] { f } , new org . nd4j . linalg . api . ndarray . INDArray [ ] { l } ) ; } } java . lang . String msg = ( ( STRING_3 + METHOD_17 ) + STRING_4 ) + IDENT_2 ; if ( org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_25 ) { System . out . println ( msg ) ; for ( int j = 0 ; j < ( graph . METHOD_27 ( ) ) ; j ++ ) System . out . println ( ( ( ( STRING_5 + j ) + STRING_6 ) + ( graph . METHOD_28 ( j ) . METHOD_29 ( ) ) ) ) ; } boolean IDENT_26 = org . IDENT_4 . IDENT_12 . IDENT_27 . METHOD_30 ( graph , org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_28 , org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_29 , org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_30 , org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_25 , org . IDENT_4 . IDENT_12 . IDENT_24 . IDENT_31 , new org . nd4j . linalg . api . ndarray . INDArray [ ] { example } , new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_22 } ) ; "<AssertPlaceHolder>" ; org . IDENT_4 . TestUtils . METHOD_31 ( graph ) ; } } } METHOD_30 ( org . IDENT_4 . IDENT_5 . IDENT_32 . IDENT_33 , double , double , double , boolean , boolean , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray ) { return org . IDENT_4 . IDENT_12 . IDENT_27 . METHOD_30 ( IDENT_34 , IDENT_35 , IDENT_36 , IDENT_37 , IDENT_38 , IDENT_39 , input , IDENT_22 , null , null ) ; }
org . junit . Assert . assertTrue ( msg , IDENT_26 ) 