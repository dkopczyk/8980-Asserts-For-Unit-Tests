METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . IDENT_0 . IDENT_1 . api . IDENT_2 model = org . IDENT_0 . IDENT_1 . conf . IDENT_3 . METHOD_3 ( IDENT_4 . METHOD_4 ( ) , IDENT_4 . METHOD_5 ( ) , new org . IDENT_0 . IDENT_1 . conf . METHOD_6 ( ) , true ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = model . METHOD_7 ( IDENT_6 . IDENT_7 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . IDENT_0 . IDENT_1 . api . IDENT_2 IDENT_8 = org . IDENT_0 . IDENT_1 . conf . IDENT_3 . METHOD_3 ( IDENT_4 . METHOD_4 ( ) , IDENT_4 . METHOD_5 ( ) , new org . IDENT_0 . IDENT_1 . conf . METHOD_6 ( ) , true ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_9 = IDENT_8 . METHOD_7 ( IDENT_6 . IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . lang . String ) { int IDENT_10 = param . indexOf ( STRING_0 ) ; if ( IDENT_10 == ( - 1 ) ) throw new java . lang . IllegalStateException ( ( ( STRING_1 + param ) + STRING_2 ) ) ; int IDENT_11 = java . lang . Integer . METHOD_8 ( param . substring ( 0 , IDENT_10 ) ) ; java . lang . String IDENT_12 = param . substring ( ( IDENT_10 + 1 ) ) ; return IDENT_13 [ IDENT_11 ] . METHOD_7 ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_9 ) 