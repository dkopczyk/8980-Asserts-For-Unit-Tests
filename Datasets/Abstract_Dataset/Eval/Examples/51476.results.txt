METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . IDENT_0 . IDENT_1 . api . IDENT_2 model = org . IDENT_0 . IDENT_1 . conf . IDENT_3 . METHOD_3 ( IDENT_4 . METHOD_4 ( ) , IDENT_4 . METHOD_5 ( ) , new org . IDENT_0 . IDENT_1 . conf . METHOD_6 ( new org . IDENT_0 . IDENT_1 . conf . IDENT_5 . METHOD_7 ( 1 , 1 ) ) , true ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = model . METHOD_8 ( IDENT_7 . IDENT_8 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . IDENT_0 . IDENT_1 . api . IDENT_2 IDENT_9 = org . IDENT_0 . IDENT_1 . conf . IDENT_3 . METHOD_3 ( IDENT_4 . METHOD_4 ( ) , IDENT_4 . METHOD_5 ( ) , new org . IDENT_0 . IDENT_1 . conf . METHOD_6 ( new org . IDENT_0 . IDENT_1 . conf . IDENT_5 . METHOD_7 ( 1 , 1 ) ) , true ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_10 = IDENT_9 . METHOD_8 ( IDENT_7 . IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . lang . String ) { int IDENT_11 = param . indexOf ( STRING_0 ) ; if ( IDENT_11 == ( - 1 ) ) throw new java . lang . IllegalStateException ( ( ( STRING_1 + param ) + STRING_2 ) ) ; int IDENT_12 = java . lang . Integer . METHOD_9 ( param . substring ( 0 , IDENT_11 ) ) ; java . lang . String IDENT_13 = param . substring ( ( IDENT_11 + 1 ) ) ; return IDENT_14 [ IDENT_12 ] . METHOD_8 ( IDENT_13 ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_10 ) 