METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 [ ] IDENT_3 = new org . IDENT_0 . IDENT_1 . IDENT_2 [ ] { new org . IDENT_0 . IDENT_1 . METHOD_1 ( 3 , FLOAT_0 ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( ( - 2 ) , 1 ) , new org . IDENT_0 . IDENT_1 . METHOD_3 ( 2 , 1.0 ) , new org . IDENT_0 . IDENT_1 . METHOD_4 ( 10 , FLOAT_1 ) } ; org . nd4j . IDENT_4 . jackson . databind . IDENT_5 IDENT_6 = org . IDENT_0 . IDENT_7 . conf . IDENT_8 . mapper ( ) ; for ( org . IDENT_0 . IDENT_1 . IDENT_2 d : IDENT_3 ) { java . lang . String json = IDENT_6 . METHOD_5 ( d ) ; org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_9 = IDENT_6 . METHOD_6 ( json , org . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; "<AssertPlaceHolder>" ; } } METHOD_6 ( java . lang . String , java . lang . Class ) { try { return IDENT_10 . METHOD_6 ( value , IDENT_11 ) ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertEquals ( d , IDENT_9 ) 