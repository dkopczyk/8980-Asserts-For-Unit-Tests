METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray a = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 0 , 20 ) ; org . nd4j . linalg . api . ndarray . INDArray result = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , FLOAT_6 , FLOAT_7 , FLOAT_8 , FLOAT_9 , FLOAT_10 , FLOAT_11 , FLOAT_12 , FLOAT_13 , FLOAT_14 , FLOAT_15 , FLOAT_16 } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . IDENT_1 . util . IDENT_2 . METHOD_2 ( a , 4 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . nd4j . linalg . api . ndarray . INDArray , int ) { org . nd4j . linalg . api . ndarray . INDArray ret = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( IDENT_3 ) ; org . nd4j . linalg . indexing . IDENT_4 [ ] IDENT_5 = new org . nd4j . linalg . indexing . IDENT_4 [ ] { org . nd4j . linalg . indexing . IDENT_6 . METHOD_4 ( n , IDENT_3 . METHOD_5 ( ) ) } ; org . nd4j . linalg . indexing . IDENT_4 [ ] IDENT_7 = new org . nd4j . linalg . indexing . IDENT_4 [ ] { org . nd4j . linalg . indexing . IDENT_6 . METHOD_4 ( 0 , ( ( IDENT_3 . METHOD_5 ( ) ) - n ) , false ) } ; org . nd4j . linalg . indexing . IDENT_4 [ ] IDENT_8 = new org . nd4j . linalg . indexing . IDENT_4 [ ] { org . nd4j . linalg . indexing . IDENT_6 . METHOD_4 ( ( n - 1 ) , IDENT_3 . METHOD_5 ( ) ) } ; ret . put ( IDENT_5 , ret . get ( IDENT_5 ) . METHOD_6 ( ret . get ( IDENT_7 ) ) ) ; return ret . get ( IDENT_8 ) . METHOD_7 ( n ) ; }
org . junit . Assert . assertEquals ( result , IDENT_0 ) 