METHOD_0 ( ) { final IDENT_0 . val queue = new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( INT_0 , org . nd4j . linalg . factory . Nd4j . create ( 5 , 5 ) ) ; IDENT_0 . val IDENT_5 = new java . util . ArrayList < java . lang . Thread > ( ) ; for ( int e = 0 ; e < 4 ; e ++ ) { IDENT_0 . val f = e ; IDENT_0 . val t = new java . lang . Thread ( new java . lang . METHOD_2 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . Override public void run ( ) { int IDENT_6 = 0 ; while ( true ) { while ( IDENT_6 < 1000 ) { if ( ! ( queue . isEmpty ( ) ) ) { if ( ( IDENT_6 OP_0 50 ) == 0 ) log . info ( STRING_0 , f , IDENT_6 ) ; IDENT_0 . val arr = queue . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; IDENT_0 . val IDENT_7 = arr . METHOD_4 ( true ) ; IDENT_6 ++ ; } } break ; } } } ) ; t . start ( ) ; IDENT_5 . add ( t ) ; } IDENT_0 . val b = new java . lang . Thread ( new java . lang . METHOD_2 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . Override public void run ( ) { while ( true ) { queue . METHOD_5 ( 4 ) ; org . IDENT_1 . util . IDENT_8 . METHOD_6 ( INT_1 ) ; } } } ) ; b . METHOD_7 ( true ) ; b . start ( ) ; IDENT_0 . val IDENT_9 = new java . util . ArrayList < java . lang . Thread > ( ) ; for ( int e = 0 ; e < 4 ; e ++ ) { IDENT_0 . val t = new java . lang . Thread ( new java . lang . METHOD_2 ( ) { @ org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . Override public void run ( ) { for ( int e = 0 ; e < INT_2 ; e ++ ) { try { queue . put ( org . nd4j . linalg . factory . Nd4j . METHOD_8 ( 5 , 5 ) . METHOD_9 ( e ) ) ; java . lang . Thread . sleep ( INT_1 ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . RuntimeException ( ex ) ; } } } } ) ; IDENT_9 . add ( t ) ; t . start ( ) ; } for ( IDENT_0 . val t : IDENT_9 ) t . join ( ) ; for ( IDENT_0 . val t : IDENT_5 ) t . join ( ) ; } METHOD_3 ( ) { IDENT_0 . val IDENT_10 = queue . METHOD_3 ( ) ; if ( IDENT_10 != null ) ( IDENT_11 ) OP_1 ; return IDENT_10 ; }
org . junit . Assert . assertNotNull ( arr ) 