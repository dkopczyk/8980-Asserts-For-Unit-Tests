METHOD_0 ( ) { final org . nd4j . linalg . api . ndarray . INDArray random = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new int [ ] { 10 , 4 } ) ; final org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = random . METHOD_2 ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( new org . nd4j . linalg . api . IDENT_1 . impl . IDENT_2 . IDENT_3 . METHOD_4 ( random , IDENT_0 , 1 ) ) ; final org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new int [ ] { 1 , 4 } ) ; final org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new int [ ] { 1 , 4 } ) ; final org . nd4j . linalg . api . ndarray . INDArray res = IDENT_0 . METHOD_5 ( IDENT_4 ) . METHOD_6 ( IDENT_5 ) ; final org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = res . METHOD_7 ( ) ; final int [ ] IDENT_7 = new int [ ] { 1 } ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 = org . nd4j . IDENT_8 . IDENT_9 . IDENT_10 . create ( ) ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_12 IDENT_13 = IDENT_11 . METHOD_8 ( STRING_0 , IDENT_0 ) ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_12 IDENT_14 = IDENT_11 . METHOD_8 ( STRING_1 , IDENT_4 ) ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_12 IDENT_15 = IDENT_11 . METHOD_8 ( STRING_2 , IDENT_5 ) ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_12 out = IDENT_11 . IDENT_16 . METHOD_9 ( IDENT_13 , IDENT_14 , IDENT_15 , IDENT_7 ) ; out . METHOD_7 ( STRING_3 ) ; java . lang . String err = org . nd4j . IDENT_8 . validation . IDENT_17 . validate ( new org . nd4j . IDENT_8 . validation . METHOD_10 ( IDENT_11 ) . METHOD_11 ( STRING_3 , IDENT_6 ) . METHOD_12 ( true ) ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( boolean ) { this . METHOD_13 ( IDENT_18 ) ; return this ; }
org . junit . Assert . assertNull ( err , err ) 