METHOD_0 ( ) { double [ ] [ ] IDENT_0 = new double [ ] [ ] { new double [ ] { 3 , INT_0 , 3 } , new double [ ] { 3 , 1 , - FLOAT_0 } , new double [ ] { 0 , 5 , 1 } } ; java . util . List < org . nd4j . linalg . api . ndarray . INDArray > exp = java . util . Arrays . asList ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 3 , 6 , 9 , 12 , 15 } ) . METHOD_1 ( IDENT_1 . IDENT_2 ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 3 , FLOAT_1 , 2 , FLOAT_2 } ) . METHOD_1 ( IDENT_1 . IDENT_2 ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 1 , 2 , 3 , 4 } ) . METHOD_1 ( IDENT_1 . IDENT_2 ) ) ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { double [ ] d = IDENT_0 [ i ] ; org . nd4j . linalg . api . ndarray . INDArray e = exp . get ( i ) ; org . nd4j . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = org . nd4j . IDENT_3 . IDENT_4 . IDENT_5 . create ( ) ; org . nd4j . IDENT_3 . IDENT_4 . IDENT_7 range = IDENT_6 . range ( d [ 0 ] , d [ 1 ] , d [ 2 ] , IDENT_1 . IDENT_2 ) ; org . nd4j . IDENT_3 . IDENT_4 . IDENT_7 IDENT_8 = range . METHOD_2 ( true ) ; org . nd4j . IDENT_3 . validation . IDENT_9 tc = new org . nd4j . IDENT_3 . validation . METHOD_3 ( IDENT_6 ) . expected ( range , e ) . METHOD_4 ( java . util . Arrays . toString ( d ) ) . METHOD_5 ( false ) ; "<AssertPlaceHolder>" ; } } validate ( org . nd4j . IDENT_3 . validation . METHOD_3 ) { return org . nd4j . IDENT_3 . validation . IDENT_10 . validate ( IDENT_11 , false ) ; }
org . junit . Assert . assertNull ( org . nd4j . IDENT_3 . validation . IDENT_10 . validate ( tc ) ) 