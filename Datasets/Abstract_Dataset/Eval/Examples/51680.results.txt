METHOD_0 ( ) { for ( boolean IDENT_0 : new boolean [ ] { false , true } ) { long [ ] IDENT_1 = ( IDENT_0 ) ? new long [ ] { 1 , 4 } : new long [ ] { 4 } ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 12 , 12 ) . METHOD_2 ( 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = IDENT_2 . METHOD_3 ( 0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 4 } , IDENT_1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . create ( 3 , 4 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { IDENT_5 . METHOD_4 ( i , IDENT_3 ) ; } IDENT_5 . METHOD_5 ( IDENT_2 ) ; IDENT_5 . METHOD_6 ( IDENT_4 ) ; IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_7 ( 3 , 4 ) ; err = org . nd4j . IDENT_7 . validation . IDENT_8 . validate ( new org . nd4j . IDENT_7 . validation . METHOD_8 ( new org . nd4j . IDENT_7 . IDENT_9 . METHOD_9 ( IDENT_2 , IDENT_10 , IDENT_6 , IDENT_0 , 1 ) ) . METHOD_10 ( 0 , IDENT_11 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_10 ( int , org . nd4j . linalg . api . ndarray . INDArray ) { IDENT_12 . put ( IDENT_13 , new org . nd4j . IDENT_7 . validation . IDENT_14 . METHOD_11 ( expected ) ) ; IDENT_15 . put ( IDENT_13 , expected . METHOD_12 ( ) ) ; return this ; }
org . junit . Assert . assertNull ( err , err ) 