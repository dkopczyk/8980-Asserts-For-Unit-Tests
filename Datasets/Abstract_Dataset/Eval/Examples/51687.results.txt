METHOD_0 ( ) { for ( boolean IDENT_0 : new boolean [ ] { false , true } ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ( - 5 ) , 6 , 12 ) . METHOD_2 ( 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_3 ( IDENT_1 , true ) ; org . nd4j . linalg . api . ndarray . INDArray max = org . nd4j . linalg . factory . Nd4j . create ( 3 , 4 ) ; max . METHOD_4 ( 2 , 3 , 1.0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_6 ; if ( IDENT_0 ) { IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( new long [ ] { 1 , 1 } , FLOAT_0 ) ; } else { IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( FLOAT_0 ) ; } org . nd4j . linalg . api . ndarray . INDArray IDENT_7 = IDENT_2 . METHOD_7 ( max ) . METHOD_7 ( FLOAT_0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_8 = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( 3 , 4 ) ; java . lang . String err = org . nd4j . IDENT_9 . validation . IDENT_10 . validate ( new org . nd4j . IDENT_9 . validation . METHOD_9 ( new org . nd4j . IDENT_9 . IDENT_11 . METHOD_10 ( IDENT_1 , IDENT_6 , IDENT_8 , IDENT_0 ) ) . METHOD_11 ( 0 , IDENT_7 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_11 ( int , org . nd4j . linalg . api . ndarray . INDArray ) { IDENT_12 . put ( IDENT_13 , new org . nd4j . IDENT_9 . validation . IDENT_14 . METHOD_12 ( expected ) ) ; IDENT_15 . put ( IDENT_13 , expected . METHOD_13 ( ) ) ; return this ; }
org . junit . Assert . assertNull ( err ) 