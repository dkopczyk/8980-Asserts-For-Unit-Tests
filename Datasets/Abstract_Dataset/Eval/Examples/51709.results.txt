METHOD_0 ( ) { for ( int [ ] IDENT_0 : new int [ ] [ ] { new int [ ] { 0 , 1 , 2 } , new int [ ] { 0 , 2 , 1 } , new int [ ] { 1 , 0 , 2 } , new int [ ] { 1 , 2 , 0 } , new int [ ] { 2 , 0 , 1 } , new int [ ] { 2 , 1 , 0 } } ) { org . nd4j . linalg . api . ndarray . INDArray in = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , INT_0 , INT_0 ) . METHOD_2 ( 3 , 4 , 5 ) ; org . nd4j . linalg . api . ndarray . INDArray exp = in . METHOD_3 ( IDENT_0 ) . METHOD_4 ( STRING_0 ) ; int [ ] IDENT_1 = new int [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { IDENT_1 [ i ] = ( ( int ) ( in . size ( IDENT_0 [ i ] ) ) ) ; } org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . create ( IDENT_1 ) ; org . nd4j . IDENT_2 . validation . IDENT_3 op = new org . nd4j . IDENT_2 . validation . METHOD_5 ( new org . nd4j . IDENT_2 . IDENT_4 . METHOD_6 ( in , out , IDENT_0 ) ) ; op . METHOD_7 ( 0 , exp ) ; "<AssertPlaceHolder>" ; } } validate ( org . nd4j . IDENT_2 . validation . IDENT_5 ) { return org . nd4j . IDENT_2 . validation . IDENT_6 . validate ( IDENT_7 , false ) ; }
org . junit . Assert . assertNull ( org . nd4j . IDENT_2 . validation . IDENT_6 . validate ( op ) ) 