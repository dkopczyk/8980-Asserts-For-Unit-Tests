METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 0 , INT_0 ) . METHOD_2 ( 1 , 5 , 5 ) . METHOD_3 ( IDENT_0 . IDENT_1 ) ; System . out . println ( org . nd4j . IDENT_2 . IDENT_3 . Arrays . toString ( arr . METHOD_4 ( ) ) ) ; System . out . println ( arr ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( 0 , 1 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray size = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( ( - 1 ) , ( - 1 ) , ( - 1 ) ) ; org . nd4j . linalg . api . IDENT_5 . IDENT_6 op = org . nd4j . linalg . api . IDENT_5 . IDENT_6 . builder ( STRING_0 ) . METHOD_6 ( arr , IDENT_4 , size ) . build ( ) ; org . nd4j . IDENT_2 . IDENT_3 . List < org . nd4j . linalg . api . METHOD_4 . IDENT_7 > l = op . METHOD_7 ( ) ; long [ ] METHOD_4 = l . get ( 0 ) . METHOD_8 ( ) ; long [ ] IDENT_8 = new long [ ] { 1 , 4 , 3 } ; "<AssertPlaceHolder>" ; } METHOD_8 ( ) { return new int [ ] { IDENT_9 } ; }
org . junit . Assert . assertArrayEquals ( IDENT_8 , METHOD_4 ) 