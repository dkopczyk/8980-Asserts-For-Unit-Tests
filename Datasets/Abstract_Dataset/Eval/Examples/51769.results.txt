METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 = METHOD_1 ( ) ; IDENT_4 . remove ( STRING_0 ) ; java . lang . String IDENT_5 = STRING_1 ; IDENT_3 . METHOD_2 ( IDENT_5 , new org . nd4j . IDENT_0 . IDENT_1 . METHOD_3 ( ) { @ org . nd4j . IDENT_0 . IDENT_1 . Override public org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 [ ] METHOD_4 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 , org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 , org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 [ ] IDENT_8 ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 input = IDENT_7 . METHOD_5 ( STRING_2 , IDENT_4 . get ( STRING_2 ) ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 IDENT_9 = IDENT_7 . METHOD_5 ( STRING_3 , IDENT_4 . get ( STRING_3 ) ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 IDENT_10 = IDENT_7 . METHOD_6 ( input , IDENT_9 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 IDENT_11 = IDENT_7 . METHOD_7 ( ) . METHOD_8 ( IDENT_10 ) ; return new org . nd4j . IDENT_0 . IDENT_1 . IDENT_6 [ ] { METHOD_8 } ; } } , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( ) { return this . IDENT_12 . METHOD_10 ( ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_3 . METHOD_9 ( ) . size ( ) ) 