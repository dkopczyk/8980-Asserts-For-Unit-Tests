METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 = METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( STRING_0 , new org . nd4j . IDENT_0 . IDENT_1 . METHOD_3 ( ) { @ org . nd4j . IDENT_0 . IDENT_1 . Override public org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] METHOD_4 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_6 , org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 , org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] IDENT_7 ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 input = IDENT_6 . METHOD_5 ( STRING_1 , IDENT_4 . get ( STRING_1 ) ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 IDENT_8 = IDENT_6 . METHOD_5 ( STRING_2 , IDENT_4 . get ( STRING_2 ) ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 IDENT_9 = IDENT_6 . METHOD_6 ( input , IDENT_8 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 IDENT_10 = IDENT_6 . METHOD_7 ( ) . METHOD_8 ( IDENT_9 ) ; return new org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] { METHOD_8 } ; } } , IDENT_4 ) ; IDENT_3 . METHOD_2 ( STRING_3 , new org . nd4j . IDENT_0 . IDENT_1 . METHOD_3 ( ) { @ org . nd4j . IDENT_0 . IDENT_1 . Override public org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] METHOD_4 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_6 , org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 , org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] IDENT_7 ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 y = IDENT_6 . METHOD_5 ( STRING_4 , IDENT_4 . get ( STRING_4 ) ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 IDENT_11 = y . METHOD_9 ( STRING_5 , 1.0 ) ; return new org . nd4j . IDENT_0 . IDENT_1 . IDENT_5 [ ] { IDENT_11 } ; } } , IDENT_4 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_12 = IDENT_3 . METHOD_10 ( STRING_3 ) ; org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_13 = new org . nd4j . IDENT_0 . IDENT_1 . HashMap ( ) ; IDENT_13 . put ( STRING_4 , IDENT_4 . get ( STRING_4 ) ) ; org . nd4j . linalg . api . ndarray . INDArray output = IDENT_12 . exec ( IDENT_13 , org . nd4j . IDENT_0 . IDENT_1 . Collections . singletonList ( STRING_5 ) ) . get ( STRING_5 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_14 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 0 , 1 , 0 } ) ; "<AssertPlaceHolder>" ; } create ( double [ ] , int [ ] , int [ ] , long ) { if ( ( IDENT_15 . length ) == 1 ) { if ( ( IDENT_15 [ 0 ] ) != ( data . length ) ) throw new org . nd4j . linalg . exception . METHOD_11 ( ( ( ( STRING_6 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_15 ) ) ) + STRING_7 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_12 ( data . length , IDENT_15 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , org . nd4j . linalg . util . IDENT_16 . METHOD_13 ( IDENT_15 ) , org . nd4j . linalg . util . IDENT_16 . METHOD_13 ( IDENT_17 ) , IDENT_18 . IDENT_19 , org . nd4j . linalg . factory . Nd4j . METHOD_14 ( ) . METHOD_15 ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_16 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_14 , output ) 