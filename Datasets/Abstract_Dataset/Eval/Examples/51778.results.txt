METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new long [ ] { 3 , 4 } ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( org . nd4j . linalg . IDENT_2 . IDENT_3 < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > p : org . nd4j . linalg . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_1 [ 0 ] , IDENT_1 [ 1 ] , INT_0 , IDENT_6 . IDENT_7 ) ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_8 = p . METHOD_2 ( ) . METHOD_3 ( 100 ) ; org . nd4j . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = org . nd4j . IDENT_9 . IDENT_10 . IDENT_11 . create ( ) ; org . nd4j . IDENT_9 . IDENT_10 . IDENT_13 in = IDENT_12 . METHOD_4 ( STRING_0 , IDENT_8 ) ; org . nd4j . IDENT_9 . IDENT_10 . IDENT_13 IDENT_14 = IDENT_12 . METHOD_5 ( in , i ) ; org . nd4j . IDENT_9 . IDENT_10 . IDENT_13 IDENT_15 = IDENT_12 . METHOD_6 ( IDENT_14 , i ) ; org . nd4j . linalg . api . ndarray . INDArray out = IDENT_12 . METHOD_7 ( ) ; java . lang . String msg = ( ( STRING_1 + i ) + STRING_2 ) + ( p . METHOD_8 ( ) ) ; "<AssertPlaceHolder>" ; } } } METHOD_8 ( ) { return IDENT_16 ; }
org . junit . Assert . assertEquals ( msg , out , IDENT_8 ) 