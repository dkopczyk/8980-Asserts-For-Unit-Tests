METHOD_0 ( ) { boolean IDENT_0 = true ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . nd4j . IDENT_1 . IDENT_2 IDENT_1 = new org . nd4j . IDENT_1 . METHOD_3 ( ) ; org . nd4j . IDENT_1 . IDENT_3 IDENT_4 = new org . nd4j . IDENT_1 . METHOD_4 ( ) ; org . nd4j . IDENT_1 . IDENT_5 IDENT_6 = new org . nd4j . IDENT_1 . METHOD_5 ( 2 ) ; org . nd4j . IDENT_1 . IDENT_7 IDENT_8 = new org . nd4j . IDENT_1 . METHOD_6 ( 2 ) ; org . nd4j . IDENT_1 . IDENT_9 IDENT_10 = new org . nd4j . IDENT_1 . METHOD_7 ( 2 ) ; org . nd4j . IDENT_1 . IDENT_11 . IDENT_12 IDENT_13 = new org . nd4j . IDENT_1 . IDENT_11 . METHOD_8 ( ) ; org . nd4j . IDENT_1 . IDENT_14 IDENT_15 = new org . nd4j . IDENT_1 . METHOD_9 ( ) ; org . nd4j . IDENT_1 . IDENT_16 [ ] arr = new org . nd4j . IDENT_1 . IDENT_16 [ ] { IDENT_1 , IDENT_4 , IDENT_6 , IDENT_8 , IDENT_10 , IDENT_13 , IDENT_15 } ; org . nd4j . linalg . api . ndarray . INDArray IDENT_17 = org . nd4j . linalg . factory . Nd4j . create ( 10 , 3 ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_17 . METHOD_10 ( i , ( i OP_0 3 ) , 1.0 ) ; } org . nd4j . linalg . api . ndarray . INDArray IDENT_18 = org . nd4j . linalg . factory . Nd4j . METHOD_11 ( 10 , 3 ) ; IDENT_18 . METHOD_12 ( IDENT_18 . METHOD_13 ( 1 ) ) ; IDENT_1 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_10 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_15 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_17 = org . nd4j . linalg . factory . Nd4j . METHOD_15 ( ) . exec ( new org . nd4j . linalg . api . IDENT_19 . random . impl . METHOD_16 ( org . nd4j . linalg . factory . Nd4j . METHOD_17 ( 10 , 3 ) , FLOAT_0 ) ) ; IDENT_18 = org . nd4j . linalg . factory . Nd4j . METHOD_11 ( 10 , 3 ) ; IDENT_4 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_8 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_17 = org . nd4j . linalg . factory . Nd4j . METHOD_15 ( ) . exec ( new org . nd4j . linalg . api . IDENT_19 . random . impl . METHOD_16 ( org . nd4j . linalg . factory . Nd4j . METHOD_17 ( 10 , 1 ) , FLOAT_0 ) ) ; IDENT_18 = org . nd4j . linalg . factory . Nd4j . METHOD_11 ( 10 , 1 ) ; IDENT_6 . METHOD_14 ( IDENT_17 , IDENT_18 ) ; IDENT_13 . METHOD_14 ( org . nd4j . linalg . factory . Nd4j . METHOD_11 ( 10 , 3 ) , org . nd4j . linalg . factory . Nd4j . METHOD_11 ( 10 , 3 ) ) ; for ( org . nd4j . IDENT_1 . IDENT_16 e : arr ) { java . lang . String json = e . METHOD_18 ( ) ; if ( IDENT_0 ) { System . out . println ( ( ( ( ( e . getClass ( ) ) + "\n" ) + json ) + STRING_0 ) ) ; } org . nd4j . IDENT_1 . IDENT_16 IDENT_20 = org . nd4j . IDENT_1 . IDENT_21 . METHOD_19 ( json , org . nd4j . IDENT_1 . IDENT_21 . class ) ; "<AssertPlaceHolder>" ; } } METHOD_18 ( ) { try { return new org . IDENT_22 . api . transform . IDENT_23 . METHOD_20 ( ) . METHOD_21 ( ) . METHOD_22 ( this ) ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertEquals ( e . METHOD_18 ( ) , METHOD_19 . METHOD_18 ( ) ) 