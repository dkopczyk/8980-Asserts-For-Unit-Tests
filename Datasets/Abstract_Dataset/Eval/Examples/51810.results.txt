METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray in = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_0 . IDENT_1 , 1 , 1 , 1 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray size = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( 8 , 8 ) ; org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . create ( IDENT_0 . IDENT_1 , 1 , 8 , 8 , 3 ) ; org . nd4j . linalg . api . IDENT_2 . IDENT_3 op = org . nd4j . linalg . api . IDENT_2 . IDENT_3 . builder ( STRING_0 ) . METHOD_3 ( in , size ) . METHOD_4 ( out ) . METHOD_5 ( 1 ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( op ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_0 . IDENT_1 , 1 , 8 , 8 , 3 ) ; "<AssertPlaceHolder>" ; } exec ( java . lang . String ) { code = org . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_7 ( ( STRING_1 + ( java . lang . Thread . METHOD_8 ( ) . getId ( ) ) ) , code ) ; org . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_9 ( ) ; log . info ( STRING_2 ) ; log . info ( code ) ; int result = METHOD_10 ( code , null ) ; if ( result != 0 ) { METHOD_11 ( ) ; throw new java . lang . RuntimeException ( STRING_3 ) ; } log . info ( STRING_4 ) ; org . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_12 ( ) ; }
org . junit . Assert . assertEquals ( exp , out ) 