METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 4 } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 4 } ) ; "<AssertPlaceHolder>" ; } create ( double [ ] , int [ ] , int [ ] , long ) { if ( ( IDENT_2 . length ) == 1 ) { if ( ( IDENT_2 [ 0 ] ) != ( data . length ) ) throw new org . nd4j . linalg . exception . METHOD_1 ( ( ( ( STRING_0 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_2 ) ) ) + STRING_1 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_2 ( data . length , IDENT_2 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , org . nd4j . linalg . util . IDENT_3 . METHOD_3 ( IDENT_2 ) , org . nd4j . linalg . util . IDENT_3 . METHOD_3 ( IDENT_4 ) , IDENT_5 . IDENT_6 , org . nd4j . linalg . factory . Nd4j . METHOD_4 ( ) . METHOD_5 ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 