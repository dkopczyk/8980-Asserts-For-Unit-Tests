METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray values = org . nd4j . linalg . factory . Nd4j . create ( 2 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( 2 , 2 ) ; values . put ( 0 , 0 , 0 ) ; IDENT_0 . put ( 0 , 0 , 2 ) ; values . put ( 1 , 0 , 0 ) ; IDENT_0 . put ( 1 , 0 , 2 ) ; values . put ( 0 , 1 , 0 ) ; IDENT_0 . put ( 0 , 1 , 0 ) ; values . put ( 1 , 1 , 2 ) ; IDENT_0 . put ( 1 , 1 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_1 . IDENT_2 , 2 ) . METHOD_3 ( 1 , 1 ) , 2 ) . METHOD_3 ( 2 , 1 ) ; IDENT_3 . val IDENT_4 = new org . nd4j . linalg . METHOD_4 ( values , IDENT_0 ) ; IDENT_4 . METHOD_5 ( 1 ) ; org . nd4j . linalg . api . ndarray . INDArray results = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } exec ( java . lang . String ) { code = org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_7 ( ( STRING_0 + ( java . lang . Thread . METHOD_8 ( ) . getId ( ) ) ) , code ) ; org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_9 ( ) ; log . info ( STRING_1 ) ; log . info ( code ) ; int result = METHOD_10 ( code , null ) ; if ( result != 0 ) { METHOD_11 ( ) ; throw new java . lang . RuntimeException ( STRING_2 ) ; } log . info ( STRING_3 ) ; org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_12 ( ) ; }
org . junit . Assert . assertEquals ( expected , results ) 