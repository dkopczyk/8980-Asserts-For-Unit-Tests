METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 9 , 9 , IDENT_0 . IDENT_1 ) . METHOD_2 ( STRING_0 , 3 , 3 ) ; for ( char order : new char [ ] { STRING_0 , STRING_1 } ) { System . out . println ( order ) ; org . nd4j . linalg . factory . Nd4j . factory ( ) . METHOD_3 ( order ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 6 , 6 , IDENT_0 . IDENT_1 ) . METHOD_2 ( STRING_0 , 2 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 7 , 9 , 3 , IDENT_0 . IDENT_1 ) . METHOD_2 ( STRING_0 , 1 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_4 ( IDENT_2 , IDENT_3 ) ; System . out . println ( IDENT_4 ) ; System . out . println ( expected ) ; "<AssertPlaceHolder>" ; } } println ( java . lang . String ) { com . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_5 ( ) ; System . out . println ( ( ( com . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_6 ( ) ) + message ) ) ; System . out . METHOD_7 ( ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_4 ) 