METHOD_0 ( ) { for ( char order : new char [ ] { STRING_0 , STRING_1 } ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 } , new long [ ] { 1 , 2 } , order ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 3 , 4 } , new long [ ] { 1 , 2 } , order ) ; org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 0 , IDENT_0 , IDENT_1 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_2 ( ) . commit ( ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 1 , 2 } , new double [ ] { 3 , 4 } } ) ; "<AssertPlaceHolder>" ; } } create ( double [ ] , int [ ] , int [ ] , long ) { if ( ( IDENT_2 . length ) == 1 ) { if ( ( IDENT_2 [ 0 ] ) != ( data . length ) ) throw new org . nd4j . linalg . exception . METHOD_3 ( ( ( ( STRING_2 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_2 ) ) ) + STRING_3 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_4 ( data . length , IDENT_2 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , org . nd4j . linalg . util . IDENT_3 . METHOD_5 ( IDENT_2 ) , org . nd4j . linalg . util . IDENT_3 . METHOD_5 ( IDENT_4 ) , IDENT_5 . IDENT_6 , org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . METHOD_7 ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_8 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( java . lang . String . valueOf ( order ) , exp , out ) 