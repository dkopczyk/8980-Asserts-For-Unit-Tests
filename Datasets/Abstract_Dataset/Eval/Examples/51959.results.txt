METHOD_0 ( ) { IDENT_0 . val array = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 6 , 6 , IDENT_1 . IDENT_2 ) . METHOD_2 ( 2 , 3 ) ; IDENT_0 . val exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1.0 , 2.0 , FLOAT_0 , 1.0 , 2.0 , FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_1 , FLOAT_2 , FLOAT_3 , 1.0 , 2.0 , FLOAT_0 , 1.0 , 2.0 , FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_1 , FLOAT_2 , FLOAT_3 } , new int [ ] { 4 , 6 } ) ; IDENT_0 . val output = org . nd4j . linalg . factory . Nd4j . create ( 4 , 6 ) ; IDENT_0 . val op = org . nd4j . linalg . api . IDENT_3 . IDENT_4 . builder ( STRING_0 ) . METHOD_3 ( array ) . METHOD_4 ( 2 , 2 ) . METHOD_5 ( output ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( op ) ; "<AssertPlaceHolder>" ; } exec ( java . lang . String ) { code = org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_7 ( ( STRING_1 + ( java . lang . Thread . METHOD_8 ( ) . getId ( ) ) ) , code ) ; org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_9 ( ) ; log . info ( STRING_2 ) ; log . info ( code ) ; int result = METHOD_10 ( code , null ) ; if ( result != 0 ) { METHOD_11 ( ) ; throw new java . lang . RuntimeException ( STRING_3 ) ; } log . info ( STRING_4 ) ; org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_12 ( ) ; }
org . junit . Assert . assertEquals ( exp , output ) 