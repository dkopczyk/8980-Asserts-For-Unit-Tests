METHOD_0 ( ) { org . nd4j . linalg . List < org . nd4j . linalg . api . ndarray . INDArray > list = new org . nd4j . linalg . ArrayList ( ) ; list . add ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 3 , 3 , IDENT_0 . IDENT_1 ) ) ; list . add ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 4 , 6 , 3 , IDENT_0 . IDENT_1 ) ) ; list . add ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 7 , 9 , 3 , IDENT_0 . IDENT_1 ) ) ; org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( list ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( new double [ ] [ ] { new double [ ] { 1 , 2 , 3 } , new double [ ] { 4 , 5 , 6 } , new double [ ] { 7 , 8 , 9 } } ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . nd4j . linalg . factory . INDArray [ ] ) { org . nd4j . base . IDENT_2 . METHOD_4 ( ( ( IDENT_3 != null ) && ( ( IDENT_3 . length ) > 0 ) ) , STRING_0 ) ; if ( ( IDENT_3 [ 0 ] . METHOD_5 ( ) ) == 1 ) { return org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_3 ) ; } org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . METHOD_2 ( IDENT_3 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_7 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( exp , out ) 