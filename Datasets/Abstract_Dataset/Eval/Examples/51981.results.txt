METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( 10 , 10 ) . METHOD_1 ( FLOAT_0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( 10 , 10 ) . METHOD_1 ( FLOAT_1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( 10 , 10 ) . METHOD_1 ( FLOAT_2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . create ( INT_0 ) . METHOD_1 ( FLOAT_3 ) ; org . nd4j . linalg . api . ndarray . INDArray table = org . nd4j . linalg . factory . Nd4j . create ( INT_1 ) ; double IDENT_4 = FLOAT_4 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . create ( 10 ) . METHOD_1 ( FLOAT_0 ) ; int IDENT_6 = 1 ; log . info ( STRING_0 , java . util . Arrays . toString ( IDENT_0 . METHOD_3 ( IDENT_6 ) . METHOD_4 ( ) . data ( ) . METHOD_5 ( ) ) ) ; org . nd4j . linalg . api . IDENT_7 . IDENT_8 . impl . IDENT_9 op = new org . nd4j . linalg . api . IDENT_7 . IDENT_8 . impl . METHOD_6 ( IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 , table , IDENT_6 , new int [ ] { } , new int [ ] { } , 1 , 3 , 10 , IDENT_4 , INT_2 , 10 ) ; IDENT_10 . val IDENT_11 = new org . nd4j . linalg . api . IDENT_7 . impl . IDENT_12 . METHOD_7 ( IDENT_6 , 3 , IDENT_0 , IDENT_2 , IDENT_3 , table , 1 , IDENT_4 , INT_2 , org . nd4j . linalg . factory . Nd4j . empty ( IDENT_0 . METHOD_8 ( ) ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ) . exec ( IDENT_11 ) ; log . info ( STRING_0 , java . util . Arrays . toString ( IDENT_0 . METHOD_3 ( IDENT_6 ) . METHOD_4 ( ) . data ( ) . METHOD_5 ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( long ) { if ( ( METHOD_10 ( ) ) && ( r == 0 ) ) return this ; else if ( ( METHOD_10 ( ) ) && ( r > 0 ) ) throw new java . lang . IllegalArgumentException ( ( ( ( STRING_1 + r ) + STRING_2 ) + ( this . size ( 0 ) ) ) ) ; org . nd4j . base . IDENT_13 . METHOD_11 ( ( ( METHOD_12 ( ) ) == 2 ) , STRING_3 ) ; org . nd4j . base . IDENT_13 . METHOD_11 ( ( r < ( METHOD_13 ( ) ) ) , STRING_4 ) ; return METHOD_14 ( r , 1 ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_0 . METHOD_3 ( IDENT_6 ) ) 