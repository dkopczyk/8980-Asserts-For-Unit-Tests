METHOD_0 ( ) { int IDENT_0 = 10 ; int IDENT_1 = 3 ; int IDENT_2 = 4 ; int IDENT_3 = 2 ; int IDENT_4 = 5 ; IDENT_5 . val IDENT_6 = new long [ ] { IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 } ; int IDENT_7 = ( ( IDENT_0 * IDENT_1 ) * IDENT_2 ) * IDENT_3 ; int IDENT_8 = IDENT_0 * IDENT_4 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_9 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , IDENT_7 , IDENT_7 , IDENT_10 . IDENT_11 ) . METHOD_2 ( IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_12 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , IDENT_8 , IDENT_8 , IDENT_10 . IDENT_11 ) . METHOD_2 ( IDENT_0 , IDENT_4 ) ; org . nd4j . linalg . dataset . IDENT_13 IDENT_14 = new org . nd4j . linalg . dataset . METHOD_3 ( IDENT_9 , IDENT_12 ) ; IDENT_14 . METHOD_4 ( ) ; for ( int IDENT_15 = 1 ; IDENT_15 < 4 ; IDENT_15 ++ ) { for ( int IDENT_16 = 0 ; IDENT_16 < ( IDENT_7 / ( IDENT_6 [ IDENT_15 ] ) ) ; IDENT_16 ++ ) { for ( int i = 0 , j = 1 ; j < ( IDENT_6 [ IDENT_15 ] ) ; i ++ , j ++ ) { int IDENT_17 = IDENT_14 . METHOD_5 ( ) . METHOD_6 ( IDENT_16 , IDENT_15 ) . METHOD_7 ( i ) ; int IDENT_18 = IDENT_14 . METHOD_5 ( ) . METHOD_6 ( IDENT_16 , IDENT_15 ) . METHOD_7 ( j ) ; int IDENT_19 = IDENT_18 - IDENT_17 ; "<AssertPlaceHolder>" ; } } } } METHOD_8 ( int ) { int IDENT_20 = IDENT_21 . IDENT_20 ; org . nd4j . base . IDENT_22 . METHOD_9 ( ( IDENT_23 < IDENT_20 ) , ( STRING_0 + STRING_1 ) , IDENT_23 , IDENT_20 ) ; if ( IDENT_23 < 0 ) return ( ( int ) ( METHOD_8 ( ) [ ( IDENT_23 + IDENT_20 ) ] ) ) ; return ( ( int ) ( METHOD_8 ( ) [ IDENT_23 ] ) ) ; }
org . junit . Assert . assertEquals ( IDENT_19 , IDENT_9 . METHOD_8 ( IDENT_15 ) ) 