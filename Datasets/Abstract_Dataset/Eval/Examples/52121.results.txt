METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray x = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 0 , 1 , 0 , 0 } ) ; org . nd4j . linalg . api . ndarray . INDArray y = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 0 , 1 , 1 , 0 } ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( new boolean [ ] { false , false , false , true , false } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( x , y ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_4 . IDENT_5 , x . METHOD_3 ( ) , x . METHOD_4 ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_5 ( ) . exec ( new org . nd4j . linalg . api . IDENT_1 . impl . IDENT_2 . IDENT_6 . IDENT_7 . METHOD_6 ( x , y , IDENT_0 , 0.0 ) ) ; return IDENT_0 ; }
org . junit . Assert . assertEquals ( exp , IDENT_0 ) 