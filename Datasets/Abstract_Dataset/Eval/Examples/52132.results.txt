METHOD_0 ( ) { IDENT_0 . val IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new long [ ] { 1 , 2 , 3 , 4 } , new long [ ] { 4 } , IDENT_2 . IDENT_3 ) ; IDENT_0 . val builder = new com . google . IDENT_4 . METHOD_1 ( INT_0 ) ; IDENT_0 . val IDENT_5 = IDENT_1 . METHOD_2 ( builder ) ; builder . METHOD_3 ( IDENT_5 ) ; IDENT_0 . val db = builder . METHOD_4 ( ) ; IDENT_0 . val IDENT_6 = org . nd4j . graph . IDENT_7 . METHOD_5 ( db ) ; IDENT_0 . val IDENT_8 = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . nd4j . graph . IDENT_7 ) { IDENT_0 . val IDENT_9 = array . METHOD_7 ( ) ; IDENT_0 . val order = array . METHOD_8 ( ) ; IDENT_0 . val IDENT_10 = ( ( int ) ( array . METHOD_9 ( 0 ) ) ) ; IDENT_0 . val IDENT_11 = new long [ org . nd4j . linalg . api . METHOD_9 . IDENT_12 . METHOD_10 ( IDENT_10 ) ] ; for ( int e = 0 ; e < ( IDENT_11 . length ) ; e ++ ) IDENT_11 [ e ] = array . METHOD_9 ( e ) ; if ( org . nd4j . linalg . api . METHOD_9 . IDENT_12 . isEmpty ( IDENT_11 ) ) return org . nd4j . linalg . factory . Nd4j . empty ( ) ; char IDENT_13 = ( ( IDENT_11 [ ( ( IDENT_11 . length ) - 1 ) ] ) == INT_1 ) ? STRING_0 : STRING_1 ; IDENT_0 . val IDENT_14 = org . nd4j . linalg . api . METHOD_9 . IDENT_12 . METHOD_11 ( IDENT_11 ) ; IDENT_0 . val IDENT_15 = org . nd4j . linalg . api . METHOD_9 . IDENT_12 . METHOD_12 ( IDENT_11 ) ; IDENT_0 . val IDENT_16 = org . nd4j . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_13 ( METHOD_7 ) ; IDENT_0 . val IDENT_21 = org . nd4j . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_14 ( order ) ; IDENT_0 . val IDENT_22 = ( IDENT_10 > 0 ) ? org . nd4j . linalg . util . IDENT_23 . METHOD_15 ( METHOD_11 ) : 1 ; IDENT_0 . val IDENT_24 = array . METHOD_16 ( ) ; switch ( IDENT_16 ) { case IDENT_25 : { IDENT_0 . val IDENT_26 = new double [ METHOD_15 ] ; IDENT_0 . val db = IDENT_24 . order ( IDENT_21 ) . METHOD_17 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = db . get ( e ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_25 ) ; } case IDENT_27 : { IDENT_0 . val IDENT_26 = new float [ METHOD_15 ] ; IDENT_0 . val IDENT_28 = IDENT_24 . order ( IDENT_21 ) . METHOD_18 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = IDENT_28 . get ( e ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_27 ) ; } case IDENT_29 : { IDENT_0 . val IDENT_26 = new float [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_19 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = org . nd4j . linalg . factory . IDENT_30 . METHOD_20 ( ( ( int ) ( sb . get ( e ) ) ) ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_29 ) ; } case IDENT_31 : { IDENT_0 . val IDENT_26 = new int [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_21 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = sb . get ( e ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_31 ) ; } case IDENT_3 : { IDENT_0 . val IDENT_26 = new long [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_22 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = sb . get ( e ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_3 ) ; } case IDENT_32 : { IDENT_0 . val IDENT_26 = new short [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_19 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = sb . get ( e ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_32 ) ; } case IDENT_33 : { IDENT_0 . val IDENT_26 = new byte [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_23 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = ( ( byte ) ( sb . get ( ( e + ( sb . position ( ) ) ) ) ) ) ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_33 ) ; } case IDENT_34 : { IDENT_0 . val IDENT_26 = new boolean [ METHOD_15 ] ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) . METHOD_23 ( ) ; for ( int e = 0 ; e < METHOD_15 ; e ++ ) IDENT_26 [ e ] = ( sb . get ( ( e + ( sb . position ( ) ) ) ) ) == 1 ; return org . nd4j . linalg . factory . Nd4j . create ( IDENT_26 , METHOD_11 , METHOD_12 , IDENT_13 , IDENT_2 . IDENT_34 ) ; } case IDENT_35 : { try { IDENT_0 . val list = new org . nd4j . linalg . factory . ArrayList < java . lang . String > ( METHOD_15 ) ; IDENT_0 . val sb = IDENT_24 . order ( IDENT_21 ) ; IDENT_0 . val pos = IDENT_24 . position ( ) ; IDENT_0 . val arr = new byte [ sb . METHOD_24 ( ) ] ; for ( int e = 0 ; e < ( arr . length ) ; e ++ ) { arr [ e ] = sb . get ( e ) ; } IDENT_0 . val bytes = org . nd4j . linalg . factory . Arrays . METHOD_25 ( arr , pos , arr . length ) ; IDENT_0 . val IDENT_36 = new org . nd4j . linalg . factory . ByteArrayInputStream ( bytes ) ; IDENT_0 . val IDENT_37 = new org . nd4j . linalg . factory . METHOD_26 ( IDENT_36 ) ; IDENT_0 . val length = ( ( int ) ( IDENT_37 . METHOD_27 ( ) ) ) ; IDENT_0 . val IDENT_38 = new long [ length + 1 ] ; for ( int e = 0 ; e <= length ; e ++ ) IDENT_38 [ e ] = IDENT_37 . METHOD_27 ( ) ; for ( int e = 0 ; e < length ; e ++ ) { IDENT_0 . val start = IDENT_38 [ e ] ; IDENT_0 . val end = IDENT_38 [ ( e + 1 ) ] ; IDENT_0 . val len = end - start ; IDENT_0 . val builder = new java . lang . StringBuilder ( ) ; for ( int c = 0 ; c < len ; c ++ ) { builder . append ( ( ( char ) ( IDENT_37 . METHOD_28 ( ) ) ) ) ; } list . add ( builder . toString ( ) ) ; } return org . nd4j . linalg . factory . Nd4j . create ( list , METHOD_11 ) ; } catch ( org . nd4j . linalg . factory . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } default : throw new java . lang . METHOD_29 ( ( ( STRING_2 + IDENT_16 ) + "]" ) ) ; } }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_8 ) 