METHOD_0 ( ) { if ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) . contains ( STRING_0 ) ) return ; IDENT_0 . val IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 9 , 9 , IDENT_2 . IDENT_3 ) . METHOD_4 ( STRING_1 , 3 , 3 ) . METHOD_5 ( STRING_2 ) ; IDENT_0 . val IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 9 , 9 , IDENT_2 . IDENT_3 ) . METHOD_4 ( STRING_1 , 3 , 3 ) . METHOD_5 ( STRING_2 ) ; IDENT_0 . val exp = IDENT_1 . METHOD_6 ( IDENT_4 ) ; IDENT_0 . val res = org . nd4j . linalg . factory . Nd4j . create ( IDENT_2 . IDENT_3 , new long [ ] { 3 , 3 } , STRING_1 ) ; IDENT_0 . val IDENT_5 = org . nd4j . linalg . api . IDENT_6 . IDENT_7 . builder ( STRING_3 ) . METHOD_7 ( IDENT_1 , IDENT_4 ) . METHOD_8 ( res ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . exec ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } exec ( java . lang . String ) { code = org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_9 ( ( STRING_4 + ( java . lang . Thread . METHOD_10 ( ) . getId ( ) ) ) , code ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_11 ( ) ; log . info ( STRING_5 ) ; log . info ( code ) ; int result = METHOD_12 ( code , null ) ; if ( result != 0 ) { METHOD_13 ( ) ; throw new java . lang . RuntimeException ( STRING_6 ) ; } log . info ( STRING_7 ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_14 ( ) ; }
org . junit . Assert . assertEquals ( exp , res ) 