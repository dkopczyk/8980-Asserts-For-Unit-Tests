METHOD_0 ( ) { if ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) . contains ( STRING_0 ) ) return ; IDENT_0 . val IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 9 , 9 , IDENT_2 . IDENT_3 ) . METHOD_4 ( STRING_1 , 3 , 3 ) ; IDENT_0 . val IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 3 , 3 , IDENT_2 . IDENT_3 ) . METHOD_4 ( STRING_1 , 3 , 1 ) ; IDENT_0 . val res = org . nd4j . linalg . factory . Nd4j . create ( IDENT_2 . IDENT_3 , new long [ ] { 3 , 1 } , STRING_1 ) ; IDENT_0 . val IDENT_5 = org . nd4j . linalg . api . IDENT_6 . IDENT_7 . builder ( STRING_2 ) . METHOD_5 ( IDENT_1 , IDENT_4 ) . METHOD_6 ( res ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . exec ( IDENT_5 ) ; IDENT_0 . val exp = IDENT_1 . METHOD_7 ( IDENT_4 ) ; log . info ( STRING_3 , exp ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( org . nd4j . linalg . api . ndarray . INDArray ) { long [ ] IDENT_8 = new long [ ] { METHOD_8 ( ) , other . METHOD_9 ( ) } ; org . nd4j . linalg . api . ndarray . INDArray result = METHOD_10 ( IDENT_8 , STRING_4 ) ; if ( result . METHOD_11 ( ) ) return org . nd4j . linalg . factory . Nd4j . METHOD_12 ( org . nd4j . linalg . factory . Nd4j . METHOD_13 ( ) . METHOD_14 ( this , other ) ) ; return METHOD_15 ( other , result ) ; }
org . junit . Assert . assertEquals ( exp , res ) 