METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray start = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 9 , 9 , IDENT_0 . IDENT_1 ) . METHOD_2 ( 3 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray ret = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( start , new int [ ] { 5 , 5 } , Nd4j . IDENT_2 . IDENT_3 ) ; double [ ] [ ] data = new double [ ] [ ] { new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 1 , 4 , 7 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 2 , 5 , 8 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 3 , 6 , 9 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0.0 } } ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . create ( data ) ; "<AssertPlaceHolder>" ; } create ( org . nd4j . linalg . api . IDENT_5 . IDENT_6 ) { return org . nd4j . linalg . factory . Nd4j . create ( IDENT_7 , true ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , ret ) 