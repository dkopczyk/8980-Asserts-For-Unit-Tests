METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . List < org . nd4j . linalg . api . ndarray . INDArray > IDENT_2 = new org . nd4j . IDENT_0 . IDENT_1 . ArrayList ( ) ; org . nd4j . IDENT_0 . IDENT_1 . List < java . lang . Integer > IDENT_3 = new org . nd4j . IDENT_0 . IDENT_1 . ArrayList ( ) ; org . nd4j . IDENT_0 . IDENT_1 . List < org . nd4j . linalg . api . ndarray . INDArray > IDENT_4 = new org . nd4j . IDENT_0 . IDENT_1 . ArrayList ( ) ; IDENT_2 . add ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , INT_0 , INT_0 ) . METHOD_2 ( 2 , 4 , 3 , 2 ) ) ; IDENT_4 . add ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 0 } ) . METHOD_3 ( IDENT_5 . IDENT_6 ) ) ; IDENT_3 . add ( ( - 2 ) ) ; for ( int i = 0 ; i < ( IDENT_2 . size ( ) ) ; i ++ ) { org . nd4j . linalg . api . ndarray . INDArray in = IDENT_2 . get ( i ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_7 = IDENT_4 . get ( i ) ; int a = IDENT_3 . get ( i ) ; int IDENT_8 = ( a >= 0 ) ? a : a + ( in . METHOD_4 ( ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_9 ; if ( ( IDENT_7 . METHOD_4 ( ) ) == 0 ) { org . nd4j . linalg . indexing . IDENT_10 [ ] get = new org . nd4j . linalg . indexing . IDENT_10 [ in . METHOD_4 ( ) ] ; for ( int j = 0 ; j < IDENT_8 ; j ++ ) { get [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; } get [ IDENT_8 ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_6 ( IDENT_7 . METHOD_7 ( 0 ) ) ; for ( int j = IDENT_8 + 1 ; j < ( in . METHOD_4 ( ) ) ; j ++ ) { get [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; } IDENT_9 = in . get ( get ) ; } else if ( ( IDENT_7 . METHOD_4 ( ) ) == 1 ) { long [ ] IDENT_12 = in . METHOD_8 ( ) . METHOD_9 ( ) ; METHOD_8 [ IDENT_8 ] = IDENT_7 . length ( ) ; IDENT_9 = org . nd4j . linalg . factory . Nd4j . create ( METHOD_8 ) ; org . nd4j . linalg . indexing . IDENT_10 [ ] get = new org . nd4j . linalg . indexing . IDENT_10 [ in . METHOD_4 ( ) ] ; org . nd4j . linalg . indexing . IDENT_10 [ ] put = new org . nd4j . linalg . indexing . IDENT_10 [ in . METHOD_4 ( ) ] ; for ( int j = 0 ; j < IDENT_8 ; j ++ ) { get [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; put [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; } for ( int j = IDENT_8 + 1 ; j < ( in . METHOD_4 ( ) ) ; j ++ ) { get [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; put [ j ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_5 ( ) ; } for ( int j = 0 ; j < ( IDENT_7 . length ( ) ) ; j ++ ) { get [ IDENT_8 ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_6 ( IDENT_7 . METHOD_7 ( j ) ) ; put [ IDENT_8 ] = org . nd4j . linalg . indexing . IDENT_11 . METHOD_6 ( j ) ; IDENT_9 . put ( put , in . get ( get ) ) ; } } else { throw new java . lang . RuntimeException ( STRING_0 ) ; } org . nd4j . IDENT_0 . IDENT_13 . IDENT_14 IDENT_15 = org . nd4j . IDENT_0 . IDENT_13 . IDENT_14 . create ( ) ; org . nd4j . IDENT_0 . IDENT_13 . IDENT_16 IDENT_17 = IDENT_15 . METHOD_10 ( STRING_1 , in ) ; org . nd4j . IDENT_0 . IDENT_13 . IDENT_16 IDENT_18 = IDENT_15 . METHOD_11 ( STRING_2 , IDENT_7 ) ; org . nd4j . IDENT_0 . IDENT_13 . IDENT_16 IDENT_19 = IDENT_15 . METHOD_12 ( IDENT_17 , IDENT_18 , a ) ; org . nd4j . IDENT_0 . IDENT_13 . IDENT_16 IDENT_20 = METHOD_12 . METHOD_13 ( true ) ; java . lang . String err = org . nd4j . IDENT_0 . validation . IDENT_21 . validate ( new org . nd4j . IDENT_0 . validation . METHOD_14 ( IDENT_15 ) . expected ( METHOD_12 , IDENT_9 ) . METHOD_15 ( STRING_2 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_15 ( java . lang . String [ ] ) { if ( ( METHOD_15 ) == null ) METHOD_15 = new org . nd4j . IDENT_0 . validation . METHOD_16 ( ) ; org . nd4j . IDENT_0 . validation . Collections . addAll ( METHOD_15 , IDENT_22 ) ; return this ; }
org . junit . Assert . assertNull ( err ) 