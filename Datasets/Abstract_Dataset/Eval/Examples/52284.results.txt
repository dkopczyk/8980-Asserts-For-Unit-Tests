METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray a = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 0 , 1000 , INT_0 ) . METHOD_2 ( 1000 , 1000 , 100 ) . METHOD_3 ( 0 , 2 , 1 ) ; long IDENT_0 = java . lang . System . METHOD_4 ( ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = a . METHOD_5 ( ) . METHOD_2 ( INT_1 , INT_2 , 100 ) ; System . out . println ( java . lang . String . format ( STRING_0 , ( ( ( java . lang . System . METHOD_4 ( ) ) - IDENT_0 ) / FLOAT_0 ) ) ) ; int [ ] IDENT_2 = new int [ ] { INT_1 , INT_2 , 100 } ; long IDENT_3 = java . lang . System . METHOD_4 ( ) ; org . nd4j . linalg . api . ndarray . INDArray b = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_2 , STRING_1 ) . METHOD_7 ( a ) ; System . out . println ( java . lang . String . format ( STRING_2 , ( ( ( java . lang . System . METHOD_4 ( ) ) - IDENT_3 ) / FLOAT_0 ) ) ) ; "<AssertPlaceHolder>" ; } format ( java . lang . String , java . lang . Object [ ] ) { if ( message == null ) { message = "" ; } if ( args == null ) { args = new java . lang . Object [ ] { STRING_3 } ; } java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; int IDENT_4 = 0 ; boolean IDENT_5 = false ; for ( int i = 0 ; i < ( args . length ) ; i ++ ) { int IDENT_6 = message . indexOf ( STRING_4 , IDENT_4 ) ; if ( IDENT_6 < 0 ) { if ( ! IDENT_5 ) { sb . append ( message . substring ( IDENT_4 ) ) ; IDENT_5 = true ; sb . append ( STRING_5 ) ; while ( i < ( args . length ) ) { sb . append ( org . nd4j . base . IDENT_7 . METHOD_8 ( args [ i ] ) ) ; if ( i < ( ( args . length ) - 1 ) ) { sb . append ( STRING_6 ) ; } i ++ ; } sb . append ( "]" ) ; } } else { sb . append ( message . substring ( IDENT_4 , IDENT_6 ) ) . append ( org . nd4j . base . IDENT_7 . METHOD_8 ( args [ i ] ) ) ; IDENT_4 = IDENT_6 + 2 ; } } if ( ! IDENT_5 ) { sb . append ( message . substring ( IDENT_4 ) ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , b ) 