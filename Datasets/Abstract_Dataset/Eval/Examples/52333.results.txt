METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; for ( int i = 0 ; i < 12 ; i ++ ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; boolean IDENT_4 = false ; int IDENT_5 = 4 ; int IDENT_6 = 10 ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 input = IDENT_3 . METHOD_3 ( STRING_0 5 , new int [ ] { - 1 , IDENT_5 } ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 IDENT_8 ; java . lang . String name ; switch ( i ) { case 0 : IDENT_8 = IDENT_3 . METHOD_4 ( STRING_1 , input ) ; name = STRING_0 0 ; break ; case 1 : IDENT_8 = IDENT_3 . METHOD_5 ( STRING_1 , input ) ; name = STRING_2 ; break ; case 2 : IDENT_8 = IDENT_3 . METHOD_6 ( STRING_1 , input , true ) ; name = STRING_0 2 ; break ; case 3 : IDENT_8 = IDENT_3 . min ( STRING_1 , input ) ; name = STRING_3 ; break ; case 4 : IDENT_8 = IDENT_3 . max ( STRING_1 , input ) ; name = STRING_4 ; break ; case 5 : IDENT_8 = IDENT_3 . METHOD_7 ( STRING_1 , input , true ) ; name = STRING_5 ; break ; case 6 : IDENT_8 = IDENT_3 . METHOD_8 ( STRING_1 , input ) ; name = STRING_0 3 ; break ; case 7 : IDENT_8 = IDENT_3 . METHOD_9 ( STRING_1 , input ) ; name = STRING_0 4 ; break ; case 8 : IDENT_8 = IDENT_3 . METHOD_10 ( STRING_1 , input ) ; name = STRING_6 ; break ; case 9 : IDENT_8 = IDENT_3 . METHOD_11 ( STRING_1 , input ) ; name = STRING_7 ; break ; case 10 : IDENT_8 = IDENT_3 . METHOD_12 ( STRING_1 , input ) ; name = STRING_0 1 ; IDENT_4 = true ; break ; case INT_1 : IDENT_8 = IDENT_3 . METHOD_13 ( STRING_1 , input ) ; name = STRING_8 ; IDENT_4 = true ; break ; default : throw new java . lang . RuntimeException ( ) ; } java . lang . String msg = ( ( STRING_9 + i ) + STRING_0 ) + name ; log . info ( ( STRING_0 6 + msg ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_9 = org . nd4j . linalg . factory . Nd4j . METHOD_14 ( IDENT_6 , IDENT_5 ) . METHOD_15 ( 100 ) ; IDENT_3 . METHOD_16 ( IDENT_9 , input ) ; if ( ! IDENT_4 ) { boolean IDENT_10 = org . nd4j . IDENT_0 . IDENT_11 . IDENT_12 . METHOD_17 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } } } METHOD_17 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 ) { return org . nd4j . IDENT_0 . IDENT_11 . IDENT_12 . METHOD_17 ( IDENT_3 , org . nd4j . IDENT_0 . IDENT_11 . IDENT_12 . IDENT_13 , org . nd4j . IDENT_0 . IDENT_11 . IDENT_12 . IDENT_14 ) ; }
org . junit . Assert . assertTrue ( msg , IDENT_10 ) 