METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > params = new org . nd4j . IDENT_0 . IDENT_1 . HashMap ( ) ; params . put ( STRING_0 , org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 4 ) ) ; IDENT_3 . METHOD_2 ( STRING_1 , new org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( ) { @ org . nd4j . IDENT_0 . IDENT_1 . Override public org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] METHOD_4 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_5 , org . nd4j . IDENT_0 . IDENT_1 . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_6 , org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] IDENT_7 ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 IDENT_8 = IDENT_5 . METHOD_5 ( STRING_0 , IDENT_6 . get ( STRING_0 ) ) ; return new org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] { IDENT_8 . METHOD_6 ( 1.0 ) } ; } } , params ) ; IDENT_3 . METHOD_7 ( STRING_1 ) . METHOD_8 ( params ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( int ) { return org . nd4j . linalg . factory . Nd4j . INSTANCE . METHOD_9 ( IDENT_9 ) ; }
org . junit . Assert . assertEquals ( org . nd4j . linalg . factory . Nd4j . METHOD_9 ( 4 ) , params . get ( STRING_0 ) ) 