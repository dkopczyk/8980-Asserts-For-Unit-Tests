METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 2 , 2 ) ; IDENT_0 . put ( 0 , 1 , 2 ) ; IDENT_0 . put ( 1 , 0 , 1 ) ; IDENT_0 . put ( 1 , 1 , ( - 1 ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new long [ ] { 2 , 2 , 3 } ) ; IDENT_1 . METHOD_2 ( 0 , 0 , 0 , 1.0 ) ; IDENT_1 . METHOD_2 ( 0 , 1 , 2 , 1.0 ) ; IDENT_1 . METHOD_2 ( 1 , 0 , 1 , 1.0 ) ; org . nd4j . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = org . nd4j . IDENT_2 . IDENT_3 . IDENT_4 . create ( ) ; org . nd4j . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = IDENT_5 . METHOD_3 ( STRING_0 , new long [ ] { 2 , 2 } ) ; IDENT_5 . METHOD_4 ( IDENT_0 , IDENT_7 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_8 = IDENT_5 . METHOD_5 ( ) ; log . info ( IDENT_8 . toString ( ) ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder IDENT_9 = new java . lang . StringBuilder ( STRING_1 ) ; int IDENT_10 = IDENT_11 . size ( ) ; int i ; for ( i = 0 ; i < IDENT_10 ; i ++ ) { java . lang . Object e = IDENT_11 . get ( i ) ; IDENT_9 . append ( e ) ; if ( i < ( IDENT_10 - 1 ) ) IDENT_9 . append ( STRING_2 ) ; } IDENT_9 . append ( "]" ) ; return IDENT_9 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_8 ) 