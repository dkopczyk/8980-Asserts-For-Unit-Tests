METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; int IDENT_4 = 4 ; int IDENT_5 = 5 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( IDENT_5 , IDENT_4 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 IDENT_8 = IDENT_3 . METHOD_4 ( STRING_0 , IDENT_6 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_9 = org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 } ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 t ; switch ( i ) { case 0 : t = IDENT_3 . METHOD_5 ( IDENT_8 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( new org . nd4j . IDENT_0 . IDENT_1 . METHOD_7 ( new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_6 } , new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_9 } ) ) ; break ; case 1 : t = IDENT_3 . METHOD_8 ( IDENT_8 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( new org . nd4j . IDENT_0 . IDENT_1 . METHOD_9 ( new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_6 } , new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_9 } ) ) ; break ; case 2 : t = IDENT_3 . METHOD_10 ( IDENT_8 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( new org . nd4j . IDENT_0 . IDENT_1 . METHOD_11 ( new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_6 } , new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_9 } ) ) ; break ; default : throw new java . lang . RuntimeException ( ) ; } log . info ( ( STRING_1 + i ) ) ; org . nd4j . linalg . api . ndarray . INDArray out = IDENT_3 . METHOD_12 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_12 ( ) { METHOD_13 ( org . nd4j . IDENT_0 . IDENT_1 . Collections . < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > METHOD_14 ( ) ) ; org . nd4j . IDENT_0 . IDENT_1 . List < org . nd4j . IDENT_0 . IDENT_10 . IDENT_11 > exec = exec ( ) . METHOD_15 ( ) ; org . nd4j . IDENT_0 . IDENT_1 . val output = exec . get ( ( ( exec . size ( ) ) - 1 ) ) . METHOD_16 ( ) [ 0 ] ; return output . METHOD_17 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , out ) 