METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new long [ ] { 3 , 4 } ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( org . nd4j . linalg . IDENT_2 . IDENT_3 < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > p : org . nd4j . linalg . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_1 [ 0 ] , IDENT_1 [ 1 ] , INT_0 ) ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = p . METHOD_2 ( ) . METHOD_3 ( 100 ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_9 IDENT_10 = org . nd4j . IDENT_7 . IDENT_8 . IDENT_9 . create ( ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_11 in = IDENT_10 . METHOD_4 ( STRING_0 , IDENT_6 ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_11 IDENT_12 = IDENT_10 . f ( ) . METHOD_5 ( in , i ) ; org . nd4j . linalg . api . ndarray . INDArray out = IDENT_10 . METHOD_6 ( ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_13 ; switch ( i ) { case 0 : IDENT_13 = IDENT_6 . METHOD_7 ( STRING_1 ) . METHOD_8 ( STRING_1 , 1 , IDENT_1 [ 0 ] , IDENT_1 [ 1 ] ) ; break ; case 1 : IDENT_13 = IDENT_6 . METHOD_7 ( STRING_1 ) . METHOD_8 ( STRING_1 , IDENT_1 [ 0 ] , 1 , IDENT_1 [ 1 ] ) ; break ; case 2 : IDENT_13 = IDENT_6 . METHOD_7 ( STRING_1 ) . METHOD_8 ( STRING_1 , IDENT_1 [ 0 ] , IDENT_1 [ 1 ] , 1 ) ; break ; default : throw new java . lang . RuntimeException ( ) ; } java . lang . String msg = ( ( STRING_2 + i ) + STRING_3 ) + ( p . METHOD_9 ( ) ) ; "<AssertPlaceHolder>" ; } } } METHOD_9 ( ) { return value ; }
org . junit . Assert . assertEquals ( msg , out , IDENT_13 ) 