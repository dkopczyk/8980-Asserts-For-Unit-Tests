METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 4 , 4 ) . METHOD_2 ( 2 , 1 , 2 , 1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 10 , 10 ) . METHOD_2 ( 2 , 1 , 5 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 2 , 3 , 4 , 5 , 6 , 3 , 4 , 5 , 6 , 7 , 7 , 8 , 9 , 10 , INT_0 , 8 , 9 , 10 , INT_0 , 12 , 4 , 5 , 6 , 7 , 8 , 5 , 6 , 7 , 8 , 9 , 9 , 10 , INT_0 , 12 , INT_1 , 10 , INT_0 , 12 , INT_1 , INT_2 } ) . METHOD_2 ( 2 , 2 , 2 , 5 ) ; org . nd4j . linalg . api . ndarray . INDArray test = IDENT_0 . add ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } add ( java . lang . Object ) { if ( ( o instanceof java . lang . String ) && ( o . toString ( ) . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } java . lang . Integer index = IDENT_3 . get ( o ) ; if ( index == null ) { index = IDENT_4 . size ( ) ; IDENT_4 . put ( index , o ) ; IDENT_3 . put ( o , index ) ; return true ; } return false ; }
org . junit . Assert . assertEquals ( IDENT_2 , test ) 