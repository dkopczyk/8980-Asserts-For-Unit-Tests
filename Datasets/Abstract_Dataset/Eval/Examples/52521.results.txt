METHOD_0 ( ) { IDENT_0 . val array = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 1 , 1 , 0 , 1 , 1 } , STRING_0 ) ; IDENT_0 . val exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 0 , 0 , 1 , 0 , 0 } , STRING_0 ) ; org . nd4j . linalg . api . IDENT_1 . IDENT_2 op = new org . nd4j . linalg . METHOD_1 ( array , array , FLOAT_0 , org . nd4j . linalg . indexing . IDENT_3 . IDENT_4 . METHOD_2 ( 0.0 ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( op ) ; "<AssertPlaceHolder>" ; } exec ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_2 ) { METHOD_4 ( op ) ; if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_7 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_7 s = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_7 ) ( op ) ) ; exec ( s ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_8 ) { op . exec ( ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_9 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_9 t = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_9 ) ( op ) ) ; exec ( t ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_10 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_10 ac = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_10 ) ( op ) ) ; exec ( ac ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_11 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_11 IDENT_12 = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_11 ) ( op ) ) ; exec ( IDENT_12 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_13 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_13 IDENT_14 = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_13 ) ( op ) ) ; exec ( IDENT_14 , IDENT_14 . METHOD_5 ( ) ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_15 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_15 IDENT_16 = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_15 ) ( op ) ) ; exec ( IDENT_16 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_17 ) { org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_17 IDENT_18 = ( ( org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_1 . IDENT_17 ) ( op ) ) ; exec ( IDENT_18 , org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) ) ; } return op ; }
org . junit . Assert . assertEquals ( exp , array ) 