METHOD_0 ( ) { IDENT_0 . val IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( STRING_0 , 5 , 2 ) . add ( 1 ) ; IDENT_0 . val IDENT_2 = IDENT_1 . METHOD_2 ( STRING_0 ) . add ( 5 ) ; IDENT_2 . put ( 0 , 0 , 0 ) ; IDENT_0 . val exp = IDENT_2 . METHOD_2 ( STRING_0 ) ; exp . METHOD_3 ( 0 , 0 , IDENT_1 . METHOD_4 ( 0 , 0 ) ) ; IDENT_0 . val IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_1 . METHOD_6 ( ) , STRING_0 ) ; org . nd4j . linalg . api . IDENT_4 . IDENT_5 op = org . nd4j . linalg . api . IDENT_4 . IDENT_6 . builder ( STRING_1 ) . METHOD_7 ( IDENT_1 , IDENT_2 ) . METHOD_8 ( IDENT_3 ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ) . exec ( op ) ; "<AssertPlaceHolder>" ; } exec ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_9 ) { METHOD_10 ( op ) ; if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_10 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_10 s = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_10 ) ( op ) ) ; exec ( s ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_11 ) { op . exec ( ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_12 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_12 t = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_12 ) ( op ) ) ; exec ( t ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_13 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_13 ac = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_13 ) ( op ) ) ; exec ( ac ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_14 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_14 IDENT_15 = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_14 ) ( op ) ) ; exec ( IDENT_15 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_16 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_16 IDENT_17 = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_16 ) ( op ) ) ; exec ( IDENT_17 , IDENT_17 . METHOD_11 ( ) ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_18 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_18 IDENT_19 = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_18 ) ( op ) ) ; exec ( IDENT_19 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_20 ) { org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_20 IDENT_21 = ( ( org . nd4j . linalg . IDENT_7 . IDENT_8 . IDENT_4 . IDENT_20 ) ( op ) ) ; exec ( IDENT_21 , org . nd4j . linalg . factory . Nd4j . METHOD_12 ( ) ) ; } return op ; }
org . junit . Assert . assertEquals ( exp , IDENT_3 ) 