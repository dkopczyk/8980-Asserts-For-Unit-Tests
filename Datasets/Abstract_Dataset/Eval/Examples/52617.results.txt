METHOD_0 ( ) { double IDENT_0 = 1 ; int IDENT_1 = INT_0 ; int IDENT_2 = 3 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_1 , IDENT_2 ) . METHOD_2 ( FLOAT_0 ) . add ( 10 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( IDENT_1 , 1 ) ; org . nd4j . linalg . dataset . IDENT_5 IDENT_6 = new org . nd4j . linalg . dataset . METHOD_4 ( IDENT_3 , IDENT_4 ) ; double IDENT_7 = - 1000 ; double IDENT_8 = 1000 ; org . nd4j . linalg . dataset . api . IDENT_9 . IDENT_10 IDENT_11 = new org . nd4j . linalg . dataset . api . IDENT_9 . METHOD_5 ( IDENT_7 , IDENT_8 ) ; org . nd4j . linalg . dataset . METHOD_4 IDENT_12 = IDENT_6 . METHOD_6 ( ) ; IDENT_11 . METHOD_7 ( IDENT_6 ) ; IDENT_11 . transform ( IDENT_12 ) ; org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( IDENT_1 , IDENT_2 ) . METHOD_2 ( IDENT_7 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_13 = org . nd4j . linalg . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_9 ( IDENT_12 . METHOD_10 ( ) . METHOD_11 ( expected ) ) . METHOD_12 ( expected ) ; double IDENT_17 = IDENT_13 . max ( 0 , 1 ) . METHOD_2 ( 100 ) . METHOD_13 ( 0 , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( org . nd4j . linalg . api . ndarray . INDArray , int [ ] ) { long offset = org . nd4j . linalg . api . IDENT_18 . IDENT_19 . METHOD_14 ( arr . METHOD_15 ( ) , org . nd4j . linalg . util . IDENT_20 . METHOD_16 ( IDENT_21 ) ) ; return arr . data ( ) . METHOD_13 ( offset ) ; }
org . junit . Assert . assertTrue ( ( IDENT_17 < IDENT_0 ) ) 