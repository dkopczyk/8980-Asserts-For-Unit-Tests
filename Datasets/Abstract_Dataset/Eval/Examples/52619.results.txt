METHOD_0 ( ) { org . nd4j . linalg . dataset . IDENT_0 original = new org . nd4j . linalg . dataset . METHOD_1 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 } ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_2 , FLOAT_3 } ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_4 , FLOAT_5 } ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_6 , FLOAT_7 } ) ) ; original . METHOD_2 ( true ) ; IDENT_1 . write ( original , IDENT_2 ) ; org . nd4j . linalg . dataset . METHOD_1 IDENT_3 = IDENT_1 . METHOD_3 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . nd4j . linalg . dataset . api . IDENT_4 . serializer . InputStream ) { org . nd4j . linalg . dataset . api . IDENT_4 . serializer . IDENT_5 IDENT_6 = new org . nd4j . linalg . dataset . api . IDENT_4 . serializer . METHOD_4 ( stream ) ; boolean IDENT_7 = IDENT_6 . METHOD_5 ( ) ; double IDENT_8 = IDENT_6 . METHOD_6 ( ) ; double IDENT_9 = IDENT_6 . METHOD_6 ( ) ; org . nd4j . linalg . dataset . api . IDENT_4 . IDENT_10 result = new org . nd4j . linalg . dataset . api . IDENT_4 . METHOD_7 ( IDENT_8 , IDENT_9 ) ; result . METHOD_2 ( IDENT_7 ) ; result . METHOD_8 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_6 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_6 ) ) ; if ( IDENT_7 ) { result . METHOD_9 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_6 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_6 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( original , IDENT_3 ) 