METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray a = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 9 , 9 ) . METHOD_2 ( 3 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , FLOAT_6 , FLOAT_7 , 0.0 } , new int [ ] { 3 , 3 } , STRING_0 ) ; org . nd4j . linalg . api . ndarray . INDArray r = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( a ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . nd4j . linalg . api . ndarray . INDArray ) { if ( ( ( IDENT_0 . METHOD_6 ( ) ) > ( Integer . MAX_VALUE ) ) || ( ( IDENT_0 . METHOD_7 ( ) ) > ( Integer . MAX_VALUE ) ) ) throw new org . nd4j . linalg . exception . METHOD_8 ( ) ; int m = ( ( int ) ( IDENT_0 . METHOD_6 ( ) ) ) ; int n = ( ( int ) ( IDENT_0 . METHOD_7 ( ) ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_9 ( org . nd4j . linalg . factory . Nd4j . METHOD_10 ( ) . METHOD_11 ( 1 ) , org . nd4j . linalg . factory . Nd4j . METHOD_12 ( ) . METHOD_13 ( new int [ ] { 1 , 1 } ) . METHOD_14 ( ) ) ; int IDENT_2 = java . lang . Math . min ( m , n ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_9 ( org . nd4j . linalg . factory . Nd4j . METHOD_10 ( ) . METHOD_11 ( IDENT_2 ) , org . nd4j . linalg . factory . Nd4j . METHOD_12 ( ) . METHOD_13 ( new int [ ] { 1 , IDENT_2 } ) . METHOD_14 ( ) ) ; if ( ( IDENT_0 . data ( ) . METHOD_15 ( ) ) == ( IDENT_4 . Type . IDENT_5 ) ) METHOD_16 ( m , n , IDENT_0 , IDENT_3 , IDENT_1 ) ; else if ( ( IDENT_0 . data ( ) . METHOD_15 ( ) ) == ( IDENT_4 . Type . IDENT_6 ) ) METHOD_17 ( m , n , IDENT_0 , IDENT_3 , IDENT_1 ) ; else throw new java . lang . METHOD_18 ( ) ; if ( ( IDENT_1 . METHOD_19 ( 0 ) ) < 0 ) { throw new java . lang . METHOD_20 ( ( ( STRING_1 + ( IDENT_1 . METHOD_19 ( 0 ) ) ) + STRING_2 ) ) ; } else if ( ( IDENT_1 . METHOD_19 ( 0 ) ) > 0 ) { log . warn ( ( STRING_3 + ( IDENT_1 . METHOD_19 ( 0 ) ) ) ) ; } return IDENT_3 ; }
org . junit . Assert . assertEquals ( exp , a ) 