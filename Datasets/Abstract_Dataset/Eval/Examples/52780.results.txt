METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new int [ ] { 4 , 4 } ; IDENT_0 . val IDENT_2 = new int [ ] { 0 , 0 } ; IDENT_0 . val result = org . nd4j . linalg . api . IDENT_1 . IDENT_3 . METHOD_1 ( IDENT_1 , IDENT_2 , false , true ) ; log . info ( STRING_0 , result ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int [ ] , int [ ] , boolean , boolean ) { IDENT_4 = org . nd4j . linalg . api . IDENT_1 . IDENT_3 . METHOD_2 ( IDENT_5 . length , IDENT_4 ) ; if ( ! IDENT_6 ) if ( ! IDENT_7 ) return org . nd4j . linalg . api . IDENT_1 . IDENT_3 . METHOD_1 ( IDENT_5 , IDENT_4 ) ; else { if ( org . nd4j . linalg . api . IDENT_1 . IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_4 ) ) return new long [ ] { } ; else if ( ( ( IDENT_4 . length ) == 1 ) && ( ( IDENT_5 . length ) == 2 ) ) { IDENT_0 . val ret = new long [ 1 ] ; if ( ( IDENT_4 [ 0 ] ) == 1 ) { ret [ 0 ] = IDENT_5 [ 0 ] ; } else if ( ( IDENT_4 [ 0 ] ) == 0 ) { ret [ 0 ] = IDENT_5 [ 1 ] ; } return ret ; } return org . nd4j . linalg . util . IDENT_8 . METHOD_4 ( org . nd4j . linalg . util . IDENT_8 . METHOD_5 ( IDENT_5 , IDENT_4 ) ) ; } if ( org . nd4j . linalg . api . IDENT_1 . IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_4 ) ) { IDENT_0 . val result = new long [ IDENT_5 . length ] ; org . nd4j . linalg . api . IDENT_1 . Arrays . METHOD_6 ( result , 1 ) ; return result ; } IDENT_0 . val result = org . nd4j . linalg . util . IDENT_8 . METHOD_4 ( org . nd4j . linalg . api . IDENT_1 . Arrays . METHOD_7 ( IDENT_5 , IDENT_5 . length ) ) ; for ( IDENT_0 . val IDENT_9 : IDENT_4 ) result [ IDENT_9 ] = 1 ; return result ; }
org . junit . Assert . assertArrayEquals ( new long [ ] { 4 } , result ) 