METHOD_0 ( ) { org . apache . commons . IDENT_0 . impl . IDENT_1 config = new org . apache . commons . IDENT_0 . impl . METHOD_1 ( ) ; config . METHOD_2 ( 1 ) ; config . METHOD_3 ( false ) ; java . util . List < redis . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList < redis . IDENT_2 . IDENT_3 . IDENT_4 > ( ) ; IDENT_5 . add ( new redis . IDENT_2 . IDENT_3 . METHOD_4 ( new java . net . URI ( STRING_0 ) ) ) ; IDENT_5 . add ( new redis . IDENT_2 . IDENT_3 . METHOD_4 ( new java . net . URI ( STRING_1 ) ) ) ; redis . IDENT_2 . IDENT_3 . IDENT_6 pool = new redis . IDENT_2 . IDENT_3 . METHOD_5 ( config , IDENT_5 ) ; redis . IDENT_2 . IDENT_3 . IDENT_7 IDENT_3 = pool . getResource ( ) ; try { IDENT_3 . set ( STRING_2 , STRING_3 ) ; } finally { IDENT_3 . close ( ) ; } redis . IDENT_2 . IDENT_3 . IDENT_7 IDENT_8 = pool . getResource ( ) ; try { "<AssertPlaceHolder>" ; } finally { IDENT_8 . close ( ) ; } } getResource ( ) { while ( true ) { redis . IDENT_2 . IDENT_3 . IDENT_9 IDENT_3 = super . getResource ( ) ; IDENT_3 . METHOD_6 ( this ) ; final redis . IDENT_2 . IDENT_3 . IDENT_10 IDENT_11 = IDENT_12 ; final redis . IDENT_2 . IDENT_3 . IDENT_10 connection = new redis . IDENT_2 . IDENT_3 . METHOD_7 ( IDENT_3 . METHOD_8 ( ) . METHOD_9 ( ) , IDENT_3 . METHOD_8 ( ) . METHOD_10 ( ) ) ; if ( IDENT_11 . equals ( connection ) ) { return IDENT_3 ; } else { METHOD_11 ( IDENT_3 ) ; } } }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_8 ) 