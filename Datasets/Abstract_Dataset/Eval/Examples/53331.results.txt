METHOD_0 ( ) { try { IDENT_0 = org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . parse ( STRING_0 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . lang . Exception ex ) { "<AssertPlaceHolder>" ; } } parse ( java . lang . String ) { java . lang . String [ ] tokens = IDENT_6 . split ( "/" ) ; if ( ( tokens . length ) != 2 ) { throw new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( IDENT_6 + STRING_2 ) ) ; } try { org . IDENT_1 . IDENT_2 . IDENT_0 . IDENT_7 IDENT_0 ; org . IDENT_1 . IDENT_2 . IDENT_0 . IDENT_8 IDENT_9 = null ; java . util . Date IDENT_10 = org . IDENT_1 . IDENT_2 . util . IDENT_11 . METHOD_2 ( tokens [ 0 ] ) ; java . util . Calendar IDENT_12 = java . util . Calendar . getInstance ( ) ; IDENT_12 . METHOD_3 ( IDENT_10 ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_13 IDENT_14 = org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_13 . valueOf ( tokens [ 1 ] ) ; switch ( IDENT_14 ) { case IDENT_15 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_4 ( ) ; break ; case IDENT_16 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_5 ( ) ; break ; case IDENT_17 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_6 ( ) ; break ; case IDENT_18 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_7 ( ) ; break ; case IDENT_19 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_8 ( ) ; break ; case IDENT_20 : switch ( IDENT_12 . get ( Calendar . IDENT_21 ) ) { case 0 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_9 ( ) ; break ; case 6 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_10 ( ) ; break ; default : throw new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( IDENT_6 + STRING_3 ) ) ; } case IDENT_22 : switch ( IDENT_12 . get ( Calendar . IDENT_21 ) ) { case 0 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_11 ( ) ; break ; case 3 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_12 ( ) ; break ; case 6 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_13 ( ) ; break ; case 9 : IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_0 . METHOD_14 ( ) ; break ; default : throw new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( IDENT_6 + STRING_4 ) ) ; } } if ( IDENT_9 != null ) { IDENT_0 = IDENT_9 . METHOD_15 ( IDENT_10 ) ; } else { throw new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( STRING_5 + IDENT_14 ) ) ; } return IDENT_0 ; } catch ( java . lang . IllegalArgumentException ex ) { throw new org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( ( tokens [ 1 ] ) + STRING_6 ) ) ; } }
org . junit . Assert . assertEquals ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 . class , ex . getClass ( ) ) 