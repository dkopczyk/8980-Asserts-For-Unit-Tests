METHOD_0 ( ) { java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_2 . common . interfaces . IDENT_3 > IDENT_4 = com . IDENT_0 . IDENT_1 . IDENT_2 . common . utils . IDENT_5 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; java . util . Iterator IDENT_6 = IDENT_4 . entrySet ( ) . iterator ( ) ; while ( IDENT_6 . hasNext ( ) ) { java . util . Map . Entry entry = ( ( java . util . Map . Entry ) ( IDENT_6 . next ( ) ) ) ; System . out . println ( entry . getKey ( ) ) ; System . out . println ( entry . getValue ( ) ) ; } } METHOD_1 ( ) { java . io . File f = new java . io . File ( IDENT_7 . IDENT_8 ) ; org . IDENT_9 . Document doc = null ; try { java . lang . String xml = org . apache . commons . io . IDENT_10 . METHOD_2 ( f ) ; doc = org . IDENT_9 . IDENT_11 . METHOD_3 ( xml ) ; } catch ( java . io . IOException e ) { com . IDENT_0 . IDENT_1 . IDENT_2 . common . utils . IDENT_5 . LOG . error ( e . getMessage ( ) ) ; } catch ( org . IDENT_9 . IDENT_12 e ) { com . IDENT_0 . IDENT_1 . IDENT_2 . common . utils . IDENT_5 . LOG . error ( ( STRING_0 + ( e . getMessage ( ) ) ) ) ; } java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_2 . common . interfaces . IDENT_3 > IDENT_13 = new java . util . HashMap < java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_2 . common . interfaces . IDENT_3 > ( ) ; java . lang . String IDENT_14 = STRING_1 ; java . util . List < org . IDENT_9 . Element > IDENT_15 = ( ( java . util . List < org . IDENT_9 . Element > ) ( doc . METHOD_4 ( IDENT_14 ) ) ) ; for ( org . IDENT_9 . Element IDENT_16 : IDENT_15 ) { java . util . Map < java . lang . String , java . lang . String > IDENT_17 = com . IDENT_0 . IDENT_1 . IDENT_2 . common . utils . IDENT_5 . METHOD_5 ( IDENT_16 ) ; if ( IDENT_17 . containsKey ( "name" ) ) { com . IDENT_0 . IDENT_1 . IDENT_2 . common . interfaces . IDENT_3 plugin = new com . IDENT_0 . IDENT_1 . IDENT_2 . common . METHOD_6 ( IDENT_17 ) ; IDENT_13 . put ( IDENT_17 . get ( "name" ) , plugin ) ; } else { com . IDENT_0 . IDENT_1 . IDENT_2 . common . utils . IDENT_5 . LOG . error ( java . lang . String . format ( STRING_2 , IDENT_16 . getPath ( ) ) ) ; } } return IDENT_13 ; }
org . junit . Assert . assertNotNull ( IDENT_4 ) 