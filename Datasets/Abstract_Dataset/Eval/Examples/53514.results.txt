METHOD_0 ( ) { java . lang . String sql = STRING_0 ; com . IDENT_0 . IDENT_1 . util . IDENT_2 IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_1 ( sql ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( com . IDENT_0 . IDENT_1 . util . StringUtils . METHOD_2 ( sql ) ) { return IDENT_2 . IDENT_5 ; } com . IDENT_0 . IDENT_1 . util . IDENT_2 IDENT_3 = null ; java . lang . String IDENT_6 = sql . toLowerCase ( ) ; boolean IDENT_7 = false ; int IDENT_8 = 0 ; for ( ; IDENT_8 < ( IDENT_6 . length ( ) ) ; ++ IDENT_8 ) { char IDENT_9 = IDENT_6 . charAt ( IDENT_8 ) ; if ( ! IDENT_7 ) { if ( IDENT_9 == STRING_1 ) { IDENT_7 = true ; } else if ( IDENT_9 > STRING_2 ) { break ; } } else if ( IDENT_9 == STRING_1 ) { IDENT_7 = ! IDENT_7 ; } } if ( ( ( IDENT_6 . length ( ) ) - IDENT_8 ) < ( com . IDENT_0 . IDENT_1 . util . IDENT_4 . IDENT_10 . length ( ) ) ) { return IDENT_2 . IDENT_5 ; } switch ( IDENT_6 . charAt ( IDENT_8 ) ) { case STRING_3 : if ( ( IDENT_6 . charAt ( ( IDENT_8 + 1 ) ) ) == STRING_4 ) { IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_3 ( IDENT_6 , IDENT_8 ) ; } else { IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_4 ( IDENT_6 , IDENT_8 ) ; } break ; case STRING_5 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_5 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_6 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_6 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_7 : if ( ( IDENT_6 . charAt ( ( IDENT_8 + 1 ) ) ) == STRING_4 ) { IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_7 ( IDENT_6 , IDENT_8 ) ; } else { IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_8 ( IDENT_6 , IDENT_8 ) ; } break ; case STRING_8 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_9 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_9 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_10 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_10 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_11 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_11 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_12 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_12 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_13 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_4 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_14 ( IDENT_6 , IDENT_8 ) ; break ; case STRING_13 : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_15 ( IDENT_6 , IDENT_8 ) ; break ; default : IDENT_3 = com . IDENT_0 . IDENT_1 . util . IDENT_4 . METHOD_16 ( IDENT_6 , IDENT_8 ) ; break ; } return IDENT_3 ; }
org . junit . Assert . assertEquals ( IDENT_2 . IDENT_5 , IDENT_3 ) 