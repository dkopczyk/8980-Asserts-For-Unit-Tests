METHOD_0 ( ) { org . irods . jargon . core . rule . IDENT_0 IDENT_1 = new org . irods . jargon . core . rule . METHOD_1 ( ) ; java . lang . String IDENT_2 = STRING_0 ; org . irods . jargon . core . rule . IDENT_3 actual = IDENT_1 . METHOD_2 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { org . irods . jargon . core . rule . METHOD_1 . log . info ( STRING_1 ) ; if ( ( IDENT_2 == null ) || ( IDENT_2 . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } org . irods . jargon . core . rule . METHOD_1 . log . info ( STRING_3 , IDENT_2 ) ; org . irods . jargon . core . rule . IDENT_3 IDENT_4 ; int IDENT_5 = IDENT_2 . indexOf ( org . irods . jargon . core . rule . METHOD_1 . IDENT_6 ) ; if ( IDENT_5 > ( - 1 ) ) { org . irods . jargon . core . rule . METHOD_1 . log . debug ( STRING_4 ) ; int IDENT_7 = IDENT_5 + ( org . irods . jargon . core . rule . METHOD_1 . IDENT_6 . length ( ) ) ; int IDENT_8 = IDENT_2 . indexOf ( STRING_5 , IDENT_7 ) ; if ( IDENT_8 == ( - 1 ) ) { org . irods . jargon . core . rule . METHOD_1 . log . warn ( STRING_6 ) ; return null ; } java . lang . String IDENT_9 = IDENT_2 . substring ( IDENT_7 , IDENT_8 ) . trim ( ) ; org . irods . jargon . core . rule . METHOD_1 . log . debug ( STRING_7 , IDENT_9 ) ; if ( IDENT_9 . equals ( IDENT_3 . IDENT_10 . toString ( ) ) ) { IDENT_4 = IDENT_3 . IDENT_10 ; } else if ( IDENT_9 . equals ( IDENT_3 . IDENT_11 . toString ( ) ) ) { IDENT_4 = IDENT_3 . IDENT_11 ; } else { IDENT_4 = null ; } } else { IDENT_4 = null ; } return IDENT_4 ; }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_11 , actual ) 