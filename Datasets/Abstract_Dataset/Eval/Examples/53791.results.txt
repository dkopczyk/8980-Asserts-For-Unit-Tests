METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String expected = STRING_1 ; java . lang . String actual = org . irods . jargon . core . utils . IDENT_1 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( ( IDENT_0 == null ) || ( IDENT_0 . isEmpty ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; char [ ] IDENT_2 = IDENT_0 . METHOD_2 ( ) ; for ( char c : IDENT_2 ) { if ( ( ( ( c == STRING_3 ) || ( c == STRING_4 ) ) || ( c == STRING_5 ) ) || ( c == STRING_6 ) ) { sb . append ( STRING_7 ) ; } sb . append ( c ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 