METHOD_0 ( ) { java . util . ArrayList < IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 > IDENT_4 = new java . util . ArrayList < IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 > ( ) ; IDENT_4 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 ( ) ) ; IDENT_4 . add ( new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 ( ) ) ; org . mockito . Mockito . when ( IDENT_5 . METHOD_2 ( ) ) . thenReturn ( IDENT_4 ) ; javax . ws . rs . core . Response response = IDENT_6 . METHOD_3 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_7 IDENT_8 = IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_7 . get ( type ) ; IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_9 context = new IDENT_0 . IDENT_1 . IDENT_2 . util . METHOD_4 ( IDENT_10 ) ; try { java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > list = new java . util . ArrayList < IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > ( ) ; for ( IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 m : IDENT_5 . METHOD_2 ( ) ) if ( ( ( m . METHOD_5 ( ) ) == null ) || ( m . METHOD_5 ( ) . METHOD_6 ( ) ) ) list . add ( m . METHOD_7 ( ) ) ; if ( ( list . size ( ) ) == 0 ) return METHOD_8 ( STRING_1 ) ; return javax . ws . rs . core . Response . METHOD_9 ( IDENT_8 . format ( list , context ) ) . type ( IDENT_8 . METHOD_10 ( ) ) . header ( STRING_2 , STRING_3 ) . build ( ) ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_12 e ) { throw e . METHOD_11 ( IDENT_8 ) ; } catch ( java . lang . Exception e ) { IDENT_0 . IDENT_1 . IDENT_2 . resources . IDENT_13 . logger . log ( IDENT_14 . IDENT_15 , e . getMessage ( ) , e ) ; throw new IDENT_0 . IDENT_1 . IDENT_2 . util . METHOD_12 ( e . getMessage ( ) ) . METHOD_11 ( IDENT_8 ) ; } }
org . junit . Assert . assertNotNull ( response ) 