METHOD_0 ( ) { eu . IDENT_0 . context . model . api . IDENT_1 [ ] IDENT_2 = new eu . IDENT_0 . context . model . api . IDENT_1 [ ] { eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . IDENT_6 . METHOD_1 ( ( ( java . lang . System . currentTimeMillis ( ) ) - ( 15 * 1000 ) ) , INT_0 , STRING_0 ) , eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . IDENT_6 . METHOD_1 ( ( ( java . lang . System . currentTimeMillis ( ) ) - ( INT_1 * 1000 ) ) , INT_0 , STRING_1 ) , eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . IDENT_6 . METHOD_1 ( ( ( java . lang . System . currentTimeMillis ( ) ) - ( ( ( ( eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . utils . IDENT_7 . IDENT_8 ) + ( eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . utils . IDENT_7 . IDENT_9 ) ) - 20 ) * 1000 ) ) , INT_0 , STRING_0 ) , eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . IDENT_6 . METHOD_1 ( ( ( java . lang . System . currentTimeMillis ( ) ) - ( ( ( ( eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . utils . IDENT_7 . IDENT_8 ) + ( eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . utils . IDENT_7 . IDENT_9 ) ) + 10 ) * 1000 ) ) , INT_0 , STRING_0 ) } ; java . lang . String IDENT_10 = IDENT_11 . METHOD_2 ( Constants . IDENT_12 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( eu . IDENT_0 . context . model . api . IDENT_13 , eu . IDENT_0 . context . model . api . IDENT_1 [ ] ) { if ( ( IDENT_2 . length ) != 0 ) { int index = eu . IDENT_0 . IDENT_3 . IDENT_4 . context . IDENT_5 . utils . IDENT_14 . METHOD_3 ( IDENT_2 , IDENT_7 . IDENT_8 , IDENT_7 . IDENT_9 ) ; if ( index == ( - 1 ) ) { logger . debug ( STRING_2 ) ; return "" ; } else { logger . debug ( STRING_3 ) ; for ( int i = 0 ; i < ( IDENT_2 . length ) ; i ++ ) { java . lang . String IDENT_15 = "" ; if ( i <= index ) IDENT_15 = STRING_4 + i ; else IDENT_15 = "" + i ; logger . debug ( ( ( ( ( IDENT_15 + STRING_5 ) + ( ( java . lang . String ) ( IDENT_2 [ i ] . METHOD_4 ( ) . METHOD_5 ( eu . IDENT_0 . context . model . impl . IDENT_16 . METHOD_6 ( Constants . IDENT_17 ) ) . getValue ( ) . getValue ( ) ) ) ) + " " ) + ( ( java . lang . String ) ( IDENT_2 [ i ] . METHOD_7 ( ) . METHOD_8 ( eu . IDENT_0 . context . model . impl . IDENT_16 . METHOD_6 ( Constants . IDENT_18 ) ) . getValue ( ) ) ) ) ) ; } } java . lang . String IDENT_19 = ( ( java . lang . String ) ( IDENT_2 [ 0 ] . METHOD_4 ( ) . METHOD_5 ( eu . IDENT_0 . context . model . impl . IDENT_16 . METHOD_6 ( Constants . IDENT_17 ) ) . getValue ( ) . getValue ( ) ) ) ; for ( int i = 1 ; i <= index ; i ++ ) { java . lang . String IDENT_20 = ( ( java . lang . String ) ( IDENT_2 [ i ] . METHOD_4 ( ) . METHOD_5 ( eu . IDENT_0 . context . model . impl . IDENT_16 . METHOD_6 ( Constants . IDENT_17 ) ) . getValue ( ) . getValue ( ) ) ) ; if ( ! ( IDENT_20 . equalsIgnoreCase ( IDENT_19 ) ) ) return "" ; } return STRING_6 + IDENT_19 ; } return "" ; }
org . junit . Assert . assertFalse ( ( ( IDENT_10 == null ) || ( ! ( IDENT_10 . equalsIgnoreCase ( "" ) ) ) ) ) 