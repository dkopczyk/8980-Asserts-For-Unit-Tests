METHOD_0 ( ) { System . out . println ( STRING_0 ) ; final java . lang . String IDENT_0 = STRING_1 ; final int IDENT_1 = 10 ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { com . couchbase . graph . IDENT_2 . graph . METHOD_1 ( ( IDENT_0 + i ) ) ; } java . util . List < java . lang . String > keys = new java . util . ArrayList ( ) ; java . lang . IDENT_3 < com . tinkerpop . IDENT_4 . IDENT_5 > IDENT_6 = com . couchbase . graph . IDENT_2 . graph . METHOD_2 ( ) ; int i = 0 ; for ( com . tinkerpop . IDENT_4 . IDENT_5 IDENT_7 : IDENT_6 ) { java . lang . String id = IDENT_7 . getId ( ) . toString ( ) ; System . out . println ( ( ( ( STRING_2 + i ) + STRING_3 ) + id ) ) ; if ( id . startsWith ( IDENT_0 ) ) keys . add ( id ) ; i ++ ; } "<AssertPlaceHolder>" ; } toString ( ) { return com . couchbase . graph . helper . IDENT_8 . METHOD_3 ( IDENT_9 ) . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , keys . size ( ) ) 