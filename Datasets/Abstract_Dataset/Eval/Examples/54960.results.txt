METHOD_0 ( ) { com . IDENT_0 . api . IDENT_1 IDENT_2 = mock ( com . IDENT_0 . api . IDENT_1 . class ) ; METHOD_1 ( new com . IDENT_0 . job . IDENT_3 . METHOD_2 ( ) ) . when ( IDENT_2 ) . METHOD_3 ( any ( java . io . InputStream . class ) ) ; java . io . File source = METHOD_4 ( true ) ; com . IDENT_0 . api . IDENT_4 IDENT_5 = new com . IDENT_0 . job . METHOD_5 ( IDENT_2 ) ; IDENT_5 . METHOD_3 ( source ) ; verify ( IDENT_2 , times ( 1 ) ) . METHOD_3 ( any ( java . io . InputStream . class ) ) ; METHOD_6 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . io . InputStream ) { try { if ( ! ( target . exists ( ) ) ) { org . junit . Assert . assertTrue ( target . METHOD_7 ( ) ) ; } java . io . IDENT_6 IDENT_7 = new java . io . METHOD_8 ( target ) ; com . google . common . io . IDENT_8 . METHOD_9 ( IDENT_9 , IDENT_7 ) ; IDENT_7 . close ( ) ; future = com . IDENT_0 . job . IDENT_10 . METHOD_10 ( true ) ; } catch ( java . io . IOException e ) { future = com . IDENT_0 . job . IDENT_10 . METHOD_10 ( new com . IDENT_0 . IDENT_11 . METHOD_11 ( java . lang . String . format ( STRING_0 , target ) , e ) ) ; } finally { try { IDENT_9 . close ( ) ; } catch ( java . io . IOException e ) { throw new java . lang . METHOD_12 ( java . lang . String . format ( STRING_1 , e . getMessage ( ) ) ) ; } } }
org . junit . Assert . assertFalse ( source . exists ( ) ) 