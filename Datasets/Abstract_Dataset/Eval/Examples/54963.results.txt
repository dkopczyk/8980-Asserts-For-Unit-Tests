METHOD_0 ( ) { java . io . File source = METHOD_1 ( false ) ; java . io . File target = METHOD_1 ( false ) ; com . IDENT_0 . api . IDENT_1 IDENT_2 = mock ( com . IDENT_0 . api . IDENT_1 . class ) ; when ( IDENT_2 . METHOD_2 ( ) ) . thenReturn ( source ) ; com . IDENT_0 . api . IDENT_3 IDENT_4 = new com . IDENT_0 . job . METHOD_3 ( IDENT_2 ) ; try { IDENT_4 . METHOD_4 ( ) ; } catch ( com . IDENT_0 . IDENT_5 . IDENT_6 e ) { "<AssertPlaceHolder>" ; verify ( IDENT_2 , times ( 1 ) ) . METHOD_2 ( ) ; METHOD_5 ( IDENT_2 ) ; throw e ; } } METHOD_4 ( ) { file = IDENT_2 . METHOD_2 ( ) ; try { com . IDENT_0 . job . IDENT_7 IDENT_8 = new com . IDENT_0 . job . METHOD_6 ( file ) ; IDENT_8 . METHOD_7 ( ) . METHOD_8 ( 0L , Long . MAX_VALUE , true ) ; return IDENT_8 ; } catch ( com . IDENT_0 . job . IDENT_9 e ) { throw new com . IDENT_0 . IDENT_5 . METHOD_9 ( java . lang . String . format ( STRING_0 , file ) , e ) ; } catch ( com . IDENT_0 . job . IOException e ) { throw new com . IDENT_0 . IDENT_5 . METHOD_9 ( java . lang . String . format ( STRING_1 , file ) , e ) ; } }
org . junit . Assert . assertFalse ( target . exists ( ) ) 