METHOD_0 ( ) { org . apache . accumulo . core . client . IDENT_0 . IDENT_1 IDENT_2 = org . apache . accumulo . core . client . IDENT_0 . IDENT_1 . builder ( org . apache . accumulo . core . client . IDENT_0 . IDENT_3 . IDENT_4 . class ) . build ( ) ; org . apache . accumulo . core . client . IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = new org . apache . accumulo . core . client . IDENT_0 . IDENT_3 . METHOD_1 ( ) ; org . apache . accumulo . core . client . IDENT_0 . IDENT_6 . IDENT_7 IDENT_8 = IDENT_5 . METHOD_2 ( IDENT_2 ) ; IDENT_8 . accept ( new org . apache . accumulo . core . data . METHOD_3 ( STRING_0 7 , STRING_1 6 , STRING_2 0 ) , new org . apache . accumulo . core . data . METHOD_4 ( STRING_3 9 ) ) ; java . util . HashMap < java . lang . String , java . lang . Long > IDENT_9 = new java . util . HashMap ( ) ; IDENT_8 . METHOD_5 ( IDENT_9 :: put ) ; org . apache . accumulo . core . client . IDENT_0 . IDENT_6 . IDENT_7 IDENT_10 = IDENT_5 . METHOD_2 ( IDENT_2 ) ; IDENT_10 . accept ( new org . apache . accumulo . core . data . METHOD_3 ( STRING_0 2 , STRING_3 1 , STRING_3 6 ) , new org . apache . accumulo . core . data . METHOD_4 ( "2" ) ) ; IDENT_10 . accept ( new org . apache . accumulo . core . data . METHOD_3 ( STRING_0 , STRING_3 1 , STRING_3 2 ) , new org . apache . accumulo . core . data . METHOD_4 ( STRING_0 ) ) ; IDENT_10 . accept ( new org . apache . accumulo . core . data . METHOD_3 ( STRING_0 , STRING_3 1 , STRING_3 0 ) , new org . apache . accumulo . core . data . METHOD_4 ( STRING_1 1 ) ) ; java . util . HashMap < java . lang . String , java . lang . Long > IDENT_11 = new java . util . HashMap ( ) ; IDENT_10 . METHOD_5 ( IDENT_11 :: put ) ; org . apache . accumulo . core . client . IDENT_0 . IDENT_6 . IDENT_12 IDENT_13 = IDENT_5 . METHOD_6 ( IDENT_2 ) ; METHOD_6 . METHOD_7 ( IDENT_9 , IDENT_11 ) ; java . util . HashMap < java . lang . String , java . lang . Long > expected = new java . util . HashMap ( ) ; expected . put ( STRING_4 , INT_0 ) ; expected . put ( STRING_1 0 , INT_1 ) ; expected . put ( STRING_3 5 , INT_2 ) ; expected . put ( STRING_2 4 , INT_3 ) ; expected . put ( STRING_2 3 , 1L ) ; expected . put ( STRING_0 6 , 1L ) ; expected . put ( STRING_1 2 , INT_3 ) ; expected . put ( STRING_3 4 , INT_4 ) ; expected . put ( STRING_5 , INT_5 ) ; expected . put ( STRING_0 0 , INT_3 ) ; expected . put ( STRING_1 7 , 1L ) ; expected . put ( STRING_1 , 1L ) ; expected . put ( STRING_0 9 , INT_6 ) ; expected . put ( STRING_3 7 , INT_7 ) ; expected . put ( STRING_6 , INT_8 ) ; expected . put ( STRING_1 9 , INT_6 ) ; expected . put ( STRING_3 8 , 1L ) ; expected . put ( STRING_7 , INT_6 ) ; expected . put ( STRING_3 3 , INT_9 ) ; expected . put ( STRING_2 2 , INT_10 ) ; expected . put ( STRING_8 , INT_3 ) ; expected . put ( STRING_3 , INT_3 ) ; expected . put ( STRING_2 5 , 0L ) ; expected . put ( STRING_1 3 , 0L ) ; expected . put ( STRING_1 4 , 0L ) ; expected . put ( STRING_0 3 , INT_11 ) ; expected . put ( STRING_2 , 1L ) ; expected . put ( STRING_2 1 , INT_8 ) ; expected . put ( STRING_0 8 , INT_12 ) ; expected . put ( STRING_0 1 , 1L ) ; expected . put ( STRING_1 8 , 1L ) ; expected . put ( STRING_0 4 , 1L ) ; expected . put ( STRING_1 5 , 1L ) ; expected . put ( STRING_0 5 , INT_11 ) ; "<AssertPlaceHolder>" ; } put ( java . lang . Long , org . apache . accumulo . server . IDENT_14 . IDENT_15 ) { if ( ( map . size ( ) ) == ( max ) ) { if ( ( key . compareTo ( map . METHOD_8 ( ) ) ) < 0 ) return false ; try { add ( key , value ) ; return true ; } finally { map . remove ( map . METHOD_8 ( ) ) ; } } else { add ( key , value ) ; return true ; } }
org . junit . Assert . assertEquals ( expected , IDENT_9 ) 