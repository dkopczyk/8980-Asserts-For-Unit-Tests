METHOD_0 ( ) { com . github . IDENT_0 . core . IDENT_1 mapper = com . github . IDENT_0 . core . IDENT_2 . create ( ) . METHOD_1 ( STRING_0 ) . METHOD_2 ( new com . github . IDENT_0 . core . IDENT_3 . IDENT_4 . METHOD_3 ( ) { @ com . github . IDENT_0 . core . IDENT_3 . Override public java . util . Map METHOD_4 ( java . util . List source , java . util . Map IDENT_5 ) { return new java . util . HashMap ( ) { { put ( "foo" , "bar" ) ; } } ; } } ) . build ( ) ; java . util . HashMap result = mapper . map ( new java . util . ArrayList < java . lang . String > ( ) , java . util . HashMap . class ) ; "<AssertPlaceHolder>" ; } get ( IDENT_6 ) { if ( key == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } com . github . IDENT_0 . core . cache . IDENT_7 < IDENT_6 , IDENT_8 > result = IDENT_9 . get ( key ) ; if ( result == null ) { return null ; } else { return result . getValue ( ) ; } }
org . junit . Assert . assertEquals ( "bar" , result . get ( "foo" ) ) 