METHOD_0 ( ) { com . github . IDENT_0 . core . IDENT_1 IDENT_2 = com . github . IDENT_0 . core . IDENT_3 . create ( ) . METHOD_1 ( new com . github . IDENT_0 . core . loader . api . METHOD_2 ( ) { @ com . github . IDENT_0 . core . IDENT_4 . builder . Override MOD_0 void METHOD_3 ( ) { mapping ( com . github . IDENT_0 . core . IDENT_4 . builder . IDENT_5 . IDENT_6 . class , java . util . Map . class ) . fields ( field ( STRING_0 ) . METHOD_4 ( true ) , METHOD_5 ( ) . METHOD_6 ( STRING_1 ) . METHOD_7 ( STRING_2 , STRING_3 ) ) ; } } ) . build ( ) ; com . github . IDENT_0 . core . IDENT_4 . builder . IDENT_5 . IDENT_6 source = new com . github . IDENT_0 . core . IDENT_4 . builder . IDENT_5 . METHOD_8 ( ) ; source . METHOD_9 ( STRING_4 ) ; java . util . Map result = IDENT_2 . map ( source , java . util . HashMap . class ) ; "<AssertPlaceHolder>" ; } get ( IDENT_7 ) { if ( key == null ) { throw new java . lang . IllegalArgumentException ( STRING_5 ) ; } com . github . IDENT_0 . core . cache . IDENT_8 < IDENT_7 , IDENT_9 > result = IDENT_10 . get ( key ) ; if ( result == null ) { return null ; } else { return result . getValue ( ) ; } }
org . junit . Assert . assertEquals ( STRING_4 , result . get ( STRING_1 ) ) 