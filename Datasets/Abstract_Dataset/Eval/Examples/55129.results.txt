METHOD_0 ( ) { com . github . IDENT_0 . core . IDENT_1 . IDENT_2 IDENT_3 = new com . github . IDENT_0 . core . IDENT_1 . METHOD_1 ( com . github . IDENT_0 . core . IDENT_1 . IDENT_4 . IDENT_5 . class , STRING_0 , false , 0 , null , null , IDENT_6 ) ; com . github . IDENT_0 . core . IDENT_1 . IDENT_4 . IDENT_5 bean = new com . github . IDENT_0 . core . IDENT_1 . IDENT_4 . METHOD_2 ( STRING_1 ) ; bean . container = new com . github . IDENT_0 . core . IDENT_1 . IDENT_4 . METHOD_2 ( STRING_1 ) ; bean . container . container = new com . github . IDENT_0 . core . IDENT_1 . IDENT_4 . METHOD_2 ( STRING_1 ) ; IDENT_3 . METHOD_3 ( bean , STRING_2 , mock ( com . github . IDENT_0 . core . IDENT_7 . IDENT_8 . class ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Object , java . lang . Object , com . github . IDENT_0 . core . IDENT_7 . IDENT_8 ) { if ( com . github . IDENT_0 . core . util . IDENT_9 . METHOD_4 ( IDENT_10 ) ) { METHOD_5 ( bean , value , IDENT_11 ) ; } else { if ( ( ! ( METHOD_6 ( ) . METHOD_7 ( ) ) ) || ( value != null ) ) { try { if ( ( value != null ) && ( ( METHOD_8 ( bean ) ) == value ) ) { return ; } } catch ( java . lang . Exception e ) { } METHOD_9 ( bean , value ) ; } } }
org . junit . Assert . assertEquals ( STRING_2 , bean . container . container . value ) 