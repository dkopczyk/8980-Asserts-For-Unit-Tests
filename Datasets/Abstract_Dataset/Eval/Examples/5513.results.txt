METHOD_0 ( ) { org . apache . accumulo . core . conf . IDENT_0 IDENT_1 = METHOD_1 ( org . apache . accumulo . core . crypto . IDENT_2 . IDENT_3 ) ; org . apache . accumulo . core . conf . IDENT_0 IDENT_4 = METHOD_1 ( org . apache . accumulo . core . crypto . IDENT_2 . IDENT_5 ) ; org . apache . hadoop . fs . IDENT_6 fs = org . apache . hadoop . fs . IDENT_6 . METHOD_2 ( org . apache . accumulo . core . crypto . IDENT_2 . IDENT_7 ) ; java . util . ArrayList < org . apache . accumulo . core . data . IDENT_8 > keys = METHOD_3 ( ) ; java . lang . String file = STRING_0 ; fs . delete ( new org . apache . hadoop . fs . Path ( file ) , true ) ; try ( org . apache . accumulo . core . client . IDENT_9 . IDENT_10 writer = org . apache . accumulo . core . client . IDENT_9 . IDENT_11 . METHOD_4 ( ) . to ( file ) . METHOD_5 ( fs ) . METHOD_6 ( IDENT_1 ) . build ( ) ) { org . apache . accumulo . core . data . IDENT_12 empty = new org . apache . accumulo . core . data . METHOD_7 ( new byte [ ] { } ) ; writer . METHOD_8 ( ) ; for ( org . apache . accumulo . core . data . IDENT_8 key : keys ) { writer . append ( key , empty ) ; } } org . apache . accumulo . core . client . IDENT_13 IDENT_14 = org . apache . accumulo . core . client . IDENT_9 . IDENT_11 . METHOD_9 ( ) . from ( file ) . METHOD_5 ( fs ) . METHOD_6 ( IDENT_4 ) . build ( ) ; java . util . ArrayList < org . apache . accumulo . core . data . IDENT_8 > IDENT_15 = new java . util . ArrayList ( ) ; IDENT_14 . METHOD_10 ( ( e ) -> IDENT_15 . add ( e . getKey ( ) ) ) ; "<AssertPlaceHolder>" ; } getKey ( ) { return key ; }
org . junit . Assert . assertEquals ( keys , IDENT_15 ) 