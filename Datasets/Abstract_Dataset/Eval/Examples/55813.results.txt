METHOD_0 ( ) { org . apache . druid . java . util . common . IDENT_0 . IDENT_1 < java . lang . Integer > IDENT_2 = org . apache . druid . java . util . common . IDENT_0 . IDENT_3 . simple ( java . util . Arrays . asList ( 1 , 2 , 3 ) ) ; org . apache . druid . java . util . common . IDENT_0 . IDENT_1 < java . lang . Integer > IDENT_4 = IDENT_2 . METHOD_1 ( ( ) -> { throw new java . lang . RuntimeException ( ) ; } ) ; final java . util . concurrent . atomic . IDENT_5 IDENT_6 = new java . util . concurrent . atomic . METHOD_2 ( ) ; org . apache . druid . java . util . common . IDENT_0 . IDENT_1 < java . lang . Integer > IDENT_7 = IDENT_4 . METHOD_3 ( ( ) -> IDENT_6 . set ( true ) , org . apache . druid . java . util . common . concurrent . IDENT_8 . METHOD_4 ( ) ) ; try { IDENT_7 . toList ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . RuntimeException e ) { "<AssertPlaceHolder>" ; } } get ( ) { if ( root . METHOD_5 ( ) ) { return IDENT_9 . METHOD_6 ( ) ; } else { return org . apache . druid . java . util . common . IDENT_0 . IDENT_3 . map ( IDENT_9 . METHOD_6 ( ) , new com . google . common . base . IDENT_10 < java . lang . Object [ ] , java . lang . Object [ ] > ( ) { @ org . apache . druid . sql . calcite . IDENT_11 . Override public java . lang . Object [ ] apply ( final java . lang . Object [ ] input ) { final java . lang . Object [ ] IDENT_12 = new java . lang . Object [ root . fields . size ( ) ] ; for ( int i = 0 ; i < ( root . fields . size ( ) ) ; i ++ ) { IDENT_12 [ i ] = input [ root . fields . get ( i ) . getKey ( ) ] ; } return IDENT_12 ; } } ) ; } }
org . junit . Assert . assertTrue ( IDENT_6 . get ( ) ) 