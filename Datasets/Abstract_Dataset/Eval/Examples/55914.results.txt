METHOD_0 ( ) { METHOD_1 ( ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_2 ( null , null , null ) ) . METHOD_3 ( com . google . common . collect . ImmutableList . of ( new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_0 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_0 ) , STRING_1 , METHOD_7 ( STRING_0 , STRING_1 ) ) , new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_2 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_2 ) , STRING_3 , METHOD_7 ( STRING_2 , STRING_3 ) ) , new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_4 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_4 ) , STRING_3 , METHOD_7 ( STRING_4 , STRING_3 ) ) ) ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_8 ( null ) ) . METHOD_3 ( com . google . common . collect . ImmutableList . of ( new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_5 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_5 ) , STRING_3 , METHOD_7 ( STRING_5 , STRING_3 ) ) , new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_6 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_6 ) , STRING_3 , METHOD_7 ( STRING_6 , STRING_3 ) ) , new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_7 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_7 ) , STRING_1 , METHOD_7 ( STRING_7 , STRING_1 ) ) , new org . apache . druid . IDENT_1 . METHOD_4 ( STRING_8 , org . joda . time . IDENT_2 . now ( org . joda . time . IDENT_3 . IDENT_4 . METHOD_5 ( ) ) , org . apache . druid . IDENT_1 . IDENT_5 . METHOD_6 ( STRING_8 ) , STRING_1 , METHOD_7 ( STRING_8 , STRING_1 ) ) ) ) ; org . easymock . EasyMock . < java . util . Collection < ? extends org . apache . druid . indexing . IDENT_6 . IDENT_7 > > expect ( IDENT_8 . METHOD_9 ( ) ) . andReturn ( com . google . common . collect . ImmutableList . of ( new org . apache . druid . indexing . IDENT_6 . http . IDENT_9 . METHOD_10 ( STRING_5 , null ) , new org . apache . druid . indexing . IDENT_6 . http . IDENT_9 . METHOD_10 ( STRING_8 , null ) ) ) . METHOD_11 ( ) ; org . easymock . EasyMock . < java . util . Collection < ? extends org . apache . druid . indexing . IDENT_6 . IDENT_7 > > expect ( IDENT_8 . METHOD_12 ( ) ) . andReturn ( com . google . common . collect . ImmutableList . of ( new org . apache . druid . indexing . IDENT_6 . http . IDENT_9 . METHOD_10 ( STRING_8 , null ) ) ) ; org . easymock . EasyMock . < java . util . Collection < ? extends org . apache . druid . indexing . IDENT_6 . IDENT_7 > > expect ( IDENT_8 . METHOD_13 ( ) ) . andReturn ( com . google . common . collect . ImmutableList . of ( new org . apache . druid . indexing . IDENT_6 . http . IDENT_9 . METHOD_10 ( STRING_5 , null ) ) ) ; org . easymock . EasyMock . replay ( IDENT_8 , IDENT_10 , IDENT_0 , IDENT_11 , req ) ; java . util . List < org . apache . druid . IDENT_1 . IDENT_12 > IDENT_13 = ( ( java . util . List < org . apache . druid . IDENT_1 . IDENT_12 > ) ( IDENT_14 . METHOD_14 ( null , null , null , null , null , req ) . METHOD_15 ( ) ) ) ; "<AssertPlaceHolder>" ; } size ( ) { if ( ( size ) < 0 ) { size = 0 ; for ( int i = 0 ; i <= ( IDENT_15 ) ; i ++ ) { int IDENT_16 = IDENT_17 [ i ] ; if ( org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_16 ( IDENT_16 ) ) { size += org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_17 ( IDENT_16 ) ; } else { if ( org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_18 ( IDENT_16 ) ) { if ( ! ( org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_19 ( IDENT_16 ) ) ) { ( size ) ++ ; } } else { size += org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_20 ( ( ( org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_21 ( IDENT_16 ) ) + 1 ) ) ; if ( ! ( org . apache . druid . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_19 ( IDENT_16 ) ) ) { ( size ) OP_0 ; } } } } } return size ; }
org . junit . Assert . assertEquals ( 4 , IDENT_13 . size ( ) ) 