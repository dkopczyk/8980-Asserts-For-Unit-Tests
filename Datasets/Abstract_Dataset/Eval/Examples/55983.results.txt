METHOD_0 ( ) { final org . apache . druid . query . IDENT_0 . IDENT_1 query = org . apache . druid . query . IDENT_0 . IDENT_1 . builder ( ) . METHOD_1 ( STRING_0 ) . METHOD_2 ( IDENT_2 . IDENT_3 ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( new org . apache . druid . query . IDENT_4 . METHOD_5 ( "foo" , "foo" , org . apache . druid . IDENT_5 . column . IDENT_6 . IDENT_7 ) ) . METHOD_4 ( new org . apache . druid . query . IDENT_4 . METHOD_5 ( "bar" , "bar" , org . apache . druid . IDENT_5 . column . IDENT_6 . IDENT_8 ) ) . METHOD_4 ( new org . apache . druid . query . IDENT_4 . METHOD_5 ( STRING_2 , STRING_2 , org . apache . druid . IDENT_5 . column . IDENT_6 . IDENT_9 ) ) . build ( ) ; final com . google . common . collect . IDENT_10 < org . apache . druid . data . input . IDENT_11 > IDENT_12 = query . METHOD_6 ( false ) ; final int compare = IDENT_12 . compare ( new org . apache . druid . data . input . METHOD_7 ( 0L , com . google . common . collect . ImmutableMap . of ( "foo" , 1 , "bar" , FLOAT_0 , STRING_2 , "a" ) ) , new org . apache . druid . data . input . METHOD_7 ( 0L , com . google . common . collect . ImmutableMap . of ( "foo" , 1L , "bar" , 1.0 , STRING_2 , "b" ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( boolean ) { if ( IDENT_13 ) { if ( ! ( org . apache . druid . query . IDENT_0 . IDENT_14 . IDENT_15 . METHOD_8 ( ( ( org . apache . druid . query . IDENT_0 . IDENT_14 . IDENT_15 ) ( IDENT_16 ) ) , IDENT_17 ) ) ) { return METHOD_9 ( IDENT_18 , ( ( org . apache . druid . query . IDENT_0 . IDENT_14 . IDENT_15 ) ( IDENT_16 ) ) ) ; } } final boolean IDENT_19 = METHOD_10 ( ) ; final java . util . IDENT_20 < org . apache . druid . data . input . IDENT_11 > IDENT_21 = METHOD_11 ( IDENT_18 ) ; if ( IDENT_21 == null ) { return com . google . common . collect . IDENT_10 . from ( ( IDENT_22 , IDENT_23 ) -> METHOD_12 ( IDENT_17 , IDENT_22 , IDENT_23 ) ) ; } else if ( IDENT_19 ) { return com . google . common . collect . IDENT_10 . from ( ( IDENT_22 , IDENT_23 ) -> { final int IDENT_24 = METHOD_12 ( IDENT_17 , IDENT_22 , IDENT_23 ) ; if ( IDENT_24 != 0 ) { return IDENT_24 ; } return IDENT_21 . compare ( IDENT_22 , IDENT_23 ) ; } ) ; } else { return com . google . common . collect . IDENT_10 . from ( ( IDENT_22 , IDENT_23 ) -> { final int IDENT_25 = IDENT_21 . compare ( IDENT_22 , IDENT_23 ) ; if ( IDENT_25 != 0 ) { return IDENT_25 ; } return METHOD_12 ( IDENT_17 , IDENT_22 , IDENT_23 ) ; } ) ; } }
org . junit . Assert . assertEquals ( ( - 1 ) , compare ) 