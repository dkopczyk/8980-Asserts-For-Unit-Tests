METHOD_0 ( ) { final org . apache . druid . IDENT_0 . IDENT_1 < java . lang . String , org . apache . druid . IDENT_0 . IDENT_2 > IDENT_0 = org . apache . druid . server . IDENT_3 . helper . IDENT_4 . METHOD_1 ( new org . apache . druid . server . IDENT_3 . helper . IDENT_4 . METHOD_2 ( org . apache . druid . java . util . common . IDENT_5 . of ( STRING_0 ) , new org . joda . time . METHOD_3 ( STRING_1 ) , INT_0 , 1 ) ) ; final org . apache . druid . server . IDENT_3 . helper . IDENT_6 iterator = policy . METHOD_4 ( com . google . common . collect . ImmutableMap . of ( org . apache . druid . server . IDENT_3 . helper . IDENT_4 . IDENT_7 , METHOD_5 ( INT_0 , 100 , new org . joda . time . METHOD_3 ( STRING_2 ) ) ) , com . google . common . collect . ImmutableMap . of ( org . apache . druid . server . IDENT_3 . helper . IDENT_4 . IDENT_7 , IDENT_0 ) , java . util . Collections . METHOD_6 ( ) ) ; "<AssertPlaceHolder>" ; } hasNext ( ) { final boolean hasNext = iterator . hasNext ( ) ; if ( ! hasNext ) { try { it . close ( ) ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } return hasNext ; }
org . junit . Assert . assertFalse ( iterator . hasNext ( ) ) 