METHOD_0 ( ) { final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity a = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity ( IDENT_3 ) ; a . setValue ( "a" ) ; a . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity b = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity ( IDENT_3 ) ; b . setValue ( "b" ) ; b . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity c = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . Entity ( IDENT_3 ) ; c . setValue ( STRING_0 ) ; c . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . IDENT_4 IDENT_5 = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 ( IDENT_3 ) ; IDENT_5 . METHOD_3 ( 0 ) ; IDENT_5 . METHOD_4 ( 10 ) ; IDENT_5 . METHOD_5 ( STRING_1 ) ; IDENT_5 . METHOD_5 ( STRING_2 ) ; IDENT_5 . METHOD_6 ( a ) ; IDENT_5 . METHOD_7 ( b ) ; IDENT_5 . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 IDENT_6 = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 ( IDENT_3 ) ; IDENT_6 . METHOD_3 ( IDENT_5 . METHOD_8 ( ) ) ; IDENT_6 . METHOD_4 ( IDENT_5 . METHOD_9 ( ) ) ; IDENT_6 . METHOD_5 ( STRING_3 ) ; IDENT_6 . METHOD_10 ( IDENT_5 . METHOD_11 ( ) ) ; IDENT_6 . METHOD_6 ( a ) ; IDENT_6 . METHOD_7 ( b ) ; IDENT_6 . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 IDENT_7 = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 ( IDENT_3 ) ; IDENT_7 . METHOD_3 ( IDENT_5 . METHOD_8 ( ) ) ; IDENT_7 . METHOD_4 ( IDENT_5 . METHOD_9 ( ) ) ; IDENT_7 . METHOD_5 ( IDENT_5 . METHOD_12 ( ) ) ; IDENT_7 . METHOD_10 ( IDENT_5 . METHOD_11 ( ) ) ; IDENT_7 . METHOD_6 ( c ) ; IDENT_7 . METHOD_7 ( b ) ; IDENT_7 . METHOD_1 ( ) ; final uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 IDENT_8 = new uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 ( IDENT_3 ) ; IDENT_8 . METHOD_3 ( IDENT_5 . METHOD_8 ( ) ) ; IDENT_8 . METHOD_4 ( IDENT_5 . METHOD_9 ( ) ) ; IDENT_8 . METHOD_5 ( IDENT_5 . METHOD_12 ( ) ) ; IDENT_8 . METHOD_10 ( IDENT_5 . METHOD_11 ( ) ) ; IDENT_8 . METHOD_6 ( a ) ; IDENT_8 . METHOD_7 ( c ) ; IDENT_8 . METHOD_1 ( ) ; final int size = org . apache . IDENT_9 . IDENT_10 . util . IDENT_11 . select ( IDENT_3 , uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 . class ) . size ( ) ; METHOD_13 ( ) ; "<AssertPlaceHolder>" ; } select ( java . lang . String , java . lang . IDENT_12 ) { org . apache . commons . lang . IDENT_13 . METHOD_14 ( query ) ; org . apache . commons . lang . IDENT_13 . METHOD_15 ( IDENT_14 ) ; uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . IDENT_15 < T > IDENT_16 = uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . IDENT_17 . parse ( query ) ; java . util . ArrayList < uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . Node < T > > nodes = new java . util . ArrayList ( ) ; java . util . IDENT_18 < uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . Node < T > , java . lang . Boolean > IDENT_19 = new java . util . METHOD_16 ( ) ; for ( uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . Node < T > root : IDENT_14 ) { final uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . IDENT_20 < T > found = uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . IDENT_21 . select ( IDENT_16 , root ) ; for ( uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . Node < T > el : found ) { if ( ! ( IDENT_19 . containsKey ( el ) ) ) { nodes . add ( el ) ; IDENT_19 . put ( el , Boolean . IDENT_22 ) ; } } } return new uk . gov . IDENT_0 . IDENT_1 . IDENT_9 . utils . select . METHOD_17 ( nodes ) ; }
org . junit . Assert . assertEquals ( size , org . apache . IDENT_9 . IDENT_10 . util . IDENT_11 . select ( IDENT_3 , uk . gov . IDENT_0 . IDENT_1 . types . IDENT_2 . METHOD_2 . class ) . size ( ) ) 