METHOD_0 ( ) { uk . gov . IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 IDENT_4 = uk . gov . IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 . parse ( STRING_0 ) ; uk . gov . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = new uk . gov . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_1 ( com . google . common . collect . ImmutableList . of ( IDENT_4 ) , IDENT_4 ) ; java . util . Optional < uk . gov . IDENT_0 . IDENT_1 . types . IDENT_9 . IDENT_10 > IDENT_9 = IDENT_11 . select ( STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Optional , uk . gov . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 . METHOD_1 , boolean ) { java . util . Optional < java . util . List < uk . gov . IDENT_0 . IDENT_1 . types . IDENT_9 . IDENT_10 > > IDENT_12 = METHOD_3 ( IDENT_13 , IDENT_8 ) ; if ( IDENT_12 . METHOD_4 ( ) ) { java . util . List < uk . gov . IDENT_0 . IDENT_1 . types . IDENT_9 . IDENT_10 > IDENT_14 = IDENT_12 . get ( ) ; if ( ! IDENT_15 ) { METHOD_5 ( IDENT_14 ) ; } return java . util . Optional . of ( IDENT_14 . get ( ( ( IDENT_14 . size ( ) ) - 1 ) ) ) ; } else { if ( IDENT_15 ) { METHOD_6 ( IDENT_8 . METHOD_7 ( ) ) ; } return java . util . Optional . empty ( ) ; } }
org . junit . Assert . assertFalse ( IDENT_11 . METHOD_2 ( IDENT_9 , IDENT_8 , true ) . METHOD_4 ( ) ) 