METHOD_0 ( ) { METHOD_1 ( new com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_2 . METHOD_2 ( false ) ) ; org . easymock . EasyMock . expect ( task . METHOD_3 ( ) ) . METHOD_4 ( true ) ; METHOD_5 ( ) ; com . sun . IDENT_0 . kernel . IDENT_1 . IDENT_3 action = policy . METHOD_6 ( task ) ; "<AssertPlaceHolder>" ; METHOD_7 ( ) ; } METHOD_6 ( com . sun . IDENT_0 . kernel . IDENT_1 . IDENT_4 ) { if ( task == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } java . lang . Throwable result = task . METHOD_8 ( ) ; if ( result == null ) { throw new java . lang . IllegalStateException ( ( STRING_1 + STRING_2 ) ) ; } if ( ( result instanceof com . sun . IDENT_0 . app . IDENT_5 ) && ( ( ( com . sun . IDENT_0 . app . IDENT_5 ) ( result ) ) . METHOD_9 ( ) ) ) { if ( ( task . METHOD_10 ( ) ) > ( IDENT_6 ) ) { if ( ( result instanceof com . sun . IDENT_0 . app . IDENT_7 ) && ( ( ( task . METHOD_11 ( ) ) * INT_0 ) < ( ( long ) ( Integer . MAX_VALUE ) ) ) ) { com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_8 . logger . METHOD_12 ( IDENT_9 . IDENT_10 , task . METHOD_8 ( ) , ( STRING_3 + ( STRING_4 + STRING_5 ) ) , task . METHOD_10 ( ) , task , ( ( task . METHOD_11 ( ) ) * 2 ) ) ; task . METHOD_13 ( ( ( task . METHOD_11 ( ) ) * 2 ) ) ; } else { com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_8 . logger . METHOD_12 ( IDENT_9 . IDENT_10 , task . METHOD_8 ( ) , ( STRING_3 + STRING_5 ) , task . METHOD_10 ( ) , task ) ; } return com . sun . IDENT_0 . kernel . IDENT_1 . IDENT_3 . IDENT_11 ; } else { return com . sun . IDENT_0 . kernel . IDENT_1 . IDENT_3 . IDENT_12 ; } } else { if ( com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_8 . logger . METHOD_14 ( IDENT_9 . IDENT_13 ) ) { if ( task . METHOD_3 ( ) ) { com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_8 . logger . log ( IDENT_9 . IDENT_13 , ( STRING_6 + STRING_7 ) , task ) ; } else { com . sun . IDENT_0 . impl . kernel . IDENT_1 . IDENT_8 . logger . log ( IDENT_9 . IDENT_13 , ( STRING_8 + STRING_9 ) , task ) ; } } return com . sun . IDENT_0 . kernel . IDENT_1 . IDENT_3 . IDENT_14 ; } }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_14 , action ) 