METHOD_0 ( ) { METHOD_1 ( new com . sun . IDENT_0 . app . METHOD_2 ( STRING_0 ) ) ; org . easymock . EasyMock . expect ( task . METHOD_3 ( ) ) . METHOD_4 ( ( ( IDENT_1 . IDENT_2 ) + 1 ) ) ; org . easymock . EasyMock . expect ( task . METHOD_5 ( ) ) . METHOD_4 ( ( ( long ) ( ( ( Integer . MAX_VALUE ) / 2 ) + ( ( Integer . MAX_VALUE ) / 4 ) ) ) ) ; METHOD_6 ( ) ; com . sun . IDENT_0 . kernel . IDENT_3 . IDENT_4 action = policy . METHOD_7 ( task ) ; "<AssertPlaceHolder>" ; METHOD_8 ( ) ; } METHOD_7 ( com . sun . IDENT_0 . kernel . IDENT_3 . IDENT_5 ) { if ( task == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . lang . Throwable result = task . METHOD_9 ( ) ; if ( result == null ) { throw new java . lang . IllegalStateException ( ( STRING_2 + STRING_3 ) ) ; } if ( ( result instanceof com . sun . IDENT_0 . app . IDENT_6 ) && ( ( ( com . sun . IDENT_0 . app . IDENT_6 ) ( result ) ) . METHOD_10 ( ) ) ) { if ( ( task . METHOD_3 ( ) ) > ( IDENT_7 ) ) { if ( ( result instanceof com . sun . IDENT_0 . app . METHOD_2 ) && ( ( ( task . METHOD_5 ( ) ) * INT_0 ) < ( ( long ) ( Integer . MAX_VALUE ) ) ) ) { com . sun . IDENT_0 . impl . kernel . IDENT_3 . IDENT_1 . logger . METHOD_11 ( IDENT_8 . IDENT_9 , task . METHOD_9 ( ) , ( STRING_4 + ( STRING_5 + STRING_6 ) ) , task . METHOD_3 ( ) , task , ( ( task . METHOD_5 ( ) ) * 2 ) ) ; task . METHOD_12 ( ( ( task . METHOD_5 ( ) ) * 2 ) ) ; } else { com . sun . IDENT_0 . impl . kernel . IDENT_3 . IDENT_1 . logger . METHOD_11 ( IDENT_8 . IDENT_9 , task . METHOD_9 ( ) , ( STRING_4 + STRING_6 ) , task . METHOD_3 ( ) , task ) ; } return com . sun . IDENT_0 . kernel . IDENT_3 . IDENT_4 . IDENT_10 ; } else { return com . sun . IDENT_0 . kernel . IDENT_3 . IDENT_4 . IDENT_11 ; } } else { if ( com . sun . IDENT_0 . impl . kernel . IDENT_3 . IDENT_1 . logger . METHOD_13 ( IDENT_8 . IDENT_12 ) ) { if ( task . METHOD_14 ( ) ) { com . sun . IDENT_0 . impl . kernel . IDENT_3 . IDENT_1 . logger . log ( IDENT_8 . IDENT_12 , ( STRING_7 + STRING_8 ) , task ) ; } else { com . sun . IDENT_0 . impl . kernel . IDENT_3 . IDENT_1 . logger . log ( IDENT_8 . IDENT_12 , ( STRING_9 + STRING_10 ) , task ) ; } } return com . sun . IDENT_0 . kernel . IDENT_3 . IDENT_4 . IDENT_13 ; } }
org . junit . Assert . assertEquals ( IDENT_4 . IDENT_10 , action ) 