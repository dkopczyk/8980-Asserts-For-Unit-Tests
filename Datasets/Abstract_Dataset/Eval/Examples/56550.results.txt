METHOD_0 ( ) { com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_2 . METHOD_1 ( new com . sun . IDENT_0 . test . util . METHOD_2 ( ) { public void run ( ) throws com . sun . IDENT_0 . test . app . util . Exception { java . util . Map < java . lang . Integer , java . lang . Integer > test = new com . sun . IDENT_0 . app . util . IDENT_3 < java . lang . Integer , java . lang . Integer > ( ) ; java . util . Map < java . lang . Integer , java . lang . Integer > control = new java . util . HashMap < java . lang . Integer , java . lang . Integer > ( ) ; int [ ] IDENT_4 = new int [ 50 ] ; for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { int j = com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_5 . METHOD_3 ( ) ; IDENT_4 [ i ] = j ; test . put ( j , ( - j ) ) ; } for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } } } , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_6 ) ; } METHOD_4 ( java . lang . Object ) { for ( java . util . Iterator < IDENT_7 > i = values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { IDENT_7 v ; try { v = i . next ( ) ; } catch ( com . sun . IDENT_0 . app . IDENT_8 e ) { continue ; } if ( com . sun . IDENT_0 . app . util . IDENT_3 . METHOD_5 ( v , value ) ) { return true ; } } return false ; }
org . junit . Assert . assertTrue ( test . METHOD_4 ( ( - ( IDENT_4 [ i ] ) ) ) ) 