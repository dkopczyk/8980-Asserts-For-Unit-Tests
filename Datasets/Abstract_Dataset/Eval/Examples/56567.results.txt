METHOD_0 ( ) { com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_2 . METHOD_1 ( new com . sun . IDENT_0 . test . util . METHOD_2 ( ) { public void run ( ) throws com . sun . IDENT_0 . test . app . util . Exception { java . util . Map < com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_3 , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_4 > test = new com . sun . IDENT_0 . app . util . IDENT_5 < com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_3 , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_4 > ( ) ; java . util . Map < com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_3 , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_4 > control = new java . util . HashMap < com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_3 , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_4 > ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { test . put ( new com . sun . IDENT_0 . test . app . util . IDENT_1 . METHOD_3 ( i ) , new com . sun . IDENT_0 . test . app . util . IDENT_1 . METHOD_4 ( i ) ) ; control . put ( new com . sun . IDENT_0 . test . app . util . IDENT_1 . METHOD_3 ( i ) , new com . sun . IDENT_0 . test . app . util . IDENT_1 . METHOD_4 ( i ) ) ; "<AssertPlaceHolder>" ; } } } , com . sun . IDENT_0 . test . app . util . IDENT_1 . IDENT_6 ) ; } put ( IDENT_7 , IDENT_8 ) { com . sun . IDENT_0 . app . util . IDENT_5 . METHOD_5 ( key , STRING_0 ) ; com . sun . IDENT_0 . app . util . IDENT_5 . METHOD_5 ( value , "value" ) ; return METHOD_6 ( key , value , true ) ; }
org . junit . Assert . assertEquals ( control , test ) 