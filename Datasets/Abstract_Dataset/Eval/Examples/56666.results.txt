METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 < java . lang . RuntimeException > exception = new java . util . concurrent . atomic . IDENT_0 < java . lang . RuntimeException > ( null ) ; final com . sun . IDENT_1 . service . IDENT_2 listener = new com . sun . IDENT_1 . test . util . METHOD_1 ( ) ; java . lang . Thread IDENT_3 = new java . lang . Thread ( ) { public void run ( ) { try { IDENT_4 . METHOD_2 ( listener ) ; } catch ( java . lang . RuntimeException e ) { e . printStackTrace ( ) ; exception . set ( e ) ; } } } ; IDENT_3 . start ( ) ; IDENT_3 . join ( ) ; java . lang . RuntimeException e = exception . get ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return object ; }
org . junit . Assert . assertEquals ( com . sun . IDENT_1 . test . impl . service . transaction . IllegalStateException . class , ( e == null ? null : e . getClass ( ) ) ) 