METHOD_0 ( ) { final org . easymock . tests . IDENT_0 mock = METHOD_1 ( org . easymock . tests . IDENT_0 . class ) ; expect ( mock . METHOD_2 ( "test" ) ) . andReturn ( STRING_0 ) . times ( org . easymock . IDENT_1 . IDENT_2 . IDENT_3 ) ; replay ( mock ) ; org . easymock . IDENT_1 . IDENT_4 < java . lang . String > replay = ( ) -> mock . METHOD_2 ( "test" ) ; org . easymock . IDENT_1 . IDENT_5 service = org . easymock . IDENT_1 . IDENT_6 . METHOD_3 ( org . easymock . IDENT_1 . IDENT_2 . IDENT_3 ) ; java . util . List < org . easymock . IDENT_1 . IDENT_4 < java . lang . String > > IDENT_7 = java . util . Collections . METHOD_4 ( org . easymock . IDENT_1 . IDENT_2 . IDENT_3 , replay ) ; java . util . List < org . easymock . IDENT_1 . IDENT_8 < java . lang . String > > results = service . METHOD_5 ( IDENT_7 ) ; for ( org . easymock . IDENT_1 . IDENT_8 < java . lang . String > future : results ) { "<AssertPlaceHolder>" ; } verify ( mock ) ; } get ( ) { return i ; }
org . junit . Assert . assertEquals ( STRING_0 , future . get ( ) ) 