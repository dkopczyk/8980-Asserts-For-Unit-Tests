METHOD_0 ( ) { expect ( mock . METHOD_1 ( and ( METHOD_2 ( 7 ) , METHOD_3 ( 10 ) ) , METHOD_4 ( java . lang . String . class ) , contains ( STRING_0 ) ) ) . andReturn ( STRING_1 ) . METHOD_5 ( ) ; replay ( mock ) ; boolean IDENT_0 = false ; try { mock . METHOD_1 ( INT_0 , "" , STRING_2 ) ; } catch ( java . lang . IDENT_1 expected ) { IDENT_0 = true ; } if ( ! IDENT_0 ) { org . junit . Assert . fail ( ) ; } IDENT_0 = false ; try { mock . METHOD_1 ( 8 , new java . lang . Object ( ) , STRING_2 ) ; } catch ( java . lang . IDENT_1 expected ) { IDENT_0 = true ; } if ( ! IDENT_0 ) { org . junit . Assert . fail ( ) ; } IDENT_0 = false ; try { mock . METHOD_1 ( 8 , "" , STRING_3 ) ; } catch ( java . lang . IDENT_1 expected ) { IDENT_0 = true ; } if ( ! IDENT_0 ) { org . junit . Assert . fail ( ) ; } "<AssertPlaceHolder>" ; METHOD_6 ( mock ) ; } replay ( java . lang . Object [ ] ) { for ( int i = 0 ; i < ( IDENT_2 . length ) ; i ++ ) { try { org . easymock . EasyMock . METHOD_7 ( IDENT_2 [ i ] ) . replay ( ) ; } catch ( java . lang . RuntimeException e ) { throw org . easymock . EasyMock . METHOD_8 ( IDENT_2 . length , i , e ) ; } catch ( java . lang . IDENT_1 e ) { throw org . easymock . EasyMock . METHOD_9 ( IDENT_2 . length , i , e ) ; } } }
org . junit . Assert . assertEquals ( STRING_1 , mock . METHOD_1 ( 8 , "" , STRING_2 ) ) 