METHOD_0 ( ) { parser = new org . IDENT_0 . IDENT_1 . tools . IDENT_2 . parser . impl . METHOD_1 ( ) ; java . lang . String IDENT_3 = STRING_0 ; java . util . List < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . IDENT_5 > op = new java . util . ArrayList < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . IDENT_5 > ( ) ; org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . IDENT_5 operation = new org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_2 ( ) ; operation . setName ( IDENT_3 ) ; op . add ( operation ) ; org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . IDENT_6 IDENT_7 = new org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_3 ( ) ; IDENT_7 . setName ( "test" ) ; java . util . Map < java . lang . String , java . util . List < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_2 > > IDENT_8 = new java . util . HashMap < java . lang . String , java . util . List < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_2 > > ( ) ; IDENT_8 . put ( IDENT_7 . getName ( ) , op ) ; parser . METHOD_4 ( IDENT_8 ) ; java . util . Map IDENT_9 = parser . METHOD_5 ( ) ; if ( ( IDENT_9 != null ) && ( IDENT_9 . containsKey ( "test" ) ) ) { java . util . List < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_2 > IDENT_10 = ( ( java . util . List < org . IDENT_0 . IDENT_1 . tools . IDENT_2 . IDENT_4 . METHOD_2 > ) ( IDENT_9 . get ( "test" ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( ) { return IDENT_11 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_10 . size ( ) ) 