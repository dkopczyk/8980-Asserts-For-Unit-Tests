METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 + ( METHOD_1 ( ) ) ; ( ( org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . IDENT_3 ) ( this . IDENT_4 ) ) . METHOD_2 ( IDENT_0 ) ; java . lang . String [ ] IDENT_5 = new java . lang . String [ 2 ] ; IDENT_5 [ 0 ] = STRING_1 ; IDENT_5 [ 1 ] = STRING_2 ; org . eclipse . IDENT_1 . data . engine . api . IDENT_6 [ ] IDENT_7 = new org . eclipse . IDENT_1 . data . engine . api . IDENT_6 [ 2 ] ; IDENT_7 [ 0 ] = new org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . METHOD_3 ( STRING_3 ) ; IDENT_7 [ 1 ] = new org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . METHOD_3 ( STRING_4 ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . IDENT_8 IDENT_9 = this . METHOD_4 ( null , null , null , null , null , null , null , null , null , IDENT_5 , IDENT_7 ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_10 IDENT_11 = IDENT_12 . METHOD_5 ( IDENT_9 ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_13 IDENT_14 = IDENT_11 . execute ( null ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_15 IDENT_16 = IDENT_14 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; IDENT_16 . getValue ( IDENT_5 [ 0 ] ) ; IDENT_16 . getValue ( IDENT_5 [ 1 ] ) ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . METHOD_7 ( ) ; } org . eclipse . IDENT_1 . report . engine . IDENT_17 . IDENT_18 . IDENT_19 [ ] IDENT_20 = new org . eclipse . IDENT_1 . report . engine . IDENT_17 . IDENT_18 . IDENT_19 [ IDENT_21 . length ] ; for ( int i = 0 ; i < ( IDENT_21 . length ) ; i ++ ) { java . util . ArrayList < org . eclipse . IDENT_1 . report . engine . IDENT_17 . IDENT_18 . IDENT_19 > IDENT_22 = IDENT_23 . get ( i ) ; int IDENT_24 = IDENT_21 [ i ] ; int size = IDENT_22 . size ( ) ; for ( int j = IDENT_24 ; j < size ; j ++ ) { org . eclipse . IDENT_1 . report . engine . IDENT_17 . IDENT_18 . IDENT_19 data = IDENT_22 . get ( j ) ; int IDENT_25 = data . METHOD_8 ( ) ; if ( IDENT_25 == ( IDENT_26 ) ) { IDENT_20 [ i ] = data ; IDENT_21 [ i ] = j + 1 ; break ; } else if ( IDENT_25 > ( IDENT_26 ) ) { IDENT_21 [ i ] = j ; break ; } } } ( IDENT_26 ) ++ ; return IDENT_20 ; }
org . junit . Assert . assertTrue ( IDENT_16 . next ( ) ) 