METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 + ( METHOD_1 ( ) ) ; ( ( org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . IDENT_3 ) ( this . IDENT_4 ) ) . METHOD_2 ( IDENT_0 ) ; java . lang . String [ ] IDENT_5 = new java . lang . String [ ] { STRING_1 , STRING_2 } ; org . eclipse . IDENT_1 . data . engine . api . IDENT_6 [ ] IDENT_7 = new org . eclipse . IDENT_1 . data . engine . api . IDENT_6 [ ] { new org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . METHOD_3 ( STRING_3 , 0 ) , new org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . METHOD_3 ( STRING_4 , 0 ) } ; org . eclipse . IDENT_1 . data . engine . api . IDENT_2 . IDENT_8 IDENT_9 = this . METHOD_4 ( null , null , null , null , null , null , null , null , null , IDENT_5 , IDENT_7 ) ; java . util . HashMap IDENT_10 = new java . util . HashMap ( ) ; IDENT_10 . put ( IDENT_4 . METHOD_5 ( ) , IDENT_0 ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_11 IDENT_12 = IDENT_13 . METHOD_6 ( IDENT_9 , IDENT_10 ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_14 IDENT_15 = IDENT_12 . execute ( null ) ; org . eclipse . IDENT_1 . data . engine . api . IDENT_16 IDENT_17 = IDENT_15 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; IDENT_17 . getValue ( IDENT_5 [ 0 ] ) ; IDENT_17 . getValue ( IDENT_5 [ 1 ] ) ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . METHOD_8 ( ) ; } org . eclipse . IDENT_1 . report . engine . IDENT_18 . IDENT_19 . IDENT_20 [ ] IDENT_21 = new org . eclipse . IDENT_1 . report . engine . IDENT_18 . IDENT_19 . IDENT_20 [ IDENT_22 . length ] ; for ( int i = 0 ; i < ( IDENT_22 . length ) ; i ++ ) { java . util . ArrayList < org . eclipse . IDENT_1 . report . engine . IDENT_18 . IDENT_19 . IDENT_20 > IDENT_23 = IDENT_24 . get ( i ) ; int IDENT_25 = IDENT_22 [ i ] ; int size = IDENT_23 . size ( ) ; for ( int j = IDENT_25 ; j < size ; j ++ ) { org . eclipse . IDENT_1 . report . engine . IDENT_18 . IDENT_19 . IDENT_20 data = IDENT_23 . get ( j ) ; int IDENT_26 = data . METHOD_9 ( ) ; if ( IDENT_26 == ( IDENT_27 ) ) { IDENT_21 [ i ] = data ; IDENT_22 [ i ] = j + 1 ; break ; } else if ( IDENT_26 > ( IDENT_27 ) ) { IDENT_22 [ i ] = j ; break ; } } } ( IDENT_27 ) ++ ; return IDENT_21 ; }
org . junit . Assert . assertTrue ( IDENT_17 . next ( ) ) 