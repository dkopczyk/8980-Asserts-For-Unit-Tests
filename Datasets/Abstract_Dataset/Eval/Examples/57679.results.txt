METHOD_0 ( ) { java . lang . String expression = IDENT_0 [ 9 ] ; try { java . util . List list = org . eclipse . IDENT_1 . data . engine . expression . IDENT_2 . METHOD_1 ( new org . eclipse . IDENT_1 . data . engine . api . IDENT_3 . METHOD_2 ( expression ) ) ; "<AssertPlaceHolder>" ; } catch ( org . eclipse . IDENT_1 . core . exception . IDENT_4 e ) { org . junit . Assert . fail ( STRING_0 ) ; } } size ( ) { org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_6 n ; switch ( ( IDENT_7 ) == ( - 1 ) ? METHOD_3 ( ) : METHOD_3 ) { case IDENT_8 : n = METHOD_4 ( org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_8 ) ; { if ( true ) return n ; } break ; case IDENT_9 : n = METHOD_4 ( org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_9 ) ; { if ( true ) return n ; } break ; case IDENT_10 : n = METHOD_4 ( org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_10 ) ; { if ( true ) return n ; } break ; case IDENT_11 : n = METHOD_4 ( org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_11 ) ; { if ( true ) return n ; } break ; case IDENT_12 : n = METHOD_4 ( org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . IDENT_12 ) ; { if ( true ) return n ; } break ; default : IDENT_13 [ 4 ] = IDENT_14 ; METHOD_4 ( ( - 1 ) ) ; throw new org . eclipse . IDENT_1 . report . engine . executor . IDENT_5 . METHOD_5 ( ) ; } throw new java . lang . METHOD_6 ( STRING_1 ) ; }
org . junit . Assert . assertTrue ( ( ( list . size ( ) ) == 1 ) ) 