METHOD_0 ( ) { java . util . List [ ] IDENT_0 = METHOD_1 ( ) ; int [ ] IDENT_1 = new int [ ] { 0 , 5 , 6 , 8 } ; java . util . List [ ] IDENT_2 = org . eclipse . IDENT_3 . data . engine . impl . document . IDENT_4 . METHOD_2 ( IDENT_0 , IDENT_1 ) ; java . util . List IDENT_5 = IDENT_2 [ ( ( IDENT_2 . length ) - 1 ) ] ; java . util . List IDENT_6 = new java . util . ArrayList ( ) ; IDENT_6 . add ( METHOD_2 ( 0 , 0 ) ) ; IDENT_6 . add ( METHOD_2 ( 0 , 1 ) ) ; IDENT_6 . add ( METHOD_2 ( 1 , 2 ) ) ; IDENT_6 . add ( METHOD_2 ( 2 , 3 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . util . List , java . util . List ) { if ( ( IDENT_7 . size ( ) ) != ( IDENT_8 . size ( ) ) ) return false ; for ( int i = 0 ; i < ( IDENT_7 . size ( ) ) ; i ++ ) { org . eclipse . IDENT_3 . data . engine . executor . transform . group . IDENT_9 IDENT_10 = ( ( org . eclipse . IDENT_3 . data . engine . executor . transform . group . IDENT_9 ) ( IDENT_7 . get ( i ) ) ) ; org . eclipse . IDENT_3 . data . engine . executor . transform . group . IDENT_9 IDENT_11 = ( ( org . eclipse . IDENT_3 . data . engine . executor . transform . group . IDENT_9 ) ( IDENT_8 . get ( i ) ) ) ; if ( ( ( IDENT_10 . parent ) != ( IDENT_11 . parent ) ) || ( ( IDENT_10 . IDENT_12 ) != ( IDENT_11 . IDENT_12 ) ) ) return false ; } return true ; }
org . junit . Assert . assertTrue ( METHOD_3 ( IDENT_6 , IDENT_5 ) ) 