METHOD_0 ( ) { org . eclipse . IDENT_0 . IDENT_1 framework = org . eclipse . IDENT_0 . IDENT_1 . METHOD_1 ( new java . lang . String [ ] { } ) ; "<AssertPlaceHolder>" ; framework . METHOD_2 ( ) ; } METHOD_1 ( java . lang . String [ ] ) { final org . eclipse . IDENT_0 . IDENT_2 . service . IDENT_3 IDENT_4 = new org . eclipse . IDENT_0 . IDENT_2 . service . METHOD_3 ( System . err ) ; java . lang . String IDENT_5 = null ; final java . lang . StringBuffer IDENT_6 = new java . lang . StringBuffer ( ) ; for ( int i = 0 ; ( args != null ) && ( i < ( args . length ) ) ; i ++ ) { if ( STRING_0 FLOAT_0 METHOD_4 ( args [ i ] ) ) { System . err . println ( ( "" + ( ( ( ( ( ( ( ( ( STRING_0 7 + STRING_1 ) + STRING_2 ) + STRING_3 1 ) + STRING_4 ) + STRING_3 3 ) + STRING_5 ) + STRING_3 0 ) + STRING_0 9 ) + STRING_0 1 ) ) ) ; return null ; } else if ( args [ i ] . METHOD_5 ( STRING_6 ) ) { IDENT_5 = args [ i ] ; break ; } else { IDENT_6 . append ( args [ i ] ) ; if ( args [ i ] . startsWith ( STRING_3 2 ) ) { IDENT_6 . append ( STRING_7 ) ; } else if ( ( ( ( ( args [ i ] . equalsIgnoreCase ( STRING_0 2 ) ) || ( args [ i ] . equalsIgnoreCase ( STRING_0 4 ) ) ) || ( args [ i ] . equalsIgnoreCase ( STRING_0 6 ) ) ) || ( args [ i ] . equalsIgnoreCase ( STRING_3 ) ) ) || ( args [ i ] . equalsIgnoreCase ( STRING_0 ) ) ) { if ( ( i - 1 ) < ( args . length ) ) { i ++ ; IDENT_6 . append ( STRING_8 ) ; IDENT_6 . append ( args [ i ] ) ; IDENT_6 . append ( STRING_7 ) ; } } } } if ( ( IDENT_5 == null ) && ( ( IDENT_6 . length ( ) ) == 0 ) ) { IDENT_5 = java . lang . System . getProperty ( STRING_0 8 ) ; if ( IDENT_5 == null ) { IDENT_5 = STRING_9 ; } } final org . eclipse . IDENT_0 . IDENT_1 IDENT_7 ; if ( IDENT_5 != null ) { final java . io . File IDENT_8 = new java . io . File ( IDENT_5 ) ; if ( IDENT_8 . exists ( ) ) { IDENT_7 = IDENT_4 . METHOD_6 ( IDENT_8 ) ; } else { System . err . println ( ( ( STRING_10 + ( IDENT_8 . toString ( ) ) ) + STRING_0 5 ) ) ; IDENT_7 = ( ( org . eclipse . IDENT_0 . IDENT_1 ) ( new org . eclipse . IDENT_0 . METHOD_7 ( ) . METHOD_8 ( null ) ) ) ; IDENT_7 . init ( ) ; IDENT_7 . start ( ) ; } } else { java . io . InputStream IDENT_9 = new java . io . ByteArrayInputStream ( IDENT_6 . toString ( ) . getBytes ( java . nio . IDENT_10 . IDENT_11 . METHOD_9 ( STRING_0 3 ) ) ) ; final java . util . Map < java . lang . String , java . lang . String > IDENT_12 = IDENT_4 . METHOD_10 ( IDENT_9 ) ; IDENT_9 = new java . io . ByteArrayInputStream ( IDENT_6 . toString ( ) . getBytes ( java . nio . IDENT_10 . IDENT_11 . METHOD_9 ( STRING_0 3 ) ) ) ; IDENT_7 = IDENT_4 . METHOD_11 ( IDENT_12 , IDENT_9 ) ; } return IDENT_7 ; }
org . junit . Assert . assertNotNull ( framework ) 