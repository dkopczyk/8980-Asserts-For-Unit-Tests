METHOD_0 ( ) { org . eclipse . IDENT_0 . test . util . IDENT_1 builder = org . eclipse . IDENT_0 . test . util . IDENT_1 . METHOD_1 ( ) ; builder . METHOD_2 ( STRING_0 ) . METHOD_3 ( STRING_1 , STRING_2 ) ; java . io . InputStream is = builder . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; is . close ( ) ; } METHOD_4 ( ) { final java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; final java . util . IDENT_2 . IDENT_3 IDENT_4 = new java . util . IDENT_2 . METHOD_5 ( ) ; for ( java . util . Iterator < Map . Entry < java . util . IDENT_2 . IDENT_5 . IDENT_6 , java . lang . String > > IDENT_7 = this . IDENT_8 . entrySet ( ) . iterator ( ) ; IDENT_7 . hasNext ( ) ; ) { final Map . Entry < java . util . IDENT_2 . IDENT_5 . IDENT_6 , java . lang . String > entry = IDENT_7 . next ( ) ; IDENT_4 . METHOD_6 ( ) . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } java . util . Set < java . lang . String > IDENT_9 = new java . util . HashSet < java . lang . String > ( ) ; java . util . IDENT_2 . IDENT_10 IDENT_11 = null ; try { IDENT_11 = new java . util . IDENT_2 . METHOD_7 ( out ) ; METHOD_8 ( IDENT_11 , IDENT_9 , STRING_3 ) ; java . util . IDENT_12 . IDENT_13 e = new java . util . IDENT_12 . METHOD_9 ( java . util . IDENT_2 . IDENT_14 . IDENT_15 ) ; IDENT_11 . METHOD_10 ( e ) ; IDENT_4 . write ( IDENT_11 ) ; IDENT_11 . METHOD_11 ( ) ; for ( java . util . Iterator < Map . Entry < java . lang . String , java . io . File > > IDENT_7 = this . IDENT_16 . entrySet ( ) . iterator ( ) ; IDENT_7 . hasNext ( ) ; ) { final Map . Entry < java . lang . String , java . io . File > entry = IDENT_7 . next ( ) ; final java . lang . String IDENT_17 = entry . getKey ( ) ; if ( IDENT_17 . contains ( "/" ) ) { METHOD_8 ( IDENT_11 , IDENT_9 , IDENT_17 . substring ( 0 , IDENT_17 . METHOD_12 ( "/" ) ) ) ; } final java . io . File f = entry . getValue ( ) ; final java . io . IDENT_18 IDENT_19 = new java . io . METHOD_13 ( f ) ; final java . util . IDENT_2 . IDENT_20 IDENT_21 = new java . util . IDENT_2 . METHOD_14 ( IDENT_17 ) ; IDENT_11 . METHOD_10 ( IDENT_21 ) ; org . eclipse . IDENT_0 . test . util . TestUtils . METHOD_15 ( IDENT_19 , IDENT_11 ) ; IDENT_11 . METHOD_11 ( ) ; IDENT_19 . close ( ) ; } for ( java . util . Iterator < Map . Entry < java . lang . String , java . lang . String > > IDENT_7 = this . content . entrySet ( ) . iterator ( ) ; IDENT_7 . hasNext ( ) ; ) { final Map . Entry < java . lang . String , java . lang . String > entry = IDENT_7 . next ( ) ; final java . lang . String IDENT_17 = entry . getKey ( ) ; if ( IDENT_17 . contains ( "/" ) ) { METHOD_8 ( IDENT_11 , IDENT_9 , IDENT_17 . substring ( 0 , IDENT_17 . METHOD_12 ( "/" ) ) ) ; } final java . lang . String s = entry . getValue ( ) ; final java . io . InputStream IDENT_22 = new java . io . ByteArrayInputStream ( s . getBytes ( java . nio . IDENT_23 . IDENT_24 . METHOD_16 ( STRING_4 ) ) ) ; final java . util . IDENT_2 . METHOD_14 IDENT_21 = new java . util . IDENT_2 . METHOD_14 ( IDENT_17 ) ; IDENT_11 . METHOD_10 ( IDENT_21 ) ; org . eclipse . IDENT_0 . test . util . TestUtils . METHOD_15 ( IDENT_22 , IDENT_11 ) ; IDENT_11 . METHOD_11 ( ) ; IDENT_22 . close ( ) ; } IDENT_11 . close ( ) ; final java . io . InputStream is = new java . io . ByteArrayInputStream ( out . toByteArray ( ) ) ; return is ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; return null ; } finally { if ( IDENT_11 != null ) { try { IDENT_11 . close ( ) ; } catch ( java . io . IOException e ) { } } } }
org . junit . Assert . assertNotNull ( is ) 