METHOD_0 ( ) { byte [ ] IDENT_0 = STRING_0 . getBytes ( STRING_1 ) ; byte [ ] IDENT_1 = STRING_0 . getBytes ( STRING_1 ) ; org . eclipse . IDENT_2 . core . IDENT_3 . dto . IDENT_4 data = new org . eclipse . IDENT_2 . core . IDENT_3 . dto . METHOD_1 ( repo , IDENT_5 , IDENT_5 , true ) ; org . eclipse . IDENT_2 . core . IDENT_3 . dto . IDENT_6 IDENT_7 = new org . eclipse . IDENT_2 . core . IDENT_3 . dto . METHOD_2 ( data ) ; org . eclipse . IDENT_2 . core . IDENT_3 . IDENT_8 IDENT_9 = new org . eclipse . IDENT_2 . core . IDENT_3 . METHOD_3 ( IDENT_7 ) ; org . eclipse . core . resources . IDENT_10 IDENT_11 = mock ( org . eclipse . core . resources . IDENT_10 . class ) ; when ( IDENT_11 . exists ( ) ) . thenReturn ( true ) ; when ( IDENT_11 . METHOD_4 ( ) ) . thenReturn ( project . METHOD_4 ( ) ) ; when ( IDENT_11 . METHOD_5 ( ) ) . thenReturn ( new java . io . ByteArrayInputStream ( IDENT_0 ) ) ; org . eclipse . core . resources . IDENT_12 storage = mock ( org . eclipse . core . resources . IDENT_12 . class ) ; when ( storage . METHOD_5 ( ) ) . thenReturn ( new java . io . ByteArrayInputStream ( IDENT_1 ) ) ; org . eclipse . IDENT_13 . core . IDENT_14 . IDENT_15 remote = mock ( org . eclipse . IDENT_13 . core . IDENT_14 . IDENT_15 . class ) ; when ( remote . METHOD_6 ( ) ) . thenReturn ( false ) ; when ( remote . METHOD_7 ( any ( org . eclipse . core . runtime . IDENT_16 . class ) ) ) . thenReturn ( storage ) ; "<AssertPlaceHolder>" ; } compare ( org . eclipse . jgit . lib . IDENT_17 , org . eclipse . jgit . lib . IDENT_17 ) { java . lang . String IDENT_18 = IDENT_19 . METHOD_8 ( ) . getName ( ) ; java . lang . String IDENT_20 = IDENT_21 . METHOD_8 ( ) . getName ( ) ; return IDENT_18 . METHOD_9 ( IDENT_20 ) ; }
org . junit . Assert . assertTrue ( IDENT_9 . compare ( IDENT_11 , remote ) ) 