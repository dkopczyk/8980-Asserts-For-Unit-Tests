METHOD_0 ( ) { java . util . List < org . eclipse . jgit . IDENT_0 . IDENT_1 > IDENT_2 = java . util . Arrays . asList ( IDENT_3 , IDENT_4 , IDENT_5 ) ; java . util . List < org . eclipse . jgit . IDENT_0 . IDENT_1 > IDENT_6 = org . eclipse . IDENT_7 . core . IDENT_8 . METHOD_0 ( IDENT_2 ) ; java . util . List < org . eclipse . jgit . IDENT_0 . IDENT_1 > IDENT_9 = java . util . Arrays . asList ( IDENT_4 , IDENT_3 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . util . Collection ) { java . util . Map < org . eclipse . jgit . IDENT_0 . IDENT_1 , org . eclipse . jgit . IDENT_0 . IDENT_1 > IDENT_10 = new java . util . HashMap ( ) ; org . eclipse . jgit . IDENT_0 . IDENT_1 IDENT_11 = null ; for ( org . eclipse . jgit . IDENT_0 . IDENT_1 commit : IDENT_2 ) { org . eclipse . jgit . IDENT_0 . IDENT_1 IDENT_12 = commit . METHOD_1 ( 0 ) ; IDENT_10 . put ( IDENT_12 , commit ) ; if ( ! ( IDENT_2 . contains ( IDENT_12 ) ) ) IDENT_11 = commit ; } java . util . List < org . eclipse . jgit . IDENT_0 . IDENT_1 > IDENT_6 = new java . util . ArrayList ( ) ; IDENT_6 . add ( IDENT_11 ) ; org . eclipse . jgit . IDENT_0 . IDENT_1 IDENT_12 = IDENT_11 ; for ( ; ; ) { org . eclipse . jgit . IDENT_0 . IDENT_1 IDENT_13 = IDENT_10 . get ( IDENT_12 ) ; if ( IDENT_13 == null ) break ; IDENT_6 . add ( IDENT_13 ) ; IDENT_12 = IDENT_13 ; } return IDENT_6 ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_6 ) 