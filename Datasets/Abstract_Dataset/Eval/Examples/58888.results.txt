METHOD_0 ( ) { org . eclipse . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = mock ( org . eclipse . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; org . eclipse . IDENT_4 . ui . internal . IDENT_5 . mapping . IDENT_6 IDENT_7 = new org . eclipse . IDENT_4 . ui . internal . IDENT_5 . mapping . METHOD_1 ( ) ; org . eclipse . IDENT_4 . ui . internal . IDENT_5 . model . IDENT_8 tree = mock ( org . eclipse . IDENT_4 . ui . internal . IDENT_5 . model . IDENT_8 . class ) ; org . eclipse . IDENT_4 . ui . internal . IDENT_5 . model . IDENT_9 cache = mock ( org . eclipse . IDENT_4 . ui . internal . IDENT_5 . model . IDENT_9 . class ) ; int actual = IDENT_7 . compare ( IDENT_3 , tree , cache ) ; "<AssertPlaceHolder>" ; } compare ( org . eclipse . compare . IDENT_10 , org . eclipse . compare . IDENT_10 , org . eclipse . compare . IDENT_10 ) { if ( IDENT_11 . getType ( ) . equals ( IDENT_10 . IDENT_12 ) ) { org . eclipse . compare . IDENT_13 . IDENT_14 IDENT_15 = new org . eclipse . compare . IDENT_13 . METHOD_2 ( null , org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_17 , IDENT_18 , IDENT_11 , IDENT_19 ) ; org . eclipse . compare . IDENT_10 [ ] IDENT_20 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_11 ) ) . METHOD_3 ( ) ) ) ; org . eclipse . compare . IDENT_10 [ ] IDENT_22 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_19 ) ) . METHOD_3 ( ) ) ) ; org . eclipse . compare . IDENT_10 [ ] ac = null ; if ( IDENT_18 != null ) ac = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_18 ) ) . METHOD_3 ( ) ) ) ; int IDENT_23 = 0 ; int IDENT_24 = 0 ; while ( ( IDENT_23 < ( IDENT_20 . length ) ) && ( IDENT_24 < ( IDENT_22 . length ) ) ) { org . eclipse . compare . IDENT_10 IDENT_25 = IDENT_20 [ IDENT_23 ] ; org . eclipse . compare . IDENT_10 IDENT_26 = IDENT_22 [ IDENT_24 ] ; org . eclipse . compare . IDENT_10 IDENT_27 = null ; if ( ac != null ) IDENT_27 = ac [ IDENT_24 ] ; int compareTo = IDENT_25 . getName ( ) . compareTo ( IDENT_26 . getName ( ) ) ; if ( compareTo == 0 ) { if ( ! ( IDENT_25 . equals ( IDENT_26 ) ) ) IDENT_15 . add ( compare ( IDENT_25 , IDENT_26 , IDENT_27 ) ) ; ++ IDENT_23 ; ++ IDENT_24 ; } else if ( compareTo < 0 ) { org . eclipse . compare . IDENT_13 . METHOD_2 IDENT_28 = new org . eclipse . compare . IDENT_13 . METHOD_2 ( org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_29 , IDENT_27 , IDENT_25 , null ) ; IDENT_15 . add ( IDENT_28 ) ; if ( IDENT_25 . getType ( ) . equals ( IDENT_10 . IDENT_12 ) ) { org . eclipse . compare . IDENT_10 [ ] IDENT_30 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_25 ) ) . METHOD_3 ( ) ) ) ; if ( ( IDENT_30 != null ) && ( ( IDENT_30 . length ) > 0 ) ) { for ( org . eclipse . compare . IDENT_10 child : IDENT_30 ) { IDENT_28 . add ( METHOD_4 ( child , IDENT_16 . IDENT_29 ) ) ; } } } ++ IDENT_23 ; } else { org . eclipse . compare . IDENT_13 . METHOD_2 IDENT_28 = new org . eclipse . compare . IDENT_13 . METHOD_2 ( org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_31 , IDENT_27 , null , IDENT_26 ) ; IDENT_15 . add ( IDENT_28 ) ; if ( IDENT_26 . getType ( ) . equals ( IDENT_10 . IDENT_12 ) ) { org . eclipse . compare . IDENT_10 [ ] IDENT_30 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_26 ) ) . METHOD_3 ( ) ) ) ; if ( ( IDENT_30 != null ) && ( ( IDENT_30 . length ) > 0 ) ) { for ( org . eclipse . compare . IDENT_10 child : IDENT_30 ) { IDENT_28 . add ( METHOD_4 ( child , IDENT_16 . IDENT_31 ) ) ; } } } ++ IDENT_24 ; } } while ( IDENT_23 < ( IDENT_20 . length ) ) { org . eclipse . compare . IDENT_10 IDENT_25 = IDENT_20 [ IDENT_23 ] ; org . eclipse . compare . IDENT_10 IDENT_27 = null ; if ( ac != null ) IDENT_27 = ac [ IDENT_23 ] ; org . eclipse . compare . IDENT_13 . METHOD_2 IDENT_28 = new org . eclipse . compare . IDENT_13 . METHOD_2 ( org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_29 , IDENT_27 , IDENT_25 , null ) ; IDENT_15 . add ( IDENT_28 ) ; if ( IDENT_25 . getType ( ) . equals ( IDENT_10 . IDENT_12 ) ) { org . eclipse . compare . IDENT_10 [ ] IDENT_30 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_25 ) ) . METHOD_3 ( ) ) ) ; if ( ( IDENT_30 != null ) && ( ( IDENT_30 . length ) > 0 ) ) { for ( org . eclipse . compare . IDENT_10 child : IDENT_30 ) { IDENT_28 . add ( METHOD_4 ( child , IDENT_16 . IDENT_29 ) ) ; } } } ++ IDENT_23 ; } while ( IDENT_24 < ( IDENT_22 . length ) ) { org . eclipse . compare . IDENT_10 IDENT_26 = IDENT_22 [ IDENT_24 ] ; org . eclipse . compare . IDENT_10 IDENT_27 = null ; if ( ac != null ) IDENT_27 = ac [ IDENT_24 ] ; org . eclipse . compare . IDENT_13 . METHOD_2 IDENT_28 = new org . eclipse . compare . IDENT_13 . METHOD_2 ( org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_31 , IDENT_27 , null , IDENT_26 ) ; IDENT_15 . add ( IDENT_28 ) ; if ( IDENT_26 . getType ( ) . equals ( IDENT_10 . IDENT_12 ) ) { org . eclipse . compare . IDENT_10 [ ] IDENT_30 = ( ( org . eclipse . compare . IDENT_10 [ ] ) ( ( ( org . eclipse . compare . IDENT_13 . IDENT_21 ) ( IDENT_26 ) ) . METHOD_3 ( ) ) ) ; if ( ( IDENT_30 != null ) && ( ( IDENT_30 . length ) > 0 ) ) { for ( org . eclipse . compare . IDENT_10 child : IDENT_30 ) { IDENT_28 . add ( METHOD_4 ( child , IDENT_16 . IDENT_31 ) ) ; } } } ++ IDENT_24 ; } return IDENT_15 ; } else { if ( IDENT_18 != null ) return new org . eclipse . compare . IDENT_13 . METHOD_2 ( org . eclipse . compare . IDENT_13 . IDENT_16 . IDENT_32 , IDENT_18 , IDENT_11 , IDENT_19 ) ; else return new org . eclipse . compare . IDENT_13 . METHOD_2 ( IDENT_11 , IDENT_19 ) ; } }
org . junit . Assert . assertTrue ( ( actual > 0 ) ) 