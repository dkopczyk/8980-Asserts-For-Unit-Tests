METHOD_0 ( ) { final org . apache . IDENT_0 . IDENT_1 . message . Message msg = METHOD_1 ( "" , STRING_0 ) ; org . eclipse . IDENT_2 . util . IDENT_3 . METHOD_2 ( msg , INT_0 ) ; final java . util . concurrent . atomic . IDENT_4 IDENT_5 = new java . util . concurrent . atomic . METHOD_3 ( false ) ; final java . util . function . IDENT_6 < org . apache . IDENT_0 . IDENT_1 . message . Message > IDENT_7 = org . eclipse . IDENT_2 . util . IDENT_8 . METHOD_4 ( ( message ) -> IDENT_5 . set ( true ) , ( n ) -> { } ) ; IDENT_7 . accept ( msg ) ; "<AssertPlaceHolder>" ; } accept ( int ) { if ( IDENT_9 < 0 ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } org . eclipse . IDENT_2 . client . IDENT_10 . LOG . trace ( STRING_2 , METHOD_5 ( ) ) ; io . vertx . IDENT_1 . IDENT_11 . METHOD_6 ( IDENT_12 , true ) ; IDENT_13 . log ( STRING_3 ) ; if ( IDENT_9 > 0 ) { flow ( IDENT_9 ) ; } IDENT_13 . METHOD_7 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_5 . get ( ) ) 