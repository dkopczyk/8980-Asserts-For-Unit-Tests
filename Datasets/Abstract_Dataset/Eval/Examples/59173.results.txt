METHOD_0 ( ) { final byte [ ] IDENT_0 = new byte [ ] { INT_0 , INT_1 , INT_2 , INT_3 , INT_1 , INT_4 } ; final char [ ] IDENT_1 = new char [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_0 , STRING_4 , STRING_0 , STRING_5 , STRING_2 , STRING_3 , STRING_2 , STRING_6 } ; "<AssertPlaceHolder>" ; } METHOD_1 ( char [ ] ) { if ( ( ( input . length ) OP_0 2 ) != 0 ) { throw new org . eclipse . IDENT_2 . util . METHOD_2 ( STRING_7 ) ; } final byte [ ] IDENT_3 = new byte [ ( input . length ) / 2 ] ; for ( int i = 0 , j = 0 ; i < ( input . length ) ; i += 2 , j ++ ) { final int IDENT_4 = org . eclipse . IDENT_2 . util . IDENT_5 . METHOD_3 ( input [ i ] ) ; final int IDENT_6 = org . eclipse . IDENT_2 . util . IDENT_5 . METHOD_3 ( input [ ( i + 1 ) ] ) ; IDENT_3 [ j ] = ( ( byte ) ( ( IDENT_4 << 4 ) | IDENT_6 ) ) ; } return IDENT_3 ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , org . eclipse . IDENT_2 . util . IDENT_5 . METHOD_1 ( IDENT_1 ) ) 