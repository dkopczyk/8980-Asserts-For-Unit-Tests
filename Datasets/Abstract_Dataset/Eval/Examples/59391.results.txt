METHOD_0 ( ) { org . eclipse . jgit . internal . storage . IDENT_0 . IDENT_1 IDENT_2 = METHOD_1 ( org . eclipse . jgit . internal . storage . IDENT_0 . IDENT_3 , org . eclipse . jgit . internal . storage . IDENT_0 . IDENT_4 , org . eclipse . jgit . internal . storage . IDENT_0 . IDENT_5 ) ; int [ ] [ ] IDENT_6 = new int [ ] [ ] { new int [ ] { 0 , 100 } , new int [ ] { 100 , 100 } , new int [ ] { INT_0 , 100 } , new int [ ] { INT_1 , 100 } , new int [ ] { INT_2 , 100 } , new int [ ] { INT_3 , INT_4 } , new int [ ] { INT_5 , 200 } , new int [ ] { INT_6 , INT_7 } , new int [ ] { INT_8 , INT_9 } , new int [ ] { INT_10 , INT_11 } , new int [ ] { INT_12 , INT_11 } , new int [ ] { INT_13 , INT_11 } } ; for ( int [ ] IDENT_7 : IDENT_6 ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( int ) { if ( IDENT_8 < 0 ) { throw new java . lang . IllegalArgumentException ( ) ; } if ( IDENT_8 <= ( IDENT_9 ) ) { return IDENT_10 ; } int next = java . lang . Math . min ( ( IDENT_8 - ( IDENT_9 ) ) , IDENT_11 ) ; return java . lang . Math . max ( next , IDENT_10 ) ; }
org . junit . Assert . assertEquals ( IDENT_7 [ 1 ] , IDENT_2 . METHOD_2 ( IDENT_7 [ 0 ] ) ) 