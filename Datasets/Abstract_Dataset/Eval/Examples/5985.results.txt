METHOD_0 ( ) { long IDENT_0 = INT_0 ; IDENT_1 . METHOD_1 ( ( IDENT_0 / 2 ) ) ; IDENT_1 . METHOD_2 ( IDENT_0 ) ; conn = IDENT_1 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; javax . jms . IDENT_2 IDENT_3 = conn . METHOD_4 ( false , IDENT_2 . IDENT_4 ) ; java . lang . Thread . sleep ( INT_0 ) ; java . lang . String IDENT_5 = STRING_0 ; javax . jms . IDENT_6 queue = org . apache . activemq . artemis . api . jms . IDENT_7 . METHOD_5 ( IDENT_5 ) ; super . METHOD_5 ( IDENT_5 ) ; IDENT_3 . METHOD_6 ( queue ) ; IDENT_3 . METHOD_7 ( queue ) ; IDENT_3 . METHOD_8 ( queue ) ; org . apache . activemq . artemis . core . client . impl . IDENT_8 IDENT_9 = ( ( org . apache . activemq . artemis . core . client . impl . IDENT_8 ) ( ( ( org . apache . activemq . artemis . jms . client . IDENT_10 ) ( IDENT_3 ) ) . METHOD_9 ( ) ) ) ; org . apache . activemq . artemis . spi . core . protocol . IDENT_11 IDENT_12 = IDENT_9 . METHOD_10 ( ) ; IDENT_12 . fail ( new org . apache . activemq . artemis . api . core . METHOD_11 ( ) ) ; conn . close ( ) ; long start = java . lang . System . currentTimeMillis ( ) ; while ( true ) { int IDENT_13 = server . METHOD_12 ( ) . METHOD_13 ( ) . size ( ) ; if ( IDENT_13 == 0 ) { break ; } long now = java . lang . System . currentTimeMillis ( ) ; if ( ( now - start ) > INT_1 ) { throw new java . lang . Exception ( STRING_1 ) ; } java . lang . Thread . sleep ( 50 ) ; } } METHOD_12 ( ) { return IDENT_14 ; }
org . junit . Assert . assertEquals ( 1 , server . METHOD_12 ( ) . METHOD_13 ( ) . size ( ) ) 