METHOD_0 ( ) { byte [ ] result = org . eclipse . IDENT_0 . core . net . util . IDENT_1 . METHOD_1 ( STRING_0 ) ; byte [ ] expected = new byte [ ] { INT_0 , 1 , INT_1 , ( ( byte ) ( INT_2 ) ) , ( ( byte ) ( INT_3 ) ) , ( ( byte ) ( INT_4 ) ) , 0 , 0 , 0 , 0 , ( ( byte ) ( INT_5 ) ) , INT_6 , 3 , INT_7 , INT_8 , INT_9 } ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( IDENT_2 == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } byte [ ] IDENT_3 = new byte [ 16 ] ; java . lang . String [ ] IDENT_4 = IDENT_2 . split ( STRING_2 ) ; if ( ( IDENT_4 . length ) != 8 ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + IDENT_2 ) ) ; } for ( int i = 0 ; i < 8 ; i ++ ) { try { java . lang . String IDENT_5 = IDENT_4 [ i ] ; int value = java . lang . Integer . METHOD_2 ( IDENT_5 , 16 ) ; if ( ( value < 0 ) || ( value > INT_10 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + IDENT_2 ) ) ; } int k = i * 2 ; IDENT_3 [ k ] = ( ( byte ) ( ( value > > > 8 ) & 255 ) ) ; IDENT_3 [ ( k + 1 ) ] = ( ( byte ) ( value & 255 ) ) ; } catch ( java . lang . IDENT_6 e ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + IDENT_2 ) , e ) ; } } return IDENT_3 ; }
org . junit . Assert . assertArrayEquals ( expected , result ) 