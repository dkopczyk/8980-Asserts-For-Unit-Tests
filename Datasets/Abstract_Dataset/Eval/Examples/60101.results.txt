METHOD_0 ( ) { org . eclipse . IDENT_0 . services . IDENT_1 IDENT_2 = METHOD_1 ( org . eclipse . IDENT_0 . services . IDENT_1 . class , new org . eclipse . IDENT_0 . test . services . METHOD_2 ( ) { @ org . eclipse . IDENT_0 . test . services . Override public java . util . concurrent . IDENT_3 < java . util . List < org . eclipse . IDENT_0 . IDENT_4 > > METHOD_3 ( org . eclipse . IDENT_0 . IDENT_5 params ) { return org . eclipse . IDENT_0 . IDENT_6 . IDENT_7 . METHOD_4 ( ( IDENT_8 ) -> { return new org . eclipse . IDENT_0 . test . services . ArrayList < > ( ) ; } ) ; } } ) ; java . util . concurrent . IDENT_3 < java . util . List < org . eclipse . IDENT_0 . IDENT_4 > > future = IDENT_2 . METHOD_5 ( ) . METHOD_3 ( new org . eclipse . IDENT_0 . METHOD_6 ( new org . eclipse . IDENT_0 . METHOD_7 ( "test" ) ) ) ; java . util . List < org . eclipse . IDENT_0 . IDENT_4 > list = future . get ( org . eclipse . IDENT_0 . test . services . IDENT_9 . IDENT_10 , TimeUnit . IDENT_11 ) ; "<AssertPlaceHolder>" ; } get ( long , java . util . concurrent . TimeUnit ) { return ( ( java . lang . IDENT_12 ) ( result . get ( IDENT_13 , unit ) ) ) ; }
org . junit . Assert . assertTrue ( list . isEmpty ( ) ) 