METHOD_0 ( ) { final java . lang . String payload = ( ( ( ( STRING_0 + ( 20 + ( ( java . lang . Math . METHOD_1 ( ( ( ( java . lang . Math . random ( ) ) * 10 ) + 1 ) ) ) / 10 ) ) ) + STRING_1 ) + STRING_2 ) + ( INT_0 + ( java . lang . Math . METHOD_1 ( ( ( ( java . lang . Math . random ( ) ) * 10 ) + 1 ) ) ) ) ) + STRING_3 ; final byte [ ] IDENT_0 = IDENT_1 . IDENT_2 . IDENT_3 . ui . utils . IDENT_4 . METHOD_2 ( payload ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( byte [ ] ) { java . io . InputStream in = new java . util . IDENT_5 . METHOD_4 ( new java . io . ByteArrayInputStream ( bytes ) ) ; java . io . ByteArrayOutputStream IDENT_6 = new java . io . ByteArrayOutputStream ( ) ; try { java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_5 ( INT_1 ) ; int len ; while ( ( len = in . read ( buffer . array ( ) ) ) > 0 ) IDENT_6 . write ( buffer . array ( ) , 0 , len ) ; return new java . lang . String ( IDENT_6 . toByteArray ( ) , STRING_4 ) ; } catch ( java . io . IOException e ) { throw new java . lang . METHOD_6 ( e ) ; } }
org . junit . Assert . assertEquals ( payload , IDENT_1 . IDENT_2 . IDENT_3 . ui . utils . IDENT_4 . METHOD_3 ( IDENT_0 ) ) 