METHOD_0 ( ) { final int IDENT_0 = 5 ; org . apache . activemq . transport . IDENT_1 . client . IDENT_2 client = METHOD_1 ( ) ; org . apache . activemq . transport . IDENT_1 . client . IDENT_3 connection = METHOD_2 ( client . connect ( ) ) ; org . apache . activemq . transport . IDENT_1 . client . IDENT_4 IDENT_5 = connection . METHOD_3 ( ) ; org . apache . activemq . transport . IDENT_1 . client . IDENT_4 session = connection . METHOD_3 ( ) ; org . apache . activemq . transport . IDENT_1 . client . IDENT_6 IDENT_7 = session . METHOD_4 ( ( STRING_0 + ( METHOD_5 ( ) ) ) ) ; IDENT_5 . METHOD_6 ( ) ; for ( int i = 0 ; i < IDENT_0 ; ++ i ) { org . apache . activemq . transport . IDENT_1 . client . IDENT_8 message = new org . apache . activemq . transport . IDENT_1 . client . METHOD_7 ( ) ; message . METHOD_8 ( STRING_1 ) ; IDENT_7 . METHOD_9 ( message , IDENT_5 . METHOD_10 ( ) ) ; } IDENT_5 . commit ( ) ; IDENT_5 . METHOD_6 ( ) ; for ( int i = 0 ; i < IDENT_0 ; ++ i ) { org . apache . activemq . transport . IDENT_1 . client . METHOD_7 message = new org . apache . activemq . transport . IDENT_1 . client . METHOD_7 ( ) ; message . METHOD_8 ( STRING_1 ) ; IDENT_7 . METHOD_9 ( message , IDENT_5 . METHOD_10 ( ) ) ; } IDENT_5 . METHOD_11 ( ) ; IDENT_5 . METHOD_6 ( ) ; for ( int i = 0 ; i < IDENT_0 ; ++ i ) { org . apache . activemq . transport . IDENT_1 . client . METHOD_7 message = new org . apache . activemq . transport . IDENT_1 . client . METHOD_7 ( ) ; message . METHOD_8 ( STRING_1 ) ; IDENT_7 . METHOD_9 ( message , IDENT_5 . METHOD_10 ( ) ) ; } IDENT_5 . commit ( ) ; org . apache . activemq . transport . IDENT_1 . client . IDENT_9 IDENT_10 = session . METHOD_12 ( ( STRING_0 + ( METHOD_5 ( ) ) ) ) ; IDENT_10 . flow ( ( IDENT_0 * 2 ) ) ; for ( int i = 0 ; i < ( IDENT_0 * 2 ) ; ++ i ) { org . apache . activemq . transport . IDENT_1 . client . METHOD_7 message = IDENT_10 . METHOD_13 ( 5 , TimeUnit . IDENT_11 ) ; "<AssertPlaceHolder>" ; message . accept ( IDENT_5 ) ; } connection . close ( ) ; } METHOD_13 ( int , int ) { javax . jms . Message msg = null ; for ( ; IDENT_12 > 0 ; IDENT_12 OP_0 ) { do { msg = consumer . METHOD_13 ( ( 1 * 1000 ) ) ; } while ( ( msg == null ) && ( ( OP_0 IDENT_13 ) > 0 ) ) ; if ( IDENT_12 > 1 ) { msg . METHOD_14 ( ) ; } if ( msg != null ) { org . apache . activemq . IDENT_14 . IDENT_15 . LOG . debug ( ( STRING_2 + ( msg . METHOD_15 ( ) ) ) ) ; } } return msg ; }
org . junit . Assert . assertNotNull ( message ) 