METHOD_0 ( ) { java . lang . String expected = "a" ; org . osgi . framework . IDENT_0 IDENT_1 = METHOD_1 ( ) ; org . osgi . framework . IDENT_2 IDENT_3 = IDENT_1 . METHOD_2 ( ) ; org . osgi . service . http . context . IDENT_4 IDENT_5 = new org . osgi . service . http . context . METHOD_3 ( IDENT_3 ) { } ; javax . servlet . IDENT_6 IDENT_7 = new org . eclipse . IDENT_8 . http . servlet . tests . util . METHOD_4 ( "a" ) ; java . util . Collection < org . osgi . framework . IDENT_9 < ? > > IDENT_10 = new java . util . ArrayList < org . osgi . framework . IDENT_9 < ? > > ( ) ; try { java . util . IDENT_11 < java . lang . String , java . lang . String > IDENT_12 = new java . util . IDENT_13 < java . lang . String , java . lang . String > ( ) ; IDENT_12 . put ( IDENT_14 . IDENT_15 , "a" ) ; IDENT_12 . put ( IDENT_14 . IDENT_16 , "/" ) ; IDENT_10 . add ( IDENT_1 . METHOD_5 ( org . osgi . service . http . context . METHOD_3 . class , IDENT_5 , IDENT_12 ) ) ; java . util . IDENT_11 < java . lang . String , java . lang . String > IDENT_17 = new java . util . IDENT_13 < java . lang . String , java . lang . String > ( ) ; IDENT_17 . put ( IDENT_14 . IDENT_18 , STRING_0 ) ; IDENT_17 . put ( IDENT_14 . IDENT_19 , STRING_1 ) ; IDENT_17 . put ( IDENT_14 . IDENT_20 , ( ( STRING_2 + ( org . osgi . service . http . IDENT_21 . IDENT_14 . IDENT_15 ) ) + STRING_3 ) ) ; IDENT_10 . add ( IDENT_1 . METHOD_5 ( javax . servlet . IDENT_6 . class , IDENT_7 , IDENT_17 ) ) ; java . lang . String actual = IDENT_22 . request ( STRING_4 ) ; "<AssertPlaceHolder>" ; } finally { for ( org . osgi . framework . IDENT_9 < ? > IDENT_23 : IDENT_10 ) { IDENT_23 . METHOD_6 ( ) ; } } } request ( java . lang . String ) { java . lang . String spec = METHOD_7 ( value ) ; log ( ( STRING_5 + spec ) ) ; java . net . URL url = new java . net . URL ( spec ) ; java . net . IDENT_24 connection = ( ( java . net . IDENT_24 ) ( url . METHOD_8 ( ) ) ) ; connection . METHOD_9 ( false ) ; connection . METHOD_10 ( ( INT_0 * INT_1 ) ) ; connection . METHOD_11 ( ( INT_0 * INT_1 ) ) ; connection . connect ( ) ; java . io . InputStream stream = connection . METHOD_12 ( ) ; try { return METHOD_13 ( stream ) ; } finally { stream . close ( ) ; } }
org . junit . Assert . assertEquals ( expected , actual ) 