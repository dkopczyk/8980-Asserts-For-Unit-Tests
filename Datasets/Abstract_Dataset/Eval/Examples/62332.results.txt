METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . util . Locale ) { if ( ( IDENT_0 == null ) || ( IDENT_0 . isEmpty ( ) ) ) { return java . util . Collections . METHOD_2 ( ) ; } else { java . util . Set < java . lang . String > IDENT_1 = java . util . Arrays . stream ( IDENT_0 . split ( STRING_0 ) ) . filter ( ( n ) -> ! ( IDENT_2 . METHOD_3 ( n ) ) ) . map ( ( n ) -> n . trim ( ) ) . collect ( java . util . stream . IDENT_3 . METHOD_4 ( ) ) ; java . lang . String IDENT_4 = IDENT_1 . stream ( ) . collect ( java . util . stream . IDENT_3 . METHOD_5 ( STRING_1 ) ) ; java . util . regex . IDENT_5 pattern = java . util . regex . IDENT_5 . METHOD_6 ( ( ( ( ( org . eclipse . IDENT_6 . io . rest . core . internal . item . IDENT_7 . IDENT_8 ) + STRING_2 ) + IDENT_4 ) + STRING_3 ) ) ; java . util . Collection < org . eclipse . IDENT_6 . config . core . IDENT_9 > IDENT_10 = IDENT_11 . METHOD_7 ( IDENT_12 ) ; java . util . Set < java . lang . String > IDENT_13 = IDENT_10 . stream ( ) . filter ( ( IDENT_14 ) -> IDENT_14 . METHOD_8 ( ) . METHOD_9 ( ) . equals ( org . eclipse . IDENT_6 . io . rest . core . internal . item . IDENT_7 . IDENT_15 ) ) . map ( ( IDENT_14 ) -> IDENT_14 . METHOD_8 ( ) . toString ( ) ) . filter ( pattern . METHOD_10 ( ) ) . map ( ( uri ) -> uri . substring ( org . eclipse . IDENT_6 . io . rest . core . internal . item . IDENT_7 . IDENT_8 . length ( ) ) ) . collect ( METHOD_4 ( ) ) ; java . util . Set < java . lang . String > result = new java . util . HashSet ( IDENT_1 ) ; result . addAll ( IDENT_13 ) ; return result . stream ( ) . filter ( ( IDENT_16 ) -> IDENT_16 . matches ( IDENT_17 . IDENT_18 ) ) . collect ( METHOD_4 ( ) ) ; } }
org . junit . Assert . assertThat ( matcher . METHOD_1 ( null , null ) , org . hamcrest . CoreMatchers . is ( java . util . Collections . METHOD_2 ( ) ) ) 