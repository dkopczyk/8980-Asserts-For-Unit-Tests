METHOD_0 ( ) { javax . jms . IDENT_0 IDENT_1 = new org . apache . activemq . METHOD_1 ( IDENT_2 ) ; javax . jms . IDENT_3 connection = IDENT_1 . METHOD_2 ( ) ; connection . start ( ) ; METHOD_3 ( IDENT_4 , IDENT_5 , connection ) ; { java . util . concurrent . atomic . IDENT_6 IDENT_7 = new java . util . concurrent . atomic . METHOD_4 ( ) ; java . util . Map < java . lang . String , java . lang . Boolean > IDENT_8 = new java . util . concurrent . IDENT_9 < java . lang . String , java . lang . Boolean > ( ) ; javax . jms . IDENT_10 session = connection . METHOD_5 ( true , IDENT_10 . IDENT_11 ) ; javax . jms . IDENT_12 IDENT_13 = session . METHOD_6 ( IDENT_5 ) ; javax . jms . IDENT_14 consumer = session . METHOD_7 ( IDENT_13 ) ; while ( ( IDENT_7 . get ( ) ) < ( IDENT_4 ) ) { javax . jms . IDENT_15 msg = ( ( javax . jms . IDENT_15 ) ( consumer . METHOD_8 ( INT_0 ) ) ) ; if ( msg != null ) { if ( ( msg != null ) && ( ( IDENT_8 . put ( msg . getText ( ) , Boolean . IDENT_16 ) ) != null ) ) { org . apache . activemq . IDENT_17 . LOG . info ( ( ( ( ( ( STRING_0 + ( msg . getText ( ) ) ) + STRING_1 ) + ( IDENT_7 . METHOD_9 ( ) ) ) + STRING_2 ) + ( msg . METHOD_10 ( ) ) ) ) ; "<AssertPlaceHolder>" ; session . commit ( ) ; } else { org . apache . activemq . IDENT_17 . LOG . info ( ( ( ( STRING_3 + ( msg . getText ( ) ) ) + STRING_4 ) + ( msg . METHOD_10 ( ) ) ) ) ; session . METHOD_11 ( ) ; } } } consumer . close ( ) ; session . close ( ) ; } } METHOD_12 ( ) { return IDENT_18 ; }
org . junit . Assert . assertTrue ( msg . METHOD_12 ( ) ) 