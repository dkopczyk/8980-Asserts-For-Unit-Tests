METHOD_0 ( ) { final org . apache . activemq . command . IDENT_0 IDENT_1 = new org . apache . activemq . command . METHOD_1 ( STRING_0 ) ; final javax . jms . IDENT_2 IDENT_3 = IDENT_4 . METHOD_2 ( ) ; IDENT_3 . METHOD_3 ( STRING_1 ) ; IDENT_3 . start ( ) ; final javax . jms . IDENT_5 IDENT_6 = IDENT_3 . METHOD_4 ( false , IDENT_7 . IDENT_8 ) ; final javax . jms . IDENT_9 IDENT_10 = IDENT_6 . METHOD_5 ( IDENT_1 , STRING_2 ) ; IDENT_10 . close ( ) ; IDENT_6 . close ( ) ; IDENT_3 . close ( ) ; final javax . jms . IDENT_2 IDENT_11 = IDENT_4 . METHOD_2 ( ) ; IDENT_11 . start ( ) ; final javax . jms . IDENT_5 IDENT_12 = IDENT_11 . METHOD_4 ( false , IDENT_7 . IDENT_13 ) ; final javax . jms . IDENT_14 IDENT_15 = IDENT_12 . METHOD_6 ( IDENT_1 ) ; for ( int i = 1 ; i <= ( org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_18 ) ; i ++ ) { final javax . jms . Message msg = IDENT_12 . METHOD_7 ( ( STRING_3 + i ) ) ; IDENT_15 . METHOD_8 ( msg ) ; } IDENT_15 . close ( ) ; IDENT_12 . close ( ) ; IDENT_11 . close ( ) ; final javax . jms . IDENT_2 connection = IDENT_4 . METHOD_2 ( ) ; connection . METHOD_3 ( STRING_1 ) ; connection . start ( ) ; final org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_19 pool = new org . apache . activemq . IDENT_16 . IDENT_17 . METHOD_9 ( connection ) ; final javax . jms . IDENT_20 IDENT_21 = connection . METHOD_10 ( IDENT_1 , STRING_2 , null , pool , 1 ) ; while ( true ) { int IDENT_22 = 0 ; int IDENT_23 = 0 ; do { IDENT_22 = IDENT_23 ; java . lang . Thread . sleep ( INT_0 ) ; MOD_0 ( IDENT_24 ) { IDENT_23 = IDENT_24 . size ( ) ; } } while ( IDENT_22 < IDENT_23 ) ; if ( IDENT_22 == 0 ) { break ; } final java . util . IDENT_25 < org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_26 > IDENT_27 ; MOD_0 ( IDENT_24 ) { IDENT_27 = new java . util . IDENT_25 < org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_26 > ( IDENT_24 ) ; IDENT_24 . METHOD_11 ( ) ; } final java . util . Iterator < org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_26 > IDENT_28 = IDENT_27 . iterator ( ) ; while ( IDENT_28 . hasNext ( ) ) { final org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_26 session = IDENT_28 . next ( ) ; IDENT_29 . add ( session ) ; session . METHOD_12 ( ) . commit ( ) ; session . METHOD_12 ( ) . close ( ) ; } } IDENT_21 . close ( ) ; final javax . jms . IDENT_5 IDENT_30 = connection . METHOD_4 ( false , IDENT_7 . IDENT_13 ) ; IDENT_30 . METHOD_13 ( STRING_2 ) ; IDENT_30 . close ( ) ; connection . close ( ) ; "<AssertPlaceHolder>" ; } size ( ) { return map . size ( ) ; }
org . junit . Assert . assertEquals ( org . apache . activemq . IDENT_16 . IDENT_17 . IDENT_18 , IDENT_29 . size ( ) ) 