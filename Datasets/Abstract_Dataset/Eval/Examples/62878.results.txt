METHOD_0 ( ) { com . eclipsesource . IDENT_0 . IDENT_1 . internal . IDENT_2 IDENT_3 = new com . eclipsesource . IDENT_0 . IDENT_1 . internal . METHOD_1 ( METHOD_2 ( new com . eclipsesource . IDENT_0 . IDENT_1 . METHOD_3 ( 0 , 0 , 100 , 100 ) ) ) ; com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 = com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_4 ( 5 ) ; com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_7 rule = com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . when ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_5 ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_6 ( INT_0 ) ) ) . METHOD_7 ( IDENT_5 ) ; java . util . List < com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_7 > rules = new java . util . ArrayList < com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_7 > ( ) ; rules . add ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . when ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_5 ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_6 ( INT_1 ) ) ) . METHOD_7 ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_4 ( 10 ) ) ) ; rules . add ( rule ) ; java . util . List < com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_4 > IDENT_8 = IDENT_3 . METHOD_8 ( rules ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String ) { METHOD_9 ( IDENT_9 ) . METHOD_10 ( STRING_0 ) ; when ( IDENT_9 . isEmpty ( ) ) . METHOD_10 ( STRING_1 ) ; org . eclipse . rap . json . IDENT_10 IDENT_11 = data . get ( IDENT_9 ) ; if ( IDENT_11 != null ) { return IDENT_11 . METHOD_11 ( ) ; } return null ; }
org . junit . Assert . assertSame ( IDENT_5 , IDENT_8 . get ( 0 ) ) 