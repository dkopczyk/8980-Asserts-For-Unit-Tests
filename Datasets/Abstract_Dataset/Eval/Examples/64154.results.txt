METHOD_0 ( ) { System . out . println ( STRING_0 ) ; IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = IDENT_0 . IDENT_4 . METHOD_1 ( INT_0 , IDENT_0 . utils . random . IDENT_5 . METHOD_2 ( ) ) ; IDENT_0 . IDENT_1 . IDENT_2 IDENT_6 = IDENT_0 . IDENT_4 . METHOD_1 ( 200 , IDENT_0 . utils . random . IDENT_5 . METHOD_2 ( ) ) ; for ( IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 : IDENT_9 . IDENT_10 . values ( ) ) for ( IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_12 IDENT_13 : java . util . IDENT_14 . METHOD_3 ( java . util . IDENT_14 . of ( IDENT_9 . IDENT_12 . IDENT_15 ) ) ) { IDENT_0 . IDENT_7 . IDENT_8 . IDENT_9 net = new IDENT_0 . IDENT_7 . IDENT_8 . METHOD_4 ( INT_1 ) ; net . METHOD_5 ( 1 ) ; net . METHOD_6 ( IDENT_11 ) ; net . METHOD_7 ( IDENT_13 ) ; net = net . METHOD_8 ( ) ; net . METHOD_9 ( IDENT_3 ) ; net = net . METHOD_8 ( ) ; double errors = 0 ; for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i ++ ) errors += java . lang . Math . METHOD_10 ( ( ( IDENT_6 . METHOD_11 ( i ) ) - ( net . METHOD_12 ( IDENT_6 . METHOD_13 ( i ) ) ) ) , 2 ) ; "<AssertPlaceHolder>" ; } } size ( ) { return IDENT_16 . size ( ) ; }
org . junit . Assert . assertTrue ( ( ( errors / ( IDENT_6 . size ( ) ) ) < 1 ) ) 