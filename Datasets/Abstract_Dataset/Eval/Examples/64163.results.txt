METHOD_0 ( ) { System . out . println ( STRING_0 ) ; for ( boolean IDENT_0 : new boolean [ ] { true , false } ) { IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 instance = new IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; for ( int IDENT_5 = 0 ; IDENT_5 < ( IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 ) ; IDENT_5 ++ ) { IDENT_1 . IDENT_2 . IDENT_8 IDENT_9 = IDENT_1 . IDENT_10 . METHOD_2 ( 1000 , 1.0 , FLOAT_0 , FLOAT_1 ) ; IDENT_1 . IDENT_2 . IDENT_8 test = IDENT_1 . IDENT_10 . METHOD_2 ( 100 , 0.0 , IDENT_1 . utils . random . IDENT_11 . METHOD_3 ( ) , 1.0 , FLOAT_0 , FLOAT_1 ) ; IDENT_1 . IDENT_2 . IDENT_12 IDENT_13 = new IDENT_1 . IDENT_2 . METHOD_4 ( instance , IDENT_9 , true ) ; if ( IDENT_0 ) IDENT_13 . METHOD_5 ( new IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 ( new IDENT_1 . IDENT_2 . IDENT_3 . METHOD_7 ( ) ) ) ; IDENT_13 . METHOD_8 ( test ) ; if ( ( ( IDENT_13 . METHOD_9 ( ) ) > FLOAT_2 ) && ( IDENT_5 == ( IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 ) ) ) "<AssertPlaceHolder>" ; else break ; } } } METHOD_9 ( ) { return 1.0 - ( ( METHOD_10 ( ) ) / ( IDENT_14 ) ) ; }
org . junit . Assert . assertEquals ( IDENT_13 . METHOD_9 ( ) , 0.0 , FLOAT_2 ) 