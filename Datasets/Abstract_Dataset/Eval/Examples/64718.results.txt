METHOD_0 ( ) { org . IDENT_0 . impl . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_0 . impl . IDENT_1 . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( "test" ) ; java . sql . IDENT_4 IDENT_5 = mock ( java . sql . IDENT_4 . class ) ; when ( IDENT_5 . METHOD_3 ( startsWith ( STRING_0 ) ) ) . thenReturn ( org . IDENT_0 . impl . IDENT_1 . IDENT_6 . IDENT_7 ) . thenReturn ( org . IDENT_0 . impl . IDENT_1 . IDENT_6 . IDENT_8 ) . METHOD_4 ( org . IDENT_0 . impl . IDENT_1 . IDENT_9 . class ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . sql . IDENT_4 , java . lang . String ) { IDENT_10 = IDENT_10 . METHOD_6 ( ) ; if ( log . METHOD_7 ( ) ) { log . debug ( ( ( ( STRING_1 + IDENT_10 ) + STRING_2 ) + ( java . lang . Thread . METHOD_8 ( ) . getName ( ) ) ) ) ; } if ( ! ( METHOD_9 ( IDENT_10 ) ) ) { if ( log . METHOD_7 ( ) ) { log . debug ( ( ( ( STRING_1 + IDENT_10 ) + STRING_3 ) + ( java . lang . Thread . METHOD_8 ( ) . getName ( ) ) ) ) ; } while ( IDENT_11 . contains ( IDENT_10 ) ) { try { this . METHOD_10 ( ) ; } catch ( java . lang . IDENT_12 IDENT_13 ) { if ( log . METHOD_7 ( ) ) { log . debug ( ( ( ( STRING_1 + IDENT_10 ) + STRING_4 ) + ( java . lang . Thread . METHOD_8 ( ) . getName ( ) ) ) ) ; } } } if ( log . METHOD_7 ( ) ) { log . debug ( ( ( ( STRING_1 + IDENT_10 ) + STRING_5 ) + ( java . lang . Thread . METHOD_8 ( ) . getName ( ) ) ) ) ; } METHOD_11 ( ) . add ( IDENT_10 ) ; IDENT_11 . add ( IDENT_10 ) ; } else if ( log . METHOD_7 ( ) ) { log . debug ( ( ( ( ( STRING_1 + IDENT_10 ) + STRING_6 ) + ( java . lang . Thread . METHOD_8 ( ) . getName ( ) ) ) + STRING_7 ) , new java . lang . Exception ( STRING_8 ) ) ; } return true ; }
org . junit . Assert . assertTrue ( IDENT_3 . METHOD_5 ( IDENT_5 , "test" ) ) 