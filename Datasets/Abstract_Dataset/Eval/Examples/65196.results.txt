METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String exp = STRING_1 ; "<AssertPlaceHolder>" ; } encode ( byte [ ] ) { final int IDENT_1 = ( data . length ) / 3 ; final int len = ( ( ( data . length ) + 2 ) / 3 ) * 4 ; final byte [ ] result = new byte [ len ] ; final int IDENT_2 = ( data . length ) - ( IDENT_1 * 3 ) ; int IDENT_3 = 0 ; int IDENT_4 = 0 ; int IDENT_5 = 0 ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { IDENT_5 = 0 ; for ( int j = 0 ; j < 3 ; j ++ ) { IDENT_5 = ( IDENT_5 << 8 ) | ( ( data [ ( IDENT_3 ++ ) ] ) & 255 ) ; } for ( int j = IDENT_4 + 3 ; j >= IDENT_4 ; j OP_0 ) { result [ j ] = ( ( byte ) ( org . IDENT_6 . util . IDENT_7 . IDENT_8 [ ( IDENT_5 & INT_0 ) ] ) ) ; IDENT_5 = IDENT_5 > > > 6 ; } IDENT_4 += 4 ; } if ( IDENT_2 == 1 ) { IDENT_5 = data [ ( IDENT_3 ++ ) ] ; IDENT_5 = IDENT_5 << 8 ; IDENT_5 = IDENT_5 << 8 ; for ( int j = IDENT_4 + 3 ; j >= IDENT_4 ; j OP_0 ) { result [ j ] = ( ( byte ) ( org . IDENT_6 . util . IDENT_7 . IDENT_8 [ ( IDENT_5 & INT_0 ) ] ) ) ; IDENT_5 = IDENT_5 > > > 6 ; } result [ ( ( result . length ) - 1 ) ] = ( ( byte ) ( STRING_2 ) ) ; result [ ( ( result . length ) - 2 ) ] = ( ( byte ) ( STRING_2 ) ) ; } else if ( IDENT_2 == 2 ) { IDENT_5 = data [ ( IDENT_3 ++ ) ] ; IDENT_5 = ( IDENT_5 << 8 ) | ( ( data [ ( IDENT_3 ++ ) ] ) & 255 ) ; IDENT_5 = IDENT_5 << 8 ; for ( int j = IDENT_4 + 3 ; j >= IDENT_4 ; j OP_0 ) { result [ j ] = ( ( byte ) ( org . IDENT_6 . util . IDENT_7 . IDENT_8 [ ( IDENT_5 & INT_0 ) ] ) ) ; IDENT_5 = IDENT_5 > > > 6 ; } result [ ( ( result . length ) - 1 ) ] = ( ( byte ) ( STRING_2 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( exp , new java . lang . String ( org . IDENT_6 . util . IDENT_7 . encode ( IDENT_0 . getBytes ( ) ) ) ) 