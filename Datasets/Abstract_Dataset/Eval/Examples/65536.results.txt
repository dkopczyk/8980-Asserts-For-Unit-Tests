METHOD_0 ( ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . IDENT_4 IDENT_5 = new eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 ( eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . IDENT_6 . IDENT_7 ) ; IDENT_5 . METHOD_2 ( new eu . IDENT_0 . IDENT_1 . IDENT_2 . client . http . METHOD_3 ( ) ) ; byte [ ] IDENT_8 = eu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_4 ( IDENT_10 . IDENT_11 , STRING_0 . getBytes ( ) ) ; org . IDENT_12 . IDENT_3 . IDENT_13 IDENT_14 = IDENT_5 . METHOD_5 ( IDENT_10 . IDENT_11 , METHOD_4 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( eu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 , byte [ ] ) { try { if ( eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . METHOD_6 ( ) ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . trace ( STRING_1 , IDENT_15 . getName ( ) ) ; eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . trace ( STRING_2 , eu . IDENT_0 . IDENT_1 . IDENT_2 . utils . Utils . METHOD_7 ( METHOD_4 ) ) ; } final org . IDENT_12 . IDENT_3 . IDENT_16 IDENT_17 = new org . IDENT_12 . IDENT_3 . METHOD_8 ( ) ; IDENT_17 . METHOD_9 ( true ) ; if ( ( IDENT_18 ) != null ) { IDENT_17 . METHOD_10 ( IDENT_18 ) ; } org . IDENT_12 . IDENT_19 . IDENT_20 IDENT_21 = new org . IDENT_12 . IDENT_19 . METHOD_11 ( IDENT_15 . METHOD_12 ( ) ) ; org . IDENT_12 . IDENT_3 . IDENT_22 IDENT_23 = null ; if ( ( IDENT_24 ) == null ) { IDENT_23 = IDENT_17 . METHOD_13 ( IDENT_21 , METHOD_4 ) ; } else { IDENT_23 = IDENT_17 . METHOD_13 ( IDENT_21 , METHOD_4 , IDENT_24 . METHOD_14 ( ) ) ; } final byte [ ] IDENT_25 = IDENT_23 . METHOD_15 ( ) ; if ( ( IDENT_26 ) == null ) { IDENT_26 = new eu . IDENT_0 . IDENT_1 . IDENT_2 . client . http . METHOD_3 ( ) ; } byte [ ] IDENT_27 = IDENT_26 . METHOD_16 ( IDENT_28 , IDENT_25 ) ; final org . IDENT_12 . IDENT_3 . IDENT_29 IDENT_14 = new org . IDENT_12 . IDENT_3 . METHOD_17 ( IDENT_27 ) ; IDENT_14 . validate ( IDENT_23 ) ; java . lang . String IDENT_30 = IDENT_14 . METHOD_18 ( ) ; if ( IDENT_30 != null ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . info ( STRING_3 , IDENT_30 ) ; } org . IDENT_12 . IDENT_19 . IDENT_31 . IDENT_32 IDENT_33 = IDENT_14 . METHOD_19 ( ) ; if ( IDENT_33 != null ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . warn ( STRING_4 , IDENT_33 ) ; } final org . IDENT_12 . IDENT_3 . IDENT_13 IDENT_34 = IDENT_14 . METHOD_20 ( ) ; if ( IDENT_34 != null ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . client . IDENT_3 . METHOD_1 . LOG . info ( STRING_5 , IDENT_34 . METHOD_21 ( ) . METHOD_22 ( ) , IDENT_34 . METHOD_21 ( ) . METHOD_23 ( ) ) ; } else { throw new eu . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_24 ( ( ( ( ( STRING_6 + IDENT_30 ) + STRING_7 ) + IDENT_33 ) + STRING_8 ) ) ; } return IDENT_34 ; } catch ( org . IDENT_12 . IDENT_3 . IDENT_35 e ) { throw new eu . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_24 ( STRING_9 , e ) ; } catch ( java . io . IOException e ) { throw new eu . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_24 ( e ) ; } }
org . junit . Assert . assertNotNull ( IDENT_14 ) 