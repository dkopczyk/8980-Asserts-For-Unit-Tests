METHOD_0 ( ) { java . util . Set < org . apache . ambari . server . IDENT_0 . entities . IDENT_1 > IDENT_2 = new java . util . HashSet ( ) ; org . apache . ambari . server . IDENT_0 . entities . IDENT_1 IDENT_3 = new org . apache . ambari . server . IDENT_0 . entities . METHOD_1 ( ) ; IDENT_3 . setId ( 1 ) ; IDENT_2 . add ( IDENT_3 ) ; org . apache . ambari . server . IDENT_0 . entities . METHOD_1 IDENT_4 = new org . apache . ambari . server . IDENT_0 . entities . METHOD_1 ( ) ; IDENT_4 . setId ( 2 ) ; IDENT_2 . add ( IDENT_4 ) ; org . apache . ambari . server . IDENT_0 . entities . IDENT_5 entity = new org . apache . ambari . server . IDENT_0 . entities . METHOD_2 ( ) ; entity . METHOD_3 ( IDENT_2 ) ; entity . METHOD_4 ( IDENT_4 ) ; IDENT_2 = entity . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; IDENT_2 . contains ( IDENT_3 ) ; } size ( ) { java . util . Set < java . lang . String > nodes = new java . util . HashSet < java . lang . String > ( ) ; for ( org . apache . ambari . IDENT_6 . model . IDENT_7 . IDENT_8 entry : IDENT_9 ) { nodes . add ( entry . METHOD_6 ( ) ) ; nodes . addAll ( entry . METHOD_7 ( ) ) ; } return nodes . size ( ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_2 . size ( ) ) 