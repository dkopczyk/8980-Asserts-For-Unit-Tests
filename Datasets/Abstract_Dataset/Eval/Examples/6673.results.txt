METHOD_0 ( ) { final com . google . IDENT_0 . IDENT_1 < org . apache . ambari . server . ldap . domain . IDENT_2 > IDENT_3 = METHOD_1 ( com . google . IDENT_0 . IDENT_1 . class ) ; org . apache . ambari . server . ldap . domain . IDENT_2 configuration = METHOD_1 ( org . apache . ambari . server . ldap . domain . IDENT_2 . class ) ; expect ( IDENT_3 . get ( ) ) . andReturn ( configuration ) . METHOD_2 ( ) ; org . apache . ambari . server . security . authorization . IDENT_4 IDENT_5 = METHOD_1 ( org . apache . ambari . server . security . authorization . IDENT_4 . class ) ; java . lang . String IDENT_6 = STRING_0 ; replay ( IDENT_3 , configuration ) ; org . apache . ambari . server . security . ldap . IDENT_7 . IDENT_8 IDENT_9 = new org . apache . ambari . server . security . ldap . IDENT_7 . METHOD_3 ( IDENT_3 , IDENT_5 ) ; java . lang . String result = IDENT_9 . METHOD_4 ( IDENT_6 , "" ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String , java . lang . String ) { if ( ( org . apache . commons . lang . StringUtils . METHOD_5 ( IDENT_10 ) ) && ( org . apache . commons . lang . StringUtils . METHOD_5 ( pattern ) ) ) { try { java . util . regex . IDENT_11 p = java . util . regex . IDENT_11 . METHOD_6 ( pattern ) ; java . util . regex . IDENT_12 m = p . matcher ( IDENT_10 ) ; org . apache . ambari . server . security . ldap . IDENT_13 . LOG . debug ( STRING_1 , IDENT_10 , pattern ) ; if ( m . matches ( ) ) { IDENT_10 = m . replaceAll ( org . apache . ambari . server . security . ldap . IDENT_13 . IDENT_14 ) ; org . apache . ambari . server . security . ldap . IDENT_13 . LOG . debug ( STRING_2 , IDENT_10 ) ; } else { org . apache . ambari . server . security . ldap . IDENT_13 . LOG . warn ( STRING_3 , pattern , IDENT_10 ) ; } } catch ( java . lang . Exception e ) { org . apache . ambari . server . security . ldap . IDENT_13 . LOG . error ( STRING_4 , IDENT_10 , pattern ) ; } } return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_6 , result ) 