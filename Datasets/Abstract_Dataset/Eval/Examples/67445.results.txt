METHOD_0 ( ) { char [ ] solution = STRING_0 . METHOD_1 ( ) ; int IDENT_0 = com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( solution ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( char [ ] ) { char [ ] [ ] IDENT_5 = new char [ ] [ ] { STRING_1 . METHOD_1 ( ) , STRING_2 . METHOD_1 ( ) , STRING_3 FLOAT_0 METHOD_1 ( ) , STRING_3 FLOAT_1 METHOD_1 ( ) , STRING_4 . METHOD_1 ( ) , STRING_5 . METHOD_1 ( ) , STRING_6 . METHOD_1 ( ) } ; int x ; int y ; int IDENT_6 ; int IDENT_7 ; int i = 0 ; x = 1 ; y = 1 ; IDENT_5 [ y ] [ y ] = STRING_7 ; System . out . METHOD_3 ( ( ( ( ( STRING_8 + ( com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 ) ) + STRING_3 8 ) + ( com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 ) ) + STRING_3 6 ) ) ; System . out . METHOD_3 ( ( ( ( ( STRING_9 + x ) + STRING_10 ) + y ) + STRING_3 6 ) ) ; System . out . METHOD_3 ( ( ( STRING_3 + i ) + STRING_3 6 ) ) ; System . out . METHOD_3 ( STRING_3 7 ) ; System . out . METHOD_3 ( STRING_3 2 ) ; com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_5 ) ; while ( i < ( IDENT_10 . length ) ) { IDENT_6 = x ; IDENT_7 = y ; switch ( IDENT_10 [ i ] ) { case STRING_11 : y OP_0 ; break ; case STRING_12 : y ++ ; break ; case STRING_13 : x OP_0 ; break ; case STRING_14 : x ++ ; break ; default : { System . out . println ( ( STRING_3 3 + ( IDENT_10 [ i ] ) ) ) ; return 0 ; } } if ( ( IDENT_5 [ y ] [ x ] ) == STRING_15 ) { System . out . METHOD_3 ( STRING_3 4 ) ; System . out . METHOD_3 ( ( STRING_3 9 + ( java . util . Arrays . toString ( IDENT_10 ) ) ) ) ; return 1 ; } if ( ( ( IDENT_5 [ y ] [ x ] ) != STRING_16 ) && ( ! ( ( ( ( y == 2 ) && ( ( IDENT_5 [ y ] [ x ] ) == STRING_17 ) ) && ( x > 0 ) ) && ( x < ( com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 ) ) ) ) ) { x = IDENT_6 ; y = IDENT_7 ; } if ( ( IDENT_6 == x ) && ( IDENT_7 == y ) ) { System . out . METHOD_3 ( STRING_3 0 ) ; return 2 ; } IDENT_5 [ y ] [ x ] = STRING_7 ; com . examples . with . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_5 ) ; i ++ ; } System . out . METHOD_3 ( STRING_18 ) ; return 3 ; }
org . junit . Assert . assertEquals ( 0 , IDENT_0 ) 