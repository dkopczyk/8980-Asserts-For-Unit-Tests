test ( ) { org . evosuite . Properties . IDENT_0 = 100 ; org . evosuite . Properties . IDENT_1 = org . evosuite . Properties . IDENT_2 . IDENT_3 ; java . util . Collection < org . evosuite . IDENT_4 . expr . IDENT_5 < ? > > IDENT_6 = org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_0 ( ) ; System . out . println ( STRING_0 ) ; for ( org . evosuite . IDENT_4 . expr . IDENT_5 < ? > c : IDENT_6 ) { System . out . println ( c . toString ( ) ) ; } System . out . println ( "" ) ; System . out . println ( ( STRING_1 + ( org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 ) ) ) ; org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_11 IDENT_7 = new org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . METHOD_1 ( ) ; try { org . evosuite . IDENT_4 . IDENT_7 . IDENT_12 result = IDENT_7 . METHOD_2 ( IDENT_6 ) ; if ( result . METHOD_3 ( ) ) { org . junit . Assert . fail ( STRING_2 ) ; } else { java . util . Map < java . lang . String , java . lang . Object > model = result . METHOD_4 ( ) ; java . lang . Object IDENT_13 = model . get ( STRING_3 ) ; System . out . println ( ( STRING_4 + ( org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_14 ) ) ) ; System . out . println ( ( STRING_5 + IDENT_13 ) ) ; "<AssertPlaceHolder>" ; } } catch ( org . evosuite . IDENT_4 . IDENT_7 . IDENT_15 e ) { org . junit . Assert . fail ( ) ; } } get ( int ) { return this . IDENT_16 . get ( index ) ; }
org . junit . Assert . assertEquals ( java . lang . String . valueOf ( org . evosuite . IDENT_4 . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_14 ) , IDENT_13 ) 