METHOD_0 ( ) { org . evosuite . IDENT_0 . IDENT_1 IDENT_2 = new org . evosuite . IDENT_0 . METHOD_1 ( ) ; org . evosuite . IDENT_0 . IDENT_1 IDENT_3 = new org . evosuite . IDENT_0 . METHOD_1 ( ) ; org . evosuite . IDENT_0 . IDENT_4 . IDENT_5 < ? > IDENT_6 = new org . evosuite . IDENT_0 . IDENT_4 . IDENT_7 . METHOD_2 ( IDENT_2 , INT_0 ) ; IDENT_2 . METHOD_3 ( IDENT_6 ) ; org . evosuite . IDENT_0 . IDENT_4 . IDENT_5 < ? > IDENT_8 = new org . evosuite . IDENT_0 . IDENT_4 . IDENT_7 . METHOD_2 ( IDENT_3 , INT_0 ) ; IDENT_3 . METHOD_3 ( IDENT_8 ) ; double IDENT_9 = org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . METHOD_4 ( IDENT_2 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . evosuite . IDENT_0 . IDENT_1 , org . evosuite . IDENT_0 . IDENT_1 ) { int [ ] [ ] IDENT_13 = new int [ ( IDENT_2 . size ( ) ) + 1 ] [ ( IDENT_3 . size ( ) ) + 1 ] ; for ( int i = 0 ; i <= ( IDENT_2 . size ( ) ) ; i ++ ) IDENT_13 [ i ] [ 0 ] = ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) * i ; for ( int i = 0 ; i <= ( IDENT_3 . size ( ) ) ; i ++ ) IDENT_13 [ 0 ] [ i ] = ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) * i ; for ( int x = 1 ; x <= ( IDENT_2 . size ( ) ) ; x ++ ) { for ( int y = 1 ; y <= ( IDENT_3 . size ( ) ) ; y ++ ) { int IDENT_15 = ( IDENT_13 [ ( x - 1 ) ] [ ( y - 1 ) ] ) + ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . METHOD_5 ( IDENT_2 . METHOD_6 ( ( x - 1 ) ) , IDENT_3 . METHOD_6 ( ( y - 1 ) ) ) ) ; int insert = ( IDENT_13 [ ( x - 1 ) ] [ y ] ) + ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) ; int delete = ( IDENT_13 [ x ] [ ( y - 1 ) ] ) + ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) ; IDENT_13 [ x ] [ y ] = java . lang . Math . max ( IDENT_15 , java . lang . Math . max ( delete , insert ) ) ; } } double max = ( java . lang . Math . max ( IDENT_2 . size ( ) , IDENT_3 . size ( ) ) ) * ( java . lang . Math . METHOD_7 ( org . evosuite . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) ) ; if ( max == 0.0 ) { return 0.0 ; } return ( IDENT_13 [ IDENT_2 . size ( ) ] [ IDENT_3 . size ( ) ] ) / max ; }
org . junit . Assert . assertTrue ( ( IDENT_9 > 0 ) ) 