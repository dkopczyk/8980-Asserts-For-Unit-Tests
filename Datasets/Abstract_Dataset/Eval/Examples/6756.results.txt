METHOD_0 ( ) { org . apache . ambari . server . controller . internal . IDENT_0 IDENT_1 = METHOD_1 ( org . apache . ambari . server . controller . internal . IDENT_0 . class ) ; java . net . IDENT_2 IDENT_3 = METHOD_1 ( java . net . IDENT_2 . class ) ; java . io . InputStream IDENT_4 = METHOD_1 ( java . io . InputStream . class ) ; org . apache . ambari . view . IDENT_5 IDENT_6 = METHOD_1 ( org . apache . ambari . view . IDENT_5 . class ) ; java . io . InputStream body = new java . io . ByteArrayInputStream ( STRING_0 . getBytes ( ) ) ; java . util . Map < java . lang . String , java . lang . String > headers = new java . util . HashMap ( ) ; headers . put ( STRING_1 , STRING_2 ) ; java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_7 = new java . util . HashMap ( ) ; IDENT_7 . put ( STRING_1 , java . util . Collections . singletonList ( STRING_2 ) ) ; expect ( IDENT_1 . METHOD_2 ( eq ( STRING_3 ) , eq ( STRING_4 ) , METHOD_3 ( STRING_0 . getBytes ( ) ) , eq ( IDENT_7 ) ) ) . andReturn ( IDENT_3 ) ; expect ( IDENT_3 . METHOD_4 ( ) ) . andReturn ( IDENT_4 ) ; replay ( IDENT_1 , IDENT_3 , IDENT_4 ) ; org . apache . ambari . server . view . IDENT_8 IDENT_9 = new org . apache . ambari . server . view . METHOD_5 ( IDENT_6 , IDENT_1 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_1 , IDENT_3 , IDENT_4 ) ; } METHOD_6 ( java . lang . String , java . lang . String , java . io . InputStream , java . util . Map ) { return METHOD_4 ( IDENT_10 . METHOD_2 ( METHOD_7 ( path ) , IDENT_11 , body , METHOD_8 ( headers ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_9 . METHOD_6 ( STRING_3 , STRING_4 , body , headers ) ) 