METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . service . IDENT_2 IDENT_3 = mock ( com . IDENT_0 . IDENT_1 . service . IDENT_2 . class ) ; com . IDENT_0 . core . IDENT_4 . model . IDENT_5 channel = new com . IDENT_0 . core . IDENT_4 . model . METHOD_1 ( ) ; channel . METHOD_2 ( false ) ; when ( IDENT_3 . METHOD_3 ( any ( com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . Integer . class ) , any ( com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . Integer . class ) ) ) . thenReturn ( channel ) ; com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 IDENT_7 = new com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . METHOD_4 ( IDENT_3 , null ) ; IDENT_9 . METHOD_5 ( STRING_0 , IDENT_7 ) ; IDENT_6 . template . IDENT_10 template = IDENT_9 . METHOD_6 ( METHOD_7 ( STRING_1 ) ) ; java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; com . IDENT_0 . core . IDENT_4 . model . IDENT_11 IDENT_4 = new com . IDENT_0 . core . IDENT_4 . model . METHOD_8 ( ) ; IDENT_4 . setId ( 1 ) ; params . put ( IDENT_12 . IDENT_13 . toString ( ) , IDENT_4 ) ; java . lang . String value = process ( template , params ) ; value = org . apache . commons . lang . StringUtils . METHOD_9 ( value ) ; "<AssertPlaceHolder>" ; } process ( org . apache . http . IDENT_14 , org . apache . http . protocol . IDENT_15 ) { org . apache . http . IDENT_16 entity = response . METHOD_10 ( ) ; org . apache . http . IDENT_17 IDENT_18 = entity . METHOD_11 ( ) ; if ( IDENT_18 != null ) { org . apache . http . IDENT_19 [ ] IDENT_20 = IDENT_18 . METHOD_12 ( ) ; for ( org . apache . http . IDENT_19 codec : IDENT_20 ) { if ( codec . getName ( ) . equalsIgnoreCase ( STRING_2 ) ) { response . METHOD_13 ( new com . IDENT_0 . plugin . IDENT_21 . IDENT_22 . IDENT_23 . IDENT_24 . METHOD_14 ( response . METHOD_10 ( ) ) ) ; return ; } } } }
org . junit . Assert . assertEquals ( "" , value ) 