METHOD_0 ( ) { org . exist . storage . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . exist . storage . IDENT_0 . class ) ; org . exist . security . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_2 . class ) ; java . lang . IDENT_4 IDENT_5 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_4 . class ) ; org . exist . security . IDENT_6 IDENT_7 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; org . exist . security . IDENT_8 . IDENT_9 group = new org . exist . security . IDENT_8 . METHOD_2 ( IDENT_1 , IDENT_3 ) ; final java . util . List < org . exist . config . IDENT_10 < java . lang . IDENT_4 , org . exist . security . IDENT_6 > > IDENT_11 = new java . util . ArrayList ( ) ; IDENT_11 . add ( new org . exist . config . METHOD_3 ( IDENT_5 , IDENT_7 , STRING_0 ) ) ; group . METHOD_4 ( IDENT_11 ) ; final boolean result = group . METHOD_5 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . exist . security . IDENT_6 ) { for ( final org . exist . config . IDENT_10 < java . lang . IDENT_4 , org . exist . security . IDENT_6 > manager : IDENT_11 ) { final org . exist . security . IDENT_6 IDENT_12 = manager . resolve ( ) ; if ( ( IDENT_12 != null ) && ( IDENT_12 . equals ( IDENT_13 ) ) ) { return true ; } } return false ; }
org . junit . Assert . assertTrue ( result ) 