METHOD_0 ( ) { final java . lang . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_0 . class ) ; final org . exist . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( org . exist . IDENT_2 . class ) ; final org . exist . storage . IDENT_4 IDENT_5 = org . easymock . EasyMock . METHOD_1 ( org . exist . storage . IDENT_4 . class ) ; final org . exist . security . IDENT_6 IDENT_7 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; expect ( IDENT_1 . METHOD_2 ( ) ) . andReturn ( IDENT_3 ) . times ( 2 ) ; expect ( IDENT_3 . METHOD_3 ( ) ) . andReturn ( IDENT_5 ) . times ( 2 ) ; expect ( IDENT_5 . METHOD_4 ( ) ) . andReturn ( IDENT_7 ) . times ( 2 ) ; expect ( IDENT_7 . METHOD_5 ( ) ) . andReturn ( true ) . times ( 2 ) ; final int IDENT_8 = new java . util . METHOD_6 ( ) . METHOD_7 ( IDENT_9 . IDENT_10 ) ; final int IDENT_11 = INT_0 ; final int IDENT_12 = new java . util . METHOD_6 ( ) . METHOD_7 ( IDENT_9 . IDENT_13 ) ; final org . exist . security . IDENT_6 IDENT_14 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; final boolean IDENT_15 = false ; final int IDENT_16 = new java . util . METHOD_6 ( ) . METHOD_7 ( IDENT_9 . IDENT_10 ) ; final int IDENT_17 = new java . util . METHOD_6 ( ) . METHOD_7 ( IDENT_9 . IDENT_13 ) ; expect ( IDENT_14 . METHOD_5 ( ) ) . andReturn ( IDENT_15 ) ; expect ( IDENT_14 . getId ( ) ) . andReturn ( IDENT_16 ) ; expect ( IDENT_14 . METHOD_8 ( ) ) . andReturn ( new int [ 0 ] ) ; replay ( IDENT_1 , IDENT_3 , IDENT_5 , IDENT_7 , IDENT_14 ) ; org . exist . security . IDENT_18 IDENT_19 = new org . exist . security . METHOD_9 ( IDENT_1 , IDENT_8 , IDENT_12 , IDENT_11 ) ; IDENT_19 . METHOD_10 ( IDENT_20 . IDENT_21 , IDENT_16 , IDENT_22 . IDENT_23 ) ; IDENT_19 . METHOD_11 ( IDENT_20 . IDENT_24 , IDENT_17 , IDENT_22 . IDENT_23 ) ; boolean isValid = IDENT_19 . validate ( IDENT_14 , IDENT_22 . IDENT_23 ) ; verify ( IDENT_1 , IDENT_3 , IDENT_5 , IDENT_7 , IDENT_14 ) ; "<AssertPlaceHolder>" ; } validate ( java . io . InputStream , java . lang . String ) { if ( ( IDENT_25 != null ) && ( IDENT_25 . startsWith ( "/" ) ) ) { IDENT_25 = STRING_0 + IDENT_25 ; } if ( ( IDENT_25 != null ) && ( ( ( ( IDENT_25 . METHOD_12 ( STRING_1 ) ) || ( IDENT_25 . METHOD_12 ( STRING_2 ) ) ) || ( IDENT_25 . METHOD_12 ( STRING_3 ) ) ) || ( IDENT_25 . METHOD_12 ( STRING_4 ) ) ) ) { return METHOD_13 ( stream , IDENT_25 ) ; } else { return METHOD_14 ( stream , IDENT_25 ) ; } }
org . junit . Assert . assertFalse ( isValid ) 