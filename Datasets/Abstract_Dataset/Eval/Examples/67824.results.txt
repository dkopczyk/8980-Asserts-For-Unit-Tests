METHOD_0 ( ) { final java . lang . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_0 . class ) ; final int IDENT_2 = new java . util . METHOD_2 ( ) . METHOD_3 ( IDENT_3 . IDENT_4 ) ; final int IDENT_5 = INT_0 ; final int IDENT_6 = new java . util . METHOD_2 ( org . exist . security . internal . IDENT_3 . IDENT_7 ) . METHOD_3 ( ) ; final boolean IDENT_8 = false ; final org . exist . security . IDENT_9 IDENT_10 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_9 . class ) ; expect ( IDENT_10 . METHOD_4 ( ) ) . andReturn ( METHOD_4 ) ; expect ( IDENT_10 . getId ( ) ) . andReturn ( IDENT_2 ) ; replay ( IDENT_1 , IDENT_10 ) ; final org . exist . security . IDENT_11 IDENT_12 = new org . exist . security . METHOD_5 ( IDENT_1 , IDENT_2 , IDENT_6 , IDENT_5 ) ; final boolean isValid = IDENT_12 . validate ( IDENT_10 , IDENT_11 . IDENT_13 ) ; verify ( IDENT_1 , IDENT_10 ) ; "<AssertPlaceHolder>" ; } validate ( java . io . InputStream , java . lang . String ) { if ( ( IDENT_14 != null ) && ( IDENT_14 . startsWith ( "/" ) ) ) { IDENT_14 = STRING_0 + IDENT_14 ; } if ( ( IDENT_14 != null ) && ( ( ( ( IDENT_14 . METHOD_6 ( STRING_1 ) ) || ( IDENT_14 . METHOD_6 ( STRING_2 ) ) ) || ( IDENT_14 . METHOD_6 ( STRING_3 ) ) ) || ( IDENT_14 . METHOD_6 ( STRING_4 ) ) ) ) { return METHOD_7 ( stream , IDENT_14 ) ; } else { return METHOD_8 ( stream , IDENT_14 ) ; } }
org . junit . Assert . assertFalse ( isValid ) 