METHOD_0 ( ) { final org . exist . IDENT_0 . IDENT_1 IDENT_2 = org . exist . IDENT_0 . IDENT_1 . create ( STRING_0 ) ; final org . exist . IDENT_0 . IDENT_1 IDENT_3 = org . exist . IDENT_0 . IDENT_1 . create ( STRING_1 ) ; final org . exist . IDENT_0 . IDENT_1 IDENT_4 = org . exist . IDENT_0 . IDENT_1 . create ( STRING_2 ) ; final org . exist . collections . Collection IDENT_5 = org . easymock . EasyMock . METHOD_1 ( org . exist . collections . Collection . class ) ; final org . exist . security . IDENT_6 IDENT_7 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; final org . exist . collections . Collection IDENT_8 = org . easymock . EasyMock . METHOD_1 ( org . exist . collections . Collection . class ) ; final org . exist . security . IDENT_6 IDENT_9 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; final org . exist . collections . Collection IDENT_10 = org . easymock . EasyMock . METHOD_1 ( org . exist . collections . Collection . class ) ; final org . exist . security . IDENT_6 IDENT_11 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_6 . class ) ; final org . exist . storage . IDENT_12 IDENT_13 = org . easymock . EasyMock . METHOD_2 ( org . exist . storage . IDENT_12 . class ) . METHOD_3 ( STRING_3 ) . METHOD_3 ( STRING_4 ) . METHOD_1 ( ) ; final org . exist . security . IDENT_14 subject = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_14 . class ) ; expect ( IDENT_5 . METHOD_4 ( ) ) . andReturn ( IDENT_7 ) ; expect ( IDENT_13 . METHOD_5 ( ) ) . andReturn ( subject ) ; expect ( IDENT_7 . validate ( subject , ( ( org . exist . security . IDENT_6 . IDENT_15 ) | ( org . exist . security . IDENT_6 . IDENT_16 ) ) ) ) . andReturn ( true ) ; expect ( IDENT_8 . METHOD_6 ( ) ) . andReturn ( IDENT_3 ) ; final org . easymock . IDENT_17 < org . exist . IDENT_0 . IDENT_1 > IDENT_18 = METHOD_7 ( ) ; expect ( IDENT_13 . METHOD_8 ( METHOD_9 ( IDENT_18 ) ) ) . andReturn ( IDENT_10 ) ; expect ( IDENT_8 . METHOD_4 ( ) ) . andReturn ( IDENT_9 ) ; expect ( IDENT_13 . METHOD_5 ( ) ) . andReturn ( subject ) ; expect ( IDENT_9 . validate ( subject , ( ( org . exist . security . IDENT_6 . IDENT_15 ) | ( org . exist . security . IDENT_6 . IDENT_19 ) ) ) ) . andReturn ( true ) ; expect ( IDENT_10 . METHOD_4 ( ) ) . andReturn ( IDENT_11 ) ; expect ( IDENT_13 . METHOD_5 ( ) ) . andReturn ( subject ) ; expect ( IDENT_11 . validate ( subject , ( ( org . exist . security . IDENT_6 . IDENT_15 ) | ( org . exist . security . IDENT_6 . IDENT_19 ) ) ) ) . andReturn ( false ) ; expect ( IDENT_5 . METHOD_6 ( ) ) . andReturn ( IDENT_2 ) ; expect ( IDENT_10 . METHOD_6 ( ) ) . andReturn ( IDENT_3 . append ( IDENT_4 ) ) ; expect ( IDENT_13 . METHOD_5 ( ) ) . andReturn ( subject ) ; expect ( subject . getName ( ) ) . andReturn ( STRING_5 ) ; expect ( IDENT_5 . iterator ( IDENT_13 ) ) . andReturn ( org . exist . storage . Collections . METHOD_10 ( ) ) ; expect ( IDENT_5 . METHOD_11 ( IDENT_13 ) ) . andReturn ( org . exist . storage . Collections . METHOD_10 ( ) ) ; replay ( IDENT_11 , IDENT_10 , IDENT_8 , IDENT_9 , IDENT_5 , IDENT_7 , subject , IDENT_13 ) ; IDENT_13 . METHOD_12 ( IDENT_5 , IDENT_8 , IDENT_4 ) ; verify ( IDENT_11 , IDENT_10 , IDENT_8 , IDENT_9 , IDENT_5 , IDENT_7 , subject , IDENT_13 ) ; "<AssertPlaceHolder>" ; } append ( java . lang . String ) { int IDENT_20 = 0 ; if ( ( IDENT_21 . charAt ( 0 ) ) == ( org . exist . collections . IDENT_22 . IDENT_23 ) ) { IDENT_20 = 1 ; } if ( ( uri ) == null ) { uri = new char [ ( ( IDENT_21 . length ( ) ) + 1 ) - IDENT_20 ] ; uri [ 0 ] = org . exist . collections . IDENT_22 . IDENT_23 ; IDENT_21 . METHOD_13 ( IDENT_20 , IDENT_21 . length ( ) , uri , 1 ) ; } else { char [ ] IDENT_24 = new char [ ( ( ( length ) + 1 ) + ( IDENT_21 . length ( ) ) ) - IDENT_20 ] ; java . lang . System . METHOD_14 ( uri , 0 , IDENT_24 , 0 , length ) ; IDENT_24 [ length ] = org . exist . collections . IDENT_22 . IDENT_23 ; IDENT_21 . METHOD_13 ( IDENT_20 , IDENT_21 . length ( ) , IDENT_24 , ( ( length ) + 1 ) ) ; uri = IDENT_24 ; } length += ( ( IDENT_21 . length ( ) ) + 1 ) - IDENT_20 ; hash = 0 ; }
org . junit . Assert . assertEquals ( IDENT_3 . append ( IDENT_4 ) , IDENT_18 . getValue ( ) ) 