METHOD_0 ( ) { final org . IDENT_0 . api . base . Collection root = org . IDENT_0 . api . IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 , "" ) ; final org . exist . IDENT_0 . IDENT_2 service = ( ( org . exist . IDENT_0 . IDENT_2 ) ( root . METHOD_2 ( STRING_2 , STRING_3 ) ) ) ; final java . util . IDENT_3 random = new java . util . METHOD_3 ( ) ; for ( int i = 0 ; i < ( org . exist . storage . IDENT_4 . IDENT_5 . IDENT_6 ) ; i ++ ) { java . lang . String IDENT_7 = ( ( ( STRING_4 + i ) + STRING_5 ) + ( random . METHOD_4 ( org . exist . storage . IDENT_4 . IDENT_5 . IDENT_8 ) ) ) + STRING_6 ; try { service . METHOD_5 ( ) ; final org . IDENT_0 . api . base . IDENT_9 result = service . query ( ( IDENT_7 + STRING_7 ) ) ; "<AssertPlaceHolder>" ; } finally { service . METHOD_6 ( ) ; } } } METHOD_7 ( ) { return model . size ( ) ; }
org . junit . Assert . assertEquals ( result . METHOD_7 ( ) , 1 ) 