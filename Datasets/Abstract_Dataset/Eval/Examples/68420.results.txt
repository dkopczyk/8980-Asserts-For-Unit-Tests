METHOD_0 ( ) { com . facebook . buck . core . IDENT_0 . IDENT_1 IDENT_2 = new com . facebook . buck . core . IDENT_0 . METHOD_1 ( STRING_0 ) ; com . facebook . buck . core . IDENT_0 . METHOD_1 IDENT_3 = new com . facebook . buck . core . IDENT_0 . METHOD_1 ( STRING_1 ) ; com . facebook . buck . core . IDENT_4 . IDENT_5 input = com . facebook . buck . core . IDENT_4 . IDENT_6 . of ( STRING_2 ) ; com . facebook . buck . core . build . engine . IDENT_7 . IDENT_8 IDENT_7 = com . facebook . buck . core . build . engine . IDENT_7 . IDENT_9 . METHOD_2 ( new com . facebook . buck . core . IDENT_0 . METHOD_1 ( STRING_3 ) , com . google . common . collect . ImmutableMap . of ( IDENT_2 , com . google . common . collect . ImmutableMap . of ( com . facebook . buck . core . build . engine . IDENT_7 . IDENT_10 . IDENT_11 . METHOD_3 ( input ) . toString ( ) , com . google . common . hash . IDENT_12 . METHOD_4 ( 1 ) ) , IDENT_3 , com . google . common . collect . ImmutableMap . of ( com . facebook . buck . core . build . engine . IDENT_7 . IDENT_10 . IDENT_11 . METHOD_3 ( input ) . toString ( ) , com . google . common . hash . IDENT_12 . METHOD_4 ( 2 ) ) ) ) ; com . facebook . buck . util . cache . IDENT_13 IDENT_14 = new com . facebook . buck . IDENT_15 . METHOD_5 ( com . google . common . collect . ImmutableMap . of ( com . facebook . buck . core . build . engine . IDENT_7 . IDENT_10 . IDENT_11 . getAbsolutePath ( input ) , com . google . common . hash . IDENT_12 . METHOD_4 ( 2 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( com . facebook . buck . util . IDENT_16 . IDENT_17 , com . facebook . buck . core . IDENT_4 . resolver . IDENT_18 , com . google . common . collect . IDENT_19 ) { com . google . common . collect . IDENT_19 . Builder < java . lang . String > IDENT_20 = new com . google . common . collect . IDENT_19 . Builder < > ( ) ; for ( com . facebook . buck . util . types . IDENT_21 < ? , int [ ] > entry : IDENT_22 ) { for ( int IDENT_23 : entry . METHOD_7 ( ) ) { IDENT_20 . add ( IDENT_24 . get ( IDENT_25 . get ( IDENT_23 ) . METHOD_8 ( ) ) ) ; } } com . google . common . collect . IDENT_19 < java . lang . String > IDENT_26 = IDENT_20 . build ( ) ; com . google . common . collect . IDENT_27 < java . lang . String , com . facebook . buck . core . IDENT_4 . IDENT_5 > IDENT_28 = com . facebook . buck . core . build . engine . IDENT_7 . IDENT_8 . index ( IDENT_29 , ( path ) -> METHOD_9 ( path , resolver ) , IDENT_26 :: contains ) ; for ( com . facebook . buck . util . types . IDENT_21 < com . facebook . buck . core . IDENT_0 . METHOD_1 , int [ ] > entry : IDENT_22 ) { if ( METHOD_10 ( IDENT_30 , resolver , IDENT_28 , entry . METHOD_7 ( ) ) ) { return java . util . Optional . of ( entry . METHOD_8 ( ) ) ; } } return java . util . Optional . empty ( ) ; }
org . junit . Assert . assertThat ( IDENT_7 . METHOD_6 ( IDENT_14 , com . facebook . buck . core . build . engine . IDENT_7 . IDENT_10 . IDENT_11 , com . google . common . collect . IDENT_19 . of ( input ) ) , org . hamcrest . Matchers . equalTo ( java . util . Optional . of ( IDENT_3 ) ) ) 