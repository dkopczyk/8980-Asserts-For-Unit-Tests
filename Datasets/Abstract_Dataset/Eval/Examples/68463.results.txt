METHOD_0 ( ) { com . google . common . collect . ImmutableMap < java . lang . String , java . lang . String > values = com . google . common . collect . ImmutableMap . of ( "a" , "b" ) ; com . facebook . buck . core . rules . IDENT_0 . IDENT_1 IDENT_2 = new com . facebook . buck . core . rules . IDENT_0 . METHOD_1 ( IDENT_3 , values , com . google . common . collect . IDENT_4 . of ( IDENT_5 , IDENT_6 ) ) ; com . facebook . buck . core . rules . IDENT_0 . METHOD_1 IDENT_7 = new com . facebook . buck . core . rules . IDENT_0 . METHOD_1 ( IDENT_8 , values , com . google . common . collect . IDENT_4 . of ( IDENT_5 ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( com . facebook . buck . core . select . IDENT_9 ) { com . google . common . base . IDENT_10 . METHOD_3 ( ( other instanceof com . facebook . buck . core . rules . IDENT_0 . METHOD_1 ) ) ; com . facebook . buck . core . rules . IDENT_0 . METHOD_1 IDENT_11 = ( ( com . facebook . buck . core . rules . IDENT_0 . METHOD_1 ) ( other ) ) ; if ( values . equals ( IDENT_11 . values ) ) { return METHOD_2 ( IDENT_12 , IDENT_11 . IDENT_12 ) ; } else if ( IDENT_12 . equals ( IDENT_11 . IDENT_12 ) ) { return METHOD_2 ( values . entrySet ( ) , IDENT_11 . values . entrySet ( ) ) ; } else { return ( METHOD_2 ( values . entrySet ( ) , IDENT_11 . values . entrySet ( ) ) ) && ( METHOD_2 ( IDENT_12 , IDENT_11 . IDENT_12 ) ) ; } }
org . junit . Assert . assertTrue ( IDENT_2 . METHOD_2 ( IDENT_7 ) ) 