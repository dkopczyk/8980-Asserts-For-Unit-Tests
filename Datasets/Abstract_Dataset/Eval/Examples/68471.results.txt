METHOD_0 ( ) { com . facebook . buck . core . model . IDENT_0 IDENT_1 = com . facebook . buck . core . model . IDENT_2 . newInstance ( STRING_0 ) ; com . facebook . buck . core . model . IDENT_3 IDENT_4 = com . facebook . buck . core . model . IDENT_5 . newInstance ( STRING_1 ) ; com . facebook . buck . core . select . impl . IDENT_6 resolver = new com . facebook . buck . core . select . impl . METHOD_1 ( new com . facebook . buck . core . select . METHOD_2 ( com . google . common . collect . ImmutableList . of ( new com . facebook . buck . core . select . METHOD_3 ( IDENT_4 , true ) ) ) ) ; com . facebook . buck . core . select . IDENT_7 < com . facebook . buck . core . model . IDENT_8 > IDENT_9 = METHOD_4 ( com . google . common . collect . ImmutableMap . of ( STRING_2 , STRING_3 , STRING_1 , STRING_4 ) , com . google . common . collect . ImmutableMap . of ( STRING_2 , STRING_5 , STRING_1 , STRING_6 ) ) ; com . facebook . buck . core . model . IDENT_8 IDENT_10 = resolver . METHOD_5 ( IDENT_11 , IDENT_1 , STRING_7 , IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( com . facebook . buck . core . select . IDENT_12 , com . facebook . buck . core . model . IDENT_0 , java . lang . String , com . facebook . buck . core . select . IDENT_7 ) { java . util . List < T > IDENT_13 = new java . util . ArrayList ( ) ; for ( com . facebook . buck . core . select . IDENT_14 < T > IDENT_15 : IDENT_9 . METHOD_6 ( ) ) { T IDENT_16 = METHOD_7 ( IDENT_11 , IDENT_17 , IDENT_18 , IDENT_15 ) ; if ( IDENT_16 != null ) { IDENT_13 . add ( IDENT_16 ) ; } } return ( IDENT_13 . size ( ) ) == 1 ? IDENT_13 . get ( 0 ) : IDENT_9 . METHOD_8 ( ) . METHOD_9 ( IDENT_13 ) ; }
org . junit . Assert . assertNull ( IDENT_10 ) 