METHOD_0 ( ) { com . facebook . buck . io . IDENT_0 . IDENT_1 IDENT_0 = new com . facebook . buck . io . IDENT_0 . impl . METHOD_1 ( ) ; for ( com . facebook . buck . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 : IDENT_4 . IDENT_5 . values ( ) ) { com . facebook . buck . IDENT_2 . IDENT_3 . IDENT_7 IDENT_8 = com . facebook . buck . IDENT_2 . IDENT_3 . IDENT_7 . create ( com . facebook . buck . core . model . IDENT_9 . newInstance ( STRING_0 ) ) . METHOD_2 ( IDENT_6 ) ; com . facebook . buck . core . model . IDENT_10 . IDENT_11 IDENT_12 = com . facebook . buck . core . model . IDENT_10 . IDENT_13 . newInstance ( IDENT_8 . build ( ) ) ; com . facebook . buck . core . rules . IDENT_14 IDENT_15 = new com . facebook . buck . core . rules . resolver . impl . METHOD_3 ( IDENT_12 ) ; com . facebook . buck . IDENT_2 . IDENT_3 . IDENT_16 IDENT_17 = IDENT_8 . build ( IDENT_15 , IDENT_0 , IDENT_12 ) ; com . facebook . buck . core . IDENT_18 . IDENT_19 IDENT_20 = METHOD_4 ( IDENT_15 , IDENT_17 ) ; com . facebook . buck . IDENT_21 . IDENT_22 IDENT_23 = new com . facebook . buck . IDENT_21 . METHOD_5 ( com . facebook . buck . core . model . IDENT_9 . newInstance ( STRING_1 ) ) ; IDENT_8 . METHOD_6 ( com . google . common . collect . IDENT_24 . of ( IDENT_23 . METHOD_7 ( ) ) ) ; IDENT_12 = com . facebook . buck . core . model . IDENT_10 . IDENT_13 . newInstance ( IDENT_23 . build ( ) , IDENT_8 . build ( ) ) ; IDENT_15 = new com . facebook . buck . core . rules . resolver . impl . METHOD_3 ( IDENT_12 ) ; IDENT_23 . build ( IDENT_15 , IDENT_0 , IDENT_12 ) ; com . facebook . buck . IDENT_2 . IDENT_3 . IDENT_16 IDENT_25 = IDENT_8 . build ( IDENT_15 , IDENT_0 , IDENT_12 ) ; com . facebook . buck . core . IDENT_18 . IDENT_19 IDENT_26 = METHOD_4 ( IDENT_15 , IDENT_25 ) ; "<AssertPlaceHolder>" ; } } equalTo ( com . facebook . buck . query . IDENT_27 ) { return ( ( ( type . equals ( other . type ) ) && ( ( IDENT_28 ) == ( other . IDENT_28 ) ) ) && ( java . util . IDENT_29 . equals ( expression , other . expression ) ) ) && ( java . util . IDENT_29 . equals ( IDENT_30 , other . IDENT_30 ) ) ; }
org . junit . Assert . assertThat ( IDENT_20 , org . hamcrest . Matchers . equalTo ( IDENT_26 ) ) 