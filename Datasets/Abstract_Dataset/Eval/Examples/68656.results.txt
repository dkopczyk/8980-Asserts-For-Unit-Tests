METHOD_0 ( ) { com . facebook . buck . IDENT_0 . java . IDENT_1 IDENT_2 = new com . facebook . buck . IDENT_0 . java . METHOD_1 ( "/" , STRING_0 , IDENT_3 :: get , ( IDENT_4 ) -> false , ( file ) -> false , ( path , IDENT_5 ) -> com . google . common . collect . IDENT_6 . of ( java . nio . file . IDENT_3 . get ( STRING_1 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { for ( java . lang . String entry : com . google . common . base . IDENT_7 . METHOD_3 ( IDENT_8 ) . split ( IDENT_9 ) ) { java . util . List < java . lang . String > IDENT_10 = com . google . common . base . IDENT_7 . METHOD_3 ( IDENT_11 ) . METHOD_4 ( entry ) ; if ( IDENT_10 . isEmpty ( ) ) { continue ; } if ( com . google . common . collect . IDENT_12 . METHOD_5 ( IDENT_10 ) . equals ( STRING_2 ) ) { java . util . List < java . lang . String > IDENT_13 = IDENT_10 . METHOD_6 ( 0 , ( ( IDENT_10 . size ( ) ) - 1 ) ) ; java . nio . file . Path IDENT_14 = IDENT_15 . apply ( com . google . common . base . IDENT_16 . METHOD_3 ( IDENT_11 ) . join ( IDENT_13 ) ) ; if ( ! ( com . google . common . collect . IDENT_12 . isEmpty ( IDENT_17 . apply ( IDENT_14 , STRING_3 ) ) ) ) { return true ; } else if ( ! ( com . google . common . collect . IDENT_12 . isEmpty ( IDENT_17 . apply ( IDENT_14 , STRING_4 ) ) ) ) { return true ; } } else { java . nio . file . Path IDENT_18 = IDENT_15 . apply ( entry ) ; if ( IDENT_19 . test ( IDENT_18 ) ) { return true ; } else if ( ( IDENT_20 . test ( IDENT_18 ) ) && ( com . facebook . buck . IDENT_0 . java . METHOD_1 . IDENT_21 . contains ( com . google . common . io . IDENT_22 . METHOD_7 ( IDENT_18 . toString ( ) . toLowerCase ( Locale . IDENT_23 ) ) ) ) ) { return true ; } } } return false ; }
org . junit . Assert . assertThat ( IDENT_2 . METHOD_2 ( STRING_2 ) , org . hamcrest . Matchers . is ( true ) ) 