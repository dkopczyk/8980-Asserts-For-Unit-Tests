METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( org . easymock . EasyMock . METHOD_2 ( ) , org . easymock . EasyMock . METHOD_2 ( ) ) ) . METHOD_3 ( new java . io . IOException ( ) ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( org . easymock . EasyMock . METHOD_2 ( ) , org . easymock . EasyMock . METHOD_2 ( ) ) ) . andReturn ( null ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; try ( com . facebook . buck . IDENT_1 . IDENT_2 service = METHOD_5 ( 1 ) ) { com . facebook . buck . IDENT_1 . IDENT_3 response = service . METHOD_1 ( null , null ) ; "<AssertPlaceHolder>" ; } org . easymock . EasyMock . verify ( IDENT_0 ) ; } METHOD_1 ( IDENT_4 extends org . apache . IDENT_5 . IDENT_6 , IDENT_7 extends org . apache . IDENT_5 . IDENT_6 ) { METHOD_6 ( com . facebook . buck . IDENT_1 . IDENT_8 . METHOD_7 ( IDENT_9 ) , com . facebook . buck . IDENT_1 . IDENT_10 . METHOD_8 ( IDENT_11 ) ) ; }
org . junit . Assert . assertNull ( response ) 