METHOD_0 ( ) { int IDENT_0 = 3 ; int IDENT_1 = 6 ; java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_1 ( ) ; java . util . concurrent . IDENT_4 < java . lang . Thread , com . facebook . buck . IDENT_5 . IDENT_6 > IDENT_7 = new java . util . concurrent . METHOD_2 ( ) ; java . util . concurrent . IDENT_8 IDENT_9 = new java . util . concurrent . METHOD_3 ( ( IDENT_0 + 1 ) ) ; com . facebook . buck . IDENT_5 . IDENT_10 pool = com . facebook . buck . IDENT_5 . IDENT_11 . METHOD_4 ( IDENT_0 , ( ) -> { IDENT_9 . METHOD_5 ( IDENT_9 . METHOD_6 ( ) ) ; IDENT_3 . METHOD_7 ( ) ; throw new java . io . IOException ( STRING_0 ) ; } ) ; for ( int i = 0 ; i < IDENT_1 ; ++ i ) { java . lang . Thread IDENT_12 = IDENT_13 . METHOD_8 ( com . facebook . buck . IDENT_5 . IDENT_11 . METHOD_9 ( pool , IDENT_7 ) ) ; IDENT_12 . METHOD_10 ( ( t , e ) -> { } ) ; } IDENT_9 . METHOD_5 ( IDENT_9 . METHOD_6 ( ) ) ; IDENT_13 . join ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return value ; }
org . junit . Assert . assertThat ( IDENT_3 . get ( ) , org . hamcrest . Matchers . equalTo ( IDENT_1 ) ) 