METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . function . IDENT_2 IDENT_3 = new net . IDENT_0 . IDENT_1 . function . METHOD_1 ( "foo" ) { @ net . IDENT_0 . IDENT_1 . Override public double apply ( double OP_0 values ) { return ( values [ 0 ] ) * ( java . lang . Math . Math . IDENT_4 ) ; } } ; net . IDENT_0 . IDENT_1 . function . METHOD_1 IDENT_5 = new net . IDENT_0 . IDENT_1 . function . METHOD_1 ( "bar" ) { @ net . IDENT_0 . IDENT_1 . Override public double apply ( double OP_0 values ) { return ( values [ 0 ] ) * ( java . lang . Math . Math . IDENT_6 ) ; } } ; double IDENT_7 = FLOAT_0 ; net . IDENT_0 . IDENT_1 . IDENT_8 e = new net . IDENT_0 . IDENT_1 . METHOD_2 ( STRING_0 ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( IDENT_3 , IDENT_5 ) . build ( ) . METHOD_5 ( STRING_1 , IDENT_7 ) ; double result = e . evaluate ( ) ; "<AssertPlaceHolder>" ; } evaluate ( ) { final net . IDENT_0 . IDENT_1 . IDENT_9 output = new net . IDENT_0 . IDENT_1 . METHOD_6 ( ) ; for ( int i = 0 ; i < ( tokens . length ) ; i ++ ) { net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 t = tokens [ i ] ; else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 . IDENT_12 ) ) { final java . lang . String name = ( ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_13 ) ( t ) ) . getName ( ) ; final java . lang . Double value = this . METHOD_3 . get ( name ) ; if ( value == null ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_2 + name ) + STRING_3 ) ) ; } output . METHOD_7 ( value ) ; } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 . IDENT_14 ) ) { net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_15 op = ( ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_15 ) ( t ) ) ; if ( ( output . size ( ) ) < ( op . METHOD_8 ( ) . METHOD_9 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_4 + ( op . METHOD_8 ( ) . METHOD_10 ( ) ) ) + STRING_5 ) ) ; } if ( ( op . METHOD_8 ( ) . METHOD_9 ( ) ) == 2 ) { double IDENT_16 = output . METHOD_11 ( ) ; double IDENT_17 = output . METHOD_11 ( ) ; output . METHOD_7 ( op . METHOD_8 ( ) . apply ( IDENT_17 , IDENT_16 ) ) ; } else if ( ( op . METHOD_8 ( ) . METHOD_9 ( ) ) == 1 ) { double IDENT_18 = output . METHOD_11 ( ) ; output . METHOD_7 ( op . METHOD_8 ( ) . apply ( IDENT_18 ) ) ; } } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 . IDENT_19 ) ) { net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_20 IDENT_21 = ( ( net . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_20 ) ( t ) ) ; final int IDENT_22 = IDENT_21 . METHOD_12 ( ) . METHOD_13 ( ) ; if ( ( output . size ( ) ) < IDENT_22 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_6 + ( IDENT_21 . METHOD_12 ( ) . getName ( ) ) ) + STRING_7 ) ) ; } double [ ] args = new double [ IDENT_22 ] ; for ( int j = IDENT_22 - 1 ; j >= 0 ; j OP_1 ) { args [ j ] = output . METHOD_11 ( ) ; } output . METHOD_7 ( IDENT_21 . METHOD_12 ( ) . apply ( args ) ) ; } } if ( ( output . size ( ) ) > 1 ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } return output . METHOD_11 ( ) ; }
org . junit . Assert . assertTrue ( ( result == ( ( ( java . lang . Math . Math . log ( IDENT_7 ) ) * ( java . lang . Math . Math . IDENT_4 ) ) * ( java . lang . Math . Math . IDENT_6 ) ) ) ) 