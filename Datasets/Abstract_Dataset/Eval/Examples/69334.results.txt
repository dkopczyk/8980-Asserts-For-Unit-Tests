METHOD_0 ( ) { final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 , 1 , true , ( ( net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_5 ) + 1 ) ) { @ net . IDENT_0 . IDENT_1 . Override public double apply ( double OP_0 args ) { final int IDENT_6 = ( ( int ) ( args [ 0 ] ) ) ; if ( ( ( double ) ( IDENT_6 ) ) != ( args [ 0 ] ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } if ( IDENT_6 < 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } double result = 1 ; for ( int i = 1 ; i <= IDENT_6 ; i ++ ) { result OP_1 i ; } return result ; } } ; double result = new net . IDENT_0 . IDENT_1 . METHOD_2 ( STRING_3 ) . METHOD_3 ( IDENT_4 ) . build ( ) . evaluate ( ) ; double expected = FLOAT_0 ; "<AssertPlaceHolder>" ; } evaluate ( ) { final net . IDENT_0 . IDENT_1 . IDENT_7 output = new net . IDENT_0 . IDENT_1 . METHOD_4 ( ) ; for ( int i = 0 ; i < ( tokens . length ) ; i ++ ) { net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 t = tokens [ i ] ; else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 . IDENT_10 ) ) { final java . lang . String name = ( ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_11 ) ( t ) ) . getName ( ) ; final java . lang . Double value = this . IDENT_12 . get ( name ) ; if ( value == null ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_4 + name ) + STRING_5 ) ) ; } output . METHOD_5 ( value ) ; } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 . IDENT_13 ) ) { net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_14 op = ( ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_14 ) ( t ) ) ; if ( ( output . size ( ) ) < ( op . METHOD_6 ( ) . METHOD_7 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_6 + ( op . METHOD_6 ( ) . METHOD_8 ( ) ) ) + STRING_7 ) ) ; } if ( ( op . METHOD_6 ( ) . METHOD_7 ( ) ) == 2 ) { double IDENT_15 = output . METHOD_9 ( ) ; double IDENT_16 = output . METHOD_9 ( ) ; output . METHOD_5 ( op . METHOD_6 ( ) . apply ( IDENT_16 , IDENT_15 ) ) ; } else if ( ( op . METHOD_6 ( ) . METHOD_7 ( ) ) == 1 ) { double IDENT_6 = output . METHOD_9 ( ) ; output . METHOD_5 ( op . METHOD_6 ( ) . apply ( IDENT_6 ) ) ; } } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 . IDENT_17 ) ) { net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_18 IDENT_19 = ( ( net . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_18 ) ( t ) ) ; final int IDENT_20 = IDENT_19 . METHOD_10 ( ) . METHOD_11 ( ) ; if ( ( output . size ( ) ) < IDENT_20 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_8 + ( IDENT_19 . METHOD_10 ( ) . getName ( ) ) ) + STRING_9 ) ) ; } double [ ] args = new double [ IDENT_20 ] ; for ( int j = IDENT_20 - 1 ; j >= 0 ; j OP_2 ) { args [ j ] = output . METHOD_9 ( ) ; } output . METHOD_5 ( IDENT_19 . METHOD_10 ( ) . apply ( args ) ) ; } } if ( ( output . size ( ) ) > 1 ) { throw new java . lang . IllegalArgumentException ( STRING_10 ) ; } return output . METHOD_9 ( ) ; }
org . junit . Assert . assertEquals ( expected , result , 0.0 ) 