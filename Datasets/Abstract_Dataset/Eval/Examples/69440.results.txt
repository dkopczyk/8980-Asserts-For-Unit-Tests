METHOD_0 ( ) { IDENT_0 . IDENT_1 IDENT_2 = new IDENT_0 . METHOD_1 ( STRING_0 , java . util . Locale . IDENT_3 ) ; java . util . Map < java . lang . String , java . util . Map < java . lang . String , java . lang . Object > > obj = java . util . Collections . METHOD_2 ( "a" , java . util . Collections . METHOD_2 ( "b" , STRING_1 ) ) ; java . lang . String IDENT_4 = IDENT_2 . format ( obj ) ; "<AssertPlaceHolder>" ; } format ( java . lang . Object ) { java . util . Map < java . lang . String , java . lang . Object > IDENT_5 ; java . lang . Object IDENT_6 = mapper . METHOD_3 ( ) . stream ( ) . METHOD_4 ( ) . METHOD_5 ( "" ) ; if ( ( IDENT_6 instanceof java . lang . IDENT_7 ) && ( ! ( IDENT_8 instanceof java . util . List ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } else if ( IDENT_8 instanceof java . util . Map ) { IDENT_5 = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_8 ) ) ; } else { IDENT_5 = java . util . Collections . METHOD_6 ( ) ; } java . lang . Object [ ] IDENT_9 = new java . lang . Object [ mapper . size ( ) ] ; for ( Map . Entry < java . lang . Object , java . lang . Integer > mapping : mapper . entrySet ( ) ) { if ( STRING_3 . equals ( mapping . getKey ( ) ) ) { IDENT_9 [ mapping . getValue ( ) ] = METHOD_7 ( IDENT_8 ) ; continue ; } if ( IDENT_6 instanceof java . lang . IDENT_7 ) { int i = ( ( java . lang . IDENT_7 ) ( mapping . getKey ( ) ) ) . METHOD_8 ( ) ; int j = ( ( java . lang . IDENT_7 ) ( mapping . getValue ( ) ) ) . METHOD_8 ( ) ; java . util . List < java . lang . Object > l = ( ( java . util . List < java . lang . Object > ) ( IDENT_8 ) ) ; if ( j > ( l . size ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_4 ) ; } IDENT_9 [ i ] = METHOD_7 ( l . get ( ( j - 1 ) ) ) ; } else { java . lang . String [ ] path = mapping . getKey ( ) . toString ( ) . split ( STRING_5 ) ; if ( ( path . length ) == 1 ) { if ( ! ( IDENT_5 . containsKey ( mapping . getKey ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_6 + ( mapping . getKey ( ) ) ) ) ; } IDENT_9 [ mapping . getValue ( ) ] = METHOD_7 ( IDENT_5 . get ( mapping . getKey ( ) ) ) ; } else { java . util . Map < java . lang . String , java . lang . Object > IDENT_10 = IDENT_5 ; java . lang . String key = path [ 0 ] ; for ( int i = 0 ; i < ( ( path . length ) - 1 ) ; i ++ ) { java . util . Map < java . lang . String , java . lang . Object > next = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_10 . get ( key ) ) ) ; if ( ( next == null ) || ( ! ( next instanceof java . util . Map ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_6 + ( mapping . getKey ( ) ) ) ) ; } IDENT_10 = next ; key = path [ ( i + 1 ) ] ; } if ( IDENT_10 != null ) { IDENT_9 [ mapping . getValue ( ) ] = METHOD_7 ( IDENT_10 . get ( key ) ) ; } } } } return IDENT_11 . format ( IDENT_9 , new java . lang . StringBuffer ( ) , new java . text . METHOD_9 ( 0 ) ) . toString ( ) ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_4 ) 