METHOD_0 ( ) { final java . util . Collection < java . lang . Throwable > IDENT_0 = new java . util . ArrayList ( ) ; when ( IDENT_1 . METHOD_1 ( any ( org . IDENT_2 . kernel . api . IDENT_3 . class ) , any ( java . io . File . class ) ) ) . thenReturn ( IDENT_0 ) ; final java . lang . String IDENT_4 = ( ( java . lang . String ) ( IDENT_5 . METHOD_2 ( null ) . METHOD_3 ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . InputStream ) { java . io . File IDENT_6 ; if ( null != IDENT_7 ) { final java . lang . String body = org . apache . commons . io . IDENT_8 . toString ( IDENT_7 ) . trim ( ) ; IDENT_6 = new java . io . File ( body . trim ( ) ) ; if ( body . isEmpty ( ) ) { IDENT_6 = METHOD_4 ( ) ; } else if ( ( ! ( IDENT_6 . exists ( ) ) ) || ( ! ( IDENT_6 . METHOD_5 ( ) ) ) ) { throw new javax . ws . rs . METHOD_6 ( METHOD_7 ( ) . entity ( ( STRING_0 + ( IDENT_6 . getAbsolutePath ( ) ) ) ) . build ( ) ) ; } } else { IDENT_6 = METHOD_4 ( ) ; } org . IDENT_2 . http . api . repository . IDENT_9 . LOGGER . debug ( STRING_1 , IDENT_6 . getAbsolutePath ( ) ) ; final java . util . Collection < java . lang . Throwable > IDENT_0 = IDENT_10 . METHOD_1 ( session . METHOD_8 ( ) , IDENT_6 ) ; if ( ! ( IDENT_0 . isEmpty ( ) ) ) { org . IDENT_2 . http . api . repository . IDENT_9 . LOGGER . error ( STRING_2 ) ; final java . lang . String output = IDENT_0 . stream ( ) . map ( Throwable :: getMessage ) . METHOD_9 ( org . IDENT_2 . http . api . repository . IDENT_9 . LOGGER :: error ) . collect ( java . util . stream . IDENT_11 . METHOD_10 ( "\n" ) ) ; throw new javax . ws . rs . METHOD_6 ( METHOD_7 ( ) . entity ( output ) . build ( ) ) ; } return METHOD_11 ( ) . header ( STRING_3 , STRING_4 ) . entity ( IDENT_6 . METHOD_12 ( ) ) . build ( ) ; }
org . junit . Assert . assertNotNull ( IDENT_4 ) 