METHOD_0 ( ) { when ( IDENT_0 . getPath ( ) ) . METHOD_1 ( new javax . jcr . METHOD_2 ( STRING_0 ) ) ; final java . util . stream . IDENT_1 < org . IDENT_2 . kernel . api . IDENT_3 . IDENT_4 > stream = IDENT_5 . apply ( IDENT_6 ) ; "<AssertPlaceHolder>" ; stream . collect ( toList ( ) ) ; } apply ( javax . jcr . IDENT_7 ) { try { final org . apache . jena . graph . Node subject = IDENT_8 . convert ( p . METHOD_3 ( ) ) . METHOD_4 ( ) ; final org . apache . jena . graph . Node IDENT_9 = org . IDENT_2 . kernel . IDENT_10 . IDENT_11 . impl . IDENT_12 . IDENT_13 . IDENT_14 . convert ( p ) . METHOD_4 ( ) ; final java . lang . String IDENT_15 = p . getName ( ) ; return METHOD_5 ( new org . IDENT_2 . kernel . IDENT_10 . IDENT_11 . impl . IDENT_12 . METHOD_6 ( p ) ) . filter ( this :: IDENT_16 ) . map ( ( v ) -> { final org . apache . jena . graph . Node object = IDENT_17 . convert ( v ) . METHOD_4 ( ) ; if ( object . METHOD_7 ( ) ) { final int i = IDENT_15 . indexOf ( STRING_1 ) ; if ( i > 0 ) { final org . apache . jena . graph . impl . IDENT_18 IDENT_19 = object . METHOD_8 ( ) ; final org . apache . jena . IDENT_20 . IDENT_21 IDENT_22 = IDENT_19 . METHOD_9 ( ) ; final java . lang . String IDENT_23 = IDENT_22 . METHOD_10 ( ) ; if ( ( IDENT_23 . isEmpty ( ) ) || ( IDENT_22 . equals ( org . IDENT_2 . kernel . IDENT_10 . IDENT_11 . impl . IDENT_12 . IDENT_24 ) ) ) { final java . lang . String lang = IDENT_15 . substring ( ( i + 1 ) ) ; final java . lang . String IDENT_25 = IDENT_19 . METHOD_11 ( ) ; return create ( subject , IDENT_9 , METHOD_12 ( IDENT_25 , lang , IDENT_22 ) ) ; } } } return create ( subject , IDENT_9 , object ) ; } ) ; } catch ( final javax . jcr . METHOD_2 e ) { throw new org . IDENT_2 . kernel . api . exception . METHOD_13 ( e ) ; } }
org . junit . Assert . assertNotNull ( stream ) 