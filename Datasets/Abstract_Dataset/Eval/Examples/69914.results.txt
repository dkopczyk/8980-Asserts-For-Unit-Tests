METHOD_0 ( ) { java . lang . String IDENT_0 = com . github . IDENT_1 . maven . IDENT_2 . util . IDENT_3 . METHOD_1 ( java . util . Collections . emptyList ( ) , java . util . Collections . emptyList ( ) , "" , "" ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Collection , java . util . Collection , java . lang . String , java . lang . String ) { com . github . IDENT_1 . maven . IDENT_2 . util . IDENT_3 . IDENT_4 context = new com . github . IDENT_1 . maven . IDENT_2 . util . IDENT_3 . METHOD_2 ( actual , IDENT_5 , IDENT_6 , IDENT_7 ) ; int offset = 0 ; for ( IDENT_8 . IDENT_9 < java . lang . String > IDENT_10 : context . IDENT_11 ) { IDENT_8 . IDENT_12 < java . lang . String > original = IDENT_10 . METHOD_3 ( ) ; IDENT_8 . IDENT_12 < java . lang . String > IDENT_13 = IDENT_10 . METHOD_4 ( ) ; int IDENT_14 = ( original . METHOD_5 ( ) ) + offset ; switch ( IDENT_10 . getType ( ) ) { case IDENT_15 : offset += context . METHOD_6 ( IDENT_14 , IDENT_13 . size ( ) ) ; context . METHOD_7 ( IDENT_14 , IDENT_13 . METHOD_8 ( ) ) ; break ; case IDENT_16 : int IDENT_17 = ( IDENT_13 . size ( ) ) - ( original . size ( ) ) ; if ( IDENT_17 > 0 ) { offset += context . METHOD_6 ( ( IDENT_14 + ( original . size ( ) ) ) , IDENT_17 ) ; } else { context . METHOD_9 ( ( IDENT_14 + ( IDENT_13 . size ( ) ) ) , java . lang . Math . METHOD_10 ( IDENT_17 ) ) ; } context . METHOD_11 ( IDENT_14 , original . METHOD_8 ( ) ) ; context . METHOD_7 ( IDENT_14 , IDENT_13 . METHOD_8 ( ) ) ; break ; case IDENT_18 : context . METHOD_11 ( IDENT_14 , original . METHOD_8 ( ) ) ; context . METHOD_9 ( IDENT_14 , original . size ( ) ) ; break ; default : throw new java . lang . IllegalStateException ( ( STRING_0 + ( IDENT_10 . getType ( ) ) ) ) ; } } return context . toString ( ) ; }
org . junit . Assert . assertEquals ( "" , METHOD_1 ) 