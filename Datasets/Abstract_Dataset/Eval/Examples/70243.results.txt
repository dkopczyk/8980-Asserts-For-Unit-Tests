METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . text . IDENT_0 IDENT_1 = new java . text . METHOD_1 ( STRING_1 ) ; java . text . IDENT_0 IDENT_2 = new java . text . METHOD_1 ( STRING_2 ) ; net . IDENT_3 . time . IDENT_4 IDENT_5 = IDENT_6 . METHOD_2 ( ) ; for ( int IDENT_7 = ( IDENT_5 . METHOD_3 ( ) ) - 2 ; IDENT_7 < ( ( IDENT_5 . METHOD_3 ( ) ) - 1 ) ; IDENT_7 ++ ) { double IDENT_8 = IDENT_5 . getTime ( 3 ) ; double IDENT_9 = IDENT_5 . getTime ( ( IDENT_7 + 1 ) ) ; IDENT_8 += ( ( IDENT_5 . getTime ( 4 ) ) - ( IDENT_5 . getTime ( 3 ) ) ) / 3 ; IDENT_9 += ( ( IDENT_5 . getTime ( 4 ) ) - ( IDENT_5 . getTime ( 3 ) ) ) / 3 ; double IDENT_10 = IDENT_9 - IDENT_8 ; net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 index = new net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 . METHOD_4 ( 0.0 , IDENT_10 ) ; net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . components . IDENT_16 IDENT_17 = new net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . components . METHOD_5 ( IDENT_8 , IDENT_9 , IDENT_8 , IDENT_9 , new net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . components . METHOD_6 ( 1.0 ) , index , IDENT_10 , true , true , false ) ; double value = IDENT_17 . getValue ( IDENT_6 ) ; final double IDENT_18 = ( 1.0 / FLOAT_0 ) / FLOAT_0 ; double IDENT_19 = ( ( IDENT_18 * ( IDENT_20 ) ) / ( java . lang . Math . METHOD_7 ( ( ( IDENT_6 . METHOD_8 ( ) ) / FLOAT_1 ) ) ) ) + FLOAT_2 ; if ( ( IDENT_21 ) == ( net . IDENT_3 . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_22 . IDENT_23 . IDENT_24 ) ) { IDENT_19 += ( ( 1.0 / FLOAT_0 ) / FLOAT_0 ) * ( IDENT_9 - IDENT_8 ) ; } System . out . println ( ( ( ( ( ( ( ( IDENT_1 . format ( IDENT_8 ) ) + STRING_3 ) + ( IDENT_1 . format ( IDENT_9 ) ) ) + STRING_3 ) + ( IDENT_2 . format ( value ) ) ) + STRING_4 ) + ( IDENT_2 . format ( IDENT_19 ) ) ) ) ; "<AssertPlaceHolder>" ; } System . out . println ( ) ; } METHOD_8 ( ) { return IDENT_25 . METHOD_8 ( ) ; }
org . junit . Assert . assertEquals ( 0.0 , ( value / IDENT_10 ) , IDENT_19 ) 