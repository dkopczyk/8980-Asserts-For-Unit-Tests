METHOD_0 ( ) { IDENT_0 . METHOD_1 ( org . finra . herd . dao . IDENT_1 . METHOD_2 ( ) ) ; IDENT_0 . METHOD_1 ( org . finra . herd . dao . IDENT_1 . toLowerCase ( ) ) ; try { IDENT_2 . METHOD_3 ( org . finra . herd . dao . IDENT_1 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalArgumentException e ) { "<AssertPlaceHolder>" ; } } METHOD_3 ( java . lang . String ) { javax . persistence . criteria . IDENT_3 builder = IDENT_4 . METHOD_4 ( ) ; javax . persistence . criteria . IDENT_5 < org . finra . herd . model . jpa . IDENT_6 > criteria = builder . METHOD_5 ( org . finra . herd . model . jpa . IDENT_6 . class ) ; javax . persistence . criteria . IDENT_7 < org . finra . herd . model . jpa . IDENT_6 > IDENT_8 = criteria . from ( org . finra . herd . model . jpa . IDENT_6 . class ) ; javax . persistence . criteria . IDENT_9 IDENT_10 = builder . equal ( builder . METHOD_6 ( IDENT_8 . get ( IDENT_11 . code ) ) , code . METHOD_2 ( ) ) ; criteria . select ( IDENT_8 ) . METHOD_7 ( IDENT_10 ) ; return METHOD_8 ( criteria , java . lang . String . format ( STRING_0 , code ) ) ; }
org . junit . Assert . assertEquals ( java . lang . String . format ( STRING_0 , org . finra . herd . dao . IDENT_1 ) , e . getMessage ( ) ) 