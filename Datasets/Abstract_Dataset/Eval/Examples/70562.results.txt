METHOD_0 ( ) { org . finra . herd . model . api . xml . IDENT_0 IDENT_1 = new org . finra . herd . model . api . xml . METHOD_1 ( IDENT_2 , IDENT_3 ) ; org . finra . herd . model . api . xml . IDENT_4 request = new org . finra . herd . model . api . xml . METHOD_2 ( IDENT_1 , java . util . Arrays . asList ( org . finra . herd . rest . IDENT_5 ) ) ; org . finra . herd . model . api . xml . IDENT_6 IDENT_7 = new org . finra . herd . model . api . xml . METHOD_3 ( ) ; IDENT_7 . METHOD_4 ( IDENT_1 ) ; IDENT_7 . METHOD_5 ( java . util . Arrays . asList ( org . finra . herd . rest . IDENT_5 ) ) ; when ( IDENT_8 . METHOD_6 ( request ) ) . thenReturn ( IDENT_7 ) ; org . finra . herd . model . api . xml . METHOD_3 response = IDENT_9 . METHOD_6 ( request ) ; verify ( IDENT_8 ) . METHOD_6 ( request ) ; METHOD_7 ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . finra . herd . model . api . xml . METHOD_2 ) { METHOD_8 ( request ) ; org . finra . herd . model . jpa . IDENT_10 IDENT_11 = IDENT_12 . METHOD_9 ( request . METHOD_10 ( ) ) ; java . util . Map < java . lang . String , org . finra . herd . model . jpa . IDENT_13 > IDENT_14 = METHOD_11 ( IDENT_11 . METHOD_12 ( ) ) ; for ( java . lang . String IDENT_15 : request . METHOD_12 ( ) ) { if ( IDENT_14 . containsKey ( IDENT_15 ) ) { throw new org . finra . herd . model . METHOD_13 ( java . lang . String . format ( STRING_0 , IDENT_15 , IDENT_11 . getName ( ) ) ) ; } } java . util . Collection < org . finra . herd . model . jpa . IDENT_13 > IDENT_16 = new java . util . ArrayList ( ) ; for ( java . lang . String IDENT_15 : request . METHOD_12 ( ) ) { org . finra . herd . model . jpa . IDENT_13 IDENT_17 = new org . finra . herd . model . jpa . METHOD_14 ( ) ; IDENT_16 . add ( IDENT_17 ) ; IDENT_17 . METHOD_15 ( IDENT_11 ) ; IDENT_17 . METHOD_16 ( IDENT_15 ) ; IDENT_18 . METHOD_17 ( IDENT_17 ) ; } IDENT_18 . METHOD_17 ( IDENT_11 ) ; return METHOD_18 ( IDENT_11 , IDENT_16 ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , response ) 