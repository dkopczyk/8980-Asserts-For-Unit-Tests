METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . finra . herd . model . api . xml . IDENT_1 IDENT_2 = new org . finra . herd . model . api . xml . METHOD_1 ( ) ; when ( IDENT_3 . METHOD_2 ( any ( ) ) ) . thenReturn ( IDENT_2 ) ; org . finra . herd . model . api . xml . METHOD_1 IDENT_4 = IDENT_5 . METHOD_2 ( IDENT_0 ) ; verify ( IDENT_3 ) . METHOD_2 ( IDENT_0 ) ; METHOD_3 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { org . springframework . util . Assert . METHOD_4 ( IDENT_6 , STRING_1 ) ; org . finra . herd . model . jpa . IDENT_7 IDENT_8 = IDENT_9 . METHOD_5 ( IDENT_6 . trim ( ) ) ; java . util . List < org . finra . herd . model . jpa . IDENT_10 > IDENT_11 = METHOD_6 ( IDENT_8 ) ; org . finra . herd . model . api . xml . METHOD_1 result = new org . finra . herd . model . api . xml . METHOD_1 ( IDENT_8 . getCode ( ) , new java . util . ArrayList ( ) ) ; for ( org . finra . herd . model . jpa . IDENT_10 IDENT_12 : IDENT_11 ) { result . METHOD_7 ( ) . add ( new org . finra . herd . model . api . xml . METHOD_8 ( IDENT_12 . METHOD_9 ( ) , IDENT_12 . METHOD_10 ( ) ) ) ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_4 ) 