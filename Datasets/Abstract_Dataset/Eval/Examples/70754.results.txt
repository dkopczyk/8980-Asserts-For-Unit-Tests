METHOD_0 ( ) { org . finra . herd . model . api . xml . IDENT_0 IDENT_1 = new org . finra . herd . model . api . xml . METHOD_1 ( IDENT_2 , IDENT_3 , IDENT_4 ) ; org . finra . herd . model . api . xml . IDENT_5 storage = new org . finra . herd . model . api . xml . METHOD_2 ( IDENT_2 , IDENT_3 , IDENT_4 ) ; when ( IDENT_6 . METHOD_3 ( IDENT_1 ) ) . thenReturn ( storage ) ; org . finra . herd . model . api . xml . METHOD_2 result = IDENT_7 . METHOD_3 ( IDENT_1 ) ; verify ( IDENT_6 ) . METHOD_3 ( IDENT_1 ) ; METHOD_4 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . finra . herd . model . api . xml . METHOD_1 ) { METHOD_5 ( IDENT_1 ) ; org . finra . herd . model . jpa . IDENT_8 IDENT_9 = IDENT_10 . METHOD_6 ( IDENT_1 . METHOD_7 ( ) ) ; org . finra . herd . model . jpa . IDENT_11 IDENT_12 = IDENT_13 . METHOD_8 ( IDENT_1 . getName ( ) ) ; if ( IDENT_12 != null ) { throw new org . finra . herd . model . METHOD_9 ( java . lang . String . format ( STRING_0 , IDENT_1 . getName ( ) ) ) ; } IDENT_12 = new org . finra . herd . model . jpa . METHOD_10 ( ) ; IDENT_12 . setName ( IDENT_1 . getName ( ) ) ; IDENT_12 . METHOD_11 ( IDENT_9 ) ; if ( ! ( org . springframework . util . IDENT_14 . isEmpty ( IDENT_1 . METHOD_12 ( ) ) ) ) { java . util . List < org . finra . herd . model . jpa . IDENT_15 > IDENT_16 = new java . util . ArrayList ( ) ; IDENT_12 . METHOD_13 ( IDENT_16 ) ; for ( org . finra . herd . model . api . xml . IDENT_17 IDENT_18 : IDENT_1 . METHOD_12 ( ) ) { org . finra . herd . model . jpa . IDENT_15 IDENT_19 = new org . finra . herd . model . jpa . METHOD_14 ( ) ; IDENT_16 . add ( IDENT_19 ) ; IDENT_19 . METHOD_15 ( IDENT_12 ) ; IDENT_19 . setName ( IDENT_18 . getName ( ) ) ; IDENT_19 . setValue ( IDENT_18 . getValue ( ) ) ; } } IDENT_12 = IDENT_13 . METHOD_16 ( IDENT_12 ) ; return METHOD_17 ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( storage , result ) 