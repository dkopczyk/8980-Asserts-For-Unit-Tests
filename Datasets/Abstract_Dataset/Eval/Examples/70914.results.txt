METHOD_0 ( ) { org . finra . herd . model . dto . IDENT_0 IDENT_1 = new org . finra . herd . model . dto . METHOD_1 ( ) ; java . util . List < com . amazonaws . services . IDENT_2 . model . IDENT_3 > IDENT_4 = java . util . Collections . singletonList ( new com . amazonaws . services . IDENT_2 . model . METHOD_2 ( ) ) ; when ( IDENT_5 . METHOD_3 ( IDENT_1 , true ) ) . thenReturn ( IDENT_4 ) ; java . util . List < com . amazonaws . services . IDENT_2 . model . METHOD_2 > result = IDENT_6 . METHOD_3 ( IDENT_1 , true ) ; verify ( IDENT_5 ) . METHOD_3 ( IDENT_1 , true ) ; METHOD_4 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . finra . herd . model . dto . METHOD_1 , boolean ) { org . springframework . util . Assert . METHOD_5 ( ( ! ( METHOD_6 ( params . METHOD_7 ( ) ) ) ) , STRING_0 ) ; com . amazonaws . services . IDENT_2 . IDENT_7 IDENT_8 = METHOD_8 ( params ) ; java . util . List < com . amazonaws . services . IDENT_2 . model . METHOD_2 > IDENT_4 = new java . util . ArrayList ( ) ; try { com . amazonaws . services . IDENT_2 . model . IDENT_9 IDENT_10 = new com . amazonaws . services . IDENT_2 . model . METHOD_9 ( ) . METHOD_10 ( params . METHOD_11 ( ) ) . METHOD_12 ( params . METHOD_7 ( ) ) ; com . amazonaws . services . IDENT_2 . model . IDENT_11 IDENT_12 ; do { IDENT_12 = IDENT_13 . METHOD_13 ( IDENT_10 , IDENT_8 ) ; for ( com . amazonaws . services . IDENT_2 . model . METHOD_2 IDENT_14 : IDENT_12 . METHOD_14 ( ) ) { if ( ! ( ( IDENT_15 && ( IDENT_14 . getKey ( ) . METHOD_15 ( "/" ) ) ) && ( ( IDENT_14 . METHOD_16 ( ) ) == 0L ) ) ) { IDENT_4 . add ( IDENT_14 ) ; } } IDENT_10 . METHOD_17 ( IDENT_12 . METHOD_18 ( ) ) ; } while ( IDENT_12 . METHOD_19 ( ) ) ; } catch ( com . amazonaws . services . IDENT_2 . model . IDENT_16 IDENT_17 ) { if ( IDENT_18 . IDENT_19 . equals ( IDENT_17 . METHOD_20 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_1 + ( params . METHOD_11 ( ) ) ) + STRING_2 ) , IDENT_17 ) ; } throw new java . lang . IllegalStateException ( STRING_3 , IDENT_17 ) ; } catch ( com . amazonaws . IDENT_20 e ) { throw new java . lang . IllegalStateException ( java . lang . String . format ( STRING_4 , params . METHOD_7 ( ) , params . METHOD_11 ( ) , e . getMessage ( ) ) , e ) ; } finally { IDENT_8 . METHOD_21 ( ) ; } return IDENT_4 ; }
org . junit . Assert . assertEquals ( IDENT_4 , result ) 