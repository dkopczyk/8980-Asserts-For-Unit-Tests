METHOD_0 ( ) { javax . xml . IDENT_0 . IDENT_1 IDENT_2 = javax . xml . IDENT_0 . IDENT_3 . newInstance ( ) . METHOD_1 ( STRING_0 ) ; javax . xml . IDENT_0 . IDENT_1 IDENT_4 = javax . xml . IDENT_0 . IDENT_3 . newInstance ( ) . METHOD_1 ( STRING_1 ) ; org . finra . herd . model . api . xml . IDENT_5 IDENT_6 = new org . finra . herd . model . api . xml . METHOD_2 ( IDENT_2 , IDENT_4 ) ; java . util . List < org . finra . herd . model . api . xml . IDENT_7 > IDENT_8 = java . util . Arrays . asList ( new org . finra . herd . model . api . xml . METHOD_3 ( IDENT_9 , IDENT_10 ) , new org . finra . herd . model . api . xml . METHOD_3 ( IDENT_11 , IDENT_12 ) ) ; org . finra . herd . model . api . xml . IDENT_13 IDENT_14 = new org . finra . herd . model . api . xml . METHOD_4 ( IDENT_15 , IDENT_16 , IDENT_17 , IDENT_18 , IDENT_19 , IDENT_20 , IDENT_6 , IDENT_8 , IDENT_21 , IDENT_22 ) ; org . finra . herd . model . api . xml . METHOD_4 IDENT_23 = ( ( org . finra . herd . model . api . xml . METHOD_4 ) ( IDENT_14 . METHOD_5 ( ) ) ) ; IDENT_24 . METHOD_6 ( IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . finra . herd . model . api . xml . METHOD_4 ) { org . springframework . util . Assert . METHOD_7 ( IDENT_14 , STRING_2 ) ; IDENT_14 . METHOD_8 ( IDENT_25 . METHOD_9 ( STRING_3 , IDENT_14 . METHOD_10 ( ) ) ) ; IDENT_14 . METHOD_11 ( IDENT_25 . METHOD_9 ( STRING_4 , IDENT_14 . METHOD_12 ( ) ) ) ; if ( ( IDENT_14 . METHOD_13 ( ) ) != null ) { IDENT_14 . METHOD_14 ( IDENT_14 . METHOD_13 ( ) . trim ( ) ) ; } if ( ( IDENT_14 . METHOD_15 ( ) ) != null ) { IDENT_14 . METHOD_16 ( IDENT_14 . METHOD_15 ( ) . trim ( ) ) ; } if ( org . apache . commons . IDENT_26 . IDENT_27 . METHOD_17 ( IDENT_14 . METHOD_18 ( ) ) ) { IDENT_28 . METHOD_19 ( IDENT_14 . METHOD_18 ( ) , null , false ) ; for ( org . finra . herd . model . api . xml . IDENT_29 IDENT_30 : IDENT_14 . METHOD_18 ( ) ) { java . util . List < java . lang . String > IDENT_31 = IDENT_30 . METHOD_20 ( ) ; org . finra . herd . model . api . xml . IDENT_32 IDENT_33 = IDENT_30 . METHOD_21 ( ) ; if ( ( org . apache . commons . IDENT_26 . IDENT_27 . isEmpty ( IDENT_31 ) ) && ( IDENT_33 == null ) ) { throw new java . lang . IllegalArgumentException ( STRING_5 ) ; } } } if ( ( IDENT_14 . METHOD_22 ( ) ) != null ) { IDENT_28 . METHOD_23 ( IDENT_14 . METHOD_22 ( ) ) ; } if ( org . apache . commons . IDENT_26 . IDENT_27 . METHOD_17 ( IDENT_14 . METHOD_24 ( ) ) ) { for ( org . finra . herd . model . api . xml . METHOD_3 IDENT_34 : IDENT_14 . METHOD_24 ( ) ) { if ( ( IDENT_34 . METHOD_25 ( ) ) != null ) { IDENT_34 . METHOD_26 ( IDENT_34 . METHOD_25 ( ) . trim ( ) ) ; } if ( ( org . apache . commons . lang . StringUtils . METHOD_27 ( IDENT_34 . METHOD_25 ( ) ) ) && ( org . apache . commons . lang . StringUtils . isEmpty ( IDENT_34 . METHOD_28 ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_6 ) ; } } } }
org . junit . Assert . assertEquals ( IDENT_23 , IDENT_14 ) 