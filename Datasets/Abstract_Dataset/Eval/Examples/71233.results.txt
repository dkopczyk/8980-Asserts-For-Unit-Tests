METHOD_0 ( ) { final short [ ] array = null ; org . IDENT_0 . util . Arrays . METHOD_1 ( array , 1 , 1 , 1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( T , int , int , int ) { if ( array == null ) { return ; } if ( ! ( array . getClass ( ) . METHOD_2 ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } int length = org . IDENT_0 . util . Arrays . METHOD_3 ( array ) ; if ( ( ( length == 0 ) || ( IDENT_1 >= ( length - 1 ) ) ) || ( length <= 0 ) ) { return ; } if ( IDENT_1 < 0 ) { IDENT_1 = 0 ; } if ( IDENT_2 >= length ) { IDENT_2 = length ; } int n = IDENT_2 - IDENT_1 ; if ( n <= 1 ) { return ; } offset OP_0 n ; if ( offset < 0 ) { offset += n ; } while ( ( n > 1 ) && ( offset > 0 ) ) { final int IDENT_3 = n - offset ; if ( offset > IDENT_3 ) { org . IDENT_0 . util . Arrays . METHOD_4 ( array , IDENT_1 , ( ( IDENT_1 + n ) - IDENT_3 ) , IDENT_3 ) ; n = offset ; offset OP_1 IDENT_3 ; } else if ( offset < IDENT_3 ) { org . IDENT_0 . util . Arrays . METHOD_4 ( array , IDENT_1 , ( IDENT_1 + IDENT_3 ) , offset ) ; IDENT_1 += offset ; n = IDENT_3 ; } else { org . IDENT_0 . util . Arrays . METHOD_4 ( array , IDENT_1 , ( IDENT_1 + IDENT_3 ) , offset ) ; break ; } } }
org . junit . Assert . assertNull ( array ) 