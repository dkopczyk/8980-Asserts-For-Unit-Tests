METHOD_0 ( ) { final java . util . Map < java . lang . String , java . lang . Object > base = new com . google . IDENT_0 . database . METHOD_1 ( ) . put ( STRING_0 , STRING_1 ) . put ( STRING_2 , STRING_3 ) . build ( ) ; java . util . Map < com . google . IDENT_0 . database . IDENT_1 . IDENT_2 , com . google . IDENT_0 . database . IDENT_1 . Node > IDENT_3 = new java . util . HashMap ( ) ; IDENT_3 . put ( com . google . IDENT_0 . database . IDENT_1 . IDENT_2 . METHOD_2 ( STRING_0 ) , com . google . IDENT_0 . database . IDENT_1 . IDENT_4 . METHOD_3 ( STRING_4 ) ) ; IDENT_3 . put ( com . google . IDENT_0 . database . IDENT_1 . IDENT_2 . METHOD_2 ( STRING_2 ) , com . google . IDENT_0 . database . IDENT_1 . IDENT_5 . METHOD_4 ( ) ) ; IDENT_3 . put ( com . google . IDENT_0 . database . IDENT_1 . IDENT_2 . METHOD_2 ( STRING_5 ) , com . google . IDENT_0 . database . IDENT_1 . IDENT_4 . METHOD_3 ( STRING_6 ) ) ; com . google . IDENT_0 . database . core . IDENT_6 IDENT_7 = com . google . IDENT_0 . database . core . IDENT_6 . METHOD_5 ( ) ; IDENT_7 = IDENT_7 . METHOD_6 ( com . google . IDENT_0 . database . core . Path . METHOD_7 ( ) , com . google . IDENT_0 . database . core . IDENT_6 . METHOD_8 ( IDENT_3 ) ) ; IDENT_7 = IDENT_7 . METHOD_9 ( new com . google . IDENT_0 . database . core . Path ( STRING_2 ) ) ; com . google . IDENT_0 . database . IDENT_1 . Node IDENT_8 = com . google . IDENT_0 . database . IDENT_1 . IDENT_4 . METHOD_3 ( base ) ; java . util . Map < java . lang . String , java . lang . Object > expected = new com . google . IDENT_0 . database . METHOD_1 ( ) . put ( STRING_0 , STRING_4 ) . put ( STRING_2 , STRING_3 ) . put ( STRING_5 , STRING_6 ) . build ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Object ) { return com . google . IDENT_0 . database . IDENT_1 . IDENT_4 . METHOD_3 ( value , com . google . IDENT_0 . database . IDENT_1 . IDENT_9 . METHOD_10 ( ) ) ; }
org . junit . Assert . assertEquals ( com . google . IDENT_0 . database . IDENT_1 . IDENT_4 . METHOD_3 ( expected ) , IDENT_7 . apply ( IDENT_8 ) ) 