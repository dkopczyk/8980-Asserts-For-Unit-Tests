METHOD_0 ( ) { METHOD_1 ( buffer , 0 , messages [ ( ( IDENT_0 ) - 1 ) ] ) ; buffer . METHOD_2 ( ( ( buffer . position ( ) ) - 1 ) ) ; buffer . METHOD_3 ( ) ; IDENT_1 = new io . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( buffer ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . function . IDENT_5 ) { java . util . IDENT_6 . METHOD_6 ( action ) ; int IDENT_7 = ( offset ) + ( IDENT_8 . IDENT_9 ) ; if ( IDENT_7 > ( buffer . METHOD_2 ( ) ) ) { return false ; } IDENT_10 . METHOD_7 ( buffer ) ; IDENT_10 . METHOD_8 ( ) ; final int IDENT_11 = IDENT_10 . METHOD_9 ( ) ; int IDENT_12 = ( ( offset ) + ( IDENT_8 . IDENT_9 ) ) + IDENT_11 ; if ( ( IDENT_11 <= 0 ) || ( IDENT_12 > ( buffer . METHOD_2 ( ) ) ) ) { return false ; } java . nio . ByteBuffer message = buffer . METHOD_10 ( ) ; message . order ( IDENT_13 ) ; message . METHOD_2 ( IDENT_12 ) ; action . accept ( message ) ; buffer . position ( IDENT_12 ) ; offset = IDENT_12 ; buffer . order ( IDENT_13 ) ; return true ; }
org . junit . Assert . assertFalse ( IDENT_1 . METHOD_5 ( new java . util . function . IDENT_5 < java . nio . ByteBuffer > ( ) { public void accept ( java . nio . ByteBuffer message ) { } } ) ) 