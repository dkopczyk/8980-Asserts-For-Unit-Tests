METHOD_0 ( ) { IDENT_0 = new net . IDENT_1 . IDENT_0 . METHOD_1 ( client , net . IDENT_1 . IDENT_0 . IDENT_2 . table , net . IDENT_1 . IDENT_0 . IDENT_2 . IDENT_3 , 3 ) ; when ( client . get ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_2 ( ) ) ) . thenReturn ( com . IDENT_4 . IDENT_5 . IDENT_6 . < java . util . ArrayList < net . IDENT_1 . IDENT_0 . IDENT_7 > > METHOD_3 ( null ) ) ; net . IDENT_1 . IDENT_0 . IDENT_8 IDENT_9 = net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_4 ( ) ; when ( client . METHOD_5 ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_6 ( net . IDENT_1 . IDENT_0 . IDENT_2 . IDENT_10 ) ) ) . METHOD_7 ( IDENT_9 ) . thenReturn ( com . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( INT_0 ) ) ; when ( client . METHOD_8 ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_9 ( ) , net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_10 ( ) ) ) . thenReturn ( com . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( true ) ) ; final byte [ ] id = new byte [ ] { 0 , 0 , 5 } ; "<AssertPlaceHolder>" ; verify ( client , times ( 2 ) ) . get ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_2 ( ) ) ; verify ( client , times ( 2 ) ) . METHOD_5 ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_6 ( net . IDENT_1 . IDENT_0 . IDENT_2 . IDENT_10 ) ) ; verify ( client , times ( 2 ) ) . METHOD_8 ( net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_9 ( ) , net . IDENT_1 . IDENT_0 . IDENT_2 . METHOD_10 ( ) ) ; } METHOD_11 ( java . lang . String ) { short IDENT_11 = net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_12 ; net . IDENT_1 . IDENT_0 . IDENT_8 IDENT_9 = null ; while ( ( IDENT_11 OP_0 ) > 0 ) { try { return getId ( name ) ; } catch ( net . IDENT_1 . IDENT_0 . IDENT_13 e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . info ( ( ( ( ( STRING_0 8 + ( METHOD_12 ( ) ) ) + STRING_1 1 ) + name ) + STRING_2 ) ) ; } final long id ; byte [ ] row ; try { id = client . METHOD_5 ( new net . IDENT_1 . IDENT_0 . METHOD_13 ( table , net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_14 , net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_15 , METHOD_12 ) ) . METHOD_14 ( ) ; row = net . IDENT_1 . IDENT_0 . IDENT_16 . METHOD_15 ( id ) ; net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . info ( ( ( ( ( ( ( STRING_3 + id ) + STRING_4 2 ) + ( METHOD_12 ( ) ) ) + STRING_1 1 ) + name ) + STRING_4 0 ) ) ; if ( ( row . length ) < ( IDENT_17 ) ) { throw new java . lang . IllegalStateException ( ( ( ( ( ( ( ( STRING_1 2 + ( row . length ) ) + STRING_4 5 ) + ( IDENT_17 ) ) + STRING_1 3 ) + id ) + STRING_0 6 ) + ( java . util . Arrays . toString ( row ) ) ) ) ; } for ( int i = 0 ; i < ( ( row . length ) - ( IDENT_17 ) ) ; i ++ ) { if ( ( row [ i ] ) != 0 ) { final java . lang . String message = ( ( ( STRING_0 2 + ( METHOD_12 ( ) ) ) + STRING_4 9 ) + ( IDENT_17 ) ) + STRING_0 9 ; net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( STRING_5 + message ) ) ; throw new java . lang . IllegalStateException ( message ) ; } } row = java . util . Arrays . METHOD_16 ( row , ( ( row . length ) - ( IDENT_17 ) ) , row . length ) ; } catch ( net . IDENT_1 . IDENT_0 . IDENT_8 e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( ( ( ( STRING_0 0 + ( java . util . Arrays . toString ( net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_14 ) ) ) + STRING_6 ) + ( net . IDENT_1 . IDENT_0 . METHOD_1 . METHOD_17 ( net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_15 ) ) ) + STRING_7 ) + ( METHOD_12 ( ) ) ) + STRING_2 ) , e ) ; IDENT_9 = e ; continue ; } catch ( java . lang . IllegalStateException e ) { throw e ; } catch ( java . lang . Exception e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( ( ( ( ( STRING_8 + STRING_1 0 ) + ( java . util . Arrays . toString ( net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_14 ) ) ) + STRING_6 ) + ( net . IDENT_1 . IDENT_0 . METHOD_1 . METHOD_17 ( net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_15 ) ) ) + STRING_7 ) + ( METHOD_12 ( ) ) ) + STRING_2 ) , e ) ; continue ; } try { final net . IDENT_1 . IDENT_0 . IDENT_18 IDENT_19 = new net . IDENT_1 . IDENT_0 . METHOD_18 ( table , row , net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_20 , METHOD_12 , net . IDENT_1 . IDENT_0 . METHOD_1 . METHOD_19 ( name ) ) ; if ( ! ( client . METHOD_8 ( IDENT_19 , IDENT_21 . IDENT_22 ) . METHOD_14 ( ) ) ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( STRING_0 + IDENT_19 ) + STRING_0 4 ) ) ; } } catch ( net . IDENT_1 . IDENT_0 . IDENT_8 e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( STRING_4 8 + id ) + STRING_4 1 ) + ( METHOD_12 ( ) ) ) , e ) ; IDENT_9 = e ; continue ; } catch ( java . lang . Exception e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( STRING_4 4 + id ) + STRING_4 1 ) + ( METHOD_12 ( ) ) ) , e ) ; continue ; } try { final net . IDENT_1 . IDENT_0 . METHOD_18 IDENT_23 = new net . IDENT_1 . IDENT_0 . METHOD_18 ( table , net . IDENT_1 . IDENT_0 . METHOD_1 . METHOD_19 ( name ) , net . IDENT_1 . IDENT_0 . METHOD_1 . IDENT_15 , METHOD_12 , row ) ; if ( ! ( client . METHOD_8 ( IDENT_23 , IDENT_21 . IDENT_22 ) . METHOD_14 ( ) ) ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . warn ( ( ( ( ( ( ( ( ( ( ( ( STRING_4 6 + id ) + STRING_9 ) + ( METHOD_12 ( ) ) ) + STRING_0 3 ) + name ) + STRING_4 ) + IDENT_23 ) + STRING_0 1 ) + STRING_0 7 ) + id ) + STRING_10 ) ) ; continue ; } } catch ( net . IDENT_1 . IDENT_0 . IDENT_8 e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( STRING_0 5 + id ) + STRING_4 1 ) + ( METHOD_12 ( ) ) ) , e ) ; IDENT_9 = e ; continue ; } catch ( java . lang . Exception e ) { net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( STRING_4 4 + id ) + STRING_4 1 ) + ( METHOD_12 ( ) ) ) , e ) ; continue ; } METHOD_20 ( name , row ) ; METHOD_21 ( row , name ) ; return row ; } if ( IDENT_9 == null ) { throw new java . lang . IllegalStateException ( STRING_4 7 ) ; } net . IDENT_1 . IDENT_0 . METHOD_1 . LOG . error ( ( ( ( ( STRING_1 + ( METHOD_12 ( ) ) ) + STRING_1 1 ) + name ) + STRING_4 0 ) , IDENT_9 ) ; throw IDENT_9 ; }
org . junit . Assert . assertArrayEquals ( id , IDENT_0 . METHOD_11 ( "foo" ) ) 