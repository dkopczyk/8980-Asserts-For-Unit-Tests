METHOD_0 ( ) { java . util . Set < de . IDENT_0 . tests . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Boolean , de . IDENT_0 . tests . IDENT_1 . IDENT_3 < java . lang . Boolean > > > IDENT_4 = new java . util . HashSet < de . IDENT_0 . tests . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Boolean , de . IDENT_0 . tests . IDENT_1 . IDENT_3 < java . lang . Boolean > > > ( ) ; de . IDENT_0 . tests . IDENT_5 < java . lang . Integer , de . IDENT_0 . tests . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Boolean , de . IDENT_0 . tests . IDENT_1 . IDENT_3 < java . lang . Boolean > > > IDENT_6 = de . IDENT_0 . tests . IDENT_7 . of ( de . IDENT_0 . tests . IDENT_8 . IDENT_9 . of ( 1 , 2 , 3 , 4 , 5 , 6 , 7 ) , de . IDENT_0 . tests . IDENT_7 . of ( de . IDENT_0 . tests . IDENT_8 . IDENT_9 . METHOD_1 ( ) ) ) ; while ( IDENT_6 . hasNext ( ) ) { de . IDENT_0 . tests . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Boolean , de . IDENT_0 . tests . IDENT_1 . IDENT_3 < java . lang . Boolean > > IDENT_1 = IDENT_6 . get ( ) ; int IDENT_10 = IDENT_1 . get ( ) ; boolean IDENT_11 = IDENT_1 . next ( ) . get ( ) ; if ( ! ( org . apache . IDENT_12 . util . lang . IDENT_13 . equal ( METHOD_2 ( IDENT_10 , IDENT_11 ) , METHOD_3 ( IDENT_10 , IDENT_11 ) ) ) ) { IDENT_4 . add ( IDENT_1 ) ; } } "<AssertPlaceHolder>" ; } METHOD_3 ( int , boolean ) { if ( IDENT_10 == 3 ) return 5 ; if ( IDENT_10 == ( 2 * ( IDENT_10 / 2 ) ) ) return IDENT_11 ? IDENT_10 : - 1 ; return - 1 ; }
org . junit . Assert . assertEquals ( ( "" + IDENT_4 ) , 2 , IDENT_4 . size ( ) ) 