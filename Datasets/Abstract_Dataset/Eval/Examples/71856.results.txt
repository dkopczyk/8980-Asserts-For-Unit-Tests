METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; System . out . println ( java . util . Arrays . asList ( IDENT_0 ) ) ; } METHOD_1 ( ) { org . IDENT_1 . IDENT_2 . binding . IDENT_4 IDENT_5 = new org . IDENT_1 . IDENT_2 . binding . METHOD_2 ( ) ; org . IDENT_1 . IDENT_2 . binding . IDENT_6 IDENT_7 = new org . IDENT_1 . IDENT_2 . binding . METHOD_3 ( ) ; try { org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_4 ( org . IDENT_1 . IDENT_2 . binding . IDENT_8 . METHOD_5 ( IDENT_5 , IDENT_7 ) ) ; org . IDENT_1 . IDENT_2 . binding . IDENT_9 IDENT_10 = IDENT_5 . getValue ( ) ; int count = IDENT_7 . getValue ( ) ; java . lang . String [ ] IDENT_0 = new java . lang . String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { IDENT_0 [ i ] = IDENT_10 . get ( i ) ; } return IDENT_0 ; } catch ( org . IDENT_1 . IDENT_2 . IDENT_11 e ) { if ( ( e . METHOD_6 ( ) ) == ( IDENT_12 . IDENT_13 . METHOD_7 ( ) ) ) { return new java . lang . String [ 0 ] ; } throw e ; } finally { IDENT_5 . delete ( ) ; IDENT_7 . delete ( ) ; } }
org . junit . Assert . assertTrue ( ( ( IDENT_0 . length ) > 0 ) ) 