METHOD_0 ( ) { if ( org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . METHOD_1 ( ) ) { org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . info ( STRING_0 ) ; } org . apache . IDENT_0 . storage . common . IDENT_3 . IDENT_4 IDENT_5 = IDENT_6 . METHOD_2 ( ) ; int IDENT_7 = 100 ; int [ ] IDENT_8 = new int [ ] { 0 } ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_10 IDENT_11 = new org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_3 ( IDENT_5 , IDENT_6 . METHOD_4 ( ) , IDENT_8 ) ; double IDENT_12 = FLOAT_0 ; int IDENT_13 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_14 . METHOD_5 ( IDENT_7 ) ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_15 IDENT_16 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_14 . METHOD_6 ( METHOD_5 , IDENT_12 ) ; IDENT_11 . create ( ) ; IDENT_11 . METHOD_7 ( ) ; org . apache . IDENT_0 . storage . common . IDENT_17 builder = IDENT_11 . METHOD_8 ( IDENT_7 , IDENT_16 . METHOD_9 ( ) , IDENT_16 . METHOD_10 ( ) ) ; int IDENT_18 = 2 ; org . apache . IDENT_0 . IDENT_19 . common . IDENT_20 . io . IDENT_21 IDENT_22 = new org . apache . IDENT_0 . IDENT_19 . common . IDENT_20 . io . METHOD_11 ( IDENT_18 ) ; org . apache . IDENT_0 . IDENT_19 . common . IDENT_20 . io . IDENT_23 tuple = new org . apache . IDENT_0 . IDENT_19 . common . IDENT_20 . io . METHOD_12 ( ) ; int IDENT_24 = 1000 ; java . util . IDENT_25 < java . lang . Integer > IDENT_26 = new java . util . METHOD_13 ( ) ; java . util . ArrayList < java . lang . Integer > keys = new java . util . ArrayList ( ) ; while ( ( IDENT_26 . size ( ) ) < IDENT_7 ) { int key = ( IDENT_27 . METHOD_14 ( ) ) OP_0 IDENT_24 ; IDENT_26 . add ( key ) ; } for ( java . lang . Integer i : IDENT_26 ) { keys . add ( i ) ; } for ( int i = 0 ; i < ( keys . size ( ) ) ; ++ i ) { org . apache . IDENT_0 . IDENT_19 . common . utils . IDENT_28 . METHOD_15 ( IDENT_22 , tuple , keys . get ( i ) , i ) ; builder . add ( tuple ) ; } builder . end ( ) ; IDENT_11 . METHOD_16 ( ) ; long [ ] IDENT_29 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_3 . METHOD_17 ( ) ; for ( int i = 0 ; i < ( keys . size ( ) ) ; ++ i ) { org . apache . IDENT_0 . IDENT_19 . common . utils . IDENT_28 . METHOD_15 ( IDENT_22 , tuple , keys . get ( i ) , i ) ; "<AssertPlaceHolder>" ; } IDENT_11 . METHOD_18 ( ) ; IDENT_11 . METHOD_19 ( ) ; IDENT_11 . METHOD_20 ( ) ; } contains ( org . apache . IDENT_0 . IDENT_19 . common . data . IDENT_30 . IDENT_31 , long [ ] ) { if ( ( IDENT_32 ) == 0 ) { return false ; } org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_33 . METHOD_21 ( tuple , IDENT_8 , org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_3 . IDENT_34 , IDENT_29 ) ; if ( ( version ) == ( org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_3 . IDENT_35 ) ) { return METHOD_22 ( IDENT_29 ) ; } else { return METHOD_23 ( IDENT_29 ) ; } }
org . junit . Assert . assertTrue ( IDENT_11 . contains ( tuple , IDENT_29 ) ) 