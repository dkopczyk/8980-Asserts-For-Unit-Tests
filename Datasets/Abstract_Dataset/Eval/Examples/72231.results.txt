METHOD_0 ( ) { int port = org . IDENT_0 . logger . util . IDENT_1 . METHOD_1 ( ) ; final org . IDENT_0 . logger . IDENT_2 . List < org . IDENT_0 . logger . IDENT_2 . IDENT_3 > IDENT_4 = new org . IDENT_0 . logger . IDENT_2 . ArrayList < org . IDENT_0 . logger . IDENT_2 . IDENT_3 > ( ) ; org . IDENT_0 . logger . util . IDENT_1 IDENT_0 = new org . IDENT_0 . logger . util . METHOD_2 ( port , new org . IDENT_0 . logger . util . METHOD_2 . METHOD_3 ( ) { public void process ( org . IDENT_5 . IDENT_6 IDENT_5 , java . net . IDENT_7 IDENT_8 ) throws java . io . IOException { java . io . IDENT_9 in = new java . io . METHOD_4 ( IDENT_8 . METHOD_5 ( ) ) ; try { org . IDENT_5 . IDENT_10 . IDENT_11 IDENT_10 = IDENT_5 . METHOD_6 ( in ) ; while ( true ) { org . IDENT_0 . logger . IDENT_2 . IDENT_3 e = IDENT_10 . read ( org . IDENT_0 . logger . IDENT_2 . IDENT_3 . class ) ; IDENT_4 . add ( e ) ; } } catch ( java . io . IDENT_12 e ) { } } } ) ; IDENT_0 . start ( ) ; IDENT_0 . METHOD_7 ( ) ; org . IDENT_0 . logger . IDENT_2 . IDENT_13 IDENT_2 = new org . IDENT_0 . logger . IDENT_2 . METHOD_8 ( STRING_0 , port ) ; int count = INT_0 ; for ( int i = 0 ; i < count ; i ++ ) { java . lang . String IDENT_14 = STRING_1 ; org . IDENT_0 . logger . IDENT_2 . Map < java . lang . String , java . lang . Object > record = new org . IDENT_0 . logger . IDENT_2 . HashMap < java . lang . String , java . lang . Object > ( ) ; record . put ( STRING_2 , i ) ; record . put ( STRING_3 , ( STRING_4 + i ) ) ; IDENT_2 . METHOD_9 ( IDENT_14 , record ) ; } IDENT_2 . close ( ) ; java . lang . Thread . sleep ( INT_1 ) ; IDENT_0 . close ( ) ; "<AssertPlaceHolder>" ; } close ( ) { }
org . junit . Assert . assertEquals ( count , IDENT_4 . size ( ) ) 