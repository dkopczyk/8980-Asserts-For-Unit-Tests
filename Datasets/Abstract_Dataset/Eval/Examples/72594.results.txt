METHOD_0 ( ) { double [ ] a = new double [ ] { 1.0 , 1.0 , 1.0 , 1.0 } ; double [ ] b = new double [ ] { 0 , 0 , 0 , 0 } ; "<AssertPlaceHolder>" ; } METHOD_1 ( double [ ] , double [ ] ) { edu . IDENT_0 . IDENT_1 . common . IDENT_2 . METHOD_2 ( a , b ) ; double IDENT_3 = 0.0 ; double IDENT_4 = 0.0 ; double IDENT_5 = 0.0 ; for ( int i = 0 ; i < ( b . length ) ; i ++ ) { double IDENT_6 = a [ i ] ; double IDENT_7 = b [ i ] ; IDENT_4 += IDENT_6 * IDENT_6 ; IDENT_5 += IDENT_7 * IDENT_7 ; IDENT_3 += IDENT_6 * IDENT_7 ; } IDENT_4 = java . lang . Math . METHOD_3 ( IDENT_4 ) ; IDENT_5 = java . lang . Math . METHOD_3 ( IDENT_5 ) ; return ( IDENT_4 == 0 ) || ( IDENT_5 == 0 ) ? 0 : IDENT_3 / ( IDENT_4 * IDENT_5 ) ; }
org . junit . Assert . assertEquals ( 0.0 , edu . IDENT_0 . IDENT_1 . common . IDENT_2 . METHOD_1 ( a , b ) , 0 ) 