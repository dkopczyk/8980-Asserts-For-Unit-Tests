METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . graph . IDENT_2 < edu . IDENT_0 . IDENT_1 . graph . IDENT_3 > g = new edu . IDENT_0 . IDENT_1 . graph . METHOD_1 ( ) ; for ( int i = 1 ; i < 9 ; i ++ ) { g . add ( i ) ; } g . add ( new edu . IDENT_0 . IDENT_1 . graph . METHOD_2 ( 1 , 2 ) ) ; g . add ( new edu . IDENT_0 . IDENT_1 . graph . METHOD_2 ( 1 , 3 ) ) ; g . add ( new edu . IDENT_0 . IDENT_1 . graph . METHOD_2 ( 3 , 5 ) ) ; g . add ( new edu . IDENT_0 . IDENT_1 . graph . METHOD_2 ( 4 , 6 ) ) ; edu . IDENT_0 . IDENT_1 . graph . IDENT_4 < edu . IDENT_0 . IDENT_1 . graph . IDENT_3 , edu . IDENT_0 . IDENT_1 . graph . IDENT_2 < edu . IDENT_0 . IDENT_1 . graph . IDENT_3 > > IDENT_5 = new edu . IDENT_0 . IDENT_1 . graph . IDENT_4 < edu . IDENT_0 . IDENT_1 . graph . IDENT_3 , edu . IDENT_0 . IDENT_1 . graph . IDENT_2 < edu . IDENT_0 . IDENT_1 . graph . IDENT_3 > > ( g , 3 ) ; int IDENT_6 = 0 ; while ( IDENT_5 . hasNext ( ) ) { IDENT_5 . next ( ) ; IDENT_6 ++ ; } "<AssertPlaceHolder>" ; } next ( ) { if ( ( next ) == null ) throw new java . util . METHOD_3 ( STRING_0 ) ; edu . IDENT_0 . IDENT_1 . IDENT_7 . IDENT_8 me = next ; try { next = METHOD_4 ( ) ; } catch ( java . io . IOException IDENT_9 ) { throw new java . io . METHOD_5 ( IDENT_9 ) ; } return me ; }
org . junit . Assert . assertEquals ( 2 , IDENT_6 ) 