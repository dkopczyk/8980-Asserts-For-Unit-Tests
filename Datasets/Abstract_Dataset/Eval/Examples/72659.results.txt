METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 < edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_4 > IDENT_5 = new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_1 ( ) ; IDENT_5 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 1 , 2 ) ) ; IDENT_5 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 1 , 4 ) ) ; IDENT_5 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 3 , 2 ) ) ; IDENT_5 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 3 , 4 ) ) ; IDENT_5 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 4 , 5 ) ) ; edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 < edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_4 > IDENT_6 = new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_1 ( ) ; IDENT_6 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 1 , 3 ) ) ; IDENT_6 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 1 , 4 ) ) ; IDENT_6 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 2 , 3 ) ) ; IDENT_6 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 2 , 4 ) ) ; IDENT_6 . add ( new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_2 ( 4 , 5 ) ) ; edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_7 IDENT_8 = new edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 , edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 ) { edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 < ? extends edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_4 > IDENT_9 = METHOD_5 ( IDENT_5 , null ) ; edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_3 < ? extends edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_4 > IDENT_10 = METHOD_5 ( IDENT_6 , null ) ; edu . IDENT_0 . IDENT_1 . graph . IDENT_2 . IDENT_11 state = METHOD_6 ( IDENT_9 , IDENT_10 ) ; return match ( state ) ; }
org . junit . Assert . assertTrue ( IDENT_8 . METHOD_4 ( IDENT_5 , IDENT_6 ) ) 