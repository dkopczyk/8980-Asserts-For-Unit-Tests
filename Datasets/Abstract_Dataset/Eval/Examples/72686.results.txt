METHOD_0 ( ) { java . lang . String IDENT_0 = "" ; java . lang . String html = "" ; for ( int i = 0 ; i < 10 ; ++ i ) { html += STRING_0 ; IDENT_0 += "" ; } java . lang . String output = edu . IDENT_1 . IDENT_2 . text . StringUtils . METHOD_1 ( html ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( source . length ( ) ) ; int start = - 1 ; int end = - 1 ; int IDENT_3 = 0 ; start = source . indexOf ( STRING_1 ) ; end = source . indexOf ( STRING_2 , start ) ; while ( ( start > ( - 1 ) ) && ( end > start ) ) { java . lang . String IDENT_4 = source . substring ( start , ( end + 1 ) ) ; java . lang . String IDENT_5 = edu . IDENT_1 . IDENT_2 . text . StringUtils . IDENT_6 . get ( IDENT_4 ) ; if ( IDENT_5 == null ) { IDENT_5 = edu . IDENT_1 . IDENT_2 . text . StringUtils . IDENT_7 . get ( IDENT_4 ) ; } if ( IDENT_5 != null ) { java . lang . String s = source . substring ( IDENT_3 , start ) ; sb . append ( s ) . append ( IDENT_5 ) ; IDENT_3 = end + 1 ; } start = source . indexOf ( STRING_1 , end ) ; end = source . indexOf ( STRING_2 , start ) ; } if ( ( sb . length ( ) ) == 0 ) return source ; sb . append ( source . substring ( IDENT_3 ) ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , output ) 