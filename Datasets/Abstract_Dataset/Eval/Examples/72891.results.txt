METHOD_0 ( ) { java . lang . String actual = IDENT_0 . METHOD_1 ( ( STRING_0 + ( STRING_1 + STRING_2 ) ) ) ; java . lang . String expected = STRING_3 + ( STRING_4 + STRING_5 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { char [ ] IDENT_1 = new char [ INT_0 ] ; int IDENT_2 = 0 ; int IDENT_3 = 0 ; char c ; int len = IDENT_4 . length ( ) ; while ( IDENT_2 < len ) { c = IDENT_4 . charAt ( ( IDENT_2 ++ ) ) ; if ( ( c < ( org . IDENT_5 . io . IDENT_6 . IDENT_7 . IDENT_8 ) ) || ( IDENT_2 >= len ) ) { IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( c ) ; continue ; } char IDENT_10 = 0 ; char IDENT_11 = c ; if ( IDENT_2 >= len ) { IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( c ) ; continue ; } c = IDENT_4 . charAt ( ( IDENT_2 ++ ) ) ; if ( c >= ( org . IDENT_5 . io . IDENT_6 . IDENT_7 . IDENT_8 ) ) { IDENT_10 = c ; if ( IDENT_2 >= len ) { IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( c ) ; continue ; } c = IDENT_4 . charAt ( ( IDENT_2 ++ ) ) ; } char IDENT_12 = METHOD_2 ( c , IDENT_11 , IDENT_10 ) ; if ( IDENT_12 == 0 ) { IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( c ) ; IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( IDENT_11 ) ; if ( IDENT_10 != 0 ) { IDENT_1 [ ( IDENT_3 ++ ) ] = org . IDENT_5 . io . IDENT_6 . IDENT_9 . decode ( IDENT_11 ) ; } } else { IDENT_1 [ ( IDENT_3 ++ ) ] = IDENT_12 ; } } return new java . lang . String ( IDENT_1 ) . substring ( 0 , IDENT_3 ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 