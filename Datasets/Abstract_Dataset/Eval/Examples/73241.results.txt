METHOD_0 ( ) { java . lang . String key = STRING_0 ; com . fujitsu . dc . core . model . IDENT_0 IDENT_1 = com . fujitsu . dc . test . unit . core . IDENT_2 . IDENT_3 . METHOD_1 ( com . fujitsu . dc . test . unit . core . IDENT_2 . IDENT_3 . IDENT_4 ) ; java . util . Map < java . lang . String , com . fujitsu . dc . core . model . IDENT_0 > IDENT_5 = new java . util . HashMap ( ) ; IDENT_5 . put ( key , IDENT_1 ) ; java . util . List < java . lang . String > IDENT_6 = new java . util . ArrayList < java . lang . String > ( ) ; com . fujitsu . dc . test . unit . core . IDENT_2 . IDENT_3 . IDENT_7 IDENT_8 = new com . fujitsu . dc . test . unit . core . IDENT_2 . IDENT_3 . METHOD_2 ( ) ; java . lang . String IDENT_9 = STRING_1 ; IDENT_6 . add ( IDENT_9 ) ; IDENT_9 = STRING_0 ; IDENT_6 . add ( IDENT_9 ) ; IDENT_9 = STRING_2 ; IDENT_6 . add ( IDENT_9 ) ; IDENT_9 = STRING_3 ; IDENT_6 . add ( IDENT_9 ) ; IDENT_9 = STRING_4 ; boolean res = IDENT_8 . METHOD_3 ( IDENT_9 , IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String , java . util . Map , java . util . List ) { java . lang . String IDENT_10 = "" ; for ( Map . Entry < java . lang . String , com . fujitsu . dc . core . model . IDENT_0 > entry : IDENT_11 . entrySet ( ) ) { if ( IDENT_9 . startsWith ( entry . getKey ( ) ) ) { IDENT_10 = entry . getKey ( ) ; break ; } } java . lang . String IDENT_12 = IDENT_9 . replaceAll ( IDENT_10 , "" ) ; if ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_14 . equals ( IDENT_12 ) ) { java . lang . String IDENT_15 = IDENT_10 + ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_16 ) ; if ( ! ( IDENT_6 . contains ( IDENT_15 ) ) ) { java . lang . String message = com . fujitsu . dc . core . IDENT_17 . getMessage ( STRING_5 ) ; com . fujitsu . dc . core . IDENT_2 . IDENT_13 . log . info ( ( ( message + STRING_6 ) + IDENT_9 ) ) ; METHOD_4 ( true , STRING_7 , IDENT_9 , message ) ; return false ; } java . lang . String IDENT_18 = ( IDENT_10 + ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_19 ) ) + "/" ; if ( IDENT_6 . contains ( IDENT_18 ) ) { java . lang . String message = com . fujitsu . dc . core . IDENT_17 . getMessage ( STRING_5 ) ; com . fujitsu . dc . core . IDENT_2 . IDENT_13 . log . info ( ( ( message + STRING_6 ) + IDENT_9 ) ) ; METHOD_4 ( true , STRING_7 , IDENT_9 , message ) ; return false ; } } if ( IDENT_12 . startsWith ( ( ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_19 ) + "/" ) ) ) { java . lang . String IDENT_15 = IDENT_10 + ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_16 ) ; if ( ! ( IDENT_6 . contains ( IDENT_15 ) ) ) { java . lang . String message = com . fujitsu . dc . core . IDENT_17 . getMessage ( STRING_5 ) ; com . fujitsu . dc . core . IDENT_2 . IDENT_13 . log . info ( ( ( message + STRING_6 ) + IDENT_9 ) ) ; METHOD_4 ( true , STRING_7 , IDENT_9 , message ) ; return false ; } } java . lang . String IDENT_20 = null ; java . util . regex . IDENT_21 pattern = java . util . regex . IDENT_21 . METHOD_5 ( STRING_8 ) ; java . util . regex . IDENT_22 m = pattern . matcher ( IDENT_12 ) ; if ( m . matches ( ) ) { IDENT_20 = m . replaceAll ( STRING_9 ) ; } if ( ( IDENT_20 != null ) && ( ! ( IDENT_20 . equals ( com . fujitsu . dc . core . IDENT_2 . IDENT_13 . IDENT_19 ) ) ) ) { java . lang . String message = com . fujitsu . dc . core . IDENT_17 . getMessage ( STRING_5 ) ; com . fujitsu . dc . core . IDENT_2 . IDENT_13 . log . info ( ( ( message + STRING_6 ) + IDENT_9 ) ) ; METHOD_4 ( true , STRING_7 , IDENT_9 , message ) ; return false ; } java . lang . String IDENT_23 = null ; pattern = java . util . regex . IDENT_21 . METHOD_5 ( STRING_10 ) ; m = pattern . matcher ( IDENT_12 ) ; if ( m . matches ( ) ) { IDENT_23 = m . replaceAll ( STRING_9 ) ; } if ( IDENT_23 != null ) { pattern = java . util . regex . IDENT_21 . METHOD_5 ( STRING_11 ) ; m = pattern . matcher ( IDENT_23 ) ; if ( ! ( m . matches ( ) ) ) { java . lang . String message = com . fujitsu . dc . core . IDENT_17 . getMessage ( STRING_5 ) ; com . fujitsu . dc . core . IDENT_2 . IDENT_13 . log . info ( ( ( message + STRING_6 ) + IDENT_9 ) ) ; METHOD_4 ( true , STRING_7 , IDENT_9 , message ) ; return false ; } } return true ; }
org . junit . Assert . assertEquals ( false , res ) 