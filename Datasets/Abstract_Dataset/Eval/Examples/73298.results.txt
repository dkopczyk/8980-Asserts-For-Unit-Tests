METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . IDENT_2 . IDENT_3 . Builder IDENT_4 = METHOD_1 ( IDENT_0 ) ; java . util . List < org . IDENT_1 . IDENT_2 . IDENT_5 . Builder > IDENT_6 = new java . util . ArrayList < org . IDENT_1 . IDENT_2 . IDENT_5 . Builder > ( ) ; org . IDENT_1 . IDENT_2 . IDENT_5 . Builder IDENT_7 = METHOD_2 ( STRING_1 , IDENT_4 ) ; org . IDENT_1 . IDENT_2 . IDENT_8 . Builder builder = org . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_3 ( ) ; IDENT_6 . add ( IDENT_7 ) ; METHOD_4 ( 50 , IDENT_7 ) ; org . IDENT_1 . IDENT_2 . IDENT_5 . Builder IDENT_9 = METHOD_5 ( 5 , STRING_2 , IDENT_7 ) ; IDENT_6 . add ( IDENT_9 ) ; org . IDENT_1 . IDENT_2 . IDENT_10 . Builder schema = org . IDENT_1 . IDENT_2 . IDENT_10 . METHOD_3 ( ) . METHOD_6 ( IDENT_4 ) . METHOD_7 ( com . fujitsu . dc . test . unit . core . model . impl . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 ) . METHOD_8 ( IDENT_6 ) ; org . IDENT_1 . IDENT_2 . IDENT_8 metadata = builder . METHOD_9 ( schema ) . build ( ) ; com . fujitsu . dc . core . model . impl . IDENT_11 . doc . IDENT_15 handler = new com . fujitsu . dc . core . model . impl . IDENT_11 . doc . METHOD_10 ( ) ; org . json . simple . JSONObject IDENT_16 = new org . json . simple . JSONObject ( ) ; IDENT_16 . put ( STRING_3 , STRING_2 ) ; handler . METHOD_11 ( IDENT_16 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_17 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_17 . put ( STRING_4 , STRING_1 ) ; handler . METHOD_12 ( IDENT_17 ) ; handler . METHOD_13 ( STRING_5 ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_18 = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; IDENT_18 . put ( IDENT_19 . IDENT_20 , STRING_5 ) ; handler . METHOD_14 ( IDENT_18 ) ; com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . IDENT_21 IDENT_22 = new com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 ( metadata , handler ) ; java . util . List < com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . IDENT_23 > errors = IDENT_22 . METHOD_16 ( ) ; "<AssertPlaceHolder>" ; } METHOD_16 ( ) { java . util . List < com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . IDENT_23 > result = new java . util . ArrayList < com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . IDENT_23 > ( ) ; if ( null == ( metadata ) ) { return result ; } java . util . Iterator < org . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_24 = metadata . METHOD_17 ( ) . iterator ( ) ; while ( IDENT_24 . hasNext ( ) ) { org . IDENT_1 . IDENT_2 . IDENT_3 target = IDENT_24 . next ( ) ; METHOD_18 ( result , target ) ; } java . util . Iterator < org . IDENT_1 . IDENT_2 . IDENT_5 > IDENT_25 = metadata . METHOD_19 ( ) . iterator ( ) ; while ( IDENT_25 . hasNext ( ) ) { int IDENT_26 = 0 ; int IDENT_27 = 0 ; org . IDENT_1 . IDENT_2 . IDENT_5 IDENT_28 = IDENT_25 . next ( ) ; for ( org . IDENT_1 . IDENT_2 . IDENT_29 IDENT_30 : IDENT_28 . METHOD_20 ( ) ) { if ( IDENT_30 . getName ( ) . startsWith ( STRING_6 ) ) { continue ; } if ( IDENT_30 . getType ( ) . METHOD_21 ( ) ) { IDENT_26 ++ ; } else { IDENT_27 ++ ; } } if ( ( IDENT_31 ) < IDENT_26 ) { java . lang . String message = java . lang . String . format ( STRING_7 , IDENT_28 . getName ( ) , IDENT_31 ) ; com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . log . info ( message ) ; result . add ( new com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . METHOD_22 ( IDENT_28 . getName ( ) , message ) ) ; } if ( ( IDENT_32 ) < IDENT_27 ) { java . lang . String message = java . lang . String . format ( STRING_7 , IDENT_28 . getName ( ) , IDENT_32 ) ; com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . log . info ( message ) ; result . add ( new com . fujitsu . dc . core . model . impl . IDENT_11 . IDENT_12 . METHOD_15 . METHOD_22 ( IDENT_28 . getName ( ) , message ) ) ; } } return result ; }
org . junit . Assert . assertEquals ( 1 , errors . size ( ) ) 