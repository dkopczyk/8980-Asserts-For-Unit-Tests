METHOD_0 ( ) { test . IDENT_0 . Builder IDENT_1 = test . IDENT_0 . METHOD_1 ( ) ; METHOD_1 . setValue ( new java . math . BigDecimal ( STRING_0 ) ) ; java . util . HashMap < java . lang . String , java . math . BigDecimal > IDENT_2 = new java . util . HashMap ( ) ; IDENT_2 . put ( "test" , new java . math . BigDecimal ( STRING_1 ) ) ; METHOD_1 . METHOD_2 ( IDENT_2 ) ; java . util . HashMap < java . math . BigInteger , java . lang . String > IDENT_3 = new java . util . HashMap ( ) ; IDENT_3 . put ( BigInteger . IDENT_4 , "test" ) ; METHOD_1 . METHOD_3 ( IDENT_3 ) ; test . IDENT_0 IDENT_5 = METHOD_1 . build ( ) ; byte [ ] IDENT_6 = org . apache . avro . IDENT_7 . IDENT_8 . METHOD_4 ( IDENT_5 ) ; org . apache . avro . io . IDENT_9 IDENT_10 = org . apache . avro . io . IDENT_11 . get ( ) . METHOD_5 ( IDENT_6 , null ) ; org . apache . avro . IDENT_7 . IDENT_12 < test . IDENT_0 > IDENT_13 = new org . apache . avro . IDENT_7 . METHOD_6 ( test . IDENT_0 . IDENT_14 ) ; test . IDENT_0 IDENT_15 = new test . METHOD_7 ( ) ; IDENT_13 . read ( IDENT_15 , IDENT_10 ) ; "<AssertPlaceHolder>" ; } read ( org . apache . IDENT_16 . IDENT_17 , org . apache . IDENT_16 . IDENT_18 ) { int size = in . METHOD_8 ( ) ; for ( int i = 0 ; i < size ; i ++ ) IDENT_19 . put ( in . METHOD_9 ( ) , in . METHOD_10 ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_15 ) 