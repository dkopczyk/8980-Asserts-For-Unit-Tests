METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . METHOD_1 ( true ) ; java . lang . Thread [ ] IDENT_2 = new java . lang . Thread [ 4 ] ; for ( int i = 0 ; i < ( IDENT_2 . length ) ; i ++ ) { final int IDENT_3 = i ; IDENT_2 [ i ] = new java . lang . Thread ( ) { @ com . IDENT_0 . Override public void run ( ) { com . IDENT_0 . IDENT_1 . METHOD_2 ( IDENT_3 ) ; java . text . IDENT_4 IDENT_5 = com . IDENT_0 . IDENT_1 . METHOD_3 ( ) ; java . util . IDENT_6 random = new java . util . METHOD_4 ( IDENT_3 ) ; for ( int times = 0 ; times < 10 ; times ++ ) { try { java . lang . Thread . sleep ( 200 ) ; } catch ( java . lang . Exception ex ) { throw new java . lang . RuntimeException ( ex ) ; } double example = ( ( random . METHOD_5 ( ) ) OP_0 100 ) / FLOAT_0 ; com . IDENT_0 . IDENT_1 . logger ( ) . info ( java . lang . String . format ( STRING_0 , IDENT_3 , com . IDENT_0 . IDENT_7 . str ( example ) ) ) ; java . lang . String IDENT_8 = com . IDENT_0 . IDENT_7 . str ( example ) ; int IDENT_9 = IDENT_8 . substring ( ( 1 + ( IDENT_8 . METHOD_6 ( IDENT_5 . METHOD_7 ( ) . METHOD_8 ( ) ) ) ) ) . length ( ) ; "<AssertPlaceHolder>" ; } } } ; } for ( java . lang . Thread t : IDENT_2 ) { t . start ( ) ; } for ( java . lang . Thread t : IDENT_2 ) { try { t . join ( ) ; } catch ( java . lang . Exception ex ) { ex . printStackTrace ( System . out ) ; } } } METHOD_6 ( java . lang . Object ) { return this . IDENT_10 . METHOD_6 ( o ) ; }
org . junit . Assert . assertThat ( IDENT_9 , org . hamcrest . CoreMatchers . is ( IDENT_3 ) ) 