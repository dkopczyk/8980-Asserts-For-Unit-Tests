METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . Boolean > IDENT_4 = de . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_1 ( false ) ; de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . Boolean > IDENT_6 = de . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_1 ( true ) ; org . mockito . Mockito . when ( IDENT_7 . METHOD_2 ( IDENT_8 ) ) . thenReturn ( IDENT_4 ) ; org . mockito . Mockito . when ( IDENT_9 . METHOD_3 ( IDENT_4 ) ) . thenReturn ( IDENT_6 ) ; org . mockito . Mockito . when ( IDENT_10 . METHOD_4 ( IDENT_4 ) ) . thenReturn ( false ) ; org . mockito . Mockito . when ( IDENT_10 . METHOD_4 ( IDENT_6 ) ) . thenReturn ( true ) ; METHOD_5 ( ) ; org . mockito . Mockito . verify ( IDENT_7 ) . METHOD_2 ( IDENT_8 ) ; org . mockito . Mockito . verify ( IDENT_10 , org . mockito . Mockito . times ( 2 ) ) . METHOD_4 ( de . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_6 ( ) ) ; org . mockito . Mockito . verify ( IDENT_11 ) . METHOD_7 ( IDENT_4 , IDENT_8 ) ; org . mockito . Mockito . verify ( IDENT_9 ) . METHOD_3 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 , de . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 ) { int IDENT_14 = ( ( int ) ( java . lang . Math . METHOD_8 ( ( ( IDENT_2 . METHOD_9 ( ) . size ( ) ) * ( configuration . METHOD_10 ( ) ) ) ) ) ) ; java . util . IDENT_15 IDENT_16 = METHOD_11 ( IDENT_2 ) ; java . util . IDENT_17 random = new java . util . METHOD_12 ( configuration . METHOD_13 ( ) ) ; while ( ! ( METHOD_14 ( IDENT_14 , IDENT_2 ) ) ) { for ( IDENT_18 solution : IDENT_2 . METHOD_9 ( ) ) { if ( METHOD_15 ( solution , IDENT_2 , random , IDENT_16 ) ) { IDENT_2 . METHOD_15 ( solution ) ; if ( METHOD_14 ( IDENT_14 , IDENT_2 ) ) { break ; } } } } }
org . junit . Assert . assertEquals ( IDENT_6 , result ) 