METHOD_0 ( ) { IDENT_0 . when ( request ( ) . METHOD_1 ( STRING_0 ) . METHOD_2 ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . IDENT_2 ) ) . METHOD_3 ( response ( ) . METHOD_4 ( 200 ) . METHOD_5 ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . IDENT_3 ) ) ; final java . lang . String IDENT_4 = ( ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . IDENT_5 ) + ( port ) ) + ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . IDENT_2 ) ; uk . gov . gchq . gaffer . operation . impl . get . IDENT_6 op = new uk . gov . gchq . gaffer . operation . impl . get . IDENT_6 . Builder ( ) . METHOD_6 ( IDENT_4 ) . build ( ) ; java . lang . String result = handler . METHOD_7 ( op , context , store ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( uk . gov . gchq . gaffer . operation . impl . IDENT_7 , uk . gov . gchq . gaffer . store . Context , uk . gov . gchq . gaffer . store . IDENT_8 ) { if ( null == ( IDENT_9 . METHOD_8 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_9 ( STRING_1 ) ; } if ( null == ( IDENT_9 . METHOD_10 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_9 ( STRING_2 ) ; } final java . util . List < IDENT_10 > results = new java . util . ArrayList ( ) ; for ( final IDENT_11 input : IDENT_9 . METHOD_10 ( ) ) { final uk . gov . gchq . gaffer . operation . Operation IDENT_12 = IDENT_9 . METHOD_8 ( ) . METHOD_11 ( ) ; uk . gov . gchq . gaffer . store . operation . handler . util . IDENT_13 . METHOD_12 ( IDENT_12 , input ) ; results . add ( METHOD_13 ( IDENT_12 , context , store ) ) ; } return results ; }
org . junit . Assert . assertEquals ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . IDENT_3 , result ) 