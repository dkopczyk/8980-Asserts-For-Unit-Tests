METHOD_0 ( ) { METHOD_1 ( store . METHOD_2 ( ) ) . METHOD_3 ( uk . gov . gchq . gaffer . store . operation . handler . function . IDENT_0 . IDENT_1 ) ; final uk . gov . gchq . gaffer . data . element . IDENT_2 IDENT_3 = new uk . gov . gchq . gaffer . data . element . IDENT_2 . Builder ( ) . group ( IDENT_4 . IDENT_5 ) . source ( STRING_0 ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( true ) . property ( IDENT_6 . IDENT_7 , INT_0 ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . IDENT_2 IDENT_8 = new uk . gov . gchq . gaffer . data . element . IDENT_2 . Builder ( ) . group ( IDENT_4 . IDENT_9 ) . source ( STRING_0 ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( true ) . property ( IDENT_6 . IDENT_7 , 1L ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . IDENT_2 IDENT_10 = new uk . gov . gchq . gaffer . data . element . IDENT_2 . Builder ( ) . group ( IDENT_4 . IDENT_5 ) . source ( STRING_1 ) . METHOD_4 ( STRING_0 ) . METHOD_5 ( true ) . property ( IDENT_6 . IDENT_7 , INT_1 ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . Entity entity = new uk . gov . gchq . gaffer . data . element . Entity . Builder ( ) . group ( IDENT_4 . IDENT_11 ) . property ( IDENT_6 . IDENT_7 , INT_2 ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . Entity IDENT_12 = new uk . gov . gchq . gaffer . data . element . Entity . Builder ( ) . group ( IDENT_4 . IDENT_13 ) . property ( IDENT_6 . IDENT_7 , INT_1 ) . build ( ) ; input . add ( IDENT_3 ) ; input . add ( IDENT_8 ) ; input . add ( IDENT_10 ) ; input . add ( entity ) ; input . add ( IDENT_12 ) ; expected . add ( IDENT_10 ) ; expected . add ( entity ) ; expected . add ( IDENT_12 ) ; final uk . gov . gchq . gaffer . operation . impl . function . IDENT_14 filter = new uk . gov . gchq . gaffer . operation . impl . function . IDENT_14 . Builder ( ) . input ( input ) . METHOD_6 ( new uk . gov . gchq . gaffer . data . element . function . IDENT_15 . Builder ( ) . select ( IDENT_6 . IDENT_7 ) . execute ( new uk . gov . gchq . IDENT_16 . impl . IDENT_17 . METHOD_7 ( INT_0 ) ) . build ( ) ) . build ( ) ; final java . lang . IDENT_18 < ? extends uk . gov . gchq . gaffer . data . element . Element > results = handler . METHOD_8 ( filter , context , store ) ; final java . util . List < uk . gov . gchq . gaffer . data . element . Element > IDENT_19 = com . google . common . collect . Lists . newArrayList ( results ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( uk . gov . gchq . gaffer . operation . impl . IDENT_20 , uk . gov . gchq . gaffer . store . Context , uk . gov . gchq . gaffer . store . IDENT_21 ) { if ( null == ( IDENT_22 . METHOD_9 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_10 ( STRING_2 ) ; } if ( null == ( IDENT_22 . METHOD_11 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_10 ( STRING_3 ) ; } final java . util . List < IDENT_23 > results = new java . util . ArrayList ( ) ; for ( final IDENT_24 input : IDENT_22 . METHOD_11 ( ) ) { final uk . gov . gchq . gaffer . operation . Operation IDENT_25 = IDENT_22 . METHOD_9 ( ) . METHOD_12 ( ) ; uk . gov . gchq . gaffer . store . operation . handler . util . IDENT_26 . METHOD_13 ( IDENT_25 , input ) ; results . add ( METHOD_14 ( IDENT_25 , context , store ) ) ; } return results ; }
org . junit . Assert . assertEquals ( expected , IDENT_19 ) 