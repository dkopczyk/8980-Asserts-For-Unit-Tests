METHOD_0 ( ) { final uk . gov . gchq . gaffer . operation . impl . IDENT_0 count = mock ( uk . gov . gchq . gaffer . operation . impl . IDENT_0 . class ) ; final uk . gov . gchq . gaffer . operation . impl . get . IDENT_1 IDENT_2 = mock ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_1 . class ) ; final uk . gov . gchq . gaffer . operation . impl . IDENT_3 IDENT_4 = mock ( uk . gov . gchq . gaffer . operation . impl . IDENT_3 . class ) ; final uk . gov . gchq . gaffer . operation . util . IDENT_5 IDENT_6 = mock ( uk . gov . gchq . gaffer . operation . util . IDENT_5 . class ) ; METHOD_1 ( IDENT_6 . METHOD_2 ( ) ) . METHOD_3 ( count ) ; final uk . gov . gchq . gaffer . operation . impl . IDENT_7 operation = new uk . gov . gchq . gaffer . operation . impl . IDENT_7 . Builder < > ( ) . METHOD_4 ( METHOD_4 ) . METHOD_5 ( IDENT_4 ) . METHOD_6 ( IDENT_2 ) . build ( ) ; final java . util . IDENT_8 < java . lang . Class < ? extends uk . gov . gchq . gaffer . operation . Operation > , java . lang . Integer > IDENT_9 = new java . util . METHOD_7 ( ) ; IDENT_9 . put ( uk . gov . gchq . gaffer . operation . impl . IDENT_0 . class , 1 ) ; IDENT_9 . put ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_1 . class , 3 ) ; IDENT_9 . put ( uk . gov . gchq . gaffer . operation . impl . IDENT_3 . class , 4 ) ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_10 IDENT_11 = new uk . gov . gchq . gaffer . store . operation . resolver . METHOD_8 ( IDENT_9 ) ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_12 resolver = new uk . gov . gchq . gaffer . store . operation . resolver . METHOD_9 ( ) ; final int IDENT_13 = resolver . METHOD_10 ( operation , IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( uk . gov . gchq . gaffer . operation . Operation , uk . gov . gchq . gaffer . store . operation . resolver . IDENT_14 ) { return IDENT_15 . METHOD_10 ( operation ) ; }
org . junit . Assert . assertEquals ( 4 , IDENT_13 ) 