METHOD_0 ( ) { final uk . gov . gchq . gaffer . store . schema . IDENT_0 IDENT_1 = mock ( uk . gov . gchq . gaffer . store . schema . IDENT_0 . class ) ; METHOD_1 ( IDENT_1 . METHOD_2 ( STRING_0 ) ) . METHOD_3 ( ( ( java . lang . Class ) ( java . lang . String . class ) ) ) ; METHOD_1 ( IDENT_1 . METHOD_2 ( STRING_1 ) ) . METHOD_3 ( ( ( java . lang . Class ) ( uk . gov . gchq . gaffer . store . schema . Integer . class ) ) ) ; final java . util . function . IDENT_2 < java . lang . String > IDENT_3 = ( a ) -> a . contains ( STRING_2 ) ; final java . util . function . IDENT_2 < java . lang . Integer > IDENT_4 = ( a ) -> a > 0 ; final uk . gov . gchq . gaffer . data . element . function . IDENT_5 IDENT_6 = new uk . gov . gchq . gaffer . data . element . function . IDENT_5 . Builder ( ) . select ( STRING_0 ) . execute ( IDENT_3 ) . select ( STRING_1 ) . execute ( IDENT_4 ) . build ( ) ; final uk . gov . gchq . gaffer . store . schema . IDENT_7 validator = new uk . gov . gchq . gaffer . store . schema . METHOD_4 ( ) ; final uk . gov . gchq . IDENT_8 . IDENT_9 result = validator . METHOD_5 ( IDENT_6 , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( uk . gov . gchq . gaffer . data . element . function . IDENT_10 , uk . gov . gchq . gaffer . store . schema . IDENT_0 ) { final uk . gov . gchq . IDENT_8 . IDENT_9 result = new uk . gov . gchq . IDENT_8 . METHOD_6 ( ) ; if ( ( null != IDENT_11 ) && ( null != ( IDENT_11 . METHOD_7 ( ) ) ) ) { for ( final uk . gov . gchq . IDENT_8 . tuple . IDENT_12 . IDENT_13 < java . lang . String , ? > IDENT_14 : IDENT_11 . METHOD_7 ( ) ) { if ( null == ( IDENT_14 . METHOD_8 ( ) ) ) { result . METHOD_9 ( ( ( IDENT_11 . getClass ( ) . METHOD_10 ( ) ) + STRING_3 ) ) ; } else { final uk . gov . gchq . IDENT_8 . IDENT_15 . IDENT_16 IDENT_17 = uk . gov . gchq . IDENT_8 . IDENT_15 . IDENT_16 . METHOD_11 ( IDENT_14 . METHOD_8 ( ) ) ; result . add ( IDENT_17 . METHOD_12 ( METHOD_13 ( IDENT_14 . METHOD_14 ( ) , IDENT_18 ) ) ) ; final uk . gov . gchq . IDENT_8 . IDENT_15 . IDENT_16 IDENT_19 = uk . gov . gchq . IDENT_8 . IDENT_15 . IDENT_16 . METHOD_15 ( IDENT_14 . METHOD_8 ( ) ) ; result . add ( IDENT_19 . METHOD_12 ( METHOD_13 ( IDENT_14 . METHOD_14 ( ) , IDENT_18 ) ) ) ; } } } return result ; }
org . junit . Assert . assertTrue ( result . isValid ( ) ) 