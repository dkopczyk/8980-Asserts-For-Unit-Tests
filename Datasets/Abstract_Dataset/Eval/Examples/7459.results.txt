METHOD_0 ( ) { org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_1 ( org . joda . time . IDENT_5 . METHOD_2 ( 10 ) ) ; org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_6 IDENT_7 = new org . apache . beam . sdk . IDENT_0 . IDENT_1 . METHOD_3 ( new org . joda . time . METHOD_4 ( 0 ) , new org . joda . time . METHOD_4 ( 10 ) ) ; org . apache . beam . runners . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = new org . apache . beam . runners . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_5 ( IDENT_3 , IDENT_13 ) ; org . apache . beam . sdk . util . IDENT_14 < org . apache . beam . sdk . values . IDENT_15 < java . lang . String , java . lang . String > > value = org . apache . beam . sdk . util . IDENT_14 . of ( org . apache . beam . sdk . values . IDENT_15 . of ( STRING_0 , STRING_1 ) , java . time . org . joda . time . METHOD_4 . now ( ) , IDENT_7 , IDENT_16 . IDENT_17 ) ; org . apache . beam . sdk . values . IDENT_15 < org . joda . time . METHOD_4 , org . apache . beam . sdk . util . IDENT_14 < org . apache . beam . sdk . values . IDENT_15 < java . lang . String , java . lang . String > > > result = IDENT_12 . map ( value ) ; org . joda . time . METHOD_4 time = IDENT_13 . METHOD_6 ( IDENT_7 , IDENT_3 . METHOD_7 ( value . METHOD_8 ( ) , IDENT_7 ) ) ; "<AssertPlaceHolder>" ; } equalTo ( org . apache . beam . sdk . IDENT_18 . IDENT_19 , T ) { final org . apache . beam . sdk . testing . IDENT_20 . IDENT_21 < T > IDENT_22 = new org . apache . beam . sdk . testing . IDENT_20 . METHOD_9 ( IDENT_23 , expected ) ; return org . apache . beam . sdk . testing . IDENT_20 . METHOD_10 ( ( ) -> org . hamcrest . Matchers . equalTo ( IDENT_22 . get ( ) ) ) ; }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . equalTo ( org . apache . beam . sdk . values . IDENT_15 . of ( time , value ) ) ) 