METHOD_0 ( ) { final uk . gov . gchq . gaffer . data . element . IDENT_0 IDENT_1 = new uk . gov . gchq . gaffer . data . element . IDENT_0 . Builder ( ) . source ( "1" ) . METHOD_1 ( "2" ) . METHOD_2 ( false ) . group ( IDENT_2 . IDENT_3 ) . build ( ) ; final byte [ ] IDENT_4 = converter . METHOD_3 ( IDENT_1 ) . METHOD_4 ( ) ; final byte [ ] [ ] IDENT_5 = new byte [ 2 ] [ ] ; final uk . gov . gchq . gaffer . data . element . IDENT_6 IDENT_7 = converter . METHOD_5 ( IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( byte [ ] , byte [ ] [ ] ) { final int [ ] IDENT_8 = new int [ 3 ] ; short IDENT_9 = 0 ; for ( int i = 0 ; i < ( ( IDENT_4 . length ) - 1 ) ; ++ i ) { if ( ( IDENT_4 [ i ] ) == ( uk . gov . gchq . gaffer . IDENT_10 . IDENT_11 . IDENT_12 ) ) { if ( IDENT_9 >= 3 ) { throw new uk . gov . gchq . gaffer . IDENT_13 . key . exception . METHOD_6 ( STRING_0 ) ; } IDENT_8 [ ( IDENT_9 ++ ) ] = i ; } } if ( IDENT_9 != 3 ) { throw new uk . gov . gchq . gaffer . IDENT_13 . key . exception . METHOD_6 ( ( ( STRING_1 + IDENT_9 ) + STRING_2 ) ) ; } byte IDENT_14 ; try { IDENT_14 = IDENT_4 [ ( ( IDENT_4 . length ) - 1 ) ] ; } catch ( final java . lang . IDENT_15 e ) { throw new uk . gov . gchq . gaffer . IDENT_13 . key . exception . METHOD_6 ( ( STRING_3 + e ) ) ; } byte [ ] IDENT_16 = uk . gov . gchq . gaffer . IDENT_10 . IDENT_11 . METHOD_7 ( IDENT_4 , 0 , IDENT_8 [ 0 ] ) ; byte [ ] IDENT_17 = uk . gov . gchq . gaffer . IDENT_10 . IDENT_11 . METHOD_7 ( IDENT_4 , ( ( IDENT_8 [ 1 ] ) + 1 ) , IDENT_8 [ 2 ] ) ; uk . gov . gchq . gaffer . data . element . IDENT_6 IDENT_18 ; IDENT_5 [ 0 ] = IDENT_16 ; IDENT_5 [ 1 ] = IDENT_17 ; switch ( IDENT_14 ) { case IDENT_19 . IDENT_20 : IDENT_18 = uk . gov . gchq . gaffer . data . element . IDENT_6 . IDENT_21 ; break ; case IDENT_19 . IDENT_22 : IDENT_18 = uk . gov . gchq . gaffer . data . element . IDENT_6 . IDENT_23 ; break ; case IDENT_19 . IDENT_24 : IDENT_5 [ 0 ] = IDENT_17 ; IDENT_5 [ 1 ] = IDENT_16 ; IDENT_18 = uk . gov . gchq . gaffer . data . element . IDENT_6 . IDENT_25 ; break ; default : throw new uk . gov . gchq . gaffer . IDENT_13 . key . exception . METHOD_6 ( ( STRING_4 + IDENT_14 ) ) ; } return IDENT_18 ; }
org . junit . Assert . assertEquals ( IDENT_6 . IDENT_21 , IDENT_7 ) 