METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; for ( java . lang . String name : IDENT_0 ) { org . apache . beam . runners . IDENT_1 . options . IDENT_2 options = METHOD_1 ( ) ; options . METHOD_2 ( name ) ; org . apache . beam . runners . IDENT_1 . IDENT_3 runner = org . apache . beam . runners . IDENT_1 . IDENT_3 . METHOD_3 ( options ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( org . apache . beam . sdk . options . IDENT_4 ) { org . apache . beam . runners . IDENT_1 . options . IDENT_2 IDENT_5 = org . apache . beam . sdk . options . IDENT_6 . validate ( org . apache . beam . runners . IDENT_1 . options . IDENT_2 . class , options ) ; java . util . ArrayList < java . lang . String > IDENT_7 = new java . util . ArrayList ( ) ; if ( ( IDENT_5 . METHOD_4 ( ) ) == null ) { IDENT_7 . add ( STRING_5 7 ) ; } if ( ( IDENT_7 . size ( ) ) > 0 ) { throw new java . lang . IllegalArgumentException ( ( STRING_5 3 + ( org . apache . beam . IDENT_8 . IDENT_9 . IDENT_10 . com . google . common . base . IDENT_11 . METHOD_5 ( STRING_6 ) . join ( IDENT_7 ) ) ) ) ; } org . apache . beam . sdk . IDENT_12 . IDENT_13 . storage . IDENT_14 validator = IDENT_5 . METHOD_6 ( ) ; java . lang . String IDENT_15 ; try { IDENT_15 = IDENT_5 . METHOD_7 ( ) ; } catch ( java . lang . Exception e ) { throw new java . lang . IllegalArgumentException ( ( STRING_7 + STRING_5 8 ) , e ) ; } validator . METHOD_8 ( IDENT_15 ) ; java . lang . String IDENT_16 ; try { IDENT_16 = IDENT_5 . METHOD_9 ( ) ; } catch ( java . lang . Exception e ) { throw new java . lang . IllegalArgumentException ( ( STRING_8 + STRING_5 8 ) , e ) ; } validator . METHOD_8 ( IDENT_16 ) ; if ( ! ( METHOD_10 ( IDENT_5 . METHOD_11 ( ) ) ) ) { validator . METHOD_8 ( IDENT_5 . METHOD_11 ( ) ) ; } if ( ( IDENT_5 . METHOD_12 ( ) ) == null ) { IDENT_5 . METHOD_13 ( METHOD_14 ( org . apache . beam . runners . IDENT_1 . IDENT_3 . class . METHOD_15 ( ) ) ) ; if ( IDENT_5 . METHOD_12 ( ) . isEmpty ( ) ) { throw new java . lang . IllegalArgumentException ( STRING_5 9 ) ; } else { org . apache . beam . runners . IDENT_1 . IDENT_3 . LOG . info ( ( STRING_9 + ( STRING_5 6 + STRING_5 5 ) ) , IDENT_5 . METHOD_12 ( ) . size ( ) ) ; org . apache . beam . runners . IDENT_1 . IDENT_3 . LOG . debug ( STRING_5 , IDENT_5 . METHOD_12 ( ) ) ; } } java . lang . String IDENT_17 = IDENT_5 . METHOD_16 ( ) . toLowerCase ( ) ; METHOD_17 ( IDENT_17 . matches ( STRING_10 ) , ( STRING_11 + ( STRING_5 0 + STRING_12 ) ) ) ; if ( ! ( IDENT_17 . equals ( IDENT_5 . METHOD_16 ( ) ) ) ) { org . apache . beam . runners . IDENT_1 . IDENT_3 . LOG . info ( ( STRING_7 0 + STRING_5 4 ) , IDENT_17 , IDENT_5 . METHOD_16 ( ) ) ; } IDENT_5 . METHOD_2 ( IDENT_17 ) ; java . lang . String project = IDENT_5 . METHOD_18 ( ) ; if ( project . matches ( STRING_7 1 ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_13 + project ) + STRING_7 2 ) ) ; } else if ( ! ( project . matches ( org . apache . beam . runners . IDENT_1 . IDENT_3 . IDENT_18 ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_13 + project ) + STRING_14 ) ) ; } org . apache . beam . runners . IDENT_1 . options . IDENT_19 IDENT_20 = IDENT_5 . as ( org . apache . beam . runners . IDENT_1 . options . IDENT_19 . class ) ; if ( ( IDENT_20 . METHOD_19 ( ) ) < 0 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_7 3 + ( IDENT_20 . METHOD_19 ( ) ) ) + STRING_7 4 ) ) ; } if ( ( IDENT_5 . METHOD_20 ( ) ) && ( ( IDENT_5 . METHOD_21 ( ) ) == null ) ) { IDENT_5 . METHOD_22 ( org . apache . beam . runners . IDENT_1 . IDENT_3 . IDENT_21 ) ; } org . apache . beam . runners . IDENT_1 . IDENT_22 IDENT_23 = org . apache . beam . runners . IDENT_1 . IDENT_22 . METHOD_23 ( ) ; java . lang . String IDENT_24 = java . lang . String . format ( STRING_5 2 , IDENT_23 . getName ( ) , IDENT_23 . METHOD_24 ( ) ) . replace ( STRING_5 1 , STRING_15 ) ; IDENT_5 . METHOD_25 ( IDENT_24 ) ; return new org . apache . beam . runners . IDENT_1 . METHOD_26 ( IDENT_5 ) ; }
org . junit . Assert . assertNotNull ( runner ) 