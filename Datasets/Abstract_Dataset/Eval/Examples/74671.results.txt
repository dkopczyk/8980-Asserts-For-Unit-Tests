METHOD_0 ( ) { final uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 store = mock ( uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 . class ) ; final uk . gov . gchq . gaffer . store . schema . Schema schema = METHOD_1 ( ) ; final uk . gov . gchq . gaffer . data . IDENT_2 . view . IDENT_3 view = new uk . gov . gchq . gaffer . data . IDENT_2 . view . IDENT_3 . Builder ( ) . METHOD_2 ( IDENT_4 . IDENT_5 , new uk . gov . gchq . gaffer . data . IDENT_2 . view . IDENT_6 . Builder ( ) . METHOD_3 ( new uk . gov . gchq . gaffer . data . element . function . IDENT_7 . Builder ( ) . select ( IDENT_8 . IDENT_9 ) . execute ( new uk . gov . gchq . IDENT_10 . impl . IDENT_11 . METHOD_4 ( ) ) . build ( ) ) . build ( ) ) . build ( ) ; METHOD_5 ( store . METHOD_6 ( ) ) . METHOD_7 ( schema ) ; final org . apache . accumulo . core . client . IDENT_12 iterator = factory . METHOD_8 ( view , store ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( uk . gov . gchq . gaffer . data . IDENT_2 . view . IDENT_3 , uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 ) { if ( ! ( view . METHOD_9 ( ) ) ) { uk . gov . gchq . gaffer . IDENT_0 . key . core . IDENT_13 . LOGGER . debug ( STRING_0 , view . METHOD_9 ( ) ) ; return null ; } final org . apache . accumulo . core . client . IDENT_12 is = new uk . gov . gchq . gaffer . IDENT_0 . utils . METHOD_10 ( uk . gov . gchq . gaffer . IDENT_0 . utils . IDENT_14 . IDENT_15 , uk . gov . gchq . gaffer . IDENT_0 . utils . IDENT_14 . IDENT_16 , uk . gov . gchq . gaffer . IDENT_0 . key . impl . IDENT_17 . class ) . schema ( store . METHOD_6 ( ) ) . view ( view ) . METHOD_11 ( store . METHOD_12 ( ) . METHOD_13 ( ) ) . build ( ) ; uk . gov . gchq . gaffer . IDENT_0 . key . core . IDENT_13 . LOGGER . debug ( ( STRING_1 + STRING_2 ) , uk . gov . gchq . gaffer . IDENT_0 . key . impl . IDENT_17 . class . getName ( ) , IDENT_14 . IDENT_15 , store . METHOD_6 ( ) , view , store . METHOD_12 ( ) . METHOD_13 ( ) ) ; return is ; }
org . junit . Assert . assertNull ( iterator ) 