METHOD_0 ( ) { org . apache . beam . runners . IDENT_0 . IDENT_1 job = METHOD_1 ( new org . apache . beam . runners . IDENT_0 . METHOD_2 ( IDENT_2 , STRING_0 , options , null ) ) ; org . apache . beam . sdk . IDENT_3 p = org . apache . beam . sdk . testing . IDENT_4 . create ( options ) ; org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer > IDENT_6 = p . apply ( org . apache . beam . sdk . IDENT_7 . IDENT_8 . of ( 1 , 2 , 3 ) ) ; org . apache . beam . sdk . testing . IDENT_9 . that ( IDENT_6 ) . METHOD_3 ( 1 , 2 , 3 ) ; when ( IDENT_2 . METHOD_4 ( anyString ( ) ) ) . thenReturn ( METHOD_5 ( METHOD_6 ( true , true ) ) ) ; org . apache . beam . runners . IDENT_0 . IDENT_10 runner = org . apache . beam . runners . IDENT_0 . IDENT_10 . METHOD_7 ( options , IDENT_2 ) ; doReturn ( IDENT_11 . IDENT_12 ) . when ( job ) . METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( org . apache . beam . runners . IDENT_0 . METHOD_2 ) { com . google . api . services . IDENT_0 . model . IDENT_13 metrics = METHOD_4 ( job ) ; if ( ( metrics == null ) || ( ( metrics . METHOD_10 ( ) ) == null ) ) { org . apache . beam . runners . IDENT_0 . IDENT_10 . LOG . warn ( STRING_1 , job . METHOD_11 ( ) ) ; return org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . METHOD_12 ( ) ; } int IDENT_17 = 0 ; int IDENT_18 = 0 ; for ( com . google . api . services . IDENT_0 . model . IDENT_19 IDENT_20 : metrics . METHOD_10 ( ) ) { if ( ( ( ( IDENT_20 . getName ( ) ) == null ) || ( ( IDENT_20 . getName ( ) . METHOD_13 ( ) ) == null ) ) || ( ! ( IDENT_20 . getName ( ) . METHOD_13 ( ) . containsKey ( org . apache . beam . runners . IDENT_0 . IDENT_10 . IDENT_21 ) ) ) ) { continue ; } if ( IDENT_9 . IDENT_22 . equals ( IDENT_20 . getName ( ) . getName ( ) ) ) { IDENT_17 += ( ( java . math . BigDecimal ) ( IDENT_20 . METHOD_14 ( ) ) ) . METHOD_15 ( ) ; } else if ( IDENT_9 . IDENT_23 . equals ( IDENT_20 . getName ( ) . getName ( ) ) ) { IDENT_18 += ( ( java . math . BigDecimal ) ( IDENT_20 . METHOD_14 ( ) ) ) . METHOD_15 ( ) ; } } if ( IDENT_18 > 0 ) { org . apache . beam . runners . IDENT_0 . IDENT_10 . LOG . info ( ( STRING_2 + STRING_3 ) , job . METHOD_11 ( ) , IDENT_17 , IDENT_18 , IDENT_24 ) ; return org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . of ( false ) ; } else if ( IDENT_17 >= ( IDENT_24 ) ) { org . apache . beam . runners . IDENT_0 . IDENT_10 . LOG . info ( ( STRING_4 + STRING_5 ) , job . METHOD_11 ( ) , IDENT_17 , IDENT_18 , IDENT_24 ) ; return org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . of ( true ) ; } org . apache . beam . sdk . IDENT_25 . IDENT_11 state = job . METHOD_8 ( ) ; if ( ( state == ( org . apache . beam . sdk . IDENT_25 . IDENT_11 . IDENT_26 ) ) || ( state == ( org . apache . beam . sdk . IDENT_25 . IDENT_11 . IDENT_27 ) ) ) { org . apache . beam . runners . IDENT_0 . IDENT_10 . LOG . info ( STRING_6 , job . METHOD_11 ( ) , state ) ; return org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . METHOD_12 ( ) ; } org . apache . beam . runners . IDENT_0 . IDENT_10 . LOG . info ( ( STRING_7 + STRING_5 ) , job . METHOD_11 ( ) , IDENT_17 , IDENT_18 , IDENT_24 ) ; return org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . METHOD_12 ( ) ; }
org . junit . Assert . assertThat ( runner . METHOD_9 ( job ) , org . hamcrest . Matchers . equalTo ( org . apache . beam . IDENT_14 . IDENT_15 . IDENT_16 . com . google . common . base . Optional . of ( true ) ) ) 