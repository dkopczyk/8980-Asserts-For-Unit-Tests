METHOD_0 ( ) { org . apache . beam . runners . IDENT_0 . IDENT_1 IDENT_2 = mock ( org . apache . beam . runners . IDENT_0 . IDENT_1 . class ) ; com . google . api . services . IDENT_0 . model . IDENT_3 IDENT_4 = new com . google . api . services . IDENT_0 . model . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( new java . util . ArrayList ( ) ) ; for ( long i = 0 ; i < 100 ; ++ i ) { com . google . api . services . IDENT_0 . model . IDENT_5 message = new com . google . api . services . IDENT_0 . model . METHOD_3 ( ) ; message . setId ( ( STRING_0 + i ) ) ; message . METHOD_4 ( org . apache . beam . runners . IDENT_0 . util . IDENT_6 . METHOD_5 ( new org . joda . time . METHOD_6 ( i ) ) ) ; IDENT_4 . METHOD_7 ( ) . add ( message ) ; } java . lang . String IDENT_7 = STRING_1 ; IDENT_4 . METHOD_8 ( IDENT_7 ) ; com . google . api . services . IDENT_0 . model . METHOD_1 IDENT_8 = new com . google . api . services . IDENT_0 . model . METHOD_1 ( ) ; IDENT_8 . METHOD_2 ( new java . util . ArrayList ( ) ) ; for ( long i = 100 ; i < INT_0 ; ++ i ) { com . google . api . services . IDENT_0 . model . METHOD_3 message = new com . google . api . services . IDENT_0 . model . METHOD_3 ( ) ; message . setId ( ( STRING_0 + i ) ) ; message . METHOD_4 ( org . apache . beam . runners . IDENT_0 . util . IDENT_6 . METHOD_5 ( new org . joda . time . METHOD_6 ( i ) ) ) ; IDENT_8 . METHOD_7 ( ) . add ( message ) ; } when ( IDENT_2 . METHOD_9 ( org . apache . beam . runners . IDENT_0 . util . IDENT_9 . IDENT_10 , null ) ) . thenReturn ( IDENT_4 ) ; when ( IDENT_2 . METHOD_9 ( org . apache . beam . runners . IDENT_0 . util . IDENT_9 . IDENT_10 , IDENT_7 ) ) . thenReturn ( IDENT_8 ) ; org . apache . beam . runners . IDENT_0 . util . IDENT_11 util = new org . apache . beam . runners . IDENT_0 . util . METHOD_10 ( IDENT_2 ) ; java . util . List < com . google . api . services . IDENT_0 . model . METHOD_3 > messages = util . METHOD_7 ( org . apache . beam . runners . IDENT_0 . util . IDENT_9 . IDENT_10 , ( - 1 ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return size ; }
org . junit . Assert . assertEquals ( INT_0 , messages . size ( ) ) 