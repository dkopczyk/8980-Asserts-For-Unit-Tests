METHOD_0 ( ) { final uk . gov . gchq . gaffer . data . element . Properties properties = new uk . gov . gchq . gaffer . data . element . Properties ( ) { { put ( IDENT_0 . IDENT_1 , 1 ) ; put ( IDENT_0 . IDENT_2 , 2 ) ; put ( IDENT_0 . IDENT_3 , 3 ) ; put ( IDENT_0 . IDENT_4 , 4 ) ; } } ; final byte [ ] bytes = IDENT_5 . METHOD_1 ( IDENT_6 . IDENT_7 , properties ) ; final byte [ ] IDENT_8 = IDENT_5 . METHOD_2 ( IDENT_6 . IDENT_7 , bytes , 2 ) ; final uk . gov . gchq . gaffer . data . element . Properties IDENT_9 = new uk . gov . gchq . gaffer . data . element . Properties ( ) { { put ( IDENT_0 . IDENT_1 , 1 ) ; put ( IDENT_0 . IDENT_2 , 2 ) ; } } ; final byte [ ] IDENT_10 = IDENT_5 . METHOD_1 ( IDENT_6 . IDENT_7 , IDENT_9 ) ; final byte [ ] IDENT_11 = IDENT_5 . METHOD_2 ( IDENT_6 . IDENT_7 , IDENT_10 , 2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , byte [ ] , int ) { if ( ( ( IDENT_12 == 0 ) || ( null == bytes ) ) || ( ( bytes . length ) == 0 ) ) { return uk . gov . gchq . gaffer . IDENT_13 . utils . IDENT_14 . IDENT_15 ; } final uk . gov . gchq . gaffer . store . schema . IDENT_16 IDENT_17 = schema . METHOD_3 ( group ) ; if ( null == IDENT_17 ) { throw new uk . gov . gchq . gaffer . exception . METHOD_4 ( ( ( STRING_0 + group ) + STRING_1 ) ) ; } final int IDENT_18 = ( uk . gov . gchq . gaffer . IDENT_5 . IDENT_19 . IDENT_20 . IDENT_21 . METHOD_5 ( bytes [ 0 ] ) ) + ( org . apache . hadoop . hbase . util . IDENT_22 . METHOD_6 ( group ) . length ) ; if ( IDENT_12 == ( IDENT_17 . METHOD_7 ( ) . size ( ) ) ) { final int length = ( bytes . length ) - IDENT_18 ; final byte [ ] IDENT_23 = new byte [ length ] ; java . lang . System . METHOD_8 ( bytes , IDENT_18 , IDENT_23 , 0 , length ) ; return IDENT_23 ; } int IDENT_24 = IDENT_18 ; final int IDENT_25 = bytes . length ; long IDENT_26 ; int IDENT_27 = 0 ; while ( ( IDENT_27 < IDENT_12 ) && ( IDENT_24 < IDENT_25 ) ) { final int IDENT_28 = uk . gov . gchq . gaffer . IDENT_5 . IDENT_19 . IDENT_20 . IDENT_21 . METHOD_5 ( bytes [ IDENT_24 ] ) ; final byte [ ] length = new byte [ IDENT_28 ] ; java . lang . System . METHOD_8 ( bytes , IDENT_24 , length , 0 , IDENT_28 ) ; try { IDENT_26 = uk . gov . gchq . gaffer . IDENT_5 . IDENT_19 . IDENT_20 . IDENT_21 . METHOD_9 ( length ) ; } catch ( final uk . gov . gchq . gaffer . exception . METHOD_4 e ) { throw new uk . gov . gchq . gaffer . exception . METHOD_4 ( STRING_2 ) ; } IDENT_24 += IDENT_28 ; if ( IDENT_26 > 0 ) { IDENT_24 += IDENT_26 ; } IDENT_27 ++ ; } final int length = IDENT_24 - IDENT_18 ; final byte [ ] IDENT_23 = new byte [ length ] ; java . lang . System . METHOD_8 ( bytes , IDENT_18 , IDENT_23 , 0 , length ) ; return IDENT_23 ; }
org . junit . Assert . assertArrayEquals ( IDENT_11 , IDENT_8 ) 