METHOD_0 ( ) { final uk . gov . gchq . gaffer . graph . IDENT_0 graph = uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_1 ( ) ; final uk . gov . gchq . gaffer . operation . impl . add . IDENT_3 IDENT_4 = new uk . gov . gchq . gaffer . operation . impl . add . IDENT_3 . Builder ( ) . input ( uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_2 ( ) ) . build ( ) ; graph . execute ( IDENT_4 , new uk . gov . gchq . gaffer . user . User ( ) ) ; final uk . gov . gchq . gaffer . operation . impl . get . IDENT_5 IDENT_6 = new uk . gov . gchq . gaffer . operation . impl . get . IDENT_5 . Builder ( ) . input ( new uk . gov . gchq . gaffer . operation . data . METHOD_3 ( STRING_0 ) ) . view ( new uk . gov . gchq . gaffer . data . IDENT_7 . view . IDENT_8 . Builder ( ) . METHOD_4 ( IDENT_2 . IDENT_9 ) . build ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . IDENT_10 . IDENT_11 . IDENT_12 < ? extends uk . gov . gchq . gaffer . data . element . Element > results = graph . execute ( IDENT_6 , new uk . gov . gchq . gaffer . user . User ( ) ) ; final java . util . Map < uk . gov . gchq . gaffer . data . element . Element , java . lang . Integer > IDENT_13 = uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_5 ( uk . gov . gchq . gaffer . IDENT_10 . stream . IDENT_14 . METHOD_6 ( results ) ) ; final java . util . stream . IDENT_15 < uk . gov . gchq . gaffer . data . element . Element > IDENT_16 = uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_2 ( ) . stream ( ) . filter ( ( element ) -> element . METHOD_7 ( ) . equals ( IDENT_2 . IDENT_9 ) ) . filter ( ( element ) -> { if ( element instanceof uk . gov . gchq . gaffer . data . element . Entity ) { return ( ( uk . gov . gchq . gaffer . data . element . Entity ) ( element ) ) . METHOD_8 ( ) . equals ( STRING_0 ) ; } else { final uk . gov . gchq . gaffer . data . element . IDENT_17 METHOD_4 = ( ( uk . gov . gchq . gaffer . data . element . IDENT_17 ) ( element ) ) ; return ( METHOD_4 . METHOD_9 ( ) . equals ( STRING_0 ) ) || ( METHOD_4 . METHOD_10 ( ) . equals ( STRING_0 ) ) ; } } ) ; final java . util . Map < uk . gov . gchq . gaffer . data . element . Element , java . lang . Integer > IDENT_18 = uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_5 ( IDENT_16 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . stream . IDENT_15 ) { final java . util . Map < uk . gov . gchq . gaffer . data . element . Element , java . lang . Integer > IDENT_19 = new java . util . HashMap ( ) ; elements . METHOD_11 ( ( element ) -> { if ( IDENT_19 . containsKey ( element ) ) { IDENT_19 . put ( element , ( ( IDENT_19 . get ( element ) ) + 1 ) ) ; } else { IDENT_19 . put ( element , 1 ) ; } } ) ; return IDENT_19 ; }
org . junit . Assert . assertEquals ( IDENT_18 , IDENT_13 ) 