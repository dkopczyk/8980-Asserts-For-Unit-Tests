METHOD_0 ( ) { java . util . List < org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_2 > IDENT_3 = new java . util . ArrayList ( ) ; java . util . List < org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_2 > IDENT_4 = new java . util . ArrayList ( ) ; org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_2 IDENT_5 = new org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . METHOD_1 ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_7 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_8 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_9 ) ; java . util . List < org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . METHOD_1 > IDENT_10 = java . util . Collections . singletonList ( IDENT_5 ) ; when ( IDENT_11 . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_12 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ) . thenReturn ( new org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_14 . METHOD_2 ( IDENT_3 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_15 ) ) ; when ( IDENT_11 . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_15 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ) . thenReturn ( new org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_14 . METHOD_2 ( IDENT_4 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_16 ) ) ; when ( IDENT_11 . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_16 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ) . thenReturn ( new org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_14 . METHOD_2 ( IDENT_10 , null ) ) ; java . util . List < org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . METHOD_1 > results = newArrayList ( reader . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_12 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_11 ) . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_12 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ; verify ( IDENT_11 ) . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_15 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ; verify ( IDENT_11 ) . read ( org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_16 , org . apache . beam . runners . IDENT_0 . IDENT_1 . util . common . IDENT_1 . IDENT_6 . IDENT_13 ) ; METHOD_3 ( IDENT_11 ) ; } contains ( org . apache . beam . sdk . values . IDENT_17 ) { return delegate . contains ( view ) ; }
org . junit . Assert . assertThat ( results , org . hamcrest . Matchers . contains ( IDENT_5 ) ) 