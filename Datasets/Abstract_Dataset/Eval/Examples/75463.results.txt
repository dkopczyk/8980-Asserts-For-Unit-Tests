METHOD_0 ( ) { au . gov . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . Path path = METHOD_1 ( 0.0 , ( - FLOAT_0 ) , 0.0 , FLOAT_0 , FLOAT_0 , FLOAT_0 ) ; gov . IDENT_4 . IDENT_1 . geom . IDENT_5 expected = new gov . IDENT_4 . IDENT_1 . geom . METHOD_2 ( gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . IDENT_7 , gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . IDENT_8 , gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . IDENT_9 , gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . IDENT_8 ) ; gov . IDENT_4 . IDENT_1 . geom . METHOD_2 result = path . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( isEmpty ( IDENT_10 ) ) { return null ; } gov . IDENT_4 . IDENT_1 . geom . IDENT_6 IDENT_11 = gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . METHOD_4 ( INT_0 ) ; gov . IDENT_4 . IDENT_1 . geom . IDENT_6 IDENT_12 = gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . METHOD_4 ( INT_0 ) ; gov . IDENT_4 . IDENT_1 . geom . IDENT_6 IDENT_13 = gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . METHOD_4 ( ( - INT_0 ) ) ; gov . IDENT_4 . IDENT_1 . geom . IDENT_6 IDENT_14 = gov . IDENT_4 . IDENT_1 . geom . IDENT_6 . METHOD_4 ( ( - INT_0 ) ) ; for ( gov . IDENT_4 . IDENT_1 . geom . IDENT_15 IDENT_16 : IDENT_10 . values ( ) ) { if ( ( IDENT_16 . METHOD_5 ( ) . compareTo ( IDENT_11 ) ) < 0 ) { IDENT_11 = IDENT_16 . METHOD_5 ( ) ; } if ( ( IDENT_16 . METHOD_5 ( ) . compareTo ( IDENT_13 ) ) > 0 ) { IDENT_13 = IDENT_16 . METHOD_5 ( ) ; } if ( ( IDENT_16 . METHOD_6 ( ) . compareTo ( IDENT_12 ) ) < 0 ) { IDENT_12 = IDENT_16 . METHOD_6 ( ) ; } if ( ( IDENT_16 . METHOD_6 ( ) . compareTo ( IDENT_14 ) ) > 0 ) { IDENT_14 = IDENT_16 . METHOD_6 ( ) ; } } return new gov . IDENT_4 . IDENT_1 . geom . METHOD_2 ( IDENT_11 , IDENT_13 , IDENT_12 , IDENT_14 ) ; }
org . junit . Assert . assertEquals ( expected , result ) 