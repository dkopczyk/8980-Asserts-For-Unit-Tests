METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { org . apache . avro . file . IDENT_1 . IDENT_2 , org . apache . avro . file . IDENT_1 . IDENT_3 , org . apache . avro . file . IDENT_1 . IDENT_4 , org . apache . avro . file . IDENT_1 . IDENT_5 , org . apache . avro . file . IDENT_1 . IDENT_6 } ; java . util . List < org . apache . beam . sdk . io . IDENT_7 . IDENT_8 > expected = org . apache . beam . sdk . io . IDENT_7 . METHOD_1 ( ( 1 << 16 ) ) ; for ( java . lang . String codec : IDENT_0 ) { java . lang . String IDENT_9 = METHOD_2 ( codec , expected , org . apache . beam . sdk . io . IDENT_7 . IDENT_10 . IDENT_11 , 0 , org . apache . beam . sdk . IDENT_12 . IDENT_13 . of ( org . apache . beam . sdk . io . IDENT_7 . IDENT_8 . class ) , codec ) ; org . apache . beam . sdk . io . IDENT_14 < org . apache . beam . sdk . io . IDENT_7 . IDENT_8 > source = org . apache . beam . sdk . io . IDENT_14 . from ( IDENT_9 ) . METHOD_3 ( org . apache . beam . sdk . io . IDENT_7 . IDENT_8 . class ) ; java . util . List < org . apache . beam . sdk . io . IDENT_7 . IDENT_8 > actual = org . apache . beam . sdk . testing . IDENT_15 . METHOD_4 ( source , null ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( java . util . Collection ) { @ org . apache . beam . sdk . testing . METHOD_6 ( { STRING_0 , STRING_1 } ) final java . util . Collection < org . hamcrest . IDENT_16 < ? super T > > matchers = ( ( java . util . Collection ) ( IDENT_17 ) ) ; return org . apache . beam . sdk . testing . IDENT_18 . METHOD_7 ( ( ) -> org . hamcrest . Matchers . METHOD_5 ( matchers ) ) ; }
org . junit . Assert . assertThat ( expected , org . hamcrest . Matchers . METHOD_5 ( actual . toArray ( ) ) ) 