METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . util . List < org . apache . beam . sdk . io . IDENT_1 . IDENT_2 > expected = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . util . List < org . apache . beam . sdk . io . IDENT_1 . IDENT_2 > IDENT_3 = org . apache . beam . sdk . io . IDENT_1 . METHOD_1 ( ( ( org . apache . beam . sdk . io . IDENT_1 . IDENT_4 ) / 10 ) ) ; expected . addAll ( IDENT_3 ) ; METHOD_2 ( ( IDENT_0 + i ) , IDENT_3 , org . apache . beam . sdk . io . IDENT_1 . IDENT_5 . IDENT_6 , 0 , org . apache . beam . sdk . IDENT_7 . IDENT_8 . of ( org . apache . beam . sdk . io . IDENT_1 . IDENT_2 . class ) , IDENT_9 . IDENT_10 ) ; } org . apache . beam . sdk . io . IDENT_11 < org . apache . beam . sdk . io . IDENT_1 . IDENT_2 > source = org . apache . beam . sdk . io . IDENT_11 . from ( new java . io . File ( IDENT_12 . METHOD_3 ( ) . toString ( ) , ( IDENT_0 + STRING_1 ) ) . toString ( ) ) . METHOD_4 ( org . apache . beam . sdk . io . IDENT_1 . IDENT_2 . class ) ; java . util . List < org . apache . beam . sdk . io . IDENT_1 . IDENT_2 > actual = org . apache . beam . sdk . testing . IDENT_13 . METHOD_5 ( source , null ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Collection ) { @ org . apache . beam . sdk . testing . METHOD_7 ( { STRING_2 , STRING_3 } ) final java . util . Collection < org . hamcrest . IDENT_14 < ? super T > > matchers = ( ( java . util . Collection ) ( IDENT_15 ) ) ; return org . apache . beam . sdk . testing . IDENT_16 . METHOD_8 ( ( ) -> org . hamcrest . Matchers . METHOD_6 ( matchers ) ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . Matchers . METHOD_6 ( expected . toArray ( ) ) ) 