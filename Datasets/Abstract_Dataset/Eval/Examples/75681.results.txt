METHOD_0 ( ) { try { IDENT_0 . METHOD_1 ( null ) ; } catch ( java . lang . IDENT_1 e ) { "<AssertPlaceHolder>" ; } METHOD_2 ( ) . when ( IDENT_2 ) . METHOD_3 ( eq ( IDENT_3 . getName ( ) ) ) ; METHOD_2 ( ) . when ( IDENT_2 ) . METHOD_3 ( eq ( IDENT_4 . getName ( ) ) ) ; java . util . List < java . lang . String > IDENT_5 = java . util . Arrays . asList ( IDENT_3 . getName ( ) , IDENT_4 . getName ( ) ) ; IDENT_0 . METHOD_1 ( IDENT_5 ) ; verify ( IDENT_2 , times ( 1 ) ) . METHOD_3 ( eq ( IDENT_3 . getName ( ) ) ) ; verify ( IDENT_2 , times ( 1 ) ) . METHOD_3 ( eq ( IDENT_4 . getName ( ) ) ) ; } METHOD_1 ( java . util . List ) { METHOD_4 ( IDENT_6 ) ; for ( java . lang . String IDENT_7 : IDENT_6 ) { try { IDENT_2 . METHOD_3 ( IDENT_7 ) ; } catch ( java . lang . IllegalArgumentException e ) { org . IDENT_8 . IDENT_9 . IDENT_10 . log . log ( IDENT_11 . IDENT_12 , ( STRING_0 + ( IDENT_2 . METHOD_5 ( IDENT_7 ) . METHOD_6 ( ) ) ) , e ) ; } } }
org . junit . Assert . assertTrue ( true ) 