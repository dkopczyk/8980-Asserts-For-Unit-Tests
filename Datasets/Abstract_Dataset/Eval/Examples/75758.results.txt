METHOD_0 ( ) { final java . util . logging . IDENT_0 log = METHOD_1 ( STRING_0 , java . util . logging . IDENT_0 . class ) ; org . junit . runner . IDENT_1 IDENT_2 = METHOD_1 ( STRING_1 , org . junit . runner . IDENT_1 . class ) ; org . junit . runners . model . IDENT_3 base = METHOD_1 ( STRING_2 , org . junit . runners . model . IDENT_3 . class ) ; expect ( log . METHOD_2 ( ) ) . andReturn ( IDENT_4 . IDENT_5 ) ; log . METHOD_3 ( IDENT_4 . IDENT_6 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; final org . easymock . IDENT_7 < java . util . logging . IDENT_8 > IDENT_9 = new org . easymock . METHOD_6 ( ) ; final java . lang . Exception ex = new java . lang . IllegalArgumentException ( ) ; final java . util . logging . IDENT_10 record = METHOD_1 ( STRING_3 , java . util . logging . IDENT_10 . class ) ; log . METHOD_7 ( METHOD_8 ( IDENT_9 ) ) ; METHOD_4 ( ) . METHOD_5 ( ) ; base . evaluate ( ) ; METHOD_4 ( ) . METHOD_9 ( new org . easymock . IDENT_11 < java . lang . IDENT_12 > ( ) { @ org . IDENT_13 . util . Override public org . IDENT_13 . util . IDENT_12 METHOD_10 ( ) throws java . lang . Throwable { verify ( log ) ; METHOD_11 ( log ) ; log . METHOD_12 ( IDENT_9 . getValue ( ) ) ; METHOD_4 ( ) . METHOD_5 ( ) ; log . METHOD_3 ( IDENT_4 . IDENT_5 ) ; METHOD_4 ( ) . METHOD_5 ( ) ; IDENT_9 . getValue ( ) . METHOD_13 ( record ) ; "<AssertPlaceHolder>" ; replay ( log ) ; return null ; } } ) ; replay ( log , IDENT_2 , base ) ; org . IDENT_13 . util . IDENT_14 rule = new org . IDENT_13 . util . METHOD_14 ( log , java . util . logging . IDENT_4 . IDENT_6 ) ; org . junit . runners . model . IDENT_3 s = rule . apply ( base , IDENT_2 ) ; s . evaluate ( ) ; verify ( log , IDENT_2 , base ) ; } getValue ( ) { return METHOD_15 ( IDENT_15 , "value" , java . lang . Object . class ) ; }
org . junit . Assert . assertThat ( ( ( org . IDENT_13 . util . METHOD_14 ) ( IDENT_9 . getValue ( ) ) ) . records ( ) , org . hamcrest . Matchers . contains ( record ) ) 