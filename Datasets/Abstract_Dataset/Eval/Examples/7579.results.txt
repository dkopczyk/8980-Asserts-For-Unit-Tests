METHOD_0 ( ) { org . apache . beam . sdk . options . IDENT_0 options = org . apache . beam . sdk . options . IDENT_1 . create ( ) ; java . util . List < java . lang . String > data = METHOD_1 ( 3 , 50 ) ; java . lang . String IDENT_2 = STRING_0 ; java . io . File file = METHOD_2 ( IDENT_2 , data ) ; org . apache . beam . sdk . io . fs . IDENT_3 . IDENT_4 metadata = org . apache . beam . sdk . io . IDENT_5 . METHOD_3 ( file . getPath ( ) ) ; org . apache . beam . sdk . io . IDENT_6 . IDENT_7 IDENT_8 = new org . apache . beam . sdk . io . IDENT_6 . METHOD_4 ( metadata , INT_0 , 0 , INT_1 , null ) ; org . apache . beam . sdk . io . IDENT_6 . METHOD_4 IDENT_9 = new org . apache . beam . sdk . io . IDENT_6 . METHOD_4 ( metadata , INT_0 , INT_1 , INT_2 , null ) ; org . apache . beam . sdk . io . IDENT_6 . METHOD_4 IDENT_10 = new org . apache . beam . sdk . io . IDENT_6 . METHOD_4 ( metadata , INT_0 , INT_2 , Long . MAX_VALUE , null ) ; java . util . List < java . lang . String > results = new java . util . ArrayList ( ) ; results . addAll ( METHOD_5 ( IDENT_8 , options ) ) ; results . addAll ( METHOD_5 ( IDENT_9 , options ) ) ; results . addAll ( METHOD_5 ( IDENT_10 , options ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Collection ) { @ org . apache . beam . sdk . testing . METHOD_7 ( { STRING_1 , STRING_2 } ) final java . util . Collection < org . hamcrest . IDENT_11 < ? super T > > matchers = ( ( java . util . Collection ) ( IDENT_12 ) ) ; return org . apache . beam . sdk . testing . IDENT_13 . METHOD_8 ( ( ) -> org . hamcrest . Matchers . METHOD_6 ( matchers ) ) ; }
org . junit . Assert . assertThat ( data , org . hamcrest . Matchers . METHOD_6 ( results . toArray ( ) ) ) 