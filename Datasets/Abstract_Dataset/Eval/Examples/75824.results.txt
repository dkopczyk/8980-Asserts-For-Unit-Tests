METHOD_0 ( ) { org . IDENT_0 . catalog . IDENT_1 IDENT_2 = METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( IDENT_3 . IDENT_4 ) ) ; org . geotools . data . IDENT_5 fs = IDENT_2 . METHOD_4 ( null , null ) ; org . geotools . data . simple . IDENT_6 IDENT_7 = ( ( org . geotools . data . simple . IDENT_6 ) ( fs . METHOD_5 ( ) ) ) ; final java . util . concurrent . atomic . IDENT_8 IDENT_9 = new java . util . concurrent . atomic . METHOD_6 ( 0 ) ; org . geotools . data . simple . IDENT_6 IDENT_10 = new org . geotools . feature . collection . METHOD_7 ( IDENT_7 ) { @ org . IDENT_0 . IDENT_11 . Override public org . geotools . data . simple . IDENT_12 METHOD_8 ( ) { IDENT_9 . METHOD_9 ( ) ; final org . opengis . feature . simple . IDENT_13 f = org . geotools . data . IDENT_14 . first ( delegate ) ; return new org . geotools . data . simple . METHOD_10 ( ) { @ org . IDENT_0 . IDENT_11 . Override public org . opengis . feature . simple . IDENT_13 next ( ) throws java . util . IDENT_15 { return f ; } @ org . IDENT_0 . IDENT_11 . Override public boolean hasNext ( ) { return true ; } @ org . IDENT_0 . IDENT_11 . Override public void close ( ) { IDENT_9 . METHOD_11 ( ) ; } } ; } } ; org . IDENT_0 . IDENT_11 . IDENT_16 IDENT_17 = new org . IDENT_0 . IDENT_11 . METHOD_12 ( IDENT_10 , IDENT_10 . METHOD_13 ( ) ) ; org . geotools . feature . IDENT_18 < ? > i = IDENT_17 . METHOD_8 ( ) ; i . close ( ) ; "<AssertPlaceHolder>" ; } get ( ) { org . springframework . web . context . request . IDENT_19 IDENT_20 = org . springframework . web . context . request . IDENT_21 . METHOD_14 ( ) ; if ( IDENT_20 == null ) return null ; return ( ( org . IDENT_0 . rest . IDENT_22 ) ( IDENT_20 . METHOD_15 ( org . IDENT_0 . rest . IDENT_22 . IDENT_23 , IDENT_19 . IDENT_24 ) ) ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_9 . get ( ) ) 