METHOD_0 ( ) { java . lang . Boolean IDENT_0 = false ; java . lang . Class IDENT_1 = it . IDENT_2 . IDENT_3 . IDENT_4 . client . configuration . IDENT_5 . class ; java . util . Iterator < java . util . Map . Entry < java . lang . String , java . lang . Class < ? > > > it = IDENT_6 . iterator ( ) ; while ( it . hasNext ( ) ) { java . util . Map . Entry < java . lang . String , java . lang . Class < ? > > IDENT_7 = it . next ( ) ; it . IDENT_2 . IDENT_3 . IDENT_8 . IDENT_9 action = ( ( it . IDENT_2 . IDENT_3 . IDENT_8 . IDENT_9 ) ( it . IDENT_2 . IDENT_3 . IDENT_4 . client . configuration . IDENT_10 . class . METHOD_1 ( ) [ 0 ] ) ) ; java . lang . String IDENT_11 = action . METHOD_2 ( ) ; if ( ( METHOD_2 == null ) || ( METHOD_2 . isEmpty ( ) ) ) { METHOD_2 = IDENT_1 . METHOD_3 ( ) ; } if ( ( IDENT_7 . getKey ( ) . equals ( METHOD_2 ) ) && ( IDENT_7 . getValue ( ) . equals ( IDENT_1 ) ) ) { IDENT_0 = true ; break ; } } "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( ( this ) == obj ) { return true ; } if ( ! ( super . equals ( obj ) ) ) { return false ; } if ( ( it . IDENT_2 . IDENT_3 . flow . event . generator . file . IDENT_12 . getClass ( ) ) != ( obj . getClass ( ) ) ) { return false ; } it . IDENT_2 . IDENT_3 . flow . event . generator . file . IDENT_12 < it . IDENT_2 . IDENT_13 . monitor . IDENT_14 > other = null ; if ( obj instanceof it . IDENT_2 . IDENT_3 . flow . event . generator . file . IDENT_12 ) { other = ( ( it . IDENT_2 . IDENT_3 . flow . event . generator . file . IDENT_12 ) ( obj ) ) ; } else { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } if ( ( IDENT_15 ) == null ) { if ( ( other . IDENT_15 ) != null ) { return false ; } } else if ( ! ( IDENT_15 . equals ( other . IDENT_15 ) ) ) { return false ; } if ( ( IDENT_16 ) == null ) { if ( ( other . IDENT_16 ) != null ) { return false ; } } else if ( ! ( IDENT_16 . equals ( other . IDENT_16 ) ) ) { return false ; } if ( ( IDENT_17 ) == null ) { if ( ( other . IDENT_17 ) != null ) { return false ; } } else if ( ! ( IDENT_17 . equals ( other . IDENT_17 ) ) ) { return false ; } return true ; }
org . junit . Assert . assertTrue ( IDENT_0 ) 