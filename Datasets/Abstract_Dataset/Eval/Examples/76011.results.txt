METHOD_0 ( ) { IDENT_0 = new org . geotools . data . IDENT_1 . METHOD_1 ( org . geotools . data . IDENT_1 . IDENT_2 . IDENT_3 ) ; IDENT_4 = new java . util . ArrayList < org . geotools . data . IDENT_1 . IDENT_5 > ( ) ; METHOD_2 ( org . geotools . data . IDENT_1 . IDENT_2 . IDENT_3 , STRING_0 ) ; METHOD_2 ( org . geotools . data . IDENT_1 . IDENT_2 . IDENT_3 , STRING_1 ) ; METHOD_2 ( STRING_0 , STRING_2 ) ; METHOD_2 ( STRING_0 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; try { METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IllegalStateException e ) { } } METHOD_3 ( ) { final int size = IDENT_4 . size ( ) ; java . util . Iterator < org . geotools . data . IDENT_1 . IDENT_5 > it = IDENT_0 . iterator ( ) ; java . util . Set < java . lang . String > IDENT_6 = new java . util . HashSet < java . lang . String > ( ) ; IDENT_6 . add ( org . geotools . data . IDENT_1 . IDENT_2 . IDENT_3 ) ; int count = 0 ; while ( it . hasNext ( ) ) { count ++ ; org . geotools . data . IDENT_1 . IDENT_5 IDENT_7 = it . next ( ) ; IDENT_6 . add ( IDENT_7 . METHOD_4 ( ) ) ; if ( ! ( IDENT_7 . METHOD_4 ( ) . equals ( org . geotools . data . IDENT_1 . IDENT_2 . IDENT_3 ) ) ) { org . junit . Assert . assertTrue ( IDENT_6 . contains ( IDENT_7 . METHOD_5 ( ) ) ) ; IDENT_4 . remove ( IDENT_7 ) ; } } org . junit . Assert . assertEquals ( count , size ) ; org . junit . Assert . assertTrue ( IDENT_4 . isEmpty ( ) ) ; }
org . junit . Assert . assertTrue ( false ) 