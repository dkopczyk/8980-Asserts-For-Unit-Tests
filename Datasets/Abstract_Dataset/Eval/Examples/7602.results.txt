METHOD_0 ( ) { org . apache . beam . sdk . IDENT_0 . Schema input = org . apache . beam . sdk . IDENT_0 . Schema . of ( Schema . Field . METHOD_1 ( STRING_0 , IDENT_1 . IDENT_2 ) ) ; org . apache . beam . sdk . IDENT_0 . Schema output = org . apache . beam . sdk . IDENT_0 . Schema . of ( Schema . Field . of ( STRING_0 , IDENT_1 . IDENT_2 ) ) ; java . util . List < org . apache . beam . sdk . IDENT_0 . IDENT_3 . IDENT_4 . IDENT_5 > errors = IDENT_4 . IDENT_6 . of ( ) . apply ( input , output ) ; org . apache . beam . sdk . IDENT_0 . IDENT_3 . IDENT_4 . IDENT_5 expected = IDENT_4 . IDENT_5 . create ( java . util . Arrays . asList ( STRING_0 ) , STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Collection ) { @ org . apache . beam . sdk . testing . METHOD_3 ( { STRING_2 , STRING_3 } ) final java . util . Collection < org . hamcrest . IDENT_7 < ? super T > > matchers = ( ( java . util . Collection ) ( IDENT_8 ) ) ; return org . apache . beam . sdk . testing . IDENT_9 . METHOD_4 ( ( ) -> org . hamcrest . Matchers . METHOD_2 ( matchers ) ) ; }
org . junit . Assert . assertThat ( errors , org . hamcrest . Matchers . METHOD_2 ( expected ) ) 