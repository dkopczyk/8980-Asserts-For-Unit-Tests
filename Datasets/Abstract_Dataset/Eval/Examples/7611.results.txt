METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; org . apache . beam . sdk . IDENT_2 . IDENT_3 . IDENT_4 < java . lang . Integer , org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > , java . lang . Integer > IDENT_6 = new org . apache . beam . sdk . IDENT_2 . IDENT_3 . IDENT_4 < java . lang . Integer , org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > , java . lang . Integer > ( ) { @ org . apache . beam . sdk . testing . Override public org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > METHOD_2 ( ) { return org . apache . beam . sdk . values . IDENT_5 . of ( 0 , 0 ) ; } @ org . apache . beam . sdk . testing . Override public org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > METHOD_3 ( org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > IDENT_7 , java . lang . Integer input ) { return org . apache . beam . sdk . values . IDENT_5 . of ( ( ( IDENT_7 . getKey ( ) ) + input ) , IDENT_7 . getValue ( ) ) ; } @ org . apache . beam . sdk . testing . Override public org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > METHOD_4 ( java . lang . IDENT_8 < org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > > IDENT_9 ) { int result = 0 ; int IDENT_10 = 0 ; for ( org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > IDENT_11 : IDENT_9 ) { result += IDENT_11 . getKey ( ) ; IDENT_10 += IDENT_11 . getValue ( ) ; } return org . apache . beam . sdk . values . IDENT_5 . of ( result , ( IDENT_10 + 1 ) ) ; } @ org . apache . beam . sdk . testing . Override public org . apache . beam . sdk . testing . Integer METHOD_5 ( org . apache . beam . sdk . values . IDENT_5 < java . lang . Integer , java . lang . Integer > IDENT_7 ) { if ( ( IDENT_7 . getValue ( ) ) > 1 ) { IDENT_1 . set ( true ) ; } return IDENT_7 . getKey ( ) ; } } ; org . apache . beam . sdk . testing . IDENT_12 . METHOD_6 ( IDENT_6 , java . util . Arrays . asList ( 1 , 1 , 2 , 2 , 3 , 3 , 4 , 4 , 5 , 5 ) , INT_0 ) ; "<AssertPlaceHolder>" ; } get ( ) { org . apache . beam . runners . core . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 IDENT_17 = new org . apache . beam . runners . core . IDENT_13 . IDENT_14 . IDENT_15 . METHOD_7 ( ) ; org . apache . beam . IDENT_18 . grpc . IDENT_19 . io . grpc . IDENT_20 . IDENT_21 < org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_24 > IDENT_25 = IDENT_20 . METHOD_8 ( IDENT_17 ) ; org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_26 metadata = org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_26 . METHOD_9 ( ) . setName ( file . METHOD_10 ( ) ) . build ( ) ; org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_27 IDENT_28 = org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_27 . METHOD_9 ( ) . METHOD_11 ( metadata ) . METHOD_12 ( IDENT_29 ) . build ( ) ; IDENT_25 . METHOD_13 ( org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_24 . METHOD_9 ( ) . METHOD_11 ( IDENT_28 ) . build ( ) ) ; org . apache . beam . IDENT_18 . IDENT_30 . IDENT_31 . com . google . common . hash . IDENT_32 IDENT_33 = org . apache . beam . IDENT_18 . IDENT_30 . IDENT_31 . com . google . common . hash . IDENT_34 . METHOD_14 ( ) . METHOD_15 ( ) ; java . nio . IDENT_35 . IDENT_36 channel = new java . io . METHOD_16 ( file . METHOD_17 ( ) ) . METHOD_18 ( ) ; java . nio . ByteBuffer IDENT_37 = java . nio . ByteBuffer . METHOD_19 ( IDENT_38 ) ; while ( ( ! ( IDENT_17 . METHOD_20 ( ) ) ) && ( ( channel . position ( ) ) < ( channel . size ( ) ) ) ) { IDENT_37 . METHOD_21 ( ) ; channel . read ( IDENT_37 ) ; IDENT_37 . METHOD_22 ( ) ; org . apache . beam . IDENT_18 . grpc . IDENT_19 . com . google . IDENT_39 . IDENT_40 IDENT_41 = org . apache . beam . IDENT_18 . grpc . IDENT_19 . com . google . IDENT_39 . IDENT_40 . METHOD_23 ( IDENT_37 ) ; IDENT_33 . METHOD_24 ( IDENT_41 . toByteArray ( ) ) ; IDENT_37 . METHOD_25 ( ) ; org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_24 request = org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_24 . METHOD_9 ( ) . METHOD_26 ( org . apache . beam . model . IDENT_22 . v1 . IDENT_23 . IDENT_42 . METHOD_9 ( ) . METHOD_26 ( IDENT_41 ) . build ( ) ) . build ( ) ; IDENT_25 . METHOD_13 ( request ) ; } IDENT_25 . METHOD_27 ( ) ; IDENT_17 . METHOD_28 ( ) ; if ( ( IDENT_17 . err . get ( ) ) != null ) { throw new java . lang . RuntimeException ( IDENT_17 . err . get ( ) ) ; } return metadata . METHOD_29 ( ) . METHOD_30 ( IDENT_33 . hash ( ) . toString ( ) ) . build ( ) ; }
org . junit . Assert . assertThat ( IDENT_1 . get ( ) , org . hamcrest . Matchers . is ( true ) ) 