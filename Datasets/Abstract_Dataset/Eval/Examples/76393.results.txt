METHOD_0 ( ) { java . io . File input = org . geotools . test . IDENT_0 . file ( org . geotools . process . IDENT_1 . IDENT_2 . class , STRING_0 ) ; org . geotools . IDENT_3 . grid . io . IDENT_4 format = org . geotools . IDENT_3 . grid . io . IDENT_5 . METHOD_1 ( input ) ; org . geotools . IDENT_3 . grid . io . IDENT_6 reader = null ; boolean IDENT_7 = true ; try { reader = format . METHOD_2 ( input ) ; org . geotools . IDENT_3 . grid . IDENT_8 IDENT_3 = ( ( org . geotools . IDENT_3 . grid . IDENT_8 ) ( reader . read ( null ) ) ) ; org . opengis . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = org . geotools . IDENT_9 . IDENT_13 . decode ( STRING_1 , true ) ; double [ ] IDENT_14 = new double [ INT_0 ] ; double start = - 2.0 ; for ( int i = 0 ; i < ( IDENT_14 . length ) ; i ++ ) { IDENT_14 [ i ] = start + ( FLOAT_0 * i ) ; } org . geotools . data . simple . IDENT_15 IDENT_16 = process . execute ( IDENT_3 , 0 , IDENT_14 , null , null , null , null , null ) ; org . geotools . data . simple . IDENT_17 IDENT_18 = IDENT_16 . METHOD_3 ( ) ; while ( METHOD_3 . hasNext ( ) ) { org . opengis . feature . simple . IDENT_19 feature = METHOD_3 . next ( ) ; org . locationtech . jts . geom . IDENT_20 geometry = ( ( org . locationtech . jts . geom . IDENT_20 ) ( feature . METHOD_4 ( ) ) ) ; org . geotools . geometry . jts . IDENT_21 IDENT_22 = new org . geotools . geometry . jts . METHOD_5 ( geometry . METHOD_6 ( ) , IDENT_12 ) ; org . geotools . geometry . jts . IDENT_23 . METHOD_7 ( ( ( org . locationtech . jts . geom . IDENT_24 ) ( IDENT_22 ) ) ) ; } } catch ( java . lang . IllegalArgumentException IDENT_25 ) { IDENT_7 = false ; } finally { if ( reader != null ) { try { reader . METHOD_8 ( ) ; } catch ( java . lang . Throwable t ) { } } } "<AssertPlaceHolder>" ; } METHOD_8 ( ) { }
org . junit . Assert . assertTrue ( IDENT_7 ) 