METHOD_0 ( ) { System . out . println ( STRING_0 ) ; final com . IDENT_0 . interfaces . IDENT_1 . IDENT_2 report = new com . IDENT_0 . examples . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; java . util . List < java . lang . String > IDENT_5 = java . util . Arrays . asList ( STRING_1 , STRING_2 , STRING_3 8 ) ; for ( java . lang . String IDENT_6 : IDENT_5 ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_7 = new java . util . HashMap ( ) ; final java . lang . String IDENT_8 = STRING_4 ; final java . lang . String IDENT_9 = STRING_3 3 ; IDENT_7 . put ( STRING_5 , java . util . Arrays . asList ( IDENT_8 ) ) ; IDENT_7 . put ( STRING_6 , java . util . Arrays . asList ( IDENT_9 ) ) ; IDENT_7 . put ( STRING_3 , java . util . Arrays . asList ( com . IDENT_0 . utils . StringUtils . METHOD_2 ( IDENT_10 ) ) ) ; IDENT_7 . put ( STRING_3 0 , java . util . Arrays . asList ( STRING_7 ) ) ; IDENT_7 . put ( STRING_3 1 , java . util . Arrays . asList ( STRING_8 , STRING_3 7 ) ) ; IDENT_7 . put ( STRING_3 6 , java . util . Arrays . asList ( STRING_3 4 ) ) ; java . util . List < java . util . Map < java . lang . String , java . lang . String > > IDENT_11 = com . IDENT_0 . utils . IDENT_12 . METHOD_3 ( IDENT_7 ) ; if ( IDENT_11 . isEmpty ( ) ) IDENT_11 = java . util . Arrays . asList ( com . IDENT_0 . utils . IDENT_12 . METHOD_4 ( report . METHOD_5 ( ) ) ) ; for ( java . util . Map < java . lang . String , java . lang . String > params : IDENT_11 ) { java . util . Map < java . lang . String , java . lang . String > IDENT_13 = com . IDENT_0 . utils . IDENT_12 . METHOD_4 ( report . METHOD_5 ( ) ) ; IDENT_13 . METHOD_6 ( params ) ; System . out . println ( params ) ; java . lang . String result = report . METHOD_7 ( IDENT_14 , IDENT_13 , com . google . common . collect . ImmutableMap . of ( STRING_3 5 , STRING_9 ) ) ; System . out . println ( STRING_3 2 ) ; "<AssertPlaceHolder>" ; } } } of ( T , java . lang . String ) { return new com . IDENT_0 . IDENT_15 . utils . IDENT_16 < T > ( object , IDENT_17 , true ) ; }
org . junit . Assert . assertTrue ( ( ( result . length ( ) ) > 100 ) ) 