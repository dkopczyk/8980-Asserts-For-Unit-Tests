METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_1 = new com . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; java . lang . String text = STRING_0 ; java . util . List < com . IDENT_0 . IDENT_3 . IDENT_4 > results = new java . util . ArrayList < com . IDENT_0 . IDENT_3 . IDENT_4 > ( ) ; com . IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = org . easymock . EasyMock . METHOD_2 ( com . IDENT_0 . IDENT_3 . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_3 ( ) ) . andReturn ( ( ( METHOD_1 . IDENT_6 ) + FLOAT_0 ) ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_4 ( ) ) . andReturn ( null ) ; org . easymock . EasyMock . expect ( IDENT_5 . getName ( ) ) . andReturn ( text ) . times ( 2 ) ; org . easymock . EasyMock . replay ( IDENT_5 ) ; results . add ( IDENT_5 ) ; com . IDENT_0 . IDENT_3 . IDENT_7 IDENT_8 = org . easymock . EasyMock . METHOD_2 ( com . IDENT_0 . IDENT_3 . IDENT_7 . class ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_5 ( ) ) . andReturn ( 1 ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_6 ( ) ) . andReturn ( results ) ; org . easymock . EasyMock . replay ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( com . IDENT_0 . IDENT_3 . IDENT_4 , java . lang . String , com . IDENT_9 . jts . geom . IDENT_10 ) { if ( IDENT_5 != null ) { java . lang . String IDENT_11 = IDENT_5 . getName ( ) ; if ( ( ( ( ( name != null ) && ( IDENT_11 != null ) ) && ( com . IDENT_0 . helper . IDENT_12 . METHOD_7 ( name , IDENT_11 ) ) ) || ( ( IDENT_5 . METHOD_3 ( ) ) > ( IDENT_13 ) ) ) || ( com . IDENT_0 . helper . IDENT_12 . METHOD_8 ( name , IDENT_5 . METHOD_9 ( ) ) ) ) { if ( ( IDENT_14 != null ) && ( IDENT_14 . isValid ( ) ) ) { if ( ( ( IDENT_5 . METHOD_10 ( ) ) != null ) && ( ( IDENT_5 . METHOD_11 ( ) ) != null ) ) { boolean IDENT_15 = false ; try { com . IDENT_9 . jts . geom . IDENT_16 IDENT_17 = com . IDENT_0 . helper . IDENT_18 . METHOD_12 ( IDENT_5 . METHOD_10 ( ) , IDENT_5 . METHOD_11 ( ) ) ; IDENT_15 = IDENT_14 . contains ( IDENT_17 ) ; } catch ( java . lang . Exception e ) { com . IDENT_0 . IDENT_1 . METHOD_1 . logger . error ( ( ( ( ( ( STRING_1 + name ) + STRING_2 ) + ( IDENT_5 . METHOD_13 ( ) ) ) + STRING_3 ) + ( e . getMessage ( ) ) ) ) ; } if ( IDENT_15 ) { return true ; } } else { com . IDENT_0 . IDENT_1 . METHOD_1 . logger . error ( ( STRING_4 + IDENT_5 ) ) ; } } else { return true ; } } } return false ; }
org . junit . Assert . assertTrue ( IDENT_1 . METHOD_0 ( IDENT_5 , text , null ) ) 