METHOD_0 ( ) { for ( int i = 10 ; i <= INT_0 ; i OP_0 10 ) { byte [ ] input = METHOD_1 ( i ) ; byte [ ] output = edu . IDENT_0 . cs . IDENT_1 . io . IDENT_2 . METHOD_2 ( new java . io . ByteArrayInputStream ( input ) , i ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( java . io . InputStream , int ) { try { if ( size == 0 ) throw new java . lang . IllegalArgumentException ( ) ; byte [ ] result = new byte [ size ] ; int pos = 0 ; while ( true ) { int IDENT_3 ; while ( ( IDENT_3 = in . read ( result , pos , ( size - pos ) ) ) > 0 ) { pos += IDENT_3 ; } if ( pos < size ) return java . util . Arrays . METHOD_3 ( result , pos ) ; int IDENT_4 = in . read ( ) ; if ( IDENT_4 == ( - 1 ) ) return result ; size = ( size * 2 ) + INT_1 ; result = java . util . Arrays . METHOD_3 ( result , size ) ; result [ ( pos ++ ) ] = ( ( byte ) ( IDENT_4 ) ) ; } } finally { edu . IDENT_0 . cs . IDENT_1 . io . IDENT_2 . close ( in ) ; } }
org . junit . Assert . assertArrayEquals ( input , output ) 