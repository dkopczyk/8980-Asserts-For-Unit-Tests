METHOD_0 ( ) { org . apache . hadoop . fs . IDENT_0 IDENT_1 = org . apache . hadoop . fs . test . unit . IDENT_2 . fs ; org . apache . hadoop . fs . Path IDENT_3 = new org . apache . hadoop . fs . Path ( ( STRING_0 + ( java . lang . System . currentTimeMillis ( ) ) ) ) ; IDENT_1 . METHOD_1 ( IDENT_3 ) ; IDENT_1 . create ( new org . apache . hadoop . fs . Path ( IDENT_3 , "a" ) ) ; IDENT_1 . create ( new org . apache . hadoop . fs . Path ( IDENT_3 , STRING_1 ) ) ; IDENT_1 . create ( new org . apache . hadoop . fs . Path ( IDENT_3 , STRING_2 ) ) ; IDENT_1 . create ( new org . apache . hadoop . fs . Path ( IDENT_3 , STRING_3 ) ) ; IDENT_1 . create ( new org . apache . hadoop . fs . Path ( IDENT_3 , STRING_4 ) ) ; "<AssertPlaceHolder>" ; IDENT_1 . delete ( IDENT_3 ) ; } METHOD_2 ( org . apache . hadoop . fs . Path ) { java . io . File IDENT_4 = METHOD_3 ( f ) ; java . util . IDENT_5 < org . apache . hadoop . fs . IDENT_6 > results = new java . util . IDENT_5 < org . apache . hadoop . fs . IDENT_6 > ( ) ; if ( ! ( IDENT_4 . exists ( ) ) ) { throw new java . io . METHOD_4 ( ( ( STRING_5 + f ) + STRING_6 ) ) ; } if ( IDENT_4 . METHOD_5 ( ) ) { return new org . apache . hadoop . fs . IDENT_6 [ ] { new org . apache . hadoop . fs . IDENT_7 . METHOD_6 ( IDENT_4 , METHOD_7 ( ) , this ) } ; } if ( ( IDENT_4 . METHOD_8 ( ) ) && ( ! ( IDENT_4 . METHOD_9 ( ) ) ) ) { throw new java . io . IOException ( ( STRING_7 + ( f . toString ( ) ) ) ) ; } java . io . File [ ] IDENT_8 = IDENT_4 . METHOD_10 ( ) ; if ( IDENT_8 == null ) { return null ; } for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) { try { org . apache . hadoop . fs . IDENT_6 IDENT_9 = METHOD_11 ( METHOD_12 ( IDENT_8 [ i ] ) ) ; if ( IDENT_10 ) { int j ; for ( j = 0 ; j < ( results . size ( ) ) ; j ++ ) { if ( ( results . get ( j ) . compareTo ( IDENT_9 ) ) > 0 ) { results . METHOD_13 ( IDENT_9 , j ) ; break ; } } if ( ( results . size ( ) ) == j ) results . add ( IDENT_9 ) ; } else { results . add ( IDENT_9 ) ; } } catch ( java . io . METHOD_4 e ) { org . apache . hadoop . fs . IDENT_7 . IDENT_11 . log . info ( ( STRING_8 + ( IDENT_8 [ i ] ) ) ) ; } } return results . toArray ( new org . apache . hadoop . fs . IDENT_6 [ results . size ( ) ] ) ; }
org . junit . Assert . assertEquals ( 5 , IDENT_1 . METHOD_2 ( IDENT_3 ) . length ) 