METHOD_0 ( ) { org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = mock ( org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 = mock ( org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_4 . class ) ; org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_6 IDENT_7 = new org . apache . beam . sdk . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_3 , IDENT_5 ) ; org . apache . beam . sdk . values . IDENT_8 < byte [ ] , byte [ ] > [ ] IDENT_9 = new org . apache . beam . sdk . values . IDENT_8 [ ] { org . apache . beam . sdk . values . IDENT_8 . of ( new byte [ ] { 0 } , new byte [ ] { } ) , org . apache . beam . sdk . values . IDENT_8 . of ( new byte [ ] { 0 , 1 } , new byte [ ] { } ) , org . apache . beam . sdk . values . IDENT_8 . of ( new byte [ ] { 1 } , new byte [ ] { } ) } ; when ( IDENT_5 . METHOD_2 ( IDENT_9 [ 0 ] ) ) . thenReturn ( true ) ; when ( IDENT_5 . METHOD_2 ( IDENT_9 [ 1 ] ) ) . thenReturn ( true ) ; when ( IDENT_5 . METHOD_2 ( IDENT_9 [ 2 ] ) ) . thenReturn ( true ) ; when ( IDENT_5 . METHOD_3 ( ) ) . thenReturn ( java . util . Arrays . asList ( IDENT_9 [ 0 ] , IDENT_9 [ 1 ] , IDENT_9 [ 2 ] ) ) ; IDENT_7 . add ( IDENT_9 [ 0 ] ) ; IDENT_7 . add ( IDENT_9 [ 1 ] ) ; IDENT_7 . add ( IDENT_9 [ 2 ] ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 , METHOD_4 ( ) ) . add ( any ( org . apache . beam . sdk . values . IDENT_8 . class ) ) ; verify ( IDENT_3 , METHOD_4 ( ) ) . METHOD_3 ( ) ; } METHOD_3 ( ) { METHOD_5 ( ( ! ( IDENT_10 ) ) , STRING_0 ) ; IDENT_10 = true ; METHOD_6 ( ) ; writer . close ( ) ; return new org . apache . beam . sdk . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_7 ( ) ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( IDENT_9 [ 0 ] , IDENT_9 [ 1 ] , IDENT_9 [ 2 ] ) , IDENT_7 . METHOD_3 ( ) ) 