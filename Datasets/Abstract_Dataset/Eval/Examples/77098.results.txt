METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . config . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . config . METHOD_1 ( ) ; java . io . ByteArrayOutputStream IDENT_4 = new java . io . ByteArrayOutputStream ( ) ; org . IDENT_0 . util . IDENT_5 . METHOD_2 ( IDENT_4 , IDENT_3 , org . IDENT_0 . IDENT_1 . config . METHOD_1 . class ) ; byte [ ] arr = IDENT_4 . toByteArray ( ) ; System . out . println ( ( STRING_0 + ( arr . length ) ) ) ; java . io . ByteArrayInputStream IDENT_6 = new java . io . ByteArrayInputStream ( arr ) ; org . IDENT_0 . IDENT_1 . config . METHOD_1 IDENT_7 = org . IDENT_0 . util . IDENT_5 . METHOD_3 ( IDENT_6 , org . IDENT_0 . IDENT_1 . config . METHOD_1 . class ) ; org . IDENT_0 . IDENT_1 . io . IDENT_8 output = new org . IDENT_0 . IDENT_1 . io . METHOD_4 ( ) ; org . IDENT_0 . util . IDENT_5 . METHOD_2 ( output , IDENT_3 , org . IDENT_0 . IDENT_1 . config . METHOD_1 . class ) ; byte [ ] IDENT_9 = output . array ( ) ; for ( int i = 0 ; i < ( arr . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } System . out . println ( ( STRING_1 + ( output . position ( ) ) ) ) ; org . IDENT_0 . common . io . IDENT_10 input = new org . IDENT_0 . common . io . METHOD_5 ( IDENT_9 , 0 , ( ( int ) ( output . position ( ) ) ) , true ) ; org . IDENT_0 . IDENT_1 . config . METHOD_1 IDENT_11 = org . IDENT_0 . util . IDENT_5 . METHOD_3 ( input , org . IDENT_0 . IDENT_1 . config . METHOD_1 . class ) ; } array ( ) { return bytes ; }
org . junit . Assert . assertTrue ( ( ( arr [ i ] ) == ( IDENT_9 [ i ] ) ) ) 