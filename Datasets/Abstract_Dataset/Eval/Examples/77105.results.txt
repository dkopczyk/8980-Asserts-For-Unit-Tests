METHOD_0 ( ) { int IDENT_0 = 100 * 1000 ; byte [ ] data = new byte [ IDENT_0 ] ; java . util . IDENT_1 r = new java . util . METHOD_1 ( java . lang . System . currentTimeMillis ( ) ) ; r . METHOD_2 ( data ) ; java . io . File f = new java . io . File ( ( STRING_0 + ( java . lang . System . currentTimeMillis ( ) ) ) ) ; java . io . IDENT_2 IDENT_3 = new java . io . METHOD_3 ( f ) ; IDENT_3 . write ( data ) ; IDENT_3 . close ( ) ; byte [ ] buf = new byte [ INT_0 ] ; java . io . InputStream in = new org . IDENT_4 . IDENT_5 . io . METHOD_4 ( f ) ; int c = 0 ; int offset = 0 ; int k = 0 ; while ( ( c = in . read ( buf ) ) != ( - 1 ) ) { for ( int i = 0 ; i < c ; i ++ ) { if ( ( data [ ( offset + i ) ] ) != ( buf [ i ] ) ) { System . out . METHOD_5 ( STRING_1 , ( offset + i ) ) ; } "<AssertPlaceHolder>" ; k ++ ; } offset += c ; } in . close ( ) ; f . delete ( ) ; } METHOD_5 ( java . lang . String , java . lang . Object [ ] ) { System . out . METHOD_6 ( java . lang . String . format ( format , args ) ) ; }
org . junit . Assert . assertEquals ( data [ ( offset + i ) ] , buf [ i ] ) 