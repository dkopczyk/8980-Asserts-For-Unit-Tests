METHOD_0 ( ) { com . google . api . services . IDENT_0 . model . IDENT_1 ref = new com . google . api . services . IDENT_0 . model . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) ; com . google . api . services . IDENT_0 . model . IDENT_2 schema = new com . google . api . services . IDENT_0 . model . METHOD_5 ( ) . METHOD_6 ( org . apache . beam . IDENT_3 . IDENT_4 . IDENT_5 . com . google . common . collect . ImmutableList . of ( new com . google . api . services . IDENT_0 . model . METHOD_7 ( ) . setName ( STRING_3 ) . METHOD_8 ( STRING_4 ) , new com . google . api . services . IDENT_0 . model . METHOD_7 ( ) . setName ( STRING_5 ) . METHOD_8 ( STRING_6 ) ) ) ; com . google . api . services . IDENT_0 . model . IDENT_6 IDENT_7 = new com . google . api . services . IDENT_0 . model . METHOD_9 ( ) . METHOD_10 ( ref ) . METHOD_11 ( schema ) ; when ( response . getStatusCode ( ) ) . thenReturn ( INT_0 ) ; org . apache . beam . sdk . io . IDENT_8 . IDENT_0 . IDENT_9 . IDENT_10 services = new org . apache . beam . sdk . io . IDENT_8 . IDENT_0 . IDENT_9 . METHOD_12 ( IDENT_0 , org . apache . beam . sdk . options . IDENT_11 . create ( ) ) ; com . google . api . services . IDENT_0 . model . METHOD_9 ret = services . METHOD_13 ( IDENT_7 , new com . google . cloud . hadoop . util . METHOD_14 ( 0 , com . google . api . client . util . IDENT_12 . IDENT_13 ) , IDENT_14 . IDENT_15 ) ; "<AssertPlaceHolder>" ; verify ( response , times ( 1 ) ) . getStatusCode ( ) ; verify ( response , times ( 1 ) ) . METHOD_15 ( ) ; verify ( response , times ( 1 ) ) . METHOD_16 ( ) ; } create ( ) { if ( org . apache . beam . sdk . IDENT_16 . IDENT_17 . core . client . IDENT_18 . IDENT_19 . IDENT_20 . IDENT_21 . METHOD_17 ( false , true ) ) { org . apache . beam . sdk . IDENT_16 . IDENT_17 . core . client . IDENT_18 . IDENT_19 . LOG . warn ( STRING_7 ) ; } return org . apache . beam . sdk . IDENT_16 . IDENT_17 . core . client . IDENT_18 . IDENT_19 . IDENT_20 . IDENT_22 ; }
org . junit . Assert . assertNull ( ret ) 