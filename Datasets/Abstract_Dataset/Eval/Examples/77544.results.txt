METHOD_0 ( ) { com . gs . collections . impl . set . mutable . IDENT_0 . IDENT_1 IDENT_2 = com . gs . collections . impl . set . mutable . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; IDENT_2 . add ( ( ( byte ) ( 0 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( 1 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( 2 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( 20 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_0 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_1 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_2 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_3 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_4 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_5 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_6 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_7 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_8 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_9 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( INT_10 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - 1 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - 5 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_11 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_12 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_1 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_2 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_3 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_4 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - 100 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_9 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_8 ) ) ) ; IDENT_2 . add ( ( ( byte ) ( - INT_13 ) ) ) ; byte [ ] expected = new byte [ ] { - INT_13 , - 100 , - INT_9 , - INT_8 , - INT_4 , - INT_3 , - INT_2 , - INT_1 , - INT_12 , - INT_11 , - 5 , - 1 , 0 , 1 , 2 , 20 , INT_0 , INT_1 , INT_2 , INT_3 , INT_4 , INT_5 , INT_6 , INT_7 , INT_8 , INT_9 , INT_10 } ; "<AssertPlaceHolder>" ; } toArray ( ) { return new java . lang . Object [ 0 ] ; }
org . junit . Assert . assertArrayEquals ( expected , IDENT_2 . toArray ( ) ) 