METHOD_0 ( ) { org . apache . beam . sdk . io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . beam . sdk . io . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; try { IDENT_3 . METHOD_2 ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . IllegalArgumentException e ) { } IDENT_3 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; try { IDENT_3 . METHOD_2 ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . IllegalArgumentException e ) { } } METHOD_2 ( ) { if ( ( ( ( IDENT_4 ) == null ) || ( IDENT_4 . isEmpty ( ) ) ) || ( ( ( IDENT_4 . get ( 0 ) . length ) - ( IDENT_5 ) ) < 1 ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } byte [ ] store = IDENT_4 . get ( 0 ) ; if ( ( ( store . length ) - ( IDENT_5 ) ) < 2 ) { return false ; } if ( ( ( store [ IDENT_5 ] ) == ( org . apache . beam . runners . IDENT_6 . IDENT_7 . METHOD_1 . IDENT_8 ) ) && ( ( store [ ( ( IDENT_5 ) + 1 ) ] ) == ( org . apache . beam . runners . IDENT_6 . IDENT_7 . METHOD_1 . IDENT_9 ) ) ) { if ( ( ( ( store . length ) - ( IDENT_5 ) ) - 2 ) == 0 ) { IDENT_4 . remove ( 0 ) ; IDENT_5 = 0 ; } else { IDENT_5 = ( IDENT_5 ) + 2 ; } return true ; } else { return false ; } }
org . junit . Assert . assertTrue ( IDENT_3 . METHOD_2 ( ) ) 