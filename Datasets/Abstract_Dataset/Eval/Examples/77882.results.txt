METHOD_0 ( ) { final int IDENT_0 = 10 ; com . google . IDENT_1 . tools . IDENT_2 . IDENT_3 params = new com . google . IDENT_1 . tools . IDENT_2 . IDENT_3 . Builder ( ) . METHOD_1 ( 0 ) . METHOD_2 ( INT_0 ) . METHOD_3 ( 0 ) . METHOD_4 ( IDENT_0 ) . build ( ) ; final java . util . concurrent . atomic . IDENT_4 IDENT_5 = new java . util . concurrent . atomic . METHOD_5 ( 0 ) ; try { com . google . IDENT_1 . tools . IDENT_2 . IDENT_6 . METHOD_6 ( METHOD_7 ( new java . lang . METHOD_8 ( ) { @ com . google . IDENT_1 . tools . IDENT_2 . Override public void run ( ) { if ( ( IDENT_5 . METHOD_9 ( ) ) <= IDENT_0 ) { throw new java . lang . RuntimeException ( ) ; } org . junit . Assert . fail ( ( STRING_0 + ( IDENT_5 . get ( ) ) ) ) ; } } ) , params , new com . google . IDENT_1 . tools . IDENT_2 . IDENT_7 . Builder ( ) . METHOD_10 ( com . google . IDENT_1 . tools . IDENT_2 . RuntimeException . class ) . build ( ) ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( com . google . IDENT_1 . tools . IDENT_2 . IDENT_8 expected ) { "<AssertPlaceHolder>" ; } } build ( ) { return new com . google . IDENT_1 . tools . IDENT_2 . METHOD_11 ( this ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_5 . get ( ) ) 