METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( ) ) ) . andReturn ( true ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; compute = options . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( com . google . cloud . compute . IDENT_1 . IDENT_4 ) { try { return com . google . cloud . IDENT_5 . METHOD_6 ( new java . util . concurrent . IDENT_6 < java . lang . Boolean > ( ) { @ com . google . cloud . compute . IDENT_1 . Override public com . google . cloud . compute . IDENT_1 . Boolean call ( ) { switch ( operation . getType ( ) ) { case IDENT_7 : com . google . cloud . compute . IDENT_1 . IDENT_8 IDENT_9 = ( ( com . google . cloud . compute . IDENT_1 . IDENT_8 ) ( operation ) ) ; return IDENT_10 . METHOD_7 ( IDENT_9 . METHOD_8 ( ) , IDENT_9 . METHOD_3 ( ) ) ; case IDENT_11 : com . google . cloud . compute . IDENT_1 . IDENT_12 IDENT_13 = ( ( com . google . cloud . compute . IDENT_1 . IDENT_12 ) ( operation ) ) ; return IDENT_10 . METHOD_1 ( IDENT_13 . METHOD_2 ( ) , IDENT_13 . METHOD_3 ( ) ) ; case IDENT_14 : return IDENT_10 . METHOD_9 ( operation . METHOD_3 ( ) ) ; default : throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } } } , METHOD_10 ( ) . METHOD_11 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_15 , METHOD_10 ( ) . METHOD_12 ( ) ) ; } catch ( com . google . cloud . IDENT_5 e ) { throw com . google . cloud . compute . IDENT_1 . IDENT_16 . METHOD_13 ( e ) ; } }
org . junit . Assert . assertTrue ( compute . METHOD_5 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 ) ) 