METHOD_0 ( ) { java . lang . String output = STRING_0 ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . getInstance ( ) , 2 , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_4 ) ) . andReturn ( output ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; compute = options . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_5 , int ) { try { return com . google . cloud . IDENT_6 . METHOD_4 ( new java . util . concurrent . IDENT_7 < java . lang . String > ( ) { @ com . google . cloud . compute . IDENT_1 . Override public java . lang . String call ( ) { return IDENT_8 . METHOD_1 ( instance . METHOD_2 ( ) , instance . getInstance ( ) , port , METHOD_5 ( ) ) ; } } , METHOD_6 ( ) . METHOD_7 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_9 , METHOD_6 ( ) . METHOD_8 ( ) ) ; } catch ( com . google . cloud . IDENT_6 e ) { throw com . google . cloud . compute . IDENT_1 . IDENT_10 . METHOD_9 ( e ) ; } }
org . junit . Assert . assertEquals ( output , compute . METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 , 2 ) ) 