METHOD_0 ( ) { final org . apache . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_4 ) ; final java . util . concurrent . IDENT_5 IDENT_6 = new java . util . concurrent . METHOD_2 ( 10 ) ; final java . util . concurrent . IDENT_7 < org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > queue = new java . util . concurrent . IDENT_7 < org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > ( ) ; java . util . Set < java . lang . Thread > IDENT_10 = new java . util . HashSet < java . lang . Thread > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_10 . add ( METHOD_3 ( queue , IDENT_6 , IDENT_3 ) ) ; } for ( java . lang . Thread IDENT_11 : IDENT_10 ) { IDENT_11 . start ( ) ; } IDENT_6 . METHOD_4 ( ) ; java . util . Map < org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_12 , java . util . Map < java . lang . Integer , org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > > IDENT_13 = new java . util . HashMap < org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_12 , java . util . Map < java . lang . Integer , org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > > ( ) ; boolean IDENT_14 = false ; final org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 [ ] IDENT_15 = queue . toArray ( new org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 [ 0 ] ) ; for ( org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 buf : IDENT_15 ) { if ( ( buf . size ) != 0 ) { org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_12 IDENT_16 = new org . apache . IDENT_0 . IDENT_1 . IDENT_8 . METHOD_5 ( buf . IDENT_17 . METHOD_6 ( ) ) ; java . util . Map < java . lang . Integer , org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > IDENT_18 = IDENT_13 . get ( IDENT_16 ) ; if ( IDENT_18 == null ) { IDENT_18 = new java . util . IDENT_19 < java . lang . Integer , org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > ( ) ; IDENT_13 . put ( IDENT_16 , IDENT_18 ) ; } org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 other = IDENT_18 . put ( buf . IDENT_17 . METHOD_7 ( ) , buf ) ; if ( other != null ) { org . junit . Assert . fail ( ( ( ( STRING_0 + ( other . toString ( ) ) ) + STRING_1 ) + ( buf . toString ( ) ) ) ) ; } } } for ( java . util . Map < java . lang . Integer , org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 > IDENT_18 : IDENT_13 . values ( ) ) { int IDENT_20 = 0 ; for ( org . apache . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 buf : IDENT_18 . values ( ) ) { "<AssertPlaceHolder>" ; IDENT_20 += buf . size ; } } } METHOD_7 ( ) { return this . offset ; }
org . junit . Assert . assertEquals ( IDENT_20 , buf . IDENT_17 . METHOD_7 ( ) ) 