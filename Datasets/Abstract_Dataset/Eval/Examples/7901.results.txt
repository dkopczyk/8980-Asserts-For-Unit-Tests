METHOD_0 ( ) { org . apache . IDENT_0 . util . collections . IDENT_1 < java . lang . Long > set = new org . apache . IDENT_0 . util . collections . METHOD_1 ( ) ; java . util . concurrent . IDENT_2 executor = java . util . concurrent . IDENT_3 . METHOD_2 ( ) ; final int IDENT_4 = 16 ; final int n = INT_0 ; java . util . List < java . util . concurrent . IDENT_5 < ? > > IDENT_6 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < IDENT_4 ; i ++ ) { final int IDENT_7 = i ; IDENT_6 . add ( executor . METHOD_3 ( ( ) -> { java . util . IDENT_8 random = new java . util . METHOD_4 ( ) ; for ( int j = 0 ; j < n ; j ++ ) { long key = random . METHOD_5 ( ) ; key OP_0 key OP_1 ( IDENT_7 + 1 ) ; set . add ( key ) ; } } ) ) ; } for ( java . util . concurrent . IDENT_5 < ? > future : IDENT_6 ) { future . get ( ) ; } "<AssertPlaceHolder>" ; executor . METHOD_6 ( ) ; } size ( ) { IDENT_9 . METHOD_7 ( ) . METHOD_8 ( ) ; try { long size = 0 ; for ( int i = 0 ; i < ( IDENT_10 . size ( ) ) ; i ++ ) { if ( i == ( IDENT_11 ) ) { size += IDENT_12 . get ( ) ; } else if ( ! ( IDENT_10 . get ( i ) . isEmpty ( ) ) ) { size += IDENT_13 ; } else { } } return size ; } finally { METHOD_8 . METHOD_7 ( ) . METHOD_9 ( ) ; } }
org . junit . Assert . assertEquals ( set . size ( ) , ( n * IDENT_4 ) ) 