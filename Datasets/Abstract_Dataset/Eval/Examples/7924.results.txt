METHOD_0 ( ) { java . util . concurrent . IDENT_0 < org . apache . IDENT_1 . IDENT_2 . impl . channel . IDENT_3 > IDENT_4 = org . apache . IDENT_1 . common . concurrent . IDENT_5 . METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( ) . METHOD_3 ( IDENT_4 ) ; org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_8 IDENT_9 = org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_8 . METHOD_4 ( ) . METHOD_5 ( IDENT_10 . IDENT_11 ) . METHOD_6 ( METHOD_7 ( Long . IDENT_12 , 0L , INT_0 , 1L , com . google . common . collect . Lists . newArrayList ( INT_1 ) ) ) . METHOD_6 ( METHOD_7 ( 0L , Long . MAX_VALUE , INT_2 , INT_3 , com . google . common . collect . Lists . newArrayList ( INT_4 ) ) ) . build ( ) ; org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_13 . IDENT_14 IDENT_15 = new org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_13 . METHOD_8 ( ) { @ org . apache . IDENT_1 . IDENT_2 . impl . internal . Override public void METHOD_9 ( org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_16 request , io . grpc . IDENT_17 . IDENT_18 < org . apache . IDENT_1 . stream . IDENT_7 . storage . IDENT_8 > IDENT_19 ) { IDENT_19 . METHOD_10 ( IDENT_9 ) ; IDENT_19 . METHOD_11 ( ) ; } } ; IDENT_20 . METHOD_12 ( IDENT_15 . METHOD_13 ( ) ) ; @ IDENT_21 . IDENT_22 org . apache . IDENT_1 . IDENT_2 . impl . channel . IDENT_3 IDENT_23 = new org . apache . IDENT_1 . IDENT_2 . impl . channel . METHOD_14 ( io . grpc . IDENT_24 . IDENT_25 . METHOD_15 ( IDENT_26 ) . METHOD_16 ( ) . build ( ) , java . util . Optional . empty ( ) ) ; IDENT_4 . METHOD_17 ( IDENT_23 ) ; org . apache . IDENT_1 . IDENT_2 . impl . internal . api . IDENT_27 IDENT_28 = org . apache . IDENT_1 . IDENT_2 . impl . internal . IDENT_29 . METHOD_18 ( IDENT_9 ) ; java . util . concurrent . IDENT_0 < org . apache . IDENT_1 . IDENT_2 . impl . internal . api . IDENT_27 > IDENT_30 = IDENT_6 . METHOD_19 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { while ( true ) { try { return IDENT_31 . get ( 100 , TimeUnit . IDENT_32 ) ; } catch ( java . lang . IDENT_33 e ) { log . warn ( STRING_0 , e ) ; return - 1L ; } catch ( java . util . concurrent . IDENT_34 e ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } catch ( java . util . concurrent . IDENT_35 e ) { continue ; } } }
org . junit . Assert . assertEquals ( IDENT_28 , IDENT_30 . get ( ) ) 