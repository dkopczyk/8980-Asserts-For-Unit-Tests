METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ ] { 1 , 2 , 3 } ; byte [ ] key = com . google . crypto . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( com . google . crypto . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 ) ; com . google . crypto . IDENT_1 . IDENT_2 . IDENT_6 IDENT_7 = new com . google . crypto . IDENT_1 . IDENT_2 . METHOD_2 ( key , com . google . crypto . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_8 ) ; for ( int IDENT_9 = 0 ; IDENT_9 < INT_0 ; IDENT_9 ++ ) { byte [ ] message = com . google . crypto . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_9 ) ; byte [ ] IDENT_10 = IDENT_7 . METHOD_3 ( message , IDENT_0 ) ; byte [ ] IDENT_11 = IDENT_7 . METHOD_4 ( IDENT_10 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( byte [ ] , byte [ ] ) { try { org . json . JSONObject json = new org . json . JSONObject ( new java . lang . String ( IDENT_10 , java . nio . IDENT_12 . IDENT_13 . UTF_8 ) ) ; validate ( json ) ; byte [ ] IDENT_14 = METHOD_5 ( json , IDENT_15 ) ; return METHOD_6 ( json , IDENT_14 ) ; } catch ( org . json . IDENT_16 e ) { throw new java . security . METHOD_7 ( STRING_0 ) ; } }
org . junit . Assert . assertArrayEquals ( message , IDENT_11 ) 