METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 test = new com . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; int [ ] input = new int [ ] { 2 , 2 } ; int [ ] expected = new int [ ] { 1 , 2 } ; "<AssertPlaceHolder>" ; } METHOD_2 ( int [ ] , int ) { int len = IDENT_3 . length ; java . util . HashMap < java . lang . Integer , java . lang . Integer > map = new java . util . HashMap ( ) ; for ( int i = 0 ; i < len ; i ++ ) { map . put ( IDENT_3 [ i ] , ( i + 1 ) ) ; } java . util . Arrays . METHOD_3 ( IDENT_3 ) ; int [ ] res = new int [ 2 ] ; int i = 1 ; int j = len ; while ( i < j ) { int IDENT_4 = ( IDENT_3 [ ( i - 1 ) ] ) + ( IDENT_3 [ ( j - 1 ) ] ) ; if ( IDENT_4 > target ) { j OP_0 ; } else if ( IDENT_4 == target ) { int IDENT_5 = map . get ( IDENT_3 [ ( i - 1 ) ] ) ; int IDENT_6 = map . get ( IDENT_3 [ ( j - 1 ) ] ) ; res [ 0 ] = ( IDENT_5 > IDENT_6 ) ? IDENT_6 : IDENT_5 ; res [ 1 ] = ( IDENT_5 > IDENT_6 ) ? IDENT_5 : IDENT_6 ; return res ; } else { i ++ ; } } return res ; }
org . junit . Assert . assertArrayEquals ( test . METHOD_2 ( input , 4 ) , expected ) 