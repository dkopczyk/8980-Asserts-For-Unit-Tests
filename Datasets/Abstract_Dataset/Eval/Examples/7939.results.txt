METHOD_0 ( ) { java . lang . String name = IDENT_0 . METHOD_1 ( ) ; org . apache . IDENT_1 . IDENT_2 conf = new org . apache . IDENT_1 . METHOD_2 ( ) ; conf . METHOD_3 ( false ) ; conf . METHOD_4 ( ( INT_0 * 1000 ) ) ; conf . METHOD_5 ( ( INT_1 * INT_1 ) ) ; conf . METHOD_6 ( true ) ; final int IDENT_3 = 5 ; final int IDENT_4 = 10 ; try { METHOD_7 ( conf , name , IDENT_3 , IDENT_4 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . IDENT_1 . exceptions . IDENT_5 ex ) { } org . apache . IDENT_1 . IDENT_6 IDENT_7 = ( ( org . apache . IDENT_1 . IDENT_6 ) ( METHOD_8 ( conf , name ) ) ) ; long length = IDENT_7 . METHOD_9 ( ) ; long read = read ( IDENT_7 , length ) ; "<AssertPlaceHolder>" ; } read ( org . apache . IDENT_1 . api . IDENT_8 , long ) { org . apache . IDENT_1 . IDENT_9 reader = IDENT_7 . METHOD_10 ( ) ; byte [ ] IDENT_10 = new byte [ 1 ] ; long offset = 0 ; try { while ( offset < n ) { int read = reader . read ( IDENT_10 , 0 , 1 ) ; offset += read ; } } catch ( org . apache . IDENT_1 . exceptions . IDENT_11 ex ) { org . apache . IDENT_1 . IDENT_12 . LOG . info ( STRING_1 , ex ) ; } finally { reader . close ( ) ; } return offset ; }
org . junit . Assert . assertEquals ( length , read ) 