METHOD_0 ( ) { / graph . METHOD_1 ( 0 , 1 , 1 , false ) ; graph . METHOD_1 ( 1 , 2 , 1 , false ) ; graph . METHOD_1 ( 2 , 3 , 2 , false ) ; graph . METHOD_1 ( 3 , 4 , 1 , false ) ; graph . METHOD_1 ( 1 , 5 , 1 , false ) ; graph . METHOD_1 ( 5 , 3 , 1 , false ) ; graph . METHOD_2 ( ) ; METHOD_3 ( ) ; com . graphhopper . IDENT_0 . ch . IDENT_1 IDENT_2 = METHOD_4 ( ) ; IDENT_2 . METHOD_5 ( 2 , 1 , 0 ) ; com . graphhopper . IDENT_0 . ch . IDENT_3 result = IDENT_2 . METHOD_6 ( 3 , 3 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( int , int ) { IDENT_4 = ( ( IDENT_5 ) == IDENT_6 ) ? METHOD_7 ( IDENT_7 , IDENT_5 , IDENT_8 ) : Double . IDENT_9 ; IDENT_10 = IDENT_11 ; IDENT_12 = false ; com . graphhopper . IDENT_0 . ch . IDENT_13 IDENT_14 = IDENT_15 . METHOD_8 ( IDENT_6 ) ; while ( IDENT_14 . next ( ) ) { final int IDENT_16 = IDENT_14 . METHOD_9 ( ) ; final int IDENT_17 = METHOD_10 ( IDENT_16 , IDENT_6 ) ; if ( ( IDENT_18 [ IDENT_17 ] ) != ( IDENT_11 ) ) { boolean IDENT_19 = ( ( ( IDENT_20 [ IDENT_17 ] ) >= 0 ) && ( IDENT_6 == ( IDENT_21 [ IDENT_20 [ IDENT_17 ] ] ) ) ) && ( ( ( IDENT_22 [ IDENT_17 ] ) - ( IDENT_22 [ IDENT_20 [ IDENT_17 ] ] ) ) <= ( com . graphhopper . IDENT_0 . ch . IDENT_1 . IDENT_23 ) ) ; if ( ! IDENT_19 ) { METHOD_11 ( IDENT_6 , IDENT_8 , IDENT_17 ) ; } } } while ( ! ( IDENT_24 . isEmpty ( ) ) ) { if ( ( ( IDENT_25 ) < 1 ) && ( ( ! ( IDENT_12 ) ) || ( java . lang . Double . METHOD_12 ( IDENT_4 ) ) ) ) { break ; } final int IDENT_26 = IDENT_24 . METHOD_13 ( ) ; if ( ( IDENT_22 [ IDENT_26 ] ) > ( IDENT_4 ) ) { break ; } IDENT_24 . METHOD_14 ( ) ; ( IDENT_27 ) ++ ; ( IDENT_28 . IDENT_27 ) ++ ; ( IDENT_29 . IDENT_27 ) ++ ; if ( IDENT_30 [ IDENT_26 ] ) { ( IDENT_25 ) OP_0 ; } if ( ( ( IDENT_31 ) > ( IDENT_32 ) ) && ( ! ( IDENT_30 [ IDENT_26 ] ) ) ) { continue ; } final int IDENT_33 = IDENT_21 [ IDENT_26 ] ; com . graphhopper . IDENT_0 . ch . IDENT_13 IDENT_34 = IDENT_35 . METHOD_8 ( IDENT_33 ) ; while ( IDENT_34 . next ( ) ) { if ( METHOD_15 ( IDENT_34 . METHOD_16 ( ) ) ) { continue ; } if ( ( IDENT_34 . METHOD_17 ( ) ) == ( IDENT_36 [ IDENT_26 ] ) ) { continue ; } double IDENT_37 = IDENT_38 . METHOD_18 ( IDENT_34 , false , IDENT_36 [ IDENT_26 ] ) ; double IDENT_39 = IDENT_37 + ( IDENT_22 [ IDENT_26 ] ) ; if ( java . lang . Double . METHOD_12 ( IDENT_39 ) ) { continue ; } boolean IDENT_40 = ( this . IDENT_30 [ IDENT_26 ] ) && ( ( IDENT_34 . METHOD_16 ( ) ) == ( IDENT_41 ) ) ; boolean IDENT_19 = ( IDENT_33 == IDENT_6 ) && ( IDENT_37 <= ( com . graphhopper . IDENT_0 . ch . IDENT_1 . IDENT_23 ) ) ; int key = METHOD_10 ( IDENT_34 . METHOD_9 ( ) , IDENT_34 . METHOD_16 ( ) ) ; if ( ( IDENT_18 [ key ] ) == ( IDENT_11 ) ) { METHOD_19 ( key , IDENT_34 , IDENT_39 , IDENT_26 , IDENT_40 ) ; IDENT_42 . add ( key ) ; IDENT_24 . METHOD_20 ( IDENT_39 , key ) ; if ( ! IDENT_19 ) { METHOD_11 ( IDENT_6 , IDENT_8 , key ) ; } } else if ( IDENT_39 < ( IDENT_22 [ key ] ) ) { METHOD_21 ( key , IDENT_34 , IDENT_39 , IDENT_26 , IDENT_40 ) ; IDENT_24 . METHOD_22 ( IDENT_39 , key ) ; if ( ! IDENT_19 ) { METHOD_11 ( IDENT_6 , IDENT_8 , key ) ; } } } ( IDENT_31 ) ++ ; ( IDENT_28 . IDENT_31 ) ++ ; ( IDENT_29 . IDENT_31 ) ++ ; } if ( IDENT_12 ) { int IDENT_17 = METHOD_10 ( IDENT_10 , IDENT_6 ) ; com . graphhopper . IDENT_0 . ch . IDENT_3 result = METHOD_23 ( IDENT_17 ) ; com . graphhopper . IDENT_0 . ch . IDENT_3 entry = result ; while ( ( IDENT_20 [ IDENT_17 ] ) >= 0 ) { IDENT_17 = IDENT_20 [ IDENT_17 ] ; com . graphhopper . IDENT_0 . ch . IDENT_3 parent = METHOD_23 ( IDENT_17 ) ; entry . parent = parent ; entry = parent ; } entry . parent = IDENT_43 . get ( IDENT_20 [ IDENT_17 ] ) ; return result ; } else { return null ; } }
org . junit . Assert . assertNull ( result ) 