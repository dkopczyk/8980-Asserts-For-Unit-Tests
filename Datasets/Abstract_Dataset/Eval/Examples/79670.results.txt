METHOD_0 ( ) { final double IDENT_0 = FLOAT_0 ; final double IDENT_1 = - FLOAT_1 ; final double IDENT_2 = FLOAT_2 ; final double IDENT_3 = - FLOAT_3 ; com . graphhopper . IDENT_4 IDENT_5 = new com . graphhopper . METHOD_1 ( IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 ) ; IDENT_5 . METHOD_2 ( ) . put ( IDENT_6 . IDENT_7 . IDENT_8 , java . time . IDENT_9 . of ( INT_0 , 1 , 1 , 0 , 0 ) . METHOD_3 ( com . graphhopper . IDENT_10 . IDENT_11 ) . METHOD_4 ( ) ) ; IDENT_5 . METHOD_2 ( ) . put ( IDENT_6 . IDENT_7 . IDENT_12 , true ) ; IDENT_5 . METHOD_2 ( ) . put ( IDENT_6 . IDENT_7 . IDENT_13 , true ) ; IDENT_5 . METHOD_2 ( ) . put ( IDENT_6 . IDENT_7 . IDENT_14 , INT_1 ) ; com . graphhopper . IDENT_15 response = com . graphhopper . IDENT_10 . IDENT_16 . route ( IDENT_5 ) ; java . util . List < java . time . IDENT_17 > IDENT_18 = response . METHOD_5 ( ) . stream ( ) . map ( ( path ) -> java . time . IDENT_17 . from ( ( ( com . graphhopper . IDENT_19 . IDENT_20 ) ( path . METHOD_6 ( ) . get ( 0 ) ) ) . METHOD_7 ( ) . METHOD_4 ( ) . METHOD_3 ( com . graphhopper . IDENT_10 . IDENT_11 ) ) ) . collect ( java . util . stream . IDENT_21 . toList ( ) ) ; java . util . List < java . time . IDENT_17 > IDENT_22 = java . util . stream . IDENT_23 . of ( STRING_0 2 , STRING_1 , STRING_2 0 , STRING_3 , STRING_0 7 , STRING_0 9 , STRING_4 , STRING_0 6 , STRING_5 , STRING_6 , STRING_0 8 , STRING_0 1 , STRING_0 0 , STRING_2 , STRING_7 , STRING_8 , STRING_0 3 , STRING_0 4 , STRING_0 5 , STRING_9 , STRING_0 ) . map ( IDENT_17 :: parse ) . collect ( java . util . stream . IDENT_21 . toList ( ) ) ; "<AssertPlaceHolder>" ; } get ( java . nio . IDENT_24 ) { if ( order . equals ( IDENT_24 . IDENT_25 ) ) return com . graphhopper . util . IDENT_26 . IDENT_27 ; else return com . graphhopper . util . IDENT_26 . IDENT_28 ; }
org . junit . Assert . assertEquals ( IDENT_22 , IDENT_18 ) 