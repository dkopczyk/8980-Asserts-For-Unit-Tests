METHOD_0 ( ) { com . graphhopper . jsprit . core . algorithm . IDENT_0 IDENT_1 = new com . graphhopper . jsprit . core . algorithm . METHOD_1 ( ) ; com . graphhopper . jsprit . core . algorithm . IDENT_2 IDENT_3 = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_2 . class ) ; com . graphhopper . jsprit . core . algorithm . IDENT_2 IDENT_4 = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_2 . class ) ; when ( IDENT_3 . getId ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_4 . getId ( ) ) . thenReturn ( STRING_1 ) ; IDENT_1 . METHOD_2 ( IDENT_3 , FLOAT_0 ) ; IDENT_1 . METHOD_2 ( IDENT_4 , FLOAT_1 ) ; java . util . IDENT_5 IDENT_6 = mock ( java . util . IDENT_5 . class ) ; IDENT_1 . METHOD_3 ( IDENT_6 ) ; when ( IDENT_6 . METHOD_4 ( ) ) . thenReturn ( 0.0 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { if ( ( random ) == null ) throw new java . lang . IllegalStateException ( STRING_2 ) ; double IDENT_7 = random . METHOD_4 ( ) ; double IDENT_8 = 0.0 ; for ( int i = 0 ; i < ( IDENT_9 . size ( ) ) ; i ++ ) { IDENT_8 += ( IDENT_9 . get ( i ) ) / ( IDENT_10 ) ; if ( IDENT_7 < IDENT_8 ) { return IDENT_11 . get ( i ) ; } } throw new java . lang . IllegalStateException ( STRING_3 ) ; }
org . junit . Assert . assertThat ( IDENT_1 . METHOD_5 ( ) , org . hamcrest . CoreMatchers . is ( IDENT_3 ) ) 