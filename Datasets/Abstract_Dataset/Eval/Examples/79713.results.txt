METHOD_0 ( ) { com . graphhopper . jsprit . core . algorithm . IDENT_0 . IDENT_1 select = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_0 . IDENT_1 . class ) ; com . graphhopper . jsprit . core . algorithm . IDENT_2 . IDENT_3 accept = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_2 . IDENT_3 . class ) ; com . graphhopper . jsprit . core . problem . solution . IDENT_4 IDENT_5 = mock ( com . graphhopper . jsprit . core . problem . solution . IDENT_4 . class ) ; final com . graphhopper . jsprit . core . problem . IDENT_6 IDENT_7 = mock ( com . graphhopper . jsprit . core . problem . IDENT_6 . class ) ; final com . graphhopper . jsprit . core . problem . solution . IDENT_8 IDENT_9 = mock ( com . graphhopper . jsprit . core . problem . solution . IDENT_8 . class ) ; when ( select . METHOD_1 ( null ) ) . thenReturn ( IDENT_9 ) ; final java . util . Collection < java . lang . Integer > IDENT_10 = new java . util . ArrayList < java . lang . Integer > ( ) ; com . graphhopper . jsprit . core . algorithm . IDENT_11 IDENT_12 = new com . graphhopper . jsprit . core . algorithm . METHOD_2 ( STRING_0 , select , accept , IDENT_5 ) ; com . graphhopper . jsprit . core . algorithm . IDENT_13 IDENT_14 = new com . graphhopper . jsprit . core . algorithm . METHOD_3 ( ) { @ com . graphhopper . jsprit . core . algorithm . Override public com . graphhopper . jsprit . core . problem . solution . IDENT_8 METHOD_4 ( com . graphhopper . jsprit . core . problem . solution . IDENT_8 IDENT_15 ) { IDENT_10 . add ( 1 ) ; return IDENT_15 ; } @ com . graphhopper . jsprit . core . algorithm . Override public java . lang . String getName ( ) { return null ; } @ com . graphhopper . jsprit . core . algorithm . Override public void METHOD_5 ( com . graphhopper . jsprit . core . algorithm . listener . IDENT_16 IDENT_17 ) { } } ; IDENT_12 . METHOD_6 ( IDENT_14 ) ; IDENT_12 . run ( IDENT_7 , null ) ; "<AssertPlaceHolder>" ; } run ( com . graphhopper . jsprit . core . problem . IDENT_6 , java . util . Collection ) { com . graphhopper . jsprit . core . problem . solution . IDENT_8 solution = IDENT_18 . METHOD_1 ( IDENT_19 ) ; if ( solution == null ) throw new java . lang . IllegalStateException ( METHOD_7 ( ) ) ; com . graphhopper . jsprit . core . problem . solution . IDENT_8 IDENT_20 = com . graphhopper . jsprit . core . problem . solution . IDENT_8 . METHOD_8 ( solution ) ; for ( com . graphhopper . jsprit . core . algorithm . METHOD_3 module : IDENT_21 ) { IDENT_20 = module . METHOD_4 ( IDENT_20 ) ; } double IDENT_22 = IDENT_23 . METHOD_9 ( IDENT_20 ) ; IDENT_20 . METHOD_10 ( IDENT_22 ) ; boolean IDENT_24 = IDENT_25 . METHOD_11 ( IDENT_19 , IDENT_20 ) ; return new com . graphhopper . jsprit . core . algorithm . METHOD_2 . METHOD_12 ( IDENT_20 , IDENT_24 , getId ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_10 . size ( ) , 1 ) 