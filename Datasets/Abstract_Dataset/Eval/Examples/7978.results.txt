METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 < java . lang . Throwable > exception = new java . util . concurrent . atomic . IDENT_0 < java . lang . Throwable > ( ) ; final java . util . concurrent . IDENT_1 IDENT_2 = new java . util . concurrent . METHOD_1 ( 1 ) ; org . apache . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new org . apache . IDENT_3 . IDENT_4 . METHOD_2 ( mock ( org . apache . IDENT_7 . IDENT_8 . class ) , new org . apache . IDENT_3 . util . IDENT_9 . IDENT_10 < org . apache . IDENT_11 . IDENT_12 . IDENT_13 > ( ) { @ java . lang . Override public void METHOD_3 ( org . apache . IDENT_11 . IDENT_12 . IDENT_13 r ) { } @ java . lang . Override public void METHOD_4 ( java . lang . Throwable t ) { exception . set ( t ) ; IDENT_2 . METHOD_5 ( ) ; } } ) ; org . apache . IDENT_7 . IDENT_14 IDENT_15 = org . apache . IDENT_7 . IDENT_14 . create ( IDENT_14 . IDENT_16 . IDENT_17 ) ; IDENT_6 . METHOD_6 ( IDENT_15 , null ) ; IDENT_2 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { while ( true ) { try { return IDENT_18 . get ( 100 , TimeUnit . IDENT_19 ) ; } catch ( java . lang . IDENT_20 e ) { log . warn ( STRING_0 , e ) ; return - 1L ; } catch ( java . util . concurrent . IDENT_21 e ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } catch ( java . util . concurrent . IDENT_22 e ) { continue ; } } }
org . junit . Assert . assertTrue ( ( IDENT_15 == ( exception . get ( ) ) ) ) 