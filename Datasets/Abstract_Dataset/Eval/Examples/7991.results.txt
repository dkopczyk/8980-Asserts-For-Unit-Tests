METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = IDENT_0 ; org . apache . IDENT_2 . stream . IDENT_3 . storage . IDENT_4 IDENT_5 = org . apache . IDENT_2 . stream . IDENT_3 . storage . IDENT_4 . METHOD_1 ( ) . METHOD_2 ( IDENT_6 . IDENT_7 ) . build ( ) ; org . apache . IDENT_2 . stream . IDENT_3 . storage . IDENT_8 IDENT_9 = METHOD_3 ( IDENT_0 , IDENT_1 , org . apache . IDENT_2 . stream . storage . impl . IDENT_10 ) ; when ( IDENT_11 . METHOD_4 ( IDENT_9 ) ) . thenReturn ( java . util . concurrent . IDENT_12 . METHOD_5 ( IDENT_5 ) ) ; java . util . concurrent . IDENT_12 < org . apache . IDENT_2 . stream . IDENT_3 . storage . IDENT_4 > IDENT_13 = METHOD_6 ( IDENT_14 . METHOD_4 ( IDENT_9 ) ) ; verify ( IDENT_11 , times ( 1 ) ) . METHOD_4 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } get ( ) { while ( true ) { try { return IDENT_15 . get ( 100 , TimeUnit . IDENT_16 ) ; } catch ( java . lang . IDENT_17 e ) { log . warn ( STRING_1 , e ) ; return - 1L ; } catch ( java . util . concurrent . IDENT_18 e ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } catch ( java . util . concurrent . IDENT_19 e ) { continue ; } } }
org . junit . Assert . assertTrue ( ( IDENT_5 == ( IDENT_13 . get ( ) ) ) ) 