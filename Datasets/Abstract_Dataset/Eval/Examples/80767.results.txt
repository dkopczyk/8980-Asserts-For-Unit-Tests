METHOD_0 ( ) { final java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 > IDENT_3 = METHOD_1 ( new java . util . HashMap < java . lang . String , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 > ( ) { { put ( STRING_0 , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 . METHOD_2 ( STRING_0 ) ) ; } } ) ; final java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 > IDENT_4 = METHOD_1 ( new java . util . HashMap < java . lang . String , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 > ( ) { { put ( "bar" , IDENT_2 . IDENT_5 ) ; put ( "1" , IDENT_2 . IDENT_6 ) ; METHOD_3 ( IDENT_3 ) ; } } ) ; com . IDENT_0 . IDENT_1 . metrics . IDENT_7 . IDENT_8 IDENT_9 = new com . IDENT_0 . IDENT_1 . metrics . IDENT_7 . METHOD_4 ( java . util . Arrays . asList ( "foo" , "bar" , "1" ) ) ; final java . util . Map < com . IDENT_0 . IDENT_1 . metrics . IDENT_10 , java . util . Collection < java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . metrics . IDENT_2 > > > IDENT_11 = IDENT_9 . apply ( java . util . stream . IDENT_12 . of ( IDENT_4 ) , IDENT_10 :: valueOf , java . util . function . IDENT_13 . METHOD_5 ( ) ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { return ( IDENT_14 ) == ( end ) ; }
org . junit . Assert . assertTrue ( IDENT_11 . isEmpty ( ) ) 