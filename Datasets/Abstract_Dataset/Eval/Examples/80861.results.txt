METHOD_0 ( ) { final org . joda . time . IDENT_0 IDENT_1 = new org . joda . time . METHOD_1 ( org . joda . time . IDENT_2 . IDENT_3 ) ; final org . joda . time . IDENT_4 IDENT_5 = org . joda . time . IDENT_4 . METHOD_2 ( 1 ) ; final java . util . List < java . util . Collection < com . IDENT_6 . IDENT_7 . metrics . IDENT_8 . IDENT_9 . IDENT_10 > > expected = com . IDENT_6 . IDENT_11 . remote . IDENT_8 . IDENT_12 . METHOD_3 ( ) . collect ( java . util . stream . IDENT_13 . toList ( ) ) ; when ( IDENT_8 . evaluate ( org . mockito . Mockito . any ( ) , org . mockito . Mockito . METHOD_4 ( org . joda . time . METHOD_1 . class ) , org . mockito . Mockito . METHOD_4 ( org . joda . time . IDENT_4 . class ) ) ) . METHOD_5 ( ( IDENT_14 ) -> METHOD_3 ( ) ) ; final java . util . List < java . util . Collection < com . IDENT_6 . IDENT_7 . metrics . IDENT_8 . IDENT_9 . IDENT_10 > > result = client . evaluate ( METHOD_6 ( "name" , expr ) , IDENT_1 , IDENT_5 ) . collect ( java . util . stream . IDENT_13 . toList ( ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_8 , times ( 1 ) ) . evaluate ( org . mockito . Mockito . < java . util . Map > METHOD_7 ( org . hamcrest . Matchers . METHOD_8 ( org . hamcrest . Matchers . equalTo ( "name" ) , new com . IDENT_6 . IDENT_11 . remote . IDENT_8 . IDENT_12 . METHOD_9 ( expr ) ) ) , org . mockito . Mockito . eq ( IDENT_1 ) , org . mockito . Mockito . eq ( IDENT_5 ) ) ; METHOD_10 ( IDENT_8 ) ; } collect ( java . util . stream . IDENT_15 ) { try ( final java . util . stream . IDENT_16 < T > s = stream . get ( ) ) { return s . collect ( IDENT_17 ) ; } }
org . junit . Assert . assertEquals ( expected , result ) 