METHOD_0 ( ) { org . apache . flink . streaming . IDENT_0 . source . IDENT_1 event = new org . apache . flink . streaming . IDENT_0 . source . METHOD_1 ( ) ; event . setId ( 1 ) ; event . setName ( "test" ) ; event . METHOD_2 ( FLOAT_0 ) ; event . METHOD_3 ( org . apache . flink . streaming . IDENT_0 . schema . IDENT_2 . IDENT_3 ) ; org . apache . flink . streaming . IDENT_0 . schema . IDENT_4 < org . apache . flink . streaming . IDENT_0 . source . METHOD_1 > schema = new org . apache . flink . streaming . IDENT_0 . schema . METHOD_4 ( org . apache . flink . api . java . IDENT_5 . IDENT_6 . METHOD_5 ( org . apache . flink . streaming . IDENT_0 . source . METHOD_1 . class ) , STRING_0 , "name" , STRING_1 , STRING_2 ) ; org . apache . flink . streaming . IDENT_0 . schema . IDENT_7 < org . apache . flink . streaming . IDENT_0 . source . METHOD_1 > reader = new org . apache . flink . streaming . IDENT_0 . schema . METHOD_6 ( schema ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( T ) { org . apache . flink . util . IDENT_8 . METHOD_8 ( ( ( input . getClass ( ) ) == ( schema . METHOD_9 ( ) . METHOD_10 ( ) ) ) , ( ( ( STRING_3 + input ) + STRING_4 ) + ( schema . METHOD_9 ( ) ) ) ) ; java . lang . Object [ ] data ; if ( schema . METHOD_11 ( ) ) { data = new java . lang . Object [ ] { input } ; } else if ( schema . METHOD_12 ( ) ) { org . apache . flink . api . java . tuple . IDENT_9 tuple = ( ( org . apache . flink . api . java . tuple . IDENT_9 ) ( input ) ) ; data = new java . lang . Object [ schema . METHOD_13 ( ) . length ] ; for ( int i = 0 ; i < ( schema . METHOD_13 ( ) . length ) ; i ++ ) { data [ i ] = tuple . METHOD_14 ( schema . METHOD_13 ( ) [ i ] ) ; } } else if ( schema . METHOD_15 ( ) ) { org . apache . flink . types . IDENT_10 row = ( ( org . apache . flink . types . IDENT_10 ) ( input ) ) ; data = new java . lang . Object [ schema . METHOD_13 ( ) . length ] ; for ( int i = 0 ; i < ( schema . METHOD_13 ( ) . length ) ; i ++ ) { data [ i ] = row . METHOD_14 ( schema . METHOD_13 ( ) [ i ] ) ; } } else if ( ( schema . METHOD_16 ( ) ) || ( schema . METHOD_17 ( ) ) ) { data = new java . lang . Object [ schema . METHOD_13 ( ) . length ] ; for ( int i = 0 ; i < ( schema . METHOD_18 ( ) . length ) ; i ++ ) { data [ i ] = METHOD_19 ( schema . METHOD_18 ( ) [ i ] , input ) ; } } else { throw new java . lang . IllegalArgumentException ( ( STRING_5 + ( schema . METHOD_9 ( ) ) ) ) ; } return data ; }
org . junit . Assert . assertArrayEquals ( new java . lang . Object [ ] { 1 , "test" , FLOAT_0 , org . apache . flink . streaming . IDENT_0 . schema . IDENT_2 . IDENT_3 } , reader . METHOD_7 ( event ) ) 