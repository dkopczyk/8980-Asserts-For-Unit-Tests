METHOD_0 ( ) { java . awt . image . IDENT_0 IDENT_1 = new java . awt . image . METHOD_1 ( INT_0 , INT_1 , java . awt . image . METHOD_1 . IDENT_2 ) ; for ( int i = INT_2 ; i > INT_3 ; i OP_0 ) { com . IDENT_3 . image . IDENT_4 IDENT_5 = new com . IDENT_3 . image . METHOD_2 ( i , INT_4 , METHOD_2 . IDENT_6 ) ; java . awt . image . METHOD_1 IDENT_7 = IDENT_5 . filter ( IDENT_1 , null ) ; "<AssertPlaceHolder>" ; } } filter ( java . awt . image . METHOD_1 , java . awt . image . METHOD_1 ) { int IDENT_8 = IDENT_9 . METHOD_3 ( ) ; int IDENT_10 = IDENT_9 . METHOD_4 ( ) ; int type = IDENT_9 . getType ( ) ; java . awt . image . IDENT_11 IDENT_12 = IDENT_9 . METHOD_5 ( ) ; if ( IDENT_13 == null ) { IDENT_13 = METHOD_6 ( IDENT_9 , null ) ; } java . awt . image . IDENT_11 IDENT_14 = IDENT_13 . METHOD_5 ( ) ; int [ ] IDENT_15 = new int [ IDENT_8 ] ; for ( int y = 0 ; y < IDENT_10 ; y ++ ) { if ( type == ( java . awt . image . METHOD_1 . IDENT_2 ) ) { IDENT_12 . METHOD_7 ( 0 , y , IDENT_8 , 1 , IDENT_15 ) ; for ( int x = 0 ; x < IDENT_8 ; x ++ ) { IDENT_15 [ x ] = METHOD_8 ( x , y , IDENT_15 [ x ] ) ; } IDENT_14 . METHOD_9 ( 0 , y , IDENT_8 , 1 , IDENT_15 ) ; } else { IDENT_9 . METHOD_10 ( 0 , y , IDENT_8 , 1 , IDENT_15 , 0 , IDENT_8 ) ; for ( int x = 0 ; x < IDENT_8 ; x ++ ) { IDENT_15 [ x ] = METHOD_8 ( x , y , IDENT_15 [ x ] ) ; } IDENT_13 . METHOD_11 ( 0 , y , IDENT_8 , 1 , IDENT_15 , 0 , IDENT_8 ) ; } } return IDENT_13 ; }
org . junit . Assert . assertNotNull ( IDENT_7 ) 