METHOD_0 ( ) { java . awt . image . IDENT_0 model = new com . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , true , false ) ; int [ ] IDENT_6 = new int [ 4 ] ; float [ ] IDENT_7 = null ; for ( long IDENT_8 = 0 ; IDENT_8 < ( 1L << INT_0 ) ; IDENT_8 += IDENT_9 . MAX_VALUE ) { float expected = ( ( float ) ( IDENT_8 & INT_1 ) ) / ( ( float ) ( ( 1L << INT_0 ) - 1 ) ) ; for ( int i = 0 ; i < ( IDENT_6 . length ) ; i ++ ) { IDENT_6 [ i ] = ( ( int ) ( IDENT_8 ) ) ; } IDENT_7 = model . METHOD_2 ( IDENT_6 , IDENT_7 , 0 ) ; for ( float IDENT_10 : IDENT_7 ) { "<AssertPlaceHolder>" ; } } } METHOD_2 ( java . lang . Object , float [ ] , int ) { int IDENT_11 = METHOD_3 ( ) ; if ( IDENT_12 == null ) { IDENT_12 = new float [ IDENT_11 + IDENT_13 ] ; } int [ ] IDENT_14 = ( ( int [ ] ) ( IDENT_6 ) ) ; for ( int c = 0 , IDENT_15 = IDENT_13 ; c < IDENT_11 ; c ++ , IDENT_15 ++ ) { IDENT_12 [ IDENT_15 ] = ( ( float ) ( ( IDENT_14 [ c ] ) & INT_1 ) ) / ( ( float ) ( ( 1L << ( METHOD_4 ( c ) ) ) - 1 ) ) ; } int IDENT_16 = METHOD_5 ( ) ; if ( ( METHOD_6 ( ) ) && ( METHOD_7 ( ) ) ) { float IDENT_17 = IDENT_12 [ ( IDENT_16 + IDENT_13 ) ] ; if ( IDENT_17 != FLOAT_0 ) { float IDENT_18 = FLOAT_1 / IDENT_17 ; for ( int c = IDENT_13 ; c < ( IDENT_16 + IDENT_13 ) ; c ++ ) { IDENT_12 [ c ] OP_0 IDENT_18 ; } } } return IDENT_12 ; }
org . junit . Assert . assertEquals ( expected , IDENT_10 , 0 ) 