METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . ByteArrayOutputStream bytes = new com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . ByteArrayOutputStream ( ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . IDENT_3 stream = new com . IDENT_0 . IDENT_1 . plugins . IDENT_2 . METHOD_1 ( bytes , 4 , 3 , 8 , java . nio . IDENT_4 . IDENT_5 ) ; stream . write ( 255 ) ; stream . write ( 0 ) ; stream . write ( INT_0 ) ; stream . write ( INT_1 ) ; stream . write ( 255 ) ; stream . write ( INT_2 ) ; stream . write ( INT_3 ) ; stream . write ( INT_4 ) ; stream . write ( INT_5 ) ; stream . write ( INT_1 ) ; stream . write ( 255 ) ; stream . write ( INT_2 ) ; stream . write ( INT_0 ) ; stream . write ( INT_0 ) ; stream . write ( INT_0 ) ; stream . write ( INT_6 ) ; stream . write ( INT_6 ) ; stream . write ( INT_6 ) ; stream . write ( INT_7 ) ; stream . write ( INT_7 ) ; stream . write ( INT_7 ) ; stream . write ( INT_6 ) ; stream . write ( INT_6 ) ; stream . write ( INT_6 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( INT_0 ) ; stream . write ( INT_8 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( 0 ) ; stream . write ( INT_0 ) ; byte [ ] data = new byte [ ] { ( ( byte ) ( 255 ) ) , ( ( byte ) ( 0 ) ) , ( ( byte ) ( INT_0 ) ) , - 1 , - 1 , - 1 , - 4 , - 4 , - 4 , 4 , 4 , 4 , INT_0 , INT_0 , INT_0 , 1 , 1 , 1 , 4 , 4 , 4 , - 4 , - 4 , - 4 , 0 , 0 , 0 , INT_0 , - INT_0 , 0 , - INT_0 , INT_0 , 0 , 0 , 0 , INT_0 } ; "<AssertPlaceHolder>" ; } toByteArray ( ) { byte [ ] IDENT_6 = new byte [ count ] ; java . lang . System . METHOD_2 ( buf , 0 , IDENT_6 , 0 , count ) ; return IDENT_6 ; }
org . junit . Assert . assertArrayEquals ( data , bytes . toByteArray ( ) ) 