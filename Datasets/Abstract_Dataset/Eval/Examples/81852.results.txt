METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 . common . context . IDENT_2 IDENT_3 = com . IDENT_0 . IDENT_1 . common . context . IDENT_4 . METHOD_1 ( com . IDENT_0 . IDENT_1 . IDENT_5 . runners . IDENT_6 . IDENT_7 , com . IDENT_0 . IDENT_1 . IDENT_5 . runners . IDENT_6 . IDENT_8 ) ; final com . IDENT_0 . IDENT_1 . IDENT_5 . result . IDENT_9 result = IDENT_10 . run ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } run ( com . IDENT_0 . IDENT_1 . common . context . IDENT_2 ) { if ( ! ( IDENT_3 . METHOD_2 ( ) ) ) { return new com . IDENT_0 . IDENT_1 . IDENT_5 . result . METHOD_3 ( IDENT_11 . IDENT_12 ) ; } final java . lang . String IDENT_13 = ( ( IDENT_3 . METHOD_4 ( ) ) + ( java . io . File . IDENT_14 ) ) + STRING_0 ; java . lang . String path = com . IDENT_0 . IDENT_1 . common . IDENT_15 . IDENT_16 . IDENT_17 . METHOD_5 ( IDENT_13 , IDENT_3 . METHOD_6 ( ) ) ; java . util . List < java . lang . String > IDENT_18 ; try { IDENT_18 = com . IDENT_0 . IDENT_1 . common . io . reader . IDENT_19 . build ( ) . METHOD_7 ( new java . io . File ( path ) . METHOD_8 ( ) , ( x ) -> x . contains ( STRING_1 ) ) ; } catch ( java . io . IOException IDENT_20 ) { com . IDENT_0 . IDENT_1 . IDENT_5 . runners . IDENT_21 . LOGGER . warn ( STRING_2 ) ; return new com . IDENT_0 . IDENT_1 . IDENT_5 . result . METHOD_3 ( IDENT_11 . IDENT_12 ) ; } assert ( IDENT_18 . size ( ) ) == 1 ; final java . util . List < com . IDENT_0 . IDENT_1 . IDENT_5 . runners . IDENT_22 > IDENT_23 = com . google . common . collect . Lists . newArrayList ( ) ; java . lang . String [ ] IDENT_24 = IDENT_18 . get ( 0 ) . split ( STRING_3 ) ; IDENT_23 . add ( new com . IDENT_0 . IDENT_1 . IDENT_5 . runners . METHOD_9 ( IDENT_3 . METHOD_6 ( ) , IDENT_25 . IDENT_26 . toString ( ) , IDENT_24 [ 1 ] ) ) ; return METHOD_10 ( IDENT_23 ) ; }
org . junit . Assert . assertTrue ( ( result instanceof com . IDENT_0 . IDENT_1 . IDENT_5 . result . METHOD_3 ) ) 