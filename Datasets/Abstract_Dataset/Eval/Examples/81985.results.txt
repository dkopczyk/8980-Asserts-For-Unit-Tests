METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . api . model . trace . IDENT_2 consumer = new org . IDENT_0 . IDENT_1 . api . model . trace . METHOD_1 ( ) ; consumer . METHOD_2 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_0 . IDENT_1 . api . model . trace . Node ) { boolean IDENT_3 = false ; if ( ( ( node . METHOD_4 ( ) ) != null ) && ( node . METHOD_5 ( Constants . IDENT_4 ) ) ) { java . util . List < java . lang . String > IDENT_5 = new java . util . ArrayList < java . lang . String > ( ) ; java . lang . String template = node . METHOD_6 ( Constants . IDENT_4 ) . iterator ( ) . next ( ) . getValue ( ) ; if ( template == null ) { return false ; } if ( ( template . indexOf ( STRING_1 ) ) != ( - 1 ) ) { int index = template . indexOf ( STRING_1 ) ; java . lang . String IDENT_6 = template . substring ( ( index + 1 ) ) ; template = template . substring ( 0 , index ) ; java . util . IDENT_7 IDENT_8 = new java . util . METHOD_7 ( IDENT_6 , STRING_2 ) ; while ( IDENT_8 . METHOD_8 ( ) ) { java . lang . String token = IDENT_8 . METHOD_9 ( ) ; if ( ( ( token . charAt ( 0 ) ) == STRING_3 ) && ( ( token . charAt ( ( ( token . length ( ) ) - 1 ) ) ) == STRING_4 ) ) { IDENT_5 . add ( token . substring ( 1 , ( ( token . length ( ) ) - 1 ) ) ) ; } else { org . IDENT_0 . IDENT_1 . api . utils . IDENT_9 . log . METHOD_10 ( ( ( STRING_5 + token ) + STRING_6 ) ) ; } } } java . lang . String [ ] IDENT_10 = template . split ( "/" ) ; java . lang . String [ ] IDENT_11 = node . METHOD_4 ( ) . split ( "/" , IDENT_10 . length ) ; if ( ( IDENT_10 . length ) != ( IDENT_11 . length ) ) { return false ; } java . util . Set < org . IDENT_0 . IDENT_1 . api . model . IDENT_12 > props = null ; for ( int i = 1 ; i < ( IDENT_11 . length ) ; i ++ ) { java . lang . String IDENT_13 = IDENT_11 [ i ] ; java . lang . String IDENT_14 = IDENT_10 [ i ] ; if ( ( ( IDENT_14 . charAt ( 0 ) ) == STRING_3 ) && ( ( IDENT_14 . charAt ( ( ( IDENT_14 . length ( ) ) - 1 ) ) ) == STRING_4 ) ) { int IDENT_15 = ( IDENT_14 . length ( ) ) - 1 ; int IDENT_16 = IDENT_14 . indexOf ( STRING_7 ) ; if ( IDENT_16 > 0 ) { IDENT_15 = IDENT_16 ; } java . lang . String name = IDENT_14 . substring ( 1 , IDENT_15 ) ; if ( props == null ) { props = new java . util . HashSet < org . IDENT_0 . IDENT_1 . api . model . IDENT_12 > ( ) ; } try { props . add ( new org . IDENT_0 . IDENT_1 . api . model . METHOD_11 ( name , java . net . IDENT_17 . decode ( IDENT_13 , STRING_8 ) ) ) ; } catch ( java . io . IDENT_18 e ) { if ( org . IDENT_0 . IDENT_1 . api . utils . IDENT_9 . log . METHOD_12 ( IDENT_19 . IDENT_20 ) ) { org . IDENT_0 . IDENT_1 . api . utils . IDENT_9 . log . METHOD_13 ( ( ( ( STRING_9 + IDENT_13 ) + STRING_10 ) + e ) ) ; } } } else if ( ! ( IDENT_13 . equals ( IDENT_14 ) ) ) { return false ; } } if ( props != null ) { node . METHOD_2 ( template ) ; node . METHOD_6 ( ) . addAll ( props ) ; IDENT_3 = true ; } if ( org . IDENT_0 . IDENT_1 . api . utils . IDENT_9 . METHOD_14 ( node , IDENT_5 ) ) { IDENT_3 = true ; } } return IDENT_3 ; }
org . junit . Assert . assertFalse ( org . IDENT_0 . IDENT_1 . api . utils . IDENT_9 . METHOD_3 ( consumer ) ) 