METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = new org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( org . IDENT_0 . IDENT_1 . IDENT_8 . rules . IDENT_9 . IDENT_10 ) ; IDENT_5 . METHOD_4 ( org . IDENT_0 . IDENT_1 . IDENT_8 . rules . IDENT_9 . IDENT_11 ) ; IDENT_5 . METHOD_5 ( org . IDENT_0 . IDENT_1 . IDENT_8 . rules . IDENT_9 . IDENT_12 ) ; IDENT_5 . METHOD_6 ( STRING_0 ) ; IDENT_5 . METHOD_7 ( ) . add ( IDENT_7 ) ; IDENT_5 . METHOD_8 ( STRING_1 ) ; IDENT_7 . METHOD_9 ( STRING_2 ) ; org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_13 in = new org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . METHOD_10 ( ) ; in . METHOD_11 ( ) . add ( IDENT_5 ) ; org . IDENT_0 . IDENT_1 . IDENT_8 . rules . IDENT_14 IDENT_15 = new org . IDENT_0 . IDENT_1 . IDENT_8 . rules . METHOD_12 ( ) ; java . lang . String IDENT_16 = IDENT_15 . transform ( "test" , in , STRING_3 ) ; java . lang . String expected = STRING_4 ; "<AssertPlaceHolder>" ; } transform ( java . lang . String , org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . METHOD_10 , java . lang . String ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( ( types . METHOD_13 ( ) ? STRING_4 : STRING_5 ) ) ; for ( int IDENT_17 = 0 ; IDENT_17 < ( types . METHOD_11 ( ) . size ( ) ) ; IDENT_17 ++ ) { org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_18 r = types . METHOD_11 ( ) . get ( IDENT_17 ) ; if ( ( r . getClass ( ) ) == ( org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . METHOD_1 . class ) ) { org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . METHOD_1 rule = ( ( org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . METHOD_1 ) ( r ) ) ; if ( ! ( rule . METHOD_14 ( version ) ) ) { continue ; } builder . append ( STRING_6 ) ; builder . append ( " " 1 ) ; builder . append ( name ) ; builder . append ( STRING_7 ) ; builder . append ( ( IDENT_17 + 1 ) ) ; builder . append ( " " 7 ) ; builder . append ( rule . METHOD_15 ( ) ) ; builder . append ( STRING_6 ) ; if ( ( rule . METHOD_16 ( ) ) != null ) { builder . append ( STRING_8 2 ) ; builder . append ( rule . METHOD_16 ( ) ) ; builder . append ( STRING_6 ) ; } else if ( ( rule . METHOD_17 ( ) ) != null ) { builder . append ( " " 9 ) ; builder . append ( rule . METHOD_17 ( ) ) ; builder . append ( STRING_6 ) ; } builder . append ( STRING_9 ) ; builder . append ( rule . METHOD_18 ( ) ) ; if ( ( ( rule . METHOD_19 ( ) . size ( ) ) != 1 ) || ( ! ( rule . METHOD_19 ( ) . get ( 0 ) . equals ( " " 5 ) ) ) ) { builder . append ( STRING_7 ) ; for ( int i = 0 ; i < ( rule . METHOD_19 ( ) . size ( ) ) ; i ++ ) { if ( i > 0 ) { builder . append ( STRING_10 ) ; } builder . append ( rule . METHOD_19 ( ) . get ( i ) ) ; } builder . append ( STRING_11 ) ; } builder . append ( STRING_6 ) ; builder . append ( STRING_12 ) ; if ( ( rule . METHOD_20 ( ) ) == null ) { builder . append ( org . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_19 . class . getName ( ) ) ; } else { builder . append ( rule . METHOD_20 ( ) ) ; } builder . append ( STRING_6 ) ; builder . append ( STRING_13 ) ; builder . append ( rule . METHOD_21 ( ) ) ; builder . append ( STRING_6 ) ; if ( ( rule . METHOD_13 ( ) ) != ( types . METHOD_13 ( ) ) ) { builder . append ( ( rule . METHOD_13 ( ) ? STRING_4 : STRING_5 ) ) ; } if ( ! ( rule . METHOD_22 ( ) . isEmpty ( ) ) ) { builder . append ( " " 2 ) ; for ( int i = 0 ; i < ( rule . METHOD_22 ( ) . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . IDENT_20 IDENT_21 = rule . METHOD_22 ( ) . get ( i ) ; if ( i > 0 ) { builder . append ( " " 0 ) ; } builder . append ( IDENT_21 . getName ( ) ) ; builder . append ( STRING_8 ) ; builder . append ( IDENT_21 . getType ( ) ) ; builder . append ( " " 6 ) ; builder . append ( IDENT_21 . METHOD_23 ( ) ) ; builder . append ( STRING_8 0 ) ; } } builder . append ( " " 8 ) ; if ( ( rule . METHOD_24 ( ) ) == null ) { builder . append ( STRING_8 3 ) ; } else { builder . append ( rule . METHOD_24 ( ) ) ; } builder . append ( STRING_6 ) ; builder . append ( " " 3 ) ; for ( int i = 0 ; i < ( rule . METHOD_7 ( ) . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_1 . api . model . config . IDENT_2 . IDENT_3 . IDENT_22 action = rule . METHOD_7 ( ) . get ( i ) ; builder . append ( " " ) ; org . IDENT_0 . IDENT_1 . IDENT_8 . rules . IDENT_23 IDENT_15 = org . IDENT_0 . IDENT_1 . IDENT_8 . rules . METHOD_12 . IDENT_24 . get ( action . getClass ( ) ) ; if ( IDENT_15 != null ) { builder . append ( IDENT_15 . METHOD_25 ( rule . METHOD_7 ( ) . get ( i ) ) ) ; if ( i < ( ( rule . METHOD_7 ( ) . size ( ) ) - 1 ) ) { builder . append ( STRING_8 1 ) ; } builder . append ( STRING_6 ) ; } else { System . err . println ( ( ( STRING_14 + ( action . getClass ( ) ) ) + STRING_15 ) ) ; } } builder . append ( " " 4 ) ; } } return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_16 ) 