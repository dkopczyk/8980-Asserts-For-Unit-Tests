METHOD_0 ( ) { METHOD_1 ( IDENT_0 . METHOD_2 ( ) ) . METHOD_3 ( java . util . Collections . < java . lang . String , java . lang . String > METHOD_4 ( ) ) ; java . lang . IDENT_1 < com . IDENT_2 . spi . IDENT_3 . IDENT_4 > result = IDENT_5 . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { try { final java . util . Map < java . lang . String , java . lang . String > IDENT_6 = IDENT_7 . METHOD_2 ( ) ; if ( IDENT_6 . isEmpty ( ) ) { METHOD_6 ( ) . METHOD_7 ( STRING_0 ) ; return java . util . Collections . emptyList ( ) ; } if ( METHOD_6 ( ) . METHOD_8 ( ) ) { final java . lang . StringBuilder sb = new java . lang . StringBuilder ( STRING_1 ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_6 . entrySet ( ) ) { sb . append ( " " ) . append ( entry . getKey ( ) ) . append ( STRING_2 ) . append ( entry . getValue ( ) ) . append ( "\n" ) ; } METHOD_6 ( ) . METHOD_9 ( sb . toString ( ) ) ; } final java . util . ArrayList < com . IDENT_2 . spi . IDENT_3 . IDENT_4 > nodes = new java . util . ArrayList < com . IDENT_2 . spi . IDENT_3 . IDENT_4 > ( IDENT_6 . size ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_6 . entrySet ( ) ) { for ( int port = IDENT_8 . METHOD_10 ( ) . METHOD_11 ( ) ; port <= ( IDENT_8 . METHOD_10 ( ) . METHOD_12 ( ) ) ; port ++ ) { nodes . add ( new com . IDENT_2 . spi . IDENT_3 . METHOD_13 ( new com . IDENT_2 . nio . METHOD_14 ( entry . getKey ( ) , port ) , new com . IDENT_2 . nio . METHOD_14 ( entry . getValue ( ) , port ) ) ) ; } } return nodes ; } catch ( java . lang . Exception e ) { com . IDENT_2 . IDENT_9 . IDENT_10 . LOGGER . METHOD_7 ( STRING_3 , e ) ; return java . util . Collections . emptyList ( ) ; } }
org . junit . Assert . assertEquals ( emptyList ( ) , result ) 