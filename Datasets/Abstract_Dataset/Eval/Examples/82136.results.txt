METHOD_0 ( ) { METHOD_1 ( IDENT_0 . call ( ) ) . METHOD_2 ( new java . lang . RuntimeException ( ) ) . METHOD_3 ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ; java . lang . String result = com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_4 ( IDENT_0 , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_0 , times ( 2 ) ) . call ( ) ; } METHOD_4 ( java . util . concurrent . IDENT_8 , int ) { int IDENT_9 = 0 ; while ( true ) { try { return IDENT_0 . call ( ) ; } catch ( java . lang . Exception e ) { IDENT_9 ++ ; if ( IDENT_9 > IDENT_10 ) { throw com . IDENT_1 . util . IDENT_11 . METHOD_5 ( e ) ; } long IDENT_12 = com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_6 ( IDENT_9 ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . LOGGER . METHOD_7 ( java . lang . String . format ( STRING_0 , IDENT_9 , ( IDENT_12 / ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_13 ) ) ) ) ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . sleep ( IDENT_12 ) ; } } }
org . junit . Assert . assertEquals ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , result ) 