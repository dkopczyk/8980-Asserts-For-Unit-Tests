METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 buf = new net . IDENT_0 . IDENT_1 . common . IDENT_2 . METHOD_1 ( ) ; for ( int i = 0 ; i < ( ( IDENT_2 . IDENT_4 ) + 1 ) ; i += 4 ) { buf . METHOD_2 ( 1L ) ; } "<AssertPlaceHolder>" ; } METHOD_2 ( long ) { METHOD_3 ( 4 ) ; if ( ( IDENT_5 < 0 ) || ( IDENT_5 > INT_0 ) ) throw new java . lang . IllegalArgumentException ( ( STRING_0 + IDENT_5 ) ) ; data [ ( ( IDENT_6 ) ++ ) ] = ( ( byte ) ( IDENT_5 > > INT_1 ) ) ; data [ ( ( IDENT_6 ) ++ ) ] = ( ( byte ) ( IDENT_5 > > 16 ) ) ; data [ ( ( IDENT_6 ) ++ ) ] = ( ( byte ) ( IDENT_5 > > 8 ) ) ; data [ ( ( IDENT_6 ) ++ ) ] = ( ( byte ) ( IDENT_5 ) ) ; return ( ( T ) ( this ) ) ; }
org . junit . Assert . assertEquals ( ( ( IDENT_2 . IDENT_4 ) * 2 ) , buf . data . length ) 