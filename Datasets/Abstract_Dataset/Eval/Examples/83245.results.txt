METHOD_0 ( ) { double IDENT_0 = FLOAT_0 ; for ( int IDENT_1 = 0 ; IDENT_1 < 5 ; ++ IDENT_1 ) { for ( double x = FLOAT_1 ; x < FLOAT_2 ; x += FLOAT_3 ) { org . hipparchus . analysis . IDENT_2 . IDENT_3 factory = new org . hipparchus . analysis . IDENT_2 . METHOD_1 ( 1 , IDENT_1 ) ; org . hipparchus . analysis . IDENT_2 . IDENT_4 IDENT_5 = factory . METHOD_2 ( 0 , x ) ; org . hipparchus . analysis . IDENT_2 . IDENT_4 IDENT_6 = org . hipparchus . util . IDENT_7 . METHOD_3 ( IDENT_5 ) ; org . hipparchus . analysis . IDENT_2 . IDENT_4 IDENT_8 = org . hipparchus . util . IDENT_7 . log ( IDENT_5 . add ( IDENT_5 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; org . hipparchus . analysis . IDENT_2 . IDENT_4 IDENT_9 = IDENT_6 . METHOD_6 ( IDENT_8 ) ; for ( int n = 0 ; n <= IDENT_1 ; ++ n ) { "<AssertPlaceHolder>" ; } } } } METHOD_7 ( int [ ] ) { return data [ METHOD_8 ( ) . METHOD_9 ( ) . METHOD_10 ( IDENT_10 ) ] ; }
org . junit . Assert . assertEquals ( 0 , IDENT_9 . METHOD_7 ( n ) , IDENT_0 ) 