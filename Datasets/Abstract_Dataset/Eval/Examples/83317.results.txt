METHOD_0 ( ) { org . hipparchus . IDENT_0 . IDENT_1 x = new org . hipparchus . IDENT_0 . METHOD_1 ( 0.0 , 0.0 ) ; org . hipparchus . IDENT_0 . METHOD_1 IDENT_2 = x . METHOD_2 ( METHOD_1 . IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . hipparchus . IDENT_0 . METHOD_1 ) { org . hipparchus . util . IDENT_4 . METHOD_3 ( IDENT_5 ) ; if ( ( IDENT_6 ) || ( IDENT_5 . IDENT_6 ) ) { return org . hipparchus . IDENT_0 . METHOD_1 . IDENT_7 ; } final double c = IDENT_5 . METHOD_4 ( ) ; final double d = IDENT_5 . METHOD_5 ( ) ; if ( ( c == 0.0 ) && ( d == 0.0 ) ) { return org . hipparchus . IDENT_0 . METHOD_1 . IDENT_7 ; } if ( ( IDENT_5 . METHOD_6 ( ) ) && ( ! ( METHOD_6 ( ) ) ) ) { return org . hipparchus . IDENT_0 . METHOD_1 . IDENT_3 ; } if ( ( org . hipparchus . util . IDENT_8 . METHOD_7 ( c ) ) < ( org . hipparchus . util . IDENT_8 . METHOD_7 ( d ) ) ) { double q = c / d ; double IDENT_9 = ( c * q ) + d ; return METHOD_8 ( ( ( ( ( IDENT_10 ) * q ) + ( IDENT_11 ) ) / IDENT_9 ) , ( ( ( ( IDENT_11 ) * q ) - ( IDENT_10 ) ) / IDENT_9 ) ) ; } else { double q = d / c ; double IDENT_9 = ( d * q ) + c ; return METHOD_8 ( ( ( ( ( IDENT_11 ) * q ) + ( IDENT_10 ) ) / IDENT_9 ) , ( ( ( IDENT_11 ) - ( ( IDENT_10 ) * q ) ) / IDENT_9 ) ) ; } }
org . junit . Assert . assertEquals ( IDENT_2 , METHOD_1 . IDENT_7 ) 