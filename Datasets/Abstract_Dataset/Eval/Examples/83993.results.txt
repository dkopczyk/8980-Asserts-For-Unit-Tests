METHOD_0 ( ) { for ( int i = 0 ; i < ( org . apache . hadoop . hdfs . server . IDENT_0 . IDENT_1 . IDENT_2 ) ; i ++ ) { java . util . IDENT_3 IDENT_4 = new java . util . METHOD_1 ( ( ( java . lang . System . currentTimeMillis ( ) ) + i ) ) ; java . net . IDENT_5 [ ] IDENT_6 = METHOD_2 ( IDENT_4 ) ; org . apache . hadoop . fs . Path p = new org . apache . hadoop . fs . Path ( ( STRING_0 + i ) ) ; org . apache . hadoop . hdfs . server . IDENT_0 . IDENT_1 . IDENT_7 . create ( p , org . apache . hadoop . fs . IDENT_8 . IDENT_9 . METHOD_3 ( ) , true , INT_0 , ( ( short ) ( 3 ) ) , INT_1 , null , null , null ) . close ( ) ; org . apache . hadoop . fs . IDENT_10 out = org . apache . hadoop . hdfs . server . IDENT_0 . IDENT_1 . IDENT_7 . append ( p , java . util . IDENT_11 . of ( IDENT_12 . IDENT_13 ) , INT_0 , null , IDENT_6 ) ; out . write ( org . apache . hadoop . hdfs . server . IDENT_0 . IDENT_1 . IDENT_14 ) ; out . close ( ) ; org . apache . hadoop . fs . IDENT_15 [ ] IDENT_16 = METHOD_4 ( p ) ; for ( org . apache . hadoop . fs . IDENT_15 IDENT_17 : IDENT_16 ) { java . lang . String [ ] IDENT_18 = IDENT_17 . METHOD_5 ( ) ; java . lang . String [ ] IDENT_19 = METHOD_6 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } } } METHOD_7 ( java . lang . String [ ] , java . lang . String [ ] ) { for ( int i = 0 ; i < ( IDENT_20 . length ) ; i ++ ) { boolean IDENT_21 = false ; for ( int j = 0 ; j < ( IDENT_22 . length ) ; j ++ ) { if ( IDENT_20 [ i ] . equals ( IDENT_22 [ j ] ) ) { IDENT_21 = true ; break ; } } if ( IDENT_21 == false ) { org . junit . Assert . fail ( ( ( IDENT_20 [ i ] ) + STRING_1 ) ) ; } } return true ; }
org . junit . Assert . assertTrue ( METHOD_7 ( IDENT_18 , IDENT_19 ) ) 