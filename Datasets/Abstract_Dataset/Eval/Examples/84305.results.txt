METHOD_0 ( ) { org . apache . hadoop . io . IDENT_0 . conf . set ( STRING_0 , STRING_1 ) ; org . apache . hadoop . io . IDENT_0 . LOG . info ( STRING_2 ) ; java . util . IDENT_1 random = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; int IDENT_2 = random . METHOD_2 ( INT_0 ) ; for ( int j = 0 ; j < IDENT_2 ; j ++ ) { builder . append ( IDENT_3 [ random . METHOD_2 ( IDENT_3 . length ) ] ) ; } org . apache . hadoop . io . IDENT_4 text = new org . apache . hadoop . io . METHOD_3 ( builder . toString ( ) ) ; org . apache . hadoop . io . IDENT_5 < org . apache . hadoop . io . METHOD_3 > IDENT_6 = new org . apache . hadoop . io . IDENT_5 < org . apache . hadoop . io . METHOD_3 > ( org . apache . hadoop . io . IDENT_0 . conf , org . apache . hadoop . io . METHOD_3 . class ) ; java . lang . String str = IDENT_6 . toString ( text ) ; org . apache . hadoop . io . METHOD_3 IDENT_7 = IDENT_6 . METHOD_4 ( str ) ; org . apache . hadoop . io . IDENT_0 . LOG . info ( ( STRING_3 + text ) ) ; org . apache . hadoop . io . IDENT_0 . LOG . info ( ( STRING_4 + str ) ) ; "<AssertPlaceHolder>" ; } } info ( java . lang . String ) { if ( ( LOG ) != null ) { LOG . info ( msg ) ; } else if ( ( LOGGER ) != null ) { LOGGER . info ( msg ) ; } }
org . junit . Assert . assertEquals ( text , IDENT_7 ) 