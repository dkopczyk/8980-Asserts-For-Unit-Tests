METHOD_0 ( java . lang . String , java . lang . String , java . lang . String , com . github . IDENT_0 . IDENT_1 . cloud . IDENT_2 . IDENT_3 , boolean , boolean , java . lang . String , java . lang . String ) { java . nio . file . Path IDENT_4 = java . nio . file . IDENT_5 . get ( base ) ; java . nio . file . Path IDENT_6 = java . nio . file . IDENT_5 . get ( expected ) ; com . github . IDENT_0 . IDENT_1 . cloud . file . IDENT_7 IDENT_8 = com . github . IDENT_0 . IDENT_1 . cloud . file . IDENT_7 . from ( IDENT_4 , IDENT_9 , IDENT_10 , IDENT_11 , IDENT_12 , IDENT_13 ) ; java . nio . file . Path result = IDENT_8 . apply ( file ) ; "<AssertPlaceHolder>" ; } apply ( java . io . IDENT_14 ) { if ( ( IDENT_15 ) == null ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } long IDENT_16 = 0 ; for ( com . github . IDENT_0 . IDENT_1 . cloud . store . IDENT_17 writer : IDENT_15 ) { IDENT_16 += writer . apply ( IDENT_18 ) ; } return IDENT_16 ; }
org . junit . Assert . assertThat ( result , org . hamcrest . CoreMatchers . is ( IDENT_6 ) ) 