METHOD_0 ( ) { com . IDENT_0 . test . extension . IDENT_1 . IDENT_2 = null ; IDENT_3 . METHOD_1 ( 0 ) ; java . io . File IDENT_4 = IDENT_5 . METHOD_2 ( " " 2 ) ; java . util . List < java . lang . String > IDENT_6 = com . google . common . collect . ImmutableList . < java . lang . String > builder ( ) . add ( STRING_0 ) . add ( " " 9 ) . add ( " " 4 ) . add ( ( ( ( " " + ( IDENT_7 . IDENT_8 . IDENT_9 ) ) + "foo" 1 ) + ( hive . METHOD_3 ( ) ) ) ) . add ( " " 7 ) . add ( STRING_1 ) . add ( ( STRING_2 + ( hive . METHOD_3 ( ) ) ) ) . add ( STRING_3 ) . add ( STRING_4 ) . add ( " " 5 ) . add ( ( STRING_5 + ( com . IDENT_0 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_13 ) ) ) . add ( ( " " 8 + ( com . IDENT_0 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) ) ) . add ( STRING_6 ) . add ( ( " " 3 + ( com . IDENT_0 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_14 ) ) ) . add ( ( " " 6 + ( IDENT_5 . METHOD_4 ( " " 0 ) ) ) ) . add ( ( STRING_7 + ( com . IDENT_0 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_15 . class . METHOD_5 ( ) . getName ( ) ) ) ) . add ( " " 1 ) . build ( ) ; com . google . common . io . IDENT_16 . METHOD_6 ( IDENT_4 , com . IDENT_0 . IDENT_10 . IDENT_11 . UTF_8 ) . METHOD_7 ( IDENT_6 ) ; IDENT_3 . METHOD_8 ( new org . junit . IDENT_17 . java . lang . IDENT_18 . METHOD_9 ( ) { @ com . IDENT_0 . IDENT_10 . IDENT_11 . Override public void METHOD_10 ( ) throws com . IDENT_0 . IDENT_10 . IDENT_11 . Exception { "<AssertPlaceHolder>" ; } } ) ; com . IDENT_0 . IDENT_10 . IDENT_11 . IDENT_19 . METHOD_11 ( new java . lang . String [ ] { "foo" 0 + ( IDENT_4 . getAbsolutePath ( ) ) } ) ; } getValue ( ) { try { if ( ( IDENT_20 ) != null ) { return job . METHOD_12 ( ) . METHOD_13 ( IDENT_20 , IDENT_21 ) . getValue ( ) ; } else { return job . METHOD_12 ( ) . METHOD_13 ( IDENT_22 ) . getValue ( ) ; } } catch ( java . io . IOException e ) { com . IDENT_0 . IDENT_10 . IDENT_11 . metrics . IDENT_23 . LOG . warn ( ( STRING_8 + ( IDENT_22 ) ) , e ) ; } return 0L ; }
org . junit . Assert . assertThat ( IDENT_1 . IDENT_2 . getValue ( ) , org . hamcrest . CoreMatchers . is ( "foo" ) ) 