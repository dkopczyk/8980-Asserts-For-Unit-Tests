METHOD_0 ( ) { "<AssertPlaceHolder>" ; } parse ( java . lang . String [ ] ) { try { IDENT_0 . parse ( args ) ; } catch ( java . lang . Exception e ) { throw new java . lang . IllegalArgumentException ( ( STRING_0 + ( java . util . Arrays . toString ( args ) ) ) , e ) ; } if ( options . METHOD_1 ( ) ) { return options ; } for ( org . apache . hadoop . fs . Path source : options . METHOD_2 ( ) ) { if ( ! ( source . METHOD_3 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_1 + ( java . util . Arrays . toString ( args ) ) ) ) ; } } if ( ! ( options . METHOD_4 ( ) . METHOD_3 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_2 + ( java . util . Arrays . toString ( args ) ) ) ) ; } if ( ( ( options . METHOD_5 ( ) ) != null ) && ( ! ( options . METHOD_5 ( ) . METHOD_3 ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + ( java . util . Arrays . toString ( args ) ) ) ) ; } if ( ( options . METHOD_6 ( ) ) <= 0 ) { options . METHOD_7 ( 1 ) ; } if ( ( ( options . METHOD_8 ( ) ) != null ) && ( ! ( options . METHOD_8 ( ) . METHOD_3 ( ) ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_4 + ( java . util . Arrays . toString ( args ) ) ) ) ; } return options ; }
org . junit . Assert . assertThat ( parser . parse ( " " ) , org . hamcrest . CoreMatchers . is ( " " ) ) 