METHOD_0 ( ) { java . lang . String pattern = STRING_0 ; when ( IDENT_0 . METHOD_1 ( pattern ) ) . METHOD_2 ( new org . apache . IDENT_1 . METHOD_3 ( ) ) ; when ( IDENT_2 . METHOD_4 ( ) ) . thenReturn ( IDENT_3 ) ; when ( IDENT_3 . METHOD_1 ( pattern ) ) . METHOD_2 ( new org . apache . IDENT_1 . METHOD_3 ( ) ) ; com . IDENT_4 . IDENT_5 . IDENT_6 . mapping . service . IDENT_7 handler = service . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String ) { java . util . function . IDENT_8 < java . lang . String , com . IDENT_4 . IDENT_5 . IDENT_6 . mapping . model . IDENT_9 , java . lang . Boolean > filter = ( database , mapping ) -> { boolean IDENT_10 = mapping . equals ( IDENT_11 ) ; boolean IDENT_12 = IDENT_13 . METHOD_7 ( ) . contains ( database ) ; return IDENT_10 || IDENT_12 ; } ; java . util . Map < com . IDENT_4 . IDENT_5 . IDENT_6 . mapping . model . IDENT_9 , java . lang . String > IDENT_14 = new java . util . METHOD_8 ( ) ; for ( com . IDENT_4 . IDENT_5 . IDENT_6 . mapping . model . IDENT_9 mapping : METHOD_9 ( ) ) { IDENT_14 . put ( mapping , pattern ) ; } return super . METHOD_6 ( IDENT_14 , filter ) ; }
org . junit . Assert . assertThat ( handler . METHOD_6 ( pattern ) . size ( ) , org . hamcrest . CoreMatchers . is ( 0 ) ) 