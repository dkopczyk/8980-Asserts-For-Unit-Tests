METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new de . IDENT_0 . IDENT_1 . METHOD_1 ( new de . IDENT_0 . IDENT_1 . METHOD_2 ( new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_0 , STRING_1 ) , new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_2 , STRING_3 ) , STRING_4 , FLOAT_0 ) , new de . IDENT_0 . IDENT_1 . METHOD_2 ( new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_0 , STRING_5 ) , new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_2 , STRING_6 ) , STRING_4 , FLOAT_0 ) ) ; de . IDENT_0 . IDENT_1 . METHOD_2 IDENT_4 = new de . IDENT_0 . IDENT_1 . METHOD_2 ( new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_0 , STRING_7 ) , new de . IDENT_0 . IDENT_1 . METHOD_3 ( STRING_2 , STRING_8 ) , STRING_4 , FLOAT_0 ) ; de . IDENT_0 . IDENT_1 . results . IDENT_5 IDENT_6 = new de . IDENT_0 . IDENT_1 . results . METHOD_4 ( IDENT_3 , IDENT_4 , 10 ) ; java . lang . String IDENT_7 = ( ( ( IDENT_3 + ( METHOD_4 . IDENT_8 ) ) + IDENT_4 ) + ( METHOD_4 . IDENT_9 ) ) + 10 ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder IDENT_10 = new java . lang . StringBuilder ( ) ; IDENT_10 . append ( STRING_9 ) ; int IDENT_11 = IDENT_12 . METHOD_5 ( IDENT_12 . length ( ) ) ; for ( int i = 0 ; i <= IDENT_11 ; i ++ ) { IDENT_10 . append ( ( IDENT_12 . get ( i ) ? 1 : 0 ) ) ; } return IDENT_10 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_6 . toString ( ) ) 