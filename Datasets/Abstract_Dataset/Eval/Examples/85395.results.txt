METHOD_0 ( ) { byte [ ] IDENT_0 = org . apache . hadoop . hbase . util . IDENT_1 . METHOD_1 ( STRING_0 ) ; byte [ ] IDENT_2 = org . apache . hadoop . hbase . util . IDENT_1 . METHOD_1 ( STRING_1 ) ; byte [ ] [ ] IDENT_3 = new byte [ ] [ ] { IDENT_2 } ; org . apache . hadoop . hbase . client . IDENT_4 IDENT_5 = org . apache . hadoop . hbase . client . IDENT_6 . IDENT_7 . METHOD_2 ( IDENT_0 , IDENT_3 , Integer . MAX_VALUE ) ; METHOD_3 ( IDENT_5 , IDENT_2 , 0 , 0 , 1 , 5 ) ; org . apache . hadoop . hbase . client . IDENT_6 . IDENT_7 . METHOD_4 ( IDENT_0 ) ; METHOD_5 ( IDENT_5 , IDENT_2 , 0 , 0 ) ; org . apache . hadoop . hbase . client . IDENT_8 [ ] IDENT_9 = METHOD_6 ( IDENT_5 , IDENT_2 , 0 , 0 , java . util . Arrays . asList ( INT_0 , INT_1 ) ) ; "<AssertPlaceHolder>" ; IDENT_5 . close ( ) ; } METHOD_5 ( org . apache . hadoop . hbase . client . IDENT_4 , byte [ ] , int , int ) { byte [ ] row = org . apache . hadoop . hbase . util . IDENT_1 . METHOD_1 ( ( STRING_2 + IDENT_10 ) ) ; byte [ ] column = org . apache . hadoop . hbase . util . IDENT_1 . METHOD_1 ( ( STRING_3 + IDENT_11 ) ) ; org . apache . hadoop . hbase . client . IDENT_12 IDENT_13 = new org . apache . hadoop . hbase . client . METHOD_7 ( row ) ; IDENT_13 . METHOD_8 ( IDENT_14 , column ) ; IDENT_5 . delete ( IDENT_13 ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_9 . length ) 