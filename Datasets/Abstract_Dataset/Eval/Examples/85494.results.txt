METHOD_0 ( ) { METHOD_1 ( false ) ; org . apache . hadoop . hbase . IDENT_0 . IDENT_1 put = new org . apache . hadoop . hbase . IDENT_0 . METHOD_2 ( org . apache . hadoop . hbase . util . IDENT_2 . METHOD_3 ( STRING_0 ) ) ; put . add ( IDENT_3 , row , row ) ; IDENT_4 . put ( put ) ; org . apache . hadoop . hbase . IDENT_0 . IDENT_5 get = new org . apache . hadoop . hbase . IDENT_0 . METHOD_4 ( org . apache . hadoop . hbase . util . IDENT_2 . METHOD_3 ( STRING_0 ) ) ; for ( int i = 0 ; i < ( IDENT_6 ) ; i ++ ) { if ( i == ( ( IDENT_6 ) - 1 ) ) { break ; } org . apache . hadoop . hbase . IDENT_0 . Result res = IDENT_7 . get ( get ) ; if ( ( res . size ( ) ) >= 1 ) { org . junit . Assert . fail ( STRING_1 ) ; } else { org . apache . hadoop . hbase . IDENT_0 . IDENT_8 . LOG . info ( STRING_2 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_9 ) ; } } METHOD_1 ( true ) ; IDENT_4 . put ( put ) ; for ( int i = 0 ; i < ( IDENT_6 ) ; i ++ ) { if ( i == ( ( IDENT_6 ) - 1 ) ) { org . junit . Assert . fail ( STRING_3 ) ; } org . apache . hadoop . hbase . IDENT_0 . Result res = IDENT_7 . get ( get ) ; if ( ( res . size ( ) ) == 0 ) { org . apache . hadoop . hbase . IDENT_0 . IDENT_8 . LOG . info ( STRING_4 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_9 ) ; } else { "<AssertPlaceHolder>" ; break ; } } put = new org . apache . hadoop . hbase . IDENT_0 . METHOD_2 ( org . apache . hadoop . hbase . util . IDENT_2 . METHOD_3 ( STRING_5 ) ) ; put . add ( IDENT_10 , row , row ) ; IDENT_4 . put ( put ) ; get = new org . apache . hadoop . hbase . IDENT_0 . METHOD_4 ( org . apache . hadoop . hbase . util . IDENT_2 . METHOD_3 ( STRING_5 ) ) ; for ( int i = 0 ; i < ( IDENT_6 ) ; i ++ ) { if ( i == ( ( IDENT_6 ) - 1 ) ) { break ; } org . apache . hadoop . hbase . IDENT_0 . Result res = IDENT_7 . get ( get ) ; if ( ( res . size ( ) ) >= 1 ) { org . junit . Assert . fail ( STRING_6 ) ; } else { org . apache . hadoop . hbase . IDENT_0 . IDENT_8 . LOG . info ( STRING_2 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_9 ) ; } } } value ( ) { if ( isEmpty ( ) ) { return null ; } return IDENT_11 [ 0 ] . getValue ( ) ; }
org . junit . Assert . assertArrayEquals ( res . value ( ) , row ) 