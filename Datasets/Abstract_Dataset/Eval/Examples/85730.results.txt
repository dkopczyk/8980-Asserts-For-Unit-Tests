METHOD_0 ( ) { IDENT_0 . IDENT_1 root = new IDENT_0 . METHOD_1 ( 5 ) ; root . IDENT_2 = new IDENT_0 . METHOD_1 ( 3 ) ; root . IDENT_2 . IDENT_2 = new IDENT_0 . METHOD_1 ( 2 ) ; root . IDENT_2 . IDENT_3 = new IDENT_0 . METHOD_1 ( 4 ) ; root . IDENT_3 = new IDENT_0 . METHOD_1 ( 7 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( IDENT_0 . METHOD_1 ) { java . util . List < java . util . IDENT_4 < java . lang . Integer > > result = new java . util . ArrayList ( ) ; if ( root == null ) { result . add ( new java . util . METHOD_3 ( ) ) ; return result ; } java . util . METHOD_3 < java . lang . Integer > IDENT_5 = new java . util . METHOD_3 ( ) ; IDENT_5 . add ( root . val ) ; java . util . List < java . util . METHOD_3 < java . lang . Integer > > IDENT_6 = METHOD_2 ( root . IDENT_2 ) ; java . util . List < java . util . METHOD_3 < java . lang . Integer > > IDENT_7 = METHOD_2 ( root . IDENT_3 ) ; for ( java . util . METHOD_3 < java . lang . Integer > IDENT_8 : IDENT_6 ) { for ( java . util . METHOD_3 < java . lang . Integer > IDENT_9 : IDENT_7 ) { java . util . List < java . util . METHOD_3 < java . lang . Integer > > IDENT_10 = new java . util . ArrayList ( ) ; METHOD_4 ( IDENT_8 , IDENT_9 , IDENT_10 , IDENT_5 ) ; result . addAll ( IDENT_10 ) ; } } return result ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( java . util . Arrays . asList ( 5 , 3 , 2 , 4 , 7 ) , java . util . Arrays . asList ( 5 , 3 , 2 , 7 , 4 ) , java . util . Arrays . asList ( 5 , 3 , 7 , 2 , 4 ) , java . util . Arrays . asList ( 5 , 7 , 3 , 2 , 4 ) , java . util . Arrays . asList ( 5 , 3 , 4 , 2 , 7 ) , java . util . Arrays . asList ( 5 , 3 , 4 , 7 , 2 ) , java . util . Arrays . asList ( 5 , 3 , 7 , 4 , 2 ) , java . util . Arrays . asList ( 5 , 7 , 3 , 4 , 2 ) ) , s . METHOD_2 ( root ) ) 