METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 = IDENT_5 . IDENT_6 . getInstance ( ) . METHOD_1 ( ) ; IDENT_5 . common . dto . IDENT_7 IDENT_8 = IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( IDENT_0 ) ; int IDENT_9 = IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_3 ( IDENT_8 ) . IDENT_10 ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_5 . common . dto . IDENT_7 ) { IDENT_5 . common . dto . IDENT_11 IDENT_12 ; int IDENT_13 = 0 ; IDENT_13 = IDENT_14 . IDENT_15 . size ( ) ; if ( IDENT_14 . IDENT_15 . containsKey ( STRING_1 ) ) { IDENT_13 OP_0 ; } if ( IDENT_8 == null ) { IDENT_12 = new IDENT_5 . common . dto . METHOD_4 ( IDENT_13 , IDENT_14 . classes . size ( ) , IDENT_14 . METHOD_5 ( ) , METHOD_6 ( ) . length , IDENT_14 . METHOD_7 ( ) , 0 , 0 , 0 ) ; } else { int IDENT_15 = 0 ; int classes = 0 ; int IDENT_16 = 0 ; if ( IDENT_8 . type . equals ( STRING_2 ) ) { if ( IDENT_14 . IDENT_15 . containsKey ( IDENT_8 . IDENT_17 ) ) { IDENT_15 = METHOD_8 ( IDENT_8 . IDENT_17 ) . size ( ) ; java . util . IDENT_18 < java . lang . String > IDENT_19 = METHOD_9 ( IDENT_8 . IDENT_17 ) ; classes = IDENT_19 . size ( ) ; for ( java . lang . String IDENT_20 : IDENT_19 ) { if ( IDENT_14 . classes . containsKey ( IDENT_20 ) ) { IDENT_5 . IDENT_2 . domain . IDENT_21 . IDENT_22 IDENT_23 = IDENT_14 . classes . get ( IDENT_20 ) ; IDENT_16 = IDENT_16 + ( IDENT_23 . IDENT_16 ) ; } } } } else if ( ( IDENT_8 . type . equals ( STRING_3 ) ) || ( IDENT_8 . type . equals ( STRING_4 ) ) ) { if ( IDENT_14 . classes . containsKey ( IDENT_8 . IDENT_17 ) ) { IDENT_5 . IDENT_2 . domain . IDENT_21 . IDENT_22 IDENT_23 = IDENT_14 . classes . get ( IDENT_8 . IDENT_17 ) ; IDENT_16 = IDENT_23 . IDENT_16 ; if ( IDENT_23 . IDENT_24 ) { java . util . IDENT_18 < java . lang . String > IDENT_19 = METHOD_9 ( IDENT_8 . IDENT_17 ) ; classes = IDENT_19 . size ( ) ; } else { classes = 1 ; } } IDENT_15 = 0 ; } else { } IDENT_12 = new IDENT_5 . common . dto . METHOD_4 ( IDENT_13 , IDENT_14 . classes . size ( ) , IDENT_14 . METHOD_5 ( ) , METHOD_6 ( ) . length , IDENT_14 . METHOD_7 ( ) , IDENT_15 , classes , IDENT_16 ) ; } return IDENT_12 ; }
org . junit . Assert . assertTrue ( ( IDENT_9 == 8 ) ) 