METHOD_0 ( ) { for ( int i = 0 ; i < 100 ; i ++ ) { int IDENT_0 = METHOD_1 ( STRING_0 , true ) ; int IDENT_1 = METHOD_1 ( STRING_1 , true ) ; "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . String , boolean ) { if ( IDENT_2 == null ) { url = url . METHOD_2 ( Constants . IDENT_3 , java . lang . String . valueOf ( IDENT_4 ) ) ; } else { url = url . METHOD_2 ( ( ( IDENT_2 + STRING_2 ) + ( com . alibaba . dubbo . common . Constants . IDENT_3 ) ) , java . lang . String . valueOf ( IDENT_4 ) ) ; } org . easymock . EasyMock . METHOD_3 ( IDENT_5 ) ; org . easymock . EasyMock . expect ( IDENT_5 . invoke ( IDENT_6 ) ) . andReturn ( result ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_5 ( ) ) . andReturn ( true ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_6 ( ) ) . andReturn ( url ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_7 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_7 . cluster . IDENT_8 . class ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_5 ) ; org . easymock . EasyMock . METHOD_3 ( IDENT_9 ) ; org . easymock . EasyMock . expect ( IDENT_9 . invoke ( IDENT_6 ) ) . andReturn ( result ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_9 . METHOD_5 ( ) ) . andReturn ( true ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_9 . METHOD_6 ( ) ) . andReturn ( url ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_9 . METHOD_7 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_7 . cluster . IDENT_8 . class ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_9 ) ; IDENT_6 . METHOD_8 ( IDENT_2 ) ; int count = 0 ; for ( int i = 0 ; i < ( IDENT_10 ) ; i ++ ) { org . junit . Assert . assertEquals ( null , IDENT_11 . invoke ( IDENT_6 ) ) ; if ( ( IDENT_5 ) == ( IDENT_11 . METHOD_9 ( ) ) ) { count ++ ; } } return count ; }
org . junit . Assert . assertTrue ( ( IDENT_0 == IDENT_1 ) ) 