METHOD_0 ( ) { com . alibaba . dubbo . common . URL IDENT_0 = com . alibaba . dubbo . common . URL . valueOf ( STRING_0 ) ; java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_3 , STRING_4 ) ; com . alibaba . dubbo . common . URL IDENT_1 = new com . alibaba . dubbo . common . URL ( STRING_5 , STRING_6 , STRING_7 , STRING_8 , INT_0 , STRING_9 , params ) ; "<AssertPlaceHolder>" ; } put ( int , java . lang . Object ) { com . alibaba . dubbo . registry . common . util . IDENT_2 . Entry [ ] IDENT_3 = table ; int hash = key ; int index = ( hash & INT_1 ) OP_0 ( IDENT_3 . length ) ; for ( com . alibaba . dubbo . registry . common . util . IDENT_2 . Entry e = IDENT_3 [ index ] ; e != null ; e = e . next ) { if ( ( e . hash ) == hash ) { java . lang . Object IDENT_4 = e . value ; e . value = value ; return IDENT_4 ; } } if ( ( count ) >= ( IDENT_5 ) ) { METHOD_1 ( ) ; IDENT_3 = table ; index = ( hash & INT_1 ) OP_0 ( IDENT_3 . length ) ; } com . alibaba . dubbo . registry . common . util . IDENT_2 . Entry e = new com . alibaba . dubbo . registry . common . util . IDENT_2 . Entry ( hash , key , value , IDENT_3 [ index ] ) ; IDENT_3 [ index ] = e ; ( count ) ++ ; return null ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 