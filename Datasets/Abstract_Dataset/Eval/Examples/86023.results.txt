METHOD_0 ( ) { boolean [ ] data = new boolean [ ] { true , false , true } ; com . alibaba . dubbo . common . serialize . IDENT_0 IDENT_1 = serialization . serialize ( url , IDENT_2 ) ; IDENT_1 . METHOD_1 ( data ) ; IDENT_1 . METHOD_2 ( ) ; java . io . ByteArrayInputStream IDENT_3 = new java . io . ByteArrayInputStream ( IDENT_2 . toByteArray ( ) ) ; com . alibaba . dubbo . common . serialize . IDENT_4 IDENT_5 = serialization . METHOD_3 ( url , IDENT_3 ) ; "<AssertPlaceHolder>" ; try { METHOD_3 . METHOD_4 ( boolean [ ] . class ) ; org . junit . Assert . fail ( ) ; } catch ( java . io . IOException expected ) { } } equals ( com . alibaba . dubbo . IDENT_6 . buffer . IDENT_7 , com . alibaba . dubbo . IDENT_6 . buffer . IDENT_7 ) { final int IDENT_8 = IDENT_9 . METHOD_5 ( ) ; if ( IDENT_8 != ( IDENT_10 . METHOD_5 ( ) ) ) { return false ; } final int IDENT_11 = IDENT_8 & 7 ; int IDENT_12 = IDENT_9 . METHOD_6 ( ) ; int IDENT_13 = IDENT_10 . METHOD_6 ( ) ; for ( int i = IDENT_11 ; i > 0 ; i OP_0 ) { if ( ( IDENT_9 . METHOD_7 ( IDENT_12 ) ) != ( IDENT_10 . METHOD_7 ( IDENT_13 ) ) ) { return false ; } IDENT_12 ++ ; IDENT_13 ++ ; } return true ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( data , ( ( boolean [ ] ) ( METHOD_3 . METHOD_4 ( boolean [ ] . class ) ) ) ) ) 