METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = com . alibaba . dubbo . common . utils . IDENT_1 . METHOD_1 ( com . alibaba . dubbo . common . serialize . IDENT_2 . class , STRING_0 , com . alibaba . dubbo . common . utils . IDENT_3 . toArray ( STRING_1 , STRING_2 , STRING_3 ) ) ; "<AssertPlaceHolder>" ; } toArray ( java . lang . Class , com . alibaba . dubbo . common . utils . IDENT_4 , int ) { if ( c == ( java . lang . String . class ) ) { if ( len == 0 ) { return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_6 ; } else { java . lang . Object o ; java . lang . String [ ] IDENT_7 = new java . lang . String [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; IDENT_7 [ i ] = ( o == null ) ? null : o . toString ( ) ; } return IDENT_7 ; } } if ( c == ( boolean . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_8 ; java . lang . Object o ; boolean [ ] ret = new boolean [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . Boolean ) ret [ i ] = ( ( java . lang . Boolean ) ( o ) ) . METHOD_3 ( ) ; } return ret ; } if ( c == ( int . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_9 ; java . lang . Object o ; int [ ] ret = new int [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_4 ( ) ; } return ret ; } if ( c == ( long . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_11 ; java . lang . Object o ; long [ ] ret = new long [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_5 ( ) ; } return ret ; } if ( c == ( float . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_12 ; java . lang . Object o ; float [ ] ret = new float [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_6 ( ) ; } return ret ; } if ( c == ( double . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_13 ; java . lang . Object o ; double [ ] ret = new double [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_7 ( ) ; } return ret ; } if ( c == ( byte . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_14 ; java . lang . Object o ; byte [ ] ret = new byte [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_8 ( ) ; } return ret ; } if ( c == ( char . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_15 ; java . lang . Object o ; char [ ] ret = new char [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_16 ) ret [ i ] = ( ( java . lang . IDENT_16 ) ( o ) ) . METHOD_9 ( ) ; } return ret ; } if ( c == ( short . class ) ) { if ( len == 0 ) return com . alibaba . dubbo . common . json . IDENT_5 . IDENT_17 ; java . lang . Object o ; short [ ] ret = new short [ len ] ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { o = list . METHOD_2 ( ) ; if ( o instanceof java . lang . IDENT_10 ) ret [ i ] = ( ( java . lang . IDENT_10 ) ( o ) ) . METHOD_10 ( ) ; } return ret ; } java . lang . Object ret = java . lang . reflect . IDENT_18 . newInstance ( c , len ) ; for ( int i = len - 1 ; i >= 0 ; i OP_0 ) java . lang . reflect . IDENT_18 . set ( ret , i , list . METHOD_2 ( ) ) ; return ret ; }
org . junit . Assert . assertEquals ( com . alibaba . dubbo . common . utils . IDENT_3 . toArray ( ) , IDENT_0 ) 