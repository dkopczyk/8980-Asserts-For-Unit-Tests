METHOD_0 ( ) { java . lang . String key = STRING_0 ; java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_0 . put ( key , null ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_1 = com . alibaba . dubbo . common . utils . IDENT_2 . METHOD_1 ( IDENT_0 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_3 . put ( STRING_1 , STRING_2 ) ; "<AssertPlaceHolder>" ; } put ( int , java . lang . Object ) { com . alibaba . dubbo . registry . common . util . IDENT_4 . Entry [ ] IDENT_5 = table ; int hash = key ; int index = ( hash & INT_0 ) OP_0 ( IDENT_5 . length ) ; for ( com . alibaba . dubbo . registry . common . util . IDENT_4 . Entry e = IDENT_5 [ index ] ; e != null ; e = e . next ) { if ( ( e . hash ) == hash ) { java . lang . Object IDENT_6 = e . value ; e . value = value ; return IDENT_6 ; } } if ( ( count ) >= ( IDENT_7 ) ) { METHOD_2 ( ) ; IDENT_5 = table ; index = ( hash & INT_0 ) OP_0 ( IDENT_5 . length ) ; } com . alibaba . dubbo . registry . common . util . IDENT_4 . Entry e = new com . alibaba . dubbo . registry . common . util . IDENT_4 . Entry ( hash , key , value , IDENT_5 [ index ] ) ; IDENT_5 [ index ] = e ; ( count ) ++ ; return null ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_1 ) 