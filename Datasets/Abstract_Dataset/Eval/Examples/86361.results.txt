METHOD_0 ( ) { org . neo4j . IDENT_0 . test . IDENT_1 . METHOD_1 ( new org . neo4j . IDENT_0 . test . IDENT_1 . METHOD_2 ( ) { @ org . neo4j . IDENT_0 . Override public void execute ( org . neo4j . IDENT_2 . IDENT_3 db , org . neo4j . IDENT_2 . Node IDENT_4 , org . neo4j . IDENT_2 . Node IDENT_5 , org . neo4j . IDENT_2 . Node IDENT_6 ) { org . neo4j . IDENT_0 . IDENT_7 IDENT_8 = new org . neo4j . IDENT_0 . METHOD_3 ( db , STRING_0 , org . neo4j . IDENT_0 . IDENT_9 . METHOD_4 ( IDENT_4 . getId ( ) , IDENT_5 . getId ( ) , IDENT_6 . getId ( ) ) ) ; org . neo4j . IDENT_0 . METHOD_3 IDENT_10 = IDENT_8 . METHOD_5 ( asList ( 0 , 2 ) ) ; java . lang . IDENT_11 < org . neo4j . IDENT_2 . Node > IDENT_12 = asList ( IDENT_4 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } } ) ; } METHOD_6 ( java . lang . IDENT_11 ) { return new org . hamcrest . IDENT_13 < java . lang . IDENT_11 < T > > ( ) { @ org . neo4j . IDENT_0 . Override public boolean METHOD_7 ( java . lang . IDENT_11 < T > actual ) { java . util . Iterator < T > IDENT_14 = expected . iterator ( ) ; java . util . Iterator < T > iterator = actual . iterator ( ) ; boolean result = true ; while ( ( IDENT_14 . hasNext ( ) ) && ( iterator . hasNext ( ) ) ) { T IDENT_15 = IDENT_14 . next ( ) ; T next = iterator . next ( ) ; if ( ( IDENT_15 == null ) && ( next == null ) ) { result OP_0 true ; } else { result OP_0 IDENT_15 . equals ( next ) ; } } return result OP_0 ( ! ( IDENT_14 . hasNext ( ) ) ) && ( ! ( iterator . hasNext ( ) ) ) ; } @ org . neo4j . IDENT_0 . Override public void METHOD_8 ( org . hamcrest . IDENT_16 description ) { description . METHOD_9 ( STRING_1 ) ; } } ; }
org . junit . Assert . assertThat ( METHOD_5 , METHOD_6 ( IDENT_12 ) ) 