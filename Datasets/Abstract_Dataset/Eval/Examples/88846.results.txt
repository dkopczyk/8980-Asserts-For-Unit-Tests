METHOD_0 ( ) { java . util . List < org . IDENT_0 . spec . mapping . IDENT_1 > IDENT_2 = new java . util . ArrayList < org . IDENT_0 . spec . mapping . IDENT_1 > ( ) ; org . IDENT_0 . mapping . dao . IDENT_3 IDENT_4 = new org . IDENT_0 . mapping . dao . METHOD_1 ( STRING_0 , STRING_1 ) ; IDENT_2 . add ( IDENT_4 ) ; org . IDENT_0 . mapping . dao . METHOD_1 IDENT_5 = new org . IDENT_0 . mapping . dao . METHOD_1 ( STRING_2 , STRING_3 ) ; IDENT_2 . add ( IDENT_5 ) ; java . lang . String result = this . IDENT_6 . METHOD_2 ( STRING_4 , STRING_5 , STRING_6 , STRING_7 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , java . util . List ) { return ( ( java . lang . String ) ( this . METHOD_3 ( ) . execute ( new org . springframework . IDENT_7 . IDENT_8 . METHOD_4 ( ) { @ org . IDENT_0 . mapping . dao . METHOD_5 ( STRING_8 ) public java . lang . Object METHOD_6 ( org . hibernate . IDENT_9 session ) throws org . hibernate . IDENT_10 { org . hibernate . Query query = session . METHOD_7 ( METHOD_8 ( IDENT_2 ) ) ; query . METHOD_9 ( IDENT_11 . IDENT_12 , IDENT_13 ) ; query . METHOD_9 ( IDENT_11 . IDENT_14 , IDENT_15 ) ; query . METHOD_9 ( IDENT_11 . IDENT_16 , IDENT_17 ) ; query . METHOD_9 ( IDENT_11 . IDENT_18 , IDENT_2 . size ( ) ) ; query . METHOD_9 ( IDENT_11 . IDENT_19 , IDENT_20 ) ; int i = 0 ; for ( org . IDENT_0 . spec . mapping . IDENT_1 IDENT_21 : IDENT_2 ) { query . METHOD_9 ( ( ( org . IDENT_0 . mapping . dao . IDENT_22 . IDENT_11 . IDENT_23 ) + i ) , IDENT_21 . getValue ( ) ) ; query . METHOD_9 ( ( ( org . IDENT_0 . mapping . dao . IDENT_22 . IDENT_11 . IDENT_24 ) + i ) , IDENT_21 . getName ( ) ) ; i ++ ; } java . util . List < java . lang . String > results = ( ( java . util . List < java . lang . String > ) ( query . list ( ) ) ) ; if ( ( results . size ( ) ) == 0 ) { return null ; } else if ( ( results . size ( ) ) > 1 ) { java . lang . String IDENT_25 = ( ( ( ( ( ( STRING_9 + STRING_10 ) + IDENT_20 ) + STRING_11 1 ) + IDENT_13 ) + STRING_12 ) + IDENT_15 ) + STRING_11 2 ; for ( org . IDENT_0 . spec . mapping . IDENT_1 IDENT_21 : IDENT_2 ) { IDENT_25 += ( ( ( STRING_11 + ( IDENT_21 . getName ( ) ) ) + STRING_13 ) + ( IDENT_21 . getValue ( ) ) ) + STRING_14 ; } IDENT_25 += "]" ; IDENT_25 += ( ( STRING_11 0 + IDENT_17 ) + STRING_11 3 ) + STRING_15 ; for ( java . lang . String IDENT_26 : results ) { IDENT_25 += IDENT_26 + " " ; } IDENT_25 += "]" ; logger . error ( IDENT_25 ) ; throw new java . lang . RuntimeException ( IDENT_25 ) ; } else { return results . get ( 0 ) ; } } } ) ) ) ; }
org . junit . Assert . assertNull ( result ) 