METHOD_0 ( ) { final double IDENT_0 = FLOAT_0 ; final double IDENT_1 = FLOAT_1 ; final double [ ] IDENT_2 = new double [ ] { FLOAT_2 , FLOAT_2 } ; for ( double IDENT_3 = IDENT_0 ; IDENT_3 < 1 ; IDENT_3 += IDENT_1 ) { net . IDENT_4 . IDENT_5 < net . IDENT_4 . type . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_9 = METHOD_1 ( new net . IDENT_4 . type . IDENT_6 . IDENT_7 . METHOD_2 ( ) , INT_0 , INT_0 , IDENT_3 , IDENT_1 , IDENT_2 , INT_1 ) ; net . IDENT_4 . IDENT_5 < net . IDENT_4 . type . IDENT_6 . IDENT_7 . METHOD_2 > IDENT_10 = METHOD_1 ( new net . IDENT_4 . type . IDENT_6 . IDENT_7 . METHOD_2 ( ) , INT_0 , INT_0 , IDENT_3 , IDENT_1 , IDENT_2 , - INT_2 ) ; double IDENT_11 = ( ( java . lang . Double ) ( IDENT_12 . run ( net . IDENT_13 . IDENT_12 . IDENT_14 . IDENT_15 . IDENT_16 . class , IDENT_9 , IDENT_10 ) ) ) ; "<AssertPlaceHolder>" ; } } run ( IDENT_17 , IDENT_18 , IDENT_19 ) { if ( output == null ) { return METHOD_3 ( IDENT_20 , IDENT_21 ) ; } net . IDENT_13 . IDENT_12 . IDENT_22 . IDENT_23 . IDENT_24 . compute ( IDENT_20 , IDENT_21 , output ) ; return output ; }
org . junit . Assert . assertEquals ( 0.0 , IDENT_11 , FLOAT_1 ) 