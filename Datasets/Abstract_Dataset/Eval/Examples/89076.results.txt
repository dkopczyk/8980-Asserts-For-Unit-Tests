METHOD_0 ( ) { final net . IDENT_0 . type . IDENT_1 . IDENT_2 . IDENT_3 in = new net . IDENT_0 . type . IDENT_1 . IDENT_2 . METHOD_1 ( INT_0 ) ; final net . IDENT_0 . type . IDENT_1 . IDENT_4 . IDENT_5 out = new net . IDENT_0 . type . IDENT_1 . IDENT_4 . METHOD_2 ( ) ; IDENT_6 . run ( net . IDENT_7 . IDENT_6 . math . IDENT_8 . IDENT_9 . class , out , in ) ; final double IDENT_10 = java . lang . Math . METHOD_3 ( ( ( FLOAT_0 * FLOAT_0 ) - 1 ) ) ; "<AssertPlaceHolder>" ; } get ( ) { for ( int d = 0 ; d < ( position . length ) ; d ++ ) { IDENT_11 [ d ] = ( position [ d ] ) / ( IDENT_12 [ d ] ) ; IDENT_13 [ d ] = ( position [ d ] ) OP_0 ( IDENT_12 [ d ] ) ; } final int IDENT_14 = net . IDENT_0 . util . IDENT_15 . METHOD_4 ( IDENT_11 , IDENT_16 ) ; final int IDENT_17 = IDENT_18 [ IDENT_14 ] ; net . IDENT_0 . util . IDENT_15 . METHOD_5 ( IDENT_17 , IDENT_16 , IDENT_19 ) ; for ( int d = 0 ; d < ( position . length ) ; d ++ ) { final long IDENT_20 = ( ( IDENT_19 [ d ] ) * ( IDENT_12 [ d ] ) ) + ( IDENT_13 [ d ] ) ; IDENT_21 . METHOD_6 ( IDENT_20 , d ) ; } return IDENT_21 . get ( ) ; }
org . junit . Assert . assertEquals ( out . get ( ) , java . lang . Math . log ( ( INT_0 + IDENT_10 ) ) , 0.0 ) 