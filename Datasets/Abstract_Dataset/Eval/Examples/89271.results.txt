METHOD_0 ( ) { final net . IDENT_0 . IDENT_1 IDENT_2 = net . IDENT_0 . util . IDENT_3 . METHOD_1 ( 1 , 2 , 3 , 5 , 7 , 9 ) ; final net . IDENT_0 . transform . IDENT_4 . IDENT_5 transform = net . IDENT_0 . view . IDENT_6 . METHOD_2 ( IDENT_2 ) ; final long [ ] result = apply ( transform , new long [ ] { 0 , 0 , 0 } ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( net . IDENT_0 . IDENT_1 ) { final int n = IDENT_2 . METHOD_3 ( ) ; final long [ ] offset = new long [ n ] ; IDENT_2 . min ( offset ) ; final long [ ] IDENT_7 = java . util . Arrays . stream ( offset ) . map ( ( o ) -> - o ) . toArray ( ) ; return net . IDENT_0 . view . IDENT_6 . METHOD_4 ( IDENT_7 ) ; }
org . junit . Assert . assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result ) 