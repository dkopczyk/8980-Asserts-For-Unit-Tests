METHOD_0 ( ) { when ( plugin . METHOD_1 ( org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_2 . class ) , org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_3 . class ) , org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_4 . class ) ) ) . thenReturn ( true ) ; when ( plugin . METHOD_2 ( org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_2 . class ) , org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_3 . class ) , org . mockito . Mockito . any ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_4 . class ) ) ) . thenReturn ( "test" ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . slc . sli . IDENT_0 . IDENT_5 . IDENT_6 , org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_7 ) { final org . slc . sli . IDENT_0 . IDENT_5 . index . IDENT_8 IDENT_9 = new org . slc . sli . IDENT_0 . IDENT_5 . index . METHOD_4 ( model ) ; final java . util . Map < java . lang . String , org . slc . sli . IDENT_0 . IDENT_5 . IDENT_10 > IDENT_11 = org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_12 . METHOD_5 ( IDENT_9 . METHOD_6 ( ) . values ( ) ) ; final java . util . Map < org . slc . sli . IDENT_0 . IDENT_5 . Type , java . util . Map < java . lang . String , org . slc . sli . IDENT_0 . IDENT_5 . IDENT_13 > > IDENT_14 = new java . util . HashMap < org . slc . sli . IDENT_0 . IDENT_5 . Type , java . util . Map < java . lang . String , org . slc . sli . IDENT_0 . IDENT_5 . IDENT_13 > > ( ) ; final java . util . List < org . slc . sli . IDENT_0 . IDENT_5 . IDENT_15 > IDENT_16 = new java . util . IDENT_17 < org . slc . sli . IDENT_0 . IDENT_5 . IDENT_15 > ( ) ; for ( final org . slc . sli . IDENT_0 . IDENT_5 . IDENT_15 IDENT_18 : model . METHOD_7 ( ) ) { if ( IDENT_18 instanceof org . slc . sli . IDENT_0 . IDENT_5 . IDENT_2 ) { final org . slc . sli . IDENT_0 . IDENT_5 . IDENT_2 IDENT_19 = ( ( org . slc . sli . IDENT_0 . IDENT_5 . IDENT_2 ) ( IDENT_18 ) ) ; IDENT_16 . add ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_12 . METHOD_8 ( IDENT_19 , plugin , IDENT_9 , IDENT_11 , IDENT_14 ) ) ; } else { IDENT_16 . add ( IDENT_18 ) ; } } final org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_4 host = new org . slc . sli . IDENT_0 . tools . IDENT_1 . METHOD_9 ( IDENT_9 ) ; IDENT_16 . addAll ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_12 . METHOD_10 ( IDENT_14 , IDENT_9 , plugin , host ) ) ; return new org . slc . sli . IDENT_0 . IDENT_5 . METHOD_11 ( org . slc . sli . IDENT_0 . IDENT_5 . IDENT_10 . random ( ) , model . getName ( ) , model . METHOD_12 ( ) , IDENT_16 ) ; }
org . junit . Assert . assertNotNull ( org . slc . sli . IDENT_0 . tools . IDENT_1 . IDENT_12 . METHOD_3 ( model , plugin ) ) 