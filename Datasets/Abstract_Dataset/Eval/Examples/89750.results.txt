METHOD_0 ( ) { java . lang . String directory = com . IDENT_0 . util . io . IDENT_1 . METHOD_1 ( STRING_0 , "" ) ; java . lang . String IDENT_2 = com . IDENT_0 . util . io . IDENT_1 . METHOD_1 ( STRING_0 , "" ) ; java . io . File IDENT_3 = new java . io . File ( directory , STRING_1 ) ; IDENT_3 . METHOD_2 ( ) ; new java . io . File ( IDENT_3 , STRING_2 ) . METHOD_2 ( ) ; try { final com . IDENT_0 . IDENT_4 . service . IDENT_5 service = new com . IDENT_0 . IDENT_4 . service . METHOD_3 ( directory , IDENT_2 , INT_0 , false , new com . IDENT_0 . IDENT_4 . service . METHOD_4 ( ) { @ com . IDENT_0 . IDENT_4 . service . Override public com . IDENT_0 . IDENT_6 . api . IDENT_7 METHOD_5 ( java . lang . String directory ) throws java . io . IOException { com . IDENT_0 . IDENT_6 . reader . IDENT_8 r = new com . IDENT_0 . IDENT_6 . reader . METHOD_6 ( java . util . Arrays . asList ( STRING_3 ) , java . util . Collections . < java . lang . String > emptyList ( ) , java . util . Collections . < java . lang . String > emptyList ( ) , INT_1 ) ; for ( int i = 0 ; i < 1000 ; ++ i ) { for ( int j = 0 ; j < 1000 ; ++ j ) { r . METHOD_7 ( STRING_3 , ( ( i * 1000 ) + j ) , java . util . Arrays . asList ( 0 ) ) ; } } return r ; } } , new com . IDENT_0 . IDENT_4 . service . METHOD_8 ( ) ) ; final java . lang . String IDENT_9 = service . METHOD_9 ( STRING_1 , java . util . Arrays . asList ( STRING_2 ) , "" , "" , 0 , 0 , false , "" , null ) ; service . METHOD_10 ( IDENT_9 , STRING_4 ) ; final java . io . IDENT_10 IDENT_11 = new com . IDENT_0 . IDENT_4 . service . IDENT_12 . METHOD_11 ( ) ; final java . lang . Thread t = new java . lang . Thread ( new java . lang . METHOD_12 ( ) { @ com . IDENT_0 . IDENT_4 . service . Override public void run ( ) { try { service . METHOD_13 ( IDENT_9 , new java . lang . String [ ] { STRING_3 } , new java . lang . String [ 0 ] , IDENT_11 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } } ) ; t . start ( ) ; IDENT_11 . close ( ) ; t . join ( INT_2 ) ; "<AssertPlaceHolder>" ; service . METHOD_14 ( IDENT_9 ) ; service . close ( ) ; } finally { com . IDENT_0 . util . io . IDENT_1 . delete ( directory ) ; } } METHOD_15 ( ) { return IDENT_13 . METHOD_16 ( ) . METHOD_15 ( ) ; }
org . junit . Assert . assertFalse ( t . METHOD_15 ( ) ) 