METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 0 , STRING_3 1 , STRING_2 4 , STRING_3 3 , STRING_2 5 , STRING_3 7 , STRING_2 7 , STRING_4 , STRING_5 , STRING_2 6 , STRING_3 4 , STRING_3 6 , STRING_3 0 , STRING_2 1 , STRING_3 8 , STRING_2 3 , STRING_6 , STRING_7 , STRING_8 , STRING_2 9 , STRING_9 , STRING_3 5 , STRING_3 , STRING_3 2 , STRING_2 2 , STRING_2 , STRING_2 8 } ; for ( java . lang . String IDENT_1 : IDENT_0 ) { try { br . com . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_1 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalArgumentException ex ) { "<AssertPlaceHolder>" ; } } } METHOD_1 ( java . lang . String ) { METHOD_2 ( s ) ; java . lang . String IDENT_5 = s . replaceAll ( STRING_10 , "" ) ; METHOD_3 ( IDENT_5 . matches ( STRING_11 ) ) ; METHOD_3 ( ( ! ( IDENT_5 . matches ( STRING_12 ) ) ) ) ; METHOD_3 ( br . com . IDENT_2 . IDENT_3 . IDENT_4 . isValid ( IDENT_5 . substring ( 0 , 10 ) ) ) ; METHOD_3 ( br . com . IDENT_2 . IDENT_3 . IDENT_4 . isValid ( IDENT_5 ) ) ; return new br . com . IDENT_2 . IDENT_3 . METHOD_4 ( IDENT_5 ) ; }
org . junit . Assert . assertNotNull ( ex ) 