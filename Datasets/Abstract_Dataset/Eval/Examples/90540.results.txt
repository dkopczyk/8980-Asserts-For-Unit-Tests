METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = IDENT_3 . IDENT_4 . newInstance ( ) ; com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 parameters = mock ( com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . class , com . IDENT_0 . IDENT_1 . repository . database . IDENT_8 ) ; when ( parameters . METHOD_1 ( ) . METHOD_1 ( ) ) . thenReturn ( STRING_0 ) ; java . util . Date from = mock ( java . util . Date . class ) ; java . util . Date to = mock ( java . util . Date . class ) ; when ( parameters . METHOD_2 ( ) ) . thenReturn ( from ) ; when ( parameters . METHOD_3 ( ) ) . thenReturn ( to ) ; java . util . List < java . util . Map > expected = mock ( java . util . List . class ) ; when ( transaction . select ( anyString ( ) , org . mockito . Matchers . METHOD_4 ( ) ) ) . thenReturn ( expected ) ; java . util . List < java . util . Map > result = IDENT_9 . METHOD_5 ( IDENT_5 , parameters ) ; "<AssertPlaceHolder>" ; METHOD_6 ( new java . lang . RuntimeException ( ) ) . when ( transaction ) . select ( anyString ( ) , org . mockito . Matchers . METHOD_4 ( ) ) ; IDENT_9 . METHOD_5 ( IDENT_5 , parameters ) ; org . junit . Assert . fail ( ) ; } METHOD_5 ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 , com . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 ) { try { java . util . Date IDENT_11 = parameters . METHOD_2 ( ) ; java . util . Date IDENT_12 = parameters . METHOD_3 ( ) ; java . lang . String IDENT_13 = STRING_1 ; java . lang . String IDENT_14 = STRING_2 ; java . util . List params = new java . util . ArrayList ( ) ; params . add ( IDENT_15 ) ; params . add ( parameters . METHOD_1 ( ) . METHOD_1 ( ) ) ; if ( IDENT_11 != null ) { params . add ( IDENT_11 ) ; IDENT_14 += STRING_3 ; } if ( IDENT_12 != null ) { params . add ( IDENT_12 ) ; IDENT_14 += STRING_4 ; } java . lang . Object [ ] IDENT_16 = new java . lang . Object [ params . size ( ) ] ; params . toArray ( IDENT_16 ) ; java . lang . String IDENT_17 = ( ( ( STRING_5 + IDENT_13 ) + STRING_6 ) + IDENT_14 ) + STRING_7 ; java . util . List < java . util . Map > IDENT_18 = transaction . select ( IDENT_17 , IDENT_16 ) ; return IDENT_18 ; } catch ( java . lang . Exception e ) { throw new com . IDENT_0 . IDENT_1 . repository . METHOD_7 ( STRING_8 , e ) ; } }
org . junit . Assert . assertThat ( result , org . hamcrest . core . Is . is ( expected ) ) 