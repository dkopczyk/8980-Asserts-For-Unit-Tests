METHOD_0 ( ) { int index = 10 ; int IDENT_0 = 1 ; com . IDENT_1 . IDENT_2 . crypto . IDENT_3 [ ] IDENT_4 = new IDENT_3 . IDENT_5 [ ] { IDENT_3 . IDENT_5 . IDENT_6 , IDENT_3 . IDENT_5 . IDENT_7 } ; byte [ ] IDENT_8 = new byte [ IDENT_9 . IDENT_10 ] ; for ( com . IDENT_1 . IDENT_2 . crypto . IDENT_3 . IDENT_5 IDENT_11 : IDENT_4 ) { com . IDENT_1 . IDENT_2 . utils . IDENT_12 . METHOD_1 ( com . IDENT_1 . IDENT_2 . crypto . IDENT_13 . IDENT_14 , IDENT_8 , 0 ) ; byte [ ] IDENT_15 = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . METHOD_2 ( IDENT_11 , IDENT_8 , index ) ; byte [ ] key = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . key ( IDENT_11 , METHOD_2 , IDENT_0 ) ; com . IDENT_1 . IDENT_2 . crypto . IDENT_17 IDENT_18 = new com . IDENT_1 . IDENT_2 . crypto . METHOD_3 ( ) ; byte [ ] IDENT_19 = com . IDENT_1 . IDENT_2 . utils . IDENT_12 . METHOD_4 ( com . IDENT_1 . IDENT_2 . crypto . IDENT_13 . message . length ( ) ) ; com . IDENT_1 . IDENT_2 . utils . IDENT_12 . METHOD_1 ( com . IDENT_1 . IDENT_2 . crypto . IDENT_13 . message , IDENT_19 , 0 ) ; IDENT_18 . METHOD_5 ( IDENT_19 , 0 , IDENT_19 . length ) ; byte [ ] IDENT_20 = new byte [ IDENT_21 . IDENT_10 ] ; IDENT_18 . METHOD_6 ( IDENT_20 , 0 , IDENT_21 . IDENT_10 ) ; byte [ ] IDENT_22 = java . util . Arrays . METHOD_7 ( com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . METHOD_8 ( IDENT_20 ) , IDENT_16 . IDENT_23 ) ; byte [ ] IDENT_24 = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . METHOD_9 ( IDENT_11 , IDENT_22 , key ) ; byte [ ] IDENT_25 = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . METHOD_10 ( IDENT_11 , IDENT_22 , IDENT_24 ) ; byte [ ] IDENT_26 = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . address ( IDENT_11 , IDENT_25 ) ; byte [ ] METHOD_10 = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . METHOD_11 ( IDENT_11 , key ) ; byte [ ] address = com . IDENT_1 . IDENT_2 . crypto . IDENT_16 . address ( IDENT_11 , METHOD_10 ) ; "<AssertPlaceHolder>" ; } } address ( com . IDENT_1 . IDENT_2 . crypto . IDENT_27 , byte [ ] ) { if ( ( ( METHOD_11 . length ) == 0 ) || ( ( ( METHOD_11 . length ) OP_0 ( IDENT_21 . IDENT_10 ) ) != 0 ) ) { throw new java . lang . RuntimeException ( ( STRING_0 + ( METHOD_11 . length ) ) ) ; } final byte [ ] address = new byte [ IDENT_21 . IDENT_10 ] ; final com . IDENT_1 . IDENT_2 . crypto . IDENT_9 hash = com . IDENT_1 . IDENT_2 . crypto . IDENT_3 . create ( IDENT_11 ) ; hash . METHOD_5 ( METHOD_11 , 0 , METHOD_11 . length ) ; hash . METHOD_6 ( address , 0 , address . length ) ; return address ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( address , IDENT_26 ) ) 