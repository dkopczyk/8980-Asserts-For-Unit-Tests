METHOD_0 ( ) { java . util . List < java . lang . Integer > IDENT_0 = new java . util . ArrayList ( java . util . Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) ) ; com . IDENT_1 . IDENT_2 . data . io . IDENT_3 < com . IDENT_1 . IDENT_2 . data . io . IDENT_4 . IDENT_5 > IDENT_6 = new com . IDENT_1 . IDENT_2 . data . io . METHOD_1 ( codec ) ; try { for ( java . lang . Integer IDENT_7 : IDENT_0 ) { IDENT_6 . add ( new com . IDENT_1 . IDENT_2 . data . io . IDENT_4 . METHOD_2 ( IDENT_7 ) ) ; } IDENT_0 . add ( 2 , 100 ) ; IDENT_6 . add ( 2 , new com . IDENT_1 . IDENT_2 . data . io . IDENT_4 . METHOD_2 ( 100 ) ) ; int i = 0 ; for ( com . IDENT_1 . IDENT_2 . data . io . IDENT_4 . METHOD_2 IDENT_8 : IDENT_6 ) { "<AssertPlaceHolder>" ; } IDENT_6 . METHOD_3 ( ) ; } finally { if ( IDENT_6 != null ) { com . IDENT_1 . IDENT_9 . util . IDENT_10 . METHOD_4 ( IDENT_6 . METHOD_5 ( ) ) ; } } } get ( com . IDENT_1 . IDENT_2 . store . db . IDENT_11 ) { return IDENT_12 . getValue ( key ) ; }
org . junit . Assert . assertEquals ( new com . IDENT_1 . IDENT_2 . data . io . IDENT_4 . METHOD_2 ( IDENT_0 . get ( ( i ++ ) ) ) , IDENT_8 ) 