METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 . IDENT_1 IDENT_2 = new ch . cyberduck . core . IDENT_0 . METHOD_1 ( session ) . METHOD_2 ( cache ) ; final ch . cyberduck . core . IDENT_0 . IDENT_3 IDENT_4 = new ch . cyberduck . core . IDENT_0 . METHOD_3 ( session , IDENT_2 ) ; final java . util . concurrent . atomic . IDENT_5 IDENT_6 = new java . util . concurrent . atomic . METHOD_4 ( ) ; final java . util . List < ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . model . IDENT_8 > IDENT_9 = IDENT_4 . METHOD_5 ( new ch . cyberduck . core . METHOD_6 ( ) { @ ch . cyberduck . core . IDENT_0 . Override public ch . cyberduck . core . IDENT_10 METHOD_7 ( final ch . cyberduck . core . IDENT_11 IDENT_12 , final java . lang . String IDENT_13 , final java . lang . String IDENT_14 , final ch . cyberduck . core . IDENT_15 options ) throws ch . cyberduck . core . exception . IDENT_16 { if ( METHOD_7 . get ( ) ) { throw new ch . cyberduck . core . exception . METHOD_8 ( ) ; } METHOD_7 . set ( true ) ; return new ch . cyberduck . core . IDENT_17 . METHOD_9 ( STRING_0 ) ; } } , null ) ; "<AssertPlaceHolder>" ; } get ( ) { try { final ch . cyberduck . core . Path IDENT_18 = new ch . cyberduck . core . shared . METHOD_10 ( session ) . find ( ) ; if ( ! ( IDENT_18 . METHOD_11 ( ) ) ) { final ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . model . Node node = new ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . api . METHOD_12 ( session . METHOD_13 ( ) ) . METHOD_14 ( java . lang . Long . METHOD_15 ( IDENT_2 . METHOD_16 ( IDENT_18 , new ch . cyberduck . core . METHOD_17 ( ) ) ) , org . apache . commons . lang3 . StringUtils . IDENT_19 , null ) ; if ( null == ( node . METHOD_18 ( ) ) ) { ch . cyberduck . core . IDENT_0 . IDENT_20 . log . warn ( java . lang . String . format ( STRING_1 , IDENT_18 ) ) ; } else { return new ch . cyberduck . core . IDENT_0 . METHOD_19 ( node . METHOD_20 ( ) , ( ( node . METHOD_18 ( ) ) - ( node . METHOD_20 ( ) ) ) ) ; } } final ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . model . IDENT_21 info = new ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . api . METHOD_21 ( session . METHOD_13 ( ) ) . METHOD_22 ( org . apache . commons . lang3 . StringUtils . IDENT_19 , null ) ; return new ch . cyberduck . core . IDENT_0 . METHOD_19 ( info . METHOD_23 ( ) , ( ( info . METHOD_24 ( ) ) - ( info . METHOD_23 ( ) ) ) ) ; } catch ( ch . cyberduck . core . IDENT_0 . io . IDENT_7 . client . IDENT_22 e ) { throw new ch . cyberduck . core . IDENT_0 . METHOD_25 ( ) . map ( STRING_2 , e , new ch . cyberduck . core . Path ( java . lang . String . valueOf ( Path . IDENT_23 ) , java . util . IDENT_24 . of ( Path . Type . IDENT_25 , Path . Type . directory ) ) ) ; } }
org . junit . Assert . assertTrue ( METHOD_7 . get ( ) ) 