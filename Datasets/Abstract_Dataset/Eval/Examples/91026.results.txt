METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 . IDENT_1 host = new ch . cyberduck . core . IDENT_0 . METHOD_1 ( new ch . cyberduck . core . IDENT_0 . METHOD_2 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_2 ( ) . METHOD_3 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_4 ( java . lang . System . METHOD_5 ( ) . getProperty ( STRING_0 ) , java . lang . System . METHOD_5 ( ) . getProperty ( STRING_1 ) ) ) ; final java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_6 ( ) ; final ch . cyberduck . core . IDENT_0 . IDENT_4 session = new ch . cyberduck . core . IDENT_0 . METHOD_7 ( host , new ch . cyberduck . core . IDENT_5 . METHOD_8 ( ) { @ ch . cyberduck . core . IDENT_0 . Override public void verify ( final java . lang . String IDENT_6 , final java . security . IDENT_7 . IDENT_8 [ ] IDENT_9 , final java . lang . String IDENT_10 ) throws java . security . IDENT_7 . IDENT_11 { IDENT_3 . set ( true ) ; super . verify ( IDENT_6 , IDENT_9 , IDENT_10 ) ; } } , new ch . cyberduck . core . IDENT_5 . METHOD_9 ( host , new ch . cyberduck . core . IDENT_0 . METHOD_10 ( ) ) ) ; final ch . cyberduck . core . IDENT_0 . IDENT_12 c = new ch . cyberduck . core . IDENT_0 . METHOD_11 ( new ch . cyberduck . core . IDENT_0 . METHOD_12 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_13 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_14 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_15 ( ) ) ; c . connect ( session , ch . cyberduck . core . IDENT_0 . IDENT_13 . empty ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_16 ( ) ) ; "<AssertPlaceHolder>" ; session . close ( ) ; } get ( ) { try { final ch . cyberduck . core . Path IDENT_14 = new ch . cyberduck . core . shared . METHOD_17 ( session ) . find ( ) ; if ( ! ( IDENT_14 . METHOD_18 ( ) ) ) { final ch . cyberduck . core . IDENT_15 . io . IDENT_16 . client . model . Node node = new ch . cyberduck . core . IDENT_15 . io . IDENT_16 . client . api . METHOD_19 ( session . METHOD_20 ( ) ) . METHOD_21 ( java . lang . Long . METHOD_22 ( IDENT_17 . METHOD_23 ( IDENT_14 , new ch . cyberduck . core . METHOD_24 ( ) ) ) , org . apache . commons . lang3 . StringUtils . IDENT_18 , null ) ; if ( null == ( node . METHOD_25 ( ) ) ) { ch . cyberduck . core . IDENT_15 . IDENT_19 . log . warn ( java . lang . String . format ( STRING_2 , IDENT_14 ) ) ; } else { return new ch . cyberduck . core . IDENT_15 . METHOD_26 ( node . METHOD_27 ( ) , ( ( node . METHOD_25 ( ) ) - ( node . METHOD_27 ( ) ) ) ) ; } } final ch . cyberduck . core . IDENT_15 . io . IDENT_16 . client . model . IDENT_20 info = new ch . cyberduck . core . IDENT_15 . io . IDENT_16 . client . api . METHOD_28 ( session . METHOD_20 ( ) ) . METHOD_29 ( org . apache . commons . lang3 . StringUtils . IDENT_18 , null ) ; return new ch . cyberduck . core . IDENT_15 . METHOD_26 ( info . METHOD_30 ( ) , ( ( info . METHOD_31 ( ) ) - ( info . METHOD_30 ( ) ) ) ) ; } catch ( ch . cyberduck . core . IDENT_15 . io . IDENT_16 . client . IDENT_21 e ) { throw new ch . cyberduck . core . IDENT_15 . METHOD_32 ( ) . map ( STRING_3 , e , new ch . cyberduck . core . Path ( java . lang . String . valueOf ( Path . IDENT_22 ) , java . util . IDENT_23 . of ( Path . Type . IDENT_24 , Path . Type . directory ) ) ) ; } }
org . junit . Assert . assertTrue ( IDENT_3 . get ( ) ) 