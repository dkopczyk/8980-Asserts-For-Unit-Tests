METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 host = new ch . cyberduck . core . METHOD_1 ( new ch . cyberduck . core . IDENT_1 . METHOD_2 ( ) { @ ch . cyberduck . core . IDENT_1 . Override public ch . cyberduck . core . IDENT_2 METHOD_3 ( ) { return ch . cyberduck . core . IDENT_2 . http ; } } , java . lang . System . METHOD_4 ( ) . getProperty ( STRING_0 ) , java . lang . Integer . valueOf ( java . lang . System . METHOD_4 ( ) . getProperty ( STRING_1 ) ) , new ch . cyberduck . core . METHOD_5 ( java . lang . System . METHOD_4 ( ) . getProperty ( STRING_2 ) , java . lang . System . METHOD_4 ( ) . getProperty ( STRING_3 ) ) ) ; final ch . cyberduck . core . IDENT_1 . IDENT_3 session = new ch . cyberduck . core . IDENT_1 . METHOD_6 ( host , new ch . cyberduck . core . IDENT_4 . METHOD_7 ( ) , new ch . cyberduck . core . IDENT_4 . METHOD_8 ( ) ) ; session . METHOD_9 ( IDENT_5 . IDENT_6 , new ch . cyberduck . core . METHOD_10 ( ) , new ch . cyberduck . core . METHOD_11 ( ) ) ; session . METHOD_12 ( IDENT_5 . IDENT_6 , new ch . cyberduck . core . METHOD_11 ( ) , new ch . cyberduck . core . METHOD_13 ( ) ) ; final ch . cyberduck . core . Path container = new ch . cyberduck . core . Path ( STRING_4 , java . util . IDENT_7 . of ( Path . Type . directory , Path . Type . IDENT_8 ) ) ; final ch . cyberduck . core . Path IDENT_9 = new ch . cyberduck . core . IDENT_10 . METHOD_14 ( session , new ch . cyberduck . core . IDENT_1 . METHOD_15 ( session ) ) . METHOD_16 ( new ch . cyberduck . core . Path ( container , java . util . UUID . METHOD_17 ( ) . toString ( ) , java . util . IDENT_7 . of ( Path . Type . directory ) ) , null , new ch . cyberduck . core . IDENT_11 . METHOD_18 ( ) ) ; final ch . cyberduck . core . IDENT_12 < ch . cyberduck . core . Path > list = new ch . cyberduck . core . IDENT_10 . METHOD_19 ( session ) . list ( IDENT_9 , new ch . cyberduck . core . METHOD_20 ( ) ) ; "<AssertPlaceHolder>" ; new ch . cyberduck . core . IDENT_1 . METHOD_21 ( session ) . delete ( java . util . Collections . singletonList ( IDENT_9 ) , new ch . cyberduck . core . METHOD_11 ( ) , new ch . cyberduck . core . IDENT_13 . IDENT_14 . METHOD_22 ( ) ) ; session . close ( ) ; } isEmpty ( ) { return ( size ( ) ) == 0 ; }
org . junit . Assert . assertTrue ( list . isEmpty ( ) ) 