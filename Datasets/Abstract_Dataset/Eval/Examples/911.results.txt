METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . data . util . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . data . util . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( STRING_0 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_1 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_2 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_3 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_0 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_4 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_5 , 1 ) ; IDENT_3 . METHOD_2 ( STRING_6 , 1 ) ; java . util . Set < com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . IDENT_5 > IDENT_6 = com . google . common . collect . IDENT_7 . METHOD_3 ( IDENT_3 . METHOD_4 ( "/" ) ) ; java . util . Set < com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . IDENT_5 > expected = com . google . common . collect . IDENT_7 . METHOD_3 ( new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( STRING_3 , 1.0 ) , new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( STRING_5 , 2.0 ) , new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( STRING_2 , 1.0 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { java . util . List < com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 > IDENT_6 = new java . util . ArrayList ( ) ; if ( ( IDENT_8 . size ( ) ) > 0 ) { for ( com . IDENT_0 . IDENT_1 . data . util . IDENT_4 IDENT_9 : IDENT_8 . values ( ) ) { for ( com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 IDENT_10 : IDENT_9 . METHOD_4 ( IDENT_11 ) ) { if ( ( IDENT_12 . METHOD_6 ( ) . length ( ) ) > 0 ) { IDENT_6 . add ( new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( new java . lang . StringBuffer ( ) . append ( IDENT_12 . METHOD_6 ( ) ) . append ( IDENT_11 ) . append ( IDENT_10 . METHOD_6 ( ) ) . toString ( ) , IDENT_10 . getValue ( ) ) ) ; } else { IDENT_6 . add ( new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( new java . lang . StringBuffer ( ) . append ( IDENT_10 . METHOD_6 ( ) ) . toString ( ) , IDENT_10 . getValue ( ) ) ) ; } } } } else { if ( IDENT_13 ) { IDENT_6 . add ( new com . IDENT_0 . IDENT_1 . data . util . IDENT_4 . METHOD_5 ( ( ( IDENT_12 . METHOD_6 ( ) ) + ( IDENT_13 ? IDENT_11 : "" ) ) , IDENT_12 . getValue ( ) ) ) ; } else { IDENT_6 . add ( IDENT_12 ) ; } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( expected , IDENT_6 ) 