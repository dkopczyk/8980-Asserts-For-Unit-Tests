METHOD_0 ( ) { com . itextpdf . kernel . pdf . IDENT_0 doc = new com . itextpdf . kernel . pdf . METHOD_1 ( new com . itextpdf . kernel . pdf . METHOD_2 ( new com . itextpdf . io . source . ByteArrayOutputStream ( ) ) ) ; com . itextpdf . kernel . pdf . IDENT_1 array = new com . itextpdf . kernel . pdf . METHOD_3 ( ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 1 ) . METHOD_5 ( doc ) . METHOD_6 ( ) ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 2 ) . METHOD_5 ( doc ) . METHOD_6 ( ) ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 3 ) . METHOD_5 ( doc ) ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 4 ) . METHOD_5 ( doc ) ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 5 ) ) ; array . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 6 ) ) ; com . itextpdf . kernel . pdf . METHOD_3 IDENT_2 = new com . itextpdf . kernel . pdf . METHOD_3 ( ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 1 ) . METHOD_5 ( doc ) . METHOD_6 ( ) ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 2 ) . METHOD_5 ( doc ) . METHOD_6 ( ) ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 3 ) . METHOD_5 ( doc ) ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 4 ) . METHOD_5 ( doc ) ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 5 ) ) ; IDENT_2 . add ( new com . itextpdf . kernel . pdf . METHOD_4 ( 6 ) ) ; for ( int i = 0 ; i < ( IDENT_2 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } indexOf ( com . itextpdf . kernel . pdf . IDENT_3 ) { if ( o == null ) return list . indexOf ( null ) ; int index = 0 ; for ( com . itextpdf . kernel . pdf . IDENT_3 IDENT_4 : this ) { if ( com . itextpdf . kernel . pdf . IDENT_3 . METHOD_7 ( o , IDENT_4 ) ) { return index ; } index ++ ; } return - 1 ; }
org . junit . Assert . assertEquals ( i , array . indexOf ( IDENT_2 . get ( i ) ) ) 