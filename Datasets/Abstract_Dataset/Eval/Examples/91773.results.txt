METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 } ; org . apache . commons . codec . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . commons . codec . IDENT_1 . METHOD_1 ( ) ; for ( java . lang . String str : IDENT_0 ) { byte [ ] IDENT_4 = com . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_2 ( str ) ; java . lang . String IDENT_8 = IDENT_3 . METHOD_3 ( IDENT_4 ) ; byte [ ] result = com . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_2 ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( java . lang . String ) { int IDENT_9 = ( ( ( str . length ( ) ) * 5 ) + 7 ) / 8 ; byte [ ] result = new byte [ IDENT_9 ] ; int IDENT_10 = 0 ; int IDENT_11 = 0 ; int IDENT_12 = 0 ; for ( int i = 0 ; i < ( str . length ( ) ) ; i ++ ) { char ch = str . charAt ( i ) ; int val ; if ( ( ch >= STRING_9 ) && ( ch <= STRING_10 ) ) { val = ch - STRING_9 ; } else if ( ( ch >= STRING_11 ) && ( ch <= STRING_12 ) ) { val = ch - STRING_11 ; } else if ( ( ch >= STRING_13 ) && ( ch <= STRING_14 ) ) { val = INT_0 + ( ch - STRING_13 ) ; } else if ( ch == STRING_15 ) { IDENT_11 = 0 ; break ; } else { throw new java . lang . IllegalArgumentException ( ( STRING_16 + ch ) ) ; } switch ( IDENT_11 ) { case 0 : IDENT_12 = ( val & INT_1 ) << 3 ; IDENT_11 = 1 ; break ; case 1 : IDENT_12 OP_0 ( val & INT_2 ) > > 2 ; result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; IDENT_12 = ( val & 3 ) << 6 ; IDENT_11 = 2 ; break ; case 2 : IDENT_12 OP_0 ( val & INT_1 ) << 1 ; IDENT_11 = 3 ; break ; case 3 : IDENT_12 OP_0 ( val & 16 ) > > 4 ; result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; IDENT_12 = ( val & 15 ) << 4 ; IDENT_11 = 4 ; break ; case 4 : IDENT_12 OP_0 ( val & INT_3 ) > > 1 ; result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; IDENT_12 = ( val & 1 ) << 7 ; IDENT_11 = 5 ; break ; case 5 : IDENT_12 OP_0 ( val & INT_1 ) << 2 ; IDENT_11 = 6 ; break ; case 6 : IDENT_12 OP_0 ( val & INT_4 ) > > 3 ; result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; IDENT_12 = ( val & 7 ) << 5 ; IDENT_11 = 7 ; break ; case 7 : IDENT_12 OP_0 val & INT_1 ; result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; IDENT_11 = 0 ; break ; } } if ( IDENT_11 != 0 ) { result [ ( IDENT_10 ++ ) ] = ( ( byte ) ( IDENT_12 ) ) ; } if ( IDENT_10 != ( result . length ) ) { result = java . util . Arrays . METHOD_4 ( result , IDENT_10 ) ; } return result ; }
org . junit . Assert . assertArrayEquals ( IDENT_4 , result ) 