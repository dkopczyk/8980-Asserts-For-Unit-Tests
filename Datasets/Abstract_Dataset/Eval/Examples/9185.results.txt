METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . mockito . Mockito . mock ( com . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; org . mockito . Mockito . METHOD_1 ( ) . when ( IDENT_3 ) . METHOD_2 ( IDENT_4 ) ; java . util . HashSet < com . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_5 = new java . util . HashSet ( ) ; IDENT_5 . add ( IDENT_3 ) ; METHOD_3 ( IDENT_5 ) ; org . mockito . Mockito . METHOD_1 ( ) . when ( IDENT_6 ) . METHOD_4 ( IDENT_4 , IDENT_3 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 = IDENT_6 . METHOD_5 ( IDENT_4 , IDENT_8 ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_6 , times ( 0 ) ) . METHOD_4 ( IDENT_4 , IDENT_3 ) ; } METHOD_5 ( com . IDENT_0 . IDENT_1 . IDENT_9 , java . lang . String ) { java . util . Set < com . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_5 = com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 ( conn , path ) ; if ( org . apache . commons . collections . IDENT_10 . isEmpty ( IDENT_5 ) ) { com . cloud . IDENT_11 . IDENT_12 . resource . IDENT_13 . IDENT_14 . debug ( ( STRING_0 + path ) ) ; return null ; } if ( ( IDENT_5 . size ( ) ) > 1 ) { throw new com . cloud . utils . exception . METHOD_7 ( ( STRING_1 + path ) ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 = IDENT_5 . iterator ( ) . next ( ) ; java . lang . String IDENT_15 = IDENT_7 . METHOD_8 ( conn ) ; com . cloud . IDENT_11 . IDENT_12 . resource . IDENT_13 . IDENT_14 . debug ( java . lang . String . format ( STRING_2 , IDENT_15 ) ) ; java . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_16 . IDENT_17 > IDENT_18 = IDENT_7 . METHOD_9 ( conn ) ; if ( org . apache . commons . collections . IDENT_19 . isEmpty ( IDENT_18 ) ) { com . cloud . IDENT_11 . IDENT_12 . resource . IDENT_13 . IDENT_14 . debug ( java . lang . String . format ( STRING_3 , IDENT_15 ) ) ; } try { IDENT_7 . METHOD_2 ( conn ) ; } catch ( com . IDENT_0 . IDENT_1 . IDENT_16 . IDENT_20 | org . apache . IDENT_21 . IDENT_22 e ) { com . cloud . IDENT_11 . IDENT_12 . resource . IDENT_13 . IDENT_14 . debug ( java . lang . String . format ( STRING_4 , IDENT_15 ) ) ; METHOD_4 ( conn , IDENT_7 ) ; return null ; } com . cloud . IDENT_11 . IDENT_12 . resource . IDENT_13 . IDENT_14 . debug ( java . lang . String . format ( STRING_5 , IDENT_15 ) ) ; return IDENT_7 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_7 ) 