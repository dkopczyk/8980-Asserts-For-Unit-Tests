METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; java . util . function . IDENT_2 < java . lang . Boolean > IDENT_3 = ( ) -> { if ( ( IDENT_1 . METHOD_2 ( ) ) < 3 ) throw new ca . uhn . fhir . jpa . IDENT_4 . IDENT_5 . METHOD_3 ( STRING_0 ) ; return true ; } ; ca . uhn . fhir . jpa . IDENT_4 . IDENT_5 . IDENT_6 < java . lang . Boolean > IDENT_7 = new ca . uhn . fhir . jpa . IDENT_4 . IDENT_5 . METHOD_4 ( IDENT_3 , 1 ) ; IDENT_8 . expect ( ca . uhn . fhir . jpa . IDENT_4 . IDENT_5 . IDENT_9 . METHOD_3 . class ) ; IDENT_8 . METHOD_5 ( STRING_0 ) ; IDENT_7 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return IDENT_10 . get ( ) ; }
org . junit . Assert . assertEquals ( 5 , IDENT_1 . get ( ) ) 