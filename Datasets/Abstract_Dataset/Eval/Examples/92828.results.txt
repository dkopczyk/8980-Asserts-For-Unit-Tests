METHOD_0 ( ) { java . io . InputStream IDENT_0 = mock ( java . io . InputStream . class ) ; java . io . IDENT_1 IDENT_2 = mock ( java . io . IDENT_1 . class ) ; java . io . InputStream IDENT_3 = mock ( java . io . IDENT_4 . class ) ; uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < java . lang . Object > IDENT_7 = new uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < java . lang . Object > ( java . util . Arrays . < java . lang . Object > asList ( IDENT_0 , IDENT_2 , IDENT_3 ) ) ; uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < java . io . InputStream > IDENT_8 = strategy . METHOD_1 ( IDENT_7 , java . io . InputStream . class ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( uk . co . IDENT_5 . mockito . collections . util . IDENT_6 , java . lang . Class ) { uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < T > IDENT_9 = new uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < T > ( ) ; for ( java . lang . Object object : IDENT_7 ) { if ( IDENT_10 . METHOD_2 ( object . getClass ( ) ) ) { IDENT_9 . add ( ( ( T ) ( object ) ) ) ; } } return IDENT_9 ; }
org . junit . Assert . assertTrue ( IDENT_8 . equals ( new uk . co . IDENT_5 . mockito . collections . util . IDENT_6 < java . io . InputStream > ( java . util . Arrays . < java . io . InputStream > asList ( IDENT_0 , IDENT_3 ) ) ) ) 