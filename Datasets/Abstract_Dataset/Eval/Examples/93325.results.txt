METHOD_0 ( ) { int IDENT_0 = ( org . glassfish . IDENT_1 . http . io . IDENT_2 . IDENT_3 ) / 4 ; org . glassfish . IDENT_1 . http . io . IDENT_4 IDENT_5 = new org . glassfish . IDENT_1 . http . io . METHOD_1 ( ) ; byte [ ] array = METHOD_2 ( new byte [ org . glassfish . IDENT_1 . http . io . IDENT_2 . IDENT_3 ] ) ; IDENT_5 . METHOD_3 ( array , 0 , array . length ) ; org . glassfish . IDENT_1 . IDENT_6 IDENT_7 = IDENT_5 . split ( IDENT_0 ) ; METHOD_4 ( array ) ; org . glassfish . IDENT_1 . IDENT_8 . IDENT_9 cb = org . glassfish . IDENT_1 . IDENT_8 . IDENT_9 . METHOD_5 ( ) ; cb . append ( IDENT_5 ) ; cb . append ( IDENT_7 ) ; METHOD_6 ( cb , STRING_0 ) ; int offset = INT_0 ; IDENT_5 = new org . glassfish . IDENT_1 . http . io . METHOD_1 ( ) ; array = METHOD_2 ( new byte [ org . glassfish . IDENT_1 . http . io . IDENT_2 . IDENT_3 ] ) ; IDENT_5 . METHOD_3 ( array , offset , ( ( array . length ) - offset ) ) ; IDENT_7 = IDENT_5 . split ( IDENT_0 ) ; METHOD_4 ( array ) ; cb = org . glassfish . IDENT_1 . IDENT_8 . IDENT_9 . METHOD_5 ( ) ; cb . append ( IDENT_5 ) ; cb . append ( IDENT_7 ) ; "<AssertPlaceHolder>" ; METHOD_6 ( cb , ( STRING_0 + offset ) ) ; } METHOD_7 ( ) { return ( len ) > ( Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( ( int ) ( len ) ) ; }
org . junit . Assert . assertEquals ( ( ( org . glassfish . IDENT_1 . http . io . IDENT_2 . IDENT_3 ) - offset ) , cb . METHOD_7 ( ) ) 