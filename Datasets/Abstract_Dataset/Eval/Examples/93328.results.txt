METHOD_0 ( ) { int len = INT_0 * INT_1 ; final java . lang . StringBuilder b = new java . lang . StringBuilder ( len ) ; for ( int i = 0 , IDENT_0 = STRING_0 ; i < len ; i ++ , IDENT_0 ++ ) { b . append ( ( ( char ) ( IDENT_0 ) ) ) ; if ( IDENT_0 == STRING_1 ) { IDENT_0 = STRING_0 - 1 ; } } org . glassfish . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 reader = new org . glassfish . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) { @ org . glassfish . IDENT_1 . IDENT_2 . Override public boolean METHOD_2 ( org . glassfish . IDENT_1 . http . server . IDENT_5 request ) throws java . io . IOException { java . io . IDENT_6 in = request . METHOD_3 ( ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; char [ ] buf = new char [ INT_2 ] ; for ( int i = in . read ( buf ) ; i != ( - 1 ) ; i = in . read ( buf ) ) { sb . append ( new java . lang . String ( buf , 0 , i ) ) ; } "<AssertPlaceHolder>" ; in . close ( ) ; return true ; } } ; METHOD_4 ( METHOD_5 ( STRING_2 , b . toString ( ) ) , reader , INT_0 ) ; } toString ( ) { final java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( ( len ) > 0 ) { final org . glassfish . IDENT_1 . IDENT_7 buffer = IDENT_8 . METHOD_6 ( ) ; final int start = ( buffer . position ( ) ) + ( offset ) ; sb . append ( buffer . METHOD_7 ( null , start , ( start + ( len ) ) ) ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( sb . toString ( ) , b . toString ( ) ) 