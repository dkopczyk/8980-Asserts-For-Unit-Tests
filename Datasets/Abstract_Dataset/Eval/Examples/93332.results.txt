METHOD_0 ( ) { final byte [ ] IDENT_0 = new byte [ ] { INT_0 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 , 0 } ; METHOD_1 ( new org . glassfish . IDENT_1 . http . server . METHOD_2 ( ) { @ org . glassfish . IDENT_1 . http . server . Override public void service ( org . glassfish . IDENT_1 . http . server . IDENT_2 request , org . glassfish . IDENT_1 . http . server . Response response ) throws org . glassfish . IDENT_1 . http . server . Exception { try { request . METHOD_3 ( org . glassfish . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_4 ( request . METHOD_5 ( ) . METHOD_6 ( ) , IDENT_0 ) ) ; response . METHOD_7 ( ) . write ( STRING_0 ) ; return ; } catch ( java . lang . IllegalStateException IDENT_5 ) { } final java . io . InputStream is = request . METHOD_8 ( ) ; while ( ( is . read ( ) ) != ( - 1 ) ) ; request . METHOD_3 ( org . glassfish . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_4 ( request . METHOD_5 ( ) . METHOD_6 ( ) , IDENT_0 ) ) ; byte [ ] buffer = new byte [ ( IDENT_0 . length ) * 2 ] ; int len = 0 ; while ( true ) { int IDENT_6 = is . read ( buffer , len , ( ( buffer . length ) - len ) ) ; if ( IDENT_6 == ( - 1 ) ) { break ; } len += IDENT_6 ; } response . METHOD_9 ( ) . write ( buffer , 0 , len ) ; } } ) ; final java . util . concurrent . IDENT_7 < org . glassfish . IDENT_1 . http . IDENT_8 > IDENT_9 = new java . util . concurrent . IDENT_10 < org . glassfish . IDENT_1 . http . IDENT_8 > ( ) ; final org . glassfish . IDENT_1 . IDENT_11 client = METHOD_10 ( IDENT_9 ) ; try { org . glassfish . IDENT_1 . http . IDENT_12 request = org . glassfish . IDENT_1 . http . IDENT_12 . builder ( ) . method ( Method . IDENT_13 ) . uri ( "/" ) . protocol ( IDENT_14 . IDENT_15 ) . header ( IDENT_16 . IDENT_17 , ( STRING_1 + ( org . glassfish . IDENT_1 . http . server . IDENT_18 . IDENT_19 ) ) ) . METHOD_11 ( 10 ) . build ( ) ; client . write ( request ) ; java . lang . Thread . sleep ( 20 ) ; final byte [ ] payload = new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; final org . glassfish . IDENT_1 . IDENT_3 . IDENT_20 IDENT_21 = client . METHOD_6 ( ) ; org . glassfish . IDENT_1 . http . IDENT_8 IDENT_22 = org . glassfish . IDENT_1 . http . IDENT_8 . builder ( request ) . content ( org . glassfish . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_21 , payload , 0 , 5 ) ) . build ( ) ; org . glassfish . IDENT_1 . http . IDENT_8 IDENT_23 = org . glassfish . IDENT_1 . http . IDENT_8 . builder ( request ) . content ( org . glassfish . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_21 , payload , 5 , 5 ) ) . build ( ) ; client . write ( IDENT_22 ) ; java . lang . Thread . sleep ( 20 ) ; client . write ( IDENT_23 ) ; final org . glassfish . IDENT_1 . http . IDENT_8 result = IDENT_9 . METHOD_12 ( 10 , TimeUnit . IDENT_24 ) ; final org . glassfish . IDENT_1 . IDENT_25 IDENT_26 = result . METHOD_13 ( ) ; final byte [ ] IDENT_27 = new byte [ IDENT_26 . METHOD_14 ( ) ] ; IDENT_26 . get ( IDENT_27 ) ; "<AssertPlaceHolder>" ; } finally { if ( client != null ) { client . METHOD_15 ( ) ; } } } get ( org . glassfish . IDENT_1 . http . IDENT_28 ) { final org . glassfish . IDENT_1 . impl . IDENT_29 < org . glassfish . IDENT_1 . http . IDENT_28 > IDENT_30 = org . glassfish . IDENT_1 . impl . IDENT_31 . create ( ) ; IDENT_32 = IDENT_30 ; connection . write ( request , new org . glassfish . IDENT_1 . METHOD_16 ( ) { @ org . glassfish . IDENT_1 . servlet . IDENT_33 . Override public void METHOD_17 ( java . lang . Throwable IDENT_34 ) { IDENT_30 . METHOD_18 ( IDENT_34 ) ; } } ) ; connection . METHOD_19 ( new org . glassfish . IDENT_1 . METHOD_20 ( ) { @ org . glassfish . IDENT_1 . servlet . IDENT_33 . Override public void METHOD_21 ( org . glassfish . IDENT_1 . IDENT_35 IDENT_36 , org . glassfish . IDENT_1 . IDENT_37 type ) throws java . io . IOException { IDENT_30 . METHOD_18 ( new java . io . IOException ( ) ) ; } } ) ; return IDENT_30 ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , IDENT_27 ) 