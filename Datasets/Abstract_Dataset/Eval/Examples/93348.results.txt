METHOD_0 ( ) { java . lang . IDENT_0 IDENT_1 = getClass ( ) . METHOD_1 ( ) ; java . net . URL IDENT_2 = IDENT_1 . getResource ( STRING_0 ) ; org . glassfish . IDENT_3 . api . IDENT_4 IDENT_5 = org . glassfish . IDENT_3 . IDENT_6 . test . IDENT_7 . IDENT_8 . METHOD_2 ( ) ; org . glassfish . IDENT_3 . xml . api . IDENT_9 IDENT_10 = IDENT_5 . METHOD_3 ( org . glassfish . IDENT_3 . xml . api . IDENT_9 . class , IDENT_11 . IDENT_12 ) ; "<AssertPlaceHolder>" ; byte [ ] IDENT_13 ; java . io . InputStream is = IDENT_2 . METHOD_4 ( ) ; try { IDENT_13 = org . glassfish . IDENT_3 . IDENT_6 . test . IDENT_7 . IDENT_8 . METHOD_5 ( is ) ; } finally { is . close ( ) ; } for ( int IDENT_14 = 0 ; IDENT_14 < ( IDENT_13 . length ) ; IDENT_14 ++ ) { IDENT_13 [ IDENT_14 ] = 0 ; } java . io . ByteArrayInputStream IDENT_15 = new java . io . ByteArrayInputStream ( IDENT_13 ) ; try { try { IDENT_10 . METHOD_6 ( IDENT_15 , org . glassfish . IDENT_3 . IDENT_6 . test . beans . IDENT_16 . class , false , false , org . glassfish . IDENT_3 . IDENT_6 . test . IDENT_17 . IDENT_18 . METHOD_7 ( false ) ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( org . glassfish . IDENT_3 . api . IDENT_19 me ) { org . glassfish . IDENT_3 . IDENT_6 . test . IDENT_17 . IDENT_18 . METHOD_8 ( me ) ; } } finally { IDENT_15 . close ( ) ; } } METHOD_3 ( java . lang . reflect . Type , java . lang . annotation . IDENT_20 [ ] ) { return METHOD_9 ( IDENT_21 , null , null , IDENT_22 ) ; }
org . junit . Assert . assertNotNull ( IDENT_10 ) 