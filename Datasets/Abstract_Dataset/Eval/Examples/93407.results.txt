test ( ) { com . sun . mail . test . IDENT_0 server = null ; try { final com . sun . mail . IDENT_1 . IDENT_2 handler = new com . sun . mail . IDENT_1 . IDENT_3 . METHOD_0 ( ) ; server = new com . sun . mail . test . METHOD_1 ( handler ) ; server . start ( ) ; final java . util . Properties properties = new java . util . Properties ( ) ; properties . setProperty ( STRING_0 , STRING_1 ) ; properties . setProperty ( STRING_2 , ( "" + ( server . METHOD_2 ( ) ) ) ) ; final javax . mail . IDENT_4 session = javax . mail . IDENT_4 . getInstance ( properties ) ; final java . util . concurrent . IDENT_5 IDENT_6 = new java . util . concurrent . METHOD_3 ( 1 ) ; final javax . mail . IDENT_7 store = session . METHOD_4 ( STRING_3 ) ; store . METHOD_5 ( new javax . mail . event . METHOD_6 ( ) { @ com . sun . mail . IDENT_1 . Override public void METHOD_7 ( javax . mail . event . IDENT_8 e ) { java . lang . String s ; if ( ( e . METHOD_8 ( ) ) == ( javax . mail . event . IDENT_8 . IDENT_9 ) ) { s = STRING_4 ; IDENT_10 = true ; IDENT_6 . METHOD_9 ( ) ; } else s = STRING_5 ; } } ) ; try { store . connect ( "test" , "test" ) ; IDENT_6 . METHOD_10 ( 5 , TimeUnit . IDENT_11 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception ex ) { System . out . println ( ex ) ; org . junit . Assert . fail ( ex . toString ( ) ) ; } finally { store . close ( ) ; } } catch ( final java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } finally { if ( server != null ) { server . METHOD_11 ( ) ; } } } connect ( com . sun . mail . util . IDENT_12 , int ) { IDENT_13 . connect ( remote , IDENT_14 ) ; }
org . junit . Assert . assertTrue ( IDENT_10 ) 