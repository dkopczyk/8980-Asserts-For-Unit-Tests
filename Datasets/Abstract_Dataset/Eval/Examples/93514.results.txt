METHOD_0 ( ) { com . sun . IDENT_0 . IDENT_1 IDENT_2 = new com . sun . IDENT_0 . METHOD_1 ( ) ; com . sun . IDENT_0 . IDENT_3 c = IDENT_2 . METHOD_2 ( STRING_0 ) . METHOD_3 ( 0 , STRING_1 ) ; com . sun . IDENT_0 . IDENT_4 IDENT_5 = c . field ( IDENT_6 . IDENT_7 , java . lang . String . class , STRING_2 ) ; c . METHOD_4 ( ) . METHOD_5 ( com . sun . IDENT_0 . IDENT_8 . METHOD_6 ( ) . ref ( IDENT_5 ) , com . sun . IDENT_0 . IDENT_8 . METHOD_7 ( STRING_3 ) ) ; final java . io . ByteArrayOutputStream IDENT_9 = new java . io . ByteArrayOutputStream ( ) ; final java . lang . String IDENT_10 = STRING_4 ; IDENT_2 . build ( new com . sun . IDENT_0 . writer . METHOD_8 ( IDENT_9 , IDENT_10 ) ) ; IDENT_9 . close ( ) ; final java . io . ByteArrayInputStream IDENT_11 = new java . io . ByteArrayInputStream ( IDENT_9 . toByteArray ( ) ) ; IDENT_12 . parser . ast . IDENT_13 IDENT_14 = IDENT_12 . parser . IDENT_15 . parse ( IDENT_11 , IDENT_10 ) ; IDENT_12 . parser . ast . body . IDENT_16 IDENT_17 = IDENT_14 . METHOD_9 ( ) . get ( 0 ) ; IDENT_12 . parser . ast . body . IDENT_18 IDENT_19 = ( ( IDENT_12 . parser . ast . body . IDENT_18 ) ( IDENT_17 ) ) ; final IDENT_12 . parser . ast . body . IDENT_20 IDENT_21 = ( ( IDENT_12 . parser . ast . body . IDENT_20 ) ( IDENT_19 . METHOD_10 ( ) . get ( 1 ) ) ) ; "<AssertPlaceHolder>" ; } parse ( com . sun . IDENT_0 . METHOD_1 , java . lang . String ) { if ( IDENT_22 . equals ( STRING_5 ) ) return IDENT_23 . IDENT_24 ; else if ( IDENT_22 . equals ( STRING_6 ) ) return IDENT_23 . IDENT_25 ; else if ( IDENT_22 . equals ( STRING_7 ) ) return IDENT_23 . IDENT_26 ; else if ( IDENT_22 . equals ( STRING_8 ) ) return IDENT_23 . IDENT_27 ; else if ( IDENT_22 . equals ( STRING_9 ) ) return IDENT_23 . IDENT_28 ; else if ( IDENT_22 . equals ( STRING_10 ) ) return IDENT_23 . IDENT_29 ; else if ( IDENT_22 . equals ( STRING_11 ) ) return IDENT_23 . IDENT_30 ; else if ( IDENT_22 . equals ( STRING_12 ) ) return IDENT_23 . IDENT_31 ; else if ( IDENT_22 . equals ( STRING_13 ) ) return IDENT_23 . IDENT_32 ; else throw new java . lang . IllegalArgumentException ( ( STRING_14 + IDENT_22 ) ) ; }
org . junit . Assert . assertNotNull ( IDENT_21 ) 