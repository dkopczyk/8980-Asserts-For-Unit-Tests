METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . model . impl . IDENT_2 IDENT_3 = new de . IDENT_0 . IDENT_1 . model . impl . METHOD_1 ( de . IDENT_0 . IDENT_1 . model . IDENT_4 . IDENT_5 , 0 , de . IDENT_0 . IDENT_1 . model . IDENT_6 . IDENT_7 ) ; IDENT_3 . METHOD_2 ( ( 3 * ( IDENT_8 . IDENT_9 ) ) ) ; de . IDENT_0 . IDENT_1 . model . impl . METHOD_1 IDENT_10 = new de . IDENT_0 . IDENT_1 . model . impl . METHOD_1 ( de . IDENT_0 . IDENT_1 . model . IDENT_4 . IDENT_5 , 0 , de . IDENT_0 . IDENT_1 . model . IDENT_6 . IDENT_11 ) ; IDENT_10 . METHOD_2 ( ( 2 * ( IDENT_8 . IDENT_9 ) ) ) ; de . IDENT_0 . IDENT_1 . model . impl . METHOD_1 IDENT_12 = new de . IDENT_0 . IDENT_1 . model . impl . METHOD_1 ( de . IDENT_0 . IDENT_1 . model . IDENT_4 . IDENT_5 , 0 , de . IDENT_0 . IDENT_1 . model . IDENT_6 . IDENT_7 ) ; IDENT_12 . METHOD_2 ( ( 3 * ( IDENT_8 . IDENT_9 ) ) ) ; java . util . List < de . IDENT_0 . IDENT_1 . model . IDENT_13 > IDENT_14 = java . util . Arrays . asList ( IDENT_3 , IDENT_10 , IDENT_12 ) ; int IDENT_15 = 12 ; int IDENT_16 = de . IDENT_0 . IDENT_1 . model . impl . IDENT_17 . IDENT_18 . METHOD_3 ( IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . IDENT_19 ) { int IDENT_20 = 1 ; for ( de . IDENT_0 . IDENT_1 . model . IDENT_13 IDENT_21 : IDENT_14 ) { int IDENT_22 = IDENT_21 . METHOD_4 ( ) ; IDENT_20 = java . lang . Math . max ( IDENT_20 , IDENT_22 ) ; } return IDENT_20 ; }
org . junit . Assert . assertEquals ( IDENT_15 , IDENT_16 ) 