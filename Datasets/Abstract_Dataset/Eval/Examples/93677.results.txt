METHOD_0 ( ) { System . out . println ( "" ) ; System . out . println ( STRING_0 ) ; System . out . println ( STRING_1 ) ; int [ ] list = new int [ ( IDENT_0 ) * INT_0 ] ; int IDENT_1 = 1 ; for ( int i = 0 ; i < ( ( IDENT_0 ) * INT_0 ) ; i ++ ) { IDENT_1 += i ; list [ i ] = IDENT_1 ; } java . util . Arrays . METHOD_1 ( list ) ; final com . IDENT_2 . IDENT_3 . impl . IDENT_4 IDENT_5 = new com . IDENT_2 . IDENT_3 . impl . METHOD_2 ( ) ; int IDENT_6 = 0 ; for ( java . lang . Integer c : list ) { IDENT_6 ++ ; IDENT_5 . METHOD_3 ( c ) ; } System . out . println ( ( STRING_2 + ( IDENT_5 . size ( ) ) ) ) ; java . lang . Thread [ ] arr = new java . lang . Thread [ 5 ] ; for ( int i = 0 ; i < ( arr . length ) ; i ++ ) { java . lang . Thread t = new java . lang . Thread ( ) { public void run ( ) { com . IDENT_2 . IDENT_3 . api . IDENT_7 IDENT_8 = IDENT_5 . iterator ( ) ; try { int IDENT_9 ; while ( ( IDENT_9 = IDENT_8 . METHOD_4 ( ) ) != ( org . apache . lucene . search . IDENT_10 . IDENT_11 ) ) { "<AssertPlaceHolder>" ; } } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } } ; arr [ i ] = t ; t . start ( ) ; } for ( int i = 0 ; i < ( arr . length ) ; i ++ ) { arr [ i ] . join ( ) ; } System . out . println ( STRING_3 ) ; } find ( int ) { org . apache . lucene . search . IDENT_10 IDENT_12 = new com . IDENT_2 . IDENT_3 . impl . IDENT_13 . METHOD_5 ( ) ; try { int IDENT_9 = IDENT_12 . METHOD_6 ( val ) ; if ( ( IDENT_9 != ( org . apache . lucene . search . IDENT_10 . IDENT_11 ) ) && ( IDENT_9 == val ) ) return true ; else return false ; } catch ( java . io . IOException e ) { return false ; } }
org . junit . Assert . assertEquals ( true , IDENT_5 . find ( IDENT_9 ) ) 