METHOD_0 ( ) { org . springframework . batch . IDENT_0 . dao . IDENT_1 IDENT_2 = new org . springframework . batch . IDENT_0 . dao . METHOD_1 ( IDENT_3 ) ; IDENT_2 . METHOD_2 ( new org . springframework . batch . IDENT_0 . dao . Date ( 0 ) ) ; org . springframework . batch . IDENT_0 . dao . METHOD_1 IDENT_4 = new org . springframework . batch . IDENT_0 . dao . METHOD_1 ( IDENT_3 ) ; IDENT_4 . METHOD_2 ( new org . springframework . batch . IDENT_0 . dao . Date ( 1 ) ) ; dao . METHOD_3 ( IDENT_2 ) ; dao . METHOD_3 ( IDENT_4 ) ; org . springframework . batch . IDENT_0 . dao . METHOD_1 IDENT_5 = dao . METHOD_4 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . springframework . batch . core . IDENT_6 ) { java . lang . Long id = IDENT_3 . getId ( ) ; org . springframework . batch . IDENT_0 . dao . IDENT_7 IDENT_8 = METHOD_5 ( ) . find ( org . springframework . batch . IDENT_0 . dao . IDENT_9 . METHOD_6 ( id ) ) . METHOD_7 ( new org . springframework . batch . IDENT_0 . dao . METHOD_8 ( org . springframework . batch . IDENT_0 . dao . IDENT_10 . IDENT_11 , ( - 1 ) ) ) . METHOD_9 ( 1 ) ; if ( ! ( IDENT_8 . hasNext ( ) ) ) { return null ; } else { org . springframework . batch . IDENT_0 . dao . IDENT_12 IDENT_13 = IDENT_8 . next ( ) ; if ( IDENT_8 . hasNext ( ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } return METHOD_10 ( IDENT_3 , IDENT_13 ) ; } }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_5 ) 