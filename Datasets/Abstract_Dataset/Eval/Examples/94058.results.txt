METHOD_0 ( ) { METHOD_1 ( ) ; METHOD_2 ( ) ; io . IDENT_0 . IDENT_1 . management . IDENT_2 management = ( ( io . IDENT_0 . IDENT_1 . management . IDENT_2 ) ( IDENT_3 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( boolean ) { java . util . List < io . IDENT_0 . IDENT_1 . management . IDENT_4 > IDENT_5 = new java . util . METHOD_4 ( ) ; java . io . File [ ] IDENT_6 = IDENT_7 . METHOD_5 ( new java . io . METHOD_6 ( ) { @ io . IDENT_0 . IDENT_1 . management . impl . Override public boolean accept ( java . io . File IDENT_8 , java . lang . String name ) { return ( name . METHOD_7 ( STRING_0 ) ) && ( new java . io . File ( IDENT_8 , name ) . METHOD_8 ( ) ) ; } } ) ; try { for ( java . io . File IDENT_9 : IDENT_6 ) { io . IDENT_0 . IDENT_1 . management . IDENT_4 p = METHOD_9 ( IDENT_9 , IDENT_10 ) ; IDENT_5 . add ( p ) ; } } catch ( java . io . IOException e ) { throw new io . IDENT_0 . IDENT_1 . management . METHOD_10 ( e . getMessage ( ) , e ) ; } return IDENT_5 ; }
org . junit . Assert . assertThat ( management . METHOD_3 ( false ) . size ( ) , org . hamcrest . CoreMatchers . equalTo ( 0 ) ) 