METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String key = STRING_1 ; final java . lang . String expected = STRING_2 ; java . util . Properties properties = new java . util . Properties ( ) ; properties . setProperty ( STRING_3 , STRING_4 ) ; properties . setProperty ( key , expected ) ; final java . lang . String original = ( STRING_5 + IDENT_0 ) + STRING_6 ; final java . lang . String actual = org . IDENT_1 . common . lang . IDENT_2 . METHOD_1 ( original , new org . IDENT_1 . common . property . METHOD_2 ( properties ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , org . IDENT_1 . common . property . IDENT_3 [ ] ) { if ( str != null ) { org . IDENT_1 . common . property . IDENT_3 resolver = org . IDENT_1 . common . property . IDENT_4 . METHOD_3 ( IDENT_5 ) ; boolean IDENT_6 = false ; while ( true ) { java . util . regex . IDENT_7 IDENT_8 = org . IDENT_1 . common . lang . IDENT_2 . IDENT_9 . matcher ( str ) ; if ( IDENT_8 . find ( ) ) { str = IDENT_8 . replaceAll ( org . IDENT_1 . common . lang . IDENT_2 . IDENT_10 ) ; IDENT_6 = true ; } java . util . regex . IDENT_7 IDENT_11 = org . IDENT_1 . common . lang . IDENT_2 . IDENT_12 . matcher ( str ) ; if ( ! ( IDENT_11 . find ( ) ) ) { break ; } int IDENT_13 = IDENT_11 . start ( ) ; int IDENT_14 = ( IDENT_11 . end ( ) ) - 1 ; java . lang . String IDENT_15 = str . substring ( ( IDENT_13 + 2 ) , IDENT_14 ) ; java . lang . String IDENT_16 ; java . lang . String IDENT_17 ; java . util . regex . IDENT_7 IDENT_18 = org . IDENT_1 . common . lang . IDENT_2 . IDENT_19 . matcher ( IDENT_15 ) ; if ( IDENT_18 . find ( ) ) { int IDENT_20 = ( IDENT_18 . start ( ) ) + 1 ; IDENT_16 = IDENT_15 . substring ( 0 , IDENT_20 ) ; IDENT_17 = IDENT_15 . substring ( ( IDENT_20 + 1 ) , IDENT_15 . length ( ) ) ; } else { IDENT_16 = IDENT_15 ; IDENT_17 = null ; } java . lang . Object IDENT_21 = resolver . METHOD_4 ( IDENT_16 ) ; if ( IDENT_21 == null ) { IDENT_21 = IDENT_17 ; } java . lang . String IDENT_22 ; if ( IDENT_21 != null ) { IDENT_22 = IDENT_21 . toString ( ) ; } else { IDENT_22 = ( ( org . IDENT_1 . common . lang . IDENT_2 . IDENT_10 ) + IDENT_16 ) + ( org . IDENT_1 . common . lang . IDENT_2 . IDENT_23 ) ; IDENT_6 = true ; } str = new java . lang . StringBuilder ( ) . append ( str . substring ( 0 , IDENT_13 ) ) . append ( IDENT_22 ) . append ( str . substring ( ( IDENT_14 + 1 ) , str . length ( ) ) ) . toString ( ) ; } if ( IDENT_6 ) { str = str . replaceAll ( org . IDENT_1 . common . lang . IDENT_2 . IDENT_24 , org . IDENT_1 . common . lang . IDENT_2 . IDENT_25 ) ; } } return str ; }
org . junit . Assert . assertEquals ( expected , actual ) 