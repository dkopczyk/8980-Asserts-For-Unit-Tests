METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList ( IDENT_1 ) ; for ( java . lang . Long IDENT_2 : IDENT_3 . METHOD_1 ( 1 , IDENT_3 . size ( ) ) ) { java . util . List < java . lang . String > IDENT_4 = new java . util . ArrayList ( IDENT_0 . METHOD_1 ( 1 , IDENT_1 . size ( ) ) ) ; IDENT_4 . addAll ( IDENT_0 . METHOD_1 ( 0 , 1 ) ) ; java . util . List < java . lang . String > IDENT_5 = algorithm . METHOD_2 ( IDENT_1 , IDENT_3 , IDENT_2 ) ; "<AssertPlaceHolder>" ; IDENT_0 = IDENT_4 ; } } METHOD_2 ( java . util . List , java . util . List , java . lang . Long ) { if ( ( IDENT_1 . size ( ) ) < 2 ) { return IDENT_1 ; } final java . util . List < java . lang . Long > IDENT_3 = new java . util . ArrayList ( IDENT_6 ) ; java . lang . Long IDENT_7 = IDENT_2 ; if ( IDENT_2 == null ) { IDENT_7 = - 1L ; IDENT_3 . add ( IDENT_7 ) ; } final int IDENT_8 = METHOD_3 ( IDENT_1 , IDENT_3 , IDENT_7 ) ; final java . util . List < java . lang . String > IDENT_9 = new java . util . ArrayList ( IDENT_1 . METHOD_1 ( IDENT_8 , IDENT_1 . size ( ) ) ) ; IDENT_9 . addAll ( IDENT_1 . METHOD_1 ( 0 , IDENT_8 ) ) ; return IDENT_9 ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_4 ) 