METHOD_0 ( ) { int [ ] dc = new int [ ] { INT_0 , - INT_1 , INT_2 , - INT_3 , INT_4 , - INT_5 , INT_6 , - INT_7 , INT_3 , - INT_8 , INT_9 , - INT_10 , INT_11 , - INT_12 , INT_13 , - INT_14 } ; int [ ] expected = new int [ ] { INT_15 , - INT_16 , 8 , - INT_16 , 9 , - INT_17 , INT_18 , - 15 , INT_16 , - 8 , INT_19 , - 9 , 10 , - INT_20 , INT_21 , - INT_15 } ; org . IDENT_0 . IDENT_1 . IDENT_2 . decode . IDENT_3 . METHOD_1 ( dc , INT_22 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int [ ] , int ) { int IDENT_4 = IDENT_5 / 6 ; int offset = IDENT_5 OP_0 6 ; int IDENT_6 = INT_23 << ( ( IDENT_5 / 6 ) + 5 ) ; int IDENT_7 = 16 + IDENT_4 ; if ( IDENT_5 < 10 ) { for ( int i = 0 ; i < 16 ; i ++ ) { int IDENT_8 = ( IDENT_9 [ i ] ) > > INT_24 ; IDENT_9 [ i ] = ( ( java . lang . Math . min ( ( ( ( ( ( ( IDENT_9 [ i ] ) OP_1 IDENT_8 ) - IDENT_8 ) * ( org . IDENT_0 . IDENT_1 . IDENT_2 . decode . IDENT_3 . IDENT_10 [ offset ] [ 0 ] ) ) + IDENT_6 ) > > IDENT_7 ) , INT_25 ) ) OP_1 IDENT_8 ) - IDENT_8 ; } } else { for ( int i = 0 ; i < 16 ; i ++ ) { int IDENT_8 = ( IDENT_9 [ i ] ) > > INT_24 ; IDENT_9 [ i ] = ( ( ( ( ( ( ( IDENT_9 [ i ] ) OP_1 IDENT_8 ) - IDENT_8 ) * ( org . IDENT_0 . IDENT_1 . IDENT_2 . decode . IDENT_3 . IDENT_10 [ offset ] [ 0 ] ) ) + IDENT_6 ) > > IDENT_7 ) OP_1 IDENT_8 ) - IDENT_8 ; } } }
org . junit . Assert . assertArrayEquals ( expected , dc ) 