METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; for ( int i = 0 ; i <= 6 ; i ++ ) { java . io . File f = new java . io . File ( java . lang . String . format ( IDENT_0 , i ) ) ; METHOD_2 ( f . exists ( ) , ( STRING_2 + ( f . getPath ( ) ) ) ) ; java . nio . ByteBuffer buf = org . IDENT_2 . common . io . IDENT_7 . METHOD_3 ( f ) ; org . IDENT_2 . common . IDENT_8 IDENT_9 = IDENT_6 . METHOD_4 ( buf ) ; org . IDENT_2 . common . model . IDENT_10 IDENT_11 = org . IDENT_2 . common . model . IDENT_10 . create ( IDENT_9 . METHOD_5 ( ) . METHOD_6 ( ) , IDENT_9 . METHOD_5 ( ) . METHOD_7 ( ) , IDENT_12 . IDENT_13 ) ; org . IDENT_2 . common . model . IDENT_10 IDENT_14 = IDENT_6 . METHOD_8 ( buf , IDENT_11 . METHOD_9 ( ) ) ; java . nio . ByteBuffer IDENT_15 = org . IDENT_2 . common . io . IDENT_7 . METHOD_3 ( new java . io . File ( java . lang . String . format ( IDENT_1 , i ) ) ) ; byte [ ] array = org . IDENT_2 . common . io . IDENT_7 . toArray ( IDENT_15 ) ; for ( int j = 0 ; j < ( array . length ) ; j ++ ) { array [ j ] = ( ( byte ) ( ( ( array [ j ] ) & 255 ) - INT_0 ) ) ; } "<AssertPlaceHolder>" ; } } METHOD_10 ( int ) { return data [ IDENT_16 ] ; }
org . junit . Assert . assertArrayEquals ( ( "" + i ) , array , IDENT_14 . METHOD_10 ( 0 ) ) 