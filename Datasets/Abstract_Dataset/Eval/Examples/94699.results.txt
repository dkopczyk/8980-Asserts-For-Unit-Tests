METHOD_0 ( ) { com . IDENT_0 . util . IDENT_1 . Node IDENT_2 = new com . IDENT_0 . util . IDENT_1 . Node ( STRING_0 ) ; com . IDENT_0 . util . IDENT_1 . Node IDENT_3 = new com . IDENT_0 . util . IDENT_1 . Node ( STRING_1 ) ; com . IDENT_0 . util . IDENT_1 . Node IDENT_4 = new com . IDENT_0 . util . IDENT_1 . Node ( STRING_2 , IDENT_2 ) ; com . IDENT_0 . util . IDENT_1 . Node IDENT_5 = new com . IDENT_0 . util . IDENT_1 . Node ( STRING_3 , IDENT_2 ) ; com . IDENT_0 . util . IDENT_1 . Node IDENT_6 = new com . IDENT_0 . util . IDENT_1 . Node ( STRING_4 , IDENT_2 ) ; java . util . List IDENT_7 = new java . util . ArrayList ( ) ; IDENT_7 . add ( IDENT_4 ) ; IDENT_7 . add ( IDENT_5 ) ; IDENT_7 . add ( IDENT_6 ) ; java . util . List IDENT_8 = ( ( java . util . List ) ( METHOD_1 ( IDENT_7 ) ) ) ; IDENT_4 = ( ( com . IDENT_0 . util . IDENT_1 . Node ) ( IDENT_8 . get ( 0 ) ) ) ; IDENT_6 = ( ( com . IDENT_0 . util . IDENT_1 . Node ) ( IDENT_8 . get ( 2 ) ) ) ; IDENT_4 . child = IDENT_3 ; IDENT_6 . child = IDENT_3 ; java . util . List IDENT_9 = com . IDENT_0 . util . IDENT_10 . compare ( IDENT_7 , IDENT_8 , METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return map . size ( ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_9 . size ( ) ) 