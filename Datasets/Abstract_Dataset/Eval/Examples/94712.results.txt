METHOD_0 ( ) { final com . IDENT_0 . util . IDENT_1 format = new com . IDENT_0 . util . METHOD_1 ( STRING_0 ) ; final java . util . IDENT_2 random = new java . util . METHOD_2 ( ) ; java . lang . Thread [ ] IDENT_3 = new java . lang . Thread [ 16 ] ; final long [ ] IDENT_4 = new long [ 16 ] ; final java . util . Date IDENT_5 = METHOD_3 ( INT_0 , 12 , INT_1 , INT_1 , INT_2 , 5 ) ; final java . util . Date IDENT_6 = METHOD_3 ( INT_3 , 12 , INT_4 , 16 , INT_5 , INT_6 ) ; final java . util . Date IDENT_7 = METHOD_3 ( INT_7 , 9 , INT_8 , 0 , INT_9 , INT_1 ) ; final int [ ] r = new int [ 1 ] ; final int [ ] s = new int [ 1 ] ; final int [ ] t = new int [ 1 ] ; final java . lang . String [ ] IDENT_8 = new java . lang . String [ 1 ] ; IDENT_8 [ 0 ] = null ; for ( int i = 0 ; i < 16 ; i ++ ) { final int index = i ; IDENT_3 [ i ] = new java . lang . Thread ( new java . lang . METHOD_4 ( ) { public void run ( ) { try { long start = java . lang . System . currentTimeMillis ( ) ; while ( ( ( java . lang . System . currentTimeMillis ( ) ) - start ) < INT_10 ) { for ( int j = 0 ; j < 100 ; j ++ ) { int op = random . METHOD_5 ( 100 ) ; if ( op < 5 ) { java . lang . String a = format . format ( IDENT_5 ) ; java . util . Date x = format . parse ( a ) ; ( r [ 0 ] ) ++ ; } else if ( op < 20 ) { java . lang . String b = format . format ( IDENT_6 ) ; java . util . Date y = format . parse ( b ) ; ( s [ 0 ] ) ++ ; } else { java . lang . String c = format . format ( IDENT_7 ) ; java . util . Date IDENT_9 = format . parse ( c ) ; ( t [ 0 ] ) ++ ; } } ( IDENT_4 [ index ] ) ++ ; } } catch ( java . lang . Exception e ) { IDENT_8 [ 0 ] = e . getMessage ( ) ; } } } ) ; IDENT_3 [ i ] . setName ( ( STRING_1 + i ) ) ; IDENT_3 [ i ] . METHOD_6 ( true ) ; IDENT_3 [ i ] . start ( ) ; } for ( int i = 0 ; i < 16 ; i ++ ) { try { IDENT_3 [ i ] . join ( ) ; } catch ( java . lang . IDENT_10 e ) { e . printStackTrace ( ) ; } } "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { return com . IDENT_0 . util . METHOD_1 . METHOD_7 ( IDENT_11 ) . parse ( IDENT_12 ) ; }
org . junit . Assert . assertTrue ( IDENT_8 [ 0 ] , ( ( IDENT_8 [ 0 ] ) == null ) ) 