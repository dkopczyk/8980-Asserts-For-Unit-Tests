METHOD_0 ( ) { expect ( em . find ( IDENT_0 . service . impl . User . class , STRING_0 ) ) . andReturn ( user ) ; replay ( ) ; try { IDENT_1 . METHOD_1 ( user ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( IDENT_0 . service . IDENT_2 e ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( IDENT_0 . service . impl . User ) { if ( log . METHOD_2 ( ) ) { log . debug ( ( ( STRING_2 + ( user . METHOD_3 ( ) ) ) + STRING_3 ) ) ; } IDENT_0 . service . impl . User IDENT_3 = em . find ( IDENT_0 . service . impl . User . class , user . METHOD_3 ( ) ) ; if ( IDENT_3 != null ) { if ( log . METHOD_2 ( ) ) { log . debug ( ( ( STRING_4 + ( user . METHOD_3 ( ) ) ) + STRING_5 ) ) ; } throw new IDENT_0 . service . METHOD_4 ( STRING_6 ) ; } user . METHOD_5 ( true ) ; java . util . Date now = java . util . Calendar . getInstance ( ) . getTime ( ) ; user . METHOD_6 ( now ) ; user . METHOD_7 ( now ) ; user . METHOD_8 ( Constants . IDENT_4 ) ; IDENT_0 . service . impl . IDENT_5 IDENT_6 = em . find ( IDENT_0 . service . impl . IDENT_5 . class , IDENT_7 . IDENT_8 . name ( ) ) ; user . METHOD_9 ( ) . add ( IDENT_6 ) ; em . METHOD_10 ( user ) ; IDENT_0 . service . impl . IDENT_9 IDENT_10 = new IDENT_0 . service . impl . METHOD_11 ( ) ; IDENT_10 . setName ( STRING_7 ) ; IDENT_10 . METHOD_12 ( java . util . Calendar . getInstance ( ) . getTime ( ) ) ; em . METHOD_10 ( IDENT_10 ) ; user . METHOD_13 ( ) . add ( IDENT_10 ) ; IDENT_10 . METHOD_14 ( ) . add ( user ) ; IDENT_0 . service . impl . IDENT_11 IDENT_12 = new IDENT_0 . service . impl . METHOD_15 ( ) ; IDENT_12 . METHOD_16 ( STRING_8 ) ; IDENT_12 . METHOD_17 ( 100 ) ; IDENT_12 . METHOD_6 ( now ) ; IDENT_12 . METHOD_18 ( now ) ; IDENT_12 . METHOD_19 ( IDENT_10 ) ; IDENT_10 . METHOD_20 ( ) . add ( IDENT_12 ) ; em . METHOD_10 ( IDENT_12 ) ; if ( log . METHOD_2 ( ) ) { log . debug ( ( ( STRING_9 + ( user . METHOD_3 ( ) ) ) + STRING_10 ) ) ; } }
org . junit . Assert . assertNotNull ( user ) 