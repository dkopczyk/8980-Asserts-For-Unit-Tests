METHOD_0 ( ) { org . eclipse . jgit . lib . IDENT_0 IDENT_1 = METHOD_1 ( ) ; java . lang . String IDENT_2 = STRING_0 ; IDENT_3 . METHOD_2 ( IDENT_2 , ( STRING_1 + IDENT_2 ) ) ; hudson . plugins . IDENT_4 . IDENT_5 IDENT_6 = new hudson . plugins . IDENT_4 . METHOD_3 ( IDENT_2 , IDENT_1 ) ; java . util . Set < hudson . plugins . IDENT_4 . METHOD_3 > result = IDENT_3 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { hudson . util . IDENT_7 args = new hudson . util . METHOD_5 ( STRING_2 , STRING_3 , STRING_4 ) ; java . lang . String result ; try { result = METHOD_6 ( args , IDENT_8 ) ; } catch ( hudson . plugins . IDENT_4 . IDENT_9 IDENT_10 ) { if ( IDENT_11 || ( ! ( IDENT_12 . containsKey ( IDENT_2 ) ) ) ) { IDENT_12 . put ( IDENT_2 , org . eclipse . jgit . lib . IDENT_0 . METHOD_7 ( IDENT_13 ) ) ; } } java . util . Set < hudson . plugins . IDENT_4 . METHOD_3 > IDENT_14 = new java . util . HashSet ( IDENT_12 . size ( ) ) ; for ( Map . Entry < java . lang . String , org . eclipse . jgit . lib . IDENT_0 > entry : IDENT_12 . entrySet ( ) ) { IDENT_14 . add ( new hudson . plugins . IDENT_4 . METHOD_3 ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return IDENT_14 ; }
org . junit . Assert . assertThat ( result , contains ( IDENT_6 ) ) 