METHOD_0 ( ) { org . mockito . Mockito . when ( request . METHOD_1 ( ) ) . thenReturn ( STRING_0 ) ; java . util . HashMap < java . lang . String , java . lang . Object [ ] > params = new java . util . HashMap < java . lang . String , java . lang . Object [ ] > ( ) ; servlet . METHOD_2 ( request , params ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( javax . servlet . http . IDENT_0 , java . util . Map ) { if ( ( req . METHOD_1 ( ) ) == null ) { return ; } final java . lang . String [ ] IDENT_1 = req . METHOD_1 ( ) . split ( STRING_1 ) ; if ( IDENT_1 != null ) { for ( final java . lang . String param : IDENT_1 ) { final java . lang . String [ ] IDENT_2 = param . split ( STRING_2 , 2 ) ; if ( ( IDENT_2 . length ) == 2 ) { java . lang . String name = METHOD_3 ( IDENT_2 [ 0 ] ) ; java . lang . String value = METHOD_3 ( IDENT_2 [ 1 ] ) ; params . put ( name , new java . lang . String [ ] { value } ) ; } else { com . cloud . api . IDENT_3 . IDENT_4 . debug ( ( STRING_3 + param ) ) ; } } } }
org . junit . Assert . assertTrue ( params . containsKey ( "" ) ) 