METHOD_0 ( ) { try { repository ( "" ) ; } catch ( java . lang . RuntimeException e ) { "<AssertPlaceHolder>" ; } } repository ( java . lang . String ) { if ( ( path == null ) || ( path . isEmpty ( ) ) ) { throw new com . github . jenkins . IDENT_0 . exception . METHOD_1 ( STRING_0 ) ; } java . io . File IDENT_1 = new java . io . File ( path ) ; if ( ! ( IDENT_1 . exists ( ) ) ) { throw new com . github . jenkins . IDENT_0 . exception . METHOD_1 ( java . lang . String . format ( STRING_1 , IDENT_1 ) ) ; } com . github . jenkins . IDENT_0 . impl . IDENT_2 repository = null ; try { repository = new org . eclipse . jgit . internal . storage . file . METHOD_2 ( path ) ; } catch ( java . io . IOException e ) { throw new com . github . jenkins . IDENT_0 . exception . METHOD_1 ( ( STRING_2 + path ) ) ; } if ( repository . METHOD_3 ( ) ) { throw new com . github . jenkins . IDENT_0 . exception . METHOD_1 ( java . lang . String . format ( STRING_3 , path ) ) ; } return repository ; }
org . junit . Assert . assertEquals ( STRING_0 , e . getMessage ( ) ) 