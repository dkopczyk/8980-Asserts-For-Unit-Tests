METHOD_0 ( ) { java . util . List < java . io . File > IDENT_0 = new java . util . ArrayList < java . io . File > ( 1 ) ; IDENT_0 . add ( new java . io . File ( getClass ( ) . getResource ( STRING_0 ) . METHOD_1 ( ) ) ) ; try { java . util . Collection < hudson . plugins . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_2 = parser . parse ( null , IDENT_0 , listener ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } parse ( hudson . model . IDENT_4 , java . util . Collection , hudson . model . IDENT_5 ) { final java . util . List < hudson . plugins . IDENT_1 . IDENT_2 . IDENT_3 > result = new java . util . ArrayList ( ) ; for ( java . io . File IDENT_6 : IDENT_2 ) { final hudson . plugins . IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = hudson . plugins . IDENT_1 . IDENT_8 . IDENT_9 . METHOD_2 ( IDENT_6 ) ; if ( IDENT_7 != null ) { result . add ( IDENT_7 ) ; continue ; } try { listener . METHOD_3 ( ) . println ( ( ( ( ( STRING_1 + IDENT_6 ) + STRING_2 ) + ( IDENT_10 ) ) + STRING_3 ) ) ; final hudson . plugins . IDENT_1 . IDENT_2 . IDENT_3 report = parse ( IDENT_6 ) ; result . add ( report ) ; METHOD_4 ( report ) ; hudson . plugins . IDENT_1 . IDENT_8 . IDENT_9 . METHOD_5 ( IDENT_6 , report ) ; } catch ( java . lang . Throwable e ) { listener . METHOD_3 ( ) . println ( ( ( ( STRING_4 + IDENT_6 ) + STRING_5 ) + ( e . getMessage ( ) ) ) ) ; e . printStackTrace ( listener . METHOD_3 ( ) ) ; } } return result ; }
org . junit . Assert . assertFalse ( IDENT_2 . isEmpty ( ) ) 