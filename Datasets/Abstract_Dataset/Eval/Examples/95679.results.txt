METHOD_0 ( ) { java . security . IDENT_0 factory = java . security . IDENT_0 . getInstance ( STRING_0 ) ; factory . METHOD_1 ( IDENT_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; java . security . interfaces . IDENT_2 IDENT_3 = ( ( java . security . interfaces . IDENT_2 ) ( factory . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; byte [ ] IDENT_4 = IDENT_1 . METHOD_8 ( STRING_1 . getBytes ( IDENT_5 . UTF_8 ) , IDENT_3 , new java . security . METHOD_9 ( ) ) ; byte [ ] IDENT_6 = IDENT_1 . METHOD_10 ( IDENT_4 ) ; byte [ ] IDENT_7 = IDENT_1 . METHOD_11 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( byte [ ] ) { com . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = new com . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_12 ( IDENT_13 ) ; java . lang . String IDENT_14 = IDENT_12 . METHOD_13 ( ) ; if ( ! ( IDENT_14 . equals ( METHOD_14 ( ) ) ) ) { throw new java . io . IOException ( ( STRING_2 + IDENT_14 ) ) ; } byte [ ] IDENT_15 = IDENT_12 . METHOD_15 ( ) ; if ( ( IDENT_12 . METHOD_16 ( ) ) != 0 ) { throw new java . io . IOException ( STRING_3 ) ; } com . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_12 IDENT_16 = new com . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_12 ( IDENT_15 ) ; byte [ ] r = IDENT_16 . METHOD_17 ( ) . toByteArray ( ) ; byte [ ] s = IDENT_16 . METHOD_17 ( ) . toByteArray ( ) ; int IDENT_17 = r . length ; int IDENT_18 = s . length ; if ( ( ( r [ 0 ] ) & INT_0 ) != 0 ) { IDENT_17 ++ ; } if ( ( ( s [ 0 ] ) & INT_0 ) != 0 ) { IDENT_18 ++ ; } int IDENT_19 = ( 6 + IDENT_17 ) + IDENT_18 ; java . io . ByteArrayOutputStream IDENT_20 = new java . io . ByteArrayOutputStream ( IDENT_19 ) ; IDENT_20 . write ( INT_1 ) ; com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . METHOD_18 ( ( IDENT_19 - 2 ) , IDENT_20 ) ; IDENT_20 . write ( com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . IDENT_22 ) ; com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . METHOD_18 ( IDENT_17 , IDENT_20 ) ; if ( IDENT_17 != ( r . length ) ) { IDENT_20 . write ( com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . IDENT_23 ) ; } IDENT_20 . write ( r ) ; IDENT_20 . write ( com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . IDENT_22 ) ; com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . METHOD_18 ( IDENT_18 , IDENT_20 ) ; if ( IDENT_18 != ( s . length ) ) { IDENT_20 . write ( com . IDENT_8 . IDENT_9 . IDENT_4 . IDENT_21 . IDENT_23 ) ; } IDENT_20 . write ( s ) ; return IDENT_20 . toByteArray ( ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_4 , IDENT_7 ) 