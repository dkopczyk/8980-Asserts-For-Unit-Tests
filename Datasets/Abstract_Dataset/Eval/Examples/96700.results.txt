METHOD_0 ( ) { org . jfree . data . time . IDENT_0 IDENT_1 = new org . jfree . data . time . METHOD_1 ( STRING_0 ) ; IDENT_1 . add ( new org . jfree . data . time . METHOD_2 ( INT_0 ) , FLOAT_0 ) ; IDENT_1 . add ( new org . jfree . data . time . METHOD_2 ( INT_1 ) , FLOAT_1 ) ; IDENT_1 . add ( new org . jfree . data . time . METHOD_2 ( INT_2 ) , null ) ; IDENT_1 . add ( new org . jfree . data . time . METHOD_2 ( INT_3 ) , FLOAT_2 ) ; IDENT_1 . add ( new org . jfree . data . time . METHOD_2 ( INT_4 ) , FLOAT_3 ) ; java . io . ByteArrayOutputStream buffer = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_2 out = new java . io . METHOD_3 ( buffer ) ; out . METHOD_4 ( IDENT_1 ) ; out . close ( ) ; java . io . IDENT_3 in = new java . io . METHOD_5 ( new java . io . ByteArrayInputStream ( buffer . toByteArray ( ) ) ) ; org . jfree . data . time . METHOD_1 IDENT_4 = ( ( org . jfree . data . time . METHOD_1 ) ( in . METHOD_6 ( ) ) ) ; in . close ( ) ; "<AssertPlaceHolder>" ; } close ( ) { try { this . connection . close ( ) ; } catch ( java . lang . Exception e ) { System . err . println ( STRING_1 ) ; } }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_4 ) 