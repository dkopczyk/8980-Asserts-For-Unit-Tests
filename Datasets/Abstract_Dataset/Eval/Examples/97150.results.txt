METHOD_0 ( ) { org . jfree . data . time . IDENT_0 s = new org . jfree . data . time . METHOD_1 ( STRING_0 ) ; boolean IDENT_1 = true ; try { s . METHOD_2 ( 0L , true ) ; } catch ( java . lang . Exception e ) { IDENT_1 = false ; } "<AssertPlaceHolder>" ; } METHOD_2 ( long , boolean ) { if ( this . data . isEmpty ( ) ) { return ; } long index = Long . MAX_VALUE ; try { java . lang . reflect . Method m = org . jfree . data . time . IDENT_2 . class . METHOD_3 ( STRING_1 , new java . lang . Class [ ] { java . lang . Class . class , java . util . Date . class , java . util . IDENT_3 . class , java . util . Locale . class } ) ; org . jfree . data . time . IDENT_2 IDENT_4 = ( ( org . jfree . data . time . IDENT_2 ) ( m . invoke ( this . IDENT_5 , new java . lang . Object [ ] { this . IDENT_5 , new java . util . Date ( IDENT_6 ) , java . util . IDENT_3 . METHOD_4 ( ) , java . util . Locale . METHOD_4 ( ) } ) ) ) ; index = IDENT_4 . METHOD_5 ( ) ; } catch ( java . lang . IDENT_7 e ) { throw new java . lang . RuntimeException ( e ) ; } catch ( java . lang . IDENT_8 e ) { throw new java . lang . RuntimeException ( e ) ; } catch ( java . lang . reflect . IDENT_9 e ) { throw new java . lang . RuntimeException ( e ) ; } boolean IDENT_10 = false ; while ( ( ( METHOD_6 ( ) ) > 0 ) && ( ( index - ( METHOD_7 ( 0 ) . METHOD_5 ( ) ) ) > ( this . IDENT_11 ) ) ) { this . data . remove ( 0 ) ; IDENT_10 = true ; } if ( IDENT_10 ) { METHOD_8 ( ) ; if ( IDENT_12 ) { METHOD_9 ( ) ; } } }
org . junit . Assert . assertTrue ( IDENT_1 ) 