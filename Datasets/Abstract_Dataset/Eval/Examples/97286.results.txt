METHOD_0 ( ) { java . util . HashSet < com . github . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_3 = new java . util . HashSet < com . github . IDENT_0 . IDENT_1 . IDENT_2 > ( ) ; final java . util . IDENT_4 < com . github . IDENT_0 . IDENT_1 . IDENT_2 > actual = com . github . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_5 . METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_0 ) , IDENT_3 ) ; java . util . HashSet < com . github . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_6 = new java . util . HashSet < com . github . IDENT_0 . IDENT_1 . IDENT_2 > ( ) ; IDENT_6 . addAll ( java . util . Arrays . asList ( com . github . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_0 ) ) ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { int IDENT_7 = range . indexOf ( com . github . IDENT_0 . IDENT_1 . IDENT_8 ) ; if ( IDENT_7 != ( - 1 ) ) { com . github . IDENT_0 . IDENT_1 . IDENT_9 start = com . github . IDENT_0 . IDENT_1 . IDENT_9 . parse ( range . substring ( 0 , IDENT_7 ) ) ; com . github . IDENT_0 . IDENT_1 . IDENT_9 end = com . github . IDENT_0 . IDENT_1 . IDENT_9 . parse ( range . substring ( ( IDENT_7 + 1 ) , range . length ( ) ) ) ; return new com . github . IDENT_0 . IDENT_1 . METHOD_2 ( start , end ) ; } else { return com . github . IDENT_0 . IDENT_1 . METHOD_2 . METHOD_3 ( range ) ; } }
org . junit . Assert . assertEquals ( IDENT_6 , actual ) 