METHOD_0 ( ) { java . util . List < net . sf . IDENT_0 . entity . IDENT_1 > IDENT_2 = new java . util . ArrayList ( ) ; net . sf . IDENT_0 . entity . IDENT_1 IDENT_3 = new net . sf . IDENT_0 . entity . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( false ) ; IDENT_3 . setId ( 1 ) ; net . sf . IDENT_0 . entity . METHOD_1 IDENT_4 = new net . sf . IDENT_0 . entity . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( false ) ; IDENT_4 . setId ( 2 ) ; IDENT_2 . add ( IDENT_3 ) ; IDENT_2 . add ( IDENT_4 ) ; java . util . Map < java . lang . Integer , net . sf . IDENT_0 . IDENT_5 . IDENT_6 > map = IDENT_7 . METHOD_3 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . util . List ) { java . util . Map < java . lang . Integer , net . sf . IDENT_0 . IDENT_5 . IDENT_6 > map = new java . util . HashMap ( ) ; for ( net . sf . IDENT_0 . entity . METHOD_1 IDENT_8 : IDENT_2 ) { if ( ! ( IDENT_8 . METHOD_4 ( ) ) ) { continue ; } java . util . List < net . sf . IDENT_0 . entity . IDENT_9 > IDENT_10 = IDENT_11 . METHOD_5 ( IDENT_8 , org . springframework . data . domain . IDENT_12 . of ( 0 , 1 , org . springframework . data . domain . IDENT_13 . METHOD_6 ( IDENT_14 . IDENT_15 , STRING_0 ) ) ) ; net . sf . IDENT_0 . IDENT_5 . IDENT_6 IDENT_16 = new net . sf . IDENT_0 . IDENT_5 . METHOD_7 ( ) ; if ( IDENT_10 . isEmpty ( ) ) { } else { IDENT_16 = METHOD_8 ( IDENT_10 . get ( 0 ) ) ; } map . put ( IDENT_8 . getId ( ) , IDENT_16 ) ; } return map ; }
org . junit . Assert . assertEquals ( 0 , map . size ( ) ) 