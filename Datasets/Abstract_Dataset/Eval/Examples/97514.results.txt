METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ 12 ] ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] , int , int ) { if ( length < ( org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_4 . IDENT_5 ) ) { return null ; } boolean IDENT_6 = ( ( ( buffer [ IDENT_7 ] ) & INT_0 ) > > 7 ) == 1 ; if ( IDENT_6 ) { return null ; } int IDENT_8 = ( ( buffer [ IDENT_7 ] ) & INT_1 ) > > 6 ; if ( IDENT_8 != 0 ) { return null ; } int IDENT_9 = ( buffer [ ( IDENT_7 + 8 ) ] ) & 255 ; if ( IDENT_9 > 1 ) { return null ; } long IDENT_10 = org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_11 . METHOD_2 ( buffer , ( IDENT_7 + 12 ) ) ; int IDENT_12 = org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_11 . METHOD_3 ( buffer , ( IDENT_7 + 16 ) ) ; org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_13 IDENT_14 ; try { IDENT_14 = new org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . METHOD_4 ( buffer , ( IDENT_7 + ( org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_4 . IDENT_15 ) ) , IDENT_12 ) ; } catch ( org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . METHOD_4 e ) { return null ; } int IDENT_16 = ( ( org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_4 . IDENT_5 ) - 2 ) + ( IDENT_14 . METHOD_5 ( ) ) ; return new org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . METHOD_6 ( IDENT_10 , IDENT_12 , IDENT_14 . METHOD_7 ( ) , IDENT_16 ) ; }
org . junit . Assert . assertNull ( org . IDENT_1 . impl . IDENT_2 . transform . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_0 , 0 , IDENT_0 . length ) ) 