METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ ] { 0 , 0 } ; final byte [ ] IDENT_1 = new byte [ ] { ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_6 ) | ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_7 ) , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_8 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_9 [ 0 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_9 [ 1 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_10 [ 0 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_10 [ 1 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_10 [ 2 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_10 [ 3 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_11 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_12 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_12 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_12 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_13 [ 0 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_13 [ 1 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_13 [ 2 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_13 [ 3 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_14 [ 0 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_14 [ 1 ] , ( ( byte ) ( ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_15 ) | ( IDENT_0 [ 0 ] ) ) ) , IDENT_0 [ 1 ] , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_16 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_16 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_16 , org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_5 . IDENT_16 } ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] , int , int ) { if ( length < ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_17 . IDENT_18 ) ) { return null ; } boolean IDENT_19 = ( ( ( buffer [ IDENT_20 ] ) & INT_0 ) > > 7 ) == 1 ; if ( IDENT_19 ) { return null ; } int IDENT_21 = ( ( buffer [ IDENT_20 ] ) & INT_1 ) > > 6 ; if ( IDENT_21 != 0 ) { return null ; } int IDENT_22 = ( buffer [ ( IDENT_20 + 8 ) ] ) & 255 ; if ( IDENT_22 > 1 ) { return null ; } long IDENT_23 = org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_24 . METHOD_2 ( buffer , ( IDENT_20 + 12 ) ) ; int IDENT_25 = org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_24 . METHOD_3 ( buffer , ( IDENT_20 + 16 ) ) ; org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_26 IDENT_27 ; try { IDENT_27 = new org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . METHOD_4 ( buffer , ( IDENT_20 + ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_17 . IDENT_28 ) ) , IDENT_25 ) ; } catch ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . METHOD_4 e ) { return null ; } int IDENT_29 = ( ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_17 . IDENT_18 ) - 2 ) + ( IDENT_27 . METHOD_5 ( ) ) ; return new org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . METHOD_6 ( IDENT_23 , IDENT_25 , IDENT_27 . METHOD_7 ( ) , IDENT_29 ) ; }
org . junit . Assert . assertNull ( org . IDENT_2 . impl . IDENT_3 . transform . IDENT_4 . IDENT_17 . METHOD_1 ( IDENT_1 , 0 , IDENT_1 . length ) ) 