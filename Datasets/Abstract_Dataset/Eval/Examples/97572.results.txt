METHOD_0 ( ) { java . lang . String message = STRING_0 ; java . lang . String code = STRING_1 ; java . lang . String IDENT_0 = null ; java . lang . Object [ ] params = new java . lang . Object [ ] { } ; @ com . github . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_2 ) java . util . Map < java . lang . String , java . lang . Object > hash = METHOD_2 ( java . util . Map . class ) ; expect ( hash . get ( STRING_3 ) ) . andReturn ( IDENT_0 ) ; com . github . IDENT_1 . IDENT_2 . IDENT_4 IDENT_5 = METHOD_2 ( com . github . IDENT_1 . IDENT_2 . IDENT_4 . class ) ; com . github . IDENT_1 . IDENT_2 . Context ctx = METHOD_2 ( com . github . IDENT_1 . IDENT_2 . Context . class ) ; com . github . IDENT_1 . IDENT_2 . IDENT_6 IDENT_7 = METHOD_2 ( com . github . IDENT_1 . IDENT_2 . IDENT_6 . class ) ; com . github . IDENT_1 . IDENT_2 . IDENT_8 options = new com . github . IDENT_1 . IDENT_2 . IDENT_8 . Builder ( IDENT_5 , STRING_4 , com . github . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_10 , ctx , IDENT_7 ) . METHOD_3 ( params ) . METHOD_4 ( hash ) . build ( ) ; org . springframework . context . IDENT_11 METHOD_0 = METHOD_2 ( org . springframework . context . IDENT_11 . class ) ; expect ( METHOD_0 . getMessage ( eq ( code ) , eq ( params ) , eq ( IDENT_0 ) , METHOD_5 ( java . util . Locale . class ) ) ) . andReturn ( message ) ; replay ( METHOD_0 , hash ) ; java . lang . Object result = new com . github . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 ( METHOD_0 ) . apply ( code , options ) ; "<AssertPlaceHolder>" ; verify ( METHOD_0 , hash ) ; } apply ( java . lang . Object , com . github . IDENT_1 . IDENT_2 . IDENT_8 ) { if ( context == null ) { return options . hash ( STRING_3 , "" ) ; } java . lang . String IDENT_12 = options . hash ( STRING_5 , "" ) ; com . fasterxml . jackson . core . IDENT_13 generator = null ; try { final com . fasterxml . jackson . databind . IDENT_14 writer ; if ( ! ( IDENT_4 . Utils . isEmpty ( IDENT_12 ) ) ) { java . lang . Class < ? > IDENT_15 = IDENT_16 . get ( IDENT_12 ) ; if ( IDENT_15 == null ) { IDENT_15 = getClass ( ) . METHOD_7 ( ) . METHOD_8 ( IDENT_12 ) ; } writer = mapper . METHOD_9 ( IDENT_15 ) ; } else { writer = mapper . writer ( ) ; } com . fasterxml . jackson . core . IDENT_17 IDENT_18 = mapper . METHOD_10 ( ) ; com . fasterxml . jackson . core . io . IDENT_19 output = new com . fasterxml . jackson . core . io . METHOD_11 ( IDENT_18 . METHOD_12 ( ) ) ; generator = IDENT_18 . METHOD_13 ( output ) ; java . lang . Boolean IDENT_20 = options . hash ( STRING_6 , Boolean . IDENT_21 ) ; if ( IDENT_20 ) { generator . METHOD_14 ( new com . github . IDENT_1 . IDENT_2 . IDENT_22 . METHOD_15 ( ) ) ; } java . lang . Boolean IDENT_23 = options . hash ( STRING_7 , Boolean . IDENT_21 ) ; if ( IDENT_23 ) { writer . METHOD_16 ( ) . METHOD_17 ( generator , context ) ; } else { writer . METHOD_17 ( generator , context ) ; } generator . close ( ) ; return new com . github . IDENT_1 . IDENT_2 . IDENT_4 . METHOD_18 ( output . METHOD_19 ( ) ) ; } catch ( java . lang . IDENT_24 ex ) { throw new java . lang . IllegalArgumentException ( IDENT_12 , ex ) ; } finally { if ( ( generator != null ) && ( ! ( generator . METHOD_20 ( ) ) ) ) { generator . close ( ) ; } } }
org . junit . Assert . assertEquals ( message , result ) 