METHOD_0 ( ) { int IDENT_0 = INT_0 ; org . IDENT_1 . IDENT_2 . algorithm . IDENT_3 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > algorithm ; org . IDENT_1 . IDENT_2 . problem . IDENT_5 problem = new org . IDENT_1 . IDENT_2 . problem . IDENT_6 . METHOD_1 ( IDENT_0 ) ; org . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_7 . impl . IDENT_10 . METHOD_2 ( FLOAT_0 ) ; org . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > IDENT_12 = new org . IDENT_1 . IDENT_2 . IDENT_7 . impl . IDENT_13 . METHOD_3 ( ( 1.0 / ( problem . METHOD_4 ( 0 ) ) ) ) ; org . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_14 < java . util . List < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > , org . IDENT_1 . IDENT_2 . solution . IDENT_4 > IDENT_15 = new org . IDENT_1 . IDENT_2 . IDENT_7 . impl . IDENT_16 . IDENT_17 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > ( ) ; algorithm = new org . IDENT_1 . IDENT_2 . algorithm . IDENT_6 . IDENT_18 . IDENT_19 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 > ( problem , IDENT_9 , IDENT_12 ) . METHOD_5 ( 50 ) . METHOD_6 ( INT_1 ) . METHOD_7 ( IDENT_15 ) . build ( ) ; new org . IDENT_1 . IDENT_2 . util . IDENT_20 . METHOD_8 ( algorithm ) . execute ( ) ; org . IDENT_1 . IDENT_2 . solution . IDENT_4 solution = algorithm . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( int ) { return 0 ; }
org . junit . Assert . assertEquals ( IDENT_0 , ( ( - 1 ) * ( ( int ) ( solution . METHOD_10 ( 0 ) ) ) ) ) 