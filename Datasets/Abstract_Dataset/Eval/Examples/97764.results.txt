METHOD_0 ( ) { @ org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . METHOD_1 ( STRING_0 ) org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_4 < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > IDENT_3 = new org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_4 < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > ( 1 , mock ( java . util . IDENT_6 . class ) ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_5 solution = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_5 . class ) ; java . util . List < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > IDENT_7 = new java . util . ArrayList ( 1 ) ; IDENT_7 . add ( solution ) ; "<AssertPlaceHolder>" ; } execute ( java . util . List ) { if ( null == IDENT_8 ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_2 ( STRING_1 ) ; } else if ( ( ( IDENT_9 ) < 0 ) || ( ( IDENT_9 ) > ( IDENT_8 . size ( ) ) ) ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_2 ( ( STRING_2 + ( IDENT_9 ) ) ) ; } else if ( ( IDENT_8 . size ( ) ) < 4 ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_2 ( ( STRING_3 + ( IDENT_8 . size ( ) ) ) ) ; } java . util . List < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > IDENT_10 = new java . util . ArrayList ( 3 ) ; int IDENT_11 ; int IDENT_12 ; int IDENT_13 ; do { IDENT_11 = IDENT_14 . METHOD_3 ( 0 , ( ( IDENT_8 . size ( ) ) - 1 ) ) ; } while ( IDENT_11 == ( IDENT_9 ) ) ; do { IDENT_12 = IDENT_14 . METHOD_3 ( 0 , ( ( IDENT_8 . size ( ) ) - 1 ) ) ; } while ( ( IDENT_12 == ( IDENT_9 ) ) || ( IDENT_12 == IDENT_11 ) ) ; do { IDENT_13 = IDENT_14 . METHOD_3 ( 0 , ( ( IDENT_8 . size ( ) ) - 1 ) ) ; } while ( ( ( IDENT_13 == ( IDENT_9 ) ) || ( IDENT_13 == IDENT_11 ) ) || ( IDENT_13 == IDENT_12 ) ) ; IDENT_10 . add ( IDENT_8 . get ( IDENT_11 ) ) ; IDENT_10 . add ( IDENT_8 . get ( IDENT_12 ) ) ; IDENT_10 . add ( IDENT_8 . get ( IDENT_13 ) ) ; return IDENT_10 ; }
org . junit . Assert . assertSame ( solution , IDENT_3 . execute ( IDENT_7 ) ) 