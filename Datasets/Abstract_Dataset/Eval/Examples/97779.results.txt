METHOD_0 ( ) { @ org . IDENT_0 . IDENT_1 . util . METHOD_1 ( STRING_0 ) org . IDENT_0 . IDENT_1 . util . IDENT_2 < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > IDENT_4 = mock ( org . IDENT_0 . IDENT_1 . util . IDENT_2 . class ) ; org . IDENT_0 . IDENT_1 . util . List < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > list = new org . IDENT_0 . IDENT_1 . util . ArrayList ( ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_3 IDENT_5 = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_3 . class ) ; list . add ( IDENT_5 ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_3 IDENT_6 = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_3 . class ) ; list . add ( IDENT_6 ) ; when ( IDENT_4 . compare ( org . mockito . Matchers . < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > METHOD_2 ( ) , org . mockito . Matchers . < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > METHOD_2 ( ) ) ) . thenReturn ( 1 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_4 ) . compare ( org . mockito . Matchers . < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > METHOD_2 ( ) , org . mockito . Matchers . < org . IDENT_0 . IDENT_1 . solution . IDENT_3 > METHOD_2 ( ) ) ; } METHOD_3 ( org . IDENT_0 . IDENT_1 . util . List , org . IDENT_0 . IDENT_1 . util . IDENT_2 ) { if ( IDENT_7 == null ) { throw new org . IDENT_0 . IDENT_1 . util . IDENT_8 . METHOD_4 ( ) ; } else if ( IDENT_7 . isEmpty ( ) ) { throw new org . IDENT_0 . IDENT_1 . util . IDENT_8 . METHOD_5 ( ) ; } else if ( IDENT_4 == null ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_6 ( STRING_1 ) ; } int index = 0 ; IDENT_9 IDENT_10 = IDENT_7 . get ( 0 ) ; IDENT_9 IDENT_11 ; int IDENT_12 ; for ( int i = 1 ; i < ( IDENT_7 . size ( ) ) ; i ++ ) { IDENT_11 = IDENT_7 . get ( i ) ; IDENT_12 = IDENT_4 . compare ( IDENT_10 , IDENT_11 ) ; if ( IDENT_12 == 1 ) { index = i ; IDENT_10 = IDENT_11 ; } } return index ; }
org . junit . Assert . assertEquals ( 1 , org . IDENT_0 . IDENT_1 . util . IDENT_8 . METHOD_3 ( list , IDENT_4 ) ) 