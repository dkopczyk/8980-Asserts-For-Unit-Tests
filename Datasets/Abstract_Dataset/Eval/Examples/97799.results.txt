METHOD_0 ( ) { @ org . IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_1 ( STRING_0 ) org . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 < org . IDENT_0 . IDENT_1 . solution . IDENT_4 < ? > > IDENT_5 = mock ( org . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 . class ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_4 < ? > IDENT_6 = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_4 . class ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_4 < ? > IDENT_7 = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_4 . class ) ; when ( IDENT_5 . compare ( IDENT_6 , IDENT_7 ) ) . thenReturn ( 0 ) ; when ( IDENT_6 . METHOD_2 ( ) ) . thenReturn ( 1 ) ; when ( IDENT_7 . METHOD_2 ( ) ) . thenReturn ( 1 ) ; when ( IDENT_6 . METHOD_3 ( 0 ) ) . thenReturn ( FLOAT_0 ) ; when ( IDENT_7 . METHOD_3 ( 0 ) ) . thenReturn ( 2.0 ) ; IDENT_2 = new org . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_8 < org . IDENT_0 . IDENT_1 . solution . IDENT_4 < ? > > ( IDENT_5 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_5 ) . compare ( IDENT_6 , IDENT_7 ) ; verify ( IDENT_6 , times ( 3 ) ) . METHOD_2 ( ) ; verify ( IDENT_6 ) . METHOD_3 ( 0 ) ; verify ( IDENT_7 ) . METHOD_3 ( 0 ) ; } compare ( IDENT_9 extends org . IDENT_0 . IDENT_1 . solution . IDENT_4 , IDENT_9 extends org . IDENT_0 . IDENT_1 . solution . IDENT_4 ) { if ( ( IDENT_10 . METHOD_4 ( IDENT_6 ) ) == null ) { return 0 ; } double IDENT_11 ; double IDENT_12 ; IDENT_11 = ( IDENT_13 . METHOD_4 ( IDENT_6 ) ) * ( IDENT_10 . METHOD_4 ( IDENT_6 ) ) ; IDENT_12 = ( IDENT_13 . METHOD_4 ( IDENT_7 ) ) * ( IDENT_10 . METHOD_4 ( IDENT_7 ) ) ; if ( ( IDENT_11 < 0 ) && ( IDENT_12 < 0 ) ) { if ( IDENT_11 > IDENT_12 ) { return - 1 ; } else if ( IDENT_12 > IDENT_11 ) { return 1 ; } else { return 0 ; } } else if ( ( IDENT_11 == 0 ) && ( IDENT_12 < 0 ) ) { return - 1 ; } else if ( ( IDENT_11 < 0 ) && ( IDENT_12 == 0 ) ) { return 1 ; } else { return 0 ; } }
org . junit . Assert . assertEquals ( 1 , IDENT_2 . compare ( IDENT_6 , IDENT_7 ) ) 