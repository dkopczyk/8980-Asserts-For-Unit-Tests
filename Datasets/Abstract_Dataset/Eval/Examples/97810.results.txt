METHOD_0 ( ) { IDENT_0 = new org . IDENT_1 . IDENT_2 . util . IDENT_0 . IDENT_3 < org . IDENT_1 . IDENT_2 . solution . IDENT_4 < ? > > ( 2 ) ; org . IDENT_1 . IDENT_2 . solution . IDENT_5 IDENT_6 = mock ( org . IDENT_1 . IDENT_2 . solution . IDENT_5 . class ) ; org . IDENT_1 . IDENT_2 . solution . IDENT_5 IDENT_7 = mock ( org . IDENT_1 . IDENT_2 . solution . IDENT_5 . class ) ; when ( IDENT_6 . METHOD_1 ( ) ) . thenReturn ( 4 ) ; when ( IDENT_7 . METHOD_1 ( ) ) . thenReturn ( 4 ) ; when ( IDENT_6 . METHOD_2 ( 2 ) ) . thenReturn ( FLOAT_0 ) ; when ( IDENT_7 . METHOD_2 ( 2 ) ) . thenReturn ( FLOAT_0 ) ; "<AssertPlaceHolder>" ; } compare ( IDENT_8 extends org . IDENT_1 . IDENT_2 . solution . IDENT_4 , IDENT_8 extends org . IDENT_1 . IDENT_2 . solution . IDENT_4 ) { if ( ( IDENT_9 . METHOD_3 ( IDENT_6 ) ) == null ) { return 0 ; } double IDENT_10 ; double IDENT_11 ; IDENT_10 = ( IDENT_12 . METHOD_3 ( IDENT_6 ) ) * ( IDENT_9 . METHOD_3 ( IDENT_6 ) ) ; IDENT_11 = ( IDENT_12 . METHOD_3 ( IDENT_7 ) ) * ( IDENT_9 . METHOD_3 ( IDENT_7 ) ) ; if ( ( IDENT_10 < 0 ) && ( IDENT_11 < 0 ) ) { if ( IDENT_10 > IDENT_11 ) { return - 1 ; } else if ( IDENT_11 > IDENT_10 ) { return 1 ; } else { return 0 ; } } else if ( ( IDENT_10 == 0 ) && ( IDENT_11 < 0 ) ) { return - 1 ; } else if ( ( IDENT_10 < 0 ) && ( IDENT_11 == 0 ) ) { return 1 ; } else { return 0 ; } }
org . junit . Assert . assertEquals ( 0 , IDENT_0 . compare ( IDENT_6 , IDENT_7 ) ) 