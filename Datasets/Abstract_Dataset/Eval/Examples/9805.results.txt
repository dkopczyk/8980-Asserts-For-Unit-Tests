METHOD_0 ( ) { java . util . Properties props = new java . util . Properties ( ) ; props . setProperty ( IDENT_0 . IDENT_1 , org . apache . commons . crypto . random . IDENT_2 . class . getName ( ) ) ; org . apache . commons . crypto . random . IDENT_3 random = org . apache . commons . crypto . random . IDENT_0 . METHOD_1 ( props ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Properties ) { final java . util . List < java . lang . String > IDENT_4 = org . apache . commons . crypto . utils . Utils . METHOD_2 ( org . apache . commons . crypto . random . IDENT_0 . METHOD_3 ( props ) , STRING_0 ) ; if ( ( IDENT_4 . size ( ) ) == 0 ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . lang . StringBuilder IDENT_5 = new java . lang . StringBuilder ( ) ; org . apache . commons . crypto . random . IDENT_3 random = null ; java . lang . Exception IDENT_6 = null ; for ( java . lang . String IDENT_7 : IDENT_4 ) { try { final java . lang . Class < ? > IDENT_8 = org . apache . commons . crypto . utils . IDENT_9 . METHOD_4 ( IDENT_7 ) ; random = ( ( org . apache . commons . crypto . random . IDENT_3 ) ( org . apache . commons . crypto . utils . IDENT_9 . newInstance ( IDENT_8 , props ) ) ) ; if ( random != null ) { break ; } } catch ( java . lang . IDENT_10 e ) { IDENT_6 = e ; IDENT_5 . append ( ( ( STRING_2 + IDENT_7 ) + STRING_3 ) ) ; } catch ( java . lang . IDENT_11 e ) { IDENT_6 = e ; IDENT_5 . append ( ( ( STRING_4 + IDENT_7 ) + STRING_5 ) ) ; } catch ( java . lang . Exception e ) { IDENT_6 = e ; IDENT_5 . append ( ( ( ( STRING_4 + IDENT_7 ) + STRING_6 ) + ( e . getMessage ( ) ) ) ) ; } } if ( random != null ) { return random ; } throw new java . security . METHOD_5 ( IDENT_5 . toString ( ) , IDENT_6 ) ; }
org . junit . Assert . assertEquals ( org . apache . commons . crypto . random . IDENT_2 . class . getName ( ) , random . getClass ( ) . getName ( ) ) 