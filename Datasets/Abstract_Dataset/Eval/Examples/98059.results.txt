METHOD_0 ( ) { final com . IDENT_0 . model . time . IDENT_1 IDENT_2 = com . IDENT_0 . model . time . IDENT_1 . METHOD_1 ( parser . parse ( STRING_0 ) ) ; final java . util . Optional < java . time . IDENT_3 > IDENT_4 = IDENT_2 . METHOD_2 ( IDENT_5 ) ; if ( METHOD_2 . METHOD_3 ( ) ) { final java . time . IDENT_3 expected = java . time . IDENT_3 . of ( java . time . IDENT_6 . of ( INT_0 , 12 , INT_1 , 12 , 0 ) , java . time . IDENT_7 . METHOD_4 ( ) ) ; "<AssertPlaceHolder>" ; } else { org . junit . Assert . fail ( com . IDENT_0 . IDENT_8 . IDENT_9 ) ; } } METHOD_2 ( java . time . IDENT_3 ) { com . IDENT_0 . utils . IDENT_10 . METHOD_5 ( date ) ; try { java . time . IDENT_3 IDENT_11 = METHOD_6 ( date ) ; if ( IDENT_11 . equals ( date ) ) { IDENT_11 = METHOD_6 ( date . METHOD_7 ( 1 ) ) ; } return java . util . Optional . of ( IDENT_11 ) ; } catch ( final com . IDENT_0 . model . time . generator . IDENT_12 e ) { return java . util . Optional . empty ( ) ; } }
org . junit . Assert . assertEquals ( expected , METHOD_2 . get ( ) ) 