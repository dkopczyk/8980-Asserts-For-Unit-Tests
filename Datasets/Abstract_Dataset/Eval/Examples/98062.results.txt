test ( ) { com . IDENT_0 . model . IDENT_1 . IDENT_2 IDENT_3 = com . IDENT_0 . model . IDENT_1 . IDENT_4 . METHOD_0 ( IDENT_5 . IDENT_6 ) ; com . IDENT_0 . builder . IDENT_7 cb = com . IDENT_0 . builder . IDENT_7 . METHOD_1 ( IDENT_3 ) . METHOD_2 ( METHOD_3 ( METHOD_4 ( INT_0 ) , 2 ) ) . METHOD_5 ( METHOD_4 ( 8 ) ) . METHOD_6 ( METHOD_4 ( 15 ) ) . METHOD_7 ( METHOD_8 ( ) ) ; com . IDENT_0 . model . IDENT_8 METHOD_1 = cb . instance ( ) ; com . IDENT_0 . model . time . IDENT_9 IDENT_10 = com . IDENT_0 . model . time . IDENT_9 . METHOD_9 ( METHOD_1 ) ; java . util . Optional < java . time . IDENT_11 > IDENT_12 = IDENT_10 . METHOD_10 ( java . time . IDENT_11 . of ( INT_0 , 1 , 1 , 0 , 0 , 0 , 0 , java . time . IDENT_13 . of ( STRING_0 ) ) ) ; java . util . Set < java . time . IDENT_11 > IDENT_14 = new java . util . METHOD_11 ( ) ; java . util . List < java . lang . String > expected = new java . util . ArrayList ( ) ; expected . add ( STRING_1 ) ; expected . add ( STRING_2 ) ; expected . add ( STRING_3 ) ; java . util . List < java . lang . String > IDENT_15 = new java . util . ArrayList ( ) ; while ( ! ( METHOD_10 . get ( ) . METHOD_12 ( java . time . IDENT_11 . of ( INT_1 , 12 , INT_2 , 0 , 0 , 0 , 0 , java . time . IDENT_13 . of ( STRING_0 ) ) ) ) ) { IDENT_15 . add ( METHOD_10 . get ( ) . toString ( ) ) ; IDENT_14 . add ( METHOD_10 . get ( ) ) ; METHOD_10 = IDENT_10 . METHOD_10 ( METHOD_10 . get ( ) ) ; } for ( int j = 0 ; j < ( expected . size ( ) ) ; j ++ ) { "<AssertPlaceHolder>" ; } } METHOD_10 ( java . time . IDENT_11 ) { com . IDENT_0 . utils . IDENT_16 . METHOD_13 ( date ) ; try { java . time . IDENT_11 IDENT_17 = METHOD_14 ( date ) ; if ( IDENT_17 . equals ( date ) ) { IDENT_17 = METHOD_14 ( date . METHOD_15 ( 1 ) ) ; } return java . util . Optional . of ( IDENT_17 ) ; } catch ( final com . IDENT_0 . model . time . generator . IDENT_18 e ) { return java . util . Optional . empty ( ) ; } }
org . junit . Assert . assertEquals ( expected . get ( j ) , IDENT_15 . get ( j ) ) 