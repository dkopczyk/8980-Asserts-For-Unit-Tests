METHOD_0 ( ) { final int IDENT_0 = INT_0 ; final java . lang . String IDENT_1 = STRING_0 + IDENT_0 ; final com . IDENT_2 . model . time . IDENT_3 IDENT_4 = com . IDENT_2 . model . time . IDENT_3 . METHOD_1 ( parser . parse ( IDENT_1 ) ) ; java . time . IDENT_5 start = java . time . IDENT_5 . of ( INT_1 , 1 , 1 , 0 , 0 , 0 , 0 , com . IDENT_2 . model . time . IDENT_6 ) ; for ( int i = 0 ; i < 6 ; i ++ ) { final java . time . IDENT_5 expected = start ; final java . util . Optional < java . time . IDENT_5 > IDENT_7 = IDENT_4 . METHOD_2 ( start . METHOD_3 ( 1 ) ) ; if ( METHOD_2 . METHOD_4 ( ) ) { final java . time . IDENT_5 actual = METHOD_2 . get ( ) ; "<AssertPlaceHolder>" ; start = expected . METHOD_5 ( IDENT_0 ) ; } else { org . junit . Assert . fail ( com . IDENT_2 . model . time . IDENT_8 . IDENT_9 ) ; } } } METHOD_2 ( java . time . IDENT_5 ) { com . IDENT_2 . utils . IDENT_10 . METHOD_6 ( date ) ; try { java . time . IDENT_5 IDENT_11 = METHOD_7 ( date ) ; if ( IDENT_11 . equals ( date ) ) { IDENT_11 = METHOD_7 ( date . METHOD_8 ( 1 ) ) ; } return java . util . Optional . of ( IDENT_11 ) ; } catch ( final com . IDENT_2 . model . time . generator . IDENT_12 e ) { return java . util . Optional . empty ( ) ; } }
org . junit . Assert . assertEquals ( expected , actual ) 