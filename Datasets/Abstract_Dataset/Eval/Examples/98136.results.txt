METHOD_0 ( ) { java . lang . System . setProperty ( STRING_0 , STRING_1 ) ; try { java . lang . String actual = resolver . METHOD_1 ( STRING_2 ) ; "<AssertPlaceHolder>" ; } finally { java . lang . System . METHOD_2 ( ) . remove ( STRING_0 ) ; } } METHOD_1 ( java . lang . String ) { java . lang . StringBuilder result = new java . lang . StringBuilder ( string . length ( ) ) ; int position = 0 ; while ( position < ( string . length ( ) ) ) { char c = string . charAt ( position ) ; if ( ( ( c == STRING_3 ) && ( position < ( ( string . length ( ) ) - 1 ) ) ) && ( ( string . charAt ( ( position + 1 ) ) ) == STRING_4 ) ) { int IDENT_0 = position + 1 ; int IDENT_1 = string . indexOf ( STRING_5 , IDENT_0 ) ; int IDENT_2 = string . indexOf ( STRING_6 , IDENT_0 ) ; if ( IDENT_2 > IDENT_1 ) { IDENT_2 = - 1 ; } java . lang . String IDENT_3 ; java . lang . String IDENT_4 ; if ( IDENT_2 == ( - 1 ) ) { IDENT_3 = string . substring ( ( IDENT_0 + 1 ) , IDENT_1 ) ; IDENT_4 = null ; } else { IDENT_3 = string . substring ( ( IDENT_0 + 1 ) , IDENT_2 ) ; IDENT_4 = string . substring ( ( IDENT_2 + 1 ) , IDENT_1 ) ; } java . lang . String IDENT_5 = METHOD_3 ( IDENT_3 , IDENT_4 ) ; result . append ( IDENT_5 ) ; position = IDENT_1 + 1 ; } else { result . append ( c ) ; position ++ ; } } return result . toString ( ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( STRING_1 ) ) 