METHOD_0 ( ) { try ( final org . apache . commons . io . input . IDENT_0 IDENT_1 = METHOD_1 ( STRING_0 ) ; final org . apache . commons . IDENT_2 . IDENT_3 parser = org . apache . commons . IDENT_2 . IDENT_3 . parse ( IDENT_1 , org . apache . commons . IDENT_2 . IDENT_4 . UTF_8 , IDENT_5 . IDENT_6 . METHOD_2 ( ) ) ) { for ( final org . apache . commons . IDENT_2 . IDENT_7 record : parser ) { final java . lang . String string = record . get ( STRING_1 ) ; "<AssertPlaceHolder>" ; } } } get ( java . lang . String ) { if ( ( mapping ) == null ) { throw new java . lang . IllegalStateException ( STRING_2 ) ; } final java . lang . Integer index = mapping . get ( name ) ; if ( index == null ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_3 , name , mapping . METHOD_3 ( ) ) ) ; } try { return values [ index . METHOD_4 ( ) ] ; } catch ( final java . lang . IDENT_8 e ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_4 , name , index , java . lang . Integer . valueOf ( values . length ) ) ) ; } }
org . junit . Assert . assertNotNull ( string ) 