METHOD_0 ( ) { java . util . Properties expected = new java . util . Properties ( ) ; expected . setProperty ( STRING_0 , STRING_1 ) ; expected . setProperty ( STRING_2 , new java . io . File ( STRING_3 7 ) . toString ( ) ) ; expected . setProperty ( STRING_3 6 , STRING_3 5 ) ; expected . setProperty ( STRING_3 4 , STRING_4 ) ; IDENT_0 . IDENT_1 parser = new IDENT_0 . METHOD_1 ( ) ; IDENT_0 . IDENT_2 < java . lang . Integer > count = parser . METHOD_2 ( STRING_5 ) . METHOD_3 ( ) . METHOD_4 ( IDENT_0 . examples . Integer . class ) ; IDENT_0 . IDENT_2 < java . io . File > IDENT_3 = parser . METHOD_2 ( STRING_6 ) . METHOD_5 ( ) . METHOD_4 ( java . io . File . class ) ; IDENT_0 . IDENT_2 < java . lang . IDENT_4 > IDENT_5 = parser . METHOD_2 ( STRING_3 2 ) ; IDENT_0 . IDENT_2 < java . lang . IDENT_4 > IDENT_6 = parser . METHOD_2 ( STRING_3 1 ) ; IDENT_0 . IDENT_2 < java . io . File > IDENT_7 = parser . METHOD_6 ( ) . METHOD_4 ( java . io . File . class ) ; IDENT_0 . IDENT_8 options = parser . parse ( STRING_7 , STRING_1 , STRING_3 , STRING_3 7 , STRING_8 , STRING_9 , STRING_3 3 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( IDENT_0 . IDENT_8 , java . lang . String ) { java . util . Properties properties = new java . util . Properties ( ) ; for ( java . util . Map . Entry < IDENT_0 . IDENT_2 < ? > , java . util . List < ? > > entry : options . METHOD_8 ( ) . entrySet ( ) ) { IDENT_0 . IDENT_2 < ? > spec = entry . getKey ( ) ; properties . setProperty ( IDENT_0 . examples . IDENT_9 . METHOD_9 ( IDENT_10 , spec ) , IDENT_0 . examples . IDENT_9 . METHOD_10 ( entry . getValue ( ) , options . METHOD_11 ( spec ) ) ) ; } return properties ; }
org . junit . Assert . assertEquals ( expected , IDENT_0 . examples . IDENT_9 . METHOD_7 ( options , STRING_3 0 ) ) 