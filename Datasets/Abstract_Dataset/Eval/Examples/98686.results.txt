METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 batch = new org . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 ) ; "<AssertPlaceHolder>" ; } evaluate ( org . IDENT_0 . IDENT_3 . IDENT_2 ) { org . IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = org . IDENT_0 . IDENT_3 . IDENT_6 . METHOD_2 ( batch . METHOD_3 ( ) ) ; org . IDENT_0 . IDENT_3 . IDENT_7 IDENT_8 = new org . IDENT_0 . IDENT_3 . METHOD_4 ( IDENT_5 ) ; org . IDENT_0 . IDENT_3 . IDENT_9 < ? > IDENT_10 = IDENT_8 . METHOD_5 ( null , org . IDENT_0 . IDENT_3 . IDENT_11 . getInstance ( ) ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . String > > input = org . IDENT_0 . IDENT_3 . IDENT_13 . load ( batch . METHOD_6 ( ) ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . String > > output = org . IDENT_0 . IDENT_3 . IDENT_13 . load ( batch . METHOD_7 ( ) ) ; org . IDENT_0 . IDENT_3 . IDENT_14 IDENT_3 = ( ( org . IDENT_0 . IDENT_3 . IDENT_14 ) ( IDENT_10 ) ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . Object > > table = org . IDENT_0 . IDENT_3 . Lists . newArrayList ( ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . IDENT_12 > IDENT_15 = IDENT_3 . METHOD_8 ( ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . IDENT_12 > IDENT_16 = IDENT_3 . METHOD_9 ( ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . IDENT_12 > IDENT_17 = IDENT_3 . METHOD_10 ( ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . IDENT_12 > IDENT_18 = IDENT_3 . METHOD_11 ( ) ; org . IDENT_0 . IDENT_3 . List < org . IDENT_0 . IDENT_3 . IDENT_12 > IDENT_19 = org . IDENT_0 . IDENT_3 . Lists . newArrayList ( ) ; IDENT_19 . addAll ( IDENT_15 ) ; IDENT_19 . addAll ( IDENT_16 ) ; for ( int i = 0 ; i < ( input . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . String > IDENT_20 = input . get ( i ) ; org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . Object > IDENT_21 = org . IDENT_0 . IDENT_3 . IDENT_22 . METHOD_12 ( ) ; for ( org . IDENT_0 . IDENT_3 . IDENT_12 IDENT_23 : IDENT_19 ) { java . lang . String IDENT_24 = IDENT_20 . get ( IDENT_23 ) ; java . lang . Object IDENT_25 = IDENT_3 . METHOD_13 ( IDENT_23 , IDENT_24 ) ; IDENT_21 . put ( IDENT_23 , IDENT_25 ) ; } table . add ( IDENT_21 ) ; } if ( ( IDENT_16 . size ( ) ) == 1 ) { org . IDENT_0 . IDENT_3 . IDENT_12 IDENT_26 = IDENT_16 . get ( 0 ) ; table = org . IDENT_0 . IDENT_3 . IDENT_27 . METHOD_14 ( IDENT_26 , table ) ; } else if ( ( IDENT_16 . size ( ) ) > 1 ) { throw new org . IDENT_0 . IDENT_3 . METHOD_15 ( ) ; } if ( output . isEmpty ( ) ) { for ( int i = 0 ; i < ( table . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , ? > IDENT_21 = table . get ( i ) ; IDENT_3 . evaluate ( IDENT_21 ) ; } return true ; } else { if ( ( table . size ( ) ) != ( output . size ( ) ) ) { throw new org . IDENT_0 . IDENT_3 . METHOD_15 ( ) ; } boolean IDENT_28 = true ; for ( int i = 0 ; i < ( output . size ( ) ) ; i ++ ) { org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , java . lang . String > IDENT_29 = output . get ( i ) ; org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , ? > IDENT_21 = table . get ( i ) ; org . IDENT_0 . IDENT_3 . Map < org . IDENT_0 . IDENT_3 . IDENT_12 , ? > result = IDENT_3 . evaluate ( IDENT_21 ) ; for ( org . IDENT_0 . IDENT_3 . IDENT_12 IDENT_30 : IDENT_17 ) { java . lang . String IDENT_31 = IDENT_29 . get ( IDENT_30 ) ; java . lang . Object IDENT_32 = org . IDENT_0 . IDENT_3 . IDENT_27 . decode ( result . get ( IDENT_30 ) ) ; IDENT_28 OP_0 org . IDENT_0 . IDENT_3 . IDENT_33 . METHOD_16 ( IDENT_31 , IDENT_32 ) ; } for ( org . IDENT_0 . IDENT_3 . IDENT_12 IDENT_34 : IDENT_18 ) { java . lang . String IDENT_31 = IDENT_29 . get ( IDENT_34 ) ; java . lang . Object IDENT_35 = result . get ( IDENT_34 ) ; IDENT_28 OP_0 ( IDENT_31 != null ) ? org . IDENT_0 . IDENT_3 . IDENT_33 . METHOD_16 ( IDENT_31 , IDENT_35 ) : org . IDENT_0 . IDENT_3 . IDENT_33 . METHOD_16 ( IDENT_35 ) ; } } return IDENT_28 ; } }
org . junit . Assert . assertTrue ( org . IDENT_0 . IDENT_1 . IDENT_33 . evaluate ( batch ) ) 