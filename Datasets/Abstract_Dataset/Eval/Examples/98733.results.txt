METHOD_0 ( ) { block = IDENT_0 . client . ui . IDENT_1 . IDENT_2 . IDENT_3 ; for ( int i = 0 ; i < ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ) ; i += 2 ) { IDENT_8 . METHOD_1 ( block , i , 0 , IDENT_9 . IDENT_10 ) ; } "<AssertPlaceHolder>" ; } METHOD_2 ( IDENT_0 . client . ui . IDENT_1 . IDENT_2 , int ) { java . util . List < java . lang . Integer > IDENT_11 = new java . util . ArrayList < java . lang . Integer > ( ) ; for ( int i = 0 ; i < ( block . METHOD_3 ( ) ) ; i ++ ) { int IDENT_12 = IDENT_13 + i ; int [ ] row = IDENT_14 [ IDENT_12 ] ; int IDENT_15 = 0 ; for ( int j = 0 ; j < ( IDENT_16 ) ; j ++ ) { if ( ( row [ j ] ) != 0 ) { IDENT_15 ++ ; } } if ( IDENT_15 == ( IDENT_16 ) ) { IDENT_11 . add ( IDENT_12 ) ; } } if ( ( IDENT_11 . size ( ) ) > 0 ) { int [ ] [ ] IDENT_17 = new int [ IDENT_18 ] [ IDENT_16 ] ; int count = ( IDENT_18 ) - 1 ; for ( int i = ( IDENT_18 ) - 1 ; i >= 0 ; i OP_0 ) { if ( ! ( IDENT_11 . contains ( i ) ) ) { IDENT_17 [ count ] = new int [ IDENT_16 ] ; java . lang . System . METHOD_4 ( IDENT_14 [ i ] , 0 , IDENT_17 [ count ] , 0 , IDENT_16 ) ; count OP_0 ; } } while ( count >= 0 ) { IDENT_17 [ count ] = new int [ IDENT_16 ] ; java . util . Arrays . METHOD_5 ( IDENT_17 [ count ] , 0 ) ; count OP_0 ; } IDENT_14 = IDENT_17 ; } return IDENT_11 . size ( ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_8 . METHOD_2 ( block , 0 ) ) 