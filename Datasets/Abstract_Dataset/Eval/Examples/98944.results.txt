METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 < java . lang . String , java . lang . Integer > generator = generator . METHOD_1 ( true , IDENT_6 , IDENT_7 ) ; final int IDENT_8 = 2 ; edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . random . IDENT_9 < java . lang . String , java . lang . Integer > IDENT_10 = edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . random . IDENT_9 . < java . lang . String , java . lang . Integer > builder ( ) . METHOD_2 ( METHOD_2 ) . build ( ) ; IDENT_10 . METHOD_3 ( graph , generator . METHOD_4 ( graph . METHOD_5 ( ) ) , IDENT_7 ) ; for ( java . lang . String node : graph . nodes ( ) ) { "<AssertPlaceHolder>" ; } } METHOD_6 ( IDENT_11 ) { return delegate . METHOD_6 ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( graph . METHOD_6 ( node ) , ( 4 + METHOD_2 ) ) 