METHOD_0 ( ) { final java . lang . String input = STRING_0 ; final java . lang . String [ ] expected = new java . lang . String [ ] { STRING_1 , STRING_2 } ; final java . lang . String [ ] result = IDENT_0 . METHOD_1 ( input ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . List < java . lang . String > IDENT_1 = new java . util . ArrayList < java . lang . String > ( ) ; try { final org . w3c . dom . Document doc = IDENT_2 . parse ( null , org . apache . commons . io . IDENT_3 . METHOD_2 ( text , STRING_3 ) , STRING_3 ) ; doc . METHOD_3 ( ) . METHOD_4 ( ) ; javax . xml . transform . IDENT_4 IDENT_5 = javax . xml . transform . IDENT_4 . newInstance ( ) ; IDENT_5 . METHOD_5 ( IDENT_6 . IDENT_7 , true ) ; javax . xml . transform . IDENT_8 IDENT_9 = IDENT_5 . METHOD_6 ( ) ; IDENT_9 . METHOD_7 ( IDENT_10 . IDENT_11 , STRING_4 ) ; final org . w3c . dom . IDENT_12 IDENT_13 = doc . METHOD_8 ( STRING_5 ) ; if ( ( IDENT_13 != null ) && ( ( IDENT_13 . METHOD_9 ( ) ) == 1 ) ) { final org . w3c . dom . Node body = IDENT_13 . item ( 0 ) ; final org . w3c . dom . IDENT_12 IDENT_14 = body . METHOD_10 ( ) ; for ( int i = 0 ; i < ( IDENT_14 . METHOD_9 ( ) ) ; i ++ ) { java . io . StringWriter writer = new java . io . StringWriter ( ) ; javax . xml . transform . stream . IDENT_15 result = new javax . xml . transform . stream . METHOD_11 ( writer ) ; final org . w3c . dom . Node child = IDENT_14 . item ( i ) ; if ( child == null ) { com . IDENT_16 . IDENT_17 . commons . components . IDENT_18 . impl . IDENT_19 . log . warn ( STRING_6 ) ; continue ; } else if ( ( child . METHOD_12 ( ) ) != javax . jcr . org . w3c . dom . Node ) { com . IDENT_16 . IDENT_17 . commons . components . IDENT_18 . impl . IDENT_19 . log . warn ( STRING_7 ) ; continue ; } METHOD_13 ( child ) ; IDENT_9 . transform ( new javax . xml . transform . dom . METHOD_14 ( child ) , result ) ; writer . METHOD_15 ( ) ; final java . lang . String IDENT_20 = writer . toString ( ) ; if ( org . apache . commons . lang . StringUtils . METHOD_16 ( IDENT_20 ) ) { IDENT_1 . add ( IDENT_20 ) ; } } } else { com . IDENT_16 . IDENT_17 . commons . components . IDENT_18 . impl . IDENT_19 . log . debug ( STRING_8 ) ; } } catch ( java . lang . Exception e ) { com . IDENT_16 . IDENT_17 . commons . components . IDENT_18 . impl . IDENT_19 . log . warn ( STRING_9 , e ) ; } return IDENT_1 . toArray ( new java . lang . String [ IDENT_1 . size ( ) ] ) ; }
org . junit . Assert . assertArrayEquals ( expected , result ) 