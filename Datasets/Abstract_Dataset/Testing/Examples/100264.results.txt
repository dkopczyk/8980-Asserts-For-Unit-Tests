METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ ] { ( ( byte ) ( INT_0 ) ) , ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( 0 ) ) , ( ( byte ) ( INT_2 ) ) , ( ( byte ) ( INT_3 ) ) , ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( 0 ) ) , ( ( byte ) ( INT_4 ) ) , ( ( byte ) ( INT_5 ) ) , ( ( byte ) ( 3 ) ) , ( ( byte ) ( 10 ) ) , ( ( byte ) ( 1 ) ) , ( ( byte ) ( 1 ) ) , ( ( byte ) ( INT_0 ) ) , ( ( byte ) ( INT_6 ) ) , ( ( byte ) ( 6 ) ) , ( ( byte ) ( 9 ) ) , ( ( byte ) ( INT_7 ) ) , ( ( byte ) ( INT_8 ) ) , ( ( byte ) ( INT_9 ) ) , ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( INT_10 ) ) , ( ( byte ) ( INT_11 ) ) , ( ( byte ) ( 1 ) ) , ( ( byte ) ( 2 ) ) , ( ( byte ) ( 2 ) ) , ( ( byte ) ( INT_12 ) ) , ( ( byte ) ( INT_13 ) ) , ( ( byte ) ( 3 ) ) , ( ( byte ) ( 4 ) ) , ( ( byte ) ( INT_13 ) ) , ( ( byte ) ( 0 ) ) } ; org . kaazing . IDENT_1 . client . util . IDENT_2 in = org . kaazing . IDENT_1 . client . util . IDENT_2 . METHOD_1 ( IDENT_0 ) ; org . kaazing . IDENT_1 . client . util . IDENT_2 codec = org . kaazing . IDENT_1 . client . util . IDENT_3 . decode ( org . kaazing . IDENT_1 . client . util . IDENT_3 . encode ( in ) ) ; byte [ ] IDENT_4 = new byte [ codec . METHOD_2 ( ) ] ; "<AssertPlaceHolder>" ; for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { IDENT_4 [ i ] = codec . get ( ) ; if ( ( IDENT_4 [ i ] ) != ( IDENT_0 [ i ] ) ) { org . junit . Assert . fail ( ( STRING_0 + i ) ) ; } } } METHOD_2 ( ) { int IDENT_5 = IDENT_6 . METHOD_2 ( ) ; return IDENT_5 ; }
org . junit . Assert . assertEquals ( IDENT_0 . length , IDENT_4 . length ) 