METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_3 > IDENT_4 = new java . util . ArrayList ( ) ; IDENT_4 . add ( com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_5 . builder ( ) . METHOD_1 ( METHOD_1 ) . METHOD_2 ( 1 ) . METHOD_3 ( STRING_0 ) . METHOD_4 ( INT_0 ) . METHOD_5 ( IDENT_6 . IDENT_7 ) . build ( ) ) ; IDENT_4 . add ( com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_5 . builder ( ) . METHOD_1 ( METHOD_1 ) . METHOD_2 ( 2 ) . METHOD_3 ( STRING_0 ) . METHOD_4 ( INT_1 ) . METHOD_5 ( IDENT_6 . IDENT_8 ) . build ( ) ) ; com . IDENT_0 . IDENT_1 . service . IDENT_9 . IDENT_10 IDENT_11 = new com . IDENT_0 . IDENT_1 . service . IDENT_9 . METHOD_6 ( IDENT_4 ) ; com . IDENT_0 . IDENT_1 . model . METHOD_5 . IDENT_6 METHOD_5 = IDENT_11 . resolve ( METHOD_1 , IDENT_12 , STRING_0 ) ; "<AssertPlaceHolder>" ; } resolve ( com . IDENT_0 . IDENT_1 . model . IDENT_13 , com . IDENT_0 . IDENT_1 . model . IDENT_13 , java . lang . String ) { java . util . Map < java . lang . String , java . util . Map < java . lang . Long , java . util . Optional < com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_3 > > > IDENT_14 = IDENT_15 . get ( METHOD_1 ) ; if ( isEmpty ( IDENT_14 ) ) return com . IDENT_0 . IDENT_1 . model . METHOD_5 . IDENT_6 . IDENT_16 ; java . util . Map < java . lang . Long , java . util . Optional < com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_3 > > IDENT_17 = IDENT_14 . get ( METHOD_3 ) ; if ( isEmpty ( IDENT_17 ) ) return com . IDENT_0 . IDENT_1 . model . METHOD_5 . IDENT_6 . IDENT_16 ; java . util . Optional < com . IDENT_0 . IDENT_1 . model . IDENT_2 . IDENT_3 > IDENT_18 = IDENT_17 . METHOD_7 ( source . id ( ) , java . util . Optional . empty ( ) ) ; return IDENT_18 . map ( ( r ) -> r . METHOD_5 ( ) ) . METHOD_8 ( IDENT_6 . IDENT_19 ) ; }
org . junit . Assert . assertEquals ( IDENT_6 . IDENT_8 , METHOD_5 ) 