METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . impl . METHOD_1 ( STRING_0 ) ; java . util . List < org . IDENT_0 . client . IDENT_1 . IDENT_4 > IDENT_5 = new java . util . ArrayList < org . IDENT_0 . client . IDENT_1 . IDENT_4 > ( ) ; org . IDENT_0 . client . IDENT_1 . IDENT_4 IDENT_6 = METHOD_2 ( IDENT_7 ) ; org . IDENT_0 . client . IDENT_1 . IDENT_4 IDENT_8 = METHOD_2 ( IDENT_3 ) ; IDENT_5 . add ( IDENT_6 ) ; when ( IDENT_9 . METHOD_3 ( ) ) . thenReturn ( IDENT_5 ) ; org . IDENT_0 . client . IDENT_1 . IDENT_4 IDENT_10 = IDENT_11 . METHOD_4 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_10 , times ( 1 ) ) . METHOD_5 ( IDENT_7 ) ; verify ( IDENT_8 , METHOD_6 ( ) ) . METHOD_5 ( any ( org . IDENT_0 . IDENT_1 . IDENT_2 . class ) ) ; } METHOD_4 ( org . IDENT_0 . IDENT_1 . IDENT_2 ) { org . IDENT_0 . client . IDENT_1 . IDENT_4 IDENT_12 = null ; for ( org . IDENT_0 . client . IDENT_1 . IDENT_4 IDENT_13 : IDENT_9 . METHOD_3 ( ) ) { if ( IDENT_13 . METHOD_7 ( IDENT_14 ) ) { if ( IDENT_13 . METHOD_8 ( ) ) { IDENT_12 = IDENT_13 ; break ; } } } return METHOD_9 ( METHOD_10 ( IDENT_12 ) , IDENT_14 ) ; }
org . junit . Assert . assertSame ( IDENT_6 , IDENT_10 ) 