METHOD_0 ( ) { final java . lang . String IDENT_0 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_0 + STRING_1 ) + ( org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_3 . class . METHOD_1 ( ) ) ) + STRING_2 0 ) + STRING_1 ) + ( org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_4 . class . METHOD_1 ( ) ) ) + STRING_2 0 ) + STRING_1 ) + ( org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_5 . class . METHOD_1 ( ) ) ) + STRING_2 0 ) + STRING_2 6 ) + STRING_2 9 ) + STRING_2 6 ) + STRING_2 1 ) + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_2 5 ) + STRING_2 2 ) + STRING_2 7 ) + STRING_2 6 ) + STRING_0 0 ) + STRING_5 ) + STRING_2 4 ) + STRING_2 3 ) + STRING_6 ) + STRING_2 7 ) + STRING_2 ) + STRING_7 ) + STRING_2 8 ; final org . kie . api . IDENT_6 IDENT_7 = org . drools . IDENT_8 . common . util . IDENT_9 . METHOD_2 ( STRING_8 , IDENT_10 , IDENT_0 ) ; org . kie . api . runtime . IDENT_11 IDENT_12 = IDENT_7 . METHOD_3 ( ) ; try { final java . util . ArrayList < java . lang . Integer > result = new java . util . ArrayList ( ) ; IDENT_12 . METHOD_4 ( STRING_9 , result ) ; int id = 1 ; final org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_4 IDENT_13 = new org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_5 ( ( id ++ ) ) ; final org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_5 IDENT_14 = new org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_5 ( ( id ++ ) ) ; final org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_5 IDENT_15 = new org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_6 ( ( id ++ ) ) ; final org . drools . compiler . IDENT_1 . IDENT_2 . IDENT_3 IDENT_16 = new org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_7 ( ( id ++ ) ) ; final org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_7 IDENT_17 = new org . drools . compiler . IDENT_1 . IDENT_2 . METHOD_7 ( id ) ; IDENT_17 . METHOD_8 ( IDENT_14 ) ; IDENT_12 . insert ( IDENT_13 ) ; IDENT_12 . insert ( IDENT_14 ) ; final org . kie . api . runtime . rule . IDENT_18 IDENT_19 = IDENT_12 . insert ( IDENT_15 ) ; final org . kie . api . runtime . rule . IDENT_18 IDENT_20 = IDENT_12 . insert ( IDENT_16 ) ; final org . kie . api . runtime . rule . IDENT_18 IDENT_21 = IDENT_12 . insert ( IDENT_17 ) ; IDENT_12 . METHOD_9 ( ) ; result . METHOD_10 ( ) ; IDENT_12 . update ( IDENT_19 , IDENT_15 ) ; IDENT_12 . update ( IDENT_21 , IDENT_17 ) ; IDENT_12 . METHOD_9 ( ) ; result . METHOD_10 ( ) ; IDENT_12 . update ( IDENT_19 , IDENT_15 ) ; IDENT_16 . METHOD_8 ( IDENT_15 ) ; IDENT_12 . update ( IDENT_20 , IDENT_16 ) ; IDENT_12 . METHOD_9 ( ) ; final java . util . ArrayList < java . lang . Integer > actual = new java . util . ArrayList ( result ) ; java . util . Collections . METHOD_11 ( actual ) ; result . METHOD_10 ( ) ; IDENT_12 . METHOD_12 ( ) ; IDENT_12 = IDENT_7 . METHOD_3 ( ) ; IDENT_12 . METHOD_4 ( STRING_9 , result ) ; IDENT_12 . insert ( IDENT_13 ) ; IDENT_12 . insert ( IDENT_14 ) ; IDENT_12 . insert ( IDENT_15 ) ; IDENT_12 . insert ( IDENT_16 ) ; IDENT_12 . insert ( IDENT_17 ) ; IDENT_12 . METHOD_9 ( ) ; final java . util . ArrayList < java . lang . Integer > expected = new java . util . ArrayList ( result ) ; java . util . Collections . METHOD_11 ( expected ) ; "<AssertPlaceHolder>" ; } finally { IDENT_12 . METHOD_12 ( ) ; } } METHOD_11 ( org . drools . core . util . Map ) { org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > root = new org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > ( null ) ; org . drools . core . util . Map < IDENT_23 , org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > > map = new org . drools . core . util . HashMap < IDENT_23 , org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > > ( ) ; for ( IDENT_23 element : IDENT_24 . METHOD_13 ( ) ) { IDENT_23 key = element ; org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > node = map . get ( key ) ; if ( node == null ) { node = new org . drools . core . util . IDENT_22 . Node ( key , element ) ; map . put ( key , node ) ; } else if ( ( node . METHOD_14 ( ) ) == null ) { node . METHOD_15 ( element ) ; } org . drools . core . util . Collection < IDENT_23 > IDENT_25 = IDENT_24 . get ( key ) ; if ( IDENT_25 . isEmpty ( ) ) { root . METHOD_16 ( node ) ; } else { for ( IDENT_23 IDENT_26 : IDENT_25 ) { IDENT_23 IDENT_27 = IDENT_26 ; org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > IDENT_28 = map . get ( IDENT_27 ) ; if ( IDENT_28 == null ) { IDENT_28 = new org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > ( IDENT_27 ) ; map . put ( IDENT_27 , IDENT_28 ) ; } if ( ! ( IDENT_28 . IDENT_29 . contains ( node ) ) ) { IDENT_28 . METHOD_16 ( node ) ; } } } } java . util . Iterator < org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > > IDENT_30 = map . values ( ) . iterator ( ) ; while ( IDENT_30 . hasNext ( ) ) { org . drools . core . util . IDENT_22 . Node < IDENT_23 , IDENT_23 > n = IDENT_30 . next ( ) ; if ( ( n . METHOD_14 ( ) ) == null ) root . METHOD_16 ( n ) ; } org . drools . core . util . List < IDENT_23 > IDENT_31 = new java . util . IDENT_32 < IDENT_23 > ( ) ; root . accept ( IDENT_31 ) ; return IDENT_31 ; }
org . junit . Assert . assertEquals ( expected , actual ) 