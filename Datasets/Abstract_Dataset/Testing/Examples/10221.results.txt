METHOD_0 ( ) { double [ ] IDENT_0 = new double [ ] { FLOAT_0 , FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 } ; for ( int IDENT_1 = 0 ; IDENT_1 < 5 ; ++ IDENT_1 ) { for ( double x = FLOAT_4 ; x < FLOAT_5 ; x += FLOAT_6 ) { org . apache . commons . math4 . analysis . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 ( 1 , IDENT_1 , 0 , x ) ; org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 IDENT_5 = IDENT_4 . exp ( ) . log ( ) ; org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 IDENT_6 = IDENT_5 . METHOD_2 ( IDENT_4 ) ; for ( int n = 0 ; n <= IDENT_1 ; ++ n ) { "<AssertPlaceHolder>" ; } } } } METHOD_3 ( int [ ] ) { return data [ compiler . METHOD_4 ( IDENT_7 ) ] ; }
org . junit . Assert . assertEquals ( 0.0 , IDENT_6 . METHOD_3 ( n ) , IDENT_0 [ n ] ) 