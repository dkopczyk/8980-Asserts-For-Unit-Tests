METHOD_0 ( ) { org . kie . workbench . common . widgets . client . datamodel . IDENT_0 IDENT_1 = mock ( org . kie . workbench . common . widgets . client . datamodel . IDENT_0 . class ) ; org . drools . workbench . models . datamodel . rule . IDENT_2 pattern = new org . drools . workbench . models . datamodel . rule . METHOD_1 ( ) ; org . drools . workbench . models . datamodel . rule . IDENT_3 IDENT_4 = new org . drools . workbench . models . datamodel . rule . METHOD_2 ( ) ; IDENT_4 . METHOD_3 ( STRING_0 ) ; IDENT_4 . METHOD_4 ( STRING_1 ) ; IDENT_4 . METHOD_5 ( STRING_2 ) ; IDENT_4 . METHOD_6 ( STRING_3 ) ; pattern . METHOD_7 ( IDENT_4 ) ; model . METHOD_8 ( pattern ) ; when ( IDENT_1 . METHOD_9 ( STRING_1 , STRING_2 ) ) . thenReturn ( STRING_3 ) ; org . drools . workbench . IDENT_5 . IDENT_6 . rule . client . IDENT_7 . util . IDENT_8 helper = new org . drools . workbench . IDENT_5 . IDENT_6 . rule . client . IDENT_7 . util . METHOD_10 ( model , IDENT_1 , STRING_1 , STRING_2 , IDENT_4 , STRING_4 , new org . kie . IDENT_9 . project . datamodel . IDENT_1 . METHOD_11 ( ) ) ; helper . METHOD_12 ( STRING_0 , new org . IDENT_10 . client . IDENT_11 . IDENT_12 < java . lang . Boolean > ( ) { @ org . drools . workbench . IDENT_5 . IDENT_6 . rule . client . IDENT_7 . Override public void METHOD_13 ( java . lang . Boolean result ) { "<AssertPlaceHolder>" ; } } ) ; } METHOD_13 ( org . kie . IDENT_9 . project . datamodel . IDENT_1 . IDENT_13 [ ] ) { for ( org . kie . IDENT_9 . project . datamodel . IDENT_1 . IDENT_13 field : fields ) { final java . lang . String IDENT_14 = field . getName ( ) ; if ( ! ( IDENT_15 . METHOD_14 ( IDENT_14 ) ) ) { IDENT_16 . METHOD_15 ( IDENT_14 ) ; } } }
org . junit . Assert . assertTrue ( result ) 