METHOD_0 ( ) { double min ; double max ; double expected ; double result ; double IDENT_0 ; double [ ] IDENT_1 = new double [ ] { - 1.0 , FLOAT_0 } ; org . apache . commons . math4 . analysis . IDENT_2 . IDENT_3 f = new org . apache . commons . math4 . analysis . IDENT_2 . METHOD_1 ( IDENT_1 ) ; org . apache . commons . math4 . analysis . IDENT_4 . IDENT_5 IDENT_6 = new org . apache . commons . math4 . analysis . IDENT_4 . METHOD_2 ( ) ; min = 0.0 ; max = 1.0 ; expected = FLOAT_1 ; IDENT_0 = org . apache . commons . math4 . util . IDENT_7 . max ( IDENT_6 . METHOD_3 ( ) , org . apache . commons . math4 . util . IDENT_7 . METHOD_4 ( ( expected * ( IDENT_6 . METHOD_5 ( ) ) ) ) ) ; result = IDENT_6 . METHOD_6 ( 100 , f , min , max ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . apache . commons . math4 . analysis . IDENT_8 , double , double , double ) { if ( function == null ) { throw new org . apache . commons . math4 . exception . METHOD_7 ( org . apache . commons . math4 . exception . util . IDENT_9 . IDENT_10 ) ; } final org . apache . commons . math4 . analysis . IDENT_4 . IDENT_11 IDENT_6 = new org . apache . commons . math4 . analysis . IDENT_4 . METHOD_8 ( IDENT_12 ) ; return IDENT_6 . METHOD_6 ( Integer . MAX_VALUE , function , IDENT_13 , IDENT_14 ) ; }
org . junit . Assert . assertEquals ( expected , result , IDENT_0 ) 