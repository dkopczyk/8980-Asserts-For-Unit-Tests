METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; final org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 IDENT_5 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_6 = asList ( IDENT_4 , IDENT_5 ) ; doReturn ( IDENT_6 ) . when ( IDENT_7 ) . METHOD_1 ( ) ; when ( IDENT_4 . METHOD_2 ( ) ) . thenReturn ( asList ( IDENT_4 ) ) ; when ( IDENT_5 . METHOD_2 ( ) ) . thenReturn ( asList ( IDENT_5 ) ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_8 > IDENT_9 = IDENT_7 . METHOD_2 ( ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_8 > IDENT_10 = asList ( IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_8 > IDENT_11 = super . METHOD_2 ( ) ; IDENT_11 . addAll ( METHOD_3 ( METHOD_4 ( ) ) ) ; IDENT_11 . addAll ( METHOD_3 ( METHOD_5 ( ) ) ) ; return IDENT_11 ; }
org . junit . Assert . assertEquals ( IDENT_10 , IDENT_9 ) 