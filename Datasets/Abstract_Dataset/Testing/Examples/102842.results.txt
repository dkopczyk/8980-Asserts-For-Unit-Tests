METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; final org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 IDENT_5 = new org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; final org . kie . IDENT_0 . model . api . METHOD_1 IDENT_0 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 . class ) ; final org . kie . IDENT_0 . model . api . METHOD_1 IDENT_6 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 . class ) ; METHOD_2 ( IDENT_5 ) ; when ( IDENT_0 . METHOD_3 ( ) ) . thenReturn ( singletonList ( IDENT_6 ) ) ; org . kie . workbench . common . IDENT_0 . backend . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_4 ( IDENT_4 , IDENT_0 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_8 = singletonList ( IDENT_5 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_9 = IDENT_4 . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( ( IDENT_10 ) == null ) { IDENT_10 = new java . util . ArrayList ( ) ; } return this . IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_9 ) 