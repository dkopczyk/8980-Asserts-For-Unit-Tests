METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_3 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_4 = asList ( mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) , mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ) ; final org . kie . workbench . common . IDENT_0 . api . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_5 . IDENT_6 . IDENT_7 . class ) ; when ( IDENT_9 . METHOD_1 ( ) ) . thenReturn ( IDENT_8 ) ; when ( IDENT_10 . append ( IDENT_3 , IDENT_8 ) ) . thenReturn ( IDENT_4 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_11 = IDENT_12 . create ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } create ( org . IDENT_13 . backend . IDENT_14 . Path ) { try { final java . lang . String IDENT_15 = path . METHOD_2 ( ) ; final java . lang . String IDENT_16 = METHOD_3 ( path ) ; final java . lang . String IDENT_17 = path . METHOD_4 ( ) ; final java . lang . String IDENT_18 = IDENT_19 . METHOD_5 ( path ) ; return new org . kie . workbench . common . IDENT_0 . api . IDENT_1 . IDENT_20 . METHOD_6 ( IDENT_15 , IDENT_16 , IDENT_17 , IDENT_18 ) ; } catch ( final java . lang . Exception e ) { throw new org . kie . workbench . common . IDENT_0 . backend . IDENT_1 . types . exceptions . METHOD_7 ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_11 ) 