METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_3 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_4 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_5 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_6 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_7 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_8 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_9 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_10 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_11 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 IDENT_12 = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final java . lang . String IDENT_13 = "name" ; final java . lang . String IDENT_14 = STRING_0 ; when ( IDENT_12 . getName ( ) ) . thenReturn ( IDENT_13 ) ; when ( IDENT_12 . getType ( ) ) . thenReturn ( IDENT_14 ) ; when ( IDENT_4 . getType ( ) ) . thenReturn ( IDENT_13 ) ; when ( IDENT_5 . getType ( ) ) . thenReturn ( IDENT_13 ) ; when ( IDENT_6 . getType ( ) ) . thenReturn ( IDENT_13 ) ; when ( IDENT_7 . getType ( ) ) . thenReturn ( IDENT_14 ) ; when ( IDENT_7 . METHOD_1 ( ) ) . thenReturn ( true ) ; when ( IDENT_15 . METHOD_2 ( ) ) . thenReturn ( asList ( IDENT_4 , IDENT_5 , IDENT_6 , IDENT_7 ) ) ; doReturn ( IDENT_8 ) . when ( handler ) . parent ( IDENT_4 ) ; doReturn ( IDENT_9 ) . when ( handler ) . parent ( IDENT_5 ) ; doReturn ( IDENT_10 ) . when ( handler ) . parent ( IDENT_6 ) ; doReturn ( IDENT_11 ) . when ( handler ) . parent ( IDENT_7 ) ; doReturn ( java . util . Optional . of ( IDENT_12 ) ) . when ( handler ) . METHOD_3 ( IDENT_3 ) ; doReturn ( false ) . when ( handler ) . METHOD_4 ( IDENT_12 ) ; METHOD_5 ( ) . when ( handler ) . METHOD_6 ( any ( ) , anyString ( ) ) ; METHOD_5 ( ) . when ( handler ) . METHOD_6 ( any ( ) ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_16 = asList ( IDENT_12 , IDENT_7 , IDENT_8 , IDENT_9 , IDENT_10 ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 > IDENT_17 = handler . METHOD_7 ( IDENT_3 ) ; verify ( handler ) . METHOD_6 ( IDENT_12 , IDENT_13 ) ; verify ( handler ) . METHOD_6 ( IDENT_8 ) ; verify ( handler ) . METHOD_6 ( IDENT_7 ) ; verify ( handler ) . METHOD_6 ( IDENT_9 ) ; verify ( handler ) . METHOD_6 ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 ) { final java . lang . String type = ( java . util . IDENT_18 . equals ( IDENT_3 . getType ( ) , IDENT_19 . METHOD_8 ( ) ) ) ? IDENT_3 . getName ( ) : IDENT_3 . getType ( ) ; METHOD_6 ( IDENT_3 , type ) ; }
org . junit . Assert . assertEquals ( IDENT_16 , IDENT_17 ) 