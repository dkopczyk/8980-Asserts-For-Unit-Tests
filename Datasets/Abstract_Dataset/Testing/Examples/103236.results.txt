METHOD_0 ( ) { final org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 reference = mock ( org . kie . workbench . common . IDENT_0 . client . IDENT_1 . types . common . IDENT_2 . class ) ; final org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 . class ) ; final java . util . Optional < org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_7 = java . util . Optional . of ( mock ( org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 . class ) ) ; final java . util . List < org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_8 = new java . util . ArrayList ( ) ; final java . lang . String IDENT_9 = STRING_0 ; when ( IDENT_10 . get ( IDENT_9 ) ) . thenReturn ( IDENT_6 ) ; when ( reference . METHOD_1 ( ) ) . thenReturn ( IDENT_9 ) ; when ( IDENT_7 . get ( ) . METHOD_2 ( ) ) . thenReturn ( IDENT_8 ) ; doReturn ( IDENT_7 ) . when ( handler ) . METHOD_3 ( IDENT_9 ) ; final org . kie . workbench . common . IDENT_0 . api . IDENT_3 . IDENT_4 . IDENT_5 IDENT_11 = handler . METHOD_4 ( reference ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String ) { return IDENT_8 . get ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_8 . get ( 0 ) ) 