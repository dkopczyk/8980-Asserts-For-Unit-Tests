METHOD_0 ( ) { final IDENT_0 . dom . Element IDENT_1 = METHOD_1 ( STRING_0 ) ; final IDENT_0 . dom . Element IDENT_2 = METHOD_1 ( STRING_1 ) ; final IDENT_0 . dom . Element IDENT_3 = METHOD_1 ( STRING_2 ) ; final org . IDENT_4 . client . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 < IDENT_0 . dom . Element > IDENT_9 = mock ( org . IDENT_4 . client . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . class ) ; IDENT_9 . length = 3 ; when ( IDENT_9 . get ( 0 ) ) . thenReturn ( IDENT_1 ) ; when ( IDENT_9 . get ( 1 ) ) . thenReturn ( IDENT_2 ) ; when ( IDENT_9 . get ( 2 ) ) . thenReturn ( IDENT_3 ) ; doReturn ( IDENT_9 ) . when ( view ) . METHOD_2 ( ) ; doReturn ( STRING_0 ) . when ( view ) . METHOD_3 ( ) ; final IDENT_0 . dom . Element actual = view . METHOD_4 ( ) . METHOD_5 ( RuntimeException :: new ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { final java . util . List < IDENT_0 . dom . Element > IDENT_10 = METHOD_6 ( ) ; final java . util . Optional < IDENT_0 . dom . Element > IDENT_11 = METHOD_7 ( IDENT_10 ) . METHOD_8 ( ( IDENT_12 ) -> utils . METHOD_9 ( IDENT_10 , IDENT_12 ) ) ; return METHOD_9 . METHOD_10 ( ) ? METHOD_9 : utils . METHOD_11 ( IDENT_10 ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , actual ) 