METHOD_0 ( ) { org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . apache . commons . math4 . geometry . IDENT_4 . IDENT_5 . METHOD_1 ( METHOD_2 ( STRING_0 ) ) ; org . apache . commons . IDENT_6 . IDENT_7 random = org . apache . commons . IDENT_6 . simple . IDENT_8 . create ( IDENT_8 . IDENT_9 , - INT_0 ) ; int IDENT_10 = 1000 ; for ( int i = 0 ; i < IDENT_10 ; i ++ ) { org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_11 IDENT_12 = IDENT_11 . IDENT_13 ; org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_11 IDENT_14 = new org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . METHOD_3 ( ( ( 2 * ( random . METHOD_4 ( ) ) ) - 1 ) , ( ( 2 * ( random . METHOD_4 ( ) ) ) - 1 ) , ( ( 2 * ( random . METHOD_4 ( ) ) ) - 1 ) ) . METHOD_5 ( ) ; org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_15 line = new org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_12 , IDENT_12 . add ( IDENT_14 ) , IDENT_3 . METHOD_7 ( ) ) ; org . apache . commons . math4 . geometry . IDENT_4 . IDENT_16 < org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_17 > IDENT_18 = IDENT_3 . METHOD_8 ( IDENT_12 , line ) ; if ( IDENT_18 != null ) { org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . METHOD_3 IDENT_19 = ( ( org . apache . commons . math4 . geometry . IDENT_0 . IDENT_1 . IDENT_20 ) ( IDENT_18 . METHOD_9 ( ) ) ) . METHOD_10 ( line ) ; double IDENT_21 = IDENT_14 . METHOD_11 ( IDENT_19 . METHOD_12 ( IDENT_12 ) ) ; "<AssertPlaceHolder>" ; } } } METHOD_12 ( org . apache . commons . math4 . IDENT_22 . IDENT_23 ) { org . apache . commons . math4 . util . IDENT_24 . METHOD_13 ( IDENT_22 , IDENT_25 . IDENT_26 ) ; if ( ( IDENT_22 . IDENT_27 . METHOD_14 ( ) ) == 0 ) { return this ; } if ( ( IDENT_27 . METHOD_14 ( ) ) == 0 ) { return IDENT_22 . METHOD_15 ( ) ; } java . math . BigInteger IDENT_28 = null ; java . math . BigInteger IDENT_29 = null ; if ( IDENT_30 . equals ( IDENT_22 . IDENT_30 ) ) { IDENT_28 = IDENT_27 . METHOD_12 ( IDENT_22 . IDENT_27 ) ; IDENT_29 = IDENT_30 ; } else { IDENT_28 = IDENT_27 . METHOD_16 ( IDENT_22 . IDENT_30 ) . METHOD_12 ( IDENT_22 . IDENT_27 . METHOD_16 ( IDENT_30 ) ) ; IDENT_29 = IDENT_30 . METHOD_16 ( IDENT_22 . IDENT_30 ) ; } return new org . apache . commons . math4 . IDENT_22 . METHOD_17 ( IDENT_28 , IDENT_29 ) ; }
org . junit . Assert . assertTrue ( ( METHOD_11 > 0 ) ) 