METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_1 . METHOD_2 ( STRING_0 ) ) . thenReturn ( IDENT_2 ) ; when ( IDENT_2 . METHOD_3 ( ) ) . thenReturn ( IDENT_3 ) ; javax . sql . IDENT_4 result = IDENT_5 . METHOD_4 ( IDENT_0 ) ; verify ( IDENT_1 , times ( 1 ) ) . METHOD_2 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . kie . workbench . common . IDENT_6 . IDENT_7 . management . model . IDENT_8 ) { org . kie . workbench . common . IDENT_6 . IDENT_7 . management . backend . core . IDENT_9 . IDENT_10 . IDENT_11 IDENT_3 = IDENT_12 . get ( IDENT_13 . METHOD_5 ( ) ) ; if ( IDENT_3 != null ) { if ( IDENT_3 . METHOD_6 ( ) ) { IDENT_3 . METHOD_7 ( IDENT_14 . IDENT_15 ) ; } org . kie . workbench . common . IDENT_6 . IDENT_7 . management . model . IDENT_8 IDENT_16 = IDENT_17 . get ( IDENT_13 . METHOD_5 ( ) ) ; if ( IDENT_16 != null ) { org . kie . workbench . common . IDENT_6 . IDENT_7 . management . model . IDENT_8 IDENT_18 = new org . kie . workbench . common . IDENT_6 . IDENT_7 . management . model . METHOD_8 ( IDENT_13 . METHOD_5 ( ) , true , IDENT_13 . METHOD_9 ( ) , true ) ; IDENT_17 . put ( IDENT_13 . METHOD_5 ( ) , IDENT_18 ) ; } return IDENT_3 ; } else { throw new java . lang . Exception ( ( ( STRING_1 + IDENT_13 ) + STRING_2 ) ) ; } }
org . junit . Assert . assertEquals ( IDENT_3 , result ) 