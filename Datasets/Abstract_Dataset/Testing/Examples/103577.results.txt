METHOD_0 ( ) { java . net . URL url = this . getClass ( ) . getResource ( STRING_0 ) ; org . IDENT_0 . java . nio . fs . file . IDENT_1 p = new org . IDENT_0 . java . nio . fs . file . METHOD_1 ( ) ; org . IDENT_0 . java . nio . file . Path path = p . getPath ( url . METHOD_2 ( ) ) ; final org . IDENT_2 . common . services . project . model . IDENT_3 module = IDENT_4 . METHOD_3 ( org . IDENT_0 . backend . server . util . IDENT_5 . convert ( path ) ) ; final org . kie . workbench . common . services . backend . builder . core . Builder builder = new org . kie . workbench . common . services . backend . builder . core . Builder ( module , IDENT_6 , IDENT_4 , IDENT_7 , new java . util . ArrayList ( ) , IDENT_8 , IDENT_9 , METHOD_4 ( ) , IDENT_10 ) ; final org . IDENT_2 . common . services . project . builder . model . IDENT_11 results = builder . build ( ) ; if ( ! ( results . METHOD_5 ( ) . isEmpty ( ) ) ) { for ( org . IDENT_2 . common . services . project . builder . model . IDENT_12 m : results . METHOD_5 ( ) ) { org . kie . workbench . common . services . backend . builder . core . IDENT_13 . logger . debug ( m . getText ( ) ) ; } } "<AssertPlaceHolder>" ; } isEmpty ( ) { return commands . isEmpty ( ) ; }
org . junit . Assert . assertTrue ( results . METHOD_5 ( ) . isEmpty ( ) ) 