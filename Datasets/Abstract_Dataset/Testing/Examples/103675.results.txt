METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( eq ( INT_0 ) , eq ( INT_0 ) ) ) . thenReturn ( IDENT_1 ) ; org . kie . workbench . common . IDENT_2 . core . graph . Node < org . kie . workbench . common . IDENT_2 . core . graph . content . view . IDENT_3 < ? > , org . kie . workbench . common . IDENT_2 . core . graph . IDENT_4 > node = IDENT_5 . METHOD_4 ( 20 , 20 , 100 , 100 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( double , double , double , double , org . kie . workbench . common . IDENT_2 . core . graph . Element ) { org . kie . workbench . common . IDENT_2 . core . graph . content . view . IDENT_7 IDENT_8 ; double IDENT_9 = 0 ; double IDENT_10 = 0 ; if ( IDENT_6 != null ) { IDENT_8 = org . kie . workbench . common . IDENT_2 . core . graph . util . IDENT_11 . METHOD_5 ( IDENT_6 . METHOD_6 ( ) ) ; IDENT_9 = x + ( IDENT_8 . METHOD_7 ( ) ) ; IDENT_10 = y + ( IDENT_8 . METHOD_8 ( ) ) ; } org . kie . workbench . common . IDENT_2 . core . graph . Node < org . kie . workbench . common . IDENT_2 . core . graph . content . view . IDENT_3 < ? > , org . kie . workbench . common . IDENT_2 . core . graph . IDENT_4 > element ; org . kie . workbench . common . IDENT_2 . core . graph . content . view . IDENT_7 [ ] IDENT_12 = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . IDENT_7 [ 5 ] ; IDENT_12 [ 0 ] = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 ( IDENT_9 , IDENT_10 ) ; IDENT_12 [ 1 ] = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 ( ( IDENT_9 + IDENT_13 ) , IDENT_10 ) ; IDENT_12 [ 2 ] = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 ( ( IDENT_9 + ( IDENT_13 / 2 ) ) , ( IDENT_10 + ( IDENT_14 / 2 ) ) ) ; IDENT_12 [ 3 ] = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 ( IDENT_9 , ( IDENT_10 + IDENT_14 ) ) ; IDENT_12 [ 4 ] = new org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 ( ( IDENT_9 + IDENT_13 ) , ( IDENT_10 + IDENT_14 ) ) ; for ( org . kie . workbench . common . IDENT_2 . core . graph . content . view . METHOD_9 IDENT_15 : IDENT_12 ) { element = METHOD_10 ( IDENT_15 . METHOD_7 ( ) , IDENT_15 . METHOD_8 ( ) ) ; if ( element != null ) { if ( element != IDENT_6 ) { return element ; } } } return null ; }
org . junit . Assert . assertNotNull ( node ) 