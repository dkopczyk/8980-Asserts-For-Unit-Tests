METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . client . core . util . IDENT_2 IDENT_3 = mock ( com . IDENT_0 . IDENT_1 . client . core . util . IDENT_2 . class ) ; com . IDENT_0 . IDENT_1 . client . core . IDENT_4 IDENT_5 = mock ( com . IDENT_0 . IDENT_1 . client . core . IDENT_4 . class ) ; when ( IDENT_6 . METHOD_1 ( ) ) . thenReturn ( IDENT_3 ) ; when ( IDENT_3 . METHOD_2 ( ) ) . thenReturn ( IDENT_5 ) ; when ( IDENT_3 . METHOD_3 ( eq ( IDENT_7 . IDENT_8 ) , eq ( 1.0 ) ) ) . thenReturn ( STRING_0 ) ; java . lang . String result = org . kie . workbench . common . IDENT_9 . client . IDENT_1 . util . IDENT_10 . METHOD_4 ( IDENT_11 , IDENT_7 . IDENT_8 , 1 , 3 , INT_0 , INT_1 , STRING_1 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 , times ( 1 ) ) . METHOD_5 ( eq ( INT_0 ) , eq ( INT_1 ) ) ; verify ( IDENT_3 , times ( 1 ) ) . METHOD_6 ( ) ; verify ( IDENT_5 , times ( 1 ) ) . METHOD_7 ( eq ( STRING_1 ) ) ; verify ( IDENT_5 , times ( 1 ) ) . METHOD_8 ( eq ( 0.0 ) , eq ( 0.0 ) , eq ( FLOAT_0 ) , eq ( FLOAT_1 ) ) ; verify ( IDENT_6 , times ( 1 ) ) . METHOD_9 ( eq ( IDENT_5 ) , eq ( 1.0 ) , eq ( new com . IDENT_0 . IDENT_1 . client . core . types . METHOD_10 ( 1.0 , FLOAT_2 , FLOAT_0 , FLOAT_1 ) ) ) ; } METHOD_4 ( org . kie . workbench . common . IDENT_9 . client . IDENT_1 . IDENT_12 . IDENT_13 , com . IDENT_0 . IDENT_1 . shared . core . types . IDENT_7 , int , int , int , int , java . lang . String ) { final com . IDENT_0 . IDENT_1 . client . core . IDENT_14 . IDENT_15 IDENT_6 = IDENT_11 . METHOD_11 ( ) ; final com . IDENT_0 . IDENT_1 . client . core . util . IDENT_2 IDENT_3 = IDENT_6 . METHOD_1 ( ) ; IDENT_3 . METHOD_5 ( IDENT_16 , IDENT_17 ) ; if ( null != IDENT_18 ) { IDENT_3 . METHOD_2 ( ) . METHOD_7 ( IDENT_18 ) ; IDENT_3 . METHOD_2 ( ) . METHOD_8 ( 0 , 0 , IDENT_16 , IDENT_17 ) ; } IDENT_6 . METHOD_9 ( IDENT_3 . METHOD_2 ( ) , 1 , new com . IDENT_0 . IDENT_1 . client . core . types . METHOD_10 ( x , y , IDENT_16 , IDENT_17 ) ) ; final java . lang . String data = IDENT_3 . METHOD_3 ( IDENT_19 , 1 ) ; IDENT_3 . METHOD_6 ( ) ; return data ; }
org . junit . Assert . assertEquals ( STRING_0 , result ) 