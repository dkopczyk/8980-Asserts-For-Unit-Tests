METHOD_0 ( ) { control . init ( IDENT_0 ) ; when ( IDENT_1 . METHOD_1 ( IDENT_2 . IDENT_3 ) ) . thenReturn ( true ) ; control . METHOD_2 ( element ) ; "<AssertPlaceHolder>" ; org . kie . workbench . common . IDENT_4 . core . client . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . verify ( IDENT_1 ) . METHOD_3 ( eq ( IDENT_2 . IDENT_3 ) , IDENT_9 . METHOD_4 ( ) ) ; final org . kie . workbench . common . IDENT_4 . core . client . IDENT_10 . view . event . IDENT_11 IDENT_12 = IDENT_9 . getValue ( ) ; IDENT_12 . METHOD_5 ( new org . kie . workbench . common . IDENT_4 . core . client . IDENT_10 . view . event . METHOD_6 ( 0 , 1 , org . kie . workbench . common . IDENT_4 . core . client . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_13 , org . kie . workbench . common . IDENT_4 . core . client . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_14 ) ) ; verify ( IDENT_15 ) . METHOD_7 ( eq ( IDENT_16 . IDENT_17 . IDENT_18 ) ) ; } METHOD_8 ( org . kie . workbench . common . IDENT_4 . core . graph . Element ) { return IDENT_19 . METHOD_9 ( ) . test ( e . METHOD_10 ( ) ) ; }
org . junit . Assert . assertTrue ( control . METHOD_8 ( element ) ) 