METHOD_0 ( ) { org . apache . commons . math4 . linear . IDENT_0 m = new org . apache . commons . math4 . linear . METHOD_1 ( IDENT_1 ) ; double [ ] IDENT_2 = METHOD_2 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; m . METHOD_3 ( 1 , IDENT_2 ) ; METHOD_4 ( IDENT_2 , m . METHOD_5 ( 1 ) ) ; try { m . METHOD_3 ( ( - 1 ) , IDENT_2 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math4 . exception . IDENT_4 ex ) { } try { m . METHOD_3 ( 0 , new double [ 5 ] ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( org . apache . commons . math4 . linear . IDENT_5 ex ) { } } METHOD_5 ( int ) { org . apache . commons . math4 . linear . IDENT_6 . METHOD_6 ( this , column ) ; final int IDENT_7 = METHOD_7 ( ) ; final double [ ] out = new double [ IDENT_7 ] ; for ( int i = 0 ; i < IDENT_7 ; ++ i ) { out [ i ] = METHOD_8 ( i , column ) ; } return out ; }
org . junit . Assert . assertTrue ( ( ( IDENT_2 [ 0 ] ) != ( m . METHOD_5 ( 1 ) [ 0 ] ) ) ) 