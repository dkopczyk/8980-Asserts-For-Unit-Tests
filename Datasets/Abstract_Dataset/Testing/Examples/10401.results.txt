METHOD_0 ( ) { org . apache . commons . math4 . linear . IDENT_0 < org . apache . commons . math4 . IDENT_1 . IDENT_2 > m = new org . apache . commons . math4 . linear . METHOD_1 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; m . METHOD_2 ( 0 , IDENT_4 [ 0 ] ) ; METHOD_3 ( IDENT_4 [ 0 ] , m . METHOD_4 ( 0 ) ) ; try { m . METHOD_2 ( ( - 1 ) , IDENT_4 [ 0 ] ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math4 . exception . IDENT_5 ex ) { } try { m . METHOD_2 ( 0 , new org . apache . commons . math4 . IDENT_1 . IDENT_2 [ 5 ] ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( org . apache . commons . math4 . linear . IDENT_6 ex ) { } } METHOD_4 ( int ) { org . apache . commons . math4 . linear . IDENT_7 . METHOD_5 ( this , row ) ; final int IDENT_8 = METHOD_6 ( ) ; final double [ ] out = new double [ IDENT_8 ] ; for ( int i = 0 ; i < IDENT_8 ; ++ i ) { out [ i ] = METHOD_7 ( row , i ) ; } return out ; }
org . junit . Assert . assertTrue ( ( ( IDENT_4 [ 0 ] [ 0 ] ) != ( m . METHOD_4 ( 0 ) [ 0 ] ) ) ) 