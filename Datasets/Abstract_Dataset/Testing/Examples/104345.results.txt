METHOD_0 ( ) { final int count = INT_0 ; final java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < count ; i ++ ) { this . queue . add ( new com . IDENT_2 . IDENT_3 . core . nio . impl . METHOD_2 ( IDENT_1 . METHOD_3 ( INT_1 ) , null ) ) ; } "<AssertPlaceHolder>" ; final long start = java . lang . System . currentTimeMillis ( ) ; final java . util . IDENT_4 < com . IDENT_2 . IDENT_3 . core . nio . impl . METHOD_2 > IDENT_5 = new java . util . IDENT_4 < com . IDENT_2 . IDENT_3 . core . nio . impl . METHOD_2 > ( ) ; this . queue . METHOD_4 ( new com . IDENT_2 . IDENT_3 . core . nio . impl . IDENT_6 . METHOD_5 ( ) { public boolean METHOD_6 ( final com . IDENT_2 . IDENT_3 . core . nio . impl . METHOD_2 IDENT_7 ) { if ( ( IDENT_7 . METHOD_7 ( ) ) > INT_2 ) { IDENT_5 . METHOD_8 ( IDENT_7 ) ; com . IDENT_2 . IDENT_3 . core . nio . impl . IDENT_8 . this . queue . remove ( IDENT_7 ) ; } return true ; } } ) ; System . out . println ( IDENT_5 . size ( ) ) ; System . out . println ( this . queue . size ( ) ) ; System . out . println ( ( ( java . lang . System . currentTimeMillis ( ) ) - start ) ) ; } size ( ) { return map . size ( ) ; }
org . junit . Assert . assertEquals ( count , this . queue . size ( ) ) 