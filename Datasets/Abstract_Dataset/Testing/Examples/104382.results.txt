METHOD_0 ( ) { org . easymock . EasyMock . expect ( this . IDENT_0 . METHOD_1 ( ) ) . andReturn ( this . IDENT_1 ) ; this . IDENT_1 . METHOD_2 ( "test" ) ; org . easymock . EasyMock . METHOD_3 ( ) ; com . IDENT_2 . IDENT_3 . client . extension . IDENT_4 . IDENT_5 builder = com . IDENT_2 . IDENT_3 . client . extension . IDENT_4 . IDENT_5 . METHOD_4 ( "test" ) . METHOD_5 ( STRING_0 ) ; final com . IDENT_2 . IDENT_3 . client . IDENT_1 . IDENT_6 IDENT_7 = new com . IDENT_2 . IDENT_3 . client . IDENT_1 . METHOD_6 ( true , null , 0 , null ) ; com . IDENT_2 . IDENT_3 . client . IDENT_1 . IDENT_8 cb = new com . IDENT_2 . IDENT_3 . client . IDENT_1 . METHOD_7 ( ) { @ com . IDENT_2 . IDENT_3 . client . extension . IDENT_4 . Override public void METHOD_8 ( com . IDENT_2 . IDENT_3 . client . IDENT_1 . METHOD_6 result ) { "<AssertPlaceHolder>" ; } @ com . IDENT_2 . IDENT_3 . client . extension . IDENT_4 . Override public void METHOD_9 ( java . lang . Throwable e ) { org . junit . Assert . fail ( ) ; } } ; this . IDENT_1 . METHOD_10 ( builder . build ( this . IDENT_9 ) , cb ) ; org . easymock . EasyMock . METHOD_3 ( ) ; this . control . replay ( ) ; this . IDENT_10 . METHOD_11 ( builder , cb ) ; this . control . verify ( ) ; } METHOD_8 ( com . IDENT_2 . IDENT_3 . client . IDENT_1 . METHOD_6 ) { org . junit . Assert . assertSame ( IDENT_7 , result ) ; }
org . junit . Assert . assertSame ( IDENT_7 , result ) 