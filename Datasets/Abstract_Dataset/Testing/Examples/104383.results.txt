METHOD_0 ( ) { org . easymock . EasyMock . expect ( this . IDENT_0 . METHOD_1 ( ) ) . andReturn ( this . IDENT_1 ) ; this . IDENT_1 . METHOD_2 ( "test" ) ; org . easymock . EasyMock . METHOD_3 ( ) ; this . IDENT_1 . METHOD_4 ( ) ; org . easymock . EasyMock . METHOD_3 ( ) ; this . control . replay ( ) ; "<AssertPlaceHolder>" ; this . IDENT_2 . METHOD_5 ( ) ; this . control . verify ( ) ; } METHOD_6 ( java . lang . String ) { if ( ! ( this . IDENT_3 ) ) { java . util . concurrent . IDENT_4 < com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 > task = this . IDENT_8 . get ( IDENT_9 ) ; if ( task == null ) { task = new java . util . concurrent . IDENT_4 < com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 > ( new java . util . concurrent . IDENT_10 < com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 > ( ) { @ com . IDENT_5 . IDENT_6 . client . extension . IDENT_11 . Override public com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 call ( ) throws com . IDENT_5 . IDENT_6 . client . extension . IDENT_11 . Exception { com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 IDENT_1 = com . IDENT_5 . IDENT_6 . client . extension . IDENT_11 . IDENT_12 . this . IDENT_13 . METHOD_1 ( ) ; IDENT_1 . METHOD_2 ( IDENT_9 ) ; if ( ! ( com . IDENT_5 . IDENT_14 . core . util . StringUtils . METHOD_7 ( com . IDENT_5 . IDENT_6 . client . extension . IDENT_11 . IDENT_12 . this . IDENT_15 ) ) ) { IDENT_1 . METHOD_8 ( com . IDENT_5 . IDENT_6 . client . extension . IDENT_11 . IDENT_12 . this . IDENT_15 ) ; } return IDENT_1 ; } } ) ; java . util . concurrent . IDENT_4 < com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 > IDENT_16 = this . IDENT_8 . METHOD_9 ( IDENT_9 , task ) ; if ( IDENT_16 != null ) { task = IDENT_16 ; } else { task . run ( ) ; } } try { com . IDENT_5 . IDENT_6 . client . IDENT_1 . IDENT_7 IDENT_1 = task . get ( ) ; return IDENT_1 ; } catch ( java . util . concurrent . IDENT_17 e ) { throw com . IDENT_5 . IDENT_6 . utils . IDENT_18 . METHOD_10 ( e . METHOD_11 ( ) ) ; } catch ( java . lang . IDENT_19 e ) { java . lang . Thread . METHOD_12 ( ) . METHOD_13 ( ) ; } } else { if ( ( this . IDENT_20 ) == null ) { MOD_0 ( this ) { if ( ( this . IDENT_20 ) == null ) { this . IDENT_20 = this . IDENT_13 . METHOD_1 ( ) ; if ( ! ( com . IDENT_5 . IDENT_14 . core . util . StringUtils . METHOD_7 ( this . IDENT_15 ) ) ) { this . IDENT_20 . METHOD_8 ( this . IDENT_15 ) ; } } } } this . IDENT_20 . METHOD_2 ( IDENT_9 ) ; return this . IDENT_20 ; } throw new java . lang . IllegalStateException ( ( ( STRING_0 + IDENT_9 ) + STRING_1 ) ) ; }
org . junit . Assert . assertSame ( this . IDENT_1 , this . IDENT_2 . METHOD_6 ( "test" ) ) 