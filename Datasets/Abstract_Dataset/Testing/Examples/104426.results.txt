METHOD_0 ( ) { org . IDENT_0 . data . IDENT_1 IDENT_2 = new org . IDENT_0 . data . IDENT_1 . Builder ( ) . METHOD_1 ( STRING_0 ) . build ( ) ; org . IDENT_0 . data . spi . IDENT_3 IDENT_4 = new org . IDENT_0 . data . spi . METHOD_2 ( IDENT_2 . METHOD_3 ( ) , null ) . with ( STRING_1 , STRING_2 ) . with ( STRING_3 , STRING_4 ) ; org . IDENT_0 . data . spi . IDENT_5 < org . apache . avro . IDENT_6 . IDENT_7 > IDENT_8 = mock ( org . IDENT_0 . data . spi . IDENT_5 . class ) ; when ( repo . create ( STRING_5 , "test" , IDENT_2 , org . apache . avro . IDENT_6 . IDENT_7 . class ) ) . thenReturn ( IDENT_8 ) ; when ( IDENT_8 . METHOD_4 ( ) ) . thenReturn ( IDENT_2 ) ; org . IDENT_0 . data . spi . IDENT_9 < org . apache . avro . IDENT_6 . IDENT_7 > IDENT_10 = mock ( org . IDENT_0 . data . spi . IDENT_9 . class ) ; when ( IDENT_8 . filter ( IDENT_4 ) ) . thenReturn ( IDENT_10 ) ; java . net . URI IDENT_11 = new org . IDENT_0 . data . METHOD_5 ( IDENT_12 , STRING_5 , "test" ) . with ( STRING_1 , STRING_2 ) . with ( STRING_3 , STRING_4 ) . with ( STRING_6 , STRING_7 ) . build ( ) ; org . IDENT_0 . data . IDENT_13 < org . apache . avro . IDENT_6 . IDENT_7 > view = org . IDENT_0 . data . IDENT_14 . create ( IDENT_11 , IDENT_2 ) ; verify ( repo ) . create ( STRING_5 , "test" , IDENT_2 , org . apache . avro . IDENT_6 . IDENT_7 . class ) ; METHOD_6 ( repo ) ; verify ( IDENT_8 ) . METHOD_4 ( ) ; verify ( IDENT_8 ) . filter ( IDENT_4 ) ; METHOD_6 ( IDENT_8 ) ; METHOD_6 ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } filter ( org . IDENT_0 . data . spi . METHOD_2 ) { return new org . IDENT_0 . data . hbase . IDENT_15 < IDENT_16 > ( this , IDENT_4 ) ; }
org . junit . Assert . assertEquals ( IDENT_10 , view ) 