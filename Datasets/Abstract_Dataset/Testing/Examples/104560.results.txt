METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_1 = new com . IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_3 , new com . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_2 ( IDENT_3 , STRING_0 , STRING_1 , STRING_2 ) , new com . IDENT_0 . IDENT_1 . IDENT_5 . METHOD_3 ( ) , new com . IDENT_0 . IDENT_1 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_6 . class , new com . IDENT_7 . metrics . METHOD_5 ( ) ) ) ; com . IDENT_0 . IDENT_1 . IDENT_6 IDENT_8 = IDENT_1 . METHOD_6 ( ) ; boolean IDENT_9 = false ; for ( int i = 0 ; i < 10 ; i ++ ) { com . IDENT_0 . IDENT_1 . IDENT_6 IDENT_10 = IDENT_1 . METHOD_6 ( ) ; if ( IDENT_8 != IDENT_10 ) { IDENT_9 = true ; break ; } } "<AssertPlaceHolder>" ; } METHOD_6 ( ) { METHOD_7 ( ) ; java . util . Collection < com . IDENT_0 . IDENT_1 . IDENT_6 > IDENT_11 = IDENT_12 . values ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_6 > IDENT_13 = new java . util . ArrayList ( IDENT_11 . size ( ) ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_6 s : IDENT_11 ) { if ( s . METHOD_8 ( ) . METHOD_9 ( ) ) { IDENT_13 . add ( s ) ; } } if ( IDENT_13 . isEmpty ( ) ) { return null ; } return IDENT_14 . METHOD_10 ( IDENT_13 ) ; }
org . junit . Assert . assertTrue ( IDENT_9 ) 