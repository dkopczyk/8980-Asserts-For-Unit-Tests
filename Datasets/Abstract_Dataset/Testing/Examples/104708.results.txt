METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( INT_0 ) ; int IDENT_5 = INT_1 * INT_2 ; for ( int i = 0 ; i < IDENT_5 ; ++ i ) { java . util . UUID IDENT_6 = java . util . UUID . METHOD_2 ( ) ; IDENT_4 . METHOD_3 ( METHOD_2 . toString ( ) ) ; } double IDENT_7 = IDENT_4 . METHOD_4 ( ) ; double IDENT_8 = FLOAT_0 ; int IDENT_9 = ( ( int ) ( java . lang . Math . METHOD_5 ( ( IDENT_7 - IDENT_5 ) ) ) ) ; double IDENT_10 = ( ( double ) ( IDENT_9 ) ) / IDENT_5 ; System . out . println ( ( ( ( ( ( ( ( STRING_0 + IDENT_7 ) + STRING_1 ) + IDENT_5 ) + STRING_2 ) + IDENT_9 ) + STRING_3 ) + IDENT_10 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( ( IDENT_11 . size ( ) ) < ( IDENT_12 ) ) { return IDENT_11 . size ( ) ; } long IDENT_13 = IDENT_11 . METHOD_6 ( ) ; return IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . METHOD_7 ( IDENT_13 , IDENT_12 ) ; }
org . junit . Assert . assertTrue ( ( IDENT_10 <= IDENT_8 ) ) 