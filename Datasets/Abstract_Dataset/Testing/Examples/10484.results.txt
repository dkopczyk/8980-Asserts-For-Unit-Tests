METHOD_0 ( ) { double IDENT_0 = test ( 2 ) ; "<AssertPlaceHolder>" ; } test ( int ) { double e = FLOAT_0 ; org . apache . commons . math4 . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . commons . math4 . IDENT_1 . IDENT_4 . METHOD_1 ( e , FLOAT_1 , FLOAT_2 , FLOAT_2 ) ; org . apache . commons . math4 . analysis . IDENT_5 . IDENT_6 IDENT_7 = new org . apache . commons . math4 . analysis . IDENT_5 . METHOD_2 ( e , e ) ; org . apache . commons . math4 . IDENT_1 . events . IDENT_8 IDENT_9 = new org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . METHOD_3 ( 0 , IDENT_11 ) ; org . apache . commons . math4 . IDENT_1 . events . IDENT_8 IDENT_12 = new org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . METHOD_3 ( 1 , IDENT_11 ) ; IDENT_3 . METHOD_4 ( IDENT_9 , FLOAT_3 , e , INT_0 , IDENT_7 ) ; IDENT_3 . METHOD_4 ( IDENT_12 , FLOAT_3 , e , INT_0 , IDENT_7 ) ; double t = 0.0 ; double IDENT_0 = FLOAT_4 ; double [ ] y = new double [ ] { 0.0 , 0.0 } ; java . util . List < java . lang . Double > IDENT_13 = new java . util . ArrayList ( ) ; java . util . List < java . lang . Double > IDENT_14 = new java . util . ArrayList ( ) ; while ( t < IDENT_0 ) { t = IDENT_3 . METHOD_5 ( this , t , y , IDENT_0 , y ) ; if ( ( y [ 0 ] ) >= 1.0 ) { y [ 0 ] = 0.0 ; IDENT_13 . add ( t ) ; } if ( ( y [ 1 ] ) >= 1.0 ) { y [ 1 ] = 0.0 ; IDENT_14 . add ( t ) ; } } org . junit . Assert . assertEquals ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_15 . length , IDENT_13 . size ( ) ) ; org . junit . Assert . assertEquals ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_16 . length , IDENT_14 . size ( ) ) ; for ( int i = 0 ; i < ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_15 . length ) ; i ++ ) { org . junit . Assert . assertEquals ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_15 [ i ] , IDENT_13 . get ( i ) , FLOAT_2 ) ; } for ( int i = 0 ; i < ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_16 . length ) ; i ++ ) { org . junit . Assert . assertEquals ( org . apache . commons . math4 . IDENT_1 . events . IDENT_10 . IDENT_16 [ i ] , IDENT_14 . get ( i ) , FLOAT_2 ) ; }
org . junit . Assert . assertEquals ( FLOAT_4 , IDENT_0 , FLOAT_2 ) 