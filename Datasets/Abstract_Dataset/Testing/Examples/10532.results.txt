METHOD_0 ( ) { long [ ] IDENT_0 = new long [ ] { Long . IDENT_1 , ( Long . IDENT_1 ) + 1 , ( Long . IDENT_1 ) + 2 , Long . MAX_VALUE , ( Long . MAX_VALUE ) - 1 , ( Long . MAX_VALUE ) - 2 , - 10 , - 9 , - 8 , - 7 , - 6 , - 5 , - 4 , - 3 , - 2 , - 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , ( - 1 ) - ( ( Long . IDENT_1 ) / 2 ) , 0 - ( ( Long . IDENT_1 ) / 2 ) , 1 - ( ( Long . IDENT_1 ) / 2 ) , ( - 1 ) + ( ( Long . MAX_VALUE ) / 2 ) , 0 + ( ( Long . MAX_VALUE ) / 2 ) , 1 + ( ( Long . MAX_VALUE ) / 2 ) } ; for ( long a : IDENT_0 ) { for ( long b : IDENT_0 ) { java . math . BigInteger IDENT_2 = java . math . BigInteger . valueOf ( a ) ; java . math . BigInteger IDENT_3 = java . math . BigInteger . valueOf ( b ) ; java . math . BigInteger IDENT_4 = IDENT_2 . add ( IDENT_3 ) ; if ( ( ( IDENT_4 . compareTo ( java . math . BigInteger . valueOf ( Long . IDENT_1 ) ) ) < 0 ) || ( ( IDENT_4 . compareTo ( java . math . BigInteger . valueOf ( Long . MAX_VALUE ) ) ) > 0 ) ) { try { org . apache . commons . math4 . util . IDENT_5 . METHOD_1 ( a , b ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math4 . exception . IDENT_6 IDENT_7 ) { } } else { "<AssertPlaceHolder>" ; } } } } METHOD_1 ( int , int ) { final int IDENT_8 = a + b ; if ( ( ( a OP_0 b ) >= 0 ) && ( ( IDENT_8 OP_0 b ) < 0 ) ) { throw new org . apache . commons . math4 . exception . METHOD_2 ( org . apache . commons . math4 . exception . util . IDENT_9 . IDENT_10 , a , b ) ; } return IDENT_8 ; }
org . junit . Assert . assertEquals ( IDENT_4 , java . math . BigInteger . valueOf ( org . apache . commons . math4 . util . IDENT_5 . METHOD_1 ( a , b ) ) ) 