METHOD_0 ( ) { long [ ] array = new long [ 4 ] ; java . nio . IDENT_0 buffer = java . nio . IDENT_0 . METHOD_1 ( array ) ; buffer . METHOD_2 ( 2 ) ; buffer . put ( 2 ) . put ( 3 ) ; try { buffer . put ( 5 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . nio . IDENT_1 e ) { "<AssertPlaceHolder>" ; } } put ( byte ) { if ( IDENT_2 ) { throw new org . IDENT_3 . IDENT_4 . java . nio . METHOD_3 ( ) ; } if ( ( position ) >= ( METHOD_2 ) ) { throw new org . IDENT_3 . IDENT_4 . java . nio . METHOD_4 ( ) ; } array [ ( ( start ) + ( ( position ) ++ ) ) ] = b ; return this ; }
org . junit . Assert . assertThat ( array [ 2 ] , org . hamcrest . CoreMatchers . is ( ( ( long ) ( 0 ) ) ) ) 