METHOD_0 ( ) { java . lang . String [ ] [ ] IDENT_0 = new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_0 7 , STRING_1 7 , STRING_2 , STRING_1 0 } , new java . lang . String [ ] { STRING_3 , STRING_0 6 , STRING_0 5 , STRING_4 4 , STRING_4 0 , STRING_1 4 } , new java . lang . String [ ] { STRING_4 3 , STRING_0 8 , STRING_0 0 , STRING_1 9 , STRING_0 2 } , new java . lang . String [ ] { STRING_4 5 , STRING_0 4 , STRING_4 1 , STRING_1 2 , STRING_0 1 , STRING_0 9 , STRING_5 } , new java . lang . String [ ] { STRING_0 3 , STRING_0 3 + STRING_0 3 } , new java . lang . String [ ] { STRING_6 , STRING_1 8 , STRING_1 5 , STRING_1 , STRING_7 } , new java . lang . String [ ] { STRING_1 6 , STRING_8 , STRING_0 , STRING_4 , STRING_9 , STRING_4 2 } } ; for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { java . util . regex . IDENT_2 IDENT_3 = java . util . regex . IDENT_2 . METHOD_1 ( IDENT_1 [ i ] ) ; for ( int j = 0 ; j < ( IDENT_0 [ i ] . length ) ; j ++ ) { java . util . regex . IDENT_4 IDENT_5 = IDENT_3 . matcher ( IDENT_0 [ i ] [ j ] ) ; "<AssertPlaceHolder>" ; } } } matches ( ) { return METHOD_2 ( IDENT_6 , org . IDENT_7 . IDENT_8 . java . util . regex . IDENT_9 . IDENT_10 ) ; }
org . junit . Assert . assertTrue ( ( ( ( STRING_1 3 + ( IDENT_1 [ i ] ) ) + STRING_1 1 ) + ( IDENT_0 [ i ] [ j ] ) ) , IDENT_5 . matches ( ) ) 