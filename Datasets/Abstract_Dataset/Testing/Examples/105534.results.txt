METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( null ) ) . thenReturn ( 0 ) ; when ( IDENT_1 . METHOD_1 ( null ) ) . thenReturn ( 1 ) ; java . util . List < com . github . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = java . util . Arrays . asList ( IDENT_1 , IDENT_0 ) ; java . util . List < com . github . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_6 = java . util . Arrays . asList ( IDENT_0 , IDENT_1 ) ; IDENT_5 . METHOD_2 ( new com . github . IDENT_2 . IDENT_3 . utils . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( com . github . IDENT_2 . IDENT_3 . IDENT_7 ) { int count = 0 ; java . util . List < com . github . IDENT_2 . IDENT_8 . com . github . IDENT_9 . api . model . IDENT_10 > IDENT_11 = METHOD_4 ( ) . METHOD_5 ( ) . exec ( ) ; for ( com . github . IDENT_2 . IDENT_8 . com . github . IDENT_9 . api . model . IDENT_10 container : IDENT_11 ) { final java . util . Map < java . lang . String , java . lang . String > IDENT_12 = container . METHOD_6 ( ) ; if ( ( IDENT_12 . containsKey ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_13 ) ) && ( IDENT_12 . get ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_13 ) . equals ( METHOD_7 ( ) ) ) ) { if ( template == null ) { count ++ ; } else if ( ( IDENT_12 . containsKey ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_14 ) ) && ( IDENT_12 . get ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_14 ) . equals ( template . getId ( ) ) ) ) { count ++ ; } } } return count ; }
org . junit . Assert . assertThat ( IDENT_6 , org . hamcrest . Matchers . is ( IDENT_5 ) ) 