METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_4 IDENT_5 = new org . IDENT_1 . IDENT_2 . IDENT_3 . util . METHOD_1 ( ) ; IDENT_5 . METHOD_2 ( IDENT_0 , STRING_1 , STRING_2 ) ; IDENT_5 . METHOD_2 ( IDENT_0 , STRING_3 , STRING_4 ) ; IDENT_5 . METHOD_2 ( IDENT_0 , STRING_1 , STRING_5 ) ; IDENT_5 . METHOD_2 ( IDENT_0 , STRING_1 , STRING_6 ) ; IDENT_5 . METHOD_2 ( IDENT_0 , STRING_1 , STRING_7 ) ; "<AssertPlaceHolder>" ; java . lang . Object IDENT_6 = IDENT_5 . METHOD_3 ( IDENT_0 ) ; java . util . Set IDENT_7 = new java . util . HashSet ( ) ; for ( java . util . Iterator i = IDENT_5 . METHOD_4 ( ) . iterator ( ) ; i . hasNext ( ) ; ) { java . util . Map . Entry entry = ( ( java . util . Map . Entry ) ( i . next ( ) ) ) ; java . lang . String IDENT_8 = ( ( java . lang . String ) ( entry . getKey ( ) ) ) ; java . util . List IDENT_9 = ( ( java . util . List ) ( entry . getValue ( ) ) ) ; for ( java . util . Iterator j = IDENT_9 . iterator ( ) ; j . hasNext ( ) ; ) { org . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_10 message = ( ( org . IDENT_1 . IDENT_2 . IDENT_3 . util . IDENT_10 ) ( j . next ( ) ) ) ; java . lang . String [ ] params = message . METHOD_5 ( ) ; if ( IDENT_7 . contains ( params ) ) { org . junit . Assert . fail ( ( ( STRING_8 + params ) + STRING_9 ) ) ; } IDENT_7 . add ( params ) ; } } } METHOD_6 ( ) { return METHOD_7 ( IDENT_11 ) ; }
org . junit . Assert . assertEquals ( 5 , IDENT_5 . METHOD_6 ( ) ) 