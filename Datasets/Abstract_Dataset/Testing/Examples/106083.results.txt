METHOD_0 ( ) { boolean IDENT_0 = false ; try { org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . IDENT_4 event = new org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . METHOD_1 ( null ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . service . IDENT_5 . IDENT_6 . METHOD_2 ( event ) ; } catch ( java . lang . RuntimeException e ) { IDENT_0 = true ; } "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . IDENT_7 ) { if ( event == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } event . validate ( ) ; if ( org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . METHOD_3 ( ) ) { org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . debug ( ( STRING_1 + event ) ) ; } org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . IDENT_9 rule = METHOD_4 ( event . METHOD_5 ( ) , event . METHOD_6 ( ) ) ; boolean IDENT_10 = true ; if ( rule != null ) { if ( org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . METHOD_3 ( ) ) { org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . debug ( ( ( ( STRING_2 + ( event . getName ( ) ) ) + STRING_3 ) + ( rule . getClass ( ) . getName ( ) ) ) ) ; } METHOD_7 ( event . METHOD_8 ( ) ) ; java . util . List < org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . IDENT_11 > events = event . METHOD_9 ( ) ; for ( org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . IDENT_11 IDENT_12 : events ) { IDENT_10 OP_0 METHOD_2 ( ( ( org . IDENT_1 . IDENT_2 . IDENT_3 . rules . rule . event . IDENT_7 ) ( IDENT_12 ) ) ) ; } if ( org . apache . commons . lang . StringUtils . METHOD_10 ( event . METHOD_11 ( ) ) ) { IDENT_10 OP_0 METHOD_12 ( rule , event ) ; } else { IDENT_10 OP_0 event . METHOD_13 ( rule ) ; } METHOD_14 ( event . METHOD_8 ( ) ) ; if ( ! IDENT_10 ) { if ( org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . METHOD_3 ( ) ) { org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . debug ( ( ( ( ( event . getName ( ) ) + STRING_4 ) + ( rule . getClass ( ) . getName ( ) ) ) + STRING_5 ) ) ; } } else { if ( org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . METHOD_3 ( ) ) { org . IDENT_1 . IDENT_2 . IDENT_3 . service . impl . IDENT_8 . LOG . debug ( ( ( ( STRING_6 + ( event . getName ( ) ) ) + STRING_7 ) + ( rule . getClass ( ) . getName ( ) ) ) ) ; } } } return IDENT_10 ; }
org . junit . Assert . assertTrue ( IDENT_0 ) 