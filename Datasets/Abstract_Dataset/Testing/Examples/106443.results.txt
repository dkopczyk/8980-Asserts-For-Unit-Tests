METHOD_0 ( ) { IDENT_0 . IDENT_1 . parser . IDENT_2 IDENT_3 = new IDENT_0 . IDENT_1 . parser . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( new IDENT_0 . IDENT_1 . parser . model . METHOD_3 ( STRING_0 , IDENT_4 . METHOD_4 ( STRING_1 ) , STRING_1 , 0 , false ) ) ; IDENT_3 . METHOD_2 ( new IDENT_0 . IDENT_1 . parser . model . METHOD_3 ( STRING_2 , IDENT_4 . METHOD_4 ( STRING_3 ) , STRING_3 , 0 , false ) ) ; java . util . List < IDENT_0 . IDENT_1 . parser . rest . model . IDENT_5 > expected = java . util . Collections . singletonList ( new IDENT_0 . IDENT_1 . parser . rest . model . METHOD_5 ( STRING_4 ) ) ; java . util . List < IDENT_0 . IDENT_1 . parser . internal . matches . IDENT_6 > IDENT_7 = IDENT_8 . parse ( STRING_5 , java . util . Collections . singletonList ( IDENT_3 ) ) ; java . util . List < IDENT_0 . IDENT_1 . parser . rest . model . METHOD_5 > actual = IDENT_0 . IDENT_1 . parser . IDENT_9 . METHOD_6 ( IDENT_7 , true , true ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . List , boolean , boolean ) { java . util . List < IDENT_0 . IDENT_1 . parser . rest . model . METHOD_5 > IDENT_10 = new java . util . ArrayList ( ) ; for ( IDENT_0 . IDENT_1 . parser . internal . matches . IDENT_6 IDENT_11 : IDENT_7 ) { java . util . List < IDENT_0 . IDENT_1 . expressions . IDENT_12 > expressions = IDENT_0 . IDENT_1 . parser . IDENT_9 . METHOD_7 ( IDENT_11 . METHOD_8 ( ) ) ; expressions = expressions . stream ( ) . filter ( ( expression ) -> IDENT_13 || ( ! ( expression . METHOD_9 ( ) . equals ( STRING_6 ) ) ) ) . filter ( ( expression ) -> IDENT_14 || ( ! ( expression . METHOD_9 ( ) . equals ( STRING_7 ) ) ) ) . collect ( java . util . stream . IDENT_15 . toList ( ) ) ; IDENT_10 . add ( new IDENT_0 . IDENT_1 . parser . rest . model . METHOD_5 ( IDENT_0 . IDENT_1 . IDENT_16 . IDENT_17 . METHOD_10 ( STRING_8 , expressions ) ) ) ; } return IDENT_10 ; }
org . junit . Assert . assertEquals ( expected , actual ) 