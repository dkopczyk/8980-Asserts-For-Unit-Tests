METHOD_0 ( ) { java . lang . String IDENT_0 = new java . io . File ( STRING_0 ) . METHOD_1 ( new java . io . METHOD_2 ( ) { @ org . IDENT_1 . jaxrs . Override public boolean accept ( java . io . File IDENT_2 , java . lang . String IDENT_3 ) { return IDENT_3 . startsWith ( STRING_1 ) ; } } ) [ 0 ] . getAbsolutePath ( ) ; org . IDENT_1 . jaxrs . IDENT_4 parser = new org . IDENT_1 . jaxrs . METHOD_3 ( ) . METHOD_4 ( IDENT_0 , STRING_2 ) ; java . util . List < org . IDENT_1 . jaxrs . model . IDENT_5 > IDENT_6 = parser . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { java . util . List < org . IDENT_1 . jaxrs . model . IDENT_5 > IDENT_7 = new java . util . METHOD_6 ( ) ; java . util . List < java . lang . Class < ? extends java . lang . Object > > classes ; try { if ( ( IDENT_8 ) == null ) { if ( ( this . clazz ) != null ) { classes = METHOD_7 ( this . IDENT_9 , this . clazz ) ; } else { classes = METHOD_7 ( this . IDENT_9 ) ; } } else { classes = METHOD_8 ( IDENT_8 ) ; } } catch ( java . io . IOException e ) { return IDENT_7 ; } for ( java . lang . Class clazz : classes ) { IDENT_7 . addAll ( METHOD_9 ( clazz ) ) ; } return IDENT_7 ; }
org . junit . Assert . assertFalse ( IDENT_6 . isEmpty ( ) ) 