METHOD_0 ( ) { final java . io . File file = util . METHOD_1 ( STRING_0 ) ; final java . io . InputStream in = new java . io . METHOD_2 ( file ) ; final java . lang . String IDENT_0 = util . read ( in ) ; final java . util . List < java . lang . String > IDENT_1 = IDENT_2 . METHOD_3 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { final java . util . List < java . lang . String > IDENT_3 = new java . util . ArrayList < java . lang . String > ( ) ; int IDENT_4 = METHOD_4 ( content , 0 ) ; int IDENT_5 = METHOD_5 ( content , IDENT_4 ) ; while ( ( ( IDENT_4 != ( - 1 ) ) && ( IDENT_4 < ( content . length ( ) ) ) ) && ( IDENT_5 < ( content . length ( ) ) ) ) { final java . lang . String query = content . substring ( IDENT_4 , IDENT_5 ) ; final boolean IDENT_6 = METHOD_6 ( query ) ; if ( ! IDENT_6 ) { IDENT_3 . add ( query ) ; } final com . IDENT_7 . IDENT_8 . report . IDENT_9 IDENT_10 = new com . IDENT_7 . IDENT_8 . report . METHOD_7 ( ) ; IDENT_10 . METHOD_8 ( query ) ; if ( IDENT_6 ) { IDENT_10 . METHOD_9 ( IDENT_11 . IDENT_12 ) ; } else { IDENT_10 . METHOD_9 ( IDENT_11 . IDENT_13 ) ; } METHOD_10 ( ) . add ( IDENT_10 ) ; if ( ( IDENT_5 + 1 ) >= ( content . length ( ) ) ) { IDENT_4 = - 1 ; } else { IDENT_4 = METHOD_4 ( content , ( IDENT_5 + 1 ) ) ; IDENT_5 = METHOD_5 ( content , IDENT_4 ) ; } } return IDENT_3 ; }
org . junit . Assert . assertEquals ( 3 , IDENT_1 . size ( ) ) 