METHOD_0 ( ) { int [ ] [ ] IDENT_0 = new int [ ] [ ] { new int [ ] { 1 , 2 , 3 , 4 , 5 } , new int [ ] { 5 , 7 , 8 , 9 , INT_0 } , new int [ ] { INT_0 , 12 , INT_1 , INT_2 , 15 } , new int [ ] { 16 , INT_3 , INT_4 , INT_5 , 20 } , new int [ ] { INT_6 , INT_7 , INT_8 , INT_9 , INT_10 } , new int [ ] { 1 , 6 , INT_0 , 16 , INT_6 } , new int [ ] { 2 , 7 , 12 , INT_3 , INT_7 } , new int [ ] { 3 , 8 , INT_1 , INT_4 , INT_8 } , new int [ ] { 4 , 9 , INT_2 , INT_5 , INT_9 } , new int [ ] { 5 , 10 , 15 , 20 , INT_10 } } ; boolean IDENT_1 = false ; double IDENT_2 = FLOAT_0 ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { int IDENT_3 = METHOD_1 ( IDENT_0 [ i ] ) ; int IDENT_4 = IDENT_0 [ i ] . length ; System . out . println ( ( ( ( ( ( STRING_0 + i ) + STRING_1 ) + IDENT_3 ) + "/" ) + IDENT_4 ) ) ; IDENT_1 = IDENT_5 . METHOD_2 ( IDENT_4 , IDENT_3 , ( 1 / FLOAT_1 ) , IDENT_6 . IDENT_7 , IDENT_2 ) ; System . out . println ( ( STRING_2 + ( IDENT_1 ? STRING_3 : STRING_4 ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_1 ( int [ ] ) { int IDENT_8 = 0 ; java . util . Arrays . METHOD_3 ( IDENT_0 ) ; System . out . METHOD_4 ( STRING_5 ) ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { System . out . METHOD_4 ( ( ( IDENT_0 [ i ] ) + STRING_6 ) ) ; } System . out . println ( "]" ) ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { int IDENT_9 = 0 ; int [ ] test = METHOD_5 ( IDENT_0 , i ) ; java . util . Set < java . lang . Integer > IDENT_10 = com . google . common . collect . IDENT_11 . METHOD_6 ( com . google . common . IDENT_12 . IDENT_13 . asList ( test ) ) ; java . util . Set < java . lang . Integer > IDENT_14 = com . google . common . collect . IDENT_11 . METHOD_6 ( com . google . common . IDENT_12 . IDENT_13 . asList ( IDENT_0 ) ) ; java . util . Set < java . lang . Integer > IDENT_15 = com . google . common . collect . IDENT_11 . METHOD_7 ( IDENT_10 , IDENT_14 ) ; IDENT_9 = IDENT_15 . size ( ) ; IDENT_8 = ( IDENT_9 > IDENT_8 ) ? IDENT_9 : IDENT_8 ; IDENT_9 = 0 ; for ( int j = 0 ; j < ( IDENT_0 . length ) ; j ++ ) { int IDENT_16 = ( i + ( j * ( IDENT_0 . length ) ) ) + 1 ; test [ j ] = IDENT_16 ; } IDENT_10 = com . google . common . collect . IDENT_11 . METHOD_6 ( com . google . common . IDENT_12 . IDENT_13 . asList ( test ) ) ; IDENT_14 = com . google . common . collect . IDENT_11 . METHOD_6 ( com . google . common . IDENT_12 . IDENT_13 . asList ( IDENT_0 ) ) ; IDENT_15 = com . google . common . collect . IDENT_11 . METHOD_7 ( IDENT_10 , IDENT_14 ) ; IDENT_9 = IDENT_15 . size ( ) ; IDENT_8 = ( IDENT_9 > IDENT_8 ) ? IDENT_9 : IDENT_8 ; System . out . println ( ( STRING_7 + IDENT_8 ) ) ; } return IDENT_8 ; }
org . junit . Assert . assertTrue ( IDENT_1 ) 