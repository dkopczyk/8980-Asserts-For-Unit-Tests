METHOD_0 ( ) { final int IDENT_0 = INT_0 ; final int IDENT_1 = 1000 ; java . util . IDENT_2 r = new java . util . METHOD_1 ( ) ; int [ ] data = new int [ IDENT_0 ] ; int [ ] IDENT_3 = new int [ IDENT_0 ] ; int [ ] IDENT_4 = new int [ IDENT_0 ] ; for ( int IDENT_5 = 0 ; IDENT_5 < INT_1 ; ++ IDENT_5 ) { for ( int t = 0 ; t < IDENT_1 ; ++ t ) { for ( int k = 0 ; k < IDENT_0 ; ++ k ) { data [ k ] = r . METHOD_2 ( ( 1 << IDENT_5 ) ) ; } me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_3 ( data , 0 , IDENT_3 , 0 , IDENT_5 ) ; me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_4 ( IDENT_3 , 0 , IDENT_4 , 0 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } } } METHOD_4 ( int [ ] , int , int [ ] , int , int ) { switch ( IDENT_5 ) { case 0 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_5 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 1 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_6 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 2 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_7 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 3 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_8 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 4 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_9 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 5 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_10 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 6 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_11 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 7 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_12 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 8 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_13 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 9 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_14 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 10 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_15 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_2 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_16 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 12 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_17 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_3 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_18 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_4 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_19 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 15 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_20 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 16 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_21 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_5 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_22 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_6 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_23 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_7 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_24 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case 20 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_25 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_8 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_26 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_9 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_27 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_10 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_28 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_11 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_29 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_12 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_30 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_13 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_31 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_14 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_32 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_15 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_33 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_16 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_34 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_17 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_35 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_1 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_36 ( in , IDENT_9 , out , IDENT_10 ) ; break ; case INT_0 : me . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_37 ( in , IDENT_9 , out , IDENT_10 ) ; break ; default : throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } }
org . junit . Assert . assertArrayEquals ( IDENT_4 , data ) 