METHOD_0 ( ) { long [ ] data = new long [ ] { INT_0 , 0 , - 1 } ; com . alibaba . dubbo . common . serialize . IDENT_0 IDENT_1 = serialization . serialize ( url , IDENT_2 ) ; IDENT_1 . METHOD_1 ( data ) ; IDENT_1 . METHOD_2 ( ) ; java . io . ByteArrayInputStream IDENT_3 = new java . io . ByteArrayInputStream ( IDENT_2 . toByteArray ( ) ) ; com . alibaba . dubbo . common . serialize . IDENT_4 IDENT_5 = serialization . METHOD_3 ( url , IDENT_3 ) ; "<AssertPlaceHolder>" ; try { METHOD_3 . METHOD_4 ( long [ ] . class ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_6 e ) { } METHOD_4 ( ) { java . lang . String IDENT_7 ; byte b = METHOD_5 ( ) ; switch ( b ) { case IDENT_8 : return null ; case IDENT_9 : return new java . lang . Object ( ) ; case IDENT_10 : { IDENT_7 = METHOD_6 ( ) ; break ; } case IDENT_11 : { int index = METHOD_7 ( ) ; IDENT_7 = IDENT_12 . METHOD_8 ( index ) ; if ( IDENT_7 == null ) throw new java . io . IOException ( ( STRING_0 + index ) ) ; break ; } default : throw new java . io . IOException ( ( STRING_1 + b ) ) ; } try { java . lang . Class < ? > c = com . alibaba . dubbo . common . utils . IDENT_13 . METHOD_9 ( IDENT_7 ) ; return com . alibaba . dubbo . common . serialize . support . dubbo . Builder . METHOD_10 ( c ) . METHOD_11 ( this ) ; } catch ( java . lang . IDENT_14 e ) { throw new java . io . IOException ( ( STRING_2 + ( com . alibaba . dubbo . common . utils . StringUtils . toString ( e ) ) ) ) ; } }
org . junit . Assert . assertArrayEquals ( data , ( ( long [ ] ) ( METHOD_3 . METHOD_4 ( ) ) ) ) 