METHOD_0 ( ) { final int IDENT_0 = INT_0 ; final int IDENT_1 = 10 ; final int IDENT_2 = 20 ; com . IDENT_3 . IDENT_4 . IDENT_5 config = new com . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; config . METHOD_2 ( com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_7 . getAbsolutePath ( ) ) ; final com . IDENT_3 . IDENT_4 . IDENT_8 < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > IDENT_10 = new com . IDENT_3 . IDENT_4 . IDENT_11 < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > ( config ) ; final java . util . Set < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > results = java . util . Collections . METHOD_3 ( new java . util . IDENT_12 < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > ( ) ) ; final java . util . Set < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > expected = java . util . Collections . METHOD_3 ( new java . util . IDENT_12 < com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 > ( ) ) ; final java . util . concurrent . IDENT_13 IDENT_14 = new java . util . concurrent . METHOD_4 ( 1 ) ; final java . util . concurrent . METHOD_4 IDENT_15 = new java . util . concurrent . METHOD_4 ( ( IDENT_1 + IDENT_2 ) ) ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { final int IDENT_16 = i ; java . lang . Thread IDENT_17 = new java . lang . Thread ( new java . lang . METHOD_5 ( ) { public void run ( ) { try { IDENT_14 . METHOD_6 ( ) ; } catch ( java . lang . IDENT_18 e ) { e . printStackTrace ( ) ; } for ( int j = 0 ; j < ( IDENT_0 / IDENT_1 ) ; j ++ ) { try { com . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_9 m = new com . IDENT_3 . IDENT_4 . IDENT_6 . METHOD_7 ( IDENT_0 , ( ( ( STRING_0 + IDENT_16 ) + STRING_1 ) + j ) , ( ( j OP_0 2 ) == 0 ) , j ) ; IDENT_10 . add ( m ) ; expected . add ( m ) ; java . lang . Thread . sleep ( 5 ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } IDENT_15 . METHOD_8 ( ) ; } } ) ; IDENT_17 . start ( ) ; } for ( int i = 0 ; i < IDENT_2 ; i ++ ) { java . lang . Thread IDENT_19 = new java . lang . Thread ( new java . lang . METHOD_5 ( ) { public void run ( ) { try { IDENT_14 . METHOD_6 ( ) ; } catch ( java . lang . IDENT_18 e ) { e . printStackTrace ( ) ; } for ( int j = 0 ; j < ( IDENT_0 / IDENT_2 ) ; j ++ ) { try { com . IDENT_3 . IDENT_4 . IDENT_6 . METHOD_7 m = IDENT_10 . get ( ) ; results . add ( m ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } IDENT_15 . METHOD_8 ( ) ; } } ) ; IDENT_19 . start ( ) ; } IDENT_14 . METHOD_8 ( ) ; IDENT_15 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } add ( IDENT_20 ) { IDENT_21 . METHOD_9 ( ) ; try { if ( IDENT_22 ) { throw new com . IDENT_3 . IDENT_4 . exception . METHOD_10 ( ) ; } IDENT_23 . put ( m ) ; } finally { IDENT_21 . METHOD_11 ( ) ; } }
org . junit . Assert . assertEquals ( expected , results ) 