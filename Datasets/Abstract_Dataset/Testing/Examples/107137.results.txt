METHOD_0 ( ) { System . out . METHOD_1 ( STRING_0 ) ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { java . lang . String IDENT_1 = IDENT_0 [ i ] [ 0 ] ; java . lang . String IDENT_2 = IDENT_0 [ i ] [ 1 ] ; java . lang . String expected = IDENT_0 [ i ] [ 2 ] ; java . lang . String IDENT_3 = com . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_1 , IDENT_2 ) ; "<AssertPlaceHolder>" ; System . out . METHOD_1 ( STRING_1 ) ; } System . out . println ( "" ) ; } METHOD_2 ( java . lang . String , java . lang . String ) { com . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 ; java . lang . String IDENT_8 ; byte [ ] IDENT_9 ; byte [ ] IDENT_10 ; byte [ ] IDENT_3 ; char IDENT_11 = ( ( char ) ( 0 ) ) ; int IDENT_12 ; int IDENT_13 = 0 ; java . lang . StringBuffer rs = new java . lang . StringBuffer ( ) ; if ( ( ( IDENT_2 . charAt ( 0 ) ) != STRING_2 ) || ( ( IDENT_2 . charAt ( 1 ) ) != STRING_3 ) ) throw new java . lang . IllegalArgumentException ( STRING_4 ) ; if ( ( IDENT_2 . charAt ( 2 ) ) == STRING_2 ) IDENT_13 = 3 ; else { IDENT_11 = IDENT_2 . charAt ( 2 ) ; if ( ( IDENT_11 != STRING_5 ) || ( ( IDENT_2 . charAt ( 3 ) ) != STRING_2 ) ) throw new java . lang . IllegalArgumentException ( STRING_6 ) ; IDENT_13 = 4 ; } if ( ( IDENT_2 . charAt ( ( IDENT_13 + 2 ) ) ) > STRING_2 ) throw new java . lang . IllegalArgumentException ( STRING_7 ) ; IDENT_12 = java . lang . Integer . METHOD_3 ( IDENT_2 . substring ( IDENT_13 , ( IDENT_13 + 2 ) ) ) ; IDENT_8 = IDENT_2 . substring ( ( IDENT_13 + 3 ) , ( IDENT_13 + INT_0 ) ) ; try { IDENT_9 = ( IDENT_14 + ( IDENT_11 >= STRING_5 ? STRING_8 : "" ) ) . getBytes ( STRING_9 ) ; } catch ( java . io . IDENT_15 IDENT_16 ) { throw new java . lang . METHOD_4 ( STRING_10 ) ; } IDENT_10 = com . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_5 ( IDENT_8 , com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_17 ) ; IDENT_7 = new com . IDENT_4 . IDENT_5 . METHOD_6 ( ) ; IDENT_3 = IDENT_7 . METHOD_7 ( IDENT_9 , IDENT_10 , IDENT_12 , ( ( int [ ] ) ( com . IDENT_4 . IDENT_5 . METHOD_6 . IDENT_18 . METHOD_8 ( ) ) ) ) ; rs . append ( STRING_11 ) ; if ( IDENT_11 >= STRING_5 ) rs . append ( IDENT_11 ) ; rs . append ( STRING_12 ) ; if ( IDENT_12 < 10 ) rs . append ( STRING_13 ) ; if ( IDENT_12 > INT_1 ) { throw new java . lang . IllegalArgumentException ( STRING_13 0 ) ; } rs . append ( java . lang . Integer . toString ( IDENT_12 ) ) ; rs . append ( STRING_12 ) ; rs . append ( com . IDENT_4 . IDENT_5 . METHOD_6 . METHOD_9 ( IDENT_10 , IDENT_10 . length ) ) ; rs . append ( com . IDENT_4 . IDENT_5 . METHOD_6 . METHOD_9 ( IDENT_3 , ( ( ( com . IDENT_4 . IDENT_5 . METHOD_6 . IDENT_18 . length ) * 4 ) - 1 ) ) ) ; return rs . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , expected ) 