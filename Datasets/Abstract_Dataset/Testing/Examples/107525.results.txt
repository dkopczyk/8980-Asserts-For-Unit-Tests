METHOD_0 ( ) { final org . IDENT_0 . business . IDENT_1 . IDENT_2 start = org . IDENT_0 . business . test . IDENT_3 . entities . IDENT_4 . date ( INT_0 , 2 , 4 ) ; METHOD_1 ( org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 . create ( METHOD_2 ( 8 ) ) . METHOD_3 ( ) , new java . util . HashMap < org . joda . time . IDENT_7 , org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 > ( ) { { put ( org . IDENT_0 . business . test . IDENT_3 . entities . IDENT_4 . METHOD_4 ( start , 3 ) . METHOD_5 ( ) , org . IDENT_0 . business . IDENT_5 . entities . IDENT_6 . create ( METHOD_2 ( 8 ) ) . METHOD_6 ( ) ) ; } } ) ; METHOD_7 ( start , 4 ) ; IDENT_8 . METHOD_8 ( org . IDENT_0 . business . test . IDENT_3 . entities . IDENT_4 . METHOD_4 ( start , 4 ) ) . METHOD_9 ( org . IDENT_0 . business . IDENT_1 . IDENT_9 . METHOD_10 ( 1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( ) { java . util . HashMap < org . IDENT_0 . business . IDENT_3 . entities . IDENT_10 < ? > , org . IDENT_0 . business . IDENT_1 . IDENT_9 > result = new java . util . HashMap < org . IDENT_0 . business . IDENT_3 . entities . IDENT_10 < ? > , org . IDENT_0 . business . IDENT_1 . IDENT_9 > ( ) ; for ( org . IDENT_0 . business . IDENT_3 . entities . IDENT_10 < ? > r : IDENT_11 ) { result . put ( r , r . METHOD_11 ( ) ) ; } return result ; }
org . junit . Assert . assertThat ( IDENT_8 . METHOD_11 ( ) , org . hamcrest . CoreMatchers . equalTo ( org . IDENT_0 . business . IDENT_1 . IDENT_9 . METHOD_10 ( 1 ) ) ) 