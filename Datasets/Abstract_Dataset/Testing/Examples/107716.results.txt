METHOD_0 ( ) { java . util . List < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > IDENT_2 = new java . util . ArrayList < com . liferay . IDENT_0 . util . config . internal . IDENT_1 > ( ) ; com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_1 ( STRING_0 , IDENT_2 , com . liferay . IDENT_0 . util . xml . IDENT_3 . IDENT_4 ) ; java . util . Collections . METHOD_2 ( IDENT_2 ) ; java . lang . String [ ] IDENT_5 = com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_3 ( IDENT_2 ) ; IDENT_2 = com . liferay . IDENT_0 . util . config . internal . IDENT_6 . METHOD_4 ( IDENT_2 ) ; java . lang . String [ ] IDENT_7 = com . liferay . IDENT_0 . util . xml . IDENT_3 . METHOD_3 ( IDENT_2 ) ; java . util . List < java . lang . String > original = java . util . Arrays . asList ( IDENT_5 ) ; java . util . List < java . lang . String > IDENT_8 = java . util . Arrays . asList ( IDENT_7 ) ; java . util . List < java . lang . String > IDENT_9 = java . util . Arrays . asList ( "a" , STRING_1 , STRING_2 , "b" ) ; java . util . List < java . lang . String > IDENT_10 = java . util . Arrays . asList ( STRING_1 , "a" , STRING_2 , "b" ) ; boolean IDENT_11 = ( IDENT_8 . equals ( IDENT_9 ) ) || ( IDENT_8 . equals ( IDENT_10 ) ) ; java . lang . String message = ( ( ( ( ( ( ( STRING_3 + original ) + STRING_4 ) + IDENT_9 ) + STRING_5 ) + IDENT_10 ) + STRING_6 ) + IDENT_8 ) + "\n" ; "<AssertPlaceHolder>" ; com . liferay . IDENT_0 . util . xml . IDENT_3 . logger . info ( ( "a" 0 + message ) ) ; } equals ( java . lang . Object ) { boolean IDENT_12 = false ; if ( ( obj != null ) && ( obj instanceof java . util . List < ? > ) ) { java . util . List < ? > IDENT_13 = ( ( java . util . List < ? > ) ( obj ) ) ; if ( ( IDENT_13 . size ( ) ) == ( this . size ( ) ) ) { IDENT_12 = true ; int index = 0 ; for ( java . lang . Object IDENT_14 : IDENT_13 ) { if ( IDENT_14 instanceof java . lang . String ) { java . lang . String IDENT_15 = ( ( java . lang . String ) ( IDENT_14 ) ) ; java . lang . String IDENT_16 = this . get ( index ) ; if ( IDENT_16 . equals ( IDENT_15 ) ) { index ++ ; } else { IDENT_12 = false ; break ; } } else { IDENT_12 = false ; break ; } } } } return IDENT_12 ; }
org . junit . Assert . assertTrue ( message , IDENT_11 ) 