METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; IDENT_1 . METHOD_1 ( ) ; IDENT_1 . IDENT_2 . METHOD_2 ( project . getName ( ) , com . liferay . IDENT_3 . ui . IDENT_4 . tests . IDENT_5 ) ; IDENT_1 . next ( ) ; IDENT_1 . IDENT_6 . METHOD_3 ( IDENT_0 ) ; IDENT_1 . METHOD_4 ( ) ; IDENT_7 . METHOD_5 ( ) ; java . lang . String [ ] IDENT_8 = new java . lang . String [ ] { com . liferay . IDENT_3 . ui . IDENT_4 . tests . IDENT_9 . IDENT_10 . getName ( ) , STRING_1 , project . getName ( ) } ; "<AssertPlaceHolder>" ; IDENT_11 . project . METHOD_6 ( IDENT_8 ) ; } METHOD_7 ( java . lang . String [ ] ) { try { return METHOD_8 ( ) . METHOD_9 ( IDENT_12 ) ; } catch ( java . lang . Exception e ) { METHOD_8 ( ) . METHOD_10 ( ) ; try { java . lang . String [ ] IDENT_13 = java . util . Arrays . METHOD_11 ( IDENT_12 , 0 , ( ( IDENT_12 . length ) - 1 ) ) ; METHOD_8 ( ) . METHOD_12 ( IDENT_13 ) ; METHOD_8 ( ) . METHOD_13 ( com . liferay . IDENT_3 . ui . liferay . action . IDENT_14 , IDENT_13 ) ; IDENT_3 . sleep ( INT_0 ) ; } catch ( java . lang . Exception IDENT_15 ) { } for ( int i = ( IDENT_12 . length ) - 1 ; i > 0 ; i OP_0 ) { java . lang . String [ ] IDENT_13 = java . util . Arrays . METHOD_11 ( IDENT_12 , 0 , ( ( IDENT_12 . length ) - i ) ) ; org . eclipse . IDENT_16 . swt . IDENT_17 . widgets . IDENT_18 parent = METHOD_8 ( ) . METHOD_14 ( IDENT_13 ) ; METHOD_8 ( ) . METHOD_12 ( IDENT_13 ) ; java . lang . String IDENT_19 = IDENT_12 [ ( ( IDENT_12 . length ) - i ) ] ; IDENT_20 . METHOD_15 ( parent , IDENT_19 , com . liferay . IDENT_3 . ui . liferay . action . IDENT_14 ) ; } return METHOD_8 ( ) . METHOD_9 ( IDENT_12 ) ; } }
org . junit . Assert . assertTrue ( IDENT_11 . project . METHOD_7 ( IDENT_8 ) ) 