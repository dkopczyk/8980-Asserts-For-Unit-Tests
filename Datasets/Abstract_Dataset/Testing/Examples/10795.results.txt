METHOD_0 ( ) { java . util . List < org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > > IDENT_2 = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { IDENT_2 . add ( new org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > ( IDENT_3 , 0 , i , STRING_0 , null ) ) ; IDENT_2 . add ( new org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > ( IDENT_3 , 1 , i , STRING_0 , null ) ) ; IDENT_2 . add ( new org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > ( IDENT_3 , 2 , i , STRING_0 , null ) ) ; IDENT_2 . add ( new org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > ( IDENT_3 , 3 , i , STRING_0 , null ) ) ; } IDENT_4 = new java . util . HashMap ( ) ; IDENT_4 . put ( new org . apache . kafka . common . METHOD_2 ( IDENT_3 , 0 ) , org . apache . IDENT_5 . IDENT_6 . of ( 0L , INT_1 ) ) ; IDENT_4 . put ( new org . apache . kafka . common . METHOD_2 ( IDENT_3 , 1 ) , org . apache . IDENT_5 . IDENT_6 . of ( 0L , INT_1 ) ) ; IDENT_4 . put ( new org . apache . kafka . common . METHOD_2 ( IDENT_3 , 2 ) , org . apache . IDENT_5 . IDENT_6 . of ( 0L , INT_1 ) ) ; IDENT_4 . put ( new org . apache . kafka . common . METHOD_2 ( IDENT_3 , 3 ) , org . apache . IDENT_5 . IDENT_6 . of ( 0L , INT_1 ) ) ; when ( records . isEmpty ( ) ) . thenReturn ( false ) ; when ( records . iterator ( ) ) . thenReturn ( IDENT_2 . iterator ( ) ) ; when ( IDENT_7 . METHOD_3 ( org . mockito . Matchers . METHOD_4 ( ) ) ) . thenReturn ( null ) . METHOD_5 ( new org . apache . kafka . common . errors . METHOD_6 ( STRING_1 ) ) . METHOD_5 ( new org . apache . kafka . common . errors . METHOD_6 ( STRING_2 ) ) . thenReturn ( records ) . thenReturn ( null ) ; java . lang . IDENT_8 < org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > > data = new org . apache . IDENT_5 . kafka . record . METHOD_7 ( IDENT_7 , IDENT_4 , new java . util . Properties ( ) ) ; int count = 0 ; for ( org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > record : data ) { count ++ ; } "<AssertPlaceHolder>" ; } size ( ) { return 3 ; }
org . junit . Assert . assertThat ( count , org . hamcrest . core . Is . is ( IDENT_2 . size ( ) ) ) 