METHOD_0 ( ) { com . liferay . IDENT_0 . data . mapping . data . provider . internal . IDENT_1 IDENT_2 = mock ( com . liferay . IDENT_0 . data . mapping . data . provider . internal . IDENT_1 . class ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_3 . Builder builder = IDENT_3 . Builder . METHOD_1 ( ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_3 IDENT_4 = builder . METHOD_2 ( "2" ) . build ( ) ; java . util . Optional < com . liferay . IDENT_0 . data . mapping . model . IDENT_5 > IDENT_6 = java . util . Optional . empty ( ) ; when ( IDENT_2 . METHOD_3 ( "2" ) ) . thenReturn ( IDENT_6 ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_7 IDENT_8 = mock ( com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_7 . class ) ; when ( IDENT_2 . METHOD_4 ( "2" , IDENT_6 ) ) . thenReturn ( IDENT_8 ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_9 . Builder IDENT_10 = IDENT_9 . Builder . METHOD_1 ( ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_9 IDENT_11 = IDENT_10 . METHOD_5 ( STRING_0 , 2 ) . build ( ) ; when ( IDENT_8 . METHOD_6 ( IDENT_4 ) ) . thenReturn ( IDENT_11 ) ; when ( IDENT_2 . METHOD_7 ( IDENT_4 ) ) . METHOD_8 ( ) ; com . liferay . IDENT_0 . data . mapping . data . provider . IDENT_9 IDENT_12 = IDENT_2 . METHOD_7 ( IDENT_4 ) ; java . util . Optional < java . lang . IDENT_13 > IDENT_14 = IDENT_12 . METHOD_9 ( STRING_0 , com . liferay . IDENT_0 . data . mapping . data . provider . internal . IDENT_13 . class ) ; "<AssertPlaceHolder>" ; } get ( ) { return IDENT_15 . get ( ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_14 . get ( ) ) 