METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = mock ( com . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; com . liferay . IDENT_4 . data . mapping . data . provider . IDENT_5 . Builder builder = IDENT_5 . Builder . METHOD_1 ( ) ; com . liferay . IDENT_4 . data . mapping . data . provider . IDENT_5 IDENT_6 = builder . build ( ) ; com . liferay . IDENT_4 . data . mapping . data . provider . internal . rest . IDENT_7 IDENT_8 = METHOD_2 ( STRING_0 , STRING_1 3 , STRING_1 1 , false ) ; when ( IDENT_3 . read ( STRING_2 , java . util . List . class ) ) . thenReturn ( new java . util . ArrayList ( ) { { add ( STRING_3 ) ; add ( STRING_4 ) ; add ( STRING_1 ) ; add ( STRING_5 ) ; add ( STRING_6 ) ; } } ) ; when ( IDENT_3 . read ( STRING_1 4 ) ) . thenReturn ( new java . util . ArrayList ( ) { { add ( STRING_7 ) ; add ( STRING_8 ) ; add ( STRING_9 ) ; add ( STRING_1 2 ) ; add ( STRING_1 0 ) ; } } ) ; com . liferay . IDENT_4 . data . mapping . data . provider . IDENT_9 IDENT_10 = IDENT_11 . METHOD_3 ( IDENT_3 , IDENT_6 , IDENT_8 ) ; java . util . Optional < java . util . List < com . liferay . portal . kernel . util . IDENT_12 > > IDENT_13 = IDENT_10 . METHOD_4 ( STRING_0 , java . util . List . class ) ; java . util . List < com . liferay . portal . kernel . util . IDENT_12 > IDENT_14 = new java . util . ArrayList ( ) { { add ( new com . liferay . portal . kernel . util . METHOD_5 ( STRING_7 , STRING_3 ) ) ; add ( new com . liferay . portal . kernel . util . METHOD_5 ( STRING_8 , STRING_4 ) ) ; add ( new com . liferay . portal . kernel . util . METHOD_5 ( STRING_9 , STRING_1 ) ) ; add ( new com . liferay . portal . kernel . util . METHOD_5 ( STRING_1 2 , STRING_5 ) ) ; add ( new com . liferay . portal . kernel . util . METHOD_5 ( STRING_1 0 , STRING_6 ) ) ; } } ; "<AssertPlaceHolder>" ; } toString ( ) { com . liferay . IDENT_15 . string . IDENT_16 sb = new com . liferay . IDENT_15 . string . METHOD_6 ( INT_0 ) ; sb . append ( STRING_10 1 ) ; sb . append ( IDENT_17 ) ; sb . append ( STRING_10 0 ) ; sb . append ( IDENT_18 ) ; sb . append ( STRING_11 ) ; sb . append ( IDENT_19 ) ; sb . append ( STRING_12 ) ; sb . append ( IDENT_20 ) ; sb . append ( STRING_13 ) ; sb . append ( IDENT_21 ) ; sb . append ( STRING_14 ) ; sb . append ( IDENT_22 ) ; sb . append ( STRING_15 ) ; sb . append ( IDENT_23 ) ; sb . append ( STRING_16 ) ; sb . append ( IDENT_24 ) ; sb . append ( STRING_17 ) ; sb . append ( IDENT_25 ) ; sb . append ( STRING_10 ) ; sb . append ( IDENT_26 ) ; sb . append ( STRING_18 ) ; sb . append ( size ) ; sb . append ( STRING_19 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_14 . toString ( ) , IDENT_14 , IDENT_13 . get ( ) ) 