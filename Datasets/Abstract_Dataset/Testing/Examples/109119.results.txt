METHOD_0 ( ) { java . lang . String IDENT_0 = read ( STRING_0 ) ; java . util . Map < java . lang . String , java . util . Map < java . lang . String , java . lang . String > > IDENT_1 = com . liferay . IDENT_2 . test . util . IDENT_3 . METHOD_1 ( IDENT_0 ) ; java . lang . String IDENT_4 = IDENT_5 . METHOD_2 ( read ( STRING_1 ) ) ; java . util . Map < java . lang . String , java . util . Map < java . lang . String , java . lang . String > > IDENT_6 = com . liferay . IDENT_2 . test . util . IDENT_3 . METHOD_1 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . Map < java . lang . String , java . util . Map < java . lang . String , java . lang . String > > map = new java . util . HashMap ( ) ; com . liferay . portal . kernel . xml . Document document = com . liferay . portal . kernel . xml . IDENT_7 . read ( IDENT_8 ) ; com . liferay . portal . kernel . xml . IDENT_9 IDENT_10 = com . liferay . portal . kernel . xml . IDENT_11 . METHOD_3 ( STRING_2 ) ; java . util . List < com . liferay . portal . kernel . xml . Node > nodes = IDENT_10 . METHOD_4 ( document ) ; for ( com . liferay . portal . kernel . xml . Node node : nodes ) { com . liferay . portal . kernel . xml . Element IDENT_12 = ( ( com . liferay . portal . kernel . xml . Element ) ( node ) ) ; java . lang . String type = IDENT_12 . METHOD_5 ( STRING_3 ) ; if ( java . util . IDENT_13 . equals ( type , STRING_4 ) ) { continue ; } java . lang . String name = IDENT_12 . METHOD_5 ( "name" ) ; map . put ( name , com . liferay . IDENT_2 . test . util . IDENT_3 . METHOD_6 ( IDENT_12 ) ) ; } return map ; }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_6 ) 