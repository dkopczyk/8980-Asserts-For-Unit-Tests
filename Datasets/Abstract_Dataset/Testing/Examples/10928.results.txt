METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > IDENT_0 = new java . util . HashMap ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 2 ) ; IDENT_0 . put ( STRING_2 , STRING_3 ) ; IDENT_0 . put ( STRING_1 0 , STRING_4 ) ; IDENT_0 . put ( STRING_1 , STRING_5 ) ; IDENT_0 . put ( STRING_1 1 , STRING_6 ) ; java . lang . String IDENT_1 = STRING_7 ; java . net . URI uri = javax . ws . rs . core . IDENT_2 . METHOD_1 ( "" ) . path ( STRING_8 ) . METHOD_2 ( IDENT_0 ) ; java . lang . String IDENT_3 = uri . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Map ) { java . util . Map < java . lang . String , java . lang . String > IDENT_4 = new java . util . HashMap ( map . size ( ) ) ; for ( Map . Entry < java . lang . String , ? extends java . lang . Object > entry : map . entrySet ( ) ) { if ( ( entry . getValue ( ) ) == null ) { throw new java . lang . IllegalArgumentException ( STRING_9 ) ; } java . lang . String IDENT_5 = entry . getValue ( ) . toString ( ) ; if ( IDENT_5 . contains ( "/" ) ) { java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; java . lang . String [ ] values = IDENT_5 . split ( "/" ) ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { buf . append ( org . apache . cxf . jaxrs . utils . IDENT_6 . METHOD_4 ( values [ i ] , false ) ) ; if ( ( i + 1 ) < ( values . length ) ) { buf . append ( STRING_10 ) ; } } IDENT_4 . put ( entry . getKey ( ) , buf . toString ( ) ) ; } else { IDENT_4 . put ( entry . getKey ( ) , org . apache . cxf . jaxrs . utils . IDENT_6 . METHOD_4 ( IDENT_5 , false ) ) ; } } return METHOD_5 ( IDENT_4 , true , false ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_3 ) 