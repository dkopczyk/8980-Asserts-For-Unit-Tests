METHOD_0 ( ) { com . liferay . IDENT_0 . string . IDENT_1 sb = new com . liferay . IDENT_0 . string . METHOD_1 ( ) ; sb . append ( new java . lang . String [ 0 ] ) ; "<AssertPlaceHolder>" ; } index ( ) { for ( Map . Entry < java . lang . String , java . util . Set < java . lang . Long > > IDENT_2 : IDENT_3 . entrySet ( ) ) { java . lang . String IDENT_4 = IDENT_2 . getKey ( ) ; com . liferay . portal . kernel . search . IDENT_5 < ? > IDENT_6 = IDENT_7 . METHOD_2 ( IDENT_4 ) ; if ( IDENT_6 == null ) { if ( com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . METHOD_3 ( ) ) { com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . warn ( ( STRING_0 + IDENT_4 ) ) ; } continue ; } if ( com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . METHOD_4 ( ) ) { com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . debug ( ( STRING_1 + IDENT_4 ) ) ; } for ( long IDENT_12 : IDENT_2 . getValue ( ) ) { try { IDENT_6 . METHOD_5 ( IDENT_4 , IDENT_12 ) ; } catch ( com . liferay . portal . kernel . search . IDENT_13 IDENT_14 ) { if ( com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . METHOD_3 ( ) ) { com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . warn ( com . liferay . IDENT_0 . string . METHOD_1 . METHOD_6 ( STRING_2 , IDENT_4 , STRING_3 , IDENT_12 ) , IDENT_14 ) ; } } } } if ( IDENT_15 . isEmpty ( ) ) { return ; } java . util . Set < java . lang . Long > IDENT_16 = IDENT_3 . get ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; com . liferay . portal . kernel . search . IDENT_5 < ? > IDENT_6 = IDENT_7 . METHOD_2 ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; for ( java . lang . String IDENT_19 : IDENT_15 ) { java . util . List < com . liferay . IDENT_17 . model . IDENT_18 > IDENT_20 = IDENT_21 . METHOD_7 ( METHOD_8 ( ) , IDENT_19 , IDENT_22 . IDENT_23 , IDENT_22 . IDENT_23 , null ) ; for ( com . liferay . IDENT_17 . model . IDENT_18 IDENT_24 : IDENT_20 ) { if ( ( IDENT_16 != null ) && ( IDENT_16 . contains ( IDENT_24 . METHOD_9 ( ) ) ) ) { continue ; } try { IDENT_6 . METHOD_5 ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) , IDENT_24 . METHOD_9 ( ) ) ; } catch ( com . liferay . portal . kernel . search . IDENT_13 IDENT_14 ) { if ( com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . METHOD_3 ( ) ) { com . liferay . IDENT_0 . string . METHOD_1 sb = new com . liferay . IDENT_0 . string . METHOD_1 ( 4 ) ; sb . append ( STRING_4 ) ; sb . append ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; sb . append ( STRING_5 ) ; sb . append ( IDENT_24 . METHOD_9 ( ) ) ; com . liferay . IDENT_8 . resources . IDENT_9 . internal . util . IDENT_10 . IDENT_11 . warn ( sb . toString ( ) , IDENT_14 ) ; } } } } }
org . junit . Assert . assertEquals ( 0 , sb . index ( ) ) 