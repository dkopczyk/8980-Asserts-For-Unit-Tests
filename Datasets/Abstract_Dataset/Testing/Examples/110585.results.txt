METHOD_0 ( ) { com . liferay . portal . kernel . format . IDENT_0 IDENT_1 = METHOD_1 ( ) ; java . lang . String [ ] IDENT_2 = METHOD_2 ( ) ; for ( java . lang . String IDENT_3 : IDENT_2 ) { "<AssertPlaceHolder>" ; } } validate ( javax . IDENT_4 . IDENT_5 ) { java . lang . String IDENT_6 = IDENT_7 . getValue ( STRING_0 , IDENT_8 . IDENT_9 ) ; if ( com . liferay . portal . kernel . util . IDENT_10 . METHOD_3 ( IDENT_6 ) ) { return ; } java . util . List < java . lang . String > IDENT_11 = new java . util . ArrayList ( ) ; java . lang . String [ ] IDENT_12 = IDENT_7 . METHOD_4 ( STRING_1 , new java . lang . String [ 0 ] ) ; for ( java . lang . String IDENT_13 : IDENT_12 ) { com . liferay . IDENT_14 . web . internal . model . IDENT_15 IDENT_14 = com . liferay . IDENT_14 . web . internal . util . IDENT_16 . METHOD_5 ( IDENT_13 , IDENT_6 ) ; if ( IDENT_14 == null ) { IDENT_11 . add ( IDENT_13 ) ; } } if ( ! ( IDENT_11 . isEmpty ( ) ) ) { throw new javax . IDENT_4 . METHOD_6 ( STRING_2 , IDENT_11 ) ; } }
org . junit . Assert . assertFalse ( IDENT_3 , IDENT_1 . validate ( IDENT_3 ) ) 