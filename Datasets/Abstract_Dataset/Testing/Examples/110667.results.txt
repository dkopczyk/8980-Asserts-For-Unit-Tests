METHOD_0 ( ) { java . lang . Object [ ] IDENT_0 = METHOD_1 ( ) ; com . liferay . portal . kernel . model . IDENT_1 IDENT_2 = ( ( com . liferay . portal . kernel . model . IDENT_1 ) ( IDENT_0 [ 0 ] ) ) ; long IDENT_3 = IDENT_2 . METHOD_2 ( ) ; long IDENT_4 = IDENT_2 . METHOD_3 ( ) ; com . liferay . portal . kernel . model . IDENT_5 group = com . liferay . portal . kernel . service . IDENT_6 . METHOD_4 ( IDENT_4 ) ; java . util . List < com . liferay . portal . kernel . model . IDENT_7 > IDENT_8 = com . liferay . portal . kernel . service . IDENT_9 . METHOD_5 ( IDENT_4 ) ; java . util . List < com . liferay . portal . kernel . model . IDENT_7 > IDENT_10 = com . liferay . portal . kernel . service . IDENT_9 . METHOD_6 ( IDENT_3 ) ; java . util . List < com . liferay . portal . kernel . model . IDENT_7 > IDENT_11 = new java . util . ArrayList ( ) ; for ( com . liferay . portal . kernel . model . IDENT_7 IDENT_12 : IDENT_10 ) { int type = IDENT_12 . getType ( ) ; if ( ( ( type == ( com . liferay . portal . kernel . model . IDENT_13 . IDENT_14 ) ) || ( ( type == ( com . liferay . portal . kernel . model . IDENT_13 . IDENT_15 ) ) && ( group . METHOD_7 ( ) ) ) ) || ( ( type == ( com . liferay . portal . kernel . model . IDENT_13 . IDENT_16 ) ) && ( ( ( group . METHOD_8 ( ) ) || ( group . METHOD_9 ( ) ) ) || ( group . METHOD_10 ( ) ) ) ) ) { IDENT_11 . add ( IDENT_12 ) ; } else if ( ( type == ( com . liferay . portal . kernel . model . IDENT_13 . IDENT_17 ) ) && ( IDENT_12 . METHOD_11 ( ) ) ) { com . liferay . portal . kernel . model . IDENT_18 IDENT_19 = com . liferay . portal . kernel . service . IDENT_20 . METHOD_12 ( IDENT_12 . METHOD_13 ( ) ) ; if ( ( IDENT_19 . METHOD_3 ( ) ) == IDENT_4 ) { IDENT_11 . add ( IDENT_12 ) ; } } } java . util . IDENT_21 IDENT_22 = new com . liferay . portal . kernel . util . IDENT_23 . METHOD_14 ( ) ; java . util . Collections . METHOD_15 ( IDENT_8 , IDENT_22 ) ; java . util . Collections . METHOD_15 ( IDENT_11 , IDENT_22 ) ; "<AssertPlaceHolder>" ; } METHOD_15 ( long [ ] , java . util . List ) { java . util . Map < java . lang . Long , com . liferay . IDENT_24 . base . model . IDENT_25 > map = new java . util . HashMap ( ) ; for ( com . liferay . IDENT_24 . base . model . IDENT_25 IDENT_26 : IDENT_27 ) { map . put ( IDENT_26 . METHOD_16 ( ) , IDENT_26 ) ; } IDENT_27 . METHOD_17 ( ) ; for ( long IDENT_28 : IDENT_29 ) { if ( map . containsKey ( IDENT_28 ) ) { IDENT_27 . add ( map . get ( IDENT_28 ) ) ; } } return IDENT_27 ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_8 ) 