METHOD_0 ( ) { org . apache . cxf . ws . IDENT_0 . IDENT_1 IDENT_2 = null ; METHOD_1 ( ) ; org . apache . cxf . ws . IDENT_0 . IDENT_3 IDENT_4 = control . METHOD_2 ( org . apache . cxf . ws . IDENT_0 . IDENT_3 . class ) ; org . easymock . EasyMock . expect ( source . METHOD_3 ( ) ) . andReturn ( IDENT_4 ) . METHOD_4 ( ) ; org . apache . cxf . ws . IDENT_0 . IDENT_5 IDENT_6 = control . METHOD_2 ( org . apache . cxf . ws . IDENT_0 . IDENT_5 . class ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_5 ( ) ) . andReturn ( IDENT_6 ) . METHOD_4 ( ) ; org . apache . cxf . ws . IDENT_0 . IDENT_7 IDENT_8 = control . METHOD_2 ( org . apache . cxf . ws . IDENT_0 . IDENT_7 . class ) ; org . apache . cxf . ws . IDENT_0 . IDENT_9 . IDENT_10 IDENT_11 = control . METHOD_2 ( org . apache . cxf . ws . IDENT_0 . IDENT_9 . IDENT_10 . class ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_6 ( IDENT_11 ) ) . andReturn ( IDENT_8 ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_7 ( ) ) . andReturn ( java . lang . Long . valueOf ( 1 ) ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_11 . getValue ( ) ) . andReturn ( STRING_0 ) . METHOD_4 ( ) ; control . replay ( ) ; IDENT_2 = new org . apache . cxf . ws . IDENT_0 . METHOD_8 ( id , null , IDENT_11 , IDENT_12 . IDENT_13 ) ; IDENT_2 . METHOD_9 ( source ) ; IDENT_2 . METHOD_10 ( IDENT_11 , 1 , false ) ; "<AssertPlaceHolder>" ; control . verify ( ) ; } METHOD_11 ( ) { return IDENT_14 ; }
org . junit . Assert . assertTrue ( IDENT_2 . METHOD_11 ( ) ) 