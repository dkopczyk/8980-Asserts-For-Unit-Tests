METHOD_0 ( ) { com . liferay . portal . kernel . util . IDENT_0 sb = new com . liferay . portal . kernel . util . METHOD_1 ( ) ; sb . append ( ( ( com . liferay . portal . kernel . util . METHOD_1 ) ( null ) ) ) ; "<AssertPlaceHolder>" ; } index ( ) { for ( Map . Entry < java . lang . String , java . util . Set < java . lang . Long > > IDENT_1 : IDENT_2 . entrySet ( ) ) { java . lang . String IDENT_3 = IDENT_1 . getKey ( ) ; com . liferay . portal . kernel . search . IDENT_4 < ? > IDENT_5 = IDENT_6 . METHOD_2 ( IDENT_3 ) ; if ( IDENT_5 == null ) { if ( com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . METHOD_3 ( ) ) { com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . warn ( ( STRING_0 + IDENT_3 ) ) ; } continue ; } if ( com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . METHOD_4 ( ) ) { com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . debug ( ( STRING_1 + IDENT_3 ) ) ; } for ( long IDENT_11 : IDENT_1 . getValue ( ) ) { try { IDENT_5 . METHOD_5 ( IDENT_3 , IDENT_11 ) ; } catch ( com . liferay . portal . kernel . search . IDENT_12 IDENT_13 ) { if ( com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . METHOD_3 ( ) ) { com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . warn ( com . liferay . IDENT_14 . string . METHOD_1 . METHOD_6 ( STRING_2 , IDENT_3 , STRING_3 , IDENT_11 ) , IDENT_13 ) ; } } } } if ( IDENT_15 . isEmpty ( ) ) { return ; } java . util . Set < java . lang . Long > IDENT_16 = IDENT_2 . get ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; com . liferay . portal . kernel . search . IDENT_4 < ? > IDENT_5 = IDENT_6 . METHOD_2 ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; for ( java . lang . String IDENT_19 : IDENT_15 ) { java . util . List < com . liferay . IDENT_17 . model . IDENT_18 > IDENT_20 = IDENT_21 . METHOD_7 ( METHOD_8 ( ) , IDENT_19 , IDENT_22 . IDENT_23 , IDENT_22 . IDENT_23 , null ) ; for ( com . liferay . IDENT_17 . model . IDENT_18 IDENT_24 : IDENT_20 ) { if ( ( IDENT_16 != null ) && ( IDENT_16 . contains ( IDENT_24 . METHOD_9 ( ) ) ) ) { continue ; } try { IDENT_5 . METHOD_5 ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) , IDENT_24 . METHOD_9 ( ) ) ; } catch ( com . liferay . portal . kernel . search . IDENT_12 IDENT_13 ) { if ( com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . METHOD_3 ( ) ) { com . liferay . IDENT_14 . string . METHOD_1 sb = new com . liferay . IDENT_14 . string . METHOD_1 ( 4 ) ; sb . append ( STRING_4 ) ; sb . append ( com . liferay . IDENT_17 . model . IDENT_18 . class . getName ( ) ) ; sb . append ( STRING_5 ) ; sb . append ( IDENT_24 . METHOD_9 ( ) ) ; com . liferay . IDENT_7 . resources . IDENT_8 . internal . util . IDENT_9 . IDENT_10 . warn ( sb . toString ( ) , IDENT_13 ) ; } } } } }
org . junit . Assert . assertEquals ( 0 , sb . index ( ) ) 