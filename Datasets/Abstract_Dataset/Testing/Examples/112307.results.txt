METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 IDENT_2 = METHOD_1 ( ) ; ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 IDENT_3 = METHOD_2 ( IDENT_2 ) ; ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_4 resource = METHOD_3 ( STRING_0 , 1000 , IDENT_3 ) ; ch . puzzle . itc . mobiliar . business . IDENT_0 . entity . IDENT_1 IDENT_5 = METHOD_2 ( IDENT_2 , IDENT_6 ) ; when ( IDENT_7 . METHOD_4 ( resource . getId ( ) ) ) . thenReturn ( resource ) ; ch . puzzle . itc . mobiliar . business . function . control . List < ch . puzzle . itc . mobiliar . business . function . entity . IDENT_8 > IDENT_9 = IDENT_10 . METHOD_5 ( IDENT_3 , IDENT_11 . getName ( ) ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { if ( ( ( IDENT_12 ) != null ) && ( ! ( IDENT_12 . isEmpty ( ) ) ) ) { return false ; } if ( ( ( IDENT_13 ) != null ) && ( ! ( IDENT_13 . isEmpty ( ) ) ) ) { return false ; } if ( ( ( IDENT_14 ) != null ) && ( ! ( IDENT_14 . isEmpty ( ) ) ) ) { return false ; } return true ; }
org . junit . Assert . assertTrue ( IDENT_9 . isEmpty ( ) ) 