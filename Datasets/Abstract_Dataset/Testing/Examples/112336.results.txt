METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . generator . control . IDENT_0 result = new ch . puzzle . itc . mobiliar . business . generator . control . METHOD_1 ( ) ; ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 IDENT_2 = org . mockito . Mockito . mock ( ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 . class ) ; org . mockito . Mockito . when ( IDENT_2 . METHOD_2 ( ) ) . thenReturn ( STRING_0 ) ; ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 IDENT_3 = org . mockito . Mockito . mock ( ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 . class ) ; org . mockito . Mockito . when ( IDENT_3 . METHOD_2 ( ) ) . thenReturn ( STRING_1 ) ; java . util . List < ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 > IDENT_4 = new java . util . ArrayList < ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 > ( ) ; IDENT_4 . add ( IDENT_2 ) ; IDENT_4 . add ( IDENT_3 ) ; result . METHOD_3 ( IDENT_4 ) ; java . lang . String message = result . METHOD_2 ( ) ; java . lang . String expected = STRING_2 + ( STRING_0 + STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( ( ( ( IDENT_4 ) != null ) && ( ! ( IDENT_4 . isEmpty ( ) ) ) ) && ( METHOD_4 ( ) ) ) { sb . append ( STRING_2 ) ; for ( ch . puzzle . itc . mobiliar . business . generator . control . IDENT_1 result : IDENT_4 ) { if ( ! ( result . METHOD_5 ( ) ) ) { sb . append ( result . METHOD_2 ( ) ) ; } } } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( expected , message ) 