METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . security . control . IDENT_0 IDENT_1 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_1 ( ) ; IDENT_1 . setName ( ch . puzzle . itc . mobiliar . business . security . control . IDENT_2 . IDENT_3 ) ; ch . puzzle . itc . mobiliar . business . security . control . IDENT_4 IDENT_5 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_2 ( ) ; IDENT_5 . setValue ( IDENT_6 . IDENT_7 . name ( ) ) ; ch . puzzle . itc . mobiliar . business . security . control . IDENT_8 IDENT_9 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_3 ( ) ; IDENT_9 . METHOD_4 ( IDENT_1 ) ; IDENT_9 . METHOD_5 ( IDENT_10 . IDENT_11 ) ; IDENT_9 . METHOD_6 ( IDENT_12 ) ; IDENT_9 . METHOD_7 ( IDENT_5 ) ; IDENT_13 = new ch . puzzle . itc . mobiliar . business . security . control . HashMap ( ) ; IDENT_13 . put ( IDENT_1 . getName ( ) , ch . puzzle . itc . mobiliar . business . security . control . Arrays . asList ( new ch . puzzle . itc . mobiliar . IDENT_14 . METHOD_8 ( ) . METHOD_9 ( IDENT_6 . IDENT_7 , IDENT_9 ) ) ) ; IDENT_15 . IDENT_16 = IDENT_13 ; boolean exists = IDENT_15 . METHOD_10 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ch . puzzle . itc . mobiliar . business . security . control . METHOD_3 ) { if ( ( IDENT_17 . METHOD_11 ( ) ) != null ) { return METHOD_12 ( IDENT_17 ) ; } else if ( ( IDENT_17 . METHOD_13 ( ) ) != null ) { return METHOD_14 ( IDENT_17 ) ; } return false ; }
org . junit . Assert . assertTrue ( exists ) 