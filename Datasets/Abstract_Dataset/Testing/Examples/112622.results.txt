METHOD_0 ( ) { ch . puzzle . itc . mobiliar . business . security . control . IDENT_0 IDENT_1 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_1 ( ) ; IDENT_1 . setName ( STRING_0 ) ; ch . puzzle . itc . mobiliar . business . security . control . IDENT_2 IDENT_3 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_2 ( ) ; IDENT_3 . setValue ( IDENT_4 . IDENT_5 . name ( ) ) ; ch . puzzle . itc . mobiliar . business . security . control . IDENT_6 IDENT_7 = new ch . puzzle . itc . mobiliar . business . security . control . METHOD_3 ( ) ; IDENT_7 . METHOD_4 ( IDENT_1 ) ; IDENT_7 . METHOD_5 ( IDENT_8 . IDENT_9 ) ; IDENT_7 . METHOD_6 ( IDENT_10 ) ; IDENT_7 . METHOD_7 ( IDENT_3 ) ; IDENT_11 = new ch . puzzle . itc . mobiliar . business . security . control . HashMap ( ) ; IDENT_12 . IDENT_13 = IDENT_11 ; when ( IDENT_14 . METHOD_8 ( STRING_0 ) ) . thenReturn ( ch . puzzle . itc . mobiliar . business . security . control . Arrays . asList ( IDENT_7 ) ) ; boolean exists = IDENT_12 . METHOD_9 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( ch . puzzle . itc . mobiliar . business . security . control . METHOD_3 ) { if ( ( IDENT_15 . METHOD_10 ( ) ) != null ) { return METHOD_11 ( IDENT_15 ) ; } else if ( ( IDENT_15 . METHOD_12 ( ) ) != null ) { return METHOD_13 ( IDENT_15 ) ; } return false ; }
org . junit . Assert . assertTrue ( exists ) 