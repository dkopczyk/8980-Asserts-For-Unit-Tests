METHOD_0 ( ) { IDENT_0 . IDENT_1 . data . array . IDENT_2 < IDENT_0 . IDENT_1 . data . IDENT_3 . IDENT_4 > data = new IDENT_0 . IDENT_1 . data . array . IDENT_2 < IDENT_0 . IDENT_1 . data . IDENT_3 . IDENT_4 > ( ) ; data . add ( new IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 ( 1 , 2 ) ) ; data . add ( new IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 ( 3 , 4 ) ) ; data . add ( new IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 ( 5 , 6 ) ) ; data . add ( new IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 ( 7 , 8 ) ) ; java . io . ByteArrayOutputStream IDENT_5 = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_6 IDENT_7 = new java . io . METHOD_2 ( IDENT_5 ) ; data . write ( IDENT_7 ) ; IDENT_0 . IDENT_1 . data . array . IDENT_2 < IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 > IDENT_8 = new IDENT_0 . IDENT_1 . data . array . IDENT_2 < IDENT_0 . IDENT_1 . data . IDENT_3 . METHOD_1 > ( ) ; IDENT_8 . METHOD_3 ( new java . io . METHOD_4 ( new java . io . ByteArrayInputStream ( IDENT_5 . toByteArray ( ) ) ) ) ; for ( int i = 0 ; i < ( data . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( int ) { IDENT_0 . IDENT_1 . data . map . IDENT_9 . Entry < IDENT_10 > p = METHOD_5 ( key ) ; return p == null ? null : p . value ; }
org . junit . Assert . assertEquals ( data . get ( i ) , IDENT_8 . get ( i ) ) 