METHOD_0 ( ) { org . apache . hadoop . io . IDENT_0 IDENT_1 = new org . apache . hadoop . io . METHOD_1 ( new byte [ ] { 1 , 2 , 3 , 4 } ) ; org . apache . hadoop . io . METHOD_1 IDENT_2 = new org . apache . hadoop . io . METHOD_1 ( new byte [ ] { 1 , 2 , 8 , 9 } ) ; org . apache . hadoop . io . METHOD_1 IDENT_3 = new org . apache . hadoop . io . METHOD_1 ( new byte [ ] { 1 , 1 , 1 , 2 } ) ; IDENT_4 . tuple . IDENT_5 tuple = new IDENT_4 . tuple . METHOD_2 ( IDENT_1 , IDENT_2 , IDENT_3 ) ; com . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = new com . IDENT_6 . IDENT_7 . METHOD_3 ( com . IDENT_6 . IDENT_7 . IDENT_10 . get ( ) . METHOD_4 ( ) ) ; byte [ ] IDENT_11 = IDENT_9 . serialize ( tuple ) ; IDENT_4 . tuple . METHOD_2 IDENT_12 = new IDENT_4 . tuple . METHOD_2 ( IDENT_1 , IDENT_2 , IDENT_3 ) ; IDENT_4 . tuple . METHOD_2 IDENT_13 = IDENT_9 . METHOD_5 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( T ) { com . IDENT_6 . IDENT_7 . serialization . IDENT_14 IDENT_15 = null ; try { byte [ ] buffer = IDENT_16 ; int size = IDENT_17 . METHOD_6 ( ) ; if ( size > ( IDENT_16 . length ) ) { buffer = new byte [ size ] ; } int IDENT_18 = 0 ; int IDENT_19 ; while ( ( IDENT_19 = IDENT_17 . read ( buffer , IDENT_18 , ( size - IDENT_18 ) ) ) != ( - 1 ) ) { IDENT_18 += IDENT_19 ; if ( IDENT_18 == size ) break ; } IDENT_15 = new com . IDENT_6 . IDENT_7 . serialization . METHOD_7 ( new com . IDENT_6 . IDENT_7 . serialization . ByteArrayInputStream ( buffer ) ) ; IDENT_20 = ( ( T ) ( IDENT_15 . METHOD_8 ( ) ) ) ; } catch ( java . lang . IDENT_21 e ) { throw new java . lang . RuntimeException ( e ) ; } finally { if ( IDENT_15 != null ) { IDENT_15 . close ( ) ; } } return IDENT_20 ; }
org . junit . Assert . assertEquals ( IDENT_12 , IDENT_13 ) 