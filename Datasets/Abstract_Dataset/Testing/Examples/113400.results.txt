METHOD_0 ( ) { org . IDENT_0 . server . service . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_0 . server . service . IDENT_1 . METHOD_1 ( 5 , 5 ) ; "<AssertPlaceHolder>" ; } split ( java . lang . String ) { java . util . List < java . lang . String > IDENT_4 = new java . util . ArrayList < java . lang . String > ( ) ; if ( IDENT_5 == null ) { return IDENT_4 ; } int IDENT_6 = 0 ; java . lang . String IDENT_7 = IDENT_5 . trim ( ) ; int IDENT_8 = IDENT_7 . length ( ) ; while ( IDENT_6 < IDENT_8 ) { if ( java . lang . IDENT_9 . METHOD_2 ( IDENT_7 . charAt ( IDENT_6 ) ) ) { IDENT_6 ++ ; continue ; } int IDENT_10 = ( IDENT_4 . isEmpty ( ) ) ? IDENT_11 : IDENT_12 ; int IDENT_13 = IDENT_8 - IDENT_6 ; if ( IDENT_13 > IDENT_10 ) { int IDENT_14 = ( IDENT_6 + IDENT_10 ) - ( IDENT_15 ) ; while ( ( IDENT_14 > IDENT_6 ) && ( ! ( java . lang . IDENT_9 . METHOD_2 ( IDENT_7 . charAt ( IDENT_14 ) ) ) ) ) { IDENT_14 OP_0 ; } if ( IDENT_14 == IDENT_6 ) { IDENT_14 = ( IDENT_6 + IDENT_10 ) - ( IDENT_15 ) ; } IDENT_4 . add ( ( ( ( IDENT_4 . isEmpty ( ) ? "" : IDENT_16 ) + ( IDENT_7 . substring ( IDENT_6 , IDENT_14 ) . trim ( ) ) ) + ( IDENT_17 ) ) ) ; IDENT_6 = IDENT_14 ; } else { IDENT_4 . add ( ( ( IDENT_4 . isEmpty ( ) ? "" : IDENT_16 ) + ( IDENT_7 . substring ( IDENT_6 ) ) ) ) ; break ; } } return IDENT_4 ; }
org . junit . Assert . assertTrue ( IDENT_3 . split ( " " ) . isEmpty ( ) ) 