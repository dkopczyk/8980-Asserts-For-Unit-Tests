METHOD_0 ( ) { final byte [ ] bytes = org . locationtech . IDENT_0 . core . index . IDENT_1 . IDENT_2 . METHOD_1 ( org . locationtech . IDENT_0 . core . index . simple . IDENT_3 . IDENT_4 ) ; final org . locationtech . IDENT_0 . core . index . IDENT_5 IDENT_6 = ( ( org . locationtech . IDENT_0 . core . index . IDENT_5 ) ( org . locationtech . IDENT_0 . core . index . IDENT_1 . IDENT_2 . METHOD_2 ( bytes ) ) ) ; final byte [ ] IDENT_7 = org . locationtech . IDENT_0 . core . index . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Collection ) { if ( IDENT_8 . isEmpty ( ) ) { return new byte [ ] { } ; } int IDENT_9 = org . locationtech . IDENT_0 . core . index . IDENT_10 . METHOD_3 ( IDENT_8 . size ( ) ) ; final java . util . List < byte [ ] > IDENT_11 = new java . util . ArrayList < byte [ ] > ( ) ; for ( final org . locationtech . IDENT_0 . core . index . IDENT_1 . IDENT_12 IDENT_13 : IDENT_8 ) { final byte [ ] IDENT_14 = org . locationtech . IDENT_0 . core . index . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_13 ) ; IDENT_9 += ( org . locationtech . IDENT_0 . core . index . IDENT_10 . METHOD_3 ( IDENT_14 . length ) ) + ( IDENT_14 . length ) ; IDENT_11 . add ( IDENT_14 ) ; } final java . nio . ByteBuffer buf = java . nio . ByteBuffer . METHOD_4 ( IDENT_9 ) ; org . locationtech . IDENT_0 . core . index . IDENT_10 . METHOD_5 ( IDENT_8 . size ( ) , buf ) ; for ( final byte [ ] IDENT_14 : IDENT_11 ) { org . locationtech . IDENT_0 . core . index . IDENT_10 . METHOD_5 ( IDENT_14 . length , buf ) ; buf . put ( IDENT_14 ) ; } return buf . array ( ) ; }
org . junit . Assert . assertArrayEquals ( bytes , IDENT_7 ) 