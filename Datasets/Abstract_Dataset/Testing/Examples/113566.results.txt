METHOD_0 ( ) { org . locationtech . IDENT_0 . IDENT_1 . impl . IDENT_2 line = METHOD_1 ( ) ; org . locationtech . IDENT_0 . IDENT_1 . IDENT_3 IDENT_4 = METHOD_1 ( ) . METHOD_2 ( ) ; java . util . ArrayList < org . locationtech . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_6 = METHOD_3 ( IDENT_4 ) ; java . util . Collection < java . lang . Integer > IDENT_7 = new java . util . IDENT_8 < java . lang . Integer > ( ) ; double IDENT_9 = - 1 ; int IDENT_10 = 1 ; for ( org . locationtech . IDENT_0 . IDENT_1 . IDENT_5 IDENT_11 : IDENT_6 ) { double d = line . METHOD_4 ( ) . METHOD_5 ( IDENT_11 ) ; if ( ( java . lang . Math . METHOD_6 ( ( d - IDENT_9 ) ) ) < FLOAT_0 ) { IDENT_7 . add ( IDENT_10 ) ; } else if ( d > IDENT_9 ) { IDENT_7 . METHOD_7 ( ) ; IDENT_7 . add ( IDENT_10 ) ; IDENT_9 = d ; } IDENT_10 ++ ; } int IDENT_12 = line . METHOD_4 ( ) . METHOD_8 ( IDENT_4 . METHOD_9 ( ) ) ; "<AssertPlaceHolder>" ; } contains ( org . locationtech . IDENT_0 . IDENT_1 . IDENT_5 ) { return ( IDENT_13 . contains ( p ) ) && ( IDENT_14 . contains ( p ) ) ; }
org . junit . Assert . assertTrue ( IDENT_7 . contains ( IDENT_12 ) ) 