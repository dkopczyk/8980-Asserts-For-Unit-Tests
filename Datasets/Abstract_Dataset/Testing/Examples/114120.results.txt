METHOD_0 ( ) { org . IDENT_0 . test . IDENT_1 v1 = graph . METHOD_1 ( STRING_0 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . save ( IDENT_4 ) ; org . IDENT_0 . test . IDENT_1 v2 = graph . METHOD_1 ( STRING_1 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . save ( IDENT_4 ) ; org . IDENT_0 . test . IDENT_1 IDENT_5 = graph . METHOD_1 ( STRING_2 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . save ( IDENT_4 ) ; graph . METHOD_2 ( STRING_3 , v1 , v2 , STRING_4 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . setProperty ( STRING_5 , INT_0 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . save ( IDENT_4 ) ; graph . METHOD_2 ( STRING_6 , v1 , IDENT_5 , STRING_4 , org . IDENT_0 . test . IDENT_2 . IDENT_3 ) . setProperty ( STRING_5 , INT_0 , org . IDENT_0 . test . IDENT_2 . IDENT_6 ) . save ( IDENT_4 ) ; java . lang . IDENT_7 < org . IDENT_0 . test . IDENT_8 > IDENT_9 = graph . query ( IDENT_10 ) . METHOD_3 ( STRING_5 , IDENT_11 . IDENT_12 , INT_0 ) . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } count ( java . lang . IDENT_7 ) { int count = 0 ; for ( T IDENT_13 : IDENT_14 ) { count ++ ; } org . IDENT_0 . util . IDENT_15 . close ( IDENT_14 ) ; return count ; }
org . junit . Assert . assertEquals ( 1 , count ( METHOD_4 ) ) 