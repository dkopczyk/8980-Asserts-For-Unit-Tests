METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Integer > IDENT_3 = com . IDENT_0 . IDENT_1 . IDENT_4 . apply ( ) ; for ( int i = - 3 ; i < 3 ; i ++ ) { boolean actual = IDENT_3 . METHOD_1 ( i ) ; boolean expected = false ; "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . Object ) { return METHOD_2 ( ) . METHOD_3 ( false , new com . IDENT_0 . IDENT_1 . IDENT_5 < java . lang . Boolean , com . IDENT_0 . IDENT_1 . IDENT_6 < ? , IDENT_7 > , java . lang . Boolean > ( ) { public com . IDENT_0 . IDENT_1 . Boolean apply ( java . lang . Boolean METHOD_1 , com . IDENT_0 . IDENT_1 . IDENT_6 < ? , IDENT_7 > IDENT_8 ) throws com . IDENT_0 . IDENT_1 . Exception { if ( METHOD_1 ) { return true ; } return IDENT_8 . METHOD_1 ( v ) ; } } ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( expected ) ) ) 