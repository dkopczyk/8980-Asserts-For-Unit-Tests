METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( true ) ; final java . util . concurrent . IDENT_2 IDENT_3 = new java . util . concurrent . METHOD_2 ( 1 ) ; final java . lang . Thread writer = new java . lang . Thread ( ) { @ org . apache . IDENT_4 . test . core . impl . IDENT_5 . Override public void run ( ) { while ( IDENT_1 . get ( ) ) { service . write ( "test" , "value" ) ; service . METHOD_3 ( ) ; } IDENT_3 . METHOD_4 ( ) ; } } ; final java . util . concurrent . METHOD_2 IDENT_6 = new java . util . concurrent . METHOD_2 ( 1 ) ; final java . lang . Thread reader = new java . lang . Thread ( ) { @ org . apache . IDENT_4 . test . core . impl . IDENT_5 . Override public void run ( ) { while ( IDENT_1 . get ( ) ) { try { service . read ( "test" ) ; } catch ( final java . lang . IllegalStateException e ) { IDENT_1 . set ( false ) ; } } IDENT_6 . METHOD_4 ( ) ; } } ; reader . start ( ) ; writer . start ( ) ; try { IDENT_6 . METHOD_5 ( 1 , TimeUnit . IDENT_7 ) ; IDENT_3 . METHOD_5 ( 1 , TimeUnit . IDENT_7 ) ; } catch ( final java . lang . IDENT_8 e ) { java . lang . Thread . METHOD_6 ( ) ; org . junit . Assert . fail ( ) ; } "<AssertPlaceHolder>" ; } read ( java . lang . String ) { return IDENT_9 . get ( k ) ; }
org . junit . Assert . assertEquals ( "value" , service . read ( "test" ) ) 