METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( METHOD_2 ( ) , IDENT_1 ) ; if ( org . eclipse . swt . tests . junit . IDENT_2 . IDENT_3 ) { return ; } final java . util . concurrent . atomic . IDENT_4 exception = new java . util . concurrent . atomic . METHOD_3 ( ( - 1 ) ) ; IDENT_5 . METHOD_4 ( org . eclipse . swt . IDENT_5 . IDENT_6 . METHOD_5 ( ( event ) -> { try { IDENT_5 . evaluate ( STRING_0 ) ; } catch ( e ) { exception . set ( e . code ) ; } } ) ) ; IDENT_5 . METHOD_6 ( STRING_1 ) ; shell . METHOD_7 ( ) ; java . util . concurrent . atomic . IDENT_7 IDENT_8 = new java . util . concurrent . atomic . METHOD_8 ( false ) ; boolean IDENT_9 = METHOD_9 ( ( ) -> { if ( ( exception . get ( ) ) != ( - 1 ) ) { if ( ( exception . get ( ) ) == IDENT_10 . IDENT_11 ) { return true ; } else if ( ( exception . get ( ) ) == IDENT_10 . IDENT_12 ) { IDENT_8 . set ( true ) ; return true ; } } return false ; } ) ; if ( IDENT_8 . get ( ) ) { System . err . println ( ( STRING_2 + STRING_3 ) ) ; } java . lang . String message = ( ( exception . get ( ) ) == ( - 1 ) ) ? STRING_4 : STRING_5 + ( exception . get ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( java . util . function . IDENT_13 ) { return METHOD_9 ( IDENT_14 , ( 1000 * ( IDENT_15 ) ) ) ; }
org . junit . Assert . assertTrue ( message , IDENT_9 ) 