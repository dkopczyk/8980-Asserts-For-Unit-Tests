METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( METHOD_2 ( ) , IDENT_1 ) ; final java . util . concurrent . atomic . IDENT_2 exception = new java . util . concurrent . atomic . METHOD_3 ( ( - 1 ) ) ; IDENT_3 . METHOD_4 ( org . eclipse . swt . IDENT_3 . IDENT_4 . METHOD_5 ( ( event ) -> { try { IDENT_3 . evaluate ( STRING_0 ) ; } catch ( e ) { exception . set ( e . code ) ; } } ) ) ; IDENT_3 . METHOD_6 ( STRING_1 ) ; shell . METHOD_7 ( ) ; java . util . concurrent . atomic . IDENT_5 < java . lang . String > IDENT_6 = new java . util . concurrent . atomic . METHOD_8 ( "" ) ; boolean IDENT_7 = METHOD_9 ( ( ) -> { if ( ( exception . get ( ) ) != ( - 1 ) ) { if ( ( exception . get ( ) ) == IDENT_8 . IDENT_9 ) { return true ; } else { IDENT_6 . set ( ( STRING_2 + ( exception . get ( ) ) ) ) ; } } return false ; } ) ; java . lang . String message = ( "" . equals ( IDENT_6 . get ( ) ) ) ? STRING_3 : STRING_4 + ( IDENT_6 . get ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( java . util . function . IDENT_10 ) { return METHOD_9 ( IDENT_11 , ( 1000 * ( IDENT_12 ) ) ) ; }
org . junit . Assert . assertTrue ( message , IDENT_7 ) 