METHOD_0 ( ) { IDENT_0 . io . json . IDENT_1 value = new IDENT_0 . io . json . METHOD_1 ( new IDENT_0 . io . json . METHOD_2 ( STRING_0 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( values . isEmpty ( ) ) { return new IDENT_0 . util . IDENT_2 < java . lang . String , java . lang . String > ( 0 ) ; } java . util . Map < java . lang . String , IDENT_0 . io . json . METHOD_2 > map = values . get ( 0 ) . METHOD_4 ( ) ; if ( map == null ) { return new IDENT_0 . util . IDENT_2 < java . lang . String , java . lang . String > ( 0 ) ; } IDENT_0 . util . IDENT_2 < java . lang . String , java . lang . String > values = new IDENT_0 . util . IDENT_2 < java . lang . String , java . lang . String > ( ) ; for ( Map . Entry < java . lang . String , IDENT_0 . io . json . METHOD_2 > entry : map . entrySet ( ) ) { java . lang . String key = entry . getKey ( ) ; IDENT_0 . io . json . METHOD_2 value = entry . getValue ( ) ; if ( value . METHOD_5 ( ) ) { values . put ( key , "" ) ; continue ; } java . lang . Object obj = value . getValue ( ) ; if ( obj != null ) { values . put ( key , obj . toString ( ) ) ; continue ; } java . util . List < IDENT_0 . io . json . METHOD_2 > array = value . METHOD_6 ( ) ; if ( array != null ) { for ( IDENT_0 . io . json . METHOD_2 element : array ) { if ( element . METHOD_5 ( ) ) { values . put ( key , "" ) ; continue ; } obj = element . getValue ( ) ; if ( obj != null ) { values . put ( key , obj . toString ( ) ) ; } } } } return values ; }
org . junit . Assert . assertTrue ( value . METHOD_3 ( ) . isEmpty ( ) ) 