METHOD_0 ( ) { System . out . println ( STRING_0 5 ) ; java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 } ; java . lang . String IDENT_1 = STRING_6 ; com . IDENT_2 . client . IDENT_3 client = METHOD_1 ( STRING_0 1 , STRING_7 , METHOD_2 ( ) ) ; for ( java . lang . String IDENT_4 : IDENT_0 ) { METHOD_3 ( client , IDENT_4 , STRING_8 , STRING_0 ) ; } METHOD_4 ( client , IDENT_1 ) ; com . IDENT_2 . client . query . IDENT_5 IDENT_6 = client . METHOD_5 ( ) ; com . IDENT_2 . client . query . IDENT_7 IDENT_8 = IDENT_6 . METHOD_6 ( STRING_0 3 , STRING_6 ) ; IDENT_8 . METHOD_7 ( STRING_0 4 , STRING_9 ) ; IDENT_8 . setName ( STRING_0 2 ) ; com . IDENT_2 . client . io . IDENT_9 IDENT_10 = new com . IDENT_2 . client . io . METHOD_8 ( ) . METHOD_9 ( IDENT_11 . IDENT_12 ) ; IDENT_6 . METHOD_10 ( IDENT_8 , IDENT_10 ) ; java . lang . String result = IDENT_10 . get ( ) ; System . out . println ( result ) ; "<AssertPlaceHolder>" ; client . METHOD_11 ( ) ; } substring ( com . IDENT_2 . client . type . IDENT_13 , com . IDENT_2 . client . type . IDENT_13 ) { if ( IDENT_14 == null ) { throw new java . lang . IllegalArgumentException ( STRING_10 ) ; } return new com . IDENT_2 . client . impl . IDENT_15 . METHOD_12 ( STRING_11 , STRING_12 , new java . lang . Object [ ] { IDENT_16 , IDENT_14 } ) ; }
org . junit . Assert . assertEquals ( STRING_0 0 , result . substring ( 0 , 1 ) ) 