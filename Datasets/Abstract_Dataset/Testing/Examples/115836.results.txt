METHOD_0 ( ) { try ( com . IDENT_0 . client . IDENT_1 . IDENT_2 iterator = new com . IDENT_0 . client . IDENT_1 . METHOD_1 ( ) { @ com . IDENT_0 . client . test . Override public void close ( ) throws com . IDENT_0 . client . test . RuntimeException { throw new java . lang . RuntimeException ( STRING_0 ) ; } public com . IDENT_0 . client . test . java . util . Iterator < com . IDENT_0 . client . IDENT_1 . IDENT_3 > iterator ( ) { return this ; } @ com . IDENT_0 . client . test . Override public boolean hasNext ( ) { return false ; } @ com . IDENT_0 . client . test . Override public com . IDENT_0 . client . IDENT_1 . IDENT_3 next ( ) { throw new java . lang . METHOD_2 ( ) ; } } ) { "<AssertPlaceHolder>" ; } org . junit . Assert . fail ( STRING_1 ) ; } hasNext ( ) { if ( ( IDENT_4 ) != null ) return true ; if ( ( IDENT_5 ) == true ) return false ; try { IDENT_4 = com . IDENT_0 . client . example . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_3 ( INT_0 , TimeUnit . IDENT_10 ) ; if ( STRING_2 . equals ( IDENT_4 ) ) { IDENT_4 = null ; IDENT_5 = true ; return false ; } return true ; } catch ( java . lang . IDENT_11 e ) { com . IDENT_0 . client . example . IDENT_6 . IDENT_7 . IDENT_8 . logger . error ( STRING_3 ) ; return false ; } }
org . junit . Assert . assertFalse ( iterator . hasNext ( ) ) 