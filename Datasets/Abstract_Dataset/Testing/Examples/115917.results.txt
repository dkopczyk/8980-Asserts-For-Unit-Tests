METHOD_0 ( ) { java . lang . String [ ] values = processor . METHOD_1 ( ) ; IDENT_0 . util . string . IDENT_1 IDENT_2 = new IDENT_0 . util . string . METHOD_2 ( values ) ; for ( java . lang . String expected : values ) { byte feature = IDENT_2 . get ( expected ) ; IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = new IDENT_0 . IDENT_3 . METHOD_3 ( new byte [ ] { feature } , new short [ ] { } , new float [ ] { } , 0 ) ; java . lang . String actual = IDENT_6 . METHOD_4 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( IDENT_0 . IDENT_3 . METHOD_3 ) { java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; byte [ ] bytes = IDENT_3 . METHOD_5 ( ) ; short [ ] IDENT_7 = IDENT_3 . METHOD_6 ( ) ; float [ ] IDENT_8 = IDENT_3 . METHOD_7 ( ) ; if ( ( ( ( bytes . length ) != ( IDENT_9 . length ) ) || ( ( IDENT_7 . length ) != ( IDENT_10 . length ) ) ) || ( ( IDENT_8 . length ) != ( IDENT_11 . length ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } for ( int i = 0 ; i < ( bytes . length ) ; i ++ ) { if ( ( buf . length ( ) ) > 0 ) buf . append ( " " ) ; buf . append ( IDENT_9 [ i ] . METHOD_1 ( ) [ ( ( ( int ) ( bytes [ i ] ) ) & 255 ) ] ) ; } for ( int i = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { if ( ( buf . length ( ) ) > 0 ) buf . append ( " " ) ; buf . append ( IDENT_10 [ i ] . METHOD_1 ( ) [ ( ( int ) ( IDENT_7 [ i ] ) ) ] ) ; } for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) { if ( ( buf . length ( ) ) > 0 ) buf . append ( " " ) ; buf . append ( IDENT_8 [ i ] ) ; } return buf . toString ( ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 