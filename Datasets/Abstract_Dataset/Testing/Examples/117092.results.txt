METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 ) ; IDENT_3 . put ( com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_7 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_8 ) ; java . util . List < org . apache . accumulo . core . data . IDENT_9 > expected = new java . util . ArrayList < org . apache . accumulo . core . data . IDENT_9 > ( ) ; expected . add ( IDENT_3 ) ; java . util . List < org . apache . accumulo . core . data . IDENT_9 > actual = instance . METHOD_2 ( row , IDENT_10 , IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , java . lang . String [ ] , java . lang . String [ ] ) { org . apache . commons . lang . IDENT_12 . METHOD_3 ( IDENT_13 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_14 . IDENT_15 ) ; java . util . Map < org . apache . accumulo . core . data . IDENT_16 , org . apache . accumulo . core . data . IDENT_17 > IDENT_18 = new java . util . IDENT_19 < org . apache . accumulo . core . data . IDENT_16 , org . apache . accumulo . core . data . IDENT_17 > ( ) ; for ( org . apache . accumulo . core . data . IDENT_9 IDENT_3 : IDENT_13 . METHOD_2 ( row , IDENT_10 , IDENT_11 ) ) { org . apache . hadoop . io . IDENT_20 IDENT_21 = new org . apache . hadoop . io . METHOD_4 ( IDENT_3 . METHOD_5 ( ) ) ; for ( org . apache . accumulo . core . data . IDENT_22 IDENT_23 : IDENT_3 . METHOD_6 ( ) ) { if ( IDENT_24 ) { key = new org . apache . accumulo . core . data . METHOD_7 ( IDENT_21 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_25 . IDENT_26 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_25 . IDENT_27 , 0 ) ; } else { key = new org . apache . accumulo . core . data . METHOD_7 ( IDENT_21 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_25 . IDENT_26 , com . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_25 . IDENT_27 ) ; } IDENT_18 . put ( key , new org . apache . accumulo . core . data . METHOD_8 ( IDENT_23 . getValue ( ) ) ) ; } } return IDENT_18 ; }
org . junit . Assert . assertEquals ( expected , actual ) 