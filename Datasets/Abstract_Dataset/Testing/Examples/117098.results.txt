METHOD_0 ( ) { java . nio . file . Path IDENT_0 = java . nio . file . IDENT_1 . get ( java . lang . System . getProperty ( STRING_0 ) ) ; edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) . METHOD_1 ( IDENT_2 . IDENT_3 ) ; java . nio . file . Path IDENT_4 = edu . illinois . library . cantaloupe . IDENT_5 . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { final edu . illinois . library . cantaloupe . config . Configuration config = edu . illinois . library . cantaloupe . config . Configuration . getInstance ( ) ; final java . lang . String IDENT_6 = config . getString ( IDENT_2 . IDENT_3 , "" ) ; if ( ! ( IDENT_6 . isEmpty ( ) ) ) { java . nio . file . Path IDENT_7 = java . nio . file . IDENT_1 . get ( IDENT_6 ) ; try { java . nio . file . IDENT_8 . METHOD_3 ( IDENT_7 ) ; return IDENT_7 ; } catch ( java . nio . file . IDENT_9 IDENT_10 ) { } catch ( java . io . IOException e ) { System . err . println ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; System . err . println ( ( STRING_1 + STRING_2 ) ) ; } } return java . nio . file . IDENT_1 . get ( java . lang . System . getProperty ( STRING_0 ) ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_4 ) 