METHOD_0 ( ) { final edu . illinois . library . cantaloupe . image . IDENT_0 IDENT_1 = new edu . illinois . library . cantaloupe . image . METHOD_1 ( INT_0 , INT_1 ) ; final edu . illinois . library . cantaloupe . operation . IDENT_2 IDENT_3 = new edu . illinois . library . cantaloupe . operation . METHOD_2 ( 1 ) ; final edu . illinois . library . cantaloupe . image . IDENT_4 IDENT_5 = new edu . illinois . library . cantaloupe . image . METHOD_3 ( 1 , 2 ) ; instance . METHOD_4 ( IDENT_6 . IDENT_7 . IDENT_8 ) ; instance . METHOD_5 ( INT_1 ) ; instance . METHOD_6 ( 200 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( edu . illinois . library . cantaloupe . image . METHOD_1 , edu . illinois . library . cantaloupe . operation . METHOD_2 , edu . illinois . library . cantaloupe . image . METHOD_3 ) { final edu . illinois . library . cantaloupe . image . METHOD_1 size = new edu . illinois . library . cantaloupe . image . METHOD_1 ( IDENT_9 ) ; final double IDENT_10 = IDENT_11 . METHOD_8 ( ) ; final double IDENT_12 = IDENT_13 . METHOD_9 ( ) . METHOD_10 ( ) ; if ( ( METHOD_11 ( ) ) != null ) { final double IDENT_14 = ( METHOD_11 ( ) ) * ( IDENT_12 / IDENT_10 ) ; size . METHOD_5 ( ( ( size . METHOD_12 ( ) ) * IDENT_14 ) ) ; size . METHOD_6 ( ( ( size . METHOD_13 ( ) ) * IDENT_14 ) ) ; } else { switch ( METHOD_14 ( ) ) { case IDENT_15 : double IDENT_14 = IDENT_12 / IDENT_10 ; size . METHOD_5 ( ( ( size . METHOD_12 ( ) ) * IDENT_14 ) ) ; size . METHOD_6 ( ( ( size . METHOD_13 ( ) ) * IDENT_14 ) ) ; break ; case IDENT_16 : IDENT_14 = ( METHOD_15 ( ) ) / ( size . METHOD_13 ( ) ) ; size . METHOD_5 ( ( ( size . METHOD_12 ( ) ) * IDENT_14 ) ) ; size . METHOD_6 ( ( ( size . METHOD_13 ( ) ) * IDENT_14 ) ) ; break ; case IDENT_17 : IDENT_14 = ( METHOD_16 ( ) ) / ( size . METHOD_12 ( ) ) ; size . METHOD_5 ( ( ( size . METHOD_12 ( ) ) * IDENT_14 ) ) ; size . METHOD_6 ( ( ( size . METHOD_13 ( ) ) * IDENT_14 ) ) ; break ; case IDENT_18 : IDENT_14 = java . lang . Math . min ( ( ( METHOD_16 ( ) ) / ( size . METHOD_12 ( ) ) ) , ( ( METHOD_15 ( ) ) / ( size . METHOD_13 ( ) ) ) ) ; size . METHOD_5 ( ( ( size . METHOD_12 ( ) ) * IDENT_14 ) ) ; size . METHOD_6 ( ( ( size . METHOD_13 ( ) ) * IDENT_14 ) ) ; if ( ( ( ( size . METHOD_12 ( ) ) / ( IDENT_9 . METHOD_12 ( ) ) ) > ( IDENT_19 ) ) || ( ( ( size . METHOD_13 ( ) ) / ( IDENT_9 . METHOD_13 ( ) ) ) > ( IDENT_19 ) ) ) { size . METHOD_5 ( IDENT_9 . METHOD_12 ( ) ) ; size . METHOD_6 ( IDENT_9 . METHOD_13 ( ) ) ; } break ; case IDENT_8 : size . METHOD_5 ( METHOD_16 ( ) ) ; size . METHOD_6 ( METHOD_15 ( ) ) ; break ; } } return size ; }
org . junit . Assert . assertEquals ( new edu . illinois . library . cantaloupe . image . METHOD_1 ( INT_1 , 200 ) , instance . METHOD_7 ( IDENT_1 , IDENT_3 , IDENT_5 ) ) 