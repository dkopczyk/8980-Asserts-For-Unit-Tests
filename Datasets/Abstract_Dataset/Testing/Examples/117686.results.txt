METHOD_0 ( ) { net . time4j . IDENT_0 start = net . time4j . IDENT_0 . of ( 15 , 0 ) ; net . time4j . IDENT_0 end = net . time4j . IDENT_0 . of ( 15 , 0 ) . METHOD_1 ( 1 , IDENT_1 . IDENT_2 ) ; net . time4j . range . IDENT_3 IDENT_4 = net . time4j . range . IDENT_3 . METHOD_2 ( start , end ) ; net . time4j . IDENT_5 < net . time4j . IDENT_1 > IDENT_6 = net . time4j . IDENT_5 . of ( 1 , IDENT_1 . IDENT_2 ) ; java . util . List < net . time4j . IDENT_0 > result = IDENT_4 . stream ( IDENT_6 ) . METHOD_3 ( ) . collect ( java . util . stream . IDENT_7 . toList ( ) ) ; "<AssertPlaceHolder>" ; } stream ( net . time4j . IDENT_5 ) { if ( ( this . isEmpty ( ) ) && ( IDENT_6 . METHOD_4 ( ) ) ) { return java . util . stream . IDENT_8 . empty ( ) ; } net . time4j . range . IDENT_9 IDENT_4 = this . METHOD_5 ( ) ; net . time4j . IDENT_10 start = IDENT_4 . METHOD_6 ( ) ; net . time4j . IDENT_10 end = IDENT_4 . METHOD_7 ( ) ; if ( ( start == null ) || ( end == null ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } return net . time4j . range . IDENT_9 . stream ( IDENT_6 , start , end ) ; }
org . junit . Assert . assertThat ( result , org . hamcrest . CoreMatchers . is ( java . util . Collections . singletonList ( start ) ) ) 