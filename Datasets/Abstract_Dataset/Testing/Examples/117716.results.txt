METHOD_0 ( ) { net . time4j . IDENT_0 start = net . time4j . IDENT_0 . of ( INT_0 , 5 , 1 , INT_1 , 0 ) ; net . time4j . IDENT_0 end = net . time4j . IDENT_0 . of ( INT_0 , 6 , 2 , 16 , 0 ) ; net . time4j . range . IDENT_1 IDENT_2 = net . time4j . range . IDENT_1 . METHOD_1 ( start , end ) ; net . time4j . IDENT_3 < ? > IDENT_4 = net . time4j . IDENT_3 . of ( 1 , ( ( net . time4j . IDENT_5 ) ( IDENT_6 . IDENT_7 ) ) ) . METHOD_2 ( INT_2 , IDENT_8 . IDENT_9 ) ; java . util . List < net . time4j . IDENT_0 > result = IDENT_2 . stream ( IDENT_4 ) . METHOD_3 ( ) . collect ( java . util . stream . IDENT_10 . toList ( ) ) ; "<AssertPlaceHolder>" ; } stream ( net . time4j . IDENT_3 ) { if ( ( this . isEmpty ( ) ) && ( IDENT_4 . METHOD_4 ( ) ) ) { return java . util . stream . IDENT_11 . empty ( ) ; } net . time4j . range . IDENT_12 IDENT_2 = this . METHOD_5 ( ) ; net . time4j . IDENT_13 start = IDENT_2 . METHOD_6 ( ) ; net . time4j . IDENT_13 end = IDENT_2 . METHOD_7 ( ) ; if ( ( start == null ) || ( end == null ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } return net . time4j . range . IDENT_12 . stream ( IDENT_4 , start , end ) ; }
org . junit . Assert . assertThat ( result , org . hamcrest . CoreMatchers . is ( java . util . Collections . singletonList ( start ) ) ) 