METHOD_0 ( ) { net . time4j . range . IDENT_0 < net . time4j . IDENT_1 > IDENT_2 = net . time4j . range . IDENT_0 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { if ( ( this . IDENT_3 . size ( ) ) < 2 ) { return this ; } net . time4j . range . IDENT_4 < T > s ; net . time4j . range . IDENT_4 < T > e ; boolean IDENT_5 = this . METHOD_3 ( ) ; net . time4j . range . IDENT_6 IDENT_7 = ( IDENT_5 ) ? IDENT_6 . IDENT_8 : IDENT_6 . IDENT_9 ; java . util . List < net . time4j . range . IDENT_10 < T > > IDENT_11 = this . METHOD_4 ( ) . IDENT_3 ; java . util . List < net . time4j . range . IDENT_10 < T > > IDENT_12 = new java . util . ArrayList ( ) ; T start = this . METHOD_5 ( ) ; for ( int i = 0 , n = IDENT_11 . size ( ) ; i < n ; i ++ ) { T end = IDENT_11 . get ( i ) . METHOD_6 ( ) . METHOD_7 ( ) ; if ( IDENT_5 ) { end = this . METHOD_8 ( ) . METHOD_9 ( end ) ; } s = this . METHOD_10 ( start ) ; e = net . time4j . range . IDENT_4 . of ( IDENT_7 , end ) ; IDENT_12 . add ( this . METHOD_11 ( s , e ) ) ; net . time4j . range . IDENT_4 < T > b = IDENT_11 . get ( i ) . METHOD_12 ( ) ; start = b . METHOD_7 ( ) ; if ( b . METHOD_13 ( ) ) { start = this . METHOD_8 ( ) . METHOD_14 ( start ) ; } } T max = this . METHOD_15 ( ) ; s = this . METHOD_10 ( start ) ; if ( ( max != null ) && ( ! IDENT_5 ) ) { max = this . METHOD_8 ( ) . METHOD_14 ( max ) ; } if ( max == null ) { e = net . time4j . range . IDENT_4 . METHOD_16 ( ) ; } else { e = net . time4j . range . IDENT_4 . of ( IDENT_7 , max ) ; } IDENT_12 . add ( this . METHOD_11 ( s , e ) ) ; return this . create ( IDENT_12 ) ; }
org . junit . Assert . assertThat ( IDENT_2 . METHOD_2 ( ) . isEmpty ( ) , org . hamcrest . CoreMatchers . is ( true ) ) 