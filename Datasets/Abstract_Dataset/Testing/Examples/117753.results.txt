METHOD_0 ( ) { net . time4j . range . IDENT_0 < net . time4j . IDENT_1 > IDENT_2 = net . time4j . range . IDENT_0 . METHOD_1 ( ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_0 ) ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_1 ) ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_2 ) ) ; net . time4j . range . IDENT_4 < net . time4j . IDENT_1 > IDENT_5 = net . time4j . range . IDENT_3 . METHOD_4 ( net . time4j . IDENT_1 . of ( INT_0 , 6 , INT_1 ) ) ; net . time4j . range . IDENT_0 < net . time4j . IDENT_1 > expected = net . time4j . range . IDENT_0 . METHOD_1 ( ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_3 ) ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_4 ) ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_3 ( STRING_5 ) ) . METHOD_2 ( net . time4j . range . IDENT_3 . METHOD_4 ( net . time4j . IDENT_1 . of ( INT_2 , 10 , 1 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( net . time4j . range . IDENT_4 ) { if ( IDENT_6 . isEmpty ( ) ) { java . util . List < net . time4j . range . IDENT_4 < T > > IDENT_7 = java . util . Collections . emptyList ( ) ; return this . create ( IDENT_7 ) ; } net . time4j . range . IDENT_4 < T > IDENT_5 = this . METHOD_6 ( IDENT_6 ) ; net . time4j . range . IDENT_0 < T > IDENT_2 = this . METHOD_7 ( IDENT_5 ) ; if ( IDENT_2 . isEmpty ( ) ) { return this . create ( java . util . Collections . singletonList ( IDENT_5 ) ) ; } net . time4j . range . IDENT_8 < T > IDENT_9 = IDENT_5 . METHOD_8 ( ) ; net . time4j . range . IDENT_8 < T > IDENT_10 = IDENT_5 . METHOD_9 ( ) ; java . util . List < net . time4j . range . IDENT_4 < T > > IDENT_11 = new java . util . ArrayList ( ) ; T min = IDENT_2 . METHOD_10 ( ) ; if ( min != null ) { if ( IDENT_9 . METHOD_11 ( ) ) { this . METHOD_12 ( IDENT_11 , min ) ; } else { T s = IDENT_9 . METHOD_13 ( ) ; if ( IDENT_9 . METHOD_14 ( ) ) { s = this . METHOD_15 ( ) . METHOD_16 ( s ) ; if ( s == null ) { this . METHOD_12 ( IDENT_11 , min ) ; } else { this . METHOD_12 ( IDENT_11 , s , min ) ; } } else { this . METHOD_12 ( IDENT_11 , s , min ) ; } } } IDENT_11 . addAll ( IDENT_2 . METHOD_17 ( ) . METHOD_18 ( ) ) ; T max = IDENT_2 . METHOD_19 ( ) ; if ( max != null ) { T s = this . METHOD_15 ( ) . METHOD_20 ( max ) ; if ( s != null ) { net . time4j . range . IDENT_8 < T > IDENT_12 = net . time4j . range . IDENT_8 . METHOD_21 ( s ) ; net . time4j . range . IDENT_8 < T > IDENT_13 ; if ( IDENT_10 . METHOD_11 ( ) ) { IDENT_13 = IDENT_10 ; IDENT_11 . add ( this . METHOD_22 ( IDENT_12 , IDENT_13 ) ) ; } else if ( this . METHOD_23 ( ) ) { if ( IDENT_10 . METHOD_24 ( ) ) { IDENT_13 = IDENT_10 ; } else { T e = IDENT_10 . METHOD_13 ( ) ; e = this . METHOD_15 ( ) . METHOD_16 ( e ) ; IDENT_13 = net . time4j . range . IDENT_8 . METHOD_21 ( e ) ; } if ( ! ( this . METHOD_25 ( s , IDENT_13 . METHOD_13 ( ) ) ) ) { IDENT_11 . add ( this . METHOD_22 ( IDENT_12 , IDENT_13 ) ) ; } } else { if ( IDENT_10 . METHOD_14 ( ) ) { IDENT_13 = IDENT_10 ; } else { T e = IDENT_10 . METHOD_13 ( ) ; e = this . METHOD_15 ( ) . METHOD_20 ( e ) ; if ( e == null ) { IDENT_13 = net . time4j . range . IDENT_8 . METHOD_26 ( ) ; } else { IDENT_13 = net . time4j . range . IDENT_8 . METHOD_27 ( e ) ; } } if ( this . METHOD_28 ( s , IDENT_13 . METHOD_13 ( ) ) ) { IDENT_11 . add ( this . METHOD_22 ( IDENT_12 , IDENT_13 ) ) ; } } } } return this . create ( IDENT_11 ) ; }
org . junit . Assert . assertThat ( IDENT_2 . METHOD_5 ( IDENT_5 ) , org . hamcrest . CoreMatchers . is ( expected ) ) 