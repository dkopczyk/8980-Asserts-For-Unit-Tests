METHOD_0 ( ) { net . time4j . range . IDENT_0 IDENT_1 = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_0 , 2 , INT_1 ) , net . time4j . IDENT_2 . of ( INT_0 , 5 , INT_2 ) ) ; net . time4j . range . IDENT_0 IDENT_3 = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_0 , 4 , 10 ) , net . time4j . IDENT_2 . of ( INT_0 , 6 , 1 ) ) ; net . time4j . range . IDENT_0 IDENT_4 = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_0 , 6 , 15 ) , net . time4j . IDENT_2 . of ( INT_0 , 6 , INT_3 ) ) ; net . time4j . range . IDENT_5 < net . time4j . IDENT_2 > IDENT_6 = net . time4j . range . IDENT_5 . METHOD_2 ( ) ; IDENT_6 = IDENT_6 . METHOD_3 ( IDENT_1 ) . METHOD_3 ( IDENT_3 ) . METHOD_3 ( IDENT_4 ) ; net . time4j . range . IDENT_0 IDENT_7 = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_4 , 4 , 9 ) , net . time4j . IDENT_2 . of ( INT_5 , 6 , 2 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( net . time4j . engine . IDENT_8 ) { return this . METHOD_3 ( net . time4j . engine . IDENT_8 . of ( java . lang . Math . METHOD_5 ( IDENT_9 . METHOD_6 ( ) ) ) ) ; }
org . junit . Assert . assertThat ( IDENT_6 . METHOD_4 ( IDENT_7 ) , org . hamcrest . CoreMatchers . is ( IDENT_6 ) ) 