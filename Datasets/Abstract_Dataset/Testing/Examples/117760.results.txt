METHOD_0 ( ) { net . time4j . range . IDENT_0 IDENT_1 = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_0 , 5 , INT_1 ) ) ; net . time4j . range . IDENT_0 IDENT_3 = net . time4j . range . IDENT_0 . METHOD_2 ( net . time4j . IDENT_2 . of ( INT_0 , 4 , INT_2 ) , net . time4j . IDENT_2 . of ( INT_0 , 6 , 1 ) ) ; net . time4j . range . IDENT_0 range = net . time4j . range . IDENT_0 . METHOD_1 ( net . time4j . IDENT_2 . of ( INT_0 , 6 , 1 ) ) ; net . time4j . range . IDENT_4 < net . time4j . IDENT_2 > IDENT_5 = net . time4j . range . IDENT_4 . METHOD_3 ( ) . METHOD_4 ( IDENT_1 ) . METHOD_4 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { net . time4j . range . IDENT_6 < T > start = net . time4j . range . IDENT_6 . METHOD_6 ( ) ; net . time4j . range . IDENT_6 < T > end = net . time4j . range . IDENT_6 . METHOD_7 ( ) ; T min = this . METHOD_8 ( ) ; T max = this . METHOD_9 ( ) ; if ( min != null ) { start = net . time4j . range . IDENT_6 . METHOD_10 ( min ) ; } if ( max != null ) { if ( this . METHOD_11 ( ) ) { end = net . time4j . range . IDENT_6 . METHOD_10 ( max ) ; } else { T IDENT_7 = this . METHOD_12 ( ) . METHOD_13 ( max ) ; if ( IDENT_7 != null ) { end = net . time4j . range . IDENT_6 . METHOD_14 ( IDENT_7 ) ; } else { end = net . time4j . range . IDENT_6 . METHOD_10 ( max ) ; } } } return this . METHOD_15 ( start , end ) ; }
org . junit . Assert . assertThat ( IDENT_5 . METHOD_5 ( ) , org . hamcrest . CoreMatchers . is ( range ) ) 