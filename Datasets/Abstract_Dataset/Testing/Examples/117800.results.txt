METHOD_0 ( ) { net . time4j . IDENT_0 IDENT_1 = net . time4j . IDENT_2 . of ( net . time4j . IDENT_3 . of ( INT_0 , 1 , 6 ) , net . time4j . IDENT_4 . of ( 0 , 0 , 0 , INT_1 ) ) . METHOD_1 ( IDENT_5 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( net . time4j . IDENT_7 . IDENT_8 ) { int IDENT_9 ; switch ( IDENT_7 ) { case IDENT_10 : case IDENT_6 : return this . METHOD_2 ( ) ; case IDENT_11 : long IDENT_12 ; if ( ( this . METHOD_3 ( ) ) < 0 ) { net . time4j . IDENT_3 date = this . METHOD_4 ( ) ; double IDENT_13 = net . time4j . IDENT_7 . IDENT_8 . METHOD_5 ( date ) ; IDENT_13 += ( this . IDENT_14 ) - ( net . time4j . IDENT_0 . IDENT_15 ) ; IDENT_13 += ( this . METHOD_2 ( ) ) / ( ( net . time4j . IDENT_0 . IDENT_16 ) * 1.0 ) ; long IDENT_17 = ( ( long ) ( java . lang . Math . METHOD_6 ( IDENT_13 ) ) ) ; if ( ( java . lang . Double . compare ( ( ( net . time4j . IDENT_0 . IDENT_16 ) - ( ( IDENT_13 - IDENT_17 ) * ( net . time4j . IDENT_0 . IDENT_16 ) ) ) , 1.0 ) ) < 0 ) { IDENT_17 ++ ; IDENT_9 = 0 ; } else { IDENT_9 = net . time4j . IDENT_0 . METHOD_7 ( IDENT_13 , IDENT_17 ) ; } IDENT_12 = ( IDENT_17 - INT_2 ) + ( net . time4j . IDENT_0 . IDENT_18 ) ; IDENT_9 OP_0 INT_3 ; if ( IDENT_9 < 0 ) { IDENT_12 OP_1 ; IDENT_9 += net . time4j . IDENT_0 . IDENT_16 ; } } else { IDENT_12 = ( this . METHOD_3 ( ) ) + ( net . time4j . IDENT_0 . IDENT_18 ) ; IDENT_9 = this . METHOD_2 ( ) ; } if ( IDENT_12 < 0 ) { throw new java . lang . IllegalArgumentException ( ( STRING_0 + ( this ) ) ) ; } else { return IDENT_9 ; } case IDENT_19 : long IDENT_1 = this . METHOD_3 ( ) ; if ( ( net . time4j . IDENT_7 . IDENT_20 . getInstance ( ) . METHOD_8 ( IDENT_1 ) ) < ( net . time4j . IDENT_0 . IDENT_21 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_1 + ( this ) ) ) ; } else { return this . METHOD_2 ( ) ; } case IDENT_22 : if ( ( this . IDENT_14 ) < ( net . time4j . IDENT_0 . IDENT_15 ) ) { net . time4j . IDENT_3 date = this . METHOD_4 ( ) ; double IDENT_13 = net . time4j . IDENT_7 . IDENT_8 . METHOD_5 ( date ) ; IDENT_13 += ( this . IDENT_14 ) - ( net . time4j . IDENT_0 . IDENT_15 ) ; IDENT_13 += ( this . METHOD_2 ( ) ) / ( ( net . time4j . IDENT_0 . IDENT_16 ) * 1.0 ) ; long IDENT_23 = ( ( long ) ( java . lang . Math . METHOD_6 ( IDENT_13 ) ) ) ; if ( ( java . lang . Double . compare ( ( ( net . time4j . IDENT_0 . IDENT_16 ) - ( ( IDENT_13 - IDENT_23 ) * ( net . time4j . IDENT_0 . IDENT_16 ) ) ) , 1.0 ) ) < 0 ) { IDENT_9 = 0 ; } else { IDENT_9 = net . time4j . IDENT_0 . METHOD_7 ( IDENT_13 , IDENT_23 ) ; } } else { IDENT_9 = ( this . METHOD_2 ( ) ) + INT_3 ; if ( IDENT_9 >= ( net . time4j . IDENT_0 . IDENT_16 ) ) { IDENT_9 OP_0 net . time4j . IDENT_0 . IDENT_16 ; } } return IDENT_9 ; case IDENT_24 : if ( ( this . IDENT_14 ) < ( net . time4j . IDENT_0 . IDENT_15 ) ) { return this . METHOD_2 ( ) ; } else { double IDENT_25 = this . METHOD_9 ( ) ; long IDENT_26 = ( ( long ) ( java . lang . Math . METHOD_6 ( IDENT_25 ) ) ) ; return net . time4j . IDENT_0 . METHOD_7 ( IDENT_25 , IDENT_26 ) ; } default : throw new java . lang . METHOD_10 ( ( STRING_2 + IDENT_7 ) ) ; } }
org . junit . Assert . assertThat ( IDENT_1 . METHOD_2 ( IDENT_8 . IDENT_10 ) , org . hamcrest . CoreMatchers . is ( INT_1 ) ) 