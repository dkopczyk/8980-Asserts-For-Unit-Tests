METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; int result = IDENT_1 . IDENT_2 . util . IDENT_3 . METHOD_1 ( IDENT_0 ) ; int IDENT_4 = INT_0 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . String [ ] IDENT_5 = IDENT_6 . trim ( ) . split ( STRING_1 ) ; if ( ( IDENT_5 . length ) < 3 ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( ( STRING_2 + ( STRING_3 + STRING_4 ) ) , IDENT_6 . trim ( ) , IDENT_5 . length ) ) ; } java . lang . String IDENT_7 = IDENT_5 [ ( ( IDENT_5 . length ) - 2 ) ] ; int port ; try { port = java . lang . Integer . METHOD_2 ( IDENT_7 ) ; } catch ( java . lang . IDENT_8 e ) { IDENT_1 . IDENT_2 . util . IDENT_3 . LOG . error ( java . lang . String . format ( STRING_5 , IDENT_7 ) ) ; throw e ; } if ( ( port < 0 ) || ( port > INT_1 ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_6 , port ) ) ; } return port ; }
org . junit . Assert . assertEquals ( result , IDENT_4 ) 