METHOD_0 ( ) { java . util . List < org . apache . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_3 ; IDENT_4 = IDENT_0 . IDENT_5 . TestUtils . METHOD_1 ( STRING_0 , STRING_1 , ( ( 20 * ( IDENT_0 . IDENT_5 . util . IDENT_6 . IDENT_7 ) ) + ( IDENT_0 . IDENT_5 . util . IDENT_6 . IDENT_8 ) ) , ( ( 20 * ( IDENT_0 . IDENT_5 . util . IDENT_6 . IDENT_9 ) ) + ( IDENT_0 . IDENT_5 . util . IDENT_6 . IDENT_10 ) ) , IDENT_11 , ( ( IDENT_11 ) + 100 ) ) ; map . put ( IDENT_4 . getId ( ) , IDENT_4 ) ; IDENT_12 = IDENT_0 . IDENT_5 . TestUtils . METHOD_2 ( IDENT_13 , 10 ) ; IDENT_14 . put ( IDENT_13 , IDENT_12 ) ; IDENT_15 . METHOD_3 ( IDENT_12 . METHOD_4 ( ) ) ; IDENT_3 = IDENT_15 . METHOD_5 ( map , IDENT_16 , new org . apache . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_14 ) , IDENT_17 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . Map , java . util . Collection , org . apache . IDENT_0 . IDENT_1 . METHOD_6 , java . util . Set ) { if ( IDENT_17 . isEmpty ( ) ) { METHOD_7 ( IDENT_6 . IDENT_18 ) ; } else { METHOD_8 ( IDENT_6 . IDENT_18 ) ; } if ( IDENT_19 . isEmpty ( ) ) { if ( ! ( IDENT_20 . isEmpty ( ) ) ) { log . info ( STRING_2 , METHOD_9 ( IDENT_20 ) ) ; for ( org . apache . IDENT_5 . IDENT_21 . IDENT_22 IDENT_23 : IDENT_20 . METHOD_10 ( ) ) { driver . METHOD_11 ( IDENT_23 ) ; } IDENT_20 . METHOD_12 ( ) ; } if ( ! ( IDENT_24 ) ) { log . info ( STRING_3 ) ; driver . METHOD_13 ( ) ; IDENT_24 = true ; } return new java . util . ArrayList ( ) ; } log . info ( STRING_4 , IDENT_17 . toString ( ) ) ; if ( IDENT_24 ) { log . info ( STRING_5 ) ; driver . METHOD_14 ( ) ; IDENT_24 = false ; if ( IDENT_20 . isEmpty ( ) ) { return new java . util . ArrayList ( ) ; } } java . util . List < org . apache . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_25 = new java . util . ArrayList ( ) ; java . util . Map < java . lang . String , IDENT_0 . IDENT_5 . resources . IDENT_26 > IDENT_27 = IDENT_0 . IDENT_5 . util . IDENT_6 . METHOD_15 ( IDENT_20 ) ; for ( java . lang . String IDENT_28 : IDENT_17 ) { org . apache . IDENT_0 . IDENT_1 . IDENT_29 IDENT_12 = IDENT_30 . METHOD_16 ( IDENT_28 ) ; int IDENT_31 = IDENT_12 . METHOD_17 ( ) ; log . info ( STRING_3 0 , IDENT_31 , IDENT_12 . getId ( ) ) ; if ( IDENT_31 <= 0 ) { continue ; } java . util . Set < java . lang . String > IDENT_32 = new java . util . HashSet ( ) ; for ( java . lang . String IDENT_33 : IDENT_27 . METHOD_10 ( ) ) { if ( IDENT_0 . IDENT_5 . IDENT_34 . IDENT_35 . METHOD_18 ( IDENT_0 . IDENT_5 . util . IDENT_6 . METHOD_19 ( IDENT_36 ) , IDENT_33 , IDENT_16 , IDENT_28 ) ) { IDENT_32 . add ( IDENT_33 ) ; } } java . util . List < IDENT_0 . IDENT_5 . IDENT_34 . IDENT_37 > IDENT_38 = METHOD_20 ( IDENT_27 , IDENT_32 , IDENT_12 ) ; for ( IDENT_0 . IDENT_5 . IDENT_34 . IDENT_37 IDENT_39 : IDENT_38 ) { java . lang . String IDENT_40 = java . lang . String . format ( STRING_6 , IDENT_39 . METHOD_21 ( ) , IDENT_39 . METHOD_22 ( ) ) ; IDENT_41 . put ( IDENT_40 , IDENT_39 ) ; IDENT_25 . add ( IDENT_39 ) ; } log . info ( STRING_7 , IDENT_12 . getId ( ) , IDENT_38 . size ( ) ) ; } java . util . List < java . lang . String > IDENT_42 = new java . util . ArrayList < java . lang . String > ( ) ; for ( org . apache . IDENT_0 . IDENT_1 . IDENT_2 IDENT_43 : IDENT_25 ) { IDENT_42 . add ( ( ( ( "" + ( IDENT_43 . METHOD_21 ( ) ) ) + STRING_8 ) + ( IDENT_43 . METHOD_22 ( ) ) ) ) ; } log . info ( STRING_9 , IDENT_25 . size ( ) , org . apache . commons . lang3 . StringUtils . join ( IDENT_42 , STRING_10 ) ) ; return IDENT_25 ; }
org . junit . Assert . assertEquals ( 10 , IDENT_3 . size ( ) ) 