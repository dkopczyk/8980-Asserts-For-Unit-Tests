METHOD_0 ( ) { System . out . println ( STRING_0 ) ; final java . util . List < org . IDENT_0 . model . IDENT_1 > records = new java . util . ArrayList ( ) ; final java . util . List < java . lang . Integer > IDENT_2 = new java . util . ArrayList ( ) ; for ( int i = 1 ; i <= 10 ; i ++ ) { final org . IDENT_0 . model . IDENT_1 record = METHOD_1 ( ) ; records . add ( record ) ; IDENT_2 . add ( record . METHOD_2 ( ) ) ; } System . out . println ( ( STRING_1 + IDENT_2 ) ) ; final java . util . Properties ctx = org . IDENT_0 . util . IDENT_3 . METHOD_3 ( ) ; final java . lang . String IDENT_4 = org . IDENT_5 . IDENT_6 . IDENT_7 . api . IDENT_8 . IDENT_9 ; final org . IDENT_5 . IDENT_6 . dao . IDENT_10 < org . IDENT_0 . model . IDENT_1 > IDENT_11 = de . IDENT_12 . util . IDENT_13 . get ( org . IDENT_5 . IDENT_6 . dao . IDENT_14 . class ) . METHOD_4 ( org . IDENT_0 . model . IDENT_1 . class , ctx , IDENT_4 ) . METHOD_5 ( ) . METHOD_6 ( IDENT_1 . IDENT_15 , IDENT_2 ) . METHOD_7 ( ) . METHOD_8 ( IDENT_1 . IDENT_15 ) . METHOD_9 ( ) ; final java . util . Iterator < org . IDENT_0 . model . IDENT_1 > IDENT_16 = IDENT_11 . create ( ) . METHOD_10 ( IDENT_17 . IDENT_18 , true ) . METHOD_10 ( IDENT_17 . IDENT_19 , 2 ) . METHOD_11 ( org . IDENT_0 . model . IDENT_1 . class ) ; System . out . println ( ( STRING_2 + IDENT_16 ) ) ; { IDENT_2 . remove ( 4 ) ; final org . IDENT_0 . model . IDENT_1 IDENT_20 = records . remove ( 4 ) ; System . out . println ( ( STRING_3 + IDENT_20 ) ) ; org . IDENT_5 . model . IDENT_21 . delete ( IDENT_20 ) ; } final java . util . List < java . lang . Integer > IDENT_22 = new java . util . ArrayList ( ) ; for ( int IDENT_23 = 0 ; IDENT_16 . hasNext ( ) ; IDENT_23 ++ ) { final org . IDENT_0 . model . IDENT_1 record = IDENT_16 . next ( ) ; System . out . println ( ( ( ( "" + IDENT_23 ) + STRING_4 ) + record ) ) ; IDENT_22 . add ( record . METHOD_2 ( ) ) ; } "<AssertPlaceHolder>" ; } METHOD_2 ( ) { java . lang . Integer IDENT_24 = ( ( java . lang . Integer ) ( METHOD_12 ( org . IDENT_0 . model . IDENT_15 ) ) ) ; if ( IDENT_24 == null ) return 0 ; return IDENT_24 . METHOD_13 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_22 ) 