METHOD_0 ( ) { java . util . List < java . lang . Integer > IDENT_0 = new java . util . ArrayList < java . lang . Integer > ( ) ; IDENT_0 . add ( 1000 ) ; IDENT_0 . add ( INT_0 ) ; IDENT_0 . add ( INT_1 ) ; IDENT_0 . add ( INT_2 ) ; IDENT_0 . add ( INT_3 ) ; IDENT_0 . add ( INT_4 ) ; java . util . List < java . lang . Integer > IDENT_1 = new java . util . ArrayList < java . lang . Integer > ( ) ; IDENT_1 . add ( INT_0 ) ; IDENT_1 . add ( INT_1 ) ; IDENT_1 . add ( INT_2 ) ; IDENT_1 . add ( INT_3 ) ; IDENT_1 . add ( INT_4 ) ; IDENT_1 . add ( INT_5 ) ; java . util . List < java . lang . Integer > expected = new java . util . ArrayList < java . lang . Integer > ( ) ; expected . add ( INT_0 ) ; expected . add ( INT_6 ) ; expected . add ( INT_2 ) ; expected . add ( INT_3 ) ; expected . add ( INT_7 ) ; java . util . Collection < java . lang . Integer > actual = info . IDENT_2 . IDENT_3 . collections . IDENT_4 . METHOD_1 ( IDENT_0 , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Collection , java . util . Collection ) { if ( IDENT_5 == null ) return IDENT_6 ; else if ( IDENT_6 == null ) return IDENT_5 ; else { java . util . Collection < T > results = new java . util . HashSet < T > ( ) ; for ( T IDENT_7 : IDENT_5 ) if ( IDENT_6 . contains ( IDENT_7 ) ) results . add ( IDENT_7 ) ; return results ; } }
org . junit . Assert . assertEquals ( expected . size ( ) , actual . size ( ) ) 