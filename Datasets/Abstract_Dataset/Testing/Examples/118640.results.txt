METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . business . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . IDENT_2 . business . METHOD_1 ( new java . lang . METHOD_2 ( "1" ) , STRING_0 , new java . lang . Integer ( "1" ) , new java . lang . METHOD_2 ( "1" ) ) ; org . IDENT_0 . IDENT_1 . IDENT_5 . business . IDENT_6 IDENT_5 = new org . IDENT_0 . domain . IDENT_7 . METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) ) . with ( IDENT_4 ) . build ( ) ; IDENT_5 . METHOD_6 ( IDENT_8 ) ; java . util . List < org . IDENT_0 . IDENT_9 . business . IDENT_10 > IDENT_11 = new java . util . ArrayList < org . IDENT_0 . IDENT_9 . business . IDENT_10 > ( ) ; org . IDENT_0 . IDENT_12 . IDENT_13 IDENT_14 = new org . IDENT_0 . domain . IDENT_7 . METHOD_7 ( ) . build ( ) ; when ( IDENT_15 . METHOD_8 ( ( ( short ) ( 1 ) ) ) ) . thenReturn ( IDENT_14 ) ; when ( IDENT_16 . create ( IDENT_5 , IDENT_11 , IDENT_17 , IDENT_14 ) ) . thenReturn ( IDENT_18 ) ; when ( IDENT_18 . getType ( ) ) . thenReturn ( IDENT_19 . IDENT_20 ) ; IDENT_21 . METHOD_9 ( IDENT_5 , IDENT_17 , IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ) { org . IDENT_0 . IDENT_1 . business . IDENT_22 IDENT_18 = null ; for ( org . IDENT_0 . IDENT_9 . business . IDENT_23 IDENT_24 : IDENT_9 ) { if ( ( IDENT_24 . getType ( ) ) == ( org . IDENT_0 . IDENT_9 . util . helpers . IDENT_19 . IDENT_20 ) ) { IDENT_18 = ( ( org . IDENT_0 . IDENT_1 . business . IDENT_22 ) ( IDENT_24 ) ) ; } } return IDENT_18 ; }
org . junit . Assert . assertThat ( IDENT_5 . METHOD_10 ( ) , org . hamcrest . CoreMatchers . is ( IDENT_18 ) ) 