test ( ) { parser . IDENT_0 loader = new parser . METHOD_0 ( ) ; IDENT_1 = loader . METHOD_1 ( STRING_0 ) ; builder = new parser . METHOD_2 ( IDENT_1 , 0 ) ; parser . IDENT_2 IDENT_3 = builder . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; new IDENT_4 . METHOD_4 ( ) . METHOD_5 ( IDENT_3 , System . out ) ; parser . IDENT_5 IDENT_6 = METHOD_6 ( STRING_1 ) ; parser . IDENT_5 IDENT_7 = METHOD_6 ( STRING_2 ) ; parser . IDENT_5 IDENT_8 = METHOD_6 ( STRING_3 ) ; parser . IDENT_9 IDENT_10 = IDENT_1 . METHOD_7 ( STRING_1 , new java . lang . String [ ] { STRING_2 , STRING_4 } ) ; IDENT_4 . IDENT_11 . IDENT_12 [ ] IDENT_13 = new IDENT_4 . IDENT_11 . IDENT_12 [ ] { new IDENT_4 . IDENT_11 . METHOD_8 ( 0 , IDENT_7 ) } ; METHOD_9 ( IDENT_6 , IDENT_10 , IDENT_13 ) ; parser . IDENT_9 IDENT_14 = IDENT_1 . METHOD_7 ( STRING_2 , new java . lang . String [ ] { STRING_2 , STRING_5 , STRING_3 } ) ; IDENT_4 . IDENT_11 . METHOD_8 [ ] IDENT_15 = new IDENT_4 . IDENT_11 . METHOD_8 [ ] { new IDENT_4 . IDENT_11 . METHOD_8 ( 0 , IDENT_7 ) , new IDENT_4 . IDENT_11 . METHOD_8 ( 2 , IDENT_8 ) } ; METHOD_9 ( IDENT_7 , IDENT_14 , IDENT_15 ) ; parser . IDENT_9 IDENT_16 = IDENT_1 . METHOD_7 ( STRING_2 , new java . lang . String [ ] { STRING_3 } ) ; IDENT_4 . IDENT_11 . METHOD_8 [ ] IDENT_17 = new IDENT_4 . IDENT_11 . METHOD_8 [ ] { new IDENT_4 . IDENT_11 . METHOD_8 ( 0 , IDENT_8 ) } ; METHOD_9 ( IDENT_7 , IDENT_16 , IDENT_17 ) ; parser . IDENT_9 IDENT_18 = IDENT_1 . METHOD_7 ( STRING_3 , new java . lang . String [ ] { STRING_6 } ) ; IDENT_4 . IDENT_11 . METHOD_8 [ ] IDENT_19 = new IDENT_4 . IDENT_11 . METHOD_8 [ 0 ] ; METHOD_9 ( IDENT_8 , IDENT_18 , IDENT_19 ) ; parser . IDENT_9 IDENT_20 = IDENT_1 . METHOD_7 ( STRING_3 , new java . lang . String [ ] { STRING_7 , STRING_2 , STRING_8 } ) ; IDENT_4 . IDENT_11 . METHOD_8 [ ] IDENT_21 = new IDENT_4 . IDENT_11 . METHOD_8 [ ] { new IDENT_4 . IDENT_11 . METHOD_8 ( 1 , IDENT_7 ) } ; METHOD_9 ( IDENT_8 , IDENT_20 , IDENT_21 ) ; } METHOD_10 ( ) { return start ; }
org . junit . Assert . assertNotNull ( IDENT_3 . METHOD_10 ( ) ) 