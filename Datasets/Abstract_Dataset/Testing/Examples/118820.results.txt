METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; METHOD_1 ( IDENT_0 , 1 ) ; com . github . IDENT_1 . kafka . IDENT_2 properties = new com . github . IDENT_1 . kafka . METHOD_2 ( ) ; properties . METHOD_3 ( METHOD_2 . IDENT_3 , true ) ; properties . METHOD_3 ( METHOD_2 . IDENT_4 , IDENT_5 . IDENT_6 ) ; com . github . IDENT_1 . kafka . IDENT_7 IDENT_8 = new com . github . IDENT_1 . kafka . METHOD_4 ( STRING_1 , IDENT_9 , IDENT_0 , properties ) ; IDENT_8 . connect ( ) . sync ( ) ; com . github . IDENT_1 . kafka . IDENT_10 IDENT_11 = IDENT_8 . METHOD_5 ( ) ; final io . netty . util . concurrent . IDENT_12 IDENT_13 = IDENT_11 . METHOD_6 ( null , METHOD_7 ( com . github . IDENT_1 . kafka . IDENT_14 . IDENT_15 . getBytes ( ) ) ) ; METHOD_6 . METHOD_8 ( new io . netty . util . concurrent . METHOD_9 ( ) { @ com . github . IDENT_1 . kafka . Override public void METHOD_10 ( io . netty . util . concurrent . IDENT_12 future ) throws com . github . IDENT_1 . kafka . Exception { org . junit . Assert . fail ( STRING_2 ) ; } } ) ; final java . util . List < kafka . consumer . IDENT_16 < byte [ ] , byte [ ] > > IDENT_17 = METHOD_11 ( METHOD_5 ) ; final kafka . consumer . IDENT_16 < byte [ ] , byte [ ] > stream = METHOD_11 . get ( 0 ) ; final kafka . consumer . IDENT_18 < byte [ ] , byte [ ] > messages = stream . iterator ( ) ; "<AssertPlaceHolder>" ; IDENT_8 . METHOD_12 ( ) . sync ( ) ; } get ( com . github . IDENT_1 . kafka . IDENT_19 ) { java . util . IDENT_20 . METHOD_13 ( property , STRING_3 ) ; IDENT_21 v = ( ( IDENT_21 ) ( properties . get ( property ) ) ) ; return v == null ? property . METHOD_14 ( ) : v ; }
org . junit . Assert . assertThat ( com . github . IDENT_1 . kafka . IDENT_14 . IDENT_15 , org . hamcrest . CoreMatchers . is ( new java . lang . String ( messages . next ( ) . message ( ) ) ) ) 