METHOD_0 ( ) { try { java . io . File IDENT_0 = IDENT_1 . METHOD_1 ( STRING_0 ) ; cc . IDENT_2 . types . IDENT_3 . METHOD_2 ( cc . IDENT_2 . types . tests . IDENT_4 . IDENT_5 , IDENT_0 ) ; double [ ] [ ] IDENT_6 = cc . IDENT_2 . types . IDENT_3 . METHOD_3 ( IDENT_0 ) ; cc . IDENT_2 . types . IDENT_3 . METHOD_4 ( cc . IDENT_2 . types . tests . IDENT_4 . IDENT_5 ) ; cc . IDENT_2 . types . IDENT_3 . METHOD_4 ( IDENT_6 ) ; double IDENT_7 = cc . IDENT_2 . types . IDENT_3 . METHOD_5 ( cc . IDENT_2 . types . tests . IDENT_4 . IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } METHOD_5 ( double [ ] [ ] , double [ ] [ ] ) { assert ( a . length ) == ( b . length ) ; if ( ( a . length ) == 0 ) { return 0.0 ; } assert ( a [ 0 ] . length ) == ( b [ 0 ] . length ) ; double IDENT_8 = 0.0 ; for ( int row = 0 ; row < ( a . length ) ; row ++ ) { for ( int IDENT_9 = 0 ; IDENT_9 < ( a [ row ] . length ) ; IDENT_9 ++ ) { double IDENT_7 = ( a [ row ] [ IDENT_9 ] ) - ( b [ row ] [ IDENT_9 ] ) ; IDENT_8 += IDENT_7 * IDENT_7 ; } } return IDENT_8 ; }
org . junit . Assert . assertEquals ( 0.0 , IDENT_7 , 0.0 ) 