METHOD_0 ( ) { when ( METHOD_1 ( ) . METHOD_2 ( ) ) . thenReturn ( nl . bzk . brp . bijhouding . bericht . model . IDENT_0 ) ; when ( METHOD_3 ( ) . METHOD_4 ( anyString ( ) ) ) . thenReturn ( new nl . bzk . IDENT_1 . dal . domein . brp . entity . METHOD_5 ( ( ( short ) ( 3 ) ) , STRING_0 , STRING_1 , new nl . bzk . IDENT_1 . dal . domein . brp . entity . METHOD_6 ( STRING_2 , STRING_3 ) ) ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_2 IDENT_3 = mock ( nl . bzk . brp . bijhouding . bericht . model . IDENT_2 . class ) ; final java . util . Set < nl . bzk . IDENT_1 . dal . domein . brp . entity . IDENT_4 > IDENT_5 = new java . util . METHOD_7 ( ) ; IDENT_5 . add ( new nl . bzk . IDENT_1 . dal . domein . brp . entity . METHOD_8 ( IDENT_3 , IDENT_0 , nl . bzk . IDENT_1 . dal . domein . brp . IDENT_6 . IDENT_7 . IDENT_8 , nl . bzk . IDENT_1 . dal . domein . brp . IDENT_6 . IDENT_9 . IDENT_10 ) ) ; when ( IDENT_3 . METHOD_9 ( ) ) . thenReturn ( IDENT_5 ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_11 IDENT_12 = METHOD_10 ( nl . bzk . IDENT_1 . util . common . IDENT_13 . METHOD_11 ( ) , IDENT_3 , false , true , nl . bzk . brp . bijhouding . bericht . model . IDENT_14 , null ) ; final java . util . List < nl . bzk . brp . bijhouding . bericht . model . IDENT_15 > IDENT_16 = IDENT_12 . METHOD_12 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_17 . size ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_16 . size ( ) ) 