METHOD_0 ( ) { final nl . bzk . brp . bijhouding . bericht . model . IDENT_0 . IDENT_1 IDENT_2 = new nl . bzk . brp . bijhouding . bericht . model . IDENT_0 . METHOD_1 ( ) ; IDENT_3 . put ( nl . bzk . brp . bijhouding . bericht . model . IDENT_4 . IDENT_5 . toString ( ) , STRING_0 ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_6 IDENT_7 = builder . METHOD_2 ( IDENT_3 , IDENT_2 ) ; IDENT_7 . METHOD_3 ( bericht ) ; final java . util . Map < java . lang . String , nl . bzk . brp . bijhouding . bericht . model . IDENT_8 > IDENT_9 = new java . util . HashMap ( ) ; IDENT_9 . put ( nl . bzk . brp . bijhouding . bericht . model . IDENT_10 . IDENT_11 , IDENT_7 ) ; final nl . bzk . IDENT_12 . dal . domein . brp . entity . IDENT_13 IDENT_14 = new nl . bzk . IDENT_12 . dal . domein . brp . entity . METHOD_4 ( nl . bzk . IDENT_12 . dal . domein . brp . IDENT_15 . IDENT_16 . IDENT_17 ) ; IDENT_14 . METHOD_5 ( new nl . bzk . IDENT_12 . dal . domein . brp . entity . METHOD_6 ( IDENT_14 , new nl . bzk . IDENT_12 . dal . domein . brp . entity . METHOD_7 ( STRING_1 , STRING_2 ) , nl . bzk . IDENT_12 . dal . domein . brp . IDENT_15 . IDENT_18 . IDENT_19 , nl . bzk . IDENT_12 . dal . domein . brp . IDENT_15 . IDENT_20 . IDENT_21 ) ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_22 IDENT_23 = nl . bzk . brp . bijhouding . bericht . model . IDENT_22 . METHOD_8 ( IDENT_14 ) ; when ( bericht . METHOD_9 ( any ( ) , any ( ) ) ) . thenReturn ( IDENT_23 ) ; when ( METHOD_10 ( ) . METHOD_11 ( anyString ( ) ) ) . thenReturn ( true ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_24 IDENT_25 = METHOD_12 ( nl . bzk . brp . bijhouding . bericht . model . IDENT_10 . IDENT_26 , nl . bzk . brp . bijhouding . bericht . model . IDENT_10 . IDENT_27 ) ; final nl . bzk . brp . bijhouding . bericht . model . IDENT_6 IDENT_28 = IDENT_25 . METHOD_13 ( ) ; IDENT_28 . METHOD_14 ( IDENT_9 ) ; final java . util . List < nl . bzk . brp . bijhouding . bericht . model . IDENT_29 > IDENT_30 = IDENT_25 . METHOD_15 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_31 . size ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_30 . size ( ) ) 