METHOD_0 ( ) { nl . bzk . brp . domein . IDENT_0 . IDENT_1 [ ] IDENT_2 = new nl . bzk . brp . domein . IDENT_0 . IDENT_1 [ ] { METHOD_1 ( 1 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_4 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_5 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_6 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_7 ) } ; METHOD_2 ( nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_5 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_6 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_7 , java . util . Arrays . asList ( IDENT_2 ) ) ; java . util . List < nl . bzk . brp . domein . IDENT_0 . IDENT_1 > IDENT_8 = service . METHOD_3 ( nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_9 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_5 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_6 , nl . bzk . brp . bijhouding . business . service . impl . IDENT_3 . IDENT_7 ) ; java . util . Set < java . lang . Integer > IDENT_10 = METHOD_4 ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } contains ( java . lang . Object ) { return METHOD_5 ( ) . contains ( o ) ; }
org . junit . Assert . assertTrue ( IDENT_10 . contains ( 1 ) ) 