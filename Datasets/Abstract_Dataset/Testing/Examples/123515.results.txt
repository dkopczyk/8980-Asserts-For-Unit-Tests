METHOD_0 ( ) { final nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 IDENT_2 = nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ; final boolean IDENT_8 = IDENT_9 . METHOD_1 ( new nl . bzk . brp . model . IDENT_10 . IDENT_11 . kern . METHOD_2 ( IDENT_12 ) , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( nl . bzk . brp . model . IDENT_10 . IDENT_11 . kern . METHOD_2 , nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 ) { if ( ( METHOD_3 ( IDENT_2 ) ) && ( ( METHOD_4 ( IDENT_13 ) ) || ( METHOD_5 ( IDENT_13 , IDENT_2 ) ) ) ) { nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_14 . LOGGER . info ( IDENT_15 . IDENT_16 , STRING_0 , IDENT_13 . METHOD_6 ( ) , IDENT_2 . getCode ( ) ) ; return true ; } else if ( ( ! ( METHOD_3 ( IDENT_2 ) ) ) && ( METHOD_5 ( IDENT_13 , IDENT_2 ) ) ) { nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_14 . LOGGER . info ( ( STRING_1 + STRING_2 ) , IDENT_13 . METHOD_6 ( ) , IDENT_2 . getCode ( ) ) ; } return false ; }
org . junit . Assert . assertFalse ( IDENT_8 ) 