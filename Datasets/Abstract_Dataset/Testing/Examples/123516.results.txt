METHOD_0 ( ) { final nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 IDENT_2 = nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ; final nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 IDENT_8 = nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_9 . METHOD_1 ( ) . METHOD_2 ( new nl . bzk . brp . model . algemeen . IDENT_10 . kern . METHOD_3 ( INT_0 ) ) . METHOD_4 ( ) ; METHOD_5 ( IDENT_8 ) ; final boolean IDENT_11 = IDENT_12 . METHOD_6 ( new nl . bzk . brp . model . IDENT_13 . IDENT_14 . kern . METHOD_7 ( IDENT_15 ) , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( nl . bzk . brp . model . IDENT_13 . IDENT_14 . kern . METHOD_7 , nl . bzk . brp . model . algemeen . IDENT_0 . kern . IDENT_1 ) { if ( ( METHOD_8 ( IDENT_2 ) ) && ( ( METHOD_9 ( IDENT_16 ) ) || ( METHOD_10 ( IDENT_16 , IDENT_2 ) ) ) ) { nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_17 . LOGGER . info ( IDENT_18 . IDENT_19 , STRING_0 , IDENT_16 . METHOD_11 ( ) , IDENT_2 . getCode ( ) ) ; return true ; } else if ( ( ! ( METHOD_8 ( IDENT_2 ) ) ) && ( METHOD_10 ( IDENT_16 , IDENT_2 ) ) ) { nl . bzk . brp . business . IDENT_3 . impl . IDENT_4 . IDENT_5 . IDENT_17 . LOGGER . info ( ( STRING_1 + STRING_2 ) , IDENT_16 . METHOD_11 ( ) , IDENT_2 . getCode ( ) ) ; } return false ; }
org . junit . Assert . assertFalse ( IDENT_11 ) 