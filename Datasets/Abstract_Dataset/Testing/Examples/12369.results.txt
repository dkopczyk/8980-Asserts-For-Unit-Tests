METHOD_0 ( ) { org . osgi . service . device . IDENT_0 IDENT_1 = org . mockito . Mockito . mock ( org . osgi . service . device . IDENT_0 . class ) ; org . osgi . framework . IDENT_2 IDENT_3 = org . mockito . Mockito . mock ( org . osgi . framework . IDENT_2 . class ) ; org . mockito . Mockito . when ( IDENT_1 . select ( org . mockito . Mockito . eq ( IDENT_3 ) , org . mockito . Mockito . METHOD_1 ( org . osgi . service . device . IDENT_4 [ ] . class ) ) ) . METHOD_2 ( new java . lang . RuntimeException ( STRING_0 ) ) ; add ( STRING_1 , 1 ) ; org . osgi . service . device . IDENT_4 match = IDENT_5 . METHOD_3 ( IDENT_3 , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . osgi . framework . IDENT_2 , org . osgi . service . device . IDENT_0 ) { java . util . List < org . osgi . service . device . IDENT_4 > IDENT_6 = new java . util . ArrayList < org . osgi . service . device . IDENT_4 > ( ) ; for ( org . osgi . service . device . IDENT_4 match : IDENT_7 ) { if ( ( match . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) == ( org . osgi . framework . IDENT_8 . IDENT_9 ) ) { IDENT_6 . add ( match ) ; } else { IDENT_10 . debug ( ( ( ( STRING_2 + match ) + STRING_3 ) + ( match . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) ; } } try { org . osgi . service . device . IDENT_4 [ ] matches = IDENT_6 . toArray ( new org . osgi . service . device . IDENT_4 [ 0 ] ) ; int index = IDENT_1 . select ( IDENT_3 , matches ) ; if ( ( ( index != ( org . osgi . service . device . IDENT_0 . IDENT_11 ) ) && ( index >= 0 ) ) && ( index < ( matches . length ) ) ) { return matches [ index ] ; } } catch ( java . lang . Exception e ) { IDENT_10 . error ( STRING_4 , e ) ; } return null ; }
org . junit . Assert . assertNull ( match ) 