METHOD_0 ( ) { java . lang . String actual = IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_1 ( STRING_0 , STRING_1 ) ; java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { java . lang . String token = IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 ; int IDENT_4 = url . indexOf ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_5 ) ; if ( IDENT_4 != ( - 1 ) ) { token = IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_5 ; url = IDENT_0 . IDENT_1 . util . StringUtils . METHOD_2 ( url , IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_5 , IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 ) ; } IDENT_4 = url . indexOf ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 ) ; if ( ( IDENT_6 == null ) && ( IDENT_4 != ( - 1 ) ) ) { IDENT_0 . IDENT_1 . IDENT_7 me = new IDENT_0 . IDENT_1 . METHOD_3 ( ) ; if ( ( IDENT_0 . IDENT_1 . IDENT_8 . METHOD_4 ( ) ) == null ) me . METHOD_5 ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_9 , STRING_3 , new java . lang . Object [ ] { token } ) ; else me . METHOD_5 ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_9 , new java . lang . Object [ ] { token } ) ; throw me ; } else if ( IDENT_6 != null ) { if ( IDENT_4 == 0 ) { url = IDENT_6 + ( url . substring ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 . length ( ) ) ) ; } else if ( IDENT_4 > 0 ) { if ( ( url . indexOf ( IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_10 ) ) != ( - 1 ) ) { url = IDENT_0 . IDENT_1 . util . StringUtils . METHOD_2 ( url , IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_10 , IDENT_6 ) ; } else { url = IDENT_0 . IDENT_1 . util . StringUtils . METHOD_2 ( url , IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 , IDENT_6 ) ; } } } return url ; }
org . junit . Assert . assertEquals ( expected , actual ) 