METHOD_0 ( ) { final nl . bzk . brp . IDENT_0 . model . IDENT_1 IDENT_2 = METHOD_1 ( IDENT_3 . IDENT_4 ) ; final nl . bzk . brp . IDENT_0 . model . IDENT_5 IDENT_6 = nl . bzk . brp . IDENT_0 . model . IDENT_5 . IDENT_7 ; final boolean IDENT_8 = IDENT_9 . METHOD_2 ( IDENT_10 , IDENT_6 , IDENT_2 , IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( nl . bzk . brp . model . IDENT_12 . kern . IDENT_13 , nl . bzk . brp . IDENT_0 . model . IDENT_5 , nl . bzk . brp . IDENT_0 . model . IDENT_1 , nl . bzk . brp . model . operationeel . kern . IDENT_14 ) { final boolean IDENT_8 ; switch ( IDENT_15 . METHOD_3 ( ) ) { case IDENT_4 : IDENT_8 = ( nl . bzk . brp . IDENT_0 . model . IDENT_5 . IDENT_7 ) != IDENT_6 ; break ; case IDENT_16 : IDENT_8 = true ; break ; case IDENT_17 : switch ( IDENT_6 ) { case IDENT_18 : IDENT_8 = true ; break ; case IDENT_7 : IDENT_8 = false ; break ; default : throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } break ; default : throw new java . lang . IllegalArgumentException ( ( ( ( STRING_1 + ( IDENT_19 . METHOD_4 ( ) ) ) + STRING_2 ) + ( IDENT_15 . METHOD_3 ( ) ) ) ) ; } if ( ! IDENT_8 ) { nl . bzk . brp . IDENT_0 . business . filters . IDENT_20 . LOGGER . debug ( STRING_3 , IDENT_21 . METHOD_5 ( ) , IDENT_15 . METHOD_6 ( ) . METHOD_5 ( ) , IDENT_6 , IDENT_15 . METHOD_3 ( ) ) ; } return IDENT_8 ; }
org . junit . Assert . assertFalse ( IDENT_8 ) 