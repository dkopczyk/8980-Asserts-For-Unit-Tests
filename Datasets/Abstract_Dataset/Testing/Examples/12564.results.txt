METHOD_0 ( ) { try { T [ ] data = METHOD_1 ( ) ; T IDENT_0 = METHOD_1 ( ) [ 0 ] ; org . apache . flink . api . common . IDENT_1 . IDENT_2 < T > IDENT_3 = METHOD_2 ( true ) ; if ( ! ( IDENT_3 . METHOD_3 ( ) ) ) { return ; } org . apache . flink . api . common . IDENT_1 . IDENT_2 < T > IDENT_4 = IDENT_3 . METHOD_4 ( ) ; IDENT_4 . METHOD_5 ( IDENT_0 ) ; org . apache . flink . api . common . IDENT_1 . IDENT_5 . IDENT_6 out = new org . apache . flink . api . common . IDENT_1 . IDENT_5 . METHOD_6 ( ) ; org . apache . flink . api . common . IDENT_1 . IDENT_5 . IDENT_7 in ; for ( T value : data ) { IDENT_3 . METHOD_5 ( value ) ; IDENT_3 . METHOD_7 ( value , out ) ; in = out . METHOD_8 ( ) ; IDENT_3 . METHOD_9 ( IDENT_0 , in ) ; "<AssertPlaceHolder>" ; } } catch ( java . lang . Exception e ) { System . err . println ( e . getMessage ( ) ) ; e . printStackTrace ( ) ; org . junit . Assert . fail ( ( STRING_0 + ( e . getMessage ( ) ) ) ) ; } } METHOD_10 ( org . apache . flink . api . common . IDENT_1 . IDENT_2 ) { final org . apache . flink . runtime . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 = ( ( org . apache . flink . runtime . IDENT_8 . IDENT_9 . IDENT_10 ) ( IDENT_12 ) ) ; for ( int i = 0 ; i < ( this . IDENT_13 . length ) ; i ++ ) { @ org . apache . flink . runtime . IDENT_8 . IDENT_9 . METHOD_11 ( STRING_1 ) final int IDENT_14 = ( ( java . lang . IDENT_15 ) ( IDENT_11 . IDENT_16 [ i ] ) ) . compareTo ( this . IDENT_16 [ i ] ) ; if ( IDENT_14 != 0 ) { return this . IDENT_17 [ i ] ? IDENT_14 : - IDENT_14 ; } } return 0 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_3 . METHOD_10 ( IDENT_4 ) ) == 0 ) ) 