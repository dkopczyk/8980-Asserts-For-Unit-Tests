METHOD_0 ( ) { java . util . List < IDENT_0 . IDENT_1 . IDENT_2 > result = new java . util . ArrayList ( ) ; result . add ( new IDENT_0 . IDENT_1 . METHOD_1 ( IDENT_3 ) ) ; when ( element . METHOD_2 ( any ( IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . class ) , any ( com . sun . IDENT_6 . IDENT_7 . IDENT_8 . class ) ) ) . thenReturn ( result ) ; IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 list = new IDENT_0 . IDENT_1 . IDENT_9 . METHOD_3 ( new IDENT_0 . IDENT_1 . IDENT_9 . METHOD_4 ( element ) . METHOD_5 ( IDENT_11 ) ) ; IDENT_0 . IDENT_1 . IDENT_9 . IDENT_12 item = list . METHOD_6 ( 0 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . regex . IDENT_13 ) { java . util . List < IDENT_0 . IDENT_1 . IDENT_9 . Element > collection ; IDENT_0 . IDENT_1 . IDENT_9 . Element IDENT_14 = null ; collection = this . METHOD_2 ( new IDENT_0 . IDENT_4 . METHOD_7 ( IDENT_0 . IDENT_4 . METHOD_7 . IDENT_15 ) , this . METHOD_8 ( IDENT_16 . IDENT_17 ) ) ; for ( IDENT_0 . IDENT_1 . IDENT_9 . Element element : collection ) { java . lang . String name = element . getName ( ) ; if ( ( name != null ) && ( IDENT_18 . matcher ( name ) . matches ( ) ) ) { IDENT_14 = element ; break ; } } if ( IDENT_14 == null ) { throw new IDENT_0 . IDENT_1 . IDENT_9 . METHOD_9 ( IDENT_18 . toString ( ) ) ; } return new IDENT_0 . IDENT_1 . IDENT_9 . METHOD_10 ( new IDENT_0 . IDENT_1 . IDENT_9 . METHOD_4 ( IDENT_14 ) ) ; }
org . junit . Assert . assertTrue ( ( item != null ) ) 