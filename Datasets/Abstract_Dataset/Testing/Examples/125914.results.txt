METHOD_0 ( ) { METHOD_1 ( ( IDENT_0 ) -> new com . sun . IDENT_1 . platform . IDENT_2 . IDENT_3 . METHOD_2 ( 0 ) ) . when ( IDENT_4 ) . METHOD_3 ( any ( IDENT_5 . IDENT_6 . class ) , any ( com . sun . IDENT_1 . IDENT_7 . IDENT_8 . class ) ) ; IDENT_9 . IDENT_10 . pattern . IDENT_11 pattern = new IDENT_9 . IDENT_10 . pattern . METHOD_4 ( element ) ; pattern . IDENT_12 = IDENT_12 ; IDENT_9 . IDENT_10 . pattern . METHOD_4 IDENT_13 = org . mockito . Mockito . METHOD_5 ( pattern ) ; doReturn ( IDENT_4 ) . when ( IDENT_13 ) . METHOD_6 ( any ( ) ) ; IDENT_9 . IDENT_10 . IDENT_14 . IDENT_15 IDENT_16 = org . mockito . Mockito . mock ( IDENT_9 . IDENT_10 . IDENT_14 . IDENT_15 . class ) ; METHOD_1 ( ( IDENT_0 ) -> { java . lang . Object [ ] args = IDENT_0 . METHOD_7 ( ) ; com . sun . IDENT_1 . IDENT_7 . IDENT_8 reference = ( ( com . sun . IDENT_1 . IDENT_7 . IDENT_8 ) ( args [ 1 ] ) ) ; java . lang . String value = STRING_0 ; com . sun . IDENT_1 . IDENT_17 IDENT_18 = new com . sun . IDENT_1 . METHOD_8 ( ( IDENT_19 . IDENT_20 * ( ( value . length ( ) ) + 1 ) ) ) ; IDENT_18 . METHOD_9 ( 0 , value ) ; reference . setValue ( IDENT_18 ) ; return 0 ; } ) . when ( IDENT_16 ) . getText ( any ( ) , any ( ) ) ; doReturn ( IDENT_16 ) . when ( IDENT_13 ) . METHOD_10 ( any ( ) ) ; java . lang . String text = IDENT_13 . getText ( ) ; "<AssertPlaceHolder>" ; } getText ( ) { com . sun . IDENT_1 . IDENT_7 . IDENT_8 IDENT_21 = new com . sun . IDENT_1 . IDENT_7 . METHOD_11 ( ) ; final int res = this . METHOD_12 ( ) . METHOD_13 ( IDENT_21 ) ; if ( res != 0 ) { throw new IDENT_9 . IDENT_10 . METHOD_14 ( res ) ; } com . sun . IDENT_1 . platform . IDENT_2 . IDENT_22 . IDENT_23 IDENT_24 = METHOD_6 ( IDENT_21 . getValue ( ) ) ; com . sun . IDENT_1 . IDENT_7 . METHOD_11 IDENT_25 = new com . sun . IDENT_1 . IDENT_7 . METHOD_11 ( ) ; com . sun . IDENT_1 . platform . IDENT_2 . IDENT_3 . METHOD_2 IDENT_26 = IDENT_24 . METHOD_3 ( new com . sun . IDENT_1 . platform . IDENT_2 . IDENT_5 . METHOD_15 ( IDENT_9 . IDENT_14 . IDENT_15 . IDENT_27 ) , IDENT_25 ) ; if ( com . sun . IDENT_1 . platform . IDENT_2 . IDENT_22 . IDENT_28 . METHOD_16 ( IDENT_26 ) ) { IDENT_9 . IDENT_14 . IDENT_15 range = METHOD_10 ( IDENT_25 ) ; com . sun . IDENT_1 . IDENT_7 . METHOD_11 IDENT_29 = new com . sun . IDENT_1 . IDENT_7 . METHOD_11 ( ) ; final int IDENT_30 = range . getText ( ( - 1 ) , IDENT_29 ) ; if ( IDENT_30 != 0 ) { throw new IDENT_9 . IDENT_10 . METHOD_14 ( IDENT_30 ) ; } return IDENT_29 . getValue ( ) . METHOD_17 ( 0 ) ; } else { throw new IDENT_9 . IDENT_10 . METHOD_14 ( IDENT_26 . METHOD_18 ( ) ) ; } }
org . junit . Assert . assertTrue ( text . equals ( STRING_0 ) ) 