METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . Object [ ] ) { org . IDENT_0 . common . util . IDENT_1 . METHOD_2 ( pattern , STRING_0 ) ; if ( parameters == null ) parameters = org . IDENT_0 . common . util . IDENT_2 . IDENT_3 ; java . util . regex . IDENT_4 matcher = org . IDENT_0 . common . util . IDENT_2 . IDENT_5 . matcher ( pattern ) ; java . lang . StringBuffer text = new java . lang . StringBuffer ( ) ; int IDENT_6 = 0 ; boolean err = false ; while ( matcher . find ( ) ) { int IDENT_7 = java . lang . Integer . valueOf ( matcher . group ( 1 ) ) ; if ( IDENT_6 <= IDENT_7 ) { IDENT_6 = IDENT_7 + 1 ; } if ( IDENT_7 >= ( parameters . length ) ) { err = true ; matcher . METHOD_3 ( text , matcher . group ( ) ) ; } else { java . lang . Object parameter = parameters [ IDENT_7 ] ; if ( ( parameter != null ) && ( parameter . getClass ( ) . METHOD_4 ( ) ) ) { if ( parameter instanceof java . lang . Object [ ] ) { parameter = java . util . Arrays . asList ( ( ( java . lang . Object [ ] ) ( parameter ) ) ) ; } else { int length = java . lang . reflect . IDENT_8 . METHOD_5 ( parameter ) ; java . util . List < java . lang . Object > IDENT_9 = new java . util . ArrayList < java . lang . Object > ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { IDENT_9 . add ( java . lang . reflect . IDENT_8 . get ( parameter , i ) ) ; } parameter = IDENT_9 ; } } matcher . METHOD_3 ( text , java . util . regex . IDENT_4 . METHOD_6 ( ( parameter == null ? STRING_1 : parameter . toString ( ) ) ) ) ; } } if ( err || ( IDENT_6 < ( parameters . length ) ) ) { throw new java . lang . IllegalArgumentException ( IDENT_10 . IDENT_11 . text ( parameters . length , ( ( parameters . length ) == 1 ? "" : STRING_2 ) , IDENT_6 , ( IDENT_6 == 1 ? "" : STRING_2 ) , pattern , text . toString ( ) ) ) ; } matcher . METHOD_7 ( text ) ; return text . toString ( ) ; }
org . junit . Assert . assertThat ( org . IDENT_0 . common . util . IDENT_2 . METHOD_1 ( "test" , ( ( java . lang . Object [ ] ) ( null ) ) ) , org . hamcrest . core . Is . is ( "test" ) ) 