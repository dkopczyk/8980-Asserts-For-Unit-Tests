METHOD_0 ( ) { javax . jcr . Node IDENT_0 = session . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) ; IDENT_0 . METHOD_3 ( STRING_1 ) ; javax . jcr . Node IDENT_1 = session . METHOD_1 ( ) . METHOD_2 ( STRING_2 ) ; IDENT_1 . METHOD_3 ( STRING_1 ) ; javax . jcr . Node IDENT_2 = session . METHOD_1 ( ) . METHOD_2 ( STRING_3 ) ; IDENT_2 . setProperty ( STRING_4 , IDENT_0 ) ; javax . jcr . Node IDENT_3 = session . METHOD_1 ( ) . METHOD_2 ( STRING_5 ) ; IDENT_3 . setProperty ( STRING_6 , IDENT_1 ) ; java . util . List < java . lang . String > IDENT_4 = java . util . Arrays . asList ( IDENT_2 . METHOD_4 ( ) , IDENT_3 . METHOD_4 ( ) ) ; java . util . Collections . METHOD_5 ( IDENT_4 ) ; session . save ( ) ; try { java . lang . String IDENT_5 = STRING_7 + ( METHOD_6 ( IDENT_0 , IDENT_1 ) ) ; org . IDENT_6 . jcr . api . query . IDENT_7 IDENT_8 = session . METHOD_7 ( ) . METHOD_8 ( ) ; javax . jcr . query . Query query = IDENT_8 . METHOD_9 ( IDENT_5 , Query . IDENT_9 ) ; javax . jcr . query . IDENT_10 result = query . execute ( ) ; final java . util . List < java . lang . String > IDENT_11 = new java . util . ArrayList < java . lang . String > ( ) ; METHOD_10 ( ) . METHOD_11 ( 2 ) . METHOD_12 ( new org . IDENT_6 . jcr . IDENT_12 . METHOD_13 ( ) { @ org . IDENT_6 . jcr . Override public void validate ( int IDENT_13 , javax . jcr . query . IDENT_14 row ) throws javax . jcr . IDENT_15 { IDENT_11 . add ( row . METHOD_14 ( ) . METHOD_4 ( ) ) ; } } ) . validate ( query , result ) ; java . util . Collections . METHOD_5 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } finally { IDENT_0 . remove ( ) ; IDENT_1 . remove ( ) ; IDENT_2 . remove ( ) ; IDENT_3 . remove ( ) ; session . save ( ) ; } } validate ( org . IDENT_6 . jcr . api . index . IDENT_16 , org . IDENT_6 . common . collection . IDENT_17 ) { org . IDENT_6 . jcr . api . index . IDENT_16 . IDENT_18 IDENT_19 = IDENT_20 . METHOD_15 ( ) ; boolean IDENT_21 = IDENT_19 == ( IDENT_16 . IDENT_18 . IDENT_22 ) ; if ( IDENT_21 && ( ( IDENT_20 . size ( ) ) > 1 ) ) { IDENT_23 . METHOD_16 ( IDENT_24 . IDENT_25 , IDENT_20 . getName ( ) ) ; } for ( int i = 0 ; i < ( IDENT_20 . size ( ) ) ; i ++ ) { org . IDENT_6 . jcr . api . index . IDENT_26 IDENT_27 = IDENT_20 . METHOD_17 ( i ) ; org . IDENT_6 . jcr . value . IDENT_28 IDENT_29 = org . IDENT_6 . jcr . value . IDENT_28 . METHOD_18 ( IDENT_27 . METHOD_19 ( ) ) ; switch ( IDENT_29 ) { case IDENT_30 : { IDENT_23 . METHOD_16 ( IDENT_24 . IDENT_31 , IDENT_29 , IDENT_27 . METHOD_20 ( ) , IDENT_20 . getName ( ) ) ; continue ; } case IDENT_32 : { if ( ! IDENT_21 ) { IDENT_23 . METHOD_16 ( IDENT_24 . IDENT_31 , IDENT_29 , IDENT_27 . METHOD_20 ( ) , IDENT_20 . getName ( ) ) ; } } } } }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_11 ) 