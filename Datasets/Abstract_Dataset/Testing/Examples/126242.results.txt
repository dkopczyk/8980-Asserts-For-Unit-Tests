METHOD_0 ( ) { org . IDENT_0 . jcr . value . IDENT_1 . IDENT_2 IDENT_3 ; java . util . Map < java . lang . String , org . IDENT_0 . jcr . value . IDENT_1 . IDENT_2 > IDENT_4 = new java . util . IDENT_5 < java . lang . String , org . IDENT_0 . jcr . value . IDENT_1 . IDENT_2 > ( ) ; IDENT_4 . put ( STRING_0 , org . IDENT_0 . jcr . value . IDENT_1 . IDENT_6 . IDENT_7 ) ; IDENT_4 . put ( STRING_1 , org . IDENT_0 . jcr . value . IDENT_1 . IDENT_6 . IDENT_8 ) ; IDENT_3 = new org . IDENT_0 . jcr . value . IDENT_1 . METHOD_1 ( IDENT_4 ) ; IDENT_3 . METHOD_2 ( org . IDENT_0 . jcr . value . IDENT_1 . IDENT_6 . IDENT_9 ) ; IDENT_3 . start ( ) ; org . IDENT_0 . jcr . value . IDENT_10 v = IDENT_3 . METHOD_3 ( new java . io . ByteArrayInputStream ( METHOD_4 ( ) ) , STRING_2 , false ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . IDENT_0 . jcr . value . IDENT_11 ) { java . util . Iterator < Map . Entry < java . lang . String , org . IDENT_0 . jcr . value . IDENT_1 . IDENT_2 > > it = METHOD_6 ( ) ; while ( it . hasNext ( ) ) { org . IDENT_0 . jcr . value . IDENT_1 . IDENT_2 IDENT_12 = it . next ( ) . getValue ( ) ; if ( IDENT_12 . METHOD_5 ( key ) ) { return true ; } } return false ; }
org . junit . Assert . assertTrue ( org . IDENT_0 . jcr . value . IDENT_1 . IDENT_6 . IDENT_7 . METHOD_5 ( v . getKey ( ) ) ) 