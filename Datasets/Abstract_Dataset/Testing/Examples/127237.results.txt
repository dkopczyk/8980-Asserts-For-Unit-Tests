METHOD_0 ( ) { double [ ] IDENT_0 = new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , FLOAT_6 , 0.0 , 0.0 } ; float [ ] IDENT_1 = new float [ ] { FLOAT_7 , FLOAT_8 , FLOAT_9 , FLOAT_10 , FLOAT_11 , FLOAT_12 , FLOAT_13 , FLOAT_14 , FLOAT_9 } ; int size = 7 ; io . github . IDENT_2 . util . IDENT_3 . METHOD_1 ( IDENT_0 , IDENT_1 , size , IDENT_4 . IDENT_5 , IDENT_6 . IDENT_7 ) ; for ( int i = 1 ; i < size ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( double [ ] , float [ ] , int , io . github . IDENT_2 . util . IDENT_8 , io . github . IDENT_2 . util . IDENT_9 ) { final java . util . List < java . lang . Integer > IDENT_10 = new java . util . ArrayList ( size ) ; for ( int i = 0 ; i < size ; i ++ ) IDENT_10 . add ( i ) ; java . util . IDENT_11 < java . lang . Integer > IDENT_12 = new io . github . IDENT_2 . util . IDENT_3 . METHOD_2 ( IDENT_0 , IDENT_1 , IDENT_13 , IDENT_14 ) ; java . util . Collections . METHOD_3 ( IDENT_10 , IDENT_12 ) ; io . github . IDENT_2 . util . IDENT_3 . METHOD_4 ( IDENT_0 , IDENT_10 ) ; io . github . IDENT_2 . util . IDENT_3 . METHOD_4 ( IDENT_1 , IDENT_10 ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_0 [ i ] ) >= ( IDENT_0 [ ( i - 1 ) ] ) ) ) 