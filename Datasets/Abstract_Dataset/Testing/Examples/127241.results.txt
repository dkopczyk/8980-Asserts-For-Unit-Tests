METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = null ; final double IDENT_7 = FLOAT_0 ; final io . github . IDENT_8 . datamodel . IDENT_9 IDENT_10 = io . github . IDENT_8 . util . IDENT_11 . METHOD_1 ( STRING_1 ) ; final double IDENT_12 = FLOAT_1 ; final java . lang . String [ ] IDENT_13 = new java . lang . String [ ] { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 } ; final int IDENT_14 = 5 ; java . io . File IDENT_15 = METHOD_2 ( IDENT_0 ) . METHOD_3 ( ) ; io . github . IDENT_8 . io . IDENT_16 . IDENT_17 IDENT_18 = io . github . IDENT_8 . io . IDENT_16 . IDENT_19 . METHOD_4 ( IDENT_15 ) ; double [ ] IDENT_20 = IDENT_18 . METHOD_5 ( ) ; float [ ] IDENT_21 = IDENT_18 . METHOD_6 ( ) ; int size = IDENT_20 . length ; io . github . IDENT_8 . datamodel . IDENT_22 type = io . github . IDENT_8 . IDENT_23 . IDENT_24 . IDENT_25 . METHOD_7 ( IDENT_20 , IDENT_21 , size ) ; io . github . IDENT_8 . datamodel . IDENT_26 IDENT_27 = new io . github . IDENT_8 . datamodel . METHOD_8 ( IDENT_20 , IDENT_21 , size , type ) ; java . util . IDENT_28 < io . github . IDENT_8 . datamodel . IDENT_26 > IDENT_29 = new java . util . METHOD_9 ( ) ; IDENT_29 . add ( IDENT_27 ) ; io . github . IDENT_8 . id . IDENT_30 . IDENT_31 IDENT_32 = new io . github . IDENT_8 . id . IDENT_30 . METHOD_10 ( null , IDENT_29 , IDENT_7 , IDENT_10 , IDENT_14 , IDENT_6 , IDENT_12 ) ; java . util . List < de . IDENT_1 . IDENT_2 . IDENT_30 . IDENT_33 > list = IDENT_32 . METHOD_11 ( ) ; java . lang . String [ ] results = new java . lang . String [ IDENT_14 ] ; int i = 0 ; for ( de . IDENT_1 . IDENT_2 . IDENT_30 . IDENT_33 r : list ) { results [ ( i ++ ) ] = r . METHOD_12 ( ) . toString ( ) ; } "<AssertPlaceHolder>" ; } toString ( ) { return ( ( ( STRING_7 + ( io . github . IDENT_8 . io . IDENT_34 . IDENT_35 . getKey ( ) ) ) + STRING_8 ) + ( io . github . IDENT_8 . io . IDENT_34 . IDENT_35 . getValue ( ) ) ) + "]" ; }
org . junit . Assert . assertArrayEquals ( IDENT_13 , results ) 