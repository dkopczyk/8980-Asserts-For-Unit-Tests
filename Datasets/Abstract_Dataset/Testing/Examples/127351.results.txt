METHOD_0 ( ) { IDENT_0 . METHOD_1 ( new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( new IDENT_0 . IDENT_1 . model . METHOD_3 ( ) ) ) ; IDENT_0 . IDENT_1 . generator . listener . IDENT_4 IDENT_5 = new IDENT_0 . IDENT_1 . generator . listener . METHOD_4 ( ) ; IDENT_0 . METHOD_5 ( IDENT_5 ) ; IDENT_0 . METHOD_6 ( new IDENT_0 . IDENT_1 . generator . IDENT_6 . METHOD_7 ( 3 ) ) ; IDENT_0 . METHOD_8 ( new IDENT_0 . IDENT_1 . generator . IDENT_6 . METHOD_7 ( 2 ) ) ; IDENT_0 . METHOD_9 ( ) . METHOD_10 ( true ) ; IDENT_0 . METHOD_11 ( INT_0 ) ; java . lang . String output = IDENT_0 . common . TestUtils . METHOD_12 ( ) ; java . lang . String expected = STRING_0 1 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + STRING_0 3 ) + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_0 5 ) + STRING_0 4 ) + STRING_6 0 ) + STRING_7 ) + STRING_8 ) + STRING_6 ) + STRING_0 9 ) + STRING_0 0 ) + STRING_0 7 ) + STRING_0 2 ) + STRING_6 1 ) + STRING_6 0 ) + STRING_0 8 ) + STRING_9 ) + STRING_0 6 ) + STRING_6 0 ) ; expected = METHOD_13 ( expected , STRING_6 0 ) ; output = METHOD_13 ( output , STRING_6 0 ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( java . lang . String , java . lang . String ) { char [ ] IDENT_7 = IDENT_8 . METHOD_14 ( ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( IDENT_8 . length ( ) ) ; for ( int i = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { char c = IDENT_7 [ i ] ; switch ( c ) { case STRING_10 : sb . append ( IDENT_9 ) ; break ; case STRING_11 : sb . append ( IDENT_9 ) ; if ( ( ( IDENT_7 . length ) >= i ) && ( ( IDENT_7 [ ( i + 1 ) ] ) == STRING_10 ) ) { i ++ ; } break ; default : sb . append ( c ) ; } } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( STRING_0 , expected , output ) 