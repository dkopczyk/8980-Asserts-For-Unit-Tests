METHOD_0 ( ) { org . mule . runtime . api . util . concurrent . IDENT_0 IDENT_1 = new org . mule . runtime . api . util . concurrent . METHOD_1 ( ) ; java . util . concurrent . atomic . IDENT_2 < org . mule . runtime . core . IDENT_3 . event . IDENT_4 > IDENT_5 = new java . util . concurrent . atomic . METHOD_2 ( ) ; org . mule . runtime . core . IDENT_3 . processor . IDENT_6 . IDENT_7 IDENT_8 = org . mule . runtime . core . IDENT_3 . processor . IDENT_9 . METHOD_3 ( empty ( ) , ( event ) -> { IDENT_1 . METHOD_4 ( ) ; IDENT_5 . set ( child ( ( ( org . mule . runtime . core . IDENT_3 . event . IDENT_4 ) ( event . METHOD_5 ( ) ) ) , empty ( ) ) ) ; return event ; } ) ; IDENT_10 = METHOD_6 ( IDENT_8 , org . mule . runtime . core . IDENT_3 . processor . IDENT_9 . METHOD_3 ( empty ( ) , ( event ) -> event ) ) ; java . util . concurrent . IDENT_11 < java . util . concurrent . IDENT_12 < org . mule . runtime . api . event . IDENT_13 > > future = IDENT_14 . METHOD_7 ( ( ) -> IDENT_10 . execute ( METHOD_8 ( ) ) ) ; IDENT_1 . METHOD_9 ( ) ; try { future . get ( org . mule . runtime . core . IDENT_3 . processor . IDENT_15 , org . mule . runtime . core . IDENT_3 . processor . IDENT_16 ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . util . concurrent . IDENT_17 IDENT_18 ) { } IDENT_5 . get ( ) . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String , java . util . Map ) { return request ( org . mule . runtime . IDENT_19 . api . transport . IDENT_20 . toString ( ) , url , headers , null ) ; }
org . junit . Assert . assertThat ( future . get ( org . mule . runtime . core . IDENT_3 . processor . IDENT_15 , org . mule . runtime . core . IDENT_3 . processor . IDENT_16 ) . get ( ) . getMessage ( ) , org . hamcrest . CoreMatchers . equalTo ( METHOD_8 ( ) . getMessage ( ) ) ) 