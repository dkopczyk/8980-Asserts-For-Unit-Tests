METHOD_0 ( ) { java . lang . String sql = STRING_0 ; java . lang . String IDENT_0 = STRING_1 ; java . lang . String IDENT_1 = io . IDENT_2 . route . util . IDENT_3 . METHOD_1 ( sql , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { final java . lang . String IDENT_4 = stmt . METHOD_2 ( ) ; final java . lang . String IDENT_5 = ( schema . METHOD_2 ( ) ) + STRING_3 ; final java . lang . String IDENT_6 = new java . lang . StringBuilder ( STRING_4 ) . append ( schema . METHOD_2 ( ) ) . append ( STRING_5 ) . toString ( ) ; int IDENT_7 = 0 ; int IDENT_8 = 0 ; int IDENT_9 = IDENT_4 . indexOf ( IDENT_5 , IDENT_7 ) ; int IDENT_10 = IDENT_4 . indexOf ( IDENT_6 , IDENT_7 ) ; boolean IDENT_11 = ( IDENT_9 < IDENT_10 ) ? IDENT_9 == ( - 1 ) : IDENT_10 != ( - 1 ) ; IDENT_8 = ( ! IDENT_11 ) ? IDENT_9 > 0 ? IDENT_9 : IDENT_10 : IDENT_10 > 0 ? IDENT_10 : IDENT_9 ; if ( IDENT_8 < 0 ) { return stmt ; } int IDENT_12 = IDENT_4 . indexOf ( STRING_6 ) ; int IDENT_13 = IDENT_4 . METHOD_3 ( STRING_6 ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; while ( IDENT_8 > 0 ) { sb . append ( stmt . substring ( IDENT_7 , IDENT_8 ) ) ; if ( IDENT_11 ) { IDENT_7 = IDENT_8 + ( IDENT_6 . length ( ) ) ; } else { IDENT_7 = IDENT_8 + ( IDENT_5 . length ( ) ) ; } if ( ( ( IDENT_8 > IDENT_12 ) && ( IDENT_8 < IDENT_13 ) ) && ( ( ( io . IDENT_2 . route . util . IDENT_3 . METHOD_4 ( stmt , IDENT_8 ) ) OP_0 2 ) == 1 ) ) { sb . append ( stmt . substring ( IDENT_8 , ( ( IDENT_8 + ( schema . length ( ) ) ) + 1 ) ) ) ; } IDENT_9 = IDENT_4 . indexOf ( IDENT_5 , IDENT_7 ) ; IDENT_10 = IDENT_4 . indexOf ( IDENT_6 , IDENT_7 ) ; IDENT_11 = ( IDENT_9 < IDENT_10 ) ? IDENT_9 == ( - 1 ) : IDENT_10 != ( - 1 ) ; IDENT_8 = ( ! IDENT_11 ) ? IDENT_9 > 0 ? IDENT_9 : IDENT_10 : IDENT_10 > 0 ? IDENT_10 : IDENT_9 ; } sb . append ( stmt . substring ( IDENT_7 ) ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( "" , IDENT_0 , IDENT_1 ) 