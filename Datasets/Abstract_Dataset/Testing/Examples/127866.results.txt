METHOD_0 ( ) { final com . IDENT_0 . event . IDENT_1 IDENT_2 = com . IDENT_0 . event . IDENT_3 . METHOD_1 ( com . IDENT_0 . event . IDENT_4 . METHOD_2 ( ) ) ; final java . util . concurrent . IDENT_5 IDENT_6 = new java . util . concurrent . METHOD_3 ( 1 ) ; final java . util . concurrent . METHOD_3 IDENT_7 = new java . util . concurrent . METHOD_3 ( 20 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { new java . lang . Thread ( ( STRING_0 + i ) ) { public void run ( ) { try { IDENT_6 . METHOD_4 ( ) ; } catch ( java . lang . IDENT_8 e ) { java . lang . Thread . METHOD_5 ( ) . METHOD_6 ( ) ; } IDENT_2 . METHOD_7 ( com . IDENT_0 . event . IDENT_9 . METHOD_8 ( STRING_1 ) , java . lang . Thread . METHOD_5 ( ) . getName ( ) ) ; IDENT_7 . METHOD_9 ( ) ; } } . start ( ) ; } final java . util . concurrent . atomic . IDENT_10 IDENT_11 = new java . util . concurrent . atomic . METHOD_10 ( false ) ; final java . util . concurrent . atomic . IDENT_12 IDENT_13 = new java . util . concurrent . atomic . METHOD_11 ( 0 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { final int index = i ; IDENT_2 . METHOD_12 ( com . IDENT_0 . event . IDENT_9 . METHOD_13 ( STRING_1 ) , java . lang . String . class , new com . IDENT_0 . event . IDENT_14 < java . lang . String > ( ) { public void METHOD_14 ( com . IDENT_0 . event . IDENT_15 < java . lang . String > event ) throws java . lang . Exception { if ( IDENT_11 . get ( ) ) IDENT_13 . METHOD_15 ( ) ; IDENT_11 . set ( true ) ; java . lang . Thread . sleep ( 200 ) ; IDENT_11 . set ( false ) ; } } ) ; } IDENT_6 . METHOD_9 ( ) ; IDENT_7 . METHOD_4 ( ) ; System . out . println ( ( STRING_2 + ( IDENT_13 . get ( ) ) ) ) ; "<AssertPlaceHolder>" ; IDENT_2 . close ( ) ; } get ( ) { IDENT_16 . METHOD_4 ( ) ; return result ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_13 . get ( ) ) > 10 ) ) 