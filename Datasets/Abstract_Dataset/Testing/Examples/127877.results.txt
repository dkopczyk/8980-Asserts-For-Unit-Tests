METHOD_0 ( ) { for ( final java . lang . String url : org . IDENT_0 . datamodel . common . IDENT_1 . IDENT_2 ) { try { org . IDENT_0 . datamodel . common . IDENT_3 IDENT_4 = org . IDENT_0 . datamodel . common . IDENT_3 . parse ( url ) ; "<AssertPlaceHolder>" ; } catch ( java . nio . IDENT_5 . IDENT_6 | java . net . IDENT_7 e ) { org . junit . Assert . fail ( ( ( url + STRING_0 ) + ( e . getMessage ( ) ) ) ) ; } } } parse ( java . lang . String ) { final java . lang . String url = IDENT_4 . trim ( ) ; if ( url . startsWith ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_8 ) ) { java . lang . String [ ] IDENT_9 = url . substring ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_8 . length ( ) ) . split ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_10 , 2 ) ; if ( ( IDENT_9 . length ) == 2 ) { java . lang . String [ ] tokens = IDENT_9 [ 0 ] . split ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_11 ) ; java . util . List < java . lang . String > token = java . util . Arrays . stream ( tokens ) . filter ( ( s ) -> ! ( s . contains ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_12 ) ) ) . collect ( java . util . stream . IDENT_13 . toList ( ) ) ; java . util . Map < java . lang . String , java . lang . String > params = java . util . Arrays . stream ( tokens ) . filter ( ( s ) -> s . contains ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_12 ) ) . map ( ( s ) -> s . split ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_12 , 2 ) ) . collect ( java . util . stream . IDENT_13 . METHOD_1 ( ( IDENT_14 ) -> IDENT_14 [ 0 ] , ( IDENT_14 ) -> { try { return decode ( IDENT_14 [ 1 ] , IDENT_15 . UTF_8 ) ; } catch ( e ) { throw new java . lang . RuntimeException ( ( ( ( STRING_1 + ( IDENT_14 [ 1 ] ) ) + STRING_2 ) + ( org . IDENT_0 . datamodel . common . e . getMessage ( ) ) ) ) ; } } ) ) ; final java . lang . String IDENT_16 = ( ! ( token . isEmpty ( ) ) ) ? token . get ( 0 ) : null ; if ( ( ( IDENT_16 != null ) && ( ! ( IDENT_16 . isEmpty ( ) ) ) ) && ( ! ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_17 . matcher ( IDENT_16 ) . matches ( ) ) ) ) { throw new java . net . METHOD_2 ( STRING_3 ) ; } final org . IDENT_0 . datamodel . common . IDENT_18 IDENT_19 ; try { IDENT_19 = ( ( ! ( token . isEmpty ( ) ) ) && ( ( token . size ( ) ) > 1 ) ) ? org . IDENT_0 . datamodel . common . IDENT_18 . METHOD_3 ( token . get ( 1 ) ) : IDENT_18 . URL ; } catch ( java . lang . IllegalArgumentException e ) { throw new java . net . METHOD_2 ( STRING_4 ) ; } java . nio . IDENT_5 . IDENT_20 IDENT_5 = ( params . containsKey ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_21 ) ) ? java . nio . IDENT_5 . IDENT_20 . METHOD_4 ( params . get ( org . IDENT_0 . datamodel . common . IDENT_3 . IDENT_21 ) ) : java . nio . IDENT_5 . IDENT_15 . IDENT_22 ; byte [ ] data ; try { data = ( IDENT_19 == ( IDENT_18 . IDENT_23 ) ) ? java . util . IDENT_24 . METHOD_5 ( ) . decode ( IDENT_9 [ 1 ] ) : org . IDENT_0 . datamodel . common . IDENT_3 . decode ( IDENT_9 [ 1 ] , IDENT_5 ) . getBytes ( IDENT_15 . UTF_8 ) ; } catch ( java . lang . IllegalArgumentException | java . io . IDENT_25 e ) { throw new java . net . METHOD_2 ( ( STRING_5 + ( e . getMessage ( ) ) ) ) ; } return new org . IDENT_0 . datamodel . common . METHOD_6 ( data , IDENT_19 , IDENT_16 , params ) ; } else { throw new java . net . METHOD_2 ( ( STRING_6 + url ) ) ; } } else { throw new java . net . METHOD_2 ( STRING_7 ) ; } }
org . junit . Assert . assertNotNull ( IDENT_4 ) 