METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . builder . IDENT_2 field = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class , STRING_0 , IDENT_7 ) ; com . github . IDENT_0 . IDENT_1 . builder . IDENT_8 . IDENT_9 builder = ( ( com . github . IDENT_0 . IDENT_1 . builder . IDENT_8 . IDENT_9 ) ( IDENT_10 . resolve ( java . lang . String . class ) ) ) ; com . github . IDENT_0 . IDENT_1 . IDENT_3 . format . IDENT_11 < java . lang . String > IDENT_12 = builder . METHOD_2 ( field , config ) ; com . github . IDENT_0 . IDENT_1 . annotation . IDENT_4 . IDENT_13 IDENT_14 = field . METHOD_3 ( com . github . IDENT_0 . IDENT_1 . annotation . IDENT_4 . IDENT_13 . class , IDENT_15 ) . get ( 0 ) ; try { factory . create ( IDENT_14 , java . util . Optional . empty ( ) , field , IDENT_12 , config ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" . METHOD_4 ( com . github . IDENT_0 . IDENT_1 . exception . IDENT_16 . class ) . METHOD_5 ( STRING_1 , field . METHOD_6 ( ) ) ; } } create ( com . github . IDENT_0 . IDENT_1 . annotation . IDENT_17 . IDENT_18 , java . util . Optional , com . github . IDENT_0 . IDENT_1 . builder . IDENT_2 , com . github . IDENT_0 . IDENT_1 . IDENT_3 . format . IDENT_11 , com . github . IDENT_0 . IDENT_1 . builder . Configuration ) { @ com . github . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_17 . METHOD_7 ( STRING_2 ) final com . github . IDENT_0 . IDENT_1 . IDENT_3 . format . IDENT_11 < IDENT_19 > IDENT_20 = ( ( com . github . IDENT_0 . IDENT_1 . IDENT_3 . format . IDENT_11 < IDENT_19 > ) ( IDENT_12 ) ) ; final IDENT_19 max ; try { max = IDENT_20 . parse ( IDENT_14 . value ( ) ) ; } catch ( com . github . IDENT_0 . IDENT_1 . IDENT_3 . format . IDENT_21 e ) { throw new com . github . IDENT_0 . IDENT_1 . exception . METHOD_8 ( IDENT_14 , com . github . IDENT_0 . IDENT_1 . IDENT_22 . IDENT_23 . create ( STRING_3 ) . METHOD_9 ( STRING_4 , field . METHOD_6 ( ) ) . METHOD_10 ( STRING_5 , IDENT_14 . METHOD_11 ( ) ) . METHOD_9 ( STRING_6 , "value" ) . METHOD_9 ( STRING_7 , IDENT_14 . value ( ) ) . METHOD_12 ( STRING_8 , field . getType ( ) ) . METHOD_9 ( STRING_9 , IDENT_20 . METHOD_13 ( ) . METHOD_14 ( null ) ) . format ( true ) , e ) ; } final com . github . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_17 . IDENT_24 < IDENT_19 > processor = next . map ( ( n ) -> new IDENT_24 < com . github . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_17 . IDENT_19 > ( max , IDENT_14 . METHOD_15 ( ) , IDENT_20 , n ) ) . METHOD_14 ( ( ) -> new IDENT_24 < com . github . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_17 . IDENT_19 > ( max , IDENT_14 . METHOD_15 ( ) , IDENT_20 ) ) ; processor . METHOD_16 ( IDENT_14 . message ( ) ) ; return java . util . Optional . of ( processor ) ; }
org . junit . Assert . assertThat ( e ) 