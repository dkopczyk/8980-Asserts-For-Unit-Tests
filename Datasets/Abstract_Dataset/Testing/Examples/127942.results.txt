METHOD_0 ( ) { java . lang . Class < ? > [ ] IDENT_0 = new java . lang . Class [ ] { com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_5 . class } ; com . github . IDENT_1 . IDENT_2 . validation . IDENT_6 IDENT_7 = new com . github . IDENT_1 . IDENT_2 . validation . METHOD_1 ( com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_8 . class ) ; com . github . IDENT_1 . IDENT_2 . builder . IDENT_9 < com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_8 > IDENT_10 = IDENT_11 . create ( com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_8 . class , IDENT_12 ) ; com . github . IDENT_1 . IDENT_2 . validation . IDENT_13 < com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_8 > IDENT_14 = new com . github . IDENT_1 . IDENT_2 . validation . METHOD_2 ( IDENT_15 , IDENT_10 ) ; com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . IDENT_8 record = new com . github . IDENT_1 . IDENT_2 . validation . IDENT_3 . IDENT_4 . METHOD_3 ( ) ; record . id = STRING_0 ; record . name = "test" ; IDENT_16 . validate ( record , IDENT_7 , ( ( com . github . IDENT_1 . IDENT_2 . validation . METHOD_2 ) ( IDENT_14 ) ) , IDENT_0 ) ; java . util . List < java . lang . String > messages = IDENT_7 . METHOD_4 ( ) . stream ( ) . map ( ( error ) -> error . format ( IDENT_17 , IDENT_18 ) ) . collect ( java . util . stream . IDENT_19 . toList ( ) ) ; "<AssertPlaceHolder>" . METHOD_5 ( 1 ) . contains ( "" ) ; } format ( com . github . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_21 , com . github . IDENT_1 . IDENT_2 . IDENT_20 . IDENT_22 ) { for ( java . lang . String code : METHOD_6 ( ) ) { java . util . Optional < java . lang . String > message = IDENT_23 . getMessage ( code ) ; if ( message . METHOD_7 ( ) ) { return IDENT_18 . METHOD_8 ( message . get ( ) , METHOD_9 ( ) , true , IDENT_23 ) ; } } return IDENT_18 . METHOD_8 ( METHOD_10 ( ) , METHOD_9 ( ) , true , IDENT_23 ) ; }
org . junit . Assert . assertThat ( messages ) 