METHOD_0 ( ) { org . IDENT_0 . api . mockito . IDENT_1 . METHOD_1 ( java . net . IDENT_2 . class ) ; org . mockito . Mockito . when ( java . net . IDENT_2 . METHOD_2 ( ) ) . METHOD_3 ( new java . net . METHOD_4 ( ) ) . METHOD_5 ( ) ; final java . net . IDENT_2 IDENT_3 = java . net . IDENT_4 . METHOD_6 ( STRING_0 ) ; java . lang . Thread IDENT_5 ; try ( java . net . IDENT_6 IDENT_7 = new java . net . METHOD_7 ( 0 , 1 , IDENT_3 ) ) { IDENT_7 . METHOD_8 ( INT_0 ) ; IDENT_5 = new java . lang . Thread ( new java . lang . METHOD_9 ( ) { @ org . apache . flink . runtime . net . Override public void run ( ) { try { IDENT_7 . accept ( ) ; } catch ( java . io . IOException e ) { } } } ) ; IDENT_5 . start ( ) ; final java . net . IDENT_8 IDENT_9 = new java . net . METHOD_10 ( IDENT_3 , IDENT_7 . METHOD_11 ( ) ) ; final java . net . IDENT_2 address = org . apache . flink . runtime . net . IDENT_10 . METHOD_12 ( IDENT_9 , INT_1 , INT_2 ) ; "<AssertPlaceHolder>" ; } } METHOD_12 ( java . net . METHOD_10 , long , long ) { if ( IDENT_11 == null ) { throw new java . lang . METHOD_13 ( STRING_1 ) ; } if ( IDENT_12 <= 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } final long IDENT_13 = java . lang . System . METHOD_14 ( ) ; long IDENT_14 = org . apache . flink . runtime . net . IDENT_10 . IDENT_15 ; long IDENT_16 = 0 ; final java . util . List < org . apache . flink . runtime . net . IDENT_10 . IDENT_17 > IDENT_18 = java . util . Collections . METHOD_15 ( java . util . Arrays . asList ( org . apache . flink . runtime . net . IDENT_10 . IDENT_17 . IDENT_19 , org . apache . flink . runtime . net . IDENT_10 . IDENT_17 . IDENT_20 , org . apache . flink . runtime . net . IDENT_10 . IDENT_17 . IDENT_21 , org . apache . flink . runtime . net . IDENT_10 . IDENT_17 . IDENT_22 ) ) ; while ( IDENT_16 < IDENT_12 ) { boolean logging = IDENT_16 >= IDENT_23 ; if ( logging ) { org . apache . flink . runtime . net . IDENT_10 . LOG . info ( ( STRING_3 + IDENT_11 ) ) ; } for ( org . apache . flink . runtime . net . IDENT_10 . IDENT_17 strategy : IDENT_18 ) { java . net . IDENT_2 address = org . apache . flink . runtime . net . IDENT_10 . METHOD_16 ( strategy , IDENT_11 , logging ) ; if ( address != null ) { return address ; } } IDENT_16 = ( ( java . lang . System . METHOD_14 ( ) ) - IDENT_13 ) / INT_3 ; long IDENT_24 = java . lang . Math . min ( ( IDENT_12 - IDENT_16 ) , IDENT_14 ) ; if ( IDENT_24 > 0 ) { if ( logging ) { org . apache . flink . runtime . net . IDENT_10 . LOG . info ( STRING_4 , IDENT_24 ) ; } else { org . apache . flink . runtime . net . IDENT_10 . LOG . debug ( STRING_4 , IDENT_24 ) ; } try { java . lang . Thread . sleep ( IDENT_24 ) ; } catch ( java . lang . IDENT_25 e ) { throw new java . io . IOException ( STRING_5 ) ; } } IDENT_14 = java . lang . Math . min ( ( 2 * IDENT_14 ) , org . apache . flink . runtime . net . IDENT_10 . IDENT_26 ) ; } org . apache . flink . runtime . net . IDENT_10 . LOG . warn ( STRING_6 , IDENT_11 ) ; java . net . IDENT_2 IDENT_27 = org . apache . flink . runtime . net . IDENT_10 . METHOD_16 ( org . apache . flink . runtime . net . IDENT_10 . IDENT_17 . IDENT_28 , IDENT_11 , true ) ; if ( IDENT_27 != null ) { return IDENT_27 ; } else { org . apache . flink . runtime . net . IDENT_10 . LOG . warn ( STRING_7 ) ; return java . net . IDENT_2 . METHOD_2 ( ) ; } }
org . junit . Assert . assertNotNull ( address ) 