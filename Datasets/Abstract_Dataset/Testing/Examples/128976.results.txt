METHOD_0 ( ) { IDENT_0 . query . IDENT_1 . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( IDENT_0 . query . IDENT_1 . IDENT_2 . class ) ; IDENT_0 . query . IDENT_1 . IDENT_2 IDENT_4 = org . easymock . EasyMock . METHOD_1 ( IDENT_0 . query . IDENT_1 . IDENT_2 . class ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_2 ( ) ) . andReturn ( ( - 1 ) ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_2 ( ) ) . andReturn ( ( - 1 ) ) ; org . easymock . EasyMock . replay ( IDENT_3 , IDENT_4 ) ; filter . METHOD_3 ( IDENT_3 ) ; filter . METHOD_3 ( IDENT_4 ) ; int result = filter . METHOD_2 ( ) ; org . easymock . EasyMock . verify ( IDENT_3 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } verify ( java . lang . String , int ) { if ( name . equals ( STRING_0 ) ) { if ( IDENT_5 != 3 ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } } else if ( name . equals ( STRING_2 ) ) { if ( IDENT_5 != 3 ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } } else if ( name . equals ( IDENT_6 . IDENT_7 ) ) { if ( ( IDENT_5 OP_0 2 ) != 0 ) { throw new java . lang . IllegalArgumentException ( STRING_4 ) ; } } else if ( ( name . equals ( IDENT_6 . IDENT_8 ) ) || ( name . equals ( IDENT_6 . IDENT_9 ) ) ) { if ( IDENT_5 == 0 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_5 + name ) + STRING_6 ) ) ; } } else { throw new java . lang . IllegalArgumentException ( ( STRING_7 + name ) ) ; } }
org . junit . Assert . assertTrue ( ( result == ( - 1 ) ) ) 