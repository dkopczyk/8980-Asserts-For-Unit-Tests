METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Integer > IDENT_0 = new java . util . HashMap ( 1 ) ; IDENT_0 . put ( Constants . IDENT_1 , 1 ) ; java . util . Set < java . lang . String > IDENT_2 = new java . util . HashSet ( ) ; IDENT_2 . add ( STRING_0 ) ; org . apache . commons . IDENT_3 . parser . IDENT_4 query = IDENT_5 . query . IDENT_6 . IDENT_7 . METHOD_1 ( STRING_1 ) ; java . util . Set < java . lang . String > IDENT_8 = new java . util . HashSet ( ) ; IDENT_8 . add ( STRING_2 ) ; expect ( IDENT_9 . METHOD_2 ( STRING_2 , STRING_3 ) ) . andReturn ( java . util . Collections . emptyList ( ) ) . METHOD_3 ( ) ; METHOD_4 ( ) ; org . apache . accumulo . core . data . IDENT_10 IDENT_11 = new org . apache . accumulo . core . data . METHOD_5 ( STRING_4 , ( ( STRING_3 + ( IDENT_5 . query . Constants . IDENT_12 ) ) + STRING_5 ) , ( ( STRING_0 + ( IDENT_5 . query . Constants . IDENT_13 ) ) + "value" ) ) ; org . apache . accumulo . core . data . METHOD_5 key = new org . apache . accumulo . core . data . METHOD_5 ( STRING_4 , ( ( STRING_3 + ( IDENT_5 . query . Constants . IDENT_12 ) ) + STRING_6 ) , ( ( STRING_2 + ( IDENT_5 . query . Constants . IDENT_13 ) ) + "bar" ) ) ; filter = new IDENT_5 . query . IDENT_14 . METHOD_6 ( query , IDENT_9 , null , IDENT_2 , 1 , ( - 1 ) , IDENT_0 , STRING_7 , IDENT_8 ) ; filter . METHOD_7 ( IDENT_11 ) ; filter . METHOD_8 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; METHOD_9 ( ) ; } METHOD_8 ( org . apache . accumulo . core . data . METHOD_5 ) { java . lang . String IDENT_15 = k . METHOD_10 ( ) . toString ( ) . substring ( 3 ) ; java . lang . String IDENT_16 = k . METHOD_11 ( ) . toString ( ) ; int index = IDENT_16 . METHOD_12 ( STRING_8 ) ; index = IDENT_16 . METHOD_12 ( STRING_8 , ( index - 1 ) ) ; IDENT_16 = IDENT_16 . substring ( 0 , index ) ; org . apache . commons . IDENT_3 . IDENT_17 context = new IDENT_5 . query . IDENT_6 . METHOD_13 ( ) ; context . set ( IDENT_15 , new IDENT_5 . query . attributes . METHOD_14 ( IDENT_15 , IDENT_16 , IDENT_16 , null ) ) ; boolean IDENT_18 = false ; java . lang . Object o = script . execute ( context ) ; if ( ( o != null ) && ( IDENT_5 . query . IDENT_6 . IDENT_19 . Boolean . class . METHOD_15 ( o . getClass ( ) ) ) ) { IDENT_18 = ( ( java . lang . Boolean ) ( o ) ) ; } else if ( ( o != null ) && ( java . util . Collection . class . METHOD_15 ( o . getClass ( ) ) ) ) { java . util . Collection < ? > matches = ( ( java . util . Collection < ? > ) ( o ) ) ; IDENT_18 = ! ( matches . isEmpty ( ) ) ; } else { if ( IDENT_5 . query . IDENT_6 . IDENT_19 . IDENT_20 . log . METHOD_16 ( ) ) { IDENT_5 . query . IDENT_6 . IDENT_19 . IDENT_20 . log . debug ( ( ( STRING_9 + o ) + STRING_10 ) ) ; } } return IDENT_18 ; }
org . junit . Assert . assertTrue ( filter . METHOD_8 ( key ) ) 