METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap ( ) ; IDENT_0 . put ( STRING_0 6 , STRING_0 0 ) ; java . util . Date IDENT_1 = format . parse ( STRING_0 ) ; java . util . Date IDENT_2 = format . parse ( STRING_0 2 ) ; java . lang . String IDENT_3 = STRING_0 4 ; java . util . Map < java . lang . String , java . lang . Integer > IDENT_4 = com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Integer > builder ( ) . put ( STRING_1 , 2 ) . put ( STRING_0 7 , 1 ) . put ( STRING_0 5 , 1 ) . put ( STRING_2 , 1 ) . put ( STRING_3 , 2 ) . put ( STRING_4 , 2 ) . put ( STRING_0 3 , 1 ) . put ( STRING_0 1 , 2 ) . build ( ) ; IDENT_0 . put ( STRING_5 , STRING_6 ) ; IDENT_0 . put ( STRING_7 , STRING_8 ) ; java . util . List < java . util . List < IDENT_5 . IDENT_6 . query . result . event . IDENT_7 > > IDENT_8 = new java . util . ArrayList ( ) ; for ( IDENT_5 . query . IDENT_9 . IDENT_10 IDENT_11 : IDENT_5 . query . IDENT_12 . IDENT_13 . IDENT_14 ) { IDENT_8 . add ( ( ( IDENT_5 . IDENT_6 . result . IDENT_15 ) ( METHOD_1 ( IDENT_4 , IDENT_3 , IDENT_1 , IDENT_2 , IDENT_0 , IDENT_11 ) ) ) . METHOD_2 ( ) ) ; } java . util . List < java . lang . String > IDENT_16 = METHOD_3 ( IDENT_8 ) ; IDENT_5 . query . IDENT_12 . IDENT_13 . log . debug ( ( STRING_9 + IDENT_16 ) ) ; java . util . Set < java . lang . String > IDENT_17 = com . google . common . collect . IDENT_18 . METHOD_4 ( IDENT_16 ) ; "<AssertPlaceHolder>" ; } size ( ) { return this . IDENT_19 . size ( ) ; }
org . junit . Assert . assertEquals ( IDENT_17 . size ( ) , 1 ) 