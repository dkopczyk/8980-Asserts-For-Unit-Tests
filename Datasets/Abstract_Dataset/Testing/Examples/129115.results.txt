METHOD_0 ( ) { io . IDENT_0 . client . impl . IDENT_1 q = new io . IDENT_0 . client . impl . METHOD_1 ( true ) ; q . METHOD_2 ( ) ; io . IDENT_0 . client . impl . IDENT_2 msg = q . METHOD_3 ( 1 , 1 , null ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( long , long , java . time . IDENT_3 ) { if ( ! ( this . IDENT_4 ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } if ( ! ( this . METHOD_4 ( ) ) ) { return null ; } io . IDENT_0 . client . impl . IDENT_2 msg = this . queue . METHOD_5 ( ) ; if ( msg == null ) { msg = METHOD_6 ( IDENT_5 ) ; if ( ( ! ( this . METHOD_4 ( ) ) ) || ( msg == null ) ) { return null ; } } long size = msg . METHOD_7 ( ) ; if ( ( IDENT_6 <= 1 ) || ( size >= IDENT_7 ) ) { this . IDENT_8 . METHOD_8 ( ( - size ) ) ; this . length . METHOD_9 ( ) ; METHOD_10 ( ) ; return msg ; } long count = 1 ; io . IDENT_0 . client . impl . IDENT_2 IDENT_9 = msg ; while ( IDENT_9 != null ) { io . IDENT_0 . client . impl . IDENT_2 next = this . queue . METHOD_11 ( ) ; if ( next != null ) { long s = next . METHOD_7 ( ) ; if ( ( IDENT_7 < 0 ) || ( ( size + s ) < IDENT_7 ) ) { size += s ; count ++ ; IDENT_9 . next = this . queue . METHOD_5 ( ) ; IDENT_9 = IDENT_9 . next ; if ( count == IDENT_6 ) { break ; } } else { break ; } } else { break ; } } this . IDENT_8 . METHOD_8 ( ( - size ) ) ; this . length . METHOD_8 ( ( - count ) ) ; METHOD_10 ( ) ; return msg ; }
org . junit . Assert . assertNull ( msg ) 