METHOD_0 ( ) { try ( io . IDENT_0 . client . IDENT_1 IDENT_2 = new io . IDENT_0 . client . METHOD_1 ( false ) ; io . IDENT_0 . client . IDENT_3 IDENT_4 = io . IDENT_0 . client . IDENT_5 . connect ( IDENT_2 . METHOD_2 ( ) ) ) { IDENT_4 . request ( "" , null ) ; "<AssertPlaceHolder>" ; } } request ( java . lang . String , byte [ ] ) { java . lang . String IDENT_6 = null ; boolean IDENT_7 = options . METHOD_3 ( ) ; if ( METHOD_4 ( ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } else if ( METHOD_5 ( ) ) { throw new java . lang . IllegalStateException ( STRING_1 ) ; } if ( ( subject == null ) || ( ( subject . length ( ) ) == 0 ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } if ( body == null ) { body = io . IDENT_0 . client . impl . IDENT_8 . IDENT_9 ; } else if ( ( ( body . length ) > ( this . METHOD_6 ( ) ) ) && ( ( this . METHOD_6 ( ) ) > 0 ) ) { throw new java . lang . IllegalArgumentException ( ( ( ( STRING_3 + ( body . length ) ) + STRING_4 ) + ( this . METHOD_6 ( ) ) ) ) ; } if ( ( IDENT_10 . get ( ) ) == null ) { io . IDENT_0 . client . impl . IDENT_11 d = new io . IDENT_0 . client . impl . METHOD_7 ( this , ( msg ) -> { METHOD_8 ( msg ) ; } ) ; if ( IDENT_10 . METHOD_9 ( null , d ) ) { java . lang . String id = this . IDENT_12 . next ( ) ; this . IDENT_13 . put ( id , d ) ; d . start ( id ) ; d . METHOD_10 ( this . IDENT_14 ) ; } } if ( IDENT_7 ) { IDENT_6 = METHOD_11 ( ) ; } else { IDENT_6 = METHOD_12 ( this . IDENT_14 ) ; } java . lang . String IDENT_15 = METHOD_13 ( IDENT_6 ) ; java . util . concurrent . IDENT_16 < io . IDENT_0 . client . Message > future = new java . util . concurrent . METHOD_14 ( ) ; IDENT_17 . put ( IDENT_15 , future ) ; IDENT_18 . METHOD_15 ( ) ; if ( IDENT_7 ) { this . IDENT_10 . get ( ) . METHOD_10 ( IDENT_6 ) . METHOD_16 ( IDENT_6 , 1 ) ; } this . METHOD_17 ( subject , IDENT_6 , body ) ; IDENT_18 . METHOD_18 ( ) ; return future ; }
org . junit . Assert . assertFalse ( true ) 