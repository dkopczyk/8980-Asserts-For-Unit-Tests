METHOD_0 ( ) { java . io . File IDENT_0 = new java . io . File ( java . lang . System . getProperty ( STRING_0 ) , STRING_1 ) ; IDENT_0 . METHOD_1 ( ) ; IDENT_0 . METHOD_2 ( ) ; org . IDENT_1 . IDENT_2 . service . monitor . IDENT_3 client = new org . IDENT_1 . IDENT_2 . service . monitor . METHOD_3 ( STRING_2 , INT_0 ) ; client . init ( ) ; org . IDENT_1 . IDENT_2 . service . Map < java . lang . String , org . IDENT_1 . monitor . controller . model . IDENT_4 > IDENT_5 = new org . IDENT_1 . IDENT_2 . service . HashMap < java . lang . String , org . IDENT_1 . monitor . controller . model . IDENT_4 > ( ) ; org . IDENT_1 . IDENT_2 . service . IDENT_6 random = new org . IDENT_1 . IDENT_2 . service . METHOD_4 ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { client . update ( ) ; org . IDENT_1 . monitor . IDENT_7 . domain . IDENT_8 info = client . METHOD_5 ( ) ; if ( info == null ) { return ; } info . METHOD_6 ( ( ( ( random . METHOD_7 ( ) ) + STRING_3 ) + ( random . METHOD_7 ( ) ) ) ) ; org . IDENT_1 . monitor . controller . model . IDENT_4 IDENT_9 = new org . IDENT_1 . monitor . controller . model . METHOD_8 ( info , STRING_4 ) ; IDENT_5 . put ( ( STRING_5 + ( random . METHOD_7 ( ) ) ) , IDENT_9 ) ; org . IDENT_1 . common . util . IDENT_10 . sleep ( 100 ) ; } java . lang . String IDENT_11 = IDENT_12 . METHOD_9 ( IDENT_5 ) ; System . out . println ( ( STRING_6 + ( IDENT_11 . length ( ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( org . IDENT_1 . IDENT_2 . service . Map ) { java . lang . String json = gson . METHOD_10 ( IDENT_13 ) ; int IDENT_14 = org . apache . commons . lang . StringUtils . length ( json ) ; if ( IDENT_14 > INT_2 ) { org . IDENT_1 . IDENT_2 . service . IDENT_15 . LOGGER . info ( STRING_7 , IDENT_14 ) ; double IDENT_16 = FLOAT_0 / IDENT_14 ; int IDENT_17 = ( ( int ) ( ( IDENT_13 . size ( ) ) * IDENT_16 ) ) ; org . IDENT_1 . IDENT_2 . service . Map < java . lang . String , org . IDENT_1 . monitor . controller . model . METHOD_8 > IDENT_18 = org . IDENT_19 . google . common . collect . IDENT_20 . METHOD_11 ( ) ; int IDENT_21 = 0 ; for ( java . util . Map . Entry < java . lang . String , org . IDENT_1 . monitor . controller . model . METHOD_8 > IDENT_22 : IDENT_13 . entrySet ( ) ) { if ( IDENT_21 < IDENT_17 ) { IDENT_18 . put ( IDENT_22 . getKey ( ) , IDENT_22 . getValue ( ) ) ; IDENT_21 ++ ; } } json = gson . METHOD_10 ( IDENT_18 ) ; org . IDENT_1 . IDENT_2 . service . IDENT_15 . LOGGER . debug ( STRING_8 , new java . lang . Object [ ] { IDENT_17 , IDENT_13 . size ( ) , json . length ( ) } ) ; } return json ; }
org . junit . Assert . assertTrue ( ( ( IDENT_11 . length ( ) ) < INT_2 ) ) 