METHOD_0 ( ) { java . lang . String IDENT_0 = ( ( ( STRING_0 + ( com . IDENT_1 . IDENT_2 . common . IDENT_3 . IDENT_4 ) ) + STRING_1 ) + ( com . IDENT_1 . IDENT_2 . common . IDENT_3 . IDENT_4 ) ) + STRING_2 ; final java . lang . management . IDENT_5 IDENT_6 = mock ( java . lang . management . IDENT_5 . class ) ; java . util . List < java . lang . String > IDENT_7 = java . util . Collections . singletonList ( ( ( IDENT_8 . IDENT_9 ) + IDENT_0 ) ) ; when ( IDENT_6 . METHOD_1 ( ) ) . thenReturn ( IDENT_7 ) ; com . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 . IDENT_8 IDENT_12 = new com . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 . METHOD_2 ( METHOD_2 . IDENT_13 . IDENT_14 ) { @ com . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 . Override java . lang . management . IDENT_5 METHOD_3 ( ) { return IDENT_6 ; } } ; java . lang . String IDENT_15 = IDENT_12 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( ( IDENT_16 ) == ( com . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 . METHOD_2 . IDENT_13 . IDENT_17 ) ) { return METHOD_5 ( ) ; } java . lang . management . IDENT_5 IDENT_6 = METHOD_3 ( ) ; java . util . List < java . lang . String > IDENT_7 = IDENT_6 . METHOD_1 ( ) ; for ( java . lang . String IDENT_18 : IDENT_7 ) { if ( METHOD_6 ( IDENT_18 , IDENT_19 ) ) { return METHOD_7 ( IDENT_18 ) ; } } throw new java . lang . IllegalArgumentException ( ( ( com . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 . METHOD_2 . IDENT_9 ) + STRING_3 ) ) ; }
org . junit . Assert . assertEquals ( METHOD_4 , IDENT_0 ) 