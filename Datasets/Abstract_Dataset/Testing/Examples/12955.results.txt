METHOD_0 ( ) { try { java . lang . String [ ] data = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , "a" , STRING_3 , STRING_4 } ; org . apache . flink . streaming . api . IDENT_0 . source . IDENT_1 < java . lang . String > source = new org . apache . flink . streaming . api . IDENT_0 . source . IDENT_1 < java . lang . String > ( IDENT_2 . IDENT_3 . METHOD_1 ( new org . apache . flink . api . common . METHOD_2 ( ) ) , data ) ; java . util . List < java . lang . String > result = new java . util . ArrayList < java . lang . String > ( ) ; source . run ( new org . apache . flink . streaming . api . IDENT_0 . IDENT_4 < java . lang . String > ( result ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } } run ( org . apache . flink . streaming . api . IDENT_0 . source . IDENT_5 ) { try { org . apache . flink . metrics . IDENT_6 IDENT_7 = org . apache . flink . streaming . api . IDENT_0 . source . IDENT_8 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( STRING_5 ) ; if ( ( IDENT_9 ) && ( ( format ) instanceof org . apache . flink . api . common . io . IDENT_10 ) ) { ( ( org . apache . flink . api . common . io . IDENT_10 ) ( format ) ) . METHOD_6 ( ) ; } IDENT_11 IDENT_12 = serializer . METHOD_7 ( ) ; while ( IDENT_9 ) { format . METHOD_8 ( IDENT_13 . next ( ) ) ; while ( ( IDENT_9 ) && ( ! ( format . METHOD_9 ( ) ) ) ) { IDENT_12 = format . METHOD_10 ( IDENT_12 ) ; if ( IDENT_12 != null ) { ctx . collect ( IDENT_12 ) ; } else { break ; } } format . close ( ) ; IDENT_7 . METHOD_11 ( ) ; if ( IDENT_9 ) { IDENT_9 = IDENT_13 . hasNext ( ) ; } } } finally { format . close ( ) ; if ( ( format ) instanceof org . apache . flink . api . common . io . IDENT_10 ) { ( ( org . apache . flink . api . common . io . IDENT_10 ) ( format ) ) . METHOD_12 ( ) ; } IDENT_9 = false ; } }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( data ) , result ) 