METHOD_0 ( ) { System . out . println ( new java . util . Date ( ) ) ; init ( INT_0 , false ) ; int count = 0 ; for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( filter . contains ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . next ( ) ) ) count ++ ; } for ( int i = 0 ; i < INT_1 ; i ++ ) { if ( filter . contains ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 . next ( ) ) ) count ++ ; } System . out . METHOD_1 ( STRING_0 , count , ( count / FLOAT_0 ) ) ; "<AssertPlaceHolder>" ; System . out . println ( new java . util . Date ( ) ) ; } next ( ) { if ( ! ( hasNext ( ) ) ) { throw new java . util . METHOD_2 ( ) ; } if ( ( IDENT_5 ) != null ) { org . IDENT_0 . util . Entry < java . lang . String , T > e = IDENT_5 . next ( ) ; return new org . IDENT_0 . util . IDENT_6 . IDENT_7 < T > ( ( ( ( IDENT_8 . getKey ( ) ) + "/" ) + ( e . getKey ( ) ) ) , e . getValue ( ) ) ; } org . IDENT_0 . util . Entry < java . lang . String , T > IDENT_9 = next ; next = null ; return IDENT_9 ; }
org . junit . Assert . assertTrue ( ( count < 1000 ) ) 