METHOD_0 ( ) { try { java . text . IDENT_0 IDENT_1 = new java . text . METHOD_1 ( STRING_0 , java . util . Locale . IDENT_2 ) ; IDENT_1 . METHOD_2 ( true ) ; org . IDENT_3 . IDENT_4 . IDENT_5 config ; config = new org . IDENT_3 . IDENT_4 . METHOD_3 ( IDENT_1 . parse ( STRING_1 ) , 10 ) ; config . METHOD_4 ( STRING_2 , IDENT_6 . IDENT_7 , 20 , Double . IDENT_8 , Double . IDENT_8 ) ; config . METHOD_5 ( IDENT_9 . IDENT_10 , FLOAT_0 , 6 , 10 ) ; org . IDENT_3 . IDENT_4 . io . IDENT_11 IDENT_12 = new org . IDENT_3 . IDENT_4 . io . METHOD_6 ( new java . io . File ( STRING_3 ) ) ; org . IDENT_3 . IDENT_4 . IDENT_13 IDENT_4 = new org . IDENT_3 . IDENT_4 . METHOD_7 ( IDENT_12 , config ) ; METHOD_8 ( IDENT_1 , IDENT_4 ) ; IDENT_4 = new org . IDENT_3 . IDENT_4 . METHOD_7 ( new org . IDENT_3 . IDENT_4 . io . METHOD_6 ( new java . io . File ( STRING_3 ) ) ) ; org . IDENT_3 . IDENT_4 . IDENT_14 IDENT_15 = IDENT_4 . METHOD_9 ( IDENT_9 . IDENT_10 , IDENT_1 . parse ( STRING_4 ) , IDENT_1 . parse ( STRING_5 ) , INT_0 ) ; for ( org . IDENT_3 . IDENT_4 . IDENT_16 row : METHOD_9 . METHOD_10 ( ) ) { "<AssertPlaceHolder>" ; } } catch ( java . text . IDENT_17 e ) { e . printStackTrace ( ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } } METHOD_11 ( ) { return IDENT_18 ; }
org . junit . Assert . assertTrue ( ( ( row . METHOD_11 ( ) [ 0 ] ) == 1.0 ) ) 