METHOD_0 ( ) { java . util . Calendar IDENT_0 = java . util . Calendar . getInstance ( ) ; IDENT_0 . set ( INT_0 , Calendar . IDENT_1 , INT_1 , 0 , 0 , 0 ) ; long IDENT_2 = ( IDENT_0 . getTime ( ) . getTime ( ) ) / 1000 ; long IDENT_3 = 10 ; org . IDENT_4 . IDENT_5 . IDENT_6 config = new org . IDENT_4 . IDENT_5 . METHOD_1 ( METHOD_2 ( ( IDENT_2 - 1 ) ) , IDENT_3 ) ; config . METHOD_3 ( "test" , IDENT_7 . IDENT_8 , ( IDENT_3 * 2 ) , Double . IDENT_9 , Double . IDENT_9 ) ; config . METHOD_3 ( "test" , IDENT_7 . IDENT_10 , ( IDENT_3 * 2 ) , Double . IDENT_9 , Double . IDENT_9 ) ; config . METHOD_3 ( "test" , IDENT_7 . IDENT_11 , ( IDENT_3 * 2 ) , Double . IDENT_9 , Double . IDENT_9 ) ; config . METHOD_3 ( "test" , IDENT_7 . IDENT_12 , ( IDENT_3 * 2 ) , Double . IDENT_9 , Double . IDENT_9 ) ; config . METHOD_4 ( IDENT_13 . IDENT_14 , FLOAT_0 , 6 , 10 ) ; config . METHOD_4 ( IDENT_13 . IDENT_15 , FLOAT_0 , 6 , 10 ) ; config . METHOD_4 ( IDENT_13 . IDENT_16 , FLOAT_0 , 6 , 10 ) ; config . METHOD_4 ( IDENT_13 . IDENT_17 , FLOAT_0 , 6 , 10 ) ; config . METHOD_4 ( IDENT_13 . IDENT_14 , FLOAT_0 , INT_2 , INT_3 ) ; config . METHOD_4 ( IDENT_13 . IDENT_15 , FLOAT_0 , INT_2 , INT_3 ) ; config . METHOD_4 ( IDENT_13 . IDENT_16 , FLOAT_0 , INT_2 , INT_3 ) ; config . METHOD_4 ( IDENT_13 . IDENT_17 , FLOAT_0 , INT_2 , INT_3 ) ; org . IDENT_4 . IDENT_5 . io . IDENT_18 IDENT_19 ; try { IDENT_19 = new org . IDENT_4 . IDENT_5 . io . METHOD_5 ( new java . io . File ( STRING_0 ) ) ; long t = IDENT_2 ; java . util . ArrayList < org . IDENT_4 . IDENT_5 . IDENT_20 . IDENT_21 > IDENT_22 = new java . util . ArrayList < org . IDENT_4 . IDENT_5 . IDENT_20 . IDENT_21 > ( ) ; IDENT_22 . add ( new org . IDENT_4 . IDENT_5 . IDENT_20 . METHOD_6 ( t ) ) ; IDENT_22 . add ( new org . IDENT_4 . IDENT_5 . IDENT_20 . METHOD_7 ( t ) ) ; IDENT_22 . add ( new org . IDENT_4 . IDENT_5 . IDENT_20 . METHOD_6 ( t ) ) ; IDENT_22 . add ( new org . IDENT_4 . IDENT_5 . IDENT_20 . METHOD_6 ( t ) ) ; org . IDENT_4 . IDENT_5 . impl . IDENT_23 IDENT_24 = new org . IDENT_4 . IDENT_5 . impl . METHOD_8 ( config ) ; for ( t = IDENT_2 ; t < ( IDENT_2 + ( ( INT_4 * 6 ) * IDENT_3 ) ) ; t += IDENT_3 ) { java . lang . Double [ ] row = new java . lang . Double [ IDENT_22 . size ( ) ] ; int IDENT_25 = 0 ; for ( org . IDENT_4 . IDENT_5 . IDENT_20 . IDENT_21 IDENT_26 : IDENT_22 ) { row [ ( IDENT_25 ++ ) ] = IDENT_26 . METHOD_9 ( t ) ; } IDENT_24 . update ( new java . util . Date ( ( t * 1000 ) ) , ( ( java . lang . Double [ ] ) ( row ) ) ) ; } IDENT_24 . write ( IDENT_19 ) ; IDENT_19 . close ( ) ; org . IDENT_4 . IDENT_5 . impl . METHOD_8 IDENT_27 = new org . IDENT_4 . IDENT_5 . impl . METHOD_8 ( IDENT_19 ) ; "<AssertPlaceHolder>" ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } } equals ( java . lang . Object ) { return obj instanceof org . IDENT_4 . IDENT_28 . ast . IDENT_29 ; }
org . junit . Assert . assertTrue ( IDENT_24 . equals ( IDENT_27 ) ) 