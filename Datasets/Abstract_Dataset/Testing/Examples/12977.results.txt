METHOD_0 ( ) { final java . util . List < org . apache . flink . streaming . runtime . IDENT_0 . IDENT_1 > output = new java . util . ArrayList ( ) ; final org . apache . flink . streaming . api . IDENT_2 . IDENT_3 < java . lang . String , org . apache . flink . streaming . runtime . IDENT_2 . IDENT_4 . IDENT_5 < java . lang . String > > IDENT_6 = new org . apache . flink . streaming . api . IDENT_2 . METHOD_1 ( new org . apache . flink . streaming . runtime . IDENT_2 . IDENT_4 . IDENT_5 < java . lang . String > ( ) ) ; org . apache . flink . streaming . runtime . IDENT_2 . IDENT_4 . METHOD_2 ( IDENT_6 , IDENT_7 . IDENT_8 , 0 ) ; new java . lang . Thread ( STRING_0 ) { @ org . apache . flink . streaming . runtime . IDENT_2 . Override public void run ( ) { try { java . lang . Thread . sleep ( 200 ) ; } catch ( java . lang . IDENT_9 IDENT_10 ) { } IDENT_6 . METHOD_3 ( ) ; } } . start ( ) ; IDENT_6 . run ( new java . lang . Object ( ) , mock ( org . apache . flink . streaming . runtime . IDENT_11 . IDENT_12 . class ) , new org . apache . flink . streaming . util . IDENT_13 < java . lang . String > ( output ) ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { return IDENT_14 . isEmpty ( ) ; }
org . junit . Assert . assertTrue ( output . isEmpty ( ) ) 