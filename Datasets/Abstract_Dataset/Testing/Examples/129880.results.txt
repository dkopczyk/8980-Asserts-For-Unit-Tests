METHOD_0 ( ) { int IDENT_0 = METHOD_1 ( Integer . IDENT_1 , ( - 1 ) ) ; try { org . neo4j . IDENT_2 . core . utils . IDENT_3 . METHOD_2 ( IDENT_0 , METHOD_3 ( ) ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalArgumentException e ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( int , int ) { if ( IDENT_0 <= 0 ) { throw new java . lang . IllegalArgumentException ( ( STRING_0 + IDENT_0 ) ) ; } if ( IDENT_0 >= IDENT_4 ) { return 1 ; } return ( ( int ) ( java . lang . Math . METHOD_4 ( ( IDENT_4 / ( ( double ) ( IDENT_0 ) ) ) ) ) ) ; }
org . junit . Assert . assertEquals ( ( STRING_0 + IDENT_0 ) , e . getMessage ( ) ) 