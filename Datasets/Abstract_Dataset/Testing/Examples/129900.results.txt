METHOD_0 ( ) { final long source = org . neo4j . IDENT_0 . impl . IDENT_1 . id ( "a" ) ; final double IDENT_2 = FLOAT_0 ; final long [ ] nodes = new org . neo4j . IDENT_0 . impl . METHOD_1 ( org . neo4j . IDENT_0 . impl . IDENT_1 . graph ) . METHOD_2 ( source , IDENT_3 . IDENT_4 , ( s , t , IDENT_5 ) -> IDENT_5 > IDENT_2 ? Result . IDENT_6 : Result . IDENT_7 , ( s , t , IDENT_5 ) -> { final double v = org . neo4j . IDENT_0 . impl . IDENT_1 . graph . METHOD_3 ( s , t ) ; System . out . println ( ( ( ( ( s + STRING_0 ) + t ) + STRING_1 ) + ( IDENT_5 + v ) ) ) ; return IDENT_5 + v ; } ) ; System . out . println ( java . util . Arrays . toString ( nodes ) ) ; "<AssertPlaceHolder>" ; } toString ( int ) { final java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; METHOD_4 ( root , ( s , t , r ) -> { if ( ( builder . length ( ) ) > 0 ) { builder . append ( STRING_2 ) ; } builder . append ( s ) . append ( STRING_0 ) . append ( t ) ; return true ; } ) ; return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( 4 , nodes . length ) 