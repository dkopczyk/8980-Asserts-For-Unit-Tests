METHOD_0 ( ) { long [ ] IDENT_0 = new long [ INT_0 ] ; int index = 0 ; for ( long i = 0L ; i < INT_1 ; i ++ ) { IDENT_0 [ ( index ++ ) ] = 0L ; IDENT_0 [ ( index ++ ) ] = i + 1L ; IDENT_0 [ ( index ++ ) ] = i + INT_2 ; IDENT_0 [ ( index ++ ) ] = - 1L ; } for ( long i = 1L ; i < INT_3 ; i ++ ) { IDENT_0 [ ( index ++ ) ] = i ; IDENT_0 [ ( index ++ ) ] = i + 1L ; IDENT_0 [ ( index ++ ) ] = i + INT_4 ; IDENT_0 [ ( index ++ ) ] = - 1L ; } IDENT_0 [ ( index ++ ) ] = INT_3 ; IDENT_0 [ ( index ++ ) ] = 1L ; IDENT_0 [ ( index ++ ) ] = INT_5 ; IDENT_0 [ index ] = - 1L ; long [ ] expected = new long [ INT_0 ] ; index = 0 ; expected [ ( index ++ ) ] = 1L ; expected [ ( index ++ ) ] = 0L ; expected [ ( index ++ ) ] = INT_2 ; expected [ ( index ++ ) ] = - 1L ; expected [ ( index ++ ) ] = 1L ; expected [ ( index ++ ) ] = INT_3 ; expected [ ( index ++ ) ] = INT_5 ; expected [ ( index ++ ) ] = - 1L ; for ( long i = 1L ; i < INT_1 ; i ++ ) { expected [ ( index ++ ) ] = i + 1L ; expected [ ( index ++ ) ] = 0L ; expected [ ( index ++ ) ] = i + INT_2 ; expected [ ( index ++ ) ] = - 1L ; expected [ ( index ++ ) ] = i + 1L ; expected [ ( index ++ ) ] = i ; expected [ ( index ++ ) ] = i + INT_4 ; expected [ ( index ++ ) ] = - 1L ; } for ( long i = INT_1 ; i < INT_3 ; i ++ ) { expected [ ( index ++ ) ] = i + 1L ; expected [ ( index ++ ) ] = i ; expected [ ( index ++ ) ] = i + INT_4 ; expected [ ( index ++ ) ] = - 1L ; } org . neo4j . IDENT_1 . core . IDENT_2 . loader . IDENT_3 . METHOD_1 ( IDENT_0 , new long [ INT_0 ] , new int [ INT_0 ] , INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( long [ ] , long [ ] , int [ ] , int ) { org . neo4j . IDENT_1 . core . IDENT_2 . loader . IDENT_3 . METHOD_1 ( data , IDENT_4 , IDENT_5 , length , 0 ) ; }
org . junit . Assert . assertArrayEquals ( expected , IDENT_0 ) 