METHOD_0 ( ) { METHOD_1 ( ) ; org . neo4j . examples . IDENT_0 . Person a ; org . neo4j . examples . IDENT_0 . Person e ; try ( org . neo4j . IDENT_1 . IDENT_2 tx = IDENT_3 . METHOD_2 ( ) ) { a = IDENT_4 . METHOD_3 ( "a" ) ; org . neo4j . examples . IDENT_0 . Person b = IDENT_4 . METHOD_3 ( "b" ) ; org . neo4j . examples . IDENT_0 . Person c = IDENT_4 . METHOD_3 ( STRING_0 ) ; org . neo4j . examples . IDENT_0 . Person d = IDENT_4 . METHOD_3 ( STRING_1 ) ; e = IDENT_4 . METHOD_3 ( STRING_2 ) ; a . METHOD_4 ( b ) ; a . METHOD_4 ( c ) ; a . METHOD_4 ( d ) ; e . METHOD_4 ( b ) ; e . METHOD_4 ( c ) ; e . METHOD_4 ( d ) ; tx . METHOD_5 ( ) ; } try ( org . neo4j . IDENT_1 . IDENT_2 tx = IDENT_3 . METHOD_2 ( ) ) { org . neo4j . examples . IDENT_0 . Person IDENT_5 = METHOD_6 ( a . METHOD_7 ( 1 ) . iterator ( ) ) ; "<AssertPlaceHolder>" ; } } METHOD_7 ( int ) { java . util . HashSet < org . neo4j . examples . IDENT_0 . Person > IDENT_6 = new java . util . HashSet ( ) ; METHOD_8 ( METHOD_9 ( ) , IDENT_6 ) ; java . util . HashSet < org . neo4j . examples . IDENT_0 . Person > IDENT_7 = new java . util . HashSet ( ) ; METHOD_8 ( METHOD_10 ( ) , IDENT_7 ) ; IDENT_7 . METHOD_11 ( IDENT_6 ) ; java . util . ArrayList < org . neo4j . examples . IDENT_0 . Person . IDENT_8 > IDENT_9 = new java . util . ArrayList ( ) ; for ( org . neo4j . examples . IDENT_0 . Person IDENT_10 : IDENT_7 ) { long IDENT_11 = METHOD_12 ( IDENT_10 ) ; IDENT_9 . add ( new org . neo4j . examples . IDENT_0 . Person . METHOD_13 ( IDENT_10 , IDENT_11 ) ) ; } IDENT_9 . METHOD_14 ( new org . neo4j . examples . IDENT_0 . Person . METHOD_15 ( ) ) ; METHOD_16 ( IDENT_9 , IDENT_12 ) ; return METHOD_17 ( IDENT_9 ) ; }
org . junit . Assert . assertThat ( IDENT_5 , org . hamcrest . CoreMatchers . equalTo ( e ) ) 