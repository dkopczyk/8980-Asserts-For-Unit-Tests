METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; org . neo4j . IDENT_2 . runtime . IDENT_3 IDENT_4 = METHOD_2 ( java . util . UUID . METHOD_3 ( ) . toString ( ) ) ; METHOD_4 ( METHOD_5 ( IDENT_1 ) ) . when ( METHOD_2 ) . METHOD_6 ( any ( ) ) ; METHOD_7 ( ) ; IDENT_5 . METHOD_8 ( METHOD_2 ) ; java . util . concurrent . IDENT_6 . METHOD_9 ( ( ) -> IDENT_5 . METHOD_10 ( METHOD_2 , org . neo4j . IDENT_2 . testing . IDENT_7 . METHOD_11 ( ) ) ) ; org . neo4j . function . IDENT_8 . METHOD_12 ( ( ) -> ( IDENT_1 . get ( ) ) > 0 , INT_0 , org . neo4j . IDENT_2 . runtime . IDENT_9 ) ; "<AssertPlaceHolder>" ; IDENT_10 . METHOD_13 ( ) ; IDENT_11 . METHOD_14 ( ) ; } get ( ) { org . neo4j . kernel . IDENT_12 . IDENT_13 . IDENT_14 IDENT_15 = IDENT_16 . METHOD_15 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_17 IDENT_18 = IDENT_15 . IDENT_18 ; long IDENT_19 = IDENT_15 . IDENT_20 ; if ( ! ( IDENT_15 . METHOD_16 ( ) ) ) { monitor . METHOD_17 ( ( IDENT_18 != null ? IDENT_18 . METHOD_18 ( ) : null ) ) ; return METHOD_19 ( IDENT_21 . IDENT_22 , IDENT_19 ) ; } if ( IDENT_18 != null ) { monitor . METHOD_20 ( IDENT_18 . METHOD_18 ( ) , IDENT_19 ) ; return METHOD_19 ( IDENT_18 . METHOD_18 ( ) , IDENT_19 ) ; } else { if ( ( IDENT_15 . IDENT_23 ) != ( IDENT_24 ) ) { long IDENT_25 = java . lang . Math . max ( org . neo4j . kernel . IDENT_12 . IDENT_24 , IDENT_15 . IDENT_23 ) ; throw new org . neo4j . kernel . impl . store . METHOD_21 ( ( ( ( STRING_0 + IDENT_25 ) + STRING_1 ) + ( IDENT_15 . IDENT_26 ) ) ) ; } monitor . METHOD_22 ( ) ; return METHOD_19 ( org . neo4j . kernel . impl . transaction . log . IDENT_21 . start ( 0 ) , IDENT_19 ) ; } }
org . junit . Assert . assertEquals ( 1 , IDENT_1 . get ( ) ) 