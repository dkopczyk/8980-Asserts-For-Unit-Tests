METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( "a" , "b" , STRING_0 3 ) ; org . neo4j . IDENT_1 . impl . IDENT_2 . input . IDENT_3 . Configuration config = org . neo4j . IDENT_1 . impl . IDENT_2 . input . IDENT_3 . Configuration . IDENT_4 ; java . io . File IDENT_5 = METHOD_1 ( true , config , IDENT_0 , org . neo4j . IDENT_6 . IDENT_7 . IDENT_8 ) ; java . util . List < org . neo4j . IDENT_6 . IDENT_7 . IDENT_9 > IDENT_10 = line 1 of IDENT_11 java . util . Arrays . asList ( org . neo4j . IDENT_6 . IDENT_7 . METHOD_2 ( "a" , "b" , STRING_1 , STRING_0 5 ) , org . neo4j . IDENT_6 . IDENT_7 . METHOD_2 ( STRING_0 3 , STRING_2 , STRING_1 , STRING_3 ) , org . neo4j . IDENT_6 . IDENT_7 . METHOD_2 ( "b" , STRING_0 3 , STRING_0 2 , STRING_0 6 ) , org . neo4j . IDENT_6 . IDENT_7 . METHOD_2 ( STRING_0 3 , "a" , STRING_0 2 , STRING_0 8 ) , org . neo4j . IDENT_6 . IDENT_7 . METHOD_2 ( STRING_0 1 , "a" , STRING_0 2 , STRING_0 7 ) ) ; java . io . File IDENT_12 = METHOD_3 ( true , config , IDENT_10 . iterator ( ) , METHOD_4 ( 0 , 2 ) , true ) ; java . io . File IDENT_13 = METHOD_3 ( false , config , IDENT_10 . iterator ( ) , METHOD_4 ( 2 , 5 ) , true ) ; org . neo4j . IDENT_6 . IDENT_7 . METHOD_5 ( STRING_0 , IDENT_14 . METHOD_6 ( ) , STRING_4 , METHOD_1 . getAbsolutePath ( ) , STRING_0 0 , "2" , STRING_0 4 , STRING_5 , STRING_6 , ( ( ( IDENT_12 . getAbsolutePath ( ) ) + ( org . neo4j . IDENT_6 . IDENT_15 . IDENT_16 ) ) + ( IDENT_13 . getAbsolutePath ( ) ) ) ) ; "<AssertPlaceHolder>" ; METHOD_7 ( IDENT_10 ) ; } METHOD_8 ( ) { return IDENT_14 . METHOD_9 ( ) . file ( org . neo4j . IDENT_6 . IDENT_17 ) ; }
org . junit . Assert . assertFalse ( METHOD_8 ( ) . exists ( ) ) 