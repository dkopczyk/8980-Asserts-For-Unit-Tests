METHOD_0 ( ) { org . neo4j . kernel . configuration . IDENT_0 . IDENT_1 validator = new org . neo4j . kernel . configuration . IDENT_0 . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_2 = org . neo4j . kernel . configuration . IDENT_0 . IDENT_3 . params ( STRING_0 , STRING_1 , STRING_2 , STRING_1 , STRING_3 , STRING_1 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_4 = validator . validate ( IDENT_2 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { try ( org . neo4j . IDENT_6 . IDENT_7 < org . neo4j . index . internal . IDENT_8 . IDENT_9 < org . neo4j . kernel . impl . index . IDENT_10 . IDENT_11 , org . neo4j . kernel . impl . index . IDENT_10 . IDENT_12 > , java . io . IOException > IDENT_6 = index . METHOD_2 ( new org . neo4j . kernel . impl . index . IDENT_10 . METHOD_3 ( 0 , 0 ) , new org . neo4j . kernel . impl . index . IDENT_10 . METHOD_3 ( Integer . MAX_VALUE , Long . MAX_VALUE ) ) ) { return ! ( IDENT_6 . next ( ) ) ; } }
org . junit . Assert . assertTrue ( IDENT_4 . isEmpty ( ) ) 