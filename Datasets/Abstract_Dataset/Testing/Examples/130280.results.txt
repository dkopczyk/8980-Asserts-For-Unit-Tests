METHOD_0 ( ) { org . neo4j . kernel . impl . api . index . IDENT_0 IDENT_1 = mock ( org . neo4j . kernel . impl . api . index . IDENT_0 . class ) ; org . neo4j . kernel . impl . api . index . IDENT_2 < java . lang . Exception > IDENT_3 = mock ( org . neo4j . kernel . impl . api . index . IDENT_2 . class ) ; java . lang . RuntimeException IDENT_4 = new java . lang . RuntimeException ( ) ; METHOD_1 ( IDENT_4 ) . when ( IDENT_3 ) . run ( ) ; when ( IDENT_1 . METHOD_2 ( any ( ) , any ( ) , any ( ) , any ( ) , METHOD_3 ( ) ) ) . thenReturn ( IDENT_3 ) ; java . util . concurrent . IDENT_5 executor = org . neo4j . kernel . impl . api . index . IDENT_6 . METHOD_4 ( ) ; when ( executor . METHOD_5 ( METHOD_6 ( ) , any ( ) ) ) . thenReturn ( true ) ; org . neo4j . kernel . impl . api . index . IDENT_7 IDENT_8 = new org . neo4j . kernel . impl . api . index . METHOD_7 ( IDENT_1 , executor , org . neo4j . logging . IDENT_9 . getInstance ( ) , mock ( org . neo4j . kernel . impl . api . IDENT_10 . class ) ) ; org . neo4j . kernel . impl . api . index . IDENT_2 < org . neo4j . kernel . api . exceptions . index . IDENT_11 > IDENT_12 = IDENT_8 . METHOD_8 ( ) ; verify ( executor , METHOD_9 ( ) ) . METHOD_10 ( ) ; try { IDENT_12 . run ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . Throwable t ) { "<AssertPlaceHolder>" ; } verify ( executor , METHOD_9 ( ) ) . METHOD_11 ( ) ; verify ( executor , METHOD_9 ( ) ) . METHOD_5 ( METHOD_6 ( ) , any ( ) ) ; IDENT_8 . close ( false ) ; verify ( executor ) . METHOD_11 ( ) ; verify ( executor ) . METHOD_5 ( METHOD_6 ( ) , any ( ) ) ; } fail ( java . lang . Throwable ) { for ( org . neo4j . kernel . impl . api . index . IDENT_13 . IDENT_14 IDENT_15 : IDENT_16 ) { fail ( IDENT_15 , IDENT_17 ) ; } }
org . junit . Assert . assertSame ( IDENT_4 , t ) 