METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( any ( org . neo4j . kernel . impl . api . index . IDENT_1 . class ) ) ) . thenReturn ( IDENT_2 ) ; org . neo4j . kernel . impl . api . index . IDENT_3 IDENT_4 = METHOD_2 ( IDENT_5 , IDENT_0 , org . neo4j . kernel . impl . api . index . IDENT_6 . METHOD_3 ( ) ) ; IDENT_7 . start ( ) ; IDENT_4 . METHOD_4 ( org . neo4j . kernel . impl . api . index . IDENT_6 . METHOD_5 ( 0 , IDENT_8 , IDENT_9 , org . neo4j . kernel . impl . api . index . IDENT_10 . IDENT_11 ) ) ; org . neo4j . kernel . impl . api . index . IDENT_12 proxy = IDENT_4 . METHOD_6 ( 0 ) ; verify ( IDENT_5 , METHOD_7 ( INT_0 ) ) . close ( true ) ; try ( org . neo4j . kernel . api . index . IDENT_13 IDENT_2 = proxy . METHOD_1 ( IDENT_1 . IDENT_14 ) ) { IDENT_2 . process ( add ( 10 , "foo" ) ) ; } "<AssertPlaceHolder>" ; org . mockito . IDENT_15 order = METHOD_8 ( IDENT_5 , IDENT_0 , IDENT_2 ) ; order . verify ( IDENT_5 ) . create ( ) ; order . verify ( IDENT_5 ) . close ( true ) ; order . verify ( IDENT_0 ) . METHOD_1 ( IDENT_1 . IDENT_14 ) ; order . verify ( IDENT_2 ) . process ( add ( 10 , "foo" ) ) ; order . verify ( IDENT_2 ) . close ( ) ; } METHOD_9 ( ) { return org . neo4j . internal . kernel . api . IDENT_16 . IDENT_17 ; }
org . junit . Assert . assertEquals ( IDENT_16 . IDENT_17 , proxy . METHOD_9 ( ) ) 