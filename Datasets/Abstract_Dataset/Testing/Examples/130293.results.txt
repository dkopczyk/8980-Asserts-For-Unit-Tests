METHOD_0 ( ) { int key = 10 ; org . neo4j . kernel . impl . store . record . IDENT_0 IDENT_1 = org . neo4j . kernel . impl . api . index . IDENT_2 . METHOD_1 ( property ( key , IDENT_3 ) ) ; org . neo4j . kernel . impl . store . record . IDENT_0 IDENT_4 = org . neo4j . kernel . impl . api . index . IDENT_2 . METHOD_1 ( property ( key , IDENT_5 ) ) ; org . neo4j . kernel . impl . api . index . IDENT_6 update = convert ( IDENT_7 , IDENT_7 , METHOD_2 ( IDENT_1 , IDENT_4 ) ) ; org . neo4j . kernel . impl . api . index . IDENT_6 expected = org . neo4j . kernel . impl . api . index . IDENT_6 . METHOD_3 ( 0 , false ) . METHOD_4 ( key , IDENT_3 , IDENT_5 ) . build ( ) ; "<AssertPlaceHolder>" ; } build ( ) { if ( ( IDENT_8 ) == null ) { METHOD_5 ( IDENT_9 , STRING_0 ) ; IDENT_8 = ( IDENT_10 ) -> new org . neo4j . kernel . impl . store . id . METHOD_6 ( IDENT_9 , IDENT_11 ) ; } if ( ( IDENT_11 ) == null ) { IDENT_11 = new org . neo4j . kernel . impl . store . id . configuration . METHOD_7 ( ) ; } if ( ( IDENT_12 ) == null ) { IDENT_12 = METHOD_8 ( ) ; } return new org . neo4j . IDENT_13 . factory . module . id . METHOD_9 ( IDENT_14 , IDENT_8 , IDENT_11 , IDENT_15 , IDENT_12 ) ; }
org . junit . Assert . assertEquals ( expected , update ) 