METHOD_0 ( ) { try ( org . neo4j . kernel . impl . core . IDENT_0 IDENT_1 = new org . neo4j . kernel . impl . core . METHOD_1 ( 10 ) ) { java . io . File IDENT_2 = new java . io . File ( STRING_0 ) ; IDENT_1 . METHOD_2 ( IDENT_2 ) ; IDENT_1 . METHOD_3 ( IDENT_2 . METHOD_4 ( ) ) ; org . neo4j . kernel . impl . store . id . IDENT_3 IDENT_4 = new org . neo4j . kernel . impl . core . METHOD_5 ( 10 ) . get ( IDENT_5 . IDENT_6 ) ; try ( org . neo4j . kernel . impl . core . METHOD_1 . IDENT_7 channel = ( ( org . neo4j . kernel . impl . core . METHOD_1 . IDENT_7 ) ( IDENT_1 . METHOD_6 ( IDENT_2 , IDENT_8 . IDENT_9 ) ) ) ) { for ( int i = 0 ; i < 16 ; i ++ ) { METHOD_7 ( channel , IDENT_4 . METHOD_8 ( ) , i ) ; } } try ( org . neo4j . kernel . impl . core . METHOD_1 . IDENT_7 channel = ( ( org . neo4j . kernel . impl . core . METHOD_1 . IDENT_7 ) ( IDENT_1 . METHOD_6 ( IDENT_2 , IDENT_8 . IDENT_9 ) ) ) ) { IDENT_4 = new org . neo4j . kernel . impl . core . METHOD_5 ( 10 ) . get ( IDENT_5 . IDENT_6 ) ; for ( int i = 0 ; i < 16 ; i ++ ) { "<AssertPlaceHolder>" ; } } } } METHOD_9 ( org . neo4j . kernel . impl . core . METHOD_1 . IDENT_7 , long ) { java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_10 ( org . neo4j . kernel . impl . core . IDENT_10 ) ; channel . position ( ( id * ( IDENT_10 ) ) ) ; channel . read ( buffer ) ; buffer . METHOD_11 ( ) ; buffer . METHOD_12 ( ) ; return buffer . get ( ) ; }
org . junit . Assert . assertEquals ( i , METHOD_9 ( channel , IDENT_4 . METHOD_8 ( ) ) ) 