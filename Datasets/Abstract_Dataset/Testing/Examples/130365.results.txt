METHOD_0 ( ) { int IDENT_0 = 0 ; int IDENT_1 = 50 ; int IDENT_2 = 50 ; int IDENT_3 = INT_0 ; org . eclipse . collections . api . map . IDENT_4 . IDENT_5 map = new org . eclipse . collections . impl . map . mutable . IDENT_4 . METHOD_1 ( ( ( 50 * 50 ) * INT_0 ) ) ; java . lang . String [ ] values = METHOD_2 ( IDENT_3 ) ; for ( int IDENT_6 = 0 ; IDENT_6 < IDENT_1 ; IDENT_6 ++ ) { for ( int IDENT_7 = 0 ; IDENT_7 < IDENT_2 ; IDENT_7 ++ ) { for ( int IDENT_8 = 0 ; IDENT_8 < IDENT_3 ; IDENT_8 ++ ) { java . lang . String object = values [ IDENT_8 ] ; long IDENT_9 = org . neo4j . kernel . impl . IDENT_10 . IDENT_11 . METHOD_3 ( IDENT_6 , METHOD_4 ( IDENT_7 , object ) ) ; long IDENT_12 = METHOD_5 ( IDENT_6 , IDENT_7 , IDENT_8 ) ; final boolean IDENT_13 = map . containsKey ( IDENT_9 ) ; final long IDENT_14 = map . get ( IDENT_9 ) ; map . put ( IDENT_9 , IDENT_12 ) ; if ( IDENT_13 ) { System . out . METHOD_6 ( STRING_0 , IDENT_9 , METHOD_7 ( IDENT_12 ) , METHOD_7 ( IDENT_14 ) ) ; IDENT_0 ++ ; if ( IDENT_0 > 100 ) { org . junit . Assert . fail ( STRING_1 ) ; } } } } } "<AssertPlaceHolder>" ; } is ( long ) { return value == ( IDENT_15 ) ; }
org . junit . Assert . assertThat ( IDENT_0 , org . hamcrest . Matchers . is ( 0 ) ) 