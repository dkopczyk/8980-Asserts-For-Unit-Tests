METHOD_0 ( ) { long IDENT_0 = 10 ; org . neo4j . values . IDENT_1 . IDENT_2 value = org . neo4j . values . IDENT_1 . IDENT_3 . of ( STRING_0 ) ; int IDENT_4 = 0 ; org . neo4j . internal . kernel . api . helpers . IDENT_5 IDENT_6 = new org . neo4j . internal . kernel . api . helpers . METHOD_1 ( ) . METHOD_2 ( IDENT_0 , new long [ ] { } , METHOD_3 ( INT_0 , org . neo4j . values . IDENT_1 . IDENT_3 . of ( INT_1 ) , IDENT_4 , value ) ) ; org . neo4j . kernel . impl . IDENT_7 . IDENT_8 IDENT_9 = new org . neo4j . kernel . impl . IDENT_7 . METHOD_4 ( IDENT_6 , new org . neo4j . internal . kernel . api . helpers . METHOD_5 ( ) , new org . neo4j . internal . kernel . api . helpers . METHOD_6 ( ) ) ; org . neo4j . values . IDENT_1 . IDENT_2 IDENT_10 = IDENT_9 . METHOD_7 ( IDENT_0 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( long , int ) { org . neo4j . kernel . impl . store . record . IDENT_11 IDENT_12 = IDENT_13 . METHOD_8 ( ) ; if ( IDENT_13 . METHOD_9 ( IDENT_0 , IDENT_12 , org . neo4j . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 ) . METHOD_10 ( ) ) { org . neo4j . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_18 . IDENT_19 IDENT_20 = new org . neo4j . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_18 . METHOD_11 ( IDENT_4 ) ; try { if ( METHOD_12 ( IDENT_12 . METHOD_13 ( ) , IDENT_20 ) ) { return IDENT_20 . IDENT_21 ; } } catch ( org . neo4j . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_18 . IDENT_22 e ) { } } return org . neo4j . values . IDENT_1 . IDENT_3 . IDENT_23 ; }
org . junit . Assert . assertEquals ( value , IDENT_10 ) 