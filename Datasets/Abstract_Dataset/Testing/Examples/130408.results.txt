METHOD_0 ( ) { org . neo4j . kernel . impl . IDENT_0 . IDENT_1 IDENT_0 = new org . neo4j . kernel . impl . IDENT_0 . METHOD_1 ( ) ; IDENT_0 . init ( ) ; java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_2 ( ) ; java . lang . IDENT_4 job = ( ) -> { java . util . concurrent . IDENT_5 . IDENT_6 . METHOD_3 ( TimeUnit . IDENT_7 . METHOD_4 ( 10 ) ) ; IDENT_3 . set ( true ) ; } ; org . neo4j . IDENT_0 . IDENT_8 IDENT_9 = IDENT_0 . METHOD_5 ( IDENT_10 . IDENT_11 , job , 10 , TimeUnit . IDENT_7 ) ; IDENT_9 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { org . neo4j . kernel . IDENT_12 . IDENT_13 . IDENT_14 IDENT_15 = IDENT_16 . METHOD_7 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_17 IDENT_18 = IDENT_15 . IDENT_18 ; long IDENT_19 = IDENT_15 . IDENT_20 ; if ( ! ( IDENT_15 . METHOD_8 ( ) ) ) { monitor . METHOD_9 ( ( IDENT_18 != null ? IDENT_18 . METHOD_10 ( ) : null ) ) ; return METHOD_11 ( IDENT_21 . IDENT_22 , IDENT_19 ) ; } if ( IDENT_18 != null ) { monitor . METHOD_12 ( IDENT_18 . METHOD_10 ( ) , IDENT_19 ) ; return METHOD_11 ( IDENT_18 . METHOD_10 ( ) , IDENT_19 ) ; } else { if ( ( IDENT_15 . IDENT_23 ) != ( IDENT_24 ) ) { long IDENT_25 = java . lang . Math . max ( org . neo4j . kernel . IDENT_12 . IDENT_24 , IDENT_15 . IDENT_23 ) ; throw new org . neo4j . kernel . impl . store . METHOD_13 ( ( ( ( STRING_0 + IDENT_25 ) + STRING_1 ) + ( IDENT_15 . IDENT_26 ) ) ) ; } monitor . METHOD_14 ( ) ; return METHOD_11 ( org . neo4j . kernel . impl . transaction . log . IDENT_21 . start ( 0 ) , IDENT_19 ) ; } }
org . junit . Assert . assertTrue ( IDENT_3 . get ( ) ) 