METHOD_0 ( ) { long IDENT_0 = store . METHOD_1 ( ) ; long IDENT_1 = store . METHOD_1 ( ) ; java . util . Collection < org . neo4j . IDENT_2 . api . schema . IDENT_3 > rules = java . util . Arrays . asList ( METHOD_2 ( IDENT_0 , IDENT_1 , org . neo4j . kernel . impl . store . IDENT_4 , 2 , 5 , 3 ) , METHOD_3 ( IDENT_1 , IDENT_0 , 2 , 5 , 3 ) , METHOD_4 ( store . METHOD_1 ( ) , org . neo4j . kernel . impl . store . IDENT_4 , 0 , 5 ) , METHOD_4 ( store . METHOD_1 ( ) , org . neo4j . kernel . impl . store . IDENT_4 , 1 , 6 , 10 , INT_0 ) , METHOD_5 ( store . METHOD_1 ( ) , 5 , 1 ) ) ; for ( org . neo4j . IDENT_2 . api . schema . IDENT_3 rule : rules ) { METHOD_6 ( rule ) ; } java . util . Collection < org . neo4j . IDENT_2 . api . schema . IDENT_3 > IDENT_5 = METHOD_7 ( store . METHOD_8 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( ) { return METHOD_8 ( org . neo4j . function . IDENT_6 . METHOD_9 ( ) , org . neo4j . IDENT_2 . api . schema . IDENT_3 . class , false ) ; }
org . junit . Assert . assertEquals ( rules , IDENT_5 ) 