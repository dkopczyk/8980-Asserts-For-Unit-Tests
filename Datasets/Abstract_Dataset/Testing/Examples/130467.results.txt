METHOD_0 ( ) { org . neo4j . kernel . impl . store . IDENT_0 . IDENT_1 IDENT_2 = new org . neo4j . kernel . impl . store . IDENT_0 . METHOD_1 ( org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . provider ( ) , org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . provider ( org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . IDENT_4 . METHOD_2 ( INT_0 , 1 ) , org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . IDENT_4 . METHOD_2 ( INT_1 , 2 ) , org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . IDENT_4 . METHOD_2 ( INT_2 , 3 ) ) , 4 , 4 ) ; java . util . List < java . lang . Integer > data = org . neo4j . kernel . impl . store . IDENT_0 . IDENT_3 . METHOD_3 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . neo4j . kernel . impl . store . IDENT_0 . IDENT_5 ) { java . util . List < java . lang . Integer > result = new java . util . ArrayList ( ) ; org . neo4j . kernel . impl . store . IDENT_0 . IDENT_6 key = new org . neo4j . kernel . impl . store . IDENT_0 . METHOD_4 ( 4 ) ; org . neo4j . kernel . impl . store . IDENT_0 . METHOD_4 value = new org . neo4j . kernel . impl . store . IDENT_0 . METHOD_4 ( 4 ) ; while ( IDENT_7 . METHOD_5 ( key , value ) ) { result . add ( key . METHOD_6 ( 0 ) ) ; result . add ( value . METHOD_6 ( 0 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( asList ( INT_0 , 1 , INT_1 , 2 , INT_2 , 3 ) , data ) 