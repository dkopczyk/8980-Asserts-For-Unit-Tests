METHOD_0 ( ) { final org . neo4j . kernel . impl . api . IDENT_0 IDENT_1 = METHOD_1 ( true ) ; final org . neo4j . kernel . impl . store . record . IDENT_2 IDENT_3 = new org . neo4j . kernel . impl . store . record . METHOD_2 ( INT_0 ) ; final org . neo4j . kernel . impl . store . record . METHOD_2 IDENT_4 = new org . neo4j . kernel . impl . store . record . METHOD_2 ( 12 ) ; IDENT_4 . METHOD_3 ( INT_1 ) ; final org . neo4j . kernel . impl . transaction . command . IDENT_5 command = new org . neo4j . kernel . impl . transaction . command . IDENT_5 . METHOD_4 ( IDENT_3 , IDENT_4 ) ; boolean result = apply ( IDENT_1 , command :: IDENT_6 , IDENT_7 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_8 , times ( 1 ) ) . METHOD_5 ( 12 ) ; verify ( IDENT_8 , times ( 1 ) ) . METHOD_6 ( IDENT_4 ) ; } apply ( org . neo4j . kernel . api . IDENT_9 . Context , java . lang . Object [ ] , org . neo4j . kernel . api . IDENT_10 ) { try { java . lang . Thread . sleep ( 50 ) ; } catch ( java . lang . IDENT_11 e ) { throw new org . neo4j . internal . kernel . api . exceptions . METHOD_7 ( Status . IDENT_12 . IDENT_13 , e , STRING_0 ) ; } return org . neo4j . collection . IDENT_14 . empty ( ) ; }
org . junit . Assert . assertFalse ( result ) 