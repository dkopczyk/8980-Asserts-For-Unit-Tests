METHOD_0 ( ) { final org . neo4j . kernel . impl . api . IDENT_0 IDENT_1 = METHOD_1 ( ) ; METHOD_2 ( new org . neo4j . internal . kernel . api . exceptions . schema . METHOD_3 ( "" ) ) . when ( IDENT_2 ) . METHOD_4 ( METHOD_5 ( ) ) ; final org . neo4j . kernel . impl . store . record . IDENT_3 record = org . neo4j . kernel . impl . store . record . IDENT_3 . METHOD_6 ( INT_0 , true ) ; final java . util . Collection < org . neo4j . kernel . impl . store . record . IDENT_3 > IDENT_4 = singletonList ( record ) ; final org . neo4j . IDENT_5 . api . schema . IDENT_6 rule = org . neo4j . kernel . impl . transaction . command . IDENT_7 . METHOD_7 ( 0 , 1 , 2 , new org . neo4j . internal . kernel . api . schema . METHOD_8 ( STRING_0 , STRING_1 ) , INT_1 ) ; final org . neo4j . kernel . impl . transaction . command . IDENT_8 . IDENT_9 command = new org . neo4j . kernel . impl . transaction . command . IDENT_8 . METHOD_9 ( java . util . Collections . emptyList ( ) , IDENT_4 , rule ) ; try { apply ( IDENT_1 , command :: IDENT_10 , IDENT_11 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } METHOD_10 ( ) { return IDENT_12 ; }
org . junit . Assert . assertTrue ( ( ( e . METHOD_10 ( ) ) instanceof org . neo4j . internal . kernel . api . exceptions . schema . METHOD_3 ) ) 