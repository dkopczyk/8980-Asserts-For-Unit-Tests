METHOD_0 ( ) { final org . neo4j . kernel . impl . api . IDENT_0 IDENT_1 = METHOD_1 ( true ) ; final org . neo4j . kernel . impl . store . record . IDENT_2 record = org . neo4j . kernel . impl . store . record . IDENT_2 . METHOD_2 ( INT_0 , true ) ; record . METHOD_3 ( ) ; final java . util . Collection < org . neo4j . kernel . impl . store . record . IDENT_2 > IDENT_3 = singletonList ( record ) ; final org . neo4j . kernel . impl . store . record . IDENT_4 rule = org . neo4j . kernel . impl . transaction . command . IDENT_5 . METHOD_4 ( 0L , 1 , 2 , INT_1 ) ; final org . neo4j . kernel . impl . transaction . command . IDENT_6 . IDENT_7 command = new org . neo4j . kernel . impl . transaction . command . IDENT_6 . METHOD_5 ( java . util . Collections . emptyList ( ) , IDENT_3 , rule ) ; boolean result = apply ( IDENT_1 , command :: IDENT_8 , IDENT_9 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_10 , times ( 1 ) ) . METHOD_6 ( record . getId ( ) ) ; verify ( IDENT_10 , times ( 1 ) ) . METHOD_7 ( record ) ; verify ( IDENT_11 , times ( 1 ) ) . METHOD_8 ( IDENT_12 ) ; verify ( IDENT_13 , times ( 1 ) ) . METHOD_9 ( rule ) ; } apply ( org . neo4j . kernel . api . IDENT_14 . Context , java . lang . Object [ ] , org . neo4j . kernel . api . IDENT_15 ) { try { java . lang . Thread . sleep ( 50 ) ; } catch ( java . lang . IDENT_16 e ) { throw new org . neo4j . internal . kernel . api . exceptions . METHOD_10 ( Status . IDENT_17 . IDENT_18 , e , STRING_0 ) ; } return org . neo4j . collection . IDENT_19 . empty ( ) ; }
org . junit . Assert . assertFalse ( result ) 