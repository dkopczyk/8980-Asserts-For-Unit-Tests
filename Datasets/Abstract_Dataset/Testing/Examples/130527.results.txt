METHOD_0 ( ) { final java . io . File IDENT_0 = new java . io . File ( directory . directory ( ) , STRING_0 ) ; org . neo4j . io . fs . IDENT_1 IDENT_2 = IDENT_3 . get ( ) . METHOD_1 ( IDENT_0 , IDENT_4 . IDENT_5 ) ; org . neo4j . kernel . impl . transaction . log . IDENT_6 IDENT_7 = new org . neo4j . kernel . impl . transaction . log . METHOD_2 ( IDENT_2 , 1 , ( ( byte ) ( - 1 ) ) ) ; org . neo4j . kernel . impl . transaction . log . IDENT_8 channel = new org . neo4j . kernel . impl . transaction . log . METHOD_3 ( IDENT_7 ) ; int length = INT_0 ; byte [ ] bytes = METHOD_4 ( length ) ; channel . put ( bytes , length ) ; channel . close ( ) ; byte [ ] IDENT_9 = new byte [ length ] ; try ( java . io . InputStream in = new java . io . METHOD_5 ( IDENT_0 ) ) { in . read ( IDENT_9 ) ; } "<AssertPlaceHolder>" ; } read ( java . nio . ByteBuffer ) { if ( ( IDENT_10 ) == ( IDENT_11 ) ) { return IDENT_12 ? - 1 : 0 ; } buffer . position ( IDENT_10 ) ; int IDENT_13 = IDENT_10 ; int IDENT_14 = buffer . METHOD_6 ( ) ; buffer . METHOD_6 ( java . lang . Math . min ( ( ( buffer . position ( ) ) + ( ( IDENT_15 . METHOD_6 ( ) ) - ( IDENT_15 . position ( ) ) ) ) , IDENT_11 ) ) ; IDENT_15 . put ( buffer ) ; IDENT_10 = buffer . position ( ) ; buffer . METHOD_6 ( IDENT_14 ) ; return ( IDENT_10 ) - IDENT_13 ; }
org . junit . Assert . assertArrayEquals ( bytes , IDENT_9 ) 