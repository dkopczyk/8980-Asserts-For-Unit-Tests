METHOD_0 ( ) { org . neo4j . kernel . impl . transaction . log . IDENT_0 IDENT_1 = new org . neo4j . kernel . impl . transaction . METHOD_1 ( ) ; org . neo4j . kernel . impl . transaction . log . IDENT_2 . IDENT_3 IDENT_4 = org . neo4j . kernel . impl . transaction . log . IDENT_2 . IDENT_5 . builder ( directory . METHOD_2 ( ) , IDENT_6 . get ( ) ) . METHOD_3 ( IDENT_1 ) . METHOD_4 ( org . neo4j . io . IDENT_7 . METHOD_5 ( 1 ) ) . METHOD_6 ( new org . neo4j . kernel . impl . transaction . METHOD_7 ( ) ) . build ( ) ; IDENT_8 . add ( IDENT_4 ) ; final java . util . concurrent . atomic . IDENT_9 end = new java . util . concurrent . atomic . METHOD_8 ( ) ; org . neo4j . kernel . impl . transaction . log . IDENT_10 . IDENT_11 IDENT_12 = new org . neo4j . kernel . impl . transaction . log . IDENT_10 . METHOD_9 ( end , 100 ) ; org . neo4j . kernel . impl . transaction . log . IDENT_13 IDENT_14 = new org . neo4j . kernel . impl . transaction . METHOD_7 ( ) ; org . neo4j . kernel . impl . transaction . log . IDENT_15 IDENT_16 = new org . neo4j . kernel . impl . transaction . log . METHOD_10 ( ) ; IDENT_12 . METHOD_11 ( IDENT_4 . METHOD_12 ( ) ) ; org . neo4j . kernel . internal . IDENT_17 IDENT_18 = new org . neo4j . kernel . internal . METHOD_13 ( mock ( org . neo4j . kernel . impl . core . IDENT_19 . class ) , org . neo4j . logging . IDENT_20 . getInstance ( ) ) ; org . neo4j . kernel . impl . transaction . log . IDENT_21 . IDENT_22 IDENT_21 = new org . neo4j . kernel . impl . transaction . log . IDENT_21 . METHOD_14 ( IDENT_12 , IDENT_4 , IDENT_18 ) ; final org . neo4j . kernel . impl . transaction . log . IDENT_23 IDENT_24 = IDENT_8 . add ( new org . neo4j . kernel . impl . transaction . log . METHOD_15 ( IDENT_4 , IDENT_21 , IDENT_16 , IDENT_14 , IDENT_25 , IDENT_18 ) ) ; org . neo4j . test . IDENT_26 IDENT_27 = new org . neo4j . test . METHOD_16 ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_27 . METHOD_17 ( ( ) -> { while ( ! ( end . get ( ) ) ) { try { IDENT_24 . append ( new org . neo4j . kernel . impl . api . METHOD_18 ( METHOD_19 ( 1000 ) ) , org . neo4j . kernel . impl . transaction . log . IDENT_28 ) ; } catch ( e ) { org . neo4j . kernel . impl . transaction . log . e . printStackTrace ( System . out ) ; end . set ( true ) ; fail ( org . neo4j . kernel . impl . transaction . log . e . getMessage ( ) ) ; } } } ) ; } IDENT_27 . METHOD_17 ( METHOD_20 ( 10 , org . neo4j . kernel . impl . transaction . log . IDENT_29 , end ) ) ; IDENT_27 . METHOD_21 ( ) ; "<AssertPlaceHolder>" ; } METHOD_22 ( ) { return IDENT_30 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_12 . METHOD_22 ( ) ) > 0 ) ) 