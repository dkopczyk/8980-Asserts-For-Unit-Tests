METHOD_0 ( ) { java . lang . String description = STRING_0 ; org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 IDENT_2 = new org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_3 . METHOD_1 ( true , description ) ; final java . util . concurrent . atomic . IDENT_4 < java . lang . String > IDENT_5 = new java . util . concurrent . atomic . METHOD_2 ( ) ; IDENT_2 . METHOD_3 ( INT_0 , IDENT_5 :: set ) ; "<AssertPlaceHolder>" ; } get ( ) { org . neo4j . kernel . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = IDENT_10 . METHOD_4 ( ) ; org . neo4j . kernel . impl . transaction . log . entry . IDENT_11 IDENT_12 = IDENT_9 . IDENT_12 ; long IDENT_13 = IDENT_9 . IDENT_14 ; if ( ! ( IDENT_9 . METHOD_5 ( ) ) ) { monitor . METHOD_6 ( ( IDENT_12 != null ? IDENT_12 . METHOD_7 ( ) : null ) ) ; return METHOD_8 ( IDENT_15 . IDENT_16 , IDENT_13 ) ; } if ( IDENT_12 != null ) { monitor . METHOD_9 ( IDENT_12 . METHOD_7 ( ) , IDENT_13 ) ; return METHOD_8 ( IDENT_12 . METHOD_7 ( ) , IDENT_13 ) ; } else { if ( ( IDENT_9 . IDENT_17 ) != ( IDENT_18 ) ) { long IDENT_19 = java . lang . Math . max ( org . neo4j . kernel . IDENT_6 . IDENT_18 , IDENT_9 . IDENT_17 ) ; throw new org . neo4j . kernel . impl . store . METHOD_10 ( ( ( ( STRING_1 + IDENT_19 ) + STRING_2 ) + ( IDENT_9 . IDENT_20 ) ) ) ; } monitor . METHOD_11 ( ) ; return METHOD_8 ( org . neo4j . kernel . impl . transaction . log . IDENT_15 . start ( 0 ) , IDENT_13 ) ; } }
org . junit . Assert . assertEquals ( description , IDENT_5 . get ( ) ) 