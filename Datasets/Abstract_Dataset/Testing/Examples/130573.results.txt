METHOD_0 ( ) { org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 . IDENT_2 value = org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 . parse ( STRING_0 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { java . lang . String [ ] tokens = IDENT_3 . split ( " " ) ; if ( ( tokens . length ) == 0 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_1 + IDENT_3 ) + STRING_2 ) ) ; } final java . lang . String IDENT_4 = tokens [ 0 ] ; if ( ( tokens . length ) == 1 ) { switch ( IDENT_4 ) { case STRING_3 : case STRING_0 : return org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 ; case STRING_4 : case STRING_5 : return org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 ; default : throw new java . lang . IllegalArgumentException ( ( ( ( STRING_1 + IDENT_3 ) + STRING_6 ) + STRING_7 ) ) ; } } else { long IDENT_7 = METHOD_1 ( IDENT_4 ) ; java . lang . String IDENT_8 = tokens [ 1 ] ; return new org . neo4j . kernel . impl . transaction . log . IDENT_0 . IDENT_1 . METHOD_2 ( IDENT_8 , IDENT_7 ) ; } }
org . junit . Assert . assertSame ( IDENT_1 . METHOD_2 . IDENT_5 , value ) 