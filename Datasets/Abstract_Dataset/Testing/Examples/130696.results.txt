METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > values = new java . util . HashMap ( ) ; values . put ( "foo" , "bar" ) ; org . neo4j . server . rest . IDENT_0 . IDENT_1 properties = new org . neo4j . server . rest . IDENT_0 . METHOD_1 ( org . neo4j . server . rest . IDENT_0 . IDENT_2 . container ( values ) ) ; java . util . Map < java . lang . String , java . lang . Object > map = org . neo4j . server . rest . IDENT_0 . IDENT_3 . serialize ( properties ) ; "<AssertPlaceHolder>" ; } serialize ( org . neo4j . server . rest . IDENT_0 . IDENT_4 ) { if ( IDENT_0 instanceof org . neo4j . server . rest . IDENT_0 . IDENT_5 ) { return org . neo4j . server . rest . IDENT_0 . IDENT_3 . serialize ( ( ( org . neo4j . server . rest . IDENT_0 . IDENT_5 ) ( IDENT_0 ) ) ) ; } else if ( IDENT_0 instanceof org . neo4j . server . rest . IDENT_0 . IDENT_6 ) { return org . neo4j . server . rest . IDENT_0 . IDENT_3 . serialize ( ( ( org . neo4j . server . rest . IDENT_0 . IDENT_6 ) ( IDENT_0 ) ) ) ; } else if ( IDENT_0 instanceof org . neo4j . server . rest . IDENT_0 . IDENT_7 ) { return org . neo4j . server . rest . IDENT_0 . IDENT_3 . serialize ( ( ( org . neo4j . server . rest . IDENT_0 . IDENT_7 ) ( IDENT_0 ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( IDENT_0 . getClass ( ) . toString ( ) ) ; } }
org . junit . Assert . assertEquals ( values , map ) 