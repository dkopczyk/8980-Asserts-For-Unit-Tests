METHOD_0 ( ) { org . apache . ibatis . IDENT_0 . IDENT_1 parser = new org . apache . ibatis . IDENT_0 . METHOD_1 ( STRING_0 0 , STRING_1 , new org . apache . ibatis . IDENT_0 . IDENT_2 . METHOD_2 ( new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( STRING_2 , STRING_3 ) ; put ( STRING_0 , STRING_4 ) ; put ( STRING_5 , STRING_6 ) ; put ( "" , "" ) ; } } ) ) ; java . lang . StringBuilder input = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { input . append ( STRING_7 ) ; } java . lang . StringBuilder expected = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { expected . append ( STRING_8 ) ; } "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( STRING_9 ) ; builder . append ( name ) ; for ( Map . Entry < java . lang . Object , java . lang . Object > entry : attributes . entrySet ( ) ) { builder . append ( " " ) ; builder . append ( entry . getKey ( ) ) ; builder . append ( STRING_10 ) ; builder . append ( entry . getValue ( ) ) ; builder . append ( STRING_11 ) ; } java . util . List < org . apache . ibatis . IDENT_0 . IDENT_3 > IDENT_4 = METHOD_3 ( ) ; if ( ! ( IDENT_4 . isEmpty ( ) ) ) { builder . append ( STRING_12 ) ; for ( org . apache . ibatis . IDENT_0 . IDENT_3 node : IDENT_4 ) { builder . append ( node . toString ( ) ) ; } builder . append ( STRING_13 ) ; builder . append ( name ) ; builder . append ( STRING_14 ) ; } else if ( ( body ) != null ) { builder . append ( STRING_14 ) ; builder . append ( body ) ; builder . append ( STRING_13 ) ; builder . append ( name ) ; builder . append ( STRING_14 ) ; } else { builder . append ( STRING_15 ) ; } builder . append ( "\n" ) ; return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( expected . toString ( ) , parser . parse ( input . toString ( ) ) ) 