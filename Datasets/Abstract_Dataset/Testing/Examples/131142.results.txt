METHOD_0 ( ) { final io . netty . buffer . IDENT_0 buffer = io . netty . buffer . IDENT_1 . METHOD_1 ( STRING_0 , IDENT_2 . IDENT_3 ) ; try { final java . util . concurrent . atomic . IDENT_4 IDENT_5 = new java . util . concurrent . atomic . METHOD_2 ( INT_0 ) ; final java . util . concurrent . atomic . IDENT_6 < java . lang . Throwable > IDENT_7 = new java . util . concurrent . atomic . IDENT_6 < java . lang . Throwable > ( ) ; java . util . List < java . lang . Thread > IDENT_8 = new java . util . ArrayList < java . lang . Thread > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . Thread IDENT_9 = new java . lang . Thread ( new java . lang . METHOD_3 ( ) { @ io . netty . buffer . Override public void run ( ) { try { while ( ( ( IDENT_7 . get ( ) ) == null ) && ( ( IDENT_5 . METHOD_4 ( ) ) > 0 ) ) { "<AssertPlaceHolder>" ; } } catch ( java . lang . Throwable IDENT_10 ) { IDENT_7 . METHOD_5 ( null , IDENT_10 ) ; } } } ) ; IDENT_8 . add ( IDENT_9 ) ; } for ( java . lang . Thread IDENT_9 : IDENT_8 ) { IDENT_9 . start ( ) ; } for ( java . lang . Thread IDENT_9 : IDENT_8 ) { IDENT_9 . join ( ) ; } java . lang . Throwable error = IDENT_7 . get ( ) ; if ( error != null ) { throw error ; } } finally { buffer . METHOD_6 ( ) ; } } METHOD_7 ( io . netty . buffer . IDENT_0 , java . nio . IDENT_11 . IDENT_12 ) { return io . netty . buffer . IDENT_13 . METHOD_7 ( buf , buf . METHOD_8 ( ) , buf . METHOD_9 ( ) , IDENT_11 ) ; }
org . junit . Assert . assertTrue ( io . netty . buffer . IDENT_13 . METHOD_7 ( buffer , IDENT_2 . IDENT_3 ) ) 