METHOD_0 ( ) { final java . util . concurrent . IDENT_0 < io . netty . channel . IDENT_1 > IDENT_2 = new java . util . concurrent . IDENT_0 < io . netty . channel . IDENT_1 > ( ) ; final java . util . concurrent . IDENT_3 IDENT_4 = new java . util . concurrent . METHOD_1 ( 3 ) ; io . netty . channel . IDENT_5 handler = new io . netty . channel . METHOD_2 ( ) { @ io . netty . handler . flow . Override public void METHOD_3 ( io . netty . channel . IDENT_6 ctx ) throws io . netty . handler . flow . Exception { IDENT_2 . METHOD_4 ( ctx . channel ( ) , 1L , io . netty . handler . flow . IDENT_7 ) ; ctx . METHOD_5 ( ) ; } @ io . netty . handler . flow . Override public void METHOD_6 ( io . netty . channel . IDENT_6 ctx , java . lang . Object msg ) { io . netty . util . IDENT_8 . METHOD_7 ( msg ) ; IDENT_4 . METHOD_8 ( ) ; } } ; io . netty . channel . IDENT_1 server = io . netty . handler . flow . IDENT_9 . METHOD_9 ( false , handler ) ; io . netty . channel . IDENT_1 client = io . netty . handler . flow . IDENT_9 . METHOD_10 ( server . METHOD_11 ( ) ) ; try { io . netty . channel . IDENT_1 IDENT_10 = IDENT_2 . METHOD_4 ( null , 1L , io . netty . handler . flow . IDENT_7 ) ; client . METHOD_12 ( io . netty . handler . flow . IDENT_9 . METHOD_13 ( ) ) . METHOD_14 ( ) ; IDENT_10 . read ( ) ; "<AssertPlaceHolder>" ; } finally { client . close ( ) ; server . close ( ) ; } } METHOD_15 ( long , java . util . concurrent . TimeUnit ) { if ( java . lang . Thread . METHOD_16 ( ) ) { throw new java . lang . METHOD_17 ( ) ; } return true ; }
org . junit . Assert . assertTrue ( IDENT_4 . METHOD_15 ( 1L , io . netty . handler . flow . IDENT_7 ) ) 