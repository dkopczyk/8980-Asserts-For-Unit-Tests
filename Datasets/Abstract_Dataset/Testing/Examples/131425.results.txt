METHOD_0 ( ) { byte [ ] value = new byte [ ( io . netty . buffer . IDENT_0 . IDENT_1 ) * 2 ] ; for ( int i = 0 ; i < ( ( ( buffer . METHOD_1 ( ) ) - ( io . netty . buffer . IDENT_0 . IDENT_1 ) ) + 1 ) ; i += io . netty . buffer . IDENT_0 . IDENT_1 ) { random . METHOD_2 ( value ) ; buffer . METHOD_3 ( i , value , random . METHOD_4 ( io . netty . buffer . IDENT_0 . IDENT_1 ) , io . netty . buffer . IDENT_0 . IDENT_1 ) ; } random . METHOD_5 ( IDENT_2 ) ; byte [ ] IDENT_3 = new byte [ ( io . netty . buffer . IDENT_0 . IDENT_1 ) * 2 ] ; for ( int i = 0 ; i < ( ( ( buffer . METHOD_1 ( ) ) - ( io . netty . buffer . IDENT_0 . IDENT_1 ) ) + 1 ) ; i += io . netty . buffer . IDENT_0 . IDENT_1 ) { random . METHOD_2 ( IDENT_3 ) ; int IDENT_4 = random . METHOD_4 ( io . netty . buffer . IDENT_0 . IDENT_1 ) ; buffer . getBytes ( i , value , IDENT_4 , io . netty . buffer . IDENT_0 . IDENT_1 ) ; for ( int j = IDENT_4 ; j < ( IDENT_4 + ( io . netty . buffer . IDENT_0 . IDENT_1 ) ) ; j ++ ) { "<AssertPlaceHolder>" ; } } } getBytes ( int , io . netty . buffer . IDENT_5 , int , int ) { throw new java . lang . METHOD_6 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_3 [ j ] , value [ j ] ) 