METHOD_0 ( ) { org . IDENT_0 . geometry . IDENT_1 [ ] IDENT_2 = new org . IDENT_0 . geometry . IDENT_1 [ ] { org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_0 , FLOAT_1 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_1 , FLOAT_1 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_1 , FLOAT_2 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_0 , FLOAT_2 ) } ; org . IDENT_0 . geometry . IDENT_4 input = org . IDENT_0 . geometry . IDENT_3 . METHOD_2 ( IDENT_2 ) ; org . IDENT_0 . geometry . IDENT_1 [ ] IDENT_5 = new org . IDENT_0 . geometry . IDENT_1 [ ] { org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_3 , FLOAT_4 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_5 , FLOAT_4 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_5 , FLOAT_6 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_3 , FLOAT_6 ) } ; org . IDENT_0 . geometry . IDENT_6 IDENT_7 = org . IDENT_0 . geometry . IDENT_3 . METHOD_3 ( IDENT_5 ) ; input . METHOD_4 ( IDENT_7 ) ; org . IDENT_0 . geometry . IDENT_1 [ ] IDENT_8 = new org . IDENT_0 . geometry . IDENT_1 [ ] { org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_7 , FLOAT_8 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_7 , FLOAT_9 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_10 , FLOAT_9 ) , org . IDENT_0 . geometry . IDENT_3 . METHOD_1 ( FLOAT_10 , FLOAT_8 ) } ; org . IDENT_0 . geometry . IDENT_4 IDENT_9 = org . IDENT_0 . geometry . IDENT_3 . METHOD_2 ( IDENT_8 ) ; org . IDENT_0 . geometry . IDENT_10 output = input . METHOD_5 ( METHOD_5 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . IDENT_0 . geometry . IDENT_11 ) { org . IDENT_0 . geometry . IDENT_10 IDENT_12 = super . METHOD_5 ( geom ) ; if ( IDENT_12 instanceof org . IDENT_0 . geometry . IDENT_13 ) { org . IDENT_0 . geometry . IDENT_14 collection = ( ( org . IDENT_0 . geometry . IDENT_14 ) ( IDENT_12 ) ) ; org . IDENT_0 . geometry . Iterator < ? extends org . IDENT_0 . geometry . IDENT_10 > IDENT_15 = collection . iterator ( ) ; while ( IDENT_15 . hasNext ( ) ) { org . IDENT_0 . geometry . IDENT_10 g = IDENT_15 . next ( ) ; if ( g . isEmpty ( ) ) { IDENT_15 . remove ( ) ; } } if ( ( collection . METHOD_6 ( ) ) == 0 ) { return null ; } else if ( ( collection . METHOD_6 ( ) ) == 1 ) { org . IDENT_0 . geometry . IDENT_16 g = ( ( org . IDENT_0 . geometry . IDENT_16 ) ( collection . METHOD_7 ( 0 ) ) ) ; g . METHOD_8 ( collection . METHOD_9 ( ) ) ; return g ; } return collection ; } return null ; }
org . junit . Assert . assertNull ( output ) 