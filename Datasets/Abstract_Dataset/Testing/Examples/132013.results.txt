METHOD_0 ( ) { net . sourceforge . IDENT_0 . util . IDENT_1 . logger . info ( STRING_0 ) ; java . io . File IDENT_2 = new java . io . File ( net . sourceforge . IDENT_0 . util . IDENT_1 . IDENT_3 , STRING_1 ) ; int expResult = 1 ; java . util . List < java . awt . image . IDENT_4 > result = net . sourceforge . IDENT_0 . util . IDENT_5 . METHOD_1 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . io . File ) { java . io . File IDENT_2 = net . sourceforge . IDENT_0 . util . IDENT_5 . METHOD_2 ( IDENT_6 ) ; java . util . List < java . awt . image . IDENT_4 > IDENT_7 = new java . util . ArrayList < java . awt . image . IDENT_4 > ( ) ; java . lang . String IDENT_8 = net . sourceforge . IDENT_0 . util . IDENT_5 . METHOD_3 ( IDENT_2 ) ; java . util . Iterator < javax . IDENT_9 . IDENT_10 > IDENT_11 = javax . IDENT_9 . IDENT_12 . METHOD_4 ( IDENT_8 ) ; if ( ! ( IDENT_11 . hasNext ( ) ) ) { throw new java . lang . RuntimeException ( net . sourceforge . IDENT_0 . util . IDENT_5 . IDENT_13 ) ; } javax . IDENT_9 . IDENT_10 reader = IDENT_11 . next ( ) ; try ( javax . IDENT_9 . stream . IDENT_14 IDENT_15 = javax . IDENT_9 . IDENT_12 . METHOD_5 ( IDENT_2 ) ) { reader . METHOD_6 ( IDENT_15 ) ; int IDENT_16 = reader . METHOD_7 ( true ) ; for ( int i = 0 ; i < IDENT_16 ; i ++ ) { java . awt . image . IDENT_4 IDENT_17 = reader . read ( i ) ; IDENT_7 . add ( IDENT_17 ) ; } return IDENT_7 ; } finally { if ( reader != null ) { reader . METHOD_8 ( ) ; } if ( ( ( ( ( IDENT_2 != null ) && ( IDENT_2 . exists ( ) ) ) && ( IDENT_2 != IDENT_6 ) ) && ( IDENT_2 . getName ( ) . startsWith ( STRING_2 ) ) ) && ( IDENT_2 . getName ( ) . METHOD_9 ( net . sourceforge . IDENT_0 . util . IDENT_5 . IDENT_18 ) ) ) { IDENT_2 . delete ( ) ; } } }
org . junit . Assert . assertEquals ( expResult , result . size ( ) ) 