METHOD_0 ( ) { java . util . Optional < IDENT_0 . Result > IDENT_1 = java . util . Optional . of ( result ) ; java . util . List args = new java . util . ArrayList ( ) ; args . add ( new IDENT_2 . template . METHOD_1 ( STRING_0 ) ) ; args . add ( new IDENT_2 . template . METHOD_1 ( STRING_1 ) ) ; org . mockito . Mockito . when ( messages . get ( org . mockito . Matchers . eq ( STRING_0 ) , org . mockito . Matchers . eq ( context ) , org . mockito . Matchers . eq ( IDENT_1 ) , org . mockito . Matchers . any ( java . lang . Object . class ) ) ) . thenReturn ( java . util . Optional . of ( STRING_2 ) ) ; IDENT_2 . template . IDENT_3 IDENT_4 = IDENT_5 . exec ( args ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_6 , org . mockito . Mockito . METHOD_2 ( ) ) . METHOD_3 ( org . mockito . Matchers . METHOD_4 ( ) ) ; } exec ( java . util . List ) { if ( ( args . size ( ) ) == 0 ) { throw new IDENT_2 . template . METHOD_5 ( STRING_3 ) ; } if ( ( IDENT_7 ) && ( ( ( args . size ( ) ) == 1 ) || ( ! ( ( ( IDENT_2 . template . IDENT_8 ) ( args . get ( 1 ) ) ) . METHOD_6 ( ) ) ) ) ) { java . lang . String IDENT_9 = ( ( IDENT_2 . template . METHOD_1 ) ( args . get ( 0 ) ) ) . METHOD_7 ( ) ; return new IDENT_2 . template . METHOD_1 ( ( ( IDENT_0 . template . IDENT_10 . IDENT_11 ) + IDENT_9 ) ) ; } else { java . util . List IDENT_12 = new java . util . ArrayList ( ) ; IDENT_12 . add ( IDENT_0 . IDENT_13 . class . getName ( ) ) ; IDENT_12 . add ( STRING_4 ) ; IDENT_12 . add ( STRING_5 ) ; IDENT_12 . addAll ( args ) ; return IDENT_14 . METHOD_8 ( IDENT_12 ) ; } }
org . junit . Assert . assertThat ( ( ( IDENT_2 . template . METHOD_1 ) ( IDENT_4 ) ) . METHOD_7 ( ) , org . hamcrest . CoreMatchers . equalTo ( STRING_2 ) ) 