METHOD_0 ( ) { final java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . String > ( 0 ) ; final java . lang . String data = IDENT_1 . utils . IDENT_2 . encode ( IDENT_0 ) ; final java . util . Map < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap < java . lang . String , java . lang . String > ( 1 ) ; IDENT_1 . utils . IDENT_2 . decode ( IDENT_3 , data ) ; "<AssertPlaceHolder>" ; } decode ( java . util . Map , java . lang . String ) { java . lang . String [ ] IDENT_4 = data . split ( STRING_0 ) ; for ( java . lang . String IDENT_5 : IDENT_4 ) { java . lang . String [ ] IDENT_6 = IDENT_5 . split ( STRING_1 , 2 ) ; if ( ( IDENT_6 . length ) == 2 ) { map . put ( java . net . IDENT_7 . decode ( IDENT_6 [ 0 ] , STRING_2 ) , java . net . IDENT_7 . decode ( IDENT_6 [ 1 ] , STRING_2 ) ) ; } } }
org . junit . Assert . assertEquals ( 0 , IDENT_3 . size ( ) ) 