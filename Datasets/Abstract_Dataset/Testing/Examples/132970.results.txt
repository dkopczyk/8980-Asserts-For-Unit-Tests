METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 , IDENT_5 . IDENT_6 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . create ( params ) ; double IDENT_8 = IDENT_7 . compute ( new int [ 0 ] , new int [ 0 ] , 0 , 0 ) ; "<AssertPlaceHolder>" ; } compute ( org . IDENT_0 . IDENT_1 . model . IDENT_9 , int [ ] , int [ ] , boolean ) { if ( ( IDENT_10 . length ) != ( c . METHOD_1 ( ) ) ) { throw new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 . METHOD_2 ( ( ( ( STRING_0 + ( c . METHOD_1 ( ) ) ) + STRING_1 ) + ( IDENT_10 . length ) ) ) ; } METHOD_3 ( c , IDENT_12 ) ; int [ ] IDENT_13 = c . METHOD_4 ( METHOD_5 ( c , IDENT_10 ) ) ; double [ ] IDENT_14 ; if ( IDENT_12 ) { IDENT_14 = org . IDENT_0 . IDENT_1 . util . IDENT_15 . METHOD_6 ( c . METHOD_7 ( ) , IDENT_13 ) ; } else { IDENT_14 = org . IDENT_0 . IDENT_1 . util . IDENT_15 . METHOD_8 ( IDENT_13 ) ; } int [ ] IDENT_16 = METHOD_9 ( c , c . METHOD_10 ( IDENT_14 ) ) ; if ( IDENT_12 ) { METHOD_11 ( c , IDENT_10 , IDENT_16 ) ; METHOD_12 ( c , IDENT_13 , IDENT_16 ) ; METHOD_13 ( c ) ; METHOD_14 ( c ) ; if ( METHOD_15 ( c ) ) { METHOD_16 ( c ) ; METHOD_17 ( c ) ; } } java . util . Arrays . METHOD_18 ( IDENT_17 , 0 ) ; if ( ( IDENT_16 . length ) > 0 ) { org . IDENT_0 . IDENT_1 . util . IDENT_15 . METHOD_19 ( IDENT_17 , IDENT_16 , 1 ) ; } }
org . junit . Assert . assertEquals ( 0.0 , IDENT_8 , 0 ) 