METHOD_0 ( ) { java . lang . reflect . Method m = org . IDENT_0 . IDENT_1 . test . IDENT_2 . METHOD_1 ( STRING_0 , STRING_1 , new java . lang . Class < ? > [ ] { char [ ] . class , int . class , int . class , char [ ] . class } ) ; org . IDENT_0 . IDENT_1 . model . IDENT_3 method = new org . IDENT_0 . IDENT_1 . model . METHOD_2 ( m , null ) ; java . lang . String IDENT_4 = STRING_2 ; java . util . regex . IDENT_5 matcher = java . util . regex . IDENT_6 . METHOD_3 ( method . METHOD_4 ( ) ) . matcher ( IDENT_4 ) ; boolean match = matcher . find ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( org . IDENT_0 . IDENT_1 . model . IDENT_7 ) ; builder . append ( org . IDENT_0 . IDENT_1 . model . IDENT_8 ) ; java . lang . String IDENT_9 = java . lang . reflect . IDENT_10 . toString ( IDENT_11 ) ; if ( ( IDENT_9 . length ( ) ) > 0 ) { builder . append ( IDENT_9 ) . append ( org . IDENT_0 . IDENT_1 . model . IDENT_12 ) ; } if ( ( ! ( METHOD_5 ( ) ) ) && ( ( IDENT_13 ) != null ) ) { java . lang . String IDENT_14 = org . IDENT_0 . IDENT_1 . model . IDENT_15 . METHOD_6 ( IDENT_13 . getName ( ) ) ; builder . append ( IDENT_14 ) ; builder . append ( org . IDENT_0 . IDENT_1 . model . IDENT_12 ) ; } if ( METHOD_5 ( ) ) { builder . append ( org . IDENT_0 . IDENT_1 . model . IDENT_16 ) ; builder . append ( org . IDENT_0 . IDENT_1 . util . IDENT_17 . METHOD_7 ( IDENT_18 ) ) ; } else { builder . append ( IDENT_18 ) ; } return builder . toString ( ) ; }
org . junit . Assert . assertTrue ( match ) 