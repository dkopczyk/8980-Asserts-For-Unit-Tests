METHOD_0 ( ) { final int IDENT_0 = INT_0 ; final int IDENT_1 = 7 ; org . IDENT_2 . IDENT_3 . network . IDENT_4 network = METHOD_1 ( ) ; org . IDENT_2 . IDENT_3 . serialize . IDENT_5 config = new org . IDENT_2 . IDENT_3 . serialize . METHOD_2 ( STRING_0 , org . IDENT_2 . IDENT_3 . serialize . METHOD_2 . IDENT_6 ) ; org . IDENT_2 . IDENT_3 . network . IDENT_7 api = org . IDENT_2 . IDENT_3 . network . IDENT_8 . get ( config ) ; api . store ( network ) ; org . IDENT_2 . IDENT_3 . network . IDENT_4 IDENT_9 = api . load ( ) ; "<AssertPlaceHolder>" ; METHOD_3 ( network , IDENT_9 ) ; int IDENT_10 = ( ( int ) ( IDENT_9 . METHOD_4 ( ) . get ( IDENT_11 . IDENT_12 ) ) ) ; IDENT_9 . METHOD_5 ( ) . METHOD_6 ( new IDENT_13 . IDENT_14 < org . IDENT_2 . IDENT_3 . network . IDENT_15 > ( ) { @ org . IDENT_2 . IDENT_3 . network . Override public void METHOD_7 ( ) { } @ org . IDENT_2 . IDENT_3 . network . Override public void METHOD_8 ( java . lang . Throwable e ) { e . printStackTrace ( ) ; } @ org . IDENT_2 . IDENT_3 . network . Override public void METHOD_9 ( org . IDENT_2 . IDENT_3 . network . IDENT_15 IDENT_16 ) { IDENT_17 . apply ( IDENT_16 , IDENT_10 ) ; } } ) ; org . IDENT_2 . IDENT_3 . network . IDENT_18 . IDENT_19 pub = IDENT_9 . METHOD_10 ( ) ; IDENT_9 . start ( ) ; int IDENT_20 = 0 ; for ( ; IDENT_20 < IDENT_0 ; IDENT_20 ++ ) { for ( double j = 0 ; j < IDENT_1 ; j ++ ) { pub . METHOD_9 ( ( "" + j ) ) ; } IDENT_9 . METHOD_11 ( ) ; if ( IDENT_20 == INT_1 ) { break ; } } pub . METHOD_12 ( ) ; try { org . IDENT_2 . IDENT_3 . network . IDENT_21 IDENT_22 = IDENT_9 . METHOD_13 ( STRING_1 ) ; IDENT_22 . METHOD_13 ( "1" ) . METHOD_14 ( ) . join ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } } get ( java . lang . Object ) { return o . equals ( STRING_2 ) ? IDENT_23 : IDENT_24 ; }
org . junit . Assert . assertEquals ( IDENT_9 , network ) 