METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . util . IDENT_2 m = new org . IDENT_0 . IDENT_1 . util . METHOD_1 ( INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { int y ; int IDENT_3 ; if ( ( IDENT_4 ) >= ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) ) { int IDENT_6 ; final int [ ] IDENT_7 = this . IDENT_7 ; final int [ ] IDENT_8 = this . IDENT_8 ; for ( IDENT_6 = 0 ; IDENT_6 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) ; IDENT_6 ++ ) { y = ( ( IDENT_7 [ IDENT_6 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ ( IDENT_6 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ IDENT_6 ] = ( ( IDENT_7 [ ( IDENT_6 + ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_8 [ ( y & 1 ) ] ) ; } for ( ; IDENT_6 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ; IDENT_6 ++ ) { y = ( ( IDENT_7 [ IDENT_6 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ ( IDENT_6 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ IDENT_6 ] = ( ( IDENT_7 [ ( IDENT_6 + ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) ) ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_8 [ ( y & 1 ) ] ) ; } y = ( ( IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ 0 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ] = ( ( IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) - 1 ) ] ) OP_0 ( y > > > 1 ) ) OP_0 ( IDENT_8 [ ( y & 1 ) ] ) ; IDENT_4 = 0 ; } y = IDENT_7 [ ( ( IDENT_4 ) ++ ) ] ; y OP_1 y > > > INT_1 ; y OP_1 ( y << 7 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_12 ) ; y OP_1 ( y << 15 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_13 ) ; y OP_1 y > > > INT_2 ; if ( ( IDENT_4 ) >= ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) ) { int IDENT_6 ; final int [ ] IDENT_7 = this . IDENT_7 ; final int [ ] IDENT_8 = this . IDENT_8 ; for ( IDENT_6 = 0 ; IDENT_6 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) ; IDENT_6 ++ ) { IDENT_3 = ( ( IDENT_7 [ IDENT_6 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ ( IDENT_6 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ IDENT_6 ] = ( ( IDENT_7 [ ( IDENT_6 + ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) ) ] ) OP_0 ( IDENT_3 > > > 1 ) ) OP_0 ( IDENT_8 [ ( IDENT_3 & 1 ) ] ) ; } for ( ; IDENT_6 < ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ; IDENT_6 ++ ) { IDENT_3 = ( ( IDENT_7 [ IDENT_6 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ ( IDENT_6 + 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ IDENT_6 ] = ( ( IDENT_7 [ ( IDENT_6 + ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) - ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) ) ) ] ) OP_0 ( IDENT_3 > > > 1 ) ) OP_0 ( IDENT_8 [ ( IDENT_3 & 1 ) ] ) ; } IDENT_3 = ( ( IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_10 ) ) | ( ( IDENT_7 [ 0 ] ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_11 ) ) ; IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_5 ) - 1 ) ] = ( ( IDENT_7 [ ( ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_9 ) - 1 ) ] ) OP_0 ( IDENT_3 > > > 1 ) ) OP_0 ( IDENT_8 [ ( IDENT_3 & 1 ) ] ) ; IDENT_4 = 0 ; } IDENT_3 = IDENT_7 [ ( ( IDENT_4 ) ++ ) ] ; IDENT_3 OP_1 IDENT_3 > > > INT_1 ; IDENT_3 OP_1 ( IDENT_3 << 7 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_12 ) ; IDENT_3 OP_1 ( IDENT_3 << 15 ) & ( org . IDENT_0 . IDENT_1 . util . METHOD_1 . IDENT_13 ) ; IDENT_3 OP_1 IDENT_3 > > > INT_2 ; return ( ( ( long ) ( y ) ) << INT_3 ) + ( ( long ) ( IDENT_3 ) ) ; }
org . junit . Assert . assertTrue ( ( ( m . METHOD_2 ( ) ) > 0 ) ) 