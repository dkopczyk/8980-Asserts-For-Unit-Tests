METHOD_0 ( ) { java . lang . Object result = org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( new org . nuxeo . ecm . core . api . impl . METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . Object ) { java . lang . Object result = object ; if ( result instanceof IDENT_4 . IDENT_5 . api . IDENT_1 . IDENT_6 ) { result = org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_1 ( ( ( IDENT_4 . IDENT_5 . api . IDENT_1 . IDENT_6 ) ( result ) ) ) ; } if ( result instanceof org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) { result = ( ( org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) ( result ) ) . METHOD_3 ( ) ; } else if ( result instanceof java . util . List < ? > ) { java . util . List < ? > l = ( ( java . util . List < ? > ) ( result ) ) ; if ( ( ( l . size ( ) ) > 0 ) && ( ! ( ( result instanceof org . nuxeo . ecm . core . api . IDENT_8 ) || ( result instanceof org . nuxeo . ecm . IDENT_0 . core . util . IDENT_9 ) ) ) ) { java . lang . Object first = l . get ( 0 ) ; if ( first instanceof org . nuxeo . ecm . core . api . IDENT_10 ) { result = l . stream ( ) . map ( org . nuxeo . ecm . core . api . IDENT_10 . class :: IDENT_11 ) . collect ( java . util . stream . IDENT_12 . METHOD_4 ( METHOD_2 :: new ) ) ; } else if ( first instanceof org . nuxeo . ecm . core . api . IDENT_13 ) { result = l . stream ( ) . map ( org . nuxeo . ecm . core . api . IDENT_13 . class :: IDENT_11 ) . collect ( java . util . stream . IDENT_12 . METHOD_4 ( IDENT_9 :: new ) ) ; } else if ( first instanceof org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) { result = l . stream ( ) . map ( org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class :: IDENT_11 ) . map ( org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 :: METHOD_3 ) . collect ( java . util . stream . IDENT_12 . METHOD_4 ( METHOD_2 :: new ) ) ; } } } else if ( result instanceof java . util . Map < ? , ? > ) { @ org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( STRING_0 ) final java . util . Map < java . lang . String , java . lang . Object > map = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( result ) ) ; result = org . nuxeo . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 ( map ) ; } return result ; }
org . junit . Assert . assertTrue ( ( result instanceof org . nuxeo . ecm . core . api . impl . METHOD_2 ) ) 