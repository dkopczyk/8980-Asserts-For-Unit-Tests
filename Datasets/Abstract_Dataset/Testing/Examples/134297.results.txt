METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_1 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_1 . put ( STRING_2 , STRING_3 3 ) ; java . util . Map < java . lang . String , org . IDENT_2 . IDENT_3 . core . component . network . IDENT_4 . IDENT_5 > IDENT_6 = new java . util . HashMap < java . lang . String , org . IDENT_2 . IDENT_3 . core . component . network . IDENT_4 . IDENT_5 > ( ) ; IDENT_6 . put ( STRING_3 1 , new org . IDENT_2 . IDENT_3 . core . component . network . IDENT_4 . METHOD_1 ( STRING_3 , STRING_3 1 , STRING_4 , STRING_3 7 , STRING_5 , IDENT_1 ) ) ; org . IDENT_7 . IDENT_8 msg = new org . IDENT_7 . METHOD_2 ( ) ; java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; org . IDENT_7 . IDENT_9 . IDENT_10 IDENT_11 = msg . METHOD_3 ( out ) ; byte [ ] bytes ; java . io . ByteArrayInputStream in ; org . IDENT_7 . IDENT_12 . IDENT_13 IDENT_14 = null ; try { IDENT_11 . METHOD_4 ( 6 ) ; IDENT_11 . write ( STRING_3 4 ) ; IDENT_11 . write ( STRING_6 ) ; IDENT_11 . write ( STRING_7 ) ; IDENT_11 . write ( STRING_3 5 ) ; IDENT_11 . write ( STRING_8 ) ; IDENT_11 . write ( STRING_4 ) ; IDENT_11 . write ( STRING_9 ) ; IDENT_11 . write ( IDENT_6 ) ; IDENT_11 . write ( STRING_3 0 ) ; IDENT_11 . write ( IDENT_0 ) ; IDENT_11 . METHOD_5 ( ) ; bytes = out . toByteArray ( ) ; in = new java . io . ByteArrayInputStream ( bytes ) ; IDENT_14 = msg . METHOD_6 ( in ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( STRING_3 6 ) ; } try { target . METHOD_7 ( IDENT_14 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; return ; } org . junit . Assert . fail ( STRING_3 2 ) ; } METHOD_7 ( org . IDENT_7 . IDENT_12 . IDENT_13 ) { int size = IDENT_14 . METHOD_8 ( ) ; if ( size != ( org . IDENT_2 . IDENT_3 . IDENT_15 . event . IDENT_16 . IDENT_17 ) ) { throw new java . io . IOException ( ) ; } while ( ( size OP_0 ) > 0 ) { java . lang . String field = IDENT_14 . METHOD_9 ( ) ; switch ( field ) { case STRING_10 : action = IDENT_14 . METHOD_9 ( ) ; break ; case STRING_11 : if ( ! ( IDENT_14 . METHOD_10 ( ) ) ) { IDENT_18 = IDENT_14 . read ( this . IDENT_19 ) ; } break ; case STRING_12 : if ( ! ( IDENT_14 . METHOD_10 ( ) ) ) { IDENT_20 = IDENT_14 . read ( this . IDENT_19 ) ; } break ; default : throw new java . io . IOException ( ) ; } } IDENT_14 . METHOD_11 ( ) ; }
org . junit . Assert . assertTrue ( ( e instanceof java . io . IOException ) ) 