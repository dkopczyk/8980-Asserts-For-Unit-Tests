METHOD_0 ( ) { java . lang . String value = STRING_0 ; byte [ ] IDENT_0 = value . getBytes ( ) ; int IDENT_1 = INT_0 ; int IDENT_2 = com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . METHOD_1 ( value , IDENT_1 ) ; int IDENT_7 = com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . METHOD_1 ( IDENT_0 , 0 , IDENT_0 . length , Integer . MAX_VALUE , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( byte [ ] , int , int , int , int ) { int IDENT_8 = IDENT_1 OP_0 IDENT_9 ; int i = IDENT_10 ; int len = IDENT_9 ; while ( len >= 4 ) { int k = ( IDENT_11 [ ( IDENT_12 & ( i + 0 ) ) ] ) & 255 ; k OP_1 ( ( IDENT_11 [ ( IDENT_12 & ( i + 1 ) ) ] ) & 255 ) << 8 ; k OP_1 ( ( IDENT_11 [ ( IDENT_12 & ( i + 2 ) ) ] ) & 255 ) << 16 ; k OP_1 ( ( IDENT_11 [ ( IDENT_12 & ( i + 3 ) ) ] ) & 255 ) << INT_1 ; k OP_2 com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_13 ; k OP_3 k > > > ( com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_14 ) ; k OP_2 com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_13 ; IDENT_8 OP_2 com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_13 ; IDENT_8 OP_3 k ; i += 4 ; len OP_4 4 ; } switch ( len ) { case 3 : IDENT_8 OP_3 ( ( IDENT_11 [ ( IDENT_12 & ( i + 2 ) ) ] ) & 255 ) << 16 ; case 2 : IDENT_8 OP_3 ( ( IDENT_11 [ ( IDENT_12 & ( i + 1 ) ) ] ) & 255 ) << 8 ; case 1 : IDENT_8 OP_3 ( IDENT_11 [ ( IDENT_12 & ( i + 0 ) ) ] ) & 255 ; IDENT_8 OP_2 com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_13 ; } IDENT_8 OP_3 IDENT_8 > > > INT_2 ; IDENT_8 OP_2 com . IDENT_3 . IDENT_4 . IDENT_5 . util . hash . IDENT_6 . IDENT_13 ; IDENT_8 OP_3 IDENT_8 > > > 15 ; return IDENT_8 ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 