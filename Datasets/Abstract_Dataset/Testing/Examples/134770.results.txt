METHOD_0 ( ) { final org . IDENT_0 . api . resources . IDENT_1 project = new org . IDENT_0 . api . resources . METHOD_1 ( STRING_0 ) ; final org . IDENT_0 . api . resources . File IDENT_2 = new org . IDENT_0 . api . resources . File ( STRING_1 ) ; final org . IDENT_0 . api . batch . IDENT_3 context = mock ( org . IDENT_0 . api . batch . IDENT_3 . class ) ; final org . IDENT_0 . api . resources . IDENT_4 IDENT_5 = mock ( org . IDENT_0 . api . resources . IDENT_4 . class ) ; final java . util . List < java . io . File > IDENT_6 = new java . util . ArrayList < java . io . File > ( ) ; final org . IDENT_0 . plugins . IDENT_7 . IDENT_8 . IDENT_9 IDENT_10 = new org . IDENT_0 . plugins . IDENT_7 . IDENT_8 . METHOD_2 ( project , context ) ; IDENT_6 . add ( new java . io . File ( STRING_2 ) ) ; when ( IDENT_5 . METHOD_3 ( ) ) . thenReturn ( IDENT_6 ) ; when ( IDENT_5 . METHOD_4 ( ) ) . thenReturn ( new java . io . File ( STRING_3 ) ) ; when ( context . getResource ( any ( org . IDENT_0 . api . resources . IDENT_11 . class ) ) ) . thenReturn ( IDENT_2 ) ; project . METHOD_5 ( IDENT_5 ) ; final java . util . Collection < org . IDENT_0 . api . rules . IDENT_12 > IDENT_8 = IDENT_10 . METHOD_6 ( new org . apache . tools . IDENT_13 . filters . METHOD_7 ( IDENT_14 ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . io . InputStream ) { final java . util . Collection < org . IDENT_0 . api . rules . IDENT_12 > IDENT_8 = new java . util . ArrayList < org . IDENT_0 . api . rules . IDENT_12 > ( ) ; try { final org . IDENT_0 . api . utils . IDENT_15 parser = new org . IDENT_0 . api . utils . METHOD_8 ( new org . IDENT_0 . plugins . IDENT_7 . IDENT_8 . METHOD_9 ( IDENT_8 , project , context ) ) ; parser . parse ( IDENT_16 ) ; org . IDENT_17 . IDENT_18 . METHOD_10 ( getClass ( ) ) . error ( STRING_4 , IDENT_8 . size ( ) ) ; } catch ( final javax . xml . stream . IDENT_19 e ) { org . IDENT_17 . IDENT_18 . METHOD_10 ( getClass ( ) ) . error ( STRING_5 , e ) ; } return IDENT_8 ; }
org . junit . Assert . assertFalse ( IDENT_8 . isEmpty ( ) ) 