METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . model . IDENT_2 simple = METHOD_1 ( STRING_0 ) ; java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_3 > expected = new java . util . HashMap ( ) ; expected . put ( STRING_1 , org . IDENT_0 . IDENT_1 . model . IDENT_3 . create ( ( ( base ) + STRING_2 ) ) ) ; expected . put ( STRING_3 , org . IDENT_0 . IDENT_1 . model . IDENT_3 . create ( ( ( base ) + STRING_2 ) ) ) ; java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_3 > actual = org . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_2 ( simple ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_4 . IDENT_5 . IDENT_2 ) { org . IDENT_4 . IDENT_5 . Map < java . lang . String , org . IDENT_4 . IDENT_5 . IDENT_3 > results = new org . IDENT_4 . IDENT_5 . HashMap ( ) ; org . IDENT_4 . IDENT_5 . IDENT_7 manager = IDENT_8 . METHOD_3 ( ) ; org . IDENT_4 . IDENT_5 . IDENT_9 IDENT_10 = manager . METHOD_4 ( ) . METHOD_5 ( ) ; org . IDENT_4 . IDENT_5 . Set < org . IDENT_4 . IDENT_5 . IDENT_11 > IDENT_12 = org . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_6 ( IDENT_8 , IDENT_10 ) ; for ( org . IDENT_4 . IDENT_5 . IDENT_11 IDENT_13 : IDENT_12 ) { java . lang . String value = org . IDENT_4 . IDENT_5 . IDENT_6 . getValue ( IDENT_13 ) ; if ( value == null ) { continue ; } org . IDENT_4 . IDENT_5 . IDENT_14 subject = IDENT_13 . METHOD_7 ( ) ; if ( ! ( subject instanceof org . IDENT_4 . IDENT_5 . IDENT_3 ) ) { continue ; } if ( results . containsKey ( value ) ) { org . IDENT_4 . IDENT_5 . IDENT_6 . logger . warn ( ( ( ( STRING_4 + value ) + STRING_5 ) + subject ) ) ; } results . put ( value , ( ( org . IDENT_4 . IDENT_5 . IDENT_3 ) ( subject ) ) ) ; } return results ; }
org . junit . Assert . assertEquals ( expected , actual ) 