METHOD_0 ( ) { long value = INT_0 ; java . util . ArrayList < java . math . BigDecimal > data = new java . util . ArrayList < java . math . BigDecimal > ( ) ; for ( short i = 0 ; i < 10 ; i ++ ) { data . add ( java . math . BigDecimal . valueOf ( value , i ) ) ; } java . math . BigDecimal [ ] IDENT_0 = data . toArray ( new java . math . BigDecimal [ 0 ] ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 expected = new org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_0 ) ; byte [ ] IDENT_5 = METHOD_2 ( expected ) ; org . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = new org . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 . METHOD_3 ( IDENT_5 ) ; IDENT_9 . METHOD_4 ( org . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_10 . METHOD_5 ( ) ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 actual = IDENT_9 . get ( null , org . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . class ) ; "<AssertPlaceHolder>" ; } get ( java . nio . ByteBuffer , int ) { if ( buf . METHOD_6 ( ) ) { this . buf . get ( buf . array ( ) , ( ( buf . METHOD_7 ( ) ) + ( buf . position ( ) ) ) , length ) ; buf . position ( ( ( buf . position ( ) ) + length ) ) ; } else { int len = length ; int IDENT_11 = this . buf . METHOD_8 ( ) ; try { this . buf . METHOD_8 ( ( ( this . buf . position ( ) ) + len ) ) ; buf . put ( this . buf ) ; } finally { this . buf . METHOD_8 ( IDENT_11 ) ; } } }
org . junit . Assert . assertEquals ( expected , actual ) 