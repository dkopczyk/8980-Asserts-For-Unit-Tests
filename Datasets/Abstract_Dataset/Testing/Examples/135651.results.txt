METHOD_0 ( ) { org . IDENT_0 . security . api . IDENT_1 IDENT_2 = org . easymock . EasyMock . METHOD_1 ( org . IDENT_0 . security . api . IDENT_1 . class ) ; org . easymock . EasyMock . replay ( IDENT_2 ) ; java . lang . String IDENT_3 = STRING_0 ; IDENT_4 = org . easymock . EasyMock . METHOD_1 ( org . IDENT_0 . IDENT_5 . api . IDENT_6 . class ) ; org . easymock . EasyMock . expect ( IDENT_4 . getProperty ( IDENT_3 , org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_9 ) ) . andReturn ( org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_10 ) ; org . easymock . EasyMock . replay ( IDENT_4 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_11 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_11 . put ( org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_9 , org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_12 ) ; org . IDENT_0 . IDENT_7 . api . IDENT_13 IDENT_14 = METHOD_2 ( IDENT_3 , IDENT_11 , false ) ; org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_15 handler = new org . IDENT_0 . IDENT_7 . handler . IDENT_7 . METHOD_3 ( ) ; handler . METHOD_4 ( IDENT_4 ) ; org . IDENT_0 . IDENT_7 . api . IDENT_16 result = handler . start ( IDENT_14 , null ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { return new com . IDENT_17 . IDENT_18 . data . METHOD_6 ( data . METHOD_7 ( ) ) ; }
org . junit . Assert . assertEquals ( org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_10 , result . METHOD_5 ( ) . get ( org . IDENT_0 . IDENT_7 . handler . IDENT_7 . IDENT_8 . IDENT_9 ) ) 