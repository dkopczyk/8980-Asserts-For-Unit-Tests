METHOD_0 ( ) { org . opendaylight . yangtools . yang . data . api . schema . IDENT_0 IDENT_1 = org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_2 . create ( ) . METHOD_1 ( new org . opendaylight . yangtools . yang . data . api . IDENT_3 . METHOD_2 ( org . opendaylight . IDENT_4 . binding . dom . codec . test . IDENT_5 . IDENT_6 ) ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_7 . create ( ) . METHOD_1 ( new org . opendaylight . yangtools . yang . data . api . IDENT_3 . METHOD_2 ( org . opendaylight . IDENT_4 . binding . dom . codec . test . IDENT_5 . IDENT_8 ) ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . builder . impl . IDENT_9 . create ( ) . METHOD_1 ( new org . opendaylight . yangtools . yang . data . api . IDENT_3 . METHOD_4 ( org . opendaylight . IDENT_4 . binding . dom . codec . test . IDENT_5 . IDENT_8 , "foo" ) ) . METHOD_5 ( "foo" ) . build ( ) ) . build ( ) ) . build ( ) ; java . util . Map . Entry < org . opendaylight . yangtools . yang . binding . IDENT_10 < ? > , org . opendaylight . yangtools . yang . binding . IDENT_11 > entry = registry . METHOD_6 ( org . opendaylight . IDENT_4 . binding . dom . codec . test . IDENT_5 . IDENT_12 , IDENT_1 ) ; java . util . List < java . lang . String > IDENT_13 = new java . util . ArrayList ( ) ; IDENT_13 . add ( "foo" ) ; org . opendaylight . yang . gen . v1 . IDENT_14 . opendaylight . params . xml . IDENT_15 . yang . IDENT_4 . test . binding . IDENT_16 . IDENT_17 IDENT_18 = new org . opendaylight . yang . gen . v1 . IDENT_14 . opendaylight . params . xml . IDENT_15 . yang . IDENT_4 . test . binding . IDENT_16 . METHOD_7 ( ) . METHOD_8 ( IDENT_13 ) . build ( ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( IDENT_18 , entry . getValue ( ) ) 