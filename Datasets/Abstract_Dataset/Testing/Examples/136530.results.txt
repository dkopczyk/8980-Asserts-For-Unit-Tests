METHOD_0 ( ) { org . opendaylight . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . opendaylight . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_5 , IDENT_6 , new org . opendaylight . IDENT_0 . IDENT_1 . IDENT_7 . METHOD_2 ( ) ) ; when ( IDENT_8 . METHOD_3 ( ) ) . thenReturn ( new java . util . ArrayList ( ) ) ; java . util . List < org . opendaylight . IDENT_0 . util . IDENT_9 . writer . IDENT_10 > IDENT_11 = IDENT_4 . METHOD_4 ( IDENT_12 , IDENT_13 , false ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . opendaylight . yang . gen . v1 . IDENT_14 . IDENT_15 . params . xml . IDENT_16 . yang . IDENT_0 . IDENT_17 . IDENT_18 . service . function . IDENT_19 . service . function . IDENT_20 . IDENT_21 , org . opendaylight . yang . gen . v1 . IDENT_14 . IDENT_22 . params . xml . IDENT_16 . yang . IDENT_22 . IDENT_23 . control . list . IDENT_24 . IDENT_23 . IDENT_25 . IDENT_26 , boolean ) { IDENT_27 = IDENT_28 ; java . util . Optional < org . opendaylight . yang . gen . v1 . IDENT_14 . IDENT_15 . params . xml . IDENT_16 . yang . IDENT_0 . IDENT_29 . IDENT_18 . service . function . IDENT_30 . IDENT_31 > IDENT_29 = java . util . Optional . of ( new org . opendaylight . yang . gen . v1 . IDENT_14 . IDENT_15 . params . xml . IDENT_16 . yang . IDENT_0 . common . IDENT_32 . METHOD_5 ( IDENT_33 . getName ( ) ) ) . map ( IDENT_34 :: IDENT_35 ) ; java . util . Optional < java . lang . String > IDENT_36 = IDENT_37 . METHOD_6 ( IDENT_33 ) ; if ( ( ! ( IDENT_29 . METHOD_7 ( ) ) ) || ( ! ( IDENT_36 . METHOD_7 ( ) ) ) ) { org . opendaylight . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . LOG . error ( ( STRING_0 + STRING_1 ) , IDENT_29 . METHOD_7 ( ) , IDENT_36 . METHOD_7 ( ) ) ; return java . util . Collections . emptyList ( ) ; } if ( IDENT_37 . METHOD_8 ( IDENT_29 . get ( ) ) ) { if ( IDENT_28 ) { org . opendaylight . IDENT_0 . IDENT_1 . IDENT_38 . IDENT_39 . METHOD_9 ( tx , IDENT_36 . get ( ) ) ; org . opendaylight . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . LOG . info ( STRING_2 , IDENT_36 . get ( ) ) ; } else { org . opendaylight . IDENT_0 . IDENT_1 . IDENT_38 . IDENT_39 . METHOD_10 ( tx , IDENT_36 . get ( ) ) ; org . opendaylight . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . LOG . info ( STRING_3 , IDENT_36 . get ( ) ) ; } } return IDENT_40 . METHOD_11 ( ) . METHOD_3 ( ) . stream ( ) . map ( ( IDENT_41 ) -> METHOD_12 ( IDENT_36 , IDENT_29 . get ( ) , IDENT_33 . getName ( ) , IDENT_40 . METHOD_13 ( ) , IDENT_41 ) ) . METHOD_14 ( new java . util . ArrayList ( ) , ( IDENT_42 , IDENT_43 ) -> java . util . stream . IDENT_44 . METHOD_15 ( IDENT_42 . stream ( ) , IDENT_43 . stream ( ) ) . collect ( java . util . stream . IDENT_45 . toList ( ) ) ) ; }
org . junit . Assert . assertTrue ( IDENT_11 . isEmpty ( ) ) 