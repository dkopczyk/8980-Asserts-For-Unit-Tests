METHOD_0 ( ) { final org . opendaylight . yangtools . yang . data . api . schema . IDENT_0 IDENT_1 = org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_1 ( ) . METHOD_2 ( IDENT_3 ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_4 ( ) . METHOD_2 ( IDENT_4 ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_5 ( ) . METHOD_2 ( IDENT_5 ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_6 ( ) . METHOD_2 ( new org . opendaylight . yangtools . yang . data . api . IDENT_6 . METHOD_7 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_7 . IDENT_8 ) ) . METHOD_8 ( 1 ) . build ( ) ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_9 ( ) . METHOD_2 ( IDENT_9 ) . METHOD_3 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_2 . METHOD_6 ( ) . METHOD_2 ( IDENT_10 ) . METHOD_8 ( "" ) . build ( ) ) . build ( ) ) . build ( ) ) . build ( ) ) . build ( ) ; final org . opendaylight . yangtools . yang . data . api . schema . IDENT_11 < ? , ? > filter = org . opendaylight . yangtools . yang . data . impl . schema . IDENT_12 . METHOD_10 ( org . opendaylight . yangtools . yang . data . impl . schema . IDENT_7 . ctx , org . opendaylight . yangtools . yang . data . api . IDENT_6 . create ( IDENT_3 ) , IDENT_1 ) ; "<AssertPlaceHolder>" ; } create ( org . opendaylight . yangtools . yang . data . api . schema . tree . IDENT_13 ) { return new org . opendaylight . yangtools . yang . data . api . schema . tree . METHOD_11 ( delegate ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , filter ) 