METHOD_0 ( ) { final java . math . BigDecimal min = new java . math . BigDecimal ( FLOAT_0 ) ; final java . math . BigDecimal IDENT_0 = new java . math . BigDecimal ( FLOAT_1 ) ; final java . math . BigDecimal max = new java . math . BigDecimal ( FLOAT_2 ) ; final java . math . BigDecimal IDENT_1 = new java . math . BigDecimal ( FLOAT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . IDENT_2 , java . lang . IDENT_2 , java . lang . IDENT_2 , java . lang . IDENT_2 ) { return ( ( org . opendaylight . yangtools . yang . model . util . type . IDENT_3 . IDENT_4 . compare ( min , IDENT_0 ) ) >= 0 ) && ( ( org . opendaylight . yangtools . yang . model . util . type . IDENT_3 . IDENT_4 . compare ( max , IDENT_1 ) ) <= 0 ) ; }
org . junit . Assert . assertTrue ( org . opendaylight . yangtools . yang . model . util . type . IDENT_3 . METHOD_1 ( min , max , IDENT_0 , IDENT_1 ) ) 