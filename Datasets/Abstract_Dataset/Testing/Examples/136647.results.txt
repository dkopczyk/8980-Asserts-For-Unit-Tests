METHOD_0 ( ) { final org . opendaylight . yangtools . yang . model . api . IDENT_0 IDENT_1 = mock ( org . opendaylight . yangtools . yang . model . api . IDENT_0 . class ) ; final org . opendaylight . yangtools . yang . model . api . IDENT_2 module = mock ( org . opendaylight . yangtools . yang . model . api . IDENT_2 . class ) ; final org . opendaylight . yangtools . yang . model . api . IDENT_3 IDENT_4 = new org . opendaylight . yangtools . yang . model . util . METHOD_1 ( STRING_0 , false ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . opendaylight . yangtools . yang . model . api . IDENT_0 , org . opendaylight . yangtools . yang . model . api . IDENT_2 , org . opendaylight . yangtools . yang . model . api . IDENT_3 ) { METHOD_3 ( context , STRING_1 ) ; METHOD_3 ( module , STRING_2 ) ; final java . lang . String IDENT_5 = IDENT_6 . METHOD_4 ( ) ; METHOD_5 ( ( ( IDENT_5 . indexOf ( STRING_3 ) ) == ( - 1 ) ) , STRING_4 ) ; if ( IDENT_6 . METHOD_6 ( ) ) { final java . util . List < org . opendaylight . yangtools . yang . common . IDENT_7 > path = org . opendaylight . yangtools . yang . model . util . IDENT_8 . METHOD_7 ( context , module , IDENT_5 ) ; final java . util . Optional < org . opendaylight . yangtools . yang . model . api . IDENT_9 > IDENT_10 = context . METHOD_8 ( path ) ; return IDENT_10 . METHOD_9 ( ) ? IDENT_10 . get ( ) : org . opendaylight . yangtools . yang . model . util . IDENT_8 . METHOD_10 ( context , path ) ; } return null ; }
org . junit . Assert . assertNull ( org . opendaylight . yangtools . yang . model . util . IDENT_8 . METHOD_2 ( IDENT_1 , module , IDENT_4 ) ) 