METHOD_0 ( ) { org . apache . hadoop . hdfs . client . impl . IDENT_0 IDENT_1 = mock ( org . apache . hadoop . hdfs . client . impl . IDENT_0 . class ) ; org . apache . hadoop . hdfs . IDENT_2 client = mock ( org . apache . hadoop . hdfs . IDENT_2 . class ) ; when ( client . METHOD_1 ( ) ) . thenReturn ( IDENT_1 ) ; when ( client . METHOD_2 ( ) ) . thenReturn ( org . apache . hadoop . fs . IDENT_3 . get ( new org . apache . hadoop . conf . Configuration ( ) ) ) ; client . IDENT_4 = true ; org . apache . hadoop . hdfs . IDENT_5 stream = new org . apache . hadoop . hdfs . METHOD_3 ( mock ( org . apache . hadoop . hdfs . protocol . IDENT_6 . class ) , mock ( org . apache . hadoop . hdfs . protocol . IDENT_7 . class ) , client , "foo" , null , null , null , null , null , null ) ; java . io . IDENT_8 IDENT_9 = mock ( java . io . IDENT_8 . class ) ; METHOD_4 ( new java . io . IOException ( ) ) . when ( IDENT_9 ) . METHOD_5 ( ) ; org . apache . hadoop . test . IDENT_10 . METHOD_6 ( stream , STRING_0 , IDENT_9 ) ; org . apache . hadoop . test . IDENT_10 . METHOD_6 ( stream , STRING_1 , IDENT_11 . IDENT_12 ) ; @ org . apache . hadoop . hdfs . METHOD_7 ( STRING_2 ) java . util . IDENT_13 < org . apache . hadoop . hdfs . IDENT_14 > IDENT_15 = ( ( java . util . IDENT_13 < org . apache . hadoop . hdfs . IDENT_14 > ) ( org . apache . hadoop . test . IDENT_10 . METHOD_8 ( stream , STRING_3 ) ) ) ; @ org . apache . hadoop . hdfs . METHOD_7 ( STRING_2 ) java . util . ArrayList < org . apache . hadoop . hdfs . protocol . IDENT_16 > IDENT_17 = ( ( java . util . ArrayList < org . apache . hadoop . hdfs . protocol . IDENT_16 > ) ( org . apache . hadoop . test . IDENT_10 . METHOD_8 ( stream , STRING_4 ) ) ) ; IDENT_17 . add ( mock ( org . apache . hadoop . hdfs . protocol . IDENT_16 . class ) ) ; org . apache . hadoop . hdfs . IDENT_14 packet = mock ( org . apache . hadoop . hdfs . IDENT_14 . class ) ; when ( packet . METHOD_9 ( ) ) . thenReturn ( new org . apache . IDENT_18 . core . IDENT_19 [ ] { } ) ; IDENT_15 . add ( packet ) ; stream . run ( ) ; "<AssertPlaceHolder>" ; } isEmpty ( ) { return IDENT_20 . isEmpty ( ) ; }
org . junit . Assert . assertTrue ( IDENT_17 . isEmpty ( ) ) 