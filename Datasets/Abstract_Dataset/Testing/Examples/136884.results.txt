METHOD_0 ( ) { java . util . Map < java . lang . String , org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = new java . util . HashMap < java . lang . String , org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_3 > ( ) { { put ( "1" , new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 ( "1" , "a" ) ) ; put ( "2" , new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 ( "2" , "b" ) ) ; } } ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_5 = new java . util . HashSet < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > ( ) { { add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 ( "2" , "b" ) ) ; add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 ( "1" , "a" ) ) ; } } ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Map , java . util . Set , java . lang . String ) { org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_6 . logger . debug ( "" ) ; java . util . ArrayList < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_7 > IDENT_8 = new java . util . ArrayList ( ) ; if ( ( IDENT_9 . size ( ) ) == 0 ) return IDENT_8 ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_10 = new java . util . HashSet ( IDENT_11 . values ( ) ) ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_12 = new java . util . HashSet ( IDENT_11 . values ( ) ) ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_13 = new java . util . HashSet ( IDENT_9 ) ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 > IDENT_14 = new java . util . HashSet ( ) ; for ( org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 IDENT_15 : IDENT_9 ) { java . lang . String IDENT_16 = IDENT_15 . METHOD_3 ( ) ; java . lang . String IDENT_17 = IDENT_15 . METHOD_4 ( ) . replaceAll ( STRING_0 , " " ) ; IDENT_14 . add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_17 , IDENT_16 ) ) ; } IDENT_10 . METHOD_5 ( IDENT_9 ) ; IDENT_12 . METHOD_5 ( IDENT_14 ) ; IDENT_13 . METHOD_5 ( IDENT_11 . values ( ) ) ; IDENT_14 . METHOD_5 ( IDENT_11 . values ( ) ) ; if ( ( ( IDENT_10 . size ( ) ) > 0 ) && ( ( IDENT_12 . size ( ) ) > 0 ) ) { for ( org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 IDENT_15 : IDENT_10 ) { java . lang . String IDENT_18 = IDENT_15 . METHOD_4 ( ) ; org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 IDENT_19 = org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_6 ( IDENT_18 , IDENT_9 ) ; if ( IDENT_19 != null ) { IDENT_8 . add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_7 ( ( ( ( ( ( ( ( ( " " 1 + IDENT_18 ) + STRING_1 ) + ( IDENT_15 . METHOD_3 ( ) ) ) + STRING_2 ) + IDENT_20 ) + STRING_3 ) + ( IDENT_19 . METHOD_3 ( ) ) ) + " " 0 ) , IDENT_20 ) ) ; IDENT_13 . remove ( IDENT_19 ) ; } else { IDENT_8 . add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_7 ( ( ( ( ( ( ( " " 1 + IDENT_18 ) + STRING_1 ) + ( IDENT_15 . METHOD_3 ( ) ) ) + STRING_2 ) + IDENT_20 ) + STRING_4 ) , IDENT_20 ) ) ; } } } if ( ( ( IDENT_13 . size ( ) ) > 0 ) && ( ( IDENT_14 . size ( ) ) > 0 ) ) { for ( org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_1 IDENT_15 : IDENT_13 ) { IDENT_8 . add ( new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_7 ( ( ( ( ( ( ( STRING_5 + IDENT_20 ) + STRING_6 ) + ( IDENT_15 . METHOD_4 ( ) ) ) + STRING_1 ) + ( IDENT_15 . METHOD_3 ( ) ) ) + STRING_7 ) , IDENT_20 ) ) ; } } return IDENT_8 ; }
org . junit . Assert . assertEquals ( 0 , org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_2 ( IDENT_4 , IDENT_5 , "" ) . size ( ) ) 