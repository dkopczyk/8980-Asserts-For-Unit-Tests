METHOD_0 ( ) { org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = this . METHOD_1 ( METHOD_2 ( STRING_0 , STRING_1 ) ) ; java . util . List < eu . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_9 = java . util . Arrays . asList ( METHOD_3 ( STRING_0 , STRING_1 ) ) ; java . util . List < org . IDENT_0 . IDENT_10 > IDENT_11 = this . METHOD_4 ( STRING_2 , IDENT_9 ) ; java . util . List < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_12 > errors = new org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_5 ( IDENT_4 , IDENT_9 , IDENT_11 ) . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( ) { org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_5 . logger . debug ( "" ) ; if ( ! ( IDENT_4 . METHOD_7 ( ) ) ) { java . lang . String IDENT_13 = STRING_3 ; org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_5 . logger . error ( IDENT_13 ) ; throw new org . IDENT_0 . exceptions . METHOD_8 ( IDENT_13 ) ; } java . util . List < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_12 > IDENT_14 = new java . util . ArrayList ( ) ; java . util . Map < java . lang . String , org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_15 > IDENT_16 = IDENT_4 . METHOD_9 ( ) ; java . util . Set < org . IDENT_0 . impl . IDENT_1 . IDENT_2 . IDENT_15 > IDENT_17 = new java . util . HashSet ( ) ; for ( org . IDENT_0 . IDENT_10 IDENT_18 : IDENT_11 ) { IDENT_17 = METHOD_10 ( IDENT_18 ) ; IDENT_14 . addAll ( org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_5 . METHOD_11 ( IDENT_16 , IDENT_17 , IDENT_18 . getId ( ) ) ) ; } IDENT_14 . addAll ( METHOD_12 ( IDENT_17 ) ) ; org . IDENT_0 . impl . IDENT_1 . IDENT_2 . METHOD_5 . logger . info ( ( STRING_4 + ( IDENT_14 . size ( ) ) ) ) ; return IDENT_14 ; }
org . junit . Assert . assertTrue ( errors . isEmpty ( ) ) 