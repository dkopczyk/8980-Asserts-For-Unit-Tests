METHOD_0 ( ) { final java . util . Map < java . lang . String , com . google . common . util . concurrent . IDENT_0 < java . lang . String > > IDENT_1 = com . google . common . collect . ImmutableMap . of ( STRING_0 , com . google . common . util . concurrent . IDENT_0 . < java . lang . String > create ( ) ) ; org . apache . hadoop . util . IDENT_2 IDENT_3 = new org . apache . hadoop . util . METHOD_1 ( ) { MOD_0 int IDENT_4 = 0 ; @ org . apache . hadoop . hdfs . IDENT_5 . client . Override public long METHOD_2 ( ) { ( IDENT_4 ) ++ ; if ( ( IDENT_4 ) == 1 ) { long IDENT_6 = super . METHOD_2 ( ) ; METHOD_3 ( INT_0 ) ; return IDENT_6 ; } else if ( ( IDENT_4 ) == 10 ) { IDENT_1 . get ( STRING_0 ) . set ( STRING_1 ) ; return super . METHOD_2 ( ) ; } else { return super . METHOD_2 ( ) ; } } } ; org . apache . hadoop . hdfs . IDENT_5 . client . IDENT_7 < java . lang . String , java . lang . String > q = org . apache . hadoop . hdfs . IDENT_5 . client . IDENT_7 . create ( IDENT_1 , IDENT_3 ) ; "<AssertPlaceHolder>" ; q . METHOD_4 ( 1 , 0 , 0 , INT_1 , "test" ) ; } METHOD_5 ( ) { return ( IDENT_8 . size ( ) ) + ( exceptions . size ( ) ) ; }
org . junit . Assert . assertEquals ( 0 , q . METHOD_5 ( ) ) 