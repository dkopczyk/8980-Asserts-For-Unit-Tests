METHOD_0 ( ) { float expected = INT_0 ; bytes . append ( expected ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( net . IDENT_0 . IDENT_1 . bytes . IDENT_2 ) { long value = 0 ; int exp = 0 ; boolean IDENT_3 = false ; int IDENT_4 = Integer . IDENT_5 ; int ch ; do { ch = in . METHOD_2 ( ) ; } while ( ch == STRING_0 ) ; try { switch ( ch ) { case STRING_1 : if ( net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_3 ( in , STRING_2 ) ) return Double . IDENT_7 ; in . METHOD_4 ( ( - 1 ) ) ; return Double . IDENT_7 ; case STRING_3 : if ( net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_3 ( in , STRING_4 ) ) return Double . IDENT_8 ; in . METHOD_4 ( ( - 1 ) ) ; return Double . IDENT_7 ; case STRING_5 : if ( net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_3 ( in , STRING_6 ) ) return Double . IDENT_9 ; IDENT_3 = true ; ch = in . METHOD_2 ( ) ; break ; } int IDENT_10 = 0 ; while ( true ) { if ( ( ch >= STRING_7 ) && ( ch <= STRING_8 ) ) { while ( value >= ( net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . IDENT_11 ) ) { value OP_0 1 ; exp ++ ; } value = ( value * 10 ) + ( ch - STRING_7 ) ; IDENT_4 ++ ; } else if ( ch == STRING_9 ) { IDENT_4 = 0 ; } else if ( ( ch == STRING_10 ) || ( ch == STRING_11 ) ) { IDENT_10 = ( ( int ) ( net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_5 ( in ) ) ) ; break ; } else { break ; } if ( ( in . METHOD_6 ( ) ) == 0 ) break ; ch = in . METHOD_2 ( ) ; } if ( IDENT_4 < 0 ) IDENT_4 = 0 ; return net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_7 ( value , exp , IDENT_3 , ( IDENT_4 - IDENT_10 ) ) ; } finally { ( ( net . IDENT_0 . IDENT_1 . bytes . IDENT_12 ) ( in ) ) . METHOD_8 ( IDENT_4 ) ; } }
org . junit . Assert . assertEquals ( expected , net . IDENT_0 . IDENT_1 . bytes . IDENT_6 . METHOD_1 ( bytes ) , 0 ) 