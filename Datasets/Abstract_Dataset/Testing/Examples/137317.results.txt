METHOD_0 ( ) { @ org . IDENT_0 . IDENT_1 . IDENT_2 net . IDENT_3 . IDENT_4 . bytes . IDENT_5 bytes = net . IDENT_3 . IDENT_4 . bytes . IDENT_6 . METHOD_1 ( ) ; int length = net . IDENT_3 . IDENT_4 . bytes . IDENT_7 . IDENT_8 . IDENT_9 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i ++ ) sb . append ( STRING_0 ) ; java . lang . String test = sb . toString ( ) ; net . IDENT_3 . IDENT_4 . bytes . IDENT_10 . METHOD_2 ( bytes , test ) ; sb . METHOD_3 ( 0 ) ; "<AssertPlaceHolder>" ; bytes . METHOD_4 ( ) ; } METHOD_5 ( net . IDENT_3 . IDENT_4 . bytes . IDENT_11 , long , java . lang . IDENT_12 ) { long IDENT_13 ; if ( ( IDENT_13 = input . METHOD_6 ( ( offset ++ ) ) ) < 0 ) { IDENT_13 OP_0 INT_0 ; long b ; int count = 7 ; while ( ( b = input . METHOD_6 ( ( offset ++ ) ) ) < 0 ) { IDENT_13 OP_1 ( b & INT_0 ) << count ; count += 7 ; } if ( b != 0 ) { if ( count > INT_1 ) throw new net . IDENT_3 . IDENT_4 . core . io . METHOD_7 ( STRING_1 ) ; IDENT_13 OP_1 b << count ; } else { if ( count > INT_2 ) throw new net . IDENT_3 . IDENT_4 . core . io . METHOD_7 ( STRING_2 ) ; IDENT_13 = OP_2 IDENT_13 ; } } if ( IDENT_13 == ( - 1 ) ) return other == null ; return ( other != null ) && ( net . IDENT_3 . IDENT_4 . bytes . IDENT_10 . METHOD_5 ( input , offset , IDENT_13 , other ) ) ; }
org . junit . Assert . assertTrue ( net . IDENT_3 . IDENT_4 . bytes . IDENT_10 . METHOD_5 ( bytes , 0 , test ) ) 