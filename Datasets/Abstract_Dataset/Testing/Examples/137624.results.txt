METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Long , java . lang . Integer > map = new net . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Long , java . lang . Integer > ( ) { @ net . IDENT_0 . IDENT_1 . Override MOD_0 long METHOD_1 ( @ org . IDENT_3 . IDENT_4 . IDENT_5 java . lang . Object key ) { return ( ( java . lang . Long ) ( key ) ) . METHOD_2 ( ) ; } } ; map . put ( 0L , 0 ) ; map . put ( ( INT_0 << ( INT_1 - ( IDENT_6 . IDENT_7 ) ) ) , 2 ) ; map . put ( ( INT_2 << ( INT_1 - ( IDENT_6 . IDENT_7 ) ) ) , 3 ) ; map . METHOD_3 ( ( k , v ) -> true ) ; "<AssertPlaceHolder>" ; } size ( ) { return INT_1 - ( java . lang . Long . METHOD_4 ( IDENT_8 ) ) ; }
org . junit . Assert . assertEquals ( 0 , map . size ( ) ) 