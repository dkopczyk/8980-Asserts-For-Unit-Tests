METHOD_0 ( ) { org . apache . commons . math . random . IDENT_0 IDENT_1 = new org . apache . commons . math . random . METHOD_1 ( INT_0 ) ; org . IDENT_2 . image . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new org . IDENT_2 . image . IDENT_3 . IDENT_4 . METHOD_2 ( 5 , org . IDENT_2 . image . IDENT_3 . IDENT_7 . IDENT_8 . IDENT_9 ) ; org . IDENT_2 . image . IDENT_10 IDENT_11 = new org . IDENT_2 . image . METHOD_3 ( 200 , 200 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { float IDENT_12 = ( ( float ) ( FLOAT_0 + ( ( IDENT_1 . METHOD_4 ( ) ) / FLOAT_1 ) ) ) ; int x = ( ( int ) ( FLOAT_2 + ( ( IDENT_1 . METHOD_4 ( ) ) / 2.0 ) ) ) ; IDENT_11 . METHOD_5 ( 0 ) ; IDENT_11 . METHOD_6 ( new org . IDENT_2 . math . geometry . IDENT_13 . METHOD_7 ( 100 , 0 , 100 , 200 ) , IDENT_12 ) ; org . IDENT_2 . math . geometry . line . IDENT_14 line = new org . IDENT_2 . math . geometry . line . METHOD_8 ( ( x + 2 ) , 50 , ( x - 2 ) , 50 ) ; IDENT_6 . METHOD_9 ( IDENT_11 , line ) ; } int x = INT_1 ; IDENT_11 . METHOD_5 ( 0 ) ; IDENT_11 . METHOD_6 ( new org . IDENT_2 . math . geometry . IDENT_13 . METHOD_7 ( 100 , 0 , 100 , 200 ) , FLOAT_3 ) ; while ( true ) { org . IDENT_2 . math . geometry . line . METHOD_8 line = new org . IDENT_2 . math . geometry . line . METHOD_8 ( ( x + 4 ) , 50 , ( x - 4 ) , 50 ) ; int IDENT_15 = ( ( int ) ( IDENT_6 . METHOD_10 ( IDENT_11 , line , 9 ) . METHOD_11 ( ) ) ) ; if ( IDENT_15 == x ) break ; x = IDENT_15 ; } "<AssertPlaceHolder>" ; } METHOD_11 ( ) { return IDENT_16 . METHOD_11 ( ) ; }
org . junit . Assert . assertEquals ( 100 , x ) 