METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . cluster . IDENT_3 . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . IDENT_2 . cluster . IDENT_3 . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . cluster . IDENT_3 . IDENT_6 IDENT_7 = IDENT_5 . METHOD_2 ( IDENT_8 , IDENT_9 ) ; org . IDENT_0 . IDENT_10 . IDENT_11 . random . IDENT_12 IDENT_13 = new org . IDENT_0 . IDENT_10 . IDENT_11 . random . METHOD_3 ( 10 , 1 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { ch . IDENT_14 . IDENT_15 . IDENT_16 IDENT_17 = new ch . IDENT_14 . IDENT_15 . METHOD_4 ( INT_0 , INT_0 ) ; int [ ] [ ] IDENT_18 = IDENT_13 . METHOD_5 ( IDENT_17 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . cluster . IDENT_3 . IDENT_6 IDENT_19 = IDENT_5 . METHOD_2 ( IDENT_8 , IDENT_18 ) ; if ( ( IDENT_7 . IDENT_20 . METHOD_6 ( 1 ) ) <= ( IDENT_19 . METHOD_6 . METHOD_6 ( 1 ) ) ) { METHOD_7 ( IDENT_19 , IDENT_7 , IDENT_18 ) ; } "<AssertPlaceHolder>" ; } } METHOD_6 ( double ) { double IDENT_21 = IDENT_22 * IDENT_22 ; double IDENT_23 = IDENT_24 . METHOD_8 ( ) ; double IDENT_25 = IDENT_24 . METHOD_9 ( ) ; if ( ( IDENT_23 + IDENT_25 ) == 0 ) return 0 ; return ( ( ( IDENT_21 + 1 ) * IDENT_23 ) * IDENT_25 ) / ( ( IDENT_21 * IDENT_23 ) + IDENT_25 ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_19 . METHOD_6 . METHOD_6 ( 1 ) ) < ( IDENT_7 . METHOD_6 . METHOD_6 ( 1 ) ) ) ) 