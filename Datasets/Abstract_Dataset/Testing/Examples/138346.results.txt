METHOD_0 ( ) { com . ibm . ws . IDENT_0 . IDENT_1 executor = provider . create ( STRING_0 ) ; java . util . concurrent . IDENT_2 < java . lang . Boolean > task = new java . util . concurrent . IDENT_2 < java . lang . Boolean > ( ) { @ web . Override public web . Boolean call ( ) throws web . IDENT_3 { java . lang . Thread . METHOD_1 ( ) . METHOD_2 ( ) ; TimeUnit . IDENT_4 . sleep ( 1 ) ; return false ; } } ; try { org . junit . Assert . fail ( ( STRING_1 + ( executor . METHOD_3 ( java . util . Collections . METHOD_4 ( task ) , web . IDENT_5 . IDENT_6 , TimeUnit . IDENT_7 ) ) ) ) ; } catch ( java . util . concurrent . IDENT_8 x ) { if ( ! ( ( x . METHOD_5 ( ) ) instanceof java . lang . IDENT_3 ) ) throw x ; } try { org . junit . Assert . fail ( ( STRING_2 + ( executor . METHOD_3 ( java . util . Collections . METHOD_4 ( task ) ) ) ) ) ; } catch ( java . lang . IDENT_3 x ) { } try { org . junit . Assert . fail ( ( STRING_3 + ( executor . METHOD_3 ( java . util . Arrays . < java . util . concurrent . IDENT_2 < java . lang . Boolean > > asList ( task , task ) ) ) ) ) ; } catch ( java . util . concurrent . IDENT_8 x ) { if ( ! ( ( x . METHOD_5 ( ) ) instanceof java . lang . IDENT_3 ) ) throw x ; } java . util . List < java . lang . IDENT_9 > IDENT_10 = executor . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { throw new java . lang . METHOD_7 ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_10 . size ( ) ) 