METHOD_0 ( ) { final int IDENT_0 = 1000 ; final java . lang . String IDENT_1 = STRING_0 ; final org . apache . hadoop . fs . Path IDENT_2 = new org . apache . hadoop . fs . Path ( IDENT_1 ) ; org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs . METHOD_1 ( IDENT_2 , new org . apache . hadoop . fs . IDENT_6 . METHOD_2 ( ( ( short ) ( INT_0 ) ) ) ) ; org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs . METHOD_3 ( IDENT_2 ) ; int s = 0 ; for ( ; s < ( org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 ) ; s ++ ) { final java . lang . String IDENT_9 = STRING_1 + s ; org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs . METHOD_4 ( IDENT_2 , IDENT_9 ) ; if ( ( s OP_0 IDENT_0 ) == 0 ) { final org . apache . hadoop . fs . Path file = new org . apache . hadoop . fs . Path ( IDENT_1 , ( STRING_2 + s ) ) ; org . apache . hadoop . hdfs . IDENT_10 . METHOD_5 ( org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs , file , org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_11 , org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_12 , org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_13 ) ; } } try { org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs . METHOD_4 ( IDENT_2 , ( STRING_1 + s ) ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( java . io . IOException IDENT_14 ) { IDENT_15 . LOG . info ( STRING_4 , IDENT_14 ) ; } for ( int f = 0 ; f < ( org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 ) ; f += IDENT_0 ) { final java . lang . String file = STRING_2 + f ; s = org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_16 . METHOD_6 ( IDENT_0 ) ; for ( ; s < ( org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 ) ; s += org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_16 . METHOD_6 ( IDENT_0 ) ) { final org . apache . hadoop . fs . Path p = org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_15 . METHOD_7 ( IDENT_2 , ( STRING_1 + s ) , file ) ; "<AssertPlaceHolder>" ; } } } exists ( java . lang . String ) { java . io . File test = new java . io . File ( path ) ; return test . exists ( ) ; }
org . junit . Assert . assertEquals ( ( s > f ) , org . apache . hadoop . hdfs . server . IDENT_3 . IDENT_4 . IDENT_5 . hdfs . exists ( p ) ) 