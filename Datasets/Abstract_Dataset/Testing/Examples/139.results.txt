METHOD_0 ( ) { final java . lang . String IDENT_0 = METHOD_1 ( STRING_0 ) ; org . springframework . data . IDENT_1 . core . domain . IDENT_2 manager = new org . springframework . data . IDENT_1 . core . domain . METHOD_2 ( ) ; manager . METHOD_3 ( IDENT_0 , null , IDENT_3 ) ; "<AssertPlaceHolder>" ; manager . METHOD_4 ( IDENT_0 , IDENT_3 ) ; } exists ( java . lang . String , com . amazonaws . services . IDENT_1 . IDENT_4 ) { try { com . amazonaws . services . IDENT_1 . model . IDENT_5 IDENT_6 = IDENT_3 . METHOD_5 ( new com . amazonaws . services . IDENT_1 . model . METHOD_6 ( ) ) ; java . util . List < java . lang . String > IDENT_7 = IDENT_6 . METHOD_7 ( ) ; java . lang . String IDENT_8 = IDENT_6 . METHOD_8 ( ) ; while ( ( IDENT_8 != null ) && ( ! ( IDENT_8 . isEmpty ( ) ) ) ) { IDENT_6 = IDENT_3 . METHOD_5 ( new com . amazonaws . services . IDENT_1 . model . METHOD_6 ( ) . METHOD_9 ( IDENT_8 ) ) ; IDENT_7 . addAll ( IDENT_6 . METHOD_7 ( ) ) ; IDENT_8 = IDENT_6 . METHOD_8 ( ) ; } return IDENT_7 . contains ( IDENT_0 ) ; } catch ( com . amazonaws . IDENT_9 IDENT_10 ) { throw org . springframework . data . IDENT_1 . exception . IDENT_11 . METHOD_10 ( ) . METHOD_11 ( IDENT_10 ) ; } }
org . junit . Assert . assertTrue ( manager . exists ( IDENT_0 , IDENT_3 ) ) 