METHOD_0 ( ) { org . apache . hadoop . IDENT_0 . IDENT_1 conf = new org . apache . hadoop . IDENT_0 . METHOD_1 ( ) ; org . apache . hadoop . fs . Path [ ] IDENT_2 = new org . apache . hadoop . fs . Path [ 3 ] ; java . io . File [ ] IDENT_3 = new java . io . File [ 3 ] ; long [ ] IDENT_4 = new long [ 3 ] ; try { for ( int i = 0 ; i < 3 ; i ++ ) { java . io . File IDENT_5 = new java . io . File ( org . apache . hadoop . mapreduce . lib . input . IDENT_6 . IDENT_7 . toString ( ) ) ; IDENT_5 . METHOD_2 ( ) ; IDENT_3 [ i ] = new java . io . File ( IDENT_5 , ( STRING_0 + i ) ) ; java . io . IDENT_8 IDENT_9 = new java . io . METHOD_3 ( IDENT_3 [ i ] ) ; IDENT_9 . METHOD_4 ( ) ; IDENT_9 . close ( ) ; IDENT_4 [ i ] = i ; IDENT_2 [ i ] = new org . apache . hadoop . fs . Path ( ( ( ( org . apache . hadoop . mapreduce . lib . input . IDENT_6 . IDENT_7 ) + STRING_1 ) + i ) ) ; } org . apache . hadoop . mapreduce . lib . input . IDENT_10 IDENT_11 = new org . apache . hadoop . mapreduce . lib . input . METHOD_5 ( IDENT_2 , IDENT_4 ) ; org . apache . hadoop . mapreduce . IDENT_12 IDENT_13 = org . mockito . Mockito . mock ( org . apache . hadoop . mapreduce . IDENT_12 . class ) ; org . apache . hadoop . IDENT_0 . IDENT_14 . IDENT_15 IDENT_16 = org . mockito . Mockito . mock ( org . apache . hadoop . IDENT_0 . IDENT_14 . IDENT_15 . class ) ; org . apache . hadoop . mapreduce . task . IDENT_17 IDENT_18 = new org . apache . hadoop . mapreduce . task . METHOD_6 ( conf , IDENT_13 , IDENT_16 ) ; org . apache . hadoop . mapreduce . lib . input . IDENT_19 IDENT_20 = new org . apache . hadoop . mapreduce . lib . input . METHOD_7 ( IDENT_11 , IDENT_18 , org . apache . hadoop . mapreduce . lib . input . IDENT_6 . IDENT_21 . class ) ; IDENT_20 . METHOD_8 ( IDENT_11 , IDENT_18 ) ; verify ( IDENT_16 ) . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; verify ( IDENT_16 , times ( 3 ) ) . METHOD_9 ( ) ; } finally { org . apache . hadoop . fs . IDENT_22 . METHOD_10 ( new java . io . File ( org . apache . hadoop . mapreduce . lib . input . IDENT_6 . IDENT_7 . toString ( ) ) ) ; } } METHOD_11 ( ) { if ( ( IDENT_23 ) == null ) { if ( org . apache . hadoop . tools . IDENT_0 . lib . IDENT_24 . LOG . METHOD_12 ( ) ) org . apache . hadoop . tools . IDENT_0 . lib . IDENT_24 . LOG . debug ( ( ( IDENT_25 ) + STRING_2 ) ) ; return false ; } if ( IDENT_23 . METHOD_13 ( ) . METHOD_11 ( ) ) { ++ ( IDENT_26 ) ; return true ; } if ( org . apache . hadoop . tools . IDENT_0 . lib . IDENT_24 . LOG . METHOD_12 ( ) ) org . apache . hadoop . tools . IDENT_0 . lib . IDENT_24 . LOG . debug ( ( ( ( IDENT_25 ) + STRING_3 ) + STRING_4 ) ) ; IDENT_23 . METHOD_14 ( ) ; IDENT_27 = java . lang . System . currentTimeMillis ( ) ; IDENT_28 = false ; IDENT_23 = IDENT_29 . METHOD_15 ( IDENT_18 ) ; if ( ( IDENT_23 ) == null ) return false ; if ( IDENT_23 . METHOD_13 ( ) . METHOD_11 ( ) ) { ++ ( IDENT_26 ) ; return true ; } else { return false ; } }
org . junit . Assert . assertFalse ( IDENT_20 . METHOD_11 ( ) ) 