METHOD_0 ( ) { java . util . List < org . onosproject . net . IDENT_0 . IDENT_1 > IDENT_2 = METHOD_1 ( ) ; java . util . List < org . onosproject . net . IDENT_0 . IDENT_1 > IDENT_3 = METHOD_2 ( ) ; org . onosproject . net . IDENT_0 . IDENT_4 IDENT_5 = new org . onosproject . net . IDENT_0 . METHOD_3 ( METHOD_4 ( ) , org . onosproject . net . IDENT_0 . IDENT_6 . IDENT_7 , new org . onosproject . store . service . METHOD_5 ( ) ) ; IDENT_5 = org . onosproject . net . IDENT_0 . METHOD_3 . METHOD_6 ( IDENT_5 , IDENT_3 ) ; org . onosproject . net . IDENT_0 . METHOD_3 IDENT_8 = new org . onosproject . net . IDENT_0 . METHOD_3 ( METHOD_4 ( ) , org . onosproject . net . IDENT_0 . IDENT_6 . IDENT_9 , new org . onosproject . store . service . METHOD_5 ( ) ) ; IDENT_8 = org . onosproject . net . IDENT_0 . METHOD_3 . METHOD_6 ( IDENT_8 , IDENT_2 ) ; org . onosproject . net . IDENT_0 . IDENT_10 < org . onosproject . net . IDENT_0 . IDENT_11 > IDENT_12 ; org . onosproject . net . IDENT_0 . IDENT_13 context = new org . onosproject . net . IDENT_0 . METHOD_7 ( IDENT_8 , IDENT_5 ) ; IDENT_12 = new org . onosproject . net . IDENT_0 . METHOD_8 ( IDENT_2 , IDENT_3 , context ) ; IDENT_14 . apply ( IDENT_12 ) ; org . onosproject . net . IDENT_0 . METHOD_8 IDENT_15 = IDENT_16 . IDENT_15 ; "<AssertPlaceHolder>" ; } apply ( org . onosproject . net . IDENT_0 . METHOD_8 ) { java . util . Optional < org . onosproject . net . IDENT_0 . METHOD_3 > IDENT_8 = context . METHOD_9 ( ) ; java . util . Optional < org . onosproject . net . IDENT_0 . METHOD_3 > IDENT_5 = context . METHOD_10 ( ) ; if ( ( METHOD_10 . METHOD_11 ( ) ) && ( METHOD_9 . METHOD_11 ( ) ) ) { org . onosproject . net . IDENT_0 . IDENT_1 IDENT_17 = METHOD_10 . get ( ) . METHOD_12 ( ) ; if ( ( METHOD_13 ( IDENT_17 ) ) && ( org . onosproject . net . METHOD_12 . IDENT_6 . IDENT_9 . equals ( METHOD_9 . get ( ) . state ( ) ) ) ) { METHOD_14 ( context ) ; return ; } } if ( ( ! ( METHOD_10 . METHOD_11 ( ) ) ) && ( ! ( METHOD_9 . METHOD_11 ( ) ) ) ) { IDENT_16 . METHOD_15 ( context ) ; return ; } java . util . List < org . onosproject . net . METHOD_12 . IDENT_18 > IDENT_19 = context . METHOD_16 ( ) ; java . util . List < org . onosproject . net . METHOD_12 . IDENT_18 > IDENT_20 = context . METHOD_17 ( ) ; java . util . List < org . onosproject . net . flow . IDENT_21 > IDENT_22 ; java . util . List < org . onosproject . net . flow . IDENT_21 > IDENT_23 ; if ( METHOD_9 . METHOD_11 ( ) ) { METHOD_18 ( METHOD_9 . get ( ) , IDENT_19 , org . onosproject . net . METHOD_12 . impl . IDENT_14 . IDENT_24 ) ; IDENT_22 = IDENT_19 . stream ( ) . map ( IDENT_18 :: IDENT_25 ) . METHOD_19 ( Collection :: stream ) . collect ( java . util . stream . IDENT_26 . toList ( ) ) ; } else { IDENT_22 = java . util . Collections . emptyList ( ) ; } if ( METHOD_10 . METHOD_11 ( ) ) { METHOD_18 ( METHOD_10 . get ( ) , IDENT_20 , org . onosproject . net . METHOD_12 . impl . IDENT_14 . IDENT_27 ) ; IDENT_23 = IDENT_20 . stream ( ) . map ( IDENT_18 :: IDENT_25 ) . METHOD_19 ( Collection :: stream ) . collect ( java . util . stream . IDENT_26 . toList ( ) ) ; } else { IDENT_23 = java . util . Collections . emptyList ( ) ; } java . util . List < org . onosproject . net . flow . IDENT_21 > IDENT_28 ; java . util . List < org . onosproject . net . flow . IDENT_21 > IDENT_29 ; IDENT_28 = IDENT_23 . stream ( ) . filter ( ( IDENT_30 ) -> IDENT_22 . stream ( ) . METHOD_20 ( IDENT_30 :: equals ) ) . collect ( java . util . stream . IDENT_26 . toList ( ) ) ; IDENT_29 = IDENT_23 . stream ( ) . filter ( ( IDENT_30 ) -> IDENT_22 . stream ( ) . METHOD_20 ( IDENT_30 :: IDENT_31 ) ) . collect ( java . util . stream . IDENT_26 . toList ( ) ) ; IDENT_22 . METHOD_21 ( IDENT_28 ) ; IDENT_22 . METHOD_21 ( IDENT_29 ) ; IDENT_23 . METHOD_21 ( IDENT_28 ) ; IDENT_23 . METHOD_21 ( IDENT_29 ) ; IDENT_28 . METHOD_21 ( IDENT_29 ) ; if ( ( ( IDENT_23 . isEmpty ( ) ) && ( IDENT_22 . isEmpty ( ) ) ) && ( IDENT_28 . isEmpty ( ) ) ) { IDENT_16 . METHOD_15 ( context ) ; return ; } org . onosproject . net . flow . IDENT_32 . Builder builder = org . onosproject . net . flow . IDENT_32 . builder ( ) ; IDENT_23 . METHOD_22 ( builder :: add ) ; IDENT_28 . METHOD_22 ( builder :: IDENT_33 ) ; IDENT_22 . METHOD_22 ( builder :: remove ) ; org . onosproject . net . flow . IDENT_34 IDENT_35 = new org . onosproject . net . flow . METHOD_23 ( ) { @ org . onosproject . net . METHOD_12 . impl . IDENT_14 . Override public void METHOD_24 ( org . onosproject . net . flow . IDENT_32 IDENT_36 ) { IDENT_16 . METHOD_15 ( context ) ; } @ org . onosproject . net . METHOD_12 . impl . IDENT_14 . Override public void METHOD_25 ( org . onosproject . net . flow . IDENT_32 IDENT_36 ) { IDENT_16 . METHOD_26 ( context ) ; } } ; org . onosproject . net . flow . IDENT_32 operations = builder . build ( IDENT_35 ) ; log . debug ( STRING_0 , METHOD_9 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_27 ( STRING_1 ) , METHOD_10 . map ( ( x ) -> x . key ( ) . toString ( ) ) . METHOD_27 ( STRING_1 ) , operations . METHOD_28 ( ) . stream ( ) . METHOD_29 ( Set :: size ) . METHOD_30 ( ) , operations . METHOD_28 ( ) ) ; IDENT_37 . apply ( operations ) ; }
org . junit . Assert . assertEquals ( IDENT_15 , IDENT_12 ) 