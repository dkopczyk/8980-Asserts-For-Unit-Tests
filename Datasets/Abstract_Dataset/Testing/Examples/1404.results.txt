METHOD_0 ( ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_3 . tests . IDENT_4 . logger . info ( STRING_0 ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_1 ( IDENT_6 ) ) . andReturn ( IDENT_7 ) ; try { org . easymock . EasyMock . expect ( IDENT_8 . METHOD_2 ( IDENT_9 , new java . net . URI ( STRING_1 ) ) ) . andReturn ( IDENT_10 ) ; } catch ( java . net . IDENT_11 e ) { e . printStackTrace ( ) ; } org . easymock . EasyMock . replay ( IDENT_5 ) ; org . easymock . EasyMock . replay ( IDENT_8 ) ; eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . IDENT_13 IDENT_14 = core . METHOD_2 ( IDENT_9 ) ; org . easymock . EasyMock . verify ( IDENT_5 ) ; org . easymock . EasyMock . verify ( IDENT_8 ) ; "<AssertPlaceHolder>" ; eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_3 . tests . IDENT_4 . logger . info ( STRING_2 ) ; } METHOD_2 ( eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . IDENT_15 ) { eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . IDENT_16 IDENT_17 ; if ( ( ( ( request . METHOD_3 ( ) ) != null ) && ( ( request . METHOD_3 ( ) . METHOD_4 ( ) ) != null ) ) && ( ! ( request . METHOD_3 ( ) . METHOD_4 ( ) . isEmpty ( ) ) ) ) { IDENT_17 = new eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . METHOD_5 ( STRING_3 0 , request . METHOD_3 ( ) . METHOD_4 ( ) ) ; } else { IDENT_17 = null ; } eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . IDENT_18 IDENT_19 = new eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . METHOD_6 ( request . METHOD_7 ( ) , request . METHOD_8 ( ) , IDENT_17 ) ; java . util . List < eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . IDENT_20 > IDENT_21 = null ; if ( ( IDENT_22 ) == true ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_23 . IDENT_24 . METHOD_9 ( IDENT_19 ) ; } if ( eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_25 . logger . METHOD_10 ( ) ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_25 . logger . debug ( ( STRING_4 + ( IDENT_19 . toString ( ) ) ) ) ; } java . lang . String IDENT_26 = null ; if ( ( IDENT_27 != null ) && ( ( IDENT_27 . METHOD_11 ( ) ) != null ) ) IDENT_26 = ( ( ( STRING_3 2 + ( IDENT_27 . METHOD_11 ( ) . METHOD_12 ( ) ) ) + STRING_5 ) + ( IDENT_27 . METHOD_11 ( ) . METHOD_13 ( ) ) ) + STRING_6 2 ; if ( eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_25 . logger . METHOD_10 ( ) ) { eu . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_25 . logger . debug ( ( STRING_3 8 + ( IDENT_27 . toString ( ) ) ) ) ; } IDENT_28 . METHOD_14 ( new eu . IDENT_0 . IDENT_1 . IDENT_12 . api . datamodel . METHOD_15 ( IDENT_29 . IDENT_30 . getCode ( ) , IDENT_31 . IDENT_30 . toString ( ) , IDENT_26 ) ) ; } return IDENT_28 ; }
org . junit . Assert . assertEquals ( IDENT_14 , IDENT_10 ) 