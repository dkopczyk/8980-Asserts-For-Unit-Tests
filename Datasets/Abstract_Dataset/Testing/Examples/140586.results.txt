METHOD_0 ( ) { for ( final org . opennms . IDENT_0 . model . IDENT_1 node : IDENT_2 . METHOD_1 ( ) ) { IDENT_2 . delete ( node ) ; } org . opennms . IDENT_0 . model . IDENT_1 node = new org . opennms . IDENT_0 . model . METHOD_2 ( IDENT_3 . METHOD_3 ( ) , STRING_0 ) ; IDENT_2 . save ( node ) ; METHOD_4 ( STRING_1 , STRING_2 , node ) ; METHOD_4 ( STRING_3 , STRING_2 , node ) ; node = new org . opennms . IDENT_0 . model . METHOD_2 ( IDENT_3 . METHOD_3 ( ) , STRING_4 ) ; IDENT_2 . save ( node ) ; METHOD_4 ( STRING_5 , STRING_2 , node ) ; METHOD_4 ( STRING_6 , STRING_2 , node ) ; METHOD_4 ( STRING_7 , STRING_2 , node ) ; node = new org . opennms . IDENT_0 . model . METHOD_2 ( IDENT_3 . METHOD_3 ( ) , STRING_8 ) ; IDENT_2 . save ( node ) ; METHOD_4 ( STRING_9 , STRING_2 , node ) ; java . util . List < org . opennms . IDENT_0 . model . IDENT_4 . IDENT_5 > IDENT_6 = IDENT_7 . METHOD_5 ( 0 ) ; System . err . println ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } size ( ) { IDENT_8 . METHOD_6 ( ) . METHOD_7 ( ) ; try { return IDENT_9 . size ( ) ; } finally { IDENT_8 . METHOD_6 ( ) . METHOD_8 ( ) ; } }
org . junit . Assert . assertEquals ( 3 , IDENT_6 . size ( ) ) 