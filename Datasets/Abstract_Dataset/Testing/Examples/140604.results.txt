METHOD_0 ( ) { org . opennms . IDENT_0 . model . IDENT_1 node = new org . opennms . IDENT_0 . model . METHOD_1 ( ) ; org . opennms . IDENT_0 . model . IDENT_2 IDENT_3 = new org . opennms . IDENT_0 . model . METHOD_2 ( ) ; org . opennms . IDENT_0 . model . IDENT_4 IDENT_5 = IDENT_4 . IDENT_6 ; IDENT_3 . METHOD_3 ( IDENT_5 ) ; node . METHOD_4 ( IDENT_3 ) ; org . opennms . IDENT_0 . model . METHOD_2 IDENT_7 = new org . opennms . IDENT_0 . model . METHOD_2 ( ) ; org . opennms . IDENT_0 . model . IDENT_4 IDENT_8 = IDENT_4 . IDENT_9 ; IDENT_7 . METHOD_3 ( IDENT_8 ) ; node . METHOD_4 ( IDENT_7 ) ; java . lang . Object o = node . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { java . util . List < org . opennms . IDENT_0 . model . METHOD_2 > IDENT_10 = new java . util . ArrayList ( ) ; for ( org . opennms . IDENT_0 . model . METHOD_2 IDENT_3 : METHOD_6 ( ) ) { if ( IDENT_4 . IDENT_6 . equals ( IDENT_3 . METHOD_7 ( ) ) ) { IDENT_10 . add ( IDENT_3 ) ; } } if ( ( IDENT_10 . size ( ) ) < 1 ) { return null ; } else { if ( ( IDENT_10 . size ( ) ) > 1 ) { java . util . Collections . METHOD_8 ( IDENT_10 , new java . util . IDENT_11 < org . opennms . IDENT_0 . model . METHOD_2 > ( ) { @ org . opennms . IDENT_0 . model . Override public int compare ( org . opennms . IDENT_0 . model . METHOD_2 IDENT_12 , org . opennms . IDENT_0 . model . METHOD_2 IDENT_13 ) { if ( IDENT_12 == null ) { if ( IDENT_13 == null ) { return 0 ; } else { return - 1 ; } } else { if ( IDENT_13 == null ) { return 1 ; } else { if ( ( IDENT_12 . METHOD_9 ( ) ) == null ) { if ( ( IDENT_13 . METHOD_9 ( ) ) == null ) { return 0 ; } else { return 1 ; } } else { if ( ( IDENT_13 . METHOD_9 ( ) ) == null ) { return - 1 ; } else { return IDENT_13 . METHOD_9 ( ) . compareTo ( IDENT_12 . METHOD_9 ( ) ) ; } } } } } } ) ; org . opennms . IDENT_0 . model . METHOD_2 IDENT_14 = IDENT_10 . iterator ( ) . next ( ) ; org . opennms . IDENT_0 . model . METHOD_1 . LOG . warn ( STRING_0 , IDENT_15 , IDENT_14 . METHOD_10 ( ) ) ; return IDENT_14 ; } else { return IDENT_10 . iterator ( ) . next ( ) ; } } }
org . junit . Assert . assertSame ( o , IDENT_3 ) 