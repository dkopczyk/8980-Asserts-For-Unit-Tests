METHOD_0 ( ) { if ( ! ( METHOD_1 ( ) ) ) return ; java . util . Map < java . lang . String , java . lang . String > params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; params . put ( STRING_0 , STRING_1 ) ; com . ibm . IDENT_0 . services . client . base . IDENT_1 . IDENT_2 < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_4 = IDENT_6 . METHOD_2 ( params ) ; for ( com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 IDENT_7 : IDENT_4 ) { if ( ! ( IDENT_7 . METHOD_3 ( ) ) ) { IDENT_7 . delete ( ) ; } } java . util . List < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_8 = METHOD_4 ( STRING_2 , 5 , 1000 ) ; com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 IDENT_9 = IDENT_8 . get ( 1 ) ; com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 IDENT_10 = IDENT_8 . get ( 3 ) ; params = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; params . put ( STRING_3 , STRING_4 ) ; params . put ( STRING_5 , ( "" + ( IDENT_9 . METHOD_5 ( ) . getTime ( ) ) ) ) ; params . put ( STRING_6 , ( "" + ( IDENT_10 . METHOD_5 ( ) . getTime ( ) ) ) ) ; com . ibm . IDENT_0 . services . client . base . IDENT_1 . IDENT_2 < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_11 = IDENT_6 . METHOD_2 ( params ) ; System . out . println ( IDENT_11 . size ( ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return count ; }
org . junit . Assert . assertEquals ( 2 , IDENT_11 . size ( ) ) 