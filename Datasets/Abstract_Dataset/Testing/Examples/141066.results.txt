METHOD_0 ( ) { com . ibm . IDENT_0 . services . client . base . IDENT_1 . IDENT_2 < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_4 = IDENT_6 . METHOD_1 ( ) ; new com . ibm . IDENT_0 . services . client . METHOD_2 ( ) { @ com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . Override public void METHOD_3 ( ) { com . ibm . IDENT_0 . services . client . base . IDENT_1 . IDENT_2 < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > IDENT_7 = null ; try { java . io . IDENT_8 IDENT_9 = new java . io . METHOD_4 ( new java . io . METHOD_5 ( IDENT_10 ) ) ; IDENT_7 = ( ( com . ibm . IDENT_0 . services . client . base . IDENT_1 . IDENT_2 < com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 > ) ( IDENT_9 . METHOD_6 ( ) ) ) ; for ( java . util . Iterator iterator = IDENT_7 . iterator ( ) ; iterator . hasNext ( ) ; ) { com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 IDENT_11 = ( ( com . ibm . IDENT_0 . services . client . IDENT_3 . IDENT_4 . IDENT_5 ) ( iterator . next ( ) ) ) ; } } catch ( java . lang . Exception e ) { } "<AssertPlaceHolder>" ; } } . METHOD_7 ( IDENT_4 ) ; } size ( ) { return count ; }
org . junit . Assert . assertEquals ( true , ( ( IDENT_7 . size ( ) ) > 0 ) ) 