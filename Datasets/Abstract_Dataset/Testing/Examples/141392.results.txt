METHOD_0 ( ) { java . util . Collection < java . lang . String > IDENT_0 = IDENT_1 . METHOD_1 ( null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . Collection < org . apache . camel . IDENT_2 > IDENT_3 = IDENT_4 . METHOD_2 ( ) ; java . util . Collection < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( IDENT_3 . size ( ) ) ; java . util . regex . IDENT_5 pattern = null ; if ( org . apache . commons . lang3 . StringUtils . METHOD_3 ( IDENT_6 ) ) { pattern = java . util . regex . IDENT_5 . METHOD_4 ( IDENT_6 ) ; } for ( org . apache . camel . IDENT_2 IDENT_7 : IDENT_3 ) { java . lang . String uri = IDENT_7 . METHOD_5 ( ) ; if ( filter ( uri , pattern ) ) { IDENT_0 . add ( uri ) ; } } return IDENT_0 ; }
org . junit . Assert . assertThat ( IDENT_0 . size ( ) , org . hamcrest . CoreMatchers . is ( 2 ) ) 