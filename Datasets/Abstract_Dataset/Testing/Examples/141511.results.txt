METHOD_0 ( ) { final java . util . Map < java . lang . String , java . lang . Object > IDENT_0 = new java . util . METHOD_1 ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 ) ; IDENT_0 . put ( STRING_2 , INT_0 ) ; java . util . IDENT_1 < java . lang . String , java . lang . Object > IDENT_2 = new java . util . METHOD_1 < java . lang . String , java . lang . Object > ( IDENT_0 ) ; final org . IDENT_3 . IDENT_4 . jdbc . config . impl . IDENT_5 IDENT_6 = new org . IDENT_3 . IDENT_4 . jdbc . config . impl . METHOD_2 ( context ) ; IDENT_6 . resolve ( IDENT_2 ) ; for ( java . util . IDENT_7 < java . lang . String > e = IDENT_2 . keys ( ) ; e . METHOD_3 ( ) ; ) { java . lang . String key = ( ( java . lang . String ) ( e . METHOD_4 ( ) ) ) ; java . lang . String IDENT_8 = java . lang . String . valueOf ( IDENT_0 . get ( key ) ) ; java . lang . String IDENT_9 = java . lang . String . valueOf ( IDENT_2 . get ( key ) ) ; "<AssertPlaceHolder>" ; } } resolve ( java . util . IDENT_1 ) { java . util . IDENT_1 < java . lang . String , java . lang . Object > IDENT_10 = new java . util . METHOD_1 ( ) ; for ( java . util . IDENT_7 e = config . keys ( ) ; e . METHOD_3 ( ) ; ) { final java . lang . String key = ( ( java . lang . String ) ( e . METHOD_4 ( ) ) ) ; java . lang . String value = java . lang . String . valueOf ( config . get ( key ) ) ; if ( ( ( config . get ( key ) ) instanceof java . lang . String ) && ( METHOD_5 ( value ) ) ) { java . util . regex . IDENT_11 matcher = org . IDENT_3 . IDENT_4 . jdbc . config . impl . METHOD_2 . IDENT_12 . matcher ( value ) ; matcher . matches ( ) ; java . lang . String IDENT_13 = ( STRING_3 . equals ( matcher . group ( 1 ) ) ) ? value : IDENT_14 . get ( matcher . group ( 1 ) ) . resolve ( matcher . group ( 2 ) ) ; if ( IDENT_13 != null ) { IDENT_10 . put ( key , IDENT_13 ) ; } } else { IDENT_10 . put ( key , config . get ( key ) ) ; } } return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_9 ) 