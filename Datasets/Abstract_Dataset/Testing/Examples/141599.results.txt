METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; java . lang . String IDENT_2 = STRING_2 ; java . util . Map < java . lang . String , java . lang . Boolean > IDENT_3 = com . google . common . collect . ImmutableMap . of ( IDENT_1 , true , IDENT_2 , false ) ; javax . ws . rs . client . IDENT_4 target = mock ( javax . ws . rs . client . IDENT_4 . class ) ; when ( target . METHOD_1 ( anyString ( ) , any ( ) ) ) . thenReturn ( target ) ; com . IDENT_5 . IDENT_6 . http . internal . IDENT_7 IDENT_8 = new com . IDENT_5 . IDENT_6 . http . internal . METHOD_2 ( target ) ; com . IDENT_5 . IDENT_6 . http . internal . METHOD_2 result = com . IDENT_5 . IDENT_6 . util . internal . IDENT_9 . METHOD_3 ( IDENT_8 , IDENT_0 , IDENT_3 ) ; "<AssertPlaceHolder>" ; java . lang . String IDENT_10 = STRING_3 ; java . lang . String IDENT_11 = STRING_4 ; verify ( target ) . METHOD_1 ( ( IDENT_10 + IDENT_1 ) , true ) ; verify ( target ) . METHOD_1 ( ( IDENT_10 + IDENT_11 ) , false ) ; } METHOD_3 ( com . IDENT_5 . IDENT_6 . http . internal . METHOD_2 , java . lang . String , java . util . Map ) { if ( IDENT_0 == null ) { IDENT_0 = "" ; } if ( METHOD_1 != null ) { for ( java . util . Map . Entry < java . lang . String , ? > e : METHOD_1 . entrySet ( ) ) { target = com . IDENT_5 . IDENT_6 . util . internal . IDENT_9 . METHOD_4 ( target , ( IDENT_0 + ( e . getKey ( ) ) ) , e . getValue ( ) ) ; } } return target ; }
org . junit . Assert . assertNotNull ( result ) 