METHOD_0 ( ) { javax . ws . rs . client . IDENT_0 target = mock ( javax . ws . rs . client . IDENT_0 . class ) ; com . IDENT_1 . IDENT_2 . http . internal . IDENT_3 IDENT_4 = new com . IDENT_1 . IDENT_2 . http . internal . METHOD_1 ( target ) ; com . IDENT_1 . IDENT_2 . http . internal . METHOD_1 result = com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_2 ( IDENT_4 , STRING_0 , new java . util . ArrayList < java . lang . String > ( ) , IDENT_6 . IDENT_7 ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . METHOD_3 ( target ) ; } METHOD_2 ( com . IDENT_1 . IDENT_2 . http . internal . METHOD_1 , java . lang . String , java . util . List , com . IDENT_1 . IDENT_2 . util . internal . IDENT_6 ) { if ( org . apache . commons . lang3 . StringUtils . METHOD_4 ( IDENT_8 ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } if ( ( values != null ) && ( ! ( values . isEmpty ( ) ) ) ) { final java . util . List < java . lang . Object > IDENT_9 = new java . util . ArrayList ( ) ; for ( T v : values ) { if ( v == null ) { continue ; } if ( v instanceof java . lang . IDENT_10 ) { final java . lang . Object IDENT_11 = com . IDENT_1 . IDENT_2 . util . internal . IDENT_12 . METHOD_5 ( v , STRING_2 ) ; if ( IDENT_11 != null ) { IDENT_9 . add ( ( ( java . lang . String ) ( IDENT_11 ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_3 , v . getClass ( ) . METHOD_6 ( ) ) ) ; } } else { IDENT_9 . add ( v ) ; } } if ( IDENT_9 . isEmpty ( ) ) { return target ; } if ( IDENT_13 == ( IDENT_6 . IDENT_14 ) ) { target = target . METHOD_7 ( IDENT_8 , com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_8 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_9 , STRING_4 ) ) ) ; } else if ( IDENT_13 == ( IDENT_6 . IDENT_15 ) ) { target = target . METHOD_7 ( IDENT_8 , com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_8 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_9 , STRING_5 ) ) ) ; } else if ( IDENT_13 == ( IDENT_6 . IDENT_16 ) ) { target = target . METHOD_7 ( IDENT_8 , com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_8 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_9 , STRING_6 ) ) ) ; } else if ( IDENT_13 == ( IDENT_6 . IDENT_17 ) ) { target = target . METHOD_7 ( IDENT_8 , com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_8 ( org . apache . commons . lang3 . StringUtils . join ( IDENT_9 , STRING_7 ) ) ) ; } else if ( IDENT_13 == ( IDENT_6 . IDENT_7 ) ) { final java . lang . Object [ ] IDENT_18 = new java . lang . Object [ IDENT_9 . size ( ) ] ; for ( int i = 0 ; i < ( IDENT_9 . size ( ) ) ; i ++ ) { IDENT_18 [ i ] = com . IDENT_1 . IDENT_2 . util . internal . IDENT_5 . METHOD_8 ( IDENT_9 . get ( i ) ) ; } target = target . METHOD_7 ( IDENT_8 , IDENT_18 ) ; } else { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_8 , IDENT_13 ) ) ; } } return target ; }
org . junit . Assert . assertTrue ( ( result == IDENT_4 ) ) 