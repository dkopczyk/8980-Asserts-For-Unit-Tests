METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( METHOD_2 ( ) ) ; java . io . ByteArrayOutputStream map = new java . io . ByteArrayOutputStream ( ) ; IDENT_4 . write ( map ) ; IDENT_4 . METHOD_3 ( new org . IDENT_0 . commons . IDENT_5 . METHOD_4 ( ) ) ; try { IDENT_4 . read ( new java . io . ByteArrayInputStream ( map . toByteArray ( ) ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IllegalStateException e ) { } } read ( java . io . InputStream ) { try { javax . xml . IDENT_6 . IDENT_7 IDENT_8 = org . IDENT_0 . IDENT_1 . map . IDENT_9 . IDENT_10 . METHOD_5 ( ) ; javax . xml . IDENT_6 . IDENT_11 < net . opengis . IDENT_12 . IDENT_13 > IDENT_14 = ( ( javax . xml . IDENT_6 . IDENT_11 < net . opengis . IDENT_12 . IDENT_13 > ) ( IDENT_8 . METHOD_6 ( in ) ) ) ; METHOD_7 ( IDENT_14 . getValue ( ) ) ; } catch ( javax . xml . IDENT_6 . IDENT_15 ex ) { throw new java . lang . IllegalArgumentException ( org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_16 . METHOD_8 ( STRING_0 ) , ex ) ; } }
org . junit . Assert . assertTrue ( false ) 