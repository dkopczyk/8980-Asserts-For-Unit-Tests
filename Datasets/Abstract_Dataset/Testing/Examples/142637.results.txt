METHOD_0 ( ) { final com . orientechnologies . common . IDENT_0 . IDENT_1 IDENT_2 = new com . orientechnologies . common . IDENT_0 . METHOD_1 ( 1 ) ; com . orientechnologies . common . IDENT_0 . IDENT_3 IDENT_4 = IDENT_2 . METHOD_2 ( true ) ; com . orientechnologies . orient . core . storage . cache . IDENT_5 IDENT_6 = new com . orientechnologies . orient . core . storage . cache . METHOD_3 ( IDENT_4 , IDENT_2 , 0 , 0 ) ; com . orientechnologies . orient . core . storage . cache . IDENT_7 IDENT_8 = new com . orientechnologies . orient . core . storage . cache . METHOD_4 ( 1 , 10 , IDENT_6 ) ; IDENT_9 . METHOD_5 ( IDENT_8 ) ; IDENT_8 . METHOD_6 ( ) ; com . orientechnologies . orient . core . storage . cache . IDENT_7 IDENT_10 = IDENT_9 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; IDENT_2 . METHOD_8 ( IDENT_4 ) ; IDENT_2 . METHOD_9 ( ) ; } METHOD_7 ( ) { com . orientechnologies . orient . core . storage . cache . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 IDENT_15 = IDENT_16 ; boolean IDENT_17 = false ; com . orientechnologies . orient . core . storage . cache . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_18 IDENT_19 = null ; int IDENT_20 = 0 ; do { while ( ( ( IDENT_15 . IDENT_21 ) || ( ( IDENT_19 = IDENT_15 . entry ) == null ) ) || ( METHOD_10 ( IDENT_19 . entry ) ) ) { if ( ( IDENT_19 != null ) && ( METHOD_10 ( IDENT_19 . entry ) ) ) IDENT_20 ++ ; com . orientechnologies . orient . core . storage . cache . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 next = IDENT_15 . next . get ( ) ; if ( next == null ) { if ( ( cache . size ( ) ) == IDENT_20 ) return null ; IDENT_15 = IDENT_16 ; IDENT_20 = 0 ; continue ; } IDENT_15 = next ; } if ( cache . remove ( IDENT_19 . key , IDENT_19 ) ) { IDENT_19 . IDENT_22 . METHOD_11 ( ) . METHOD_12 ( ) ; try { IDENT_19 . IDENT_17 = true ; com . orientechnologies . orient . core . storage . cache . IDENT_11 . IDENT_12 . IDENT_13 . IDENT_14 node = IDENT_19 . IDENT_23 . get ( ) ; IDENT_19 . IDENT_23 . METHOD_13 ( null ) ; METHOD_14 ( node ) ; IDENT_17 = true ; } finally { IDENT_19 . IDENT_22 . METHOD_11 ( ) . METHOD_15 ( ) ; } } else { IDENT_15 = IDENT_16 ; IDENT_20 = 0 ; } } while ( ! IDENT_17 ) ; METHOD_16 ( ) ; return IDENT_19 . entry ; }
org . junit . Assert . assertNull ( IDENT_10 ) 