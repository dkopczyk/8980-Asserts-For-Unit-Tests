METHOD_0 ( ) { com . orientechnologies . orient . object . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = this . IDENT_4 . newInstance ( com . orientechnologies . orient . object . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; com . orientechnologies . orient . object . IDENT_0 . IDENT_1 . IDENT_2 IDENT_5 = this . IDENT_4 . newInstance ( com . orientechnologies . orient . object . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; java . util . Map < java . lang . String , java . lang . String > map = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; map . put ( STRING_0 , "value" ) ; IDENT_3 . METHOD_1 ( map ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_6 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_6 . put ( STRING_0 , "value" ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_7 = IDENT_5 . METHOD_2 ( ) ; IDENT_6 . put ( STRING_0 , "value" ) ; IDENT_3 . METHOD_3 ( ) . add ( IDENT_5 ) ; IDENT_3 = this . IDENT_4 . save ( IDENT_3 ) ; for ( java . lang . String key : IDENT_3 . METHOD_2 ( ) . METHOD_4 ( ) ) { "<AssertPlaceHolder>" ; } IDENT_3 . METHOD_2 ( ) . put ( STRING_1 , STRING_2 ) ; IDENT_5 . METHOD_2 ( ) . put ( STRING_3 , STRING_4 ) ; IDENT_3 = this . IDENT_4 . save ( IDENT_3 ) ; IDENT_3 . METHOD_2 ( ) . get ( STRING_0 ) ; IDENT_3 . METHOD_5 ( ) . get ( STRING_1 ) ; IDENT_3 . METHOD_5 ( ) . put ( STRING_3 , STRING_4 ) ; } equals ( java . lang . Object ) { return graph . equals ( obj ) ; }
org . junit . Assert . assertTrue ( key . equals ( STRING_0 ) ) 