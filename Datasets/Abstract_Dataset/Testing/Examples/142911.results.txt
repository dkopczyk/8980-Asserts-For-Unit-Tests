METHOD_0 ( ) { try { final net . sf . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new net . sf . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 ) ; final net . sf . IDENT_0 . IDENT_4 . IDENT_5 IDENT_6 = new net . sf . IDENT_0 . IDENT_4 . METHOD_2 ( STRING_1 ) ; final java . awt . image . IDENT_7 image = IDENT_6 . METHOD_3 ( ) ; IDENT_3 . METHOD_4 ( image , STRING_2 ) ; } catch ( final java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( java . awt . image . IDENT_7 , java . lang . String ) { java . lang . String type = IDENT_8 . substring ( ( ( IDENT_8 . METHOD_5 ( STRING_3 ) ) + 1 ) , IDENT_8 . length ( ) ) . toLowerCase ( ) ; if ( ( ( ( ! ( type . equals ( STRING_4 ) ) ) && ( ! ( type . equals ( STRING_5 ) ) ) ) && ( ! ( type . equals ( STRING_6 ) ) ) ) && ( ! ( type . equals ( STRING_7 ) ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } java . io . File IDENT_9 = new java . io . File ( ( ( ( directory ) + ( java . io . File . IDENT_10 ) ) + IDENT_8 ) ) ; try { javax . IDENT_11 . IDENT_12 . write ( IDENT_13 , type , IDENT_9 ) ; } catch ( java . io . IOException e ) { throw new java . io . IOException ( STRING_9 , e ) ; } }
org . junit . Assert . assertEquals ( STRING_8 , e . getMessage ( ) ) 