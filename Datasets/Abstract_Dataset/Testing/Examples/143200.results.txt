METHOD_0 ( ) { java . lang . String id = STRING_0 6 ; IDENT_0 . graph . IDENT_1 graph = METHOD_1 ( STRING_1 ) ; org . IDENT_2 . IDENT_3 . model . IDENT_4 x = graph . METHOD_2 ( id ) ; java . util . List < java . lang . String > IDENT_5 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_5 . add ( STRING_0 ) ; IDENT_5 . add ( STRING_2 ) ; IDENT_5 . add ( STRING_0 2 ) ; IDENT_5 . add ( STRING_0 0 ) ; IDENT_5 . add ( STRING_3 ) ; IDENT_5 . add ( STRING_4 ) ; IDENT_5 . add ( STRING_0 1 ) ; System . out . println ( ( STRING_5 + x ) ) ; IDENT_0 . graph . IDENT_6 . IDENT_7 IDENT_8 = graph . METHOD_3 ( x , IDENT_5 ) ; java . util . Set < java . lang . String > IDENT_9 = IDENT_8 . METHOD_4 ( id ) ; for ( java . lang . String p : IDENT_9 ) { System . out . println ( ( STRING_0 3 + p ) ) ; } java . util . Set < java . lang . String > IDENT_10 = IDENT_8 . METHOD_5 ( id ) ; int IDENT_11 = 0 ; for ( java . lang . String c : IDENT_10 ) { System . out . println ( ( STRING_6 + c ) ) ; if ( c . equals ( STRING_0 4 ) ) { IDENT_11 ++ ; } else if ( c . equals ( STRING_7 ) ) { IDENT_11 ++ ; } else { org . junit . Assert . fail ( ( ( STRING_8 + c ) + STRING_9 ) ) ; } } System . out . println ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } size ( ) { return this . IDENT_12 ; }
org . junit . Assert . assertEquals ( 2 , IDENT_10 . size ( ) ) 