METHOD_0 ( ) { IDENT_0 . init ( conf ) ; IDENT_0 . start ( ) ; IDENT_0 . METHOD_1 ( conf , IDENT_1 . METHOD_2 ( ) ) ; org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = mock ( org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_4 . class ) ; org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_4 IDENT_6 = mock ( org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_4 . class ) ; when ( IDENT_5 . getName ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_6 . getName ( ) ) . thenReturn ( STRING_1 ) ; org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_7 IDENT_8 = IDENT_0 . METHOD_3 ( ) ; org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_9 IDENT_10 = IDENT_8 . METHOD_4 ( STRING_2 , true ) ; IDENT_10 . METHOD_5 ( IDENT_5 ) ; IDENT_10 . METHOD_5 ( IDENT_6 ) ; org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_11 IDENT_12 = IDENT_0 . METHOD_6 ( IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_11 , org . apache . hadoop . yarn . server . IDENT_2 . IDENT_0 . IDENT_3 . IDENT_11 ) { java . lang . String IDENT_13 = IDENT_10 . getName ( ) ; java . lang . String IDENT_14 = IDENT_15 . getName ( ) ; int IDENT_16 = - 1 ; for ( int i = 0 ; i < ( java . lang . Math . max ( IDENT_13 . length ( ) , IDENT_14 . length ( ) ) ) ; i ++ ) { if ( ( ( ( IDENT_13 . length ( ) ) <= i ) || ( ( IDENT_14 . length ( ) ) <= i ) ) || ( ( IDENT_13 . charAt ( i ) ) != ( IDENT_14 . charAt ( i ) ) ) ) { return IDENT_17 . METHOD_7 ( IDENT_13 . substring ( 0 , IDENT_16 ) ) ; } else if ( ( IDENT_13 . charAt ( i ) ) == STRING_3 ) { IDENT_16 = i ; } } return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_12 , IDENT_10 ) 