METHOD_0 ( ) { IDENT_0 . data . IDENT_1 x = IDENT_2 . METHOD_1 ( 0 ) . METHOD_2 ( IDENT_0 . data . filter . IDENT_3 . IDENT_4 . with ( Math :: IDENT_5 ) ) . METHOD_3 ( STRING_0 ) . stream ( ) . METHOD_4 ( ) . METHOD_5 ( ) ; double min = IDENT_0 . core . IDENT_6 . IDENT_7 . of ( x ) . value ( ) ; double max = IDENT_0 . core . IDENT_6 . IDENT_8 . of ( x ) . value ( ) ; IDENT_0 . IDENT_9 . base . IDENT_10 IDENT_11 = METHOD_6 ( 1 , 2 ) . add ( METHOD_7 ( x ) ) . add ( METHOD_7 ( x ) . METHOD_8 ( ( - 2 ) , ( - 1 ) ) ) ; if ( IDENT_0 . IDENT_9 . IDENT_12 . IDENT_13 ) IDENT_0 . IDENT_14 . IDENT_15 . METHOD_9 ( IDENT_11 ) ; if ( IDENT_0 . IDENT_9 . IDENT_12 . IDENT_16 ) IDENT_0 . IDENT_9 . base . IDENT_17 . METHOD_10 ( IDENT_11 , INT_0 , 200 , ( ( IDENT_0 . IDENT_9 . IDENT_12 . root ) + STRING_1 ) ) ; java . awt . image . IDENT_18 IDENT_19 = IDENT_0 . IDENT_9 . base . IDENT_17 . METHOD_11 ( IDENT_11 , INT_0 , 200 ) ; java . awt . image . IDENT_18 IDENT_20 = javax . IDENT_21 . IDENT_22 . read ( this . getClass ( ) . getResourceAsStream ( STRING_2 ) ) ; "<AssertPlaceHolder>" ; } METHOD_12 ( java . awt . image . IDENT_18 , java . awt . image . IDENT_18 ) { if ( ( ( IDENT_23 . METHOD_13 ( ) ) == ( IDENT_24 . METHOD_13 ( ) ) ) && ( ( IDENT_23 . METHOD_14 ( ) ) == ( IDENT_24 . METHOD_14 ( ) ) ) ) { return true ; } return false ; }
org . junit . Assert . assertTrue ( METHOD_12 ( IDENT_19 , IDENT_20 ) ) 