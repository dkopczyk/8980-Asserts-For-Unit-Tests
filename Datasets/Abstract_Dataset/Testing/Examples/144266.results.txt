METHOD_0 ( ) { br . com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_3 IDENT_4 = br . com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 , STRING_1 ) ; when ( IDENT_5 . METHOD_2 ( ) ) . thenReturn ( IDENT_4 ) ; br . com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_3 IDENT_2 = IDENT_6 . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; org . mockito . IDENT_7 IDENT_8 = METHOD_3 ( IDENT_5 , IDENT_9 , IDENT_10 ) ; METHOD_3 . verify ( IDENT_5 , times ( 1 ) ) . METHOD_2 ( ) ; METHOD_3 . verify ( IDENT_9 , times ( 0 ) ) . METHOD_2 ( ) ; METHOD_3 . verify ( IDENT_10 , times ( 0 ) ) . METHOD_2 ( ) ; METHOD_3 . METHOD_4 ( ) ; } METHOD_2 ( ) { br . com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_11 . LOGGER . info ( STRING_2 ) ; for ( br . com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_12 IDENT_13 : IDENT_14 ) { try { return IDENT_13 . METHOD_2 ( ) ; } catch ( java . lang . Exception e ) { } } throw new br . com . IDENT_0 . IDENT_1 . api . exception . METHOD_5 ( new java . lang . RuntimeException ( ( STRING_3 + STRING_4 ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_2 ) 