METHOD_0 ( ) { javax . sql . IDENT_0 IDENT_1 = METHOD_1 ( javax . sql . IDENT_0 . class ) ; java . sql . IDENT_2 connection = METHOD_1 ( java . sql . IDENT_2 . class ) ; expect ( IDENT_1 . METHOD_2 ( ) ) . andReturn ( connection ) ; java . lang . String sql = STRING_0 ; java . sql . IDENT_3 stmt = METHOD_1 ( java . sql . IDENT_3 . class ) ; expect ( connection . METHOD_3 ( sql ) ) . andReturn ( stmt ) ; stmt . METHOD_4 ( 1 , STRING_1 ) ; com . IDENT_4 . sql . IDENT_5 IDENT_6 = new com . IDENT_4 . sql . METHOD_5 ( ) ; java . lang . String [ ] IDENT_7 = new java . lang . String [ ] { STRING_2 , STRING_3 } ; IDENT_6 . METHOD_6 ( IDENT_7 ) ; java . util . List < com . IDENT_8 . data . person . Person > IDENT_9 = METHOD_7 ( STRING_1 ) ; IDENT_6 . METHOD_8 ( METHOD_9 ( IDENT_9 ) ) ; expect ( stmt . METHOD_10 ( ) ) . andReturn ( IDENT_6 ) ; IDENT_6 . METHOD_11 ( 1 ) ; stmt . close ( ) ; connection . close ( ) ; replay ( IDENT_1 , connection , stmt ) ; com . IDENT_8 . data . jdbc . IDENT_10 dao = new com . IDENT_8 . data . jdbc . METHOD_12 ( ) ; dao . METHOD_13 ( IDENT_1 ) ; java . util . List < com . IDENT_8 . data . person . Person > IDENT_11 = dao . METHOD_14 ( STRING_1 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_1 , connection , stmt ) ; IDENT_6 . verify ( ) ; } METHOD_14 ( java . lang . String ) { java . lang . String sql = STRING_4 ; java . lang . String [ ] args = new java . lang . String [ ] { IDENT_12 } ; org . springframework . jdbc . core . IDENT_13 mapper = new com . IDENT_8 . data . IDENT_14 . jdbc . METHOD_15 ( ) ; return METHOD_16 ( ) . query ( sql , args , mapper ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_11 ) 