METHOD_0 ( ) { au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( 0 , 1 , 1 , true , 1 ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_6 = new au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( 0 , 2 , 2 , true , 1 ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_7 = new au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( 0 , 3 , 3 , true , 1 ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . METHOD_2 ( IDENT_5 , IDENT_6 ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . METHOD_2 ( IDENT_6 , IDENT_7 ) ; IDENT_7 . METHOD_3 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } next ( ) { METHOD_4 ( ) ; if ( output . isEmpty ( ) ) { throw new java . util . METHOD_5 ( ) ; } IDENT_8 . IDENT_9 node = output . METHOD_6 ( ) ; assert ( IDENT_10 . isEmpty ( ) ) || ( ( METHOD_7 ( IDENT_10 . METHOD_8 ( ) ) ) > ( ( node . IDENT_11 ) + ( IDENT_12 ) ) ) ; if ( ( node . read . METHOD_9 ( ) ) == node ) { IDENT_13 . remove ( node . read ) ; if ( au . edu . IDENT_0 . IDENT_1 . IDENT_14 . IDENT_15 ) { assert IDENT_10 . stream ( ) . METHOD_10 ( ( r ) -> ( METHOD_7 ( r ) ) > ( node . IDENT_11 + ( IDENT_12 ) ) ) ; } } return node ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_5 . next ( ) . get ( 0 ) ) 