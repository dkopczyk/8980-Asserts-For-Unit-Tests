METHOD_0 ( ) { java . util . List < au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > input = new java . util . ArrayList < au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > ( ) ; input . add ( METHOD_1 ( 4 , STRING_0 , 1 , 1 , false ) ) ; input . add ( METHOD_1 ( 4 , STRING_0 , 2 , 2 , false ) ) ; input . add ( METHOD_1 ( 4 , STRING_0 , 3 , 3 , false ) ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( input . get ( 0 ) , input . get ( 1 ) ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( input . get ( 1 ) , input . get ( 2 ) ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 IDENT_6 = ( ( au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 ) ( METHOD_3 ( input , 10 ) ) ) ; IDENT_6 . METHOD_4 ( Integer . MAX_VALUE ) ; IDENT_6 . remove ( input . get ( 1 ) ) ; IDENT_6 . remove ( input . get ( 0 ) ) ; IDENT_6 . remove ( input . get ( 2 ) ) ; IDENT_6 . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( int ) { au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 IDENT_8 = METHOD_6 ( IDENT_9 ) ; if ( IDENT_8 == null ) return null ; return METHOD_7 ( IDENT_8 ) ; }
org . junit . Assert . assertNull ( IDENT_6 . METHOD_4 ( Integer . MAX_VALUE ) ) 