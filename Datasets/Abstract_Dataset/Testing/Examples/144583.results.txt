METHOD_0 ( ) { au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = METHOD_1 ( ) ; au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = METHOD_2 ( IDENT_5 ) ; IDENT_5 . METHOD_3 ( ) . k = 4 ; java . util . List < au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 > input = new java . util . ArrayList < au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 > ( ) ; input . add ( METHOD_4 ( au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 , METHOD_5 ( 0 , 10 , STRING_0 ) ) ) ; input . add ( METHOD_4 ( au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 , METHOD_5 ( 0 , 10 , STRING_1 ) ) ) ; input . add ( METHOD_4 ( au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 , METHOD_5 ( 0 , 100 , STRING_0 ) ) ) ; input . add ( METHOD_4 ( au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 , METHOD_5 ( 0 , 100 , STRING_1 ) ) ) ; input . METHOD_6 ( IDENT_11 . IDENT_12 ) ; java . util . ArrayList < IDENT_13 . IDENT_14 . IDENT_15 > r = com . google . common . collect . Lists . newArrayList ( new au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_7 ( IDENT_5 , IDENT_7 , new au . edu . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_8 ( STRING_2 ) , input . iterator ( ) ) ) ; "<AssertPlaceHolder>" ; } size ( ) { org . junit . Assert . assertEquals ( 4 , METHOD_9 ( ) . size ( ) ) ; org . junit . Assert . assertEquals ( 2 , METHOD_10 ( ) . size ( ) ) ; }
org . junit . Assert . assertEquals ( 4 , r . size ( ) ) 