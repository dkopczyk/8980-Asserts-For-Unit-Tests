METHOD_0 ( ) { int size = 8 ; java . util . List < au . edu . IDENT_0 . IDENT_1 . graph . IDENT_2 > nodes = new java . util . ArrayList < au . edu . IDENT_0 . IDENT_1 . graph . IDENT_2 > ( ) ; for ( int IDENT_3 = 0 ; IDENT_3 < size ; IDENT_3 ++ ) { for ( int IDENT_4 = IDENT_3 ; IDENT_4 < size ; IDENT_4 ++ ) { for ( int IDENT_5 = 0 ; IDENT_5 < size ; IDENT_5 ++ ) { for ( int IDENT_6 = IDENT_5 ; IDENT_6 < size ; IDENT_6 ++ ) { nodes . add ( new au . edu . IDENT_0 . IDENT_1 . graph . METHOD_1 ( IDENT_3 , IDENT_4 , IDENT_5 , IDENT_6 , 1 ) ) ; } } } } au . edu . IDENT_0 . IDENT_1 . graph . METHOD_1 [ ] IDENT_7 = METHOD_2 ( nodes . toArray ( new au . edu . IDENT_0 . IDENT_1 . graph . METHOD_1 [ nodes . size ( ) ] ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_8 . size ( ) ; }
org . junit . Assert . assertEquals ( ( size * size ) , IDENT_7 . length ) 