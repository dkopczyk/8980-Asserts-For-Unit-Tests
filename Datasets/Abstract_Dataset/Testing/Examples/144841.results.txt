METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_0 . add ( STRING_0 ) ; IDENT_0 . add ( STRING_1 ) ; java . lang . String [ ] IDENT_1 = new java . lang . String [ ] { STRING_2 0 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_2 , STRING_8 , STRING_9 } ; IDENT_2 = com . IDENT_3 . IDENT_4 . type . IDENT_5 . METHOD_1 ( null , IDENT_6 , IDENT_0 ) ; for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( java . lang . String ) { java . lang . String result = IDENT_7 . get ( IDENT_8 ) ; if ( result == null ) { if ( ( IDENT_9 ) != null ) { int IDENT_10 = IDENT_9 . indexOf ( STRING_10 ) ; while ( ( result == null ) && ( IDENT_10 > 0 ) ) { java . lang . String IDENT_11 = ( IDENT_9 . substring ( 0 , ( IDENT_10 + 1 ) ) ) + IDENT_8 ; result = METHOD_3 ( IDENT_11 ) ; IDENT_10 = IDENT_9 . indexOf ( STRING_10 , ( IDENT_10 + 1 ) ) ; } if ( result == null ) { java . lang . String IDENT_12 = ( ( IDENT_9 ) + STRING_10 ) + ( IDENT_8 . replace ( STRING_11 , STRING_10 ) ) ; result = METHOD_3 ( IDENT_12 ) ; } } if ( result == null ) { result = METHOD_4 ( IDENT_8 ) ; } if ( result != null ) { IDENT_7 . put ( IDENT_8 , result ) ; } } return result ; }
org . junit . Assert . assertEquals ( IDENT_1 [ i ] , IDENT_2 . METHOD_2 ( IDENT_1 [ i ] ) ) 