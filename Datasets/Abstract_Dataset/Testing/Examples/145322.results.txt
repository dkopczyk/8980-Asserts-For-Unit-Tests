METHOD_0 ( ) { java . util . List < java . io . IDENT_0 > IDENT_1 = new java . util . ArrayList ( ) ; com . pentaho . IDENT_2 . data . IDENT_3 . impl . IDENT_4 . hbase . IDENT_5 . IDENT_6 IDENT_7 = IDENT_8 . METHOD_1 ( STRING_0 , mock ( java . util . Properties . class ) ) ; com . pentaho . IDENT_2 . data . IDENT_3 . impl . IDENT_4 . hbase . IDENT_9 connection = IDENT_7 . METHOD_2 ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { IDENT_1 . add ( IDENT_8 . METHOD_1 ( STRING_1 ) ) ; } for ( java . io . IDENT_0 IDENT_10 : IDENT_1 ) { IDENT_10 . close ( ) ; } IDENT_1 . METHOD_3 ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { IDENT_1 . add ( IDENT_8 . METHOD_1 ( STRING_0 , mock ( java . util . Properties . class ) ) ) ; } for ( java . io . IDENT_0 IDENT_10 : IDENT_1 ) { IDENT_10 . close ( ) ; } IDENT_7 . close ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( ) { com . pentaho . IDENT_2 . data . IDENT_3 . impl . IDENT_4 . hbase . IDENT_5 . IDENT_11 result = METHOD_4 ( ) ; if ( result != null ) { IDENT_12 . remove ( result ) ; } else { result = create ( ) ; } IDENT_13 . add ( result ) ; return new com . pentaho . IDENT_2 . data . IDENT_3 . impl . IDENT_4 . hbase . IDENT_5 . METHOD_5 ( this , result ) ; }
org . junit . Assert . assertEquals ( connection , IDENT_8 . METHOD_1 ( ) . METHOD_2 ( ) ) 