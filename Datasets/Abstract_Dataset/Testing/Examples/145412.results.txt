METHOD_0 ( ) { org . pentaho . IDENT_0 . api . hbase . IDENT_1 IDENT_2 = mock ( org . pentaho . IDENT_0 . api . hbase . IDENT_1 . class ) ; org . pentaho . IDENT_0 . api . hbase . IDENT_3 IDENT_4 = mock ( org . pentaho . IDENT_0 . api . hbase . IDENT_3 . class ) ; when ( IDENT_2 . METHOD_1 ( ) ) . thenReturn ( IDENT_4 ) ; org . pentaho . IDENT_0 . api . hbase . meta . IDENT_5 IDENT_6 = mock ( org . pentaho . IDENT_0 . api . hbase . meta . IDENT_5 . class ) ; when ( IDENT_2 . METHOD_2 ( ) ) . thenReturn ( IDENT_6 ) ; org . pentaho . IDENT_0 . api . hbase . meta . IDENT_7 IDENT_8 = mock ( org . pentaho . IDENT_0 . api . hbase . meta . IDENT_7 . class ) ; when ( IDENT_8 . METHOD_3 ( ) ) . thenReturn ( true ) ; when ( IDENT_6 . METHOD_4 ( METHOD_5 ( STRING_0 ) , METHOD_5 ( STRING_1 ) , METHOD_5 ( STRING_2 ) , METHOD_6 ( ) , METHOD_6 ( ) , METHOD_6 ( ) ) ) . thenReturn ( IDENT_8 ) ; org . pentaho . IDENT_0 . api . hbase . meta . IDENT_7 column = org . pentaho . IDENT_9 . data . IDENT_10 . plugins . hbase . mapping . IDENT_11 . METHOD_7 ( STRING_2 , STRING_0 , STRING_1 , org . pentaho . IDENT_9 . data . IDENT_10 . plugins . hbase . mapping . IDENT_12 . IDENT_13 , STRING_3 , IDENT_2 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_8 ) . METHOD_8 ( org . pentaho . IDENT_9 . data . IDENT_10 . plugins . hbase . mapping . IDENT_12 . IDENT_13 ) ; verify ( IDENT_8 ) . METHOD_9 ( IDENT_14 . IDENT_15 ) ; } METHOD_7 ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , java . lang . String , org . pentaho . IDENT_0 . api . hbase . IDENT_1 ) { org . pentaho . IDENT_0 . api . hbase . meta . IDENT_5 IDENT_6 = IDENT_2 . METHOD_2 ( ) ; org . pentaho . IDENT_0 . api . hbase . meta . IDENT_7 IDENT_8 = IDENT_6 . METHOD_4 ( IDENT_16 , IDENT_17 , IDENT_18 , 0 , org . pentaho . IDENT_9 . data . IDENT_10 . plugins . hbase . mapping . IDENT_11 . IDENT_19 , org . pentaho . IDENT_9 . data . IDENT_10 . plugins . hbase . mapping . IDENT_11 . IDENT_19 ) ; try { IDENT_8 . METHOD_8 ( type ) ; if ( ( IDENT_8 . METHOD_3 ( ) ) && ( ! ( org . pentaho . di . core . IDENT_20 . isEmpty ( IDENT_21 ) ) ) ) { org . pentaho . IDENT_0 . api . hbase . IDENT_3 IDENT_4 = IDENT_2 . METHOD_1 ( ) ; java . lang . Object [ ] IDENT_22 = IDENT_4 . METHOD_10 ( IDENT_21 ) ; IDENT_8 . METHOD_11 ( IDENT_22 ) ; IDENT_8 . METHOD_9 ( IDENT_14 . IDENT_15 ) ; } return IDENT_8 ; } catch ( java . lang . IllegalArgumentException e ) { throw new org . pentaho . di . core . exception . METHOD_12 ( e ) ; } }
org . junit . Assert . assertNotNull ( column ) 