METHOD_0 ( ) { byte [ ] val = new byte [ ] { 1 , 2 , 0 , 3 } ; byte [ ] IDENT_0 = new byte [ ] { INT_0 , 1 , 2 , 0 , 3 } ; org . apache . hadoop . hbase . util . IDENT_1 buf = new org . apache . hadoop . hbase . util . METHOD_1 ( ( ( val . length ) + 1 ) ) ; org . apache . hadoop . hbase . util . IDENT_2 . METHOD_2 ( buf , val , IDENT_3 . IDENT_4 ) ; "<AssertPlaceHolder>" ; buf . set ( ( ( val . length ) + 2 ) ) ; org . apache . hadoop . hbase . util . IDENT_2 . METHOD_2 ( buf , val , IDENT_3 . IDENT_5 ) ; org . junit . Assert . fail ( STRING_0 ) ; } getBytes ( ) { if ( ! ( METHOD_3 ( ) ) ) throw new java . lang . METHOD_4 ( ) ; byte [ ] bytes = new byte [ this . IDENT_6 ] ; int offset = 0 ; for ( java . nio . ByteBuffer IDENT_7 : this . IDENT_8 ) { int length = IDENT_7 . METHOD_5 ( ) ; IDENT_7 . get ( bytes , offset , length ) ; offset += length ; } return bytes ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , buf . getBytes ( ) ) 