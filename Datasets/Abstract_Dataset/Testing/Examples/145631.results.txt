METHOD_0 ( ) { org . pentaho . hadoop . IDENT_0 . IDENT_1 IDENT_2 = new org . pentaho . hadoop . IDENT_0 . METHOD_1 ( ) ; org . apache . commons . IDENT_3 . IDENT_4 root = org . apache . commons . IDENT_3 . IDENT_5 . METHOD_2 ( ) . METHOD_3 ( org . pentaho . hadoop . IDENT_0 . IDENT_6 . IDENT_7 ) ; java . util . List < java . net . URL > IDENT_8 = IDENT_2 . METHOD_4 ( root , root . toString ( ) ) ; count = IDENT_8 . size ( ) ; java . util . List < java . net . URL > list = IDENT_2 . METHOD_5 ( IDENT_8 , null ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . List , java . lang . String ) { java . util . regex . IDENT_9 pattern ; java . util . regex . IDENT_10 matcher ; java . lang . String [ ] IDENT_11 ; if ( ! ( ( IDENT_12 == null ) || ( IDENT_12 . trim ( ) . isEmpty ( ) ) ) ) { IDENT_11 = IDENT_12 . split ( STRING_0 ) ; if ( IDENT_11 != null ) { for ( java . lang . String IDENT_13 : IDENT_11 ) { pattern = java . util . regex . IDENT_9 . METHOD_6 ( ( ( STRING_1 + ( IDENT_13 . toLowerCase ( ) ) ) + STRING_2 ) ) ; matcher = pattern . matcher ( "" ) ; java . util . Iterator < java . net . URL > iterator = IDENT_8 . METHOD_7 ( ) ; while ( iterator . hasNext ( ) ) { java . net . URL url = iterator . next ( ) ; if ( url . toString ( ) . toLowerCase ( ) . contains ( IDENT_13 . toLowerCase ( ) ) ) { if ( ( IDENT_13 . METHOD_8 ( STRING_3 ) ) || ( url . toString ( ) . toLowerCase ( ) . contains ( ( ( IDENT_13 . toLowerCase ( ) ) + STRING_3 ) ) ) ) { iterator . remove ( ) ; } else { if ( matcher . METHOD_9 ( url . toString ( ) . toLowerCase ( ) ) . matches ( ) ) { iterator . remove ( ) ; } } } } } } } return IDENT_8 ; }
org . junit . Assert . assertEquals ( count , list . size ( ) ) 