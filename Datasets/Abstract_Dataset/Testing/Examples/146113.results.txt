METHOD_0 ( ) { org . pentaho . di . core . logging . IDENT_0 layout = new org . pentaho . di . core . logging . METHOD_1 ( false ) ; org . apache . log4j . spi . IDENT_1 IDENT_2 = mock ( org . apache . log4j . spi . IDENT_1 . class ) ; org . pentaho . di . core . logging . IDENT_3 IDENT_4 = new org . pentaho . di . core . logging . METHOD_2 ( STRING_0 , STRING_1 , IDENT_5 . IDENT_6 ) ; when ( IDENT_2 . getMessage ( ) ) . thenReturn ( IDENT_4 ) ; java . lang . String IDENT_7 = layout . format ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } format ( org . IDENT_8 . IDENT_9 ) { final org . IDENT_8 . IDENT_10 IDENT_11 ; if ( ( IDENT_12 . METHOD_3 ( ) . size ( ) ) > 0 ) { IDENT_11 = IDENT_12 . METHOD_3 ( ) . get ( 0 ) ; } else { IDENT_11 = null ; } final org . pentaho . di . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 . IDENT_18 IDENT_19 = METHOD_4 ( IDENT_11 ) ; final org . IDENT_8 . IDENT_10 IDENT_20 ; if ( ( IDENT_12 . METHOD_3 ( ) . size ( ) ) > 1 ) { IDENT_20 = IDENT_12 . METHOD_3 ( ) . get ( 1 ) ; } else { IDENT_20 = null ; } final org . pentaho . di . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 . IDENT_18 IDENT_21 = METHOD_4 ( IDENT_20 ) ; if ( ( IDENT_12 . METHOD_3 ( ) . size ( ) ) > 2 ) { final int [ ] IDENT_22 = new int [ ( IDENT_12 . METHOD_3 ( ) . size ( ) ) - 2 ] ; for ( int i = 2 ; i < ( IDENT_12 . METHOD_3 ( ) . size ( ) ) ; i ++ ) { final org . IDENT_8 . IDENT_10 IDENT_23 = IDENT_12 . METHOD_3 ( ) . get ( i ) ; IDENT_22 [ ( i - 2 ) ] = IDENT_23 . METHOD_5 ( ) . size ( ) ; } for ( final int [ ] IDENT_24 : org . IDENT_8 . impl . IDENT_25 . METHOD_6 ( IDENT_22 ) ) { IDENT_26 = METHOD_7 ( IDENT_12 , IDENT_24 , IDENT_11 , IDENT_19 , IDENT_20 , IDENT_21 ) ; } } else { IDENT_26 = METHOD_7 ( IDENT_12 , new int [ ] { } , IDENT_11 , IDENT_19 , IDENT_20 , IDENT_21 ) ; } return IDENT_26 ; }
org . junit . Assert . assertThat ( IDENT_7 , org . hamcrest . CoreMatchers . equalTo ( STRING_0 ) ) 