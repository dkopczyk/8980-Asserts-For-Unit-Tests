METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; doReturn ( STRING_1 ) . when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 ) . METHOD_1 ( IDENT_0 ) ; org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = mock ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; doReturn ( "" ) . when ( IDENT_7 ) . getPath ( ) ; doReturn ( IDENT_8 . IDENT_9 ) . when ( IDENT_7 ) . getId ( ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( IDENT_8 . IDENT_9 ) ) . thenReturn ( IDENT_7 ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ) . thenReturn ( null ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( STRING_3 0 ) ) . thenReturn ( null ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( STRING_4 ) ) . thenReturn ( null ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( STRING_5 ) ) . thenReturn ( null ) ; org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_10 = mock ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; doReturn ( STRING_2 ) . when ( IDENT_10 ) . getPath ( ) ; doReturn ( STRING_2 ) . when ( IDENT_10 ) . getId ( ) ; org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_11 = mock ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; doReturn ( STRING_6 ) . when ( IDENT_11 ) . getPath ( ) ; doReturn ( STRING_6 ) . when ( IDENT_11 ) . getId ( ) ; org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_12 = mock ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; doReturn ( STRING_7 ) . when ( IDENT_12 ) . getPath ( ) ; doReturn ( STRING_7 ) . when ( IDENT_12 ) . getId ( ) ; org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_13 = mock ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) ; doReturn ( STRING_3 ) . when ( IDENT_13 ) . getPath ( ) ; doReturn ( STRING_3 ) . when ( IDENT_13 ) . getId ( ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_4 ( eq ( "/" ) , any ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) , eq ( STRING_2 ) ) ) . thenReturn ( IDENT_10 ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_4 ( eq ( STRING_2 ) , any ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) , eq ( STRING_6 ) ) ) . thenReturn ( IDENT_11 ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_4 ( eq ( STRING_6 ) , any ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) , eq ( STRING_7 ) ) ) . thenReturn ( IDENT_12 ) ; when ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_4 ( eq ( STRING_7 ) , any ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) , eq ( STRING_1 ) ) ) . thenReturn ( IDENT_13 ) ; "<AssertPlaceHolder>" ; verify ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_2 ( ) , times ( 4 ) ) . METHOD_4 ( anyString ( ) , any ( org . pentaho . platform . api . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . class ) , anyString ( ) ) ; } METHOD_5 ( java . lang . String ) { java . lang . String path = METHOD_1 ( IDENT_0 ) ; return METHOD_6 ( path ) ; }
org . junit . Assert . assertTrue ( org . pentaho . platform . web . http . api . resources . services . IDENT_1 . IDENT_2 . METHOD_5 ( IDENT_0 ) ) 