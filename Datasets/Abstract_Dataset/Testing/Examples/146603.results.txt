METHOD_0 ( ) { org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = mock ( org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; org . pentaho . platform . web . http . messages . IDENT_5 IDENT_6 = mock ( org . pentaho . platform . web . http . messages . IDENT_5 . class ) ; doReturn ( IDENT_6 ) . when ( IDENT_7 ) . METHOD_1 ( ) ; javax . ws . rs . core . Response IDENT_8 = mock ( javax . ws . rs . core . Response . class ) ; doReturn ( IDENT_8 ) . when ( IDENT_7 ) . METHOD_2 ( Response . Status . IDENT_9 ) ; java . lang . Exception IDENT_10 = mock ( org . pentaho . platform . web . http . api . resources . RuntimeException . class ) ; METHOD_3 ( IDENT_10 ) . when ( IDENT_7 . IDENT_11 ) . METHOD_4 ( org . pentaho . platform . web . http . api . resources . IDENT_12 . IDENT_13 , IDENT_4 ) ; javax . ws . rs . core . Response IDENT_14 = IDENT_7 . METHOD_4 ( org . pentaho . platform . web . http . api . resources . IDENT_12 . IDENT_13 , IDENT_4 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 , times ( 1 ) ) . METHOD_1 ( ) ; verify ( IDENT_7 , times ( 1 ) ) . METHOD_2 ( Response . Status . IDENT_9 ) ; verify ( IDENT_7 . IDENT_11 , times ( 1 ) ) . METHOD_4 ( org . pentaho . platform . web . http . api . resources . IDENT_12 . IDENT_13 , IDENT_4 ) ; } METHOD_4 ( java . lang . String , org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) { org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_15 file = METHOD_5 ( ) . METHOD_6 ( METHOD_7 ( IDENT_16 ) ) ; if ( file == null ) { throw new java . io . METHOD_8 ( ) ; } IDENT_17 . setId ( file . getId ( ) ) ; java . util . List < org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_18 > IDENT_19 = IDENT_17 . METHOD_9 ( ) ; if ( IDENT_19 != null ) { java . util . Iterator < org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_18 > it = IDENT_19 . iterator ( ) ; while ( it . hasNext ( ) ) { org . pentaho . platform . api . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_18 IDENT_20 = it . next ( ) ; if ( ! ( IDENT_20 . METHOD_10 ( ) ) ) { it . remove ( ) ; } } } METHOD_5 ( ) . METHOD_11 ( IDENT_17 ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_14 ) 