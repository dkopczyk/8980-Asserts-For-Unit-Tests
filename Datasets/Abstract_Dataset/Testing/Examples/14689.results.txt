METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Integer > IDENT_0 = new java . util . HashMap ( ) ; IDENT_0 . put ( STRING_0 , 1 ) ; org . apache . hadoop . hbase . util . IDENT_1 < java . util . Map < org . apache . hadoop . hbase . client . IDENT_2 , org . apache . hadoop . hbase . IDENT_3 > , org . apache . hadoop . hbase . IDENT_4 . IDENT_5 , java . util . List < org . apache . hadoop . hbase . client . IDENT_2 > > IDENT_6 = METHOD_1 ( 1 , IDENT_0 ) ; org . apache . hadoop . hbase . IDENT_4 . IDENT_5 helper = IDENT_6 . METHOD_2 ( ) ; java . util . Map < org . apache . hadoop . hbase . client . IDENT_2 , org . apache . hadoop . hbase . IDENT_3 > IDENT_7 = IDENT_6 . METHOD_3 ( ) ; java . util . List < org . apache . hadoop . hbase . client . IDENT_2 > IDENT_8 = IDENT_6 . METHOD_4 ( ) ; java . util . Map < org . apache . hadoop . hbase . client . IDENT_2 , org . apache . hadoop . hbase . IDENT_3 [ ] > IDENT_9 = helper . METHOD_5 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } get ( java . util . List ) { byte [ ] [ ] IDENT_10 = new byte [ IDENT_11 . size ( ) ] [ ] ; int IDENT_12 = 1 ; int count = 0 ; for ( org . apache . hadoop . hbase . client . IDENT_13 g : IDENT_11 ) { if ( count == 0 ) { IDENT_12 = g . METHOD_6 ( ) ; } else if ( ( g . METHOD_6 ( ) ) != IDENT_12 ) { org . apache . hadoop . hbase . rest . client . IDENT_14 . LOG . warn ( ( ( STRING_1 + IDENT_12 ) + STRING_2 ) ) ; } if ( ( g . METHOD_7 ( ) ) != null ) { org . apache . hadoop . hbase . rest . client . IDENT_14 . LOG . warn ( STRING_3 ) ; } IDENT_10 [ count ] = g . METHOD_8 ( ) ; count ++ ; } java . lang . String spec = METHOD_9 ( IDENT_10 , IDENT_12 ) ; return METHOD_10 ( spec ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_9 . get ( IDENT_8 . get ( 0 ) ) ) == null ) ) 