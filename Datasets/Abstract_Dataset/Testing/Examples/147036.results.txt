METHOD_0 ( ) { de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_2 = de . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { log ( de . IDENT_0 . IDENT_1 . IDENT_4 . class , ( ( STRING_1 + IDENT_5 ) + STRING_2 0 ) , IDENT_6 . IDENT_7 ) ; java . io . InputStream stream = null ; int IDENT_8 = 0 ; if ( java . nio . file . IDENT_9 . exists ( java . nio . file . IDENT_10 . get ( IDENT_5 ) ) ) { try { stream = java . nio . file . IDENT_9 . METHOD_2 ( java . nio . file . IDENT_10 . get ( IDENT_5 ) ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalArgumentException ( STRING_3 , e ) ; } } else { if ( ( de . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_3 ( ) ) == null ) { throw new java . lang . IllegalArgumentException ( STRING_4 ) ; } try { IDENT_8 = java . lang . Integer . METHOD_4 ( IDENT_5 ) ; } catch ( java . lang . IDENT_12 e ) { throw new java . lang . IllegalArgumentException ( STRING_5 , e ) ; } if ( IDENT_8 > 10 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_3 1 + IDENT_8 ) + STRING_6 ) ) ; } log ( de . IDENT_0 . IDENT_1 . IDENT_4 . class , ( STRING_7 + IDENT_8 ) , IDENT_6 . IDENT_7 ) ; org . osgi . framework . IDENT_13 plugin = de . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_3 ( ) . METHOD_5 ( ) ; if ( IDENT_8 < 10 ) { IDENT_5 = STRING_8 + IDENT_8 ; } java . net . URL url = plugin . METHOD_6 ( ( ( ( ( ( de . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_14 ) + ( java . io . File . IDENT_15 ) ) + ( de . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_16 ) ) + IDENT_5 ) + ( de . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_17 ) ) ) ; try { stream = url . METHOD_7 ( ) . METHOD_8 ( ) ; } catch ( java . io . IOException e ) { throw new java . lang . IllegalArgumentException ( STRING_9 , e ) ; } } try { return ( ( de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) ( de . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_18 . METHOD_9 ( stream ) ) ) ; } catch ( com . IDENT_19 . IDENT_20 . IDENT_21 e ) { throw new java . lang . IllegalArgumentException ( STRING_10 , e ) ; } }
org . junit . Assert . assertNotNull ( IDENT_2 ) 