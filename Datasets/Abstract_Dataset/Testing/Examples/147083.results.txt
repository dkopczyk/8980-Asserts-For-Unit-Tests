METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_0 ; int IDENT_2 = 1 ; byte [ ] exp = de . IDENT_3 . IDENT_4 . utils . IDENT_5 . toByteArray ( ( STRING_1 + IDENT_0 ) ) ; java . math . BigInteger x = new java . math . BigInteger ( 1 , de . IDENT_3 . IDENT_4 . utils . IDENT_5 . toByteArray ( IDENT_0 ) ) ; java . math . BigInteger y = new java . math . BigInteger ( 1 , de . IDENT_3 . IDENT_4 . utils . IDENT_5 . toByteArray ( IDENT_1 ) ) ; java . security . spec . IDENT_6 IDENT_7 = new java . security . spec . METHOD_1 ( x , y ) ; "<AssertPlaceHolder>" ; } encode ( java . security . spec . METHOD_1 , int , byte ) { byte IDENT_8 ; byte [ ] IDENT_9 ; byte [ ] IDENT_10 = de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . METHOD_2 ( IDENT_7 , IDENT_12 , true ) ; byte [ ] IDENT_13 = de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . METHOD_2 ( IDENT_7 , IDENT_12 , false ) ; boolean IDENT_14 = IDENT_7 . METHOD_3 ( ) . METHOD_4 ( 0 ) ; if ( IDENT_15 == ( de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . IDENT_16 ) ) { if ( IDENT_14 ) { IDENT_8 = ( ( byte ) ( 3 ) ) ; } else { IDENT_8 = ( ( byte ) ( 2 ) ) ; } IDENT_9 = IDENT_10 ; } else { if ( IDENT_15 == ( de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . IDENT_17 ) ) { IDENT_8 = ( ( byte ) ( 4 ) ) ; } else { if ( IDENT_15 == ( de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . IDENT_18 ) ) { if ( IDENT_14 ) { IDENT_8 = ( ( byte ) ( 7 ) ) ; } else { IDENT_8 = ( ( byte ) ( 6 ) ) ; } } else { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } } IDENT_9 = de . IDENT_3 . IDENT_4 . utils . Utils . METHOD_5 ( IDENT_10 , IDENT_13 ) ; } return de . IDENT_3 . IDENT_4 . utils . Utils . METHOD_5 ( new byte [ ] { IDENT_8 } , IDENT_9 ) ; }
org . junit . Assert . assertArrayEquals ( exp , de . IDENT_3 . IDENT_4 . crypto . IDENT_11 . encode ( IDENT_7 , IDENT_2 , IDENT_11 . IDENT_16 ) ) 