METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . util . Map < java . lang . String , java . lang . Object > model = new java . util . HashMap ( ) ; model . put ( STRING_1 , IDENT_0 ) ; final java . lang . String expected = java . lang . String . format ( STRING_2 , IDENT_0 ) ; final java . lang . String actual = new spark . template . IDENT_1 . METHOD_1 ( STRING_3 ) . render ( new spark . METHOD_2 ( model , STRING_4 ) ) ; "<AssertPlaceHolder>" ; } render ( spark . METHOD_2 , java . util . Locale ) { java . lang . Object model = IDENT_2 . METHOD_3 ( ) ; if ( model instanceof java . util . Map ) { org . IDENT_3 . context . Context context = new org . IDENT_3 . context . Context ( IDENT_4 ) ; context . METHOD_4 ( ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( model ) ) ) ; return IDENT_5 . process ( IDENT_2 . METHOD_5 ( ) , context ) ; } else { throw new java . lang . IllegalArgumentException ( STRING_5 ) ; } }
org . junit . Assert . assertEquals ( expected , actual ) 