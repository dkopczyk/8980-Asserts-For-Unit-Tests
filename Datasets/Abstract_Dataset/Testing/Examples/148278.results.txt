METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List , int ) { if ( IDENT_0 < 0 ) throw new java . lang . IllegalArgumentException ( ( ( STRING_0 + IDENT_0 ) + STRING_1 ) ) ; if ( IDENT_0 == 0 ) return singletonList ( target ) ; if ( IDENT_0 > ( target . size ( ) ) ) return emptyList ( ) ; java . util . List < T > IDENT_1 = target . METHOD_2 ( 0 , IDENT_0 ) ; java . util . List < T > IDENT_2 = target . METHOD_2 ( IDENT_0 , target . size ( ) ) ; if ( IDENT_2 . isEmpty ( ) ) return singletonList ( emptyList ( ) ) ; java . util . List < java . util . List < T > > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( IDENT_2 ) ; IDENT_3 . addAll ( com . IDENT_4 . junit . IDENT_5 . internal . Lists . METHOD_1 ( IDENT_2 , IDENT_0 ) . stream ( ) . map ( ( r ) -> { List < com . IDENT_4 . junit . IDENT_5 . internal . T > IDENT_6 = new com . IDENT_4 . junit . IDENT_5 . internal . ArrayList < > ( IDENT_1 ) ; IDENT_6 . addAll ( r ) ; return IDENT_6 ; } ) . collect ( toList ( ) ) ) ; return IDENT_3 ; }
org . junit . Assert . assertEquals ( emptyList ( ) , com . IDENT_4 . junit . IDENT_5 . internal . Lists . METHOD_1 ( emptyList ( ) , 1 ) ) 