METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( com . IDENT_0 . junit . IDENT_1 . random . IDENT_2 , java . util . List , com . IDENT_0 . junit . IDENT_1 . generator . IDENT_3 ) { if ( target . isEmpty ( ) ) return new java . util . ArrayList ( ) ; T IDENT_4 = target . get ( 0 ) ; java . util . List < T > IDENT_5 = target . METHOD_2 ( 1 , target . size ( ) ) ; java . util . List < java . util . List < T > > IDENT_6 = new java . util . ArrayList ( ) ; IDENT_6 . addAll ( IDENT_7 . METHOD_3 ( random , IDENT_4 ) . stream ( ) . map ( ( i ) -> { List < com . IDENT_0 . junit . IDENT_1 . internal . T > IDENT_8 = new com . IDENT_0 . junit . IDENT_1 . internal . ArrayList < > ( ) ; IDENT_8 . add ( i ) ; IDENT_8 . addAll ( IDENT_5 ) ; return IDENT_8 ; } ) . collect ( toList ( ) ) ) ; IDENT_6 . addAll ( com . IDENT_0 . junit . IDENT_1 . internal . Lists . METHOD_1 ( random , IDENT_5 , METHOD_3 ) . stream ( ) . map ( ( s ) -> { List < com . IDENT_0 . junit . IDENT_1 . internal . T > IDENT_8 = new com . IDENT_0 . junit . IDENT_1 . internal . ArrayList < > ( ) ; IDENT_8 . add ( IDENT_4 ) ; IDENT_8 . addAll ( s ) ; return IDENT_8 ; } ) . collect ( toList ( ) ) ) ; return IDENT_6 ; }
org . junit . Assert . assertEquals ( emptyList ( ) , com . IDENT_0 . junit . IDENT_1 . internal . Lists . METHOD_1 ( random , emptyList ( ) , null ) ) 