METHOD_0 ( ) { org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . LOG . info ( STRING_0 ) ; IDENT_2 . METHOD_1 ( org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . IDENT_3 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_4 ) ; byte [ ] IDENT_5 = org . apache . hadoop . hbase . util . IDENT_6 . METHOD_2 ( STRING_1 ) ; org . apache . hadoop . hbase . client . IDENT_7 put = new org . apache . hadoop . hbase . client . METHOD_3 ( IDENT_5 ) ; put . METHOD_4 ( IDENT_8 , row , row ) ; IDENT_9 . put ( put ) ; org . apache . hadoop . hbase . client . IDENT_10 get = new org . apache . hadoop . hbase . client . METHOD_5 ( IDENT_5 ) ; for ( int i = 0 ; i < ( IDENT_11 ) ; i ++ ) { if ( i == ( ( IDENT_11 ) - 1 ) ) { break ; } org . apache . hadoop . hbase . client . Result res = IDENT_12 . get ( get ) ; if ( ( res . size ( ) ) >= 1 ) { org . junit . Assert . fail ( STRING_2 ) ; } else { org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . LOG . info ( STRING_3 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_4 ) ; } } org . apache . hadoop . hbase . IDENT_0 . IDENT_13 IDENT_14 = org . apache . hadoop . hbase . IDENT_0 . IDENT_13 . METHOD_6 ( ) . METHOD_7 ( IDENT_15 . METHOD_8 ( ) ) . build ( ) ; IDENT_2 . METHOD_9 ( org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . IDENT_3 , IDENT_14 ) ; java . lang . Thread . sleep ( org . apache . hadoop . hbase . IDENT_0 . IDENT_4 ) ; IDENT_5 = org . apache . hadoop . hbase . util . IDENT_6 . METHOD_2 ( STRING_4 ) ; put = new org . apache . hadoop . hbase . client . METHOD_3 ( IDENT_5 ) ; put . METHOD_4 ( IDENT_8 , row , row ) ; org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . LOG . info ( STRING_5 ) ; IDENT_9 . put ( put ) ; get = new org . apache . hadoop . hbase . client . METHOD_5 ( IDENT_5 ) ; for ( int i = 0 ; i < ( IDENT_11 ) ; i ++ ) { if ( i == ( ( IDENT_11 ) - 1 ) ) { org . junit . Assert . fail ( STRING_6 ) ; } org . apache . hadoop . hbase . client . Result res = IDENT_12 . get ( get ) ; if ( res . isEmpty ( ) ) { org . apache . hadoop . hbase . IDENT_0 . IDENT_1 . LOG . info ( STRING_7 ) ; java . lang . Thread . sleep ( ( ( IDENT_4 ) * i ) ) ; } else { "<AssertPlaceHolder>" ; break ; } } } value ( ) { return IDENT_16 . METHOD_10 ( ) ; }
org . junit . Assert . assertArrayEquals ( row , res . value ( ) ) 