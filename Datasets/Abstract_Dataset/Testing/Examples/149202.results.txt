METHOD_0 ( ) { java . lang . Object IDENT_0 = INT_0 ; java . lang . Object IDENT_1 = INT_1 ; java . util . List < java . util . List < java . lang . Object > > keys = java . util . Arrays . asList ( java . util . Arrays . asList ( IDENT_0 , IDENT_1 ) ) ; java . util . List < java . lang . Long > IDENT_2 = java . util . Arrays . asList ( INT_2 ) ; this . state . METHOD_1 ( keys , IDENT_2 ) ; java . util . List < java . lang . Long > IDENT_3 = this . state . METHOD_2 ( keys ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . List ) { java . util . List < T > results = new java . util . ArrayList < T > ( ) ; java . lang . String [ ] IDENT_4 = new java . lang . String [ keys . size ( ) ] ; for ( int i = 0 ; i < ( keys . size ( ) ) ; i ++ ) { IDENT_4 [ i ] = this . METHOD_3 ( keys . get ( i ) ) ; } redis . IDENT_5 . IDENT_6 . IDENT_7 IDENT_6 = this . pool . getResource ( ) ; try { java . util . List < java . lang . String > IDENT_8 = IDENT_6 . METHOD_4 ( IDENT_4 ) ; for ( java . lang . String result : IDENT_8 ) { if ( ( result == null ) || ( result . isEmpty ( ) ) ) { results . add ( null ) ; } else { results . add ( ( ( T ) ( this . serializer . METHOD_5 ( result . getBytes ( ) ) ) ) ) ; } } } finally { this . pool . METHOD_6 ( IDENT_6 ) ; } return results ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_3 ) 