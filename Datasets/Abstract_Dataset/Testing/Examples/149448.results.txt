METHOD_0 ( ) { org . apache . commons . math3 . random . IDENT_0 IDENT_1 = METHOD_1 ( ) ; cc . redberry . rings . util . IDENT_2 IDENT_3 = METHOD_2 ( ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { long IDENT_4 = IDENT_3 . METHOD_3 ( 10 , 1000 ) ; long IDENT_5 = IDENT_3 . METHOD_3 ( ( IDENT_4 + 1 ) , INT_0 ) ; long IDENT_6 = cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_4 ( IDENT_4 , IDENT_5 ) ; IDENT_4 = IDENT_4 / METHOD_4 ; IDENT_5 = IDENT_5 / METHOD_4 ; long IDENT_9 = cc . redberry . rings . IDENT_10 . IDENT_11 . METHOD_5 ( ( ( 2 * IDENT_4 ) * IDENT_5 ) ) ; long n = cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_6 ( ( IDENT_4 * ( cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_7 ( IDENT_5 , IDENT_9 ) ) ) , IDENT_9 ) ; assert ( ( IDENT_4 != 0 ) && ( IDENT_5 != 0 ) ) && ( n != 0 ) ; long [ ] IDENT_12 = cc . redberry . rings . IDENT_13 . METHOD_8 ( n , IDENT_9 , ( ( java . lang . Math . METHOD_9 ( IDENT_4 ) ) + 10 ) , ( ( java . lang . Math . METHOD_9 ( IDENT_5 ) ) + 10 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_7 ( long , long ) { if ( IDENT_4 == 1 ) return IDENT_4 ; if ( IDENT_4 < 0 ) IDENT_4 = cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_6 ( IDENT_4 , IDENT_9 ) ; long s = 0 ; long IDENT_14 = 1 ; long r = IDENT_9 ; long IDENT_15 = IDENT_4 ; long q ; long IDENT_16 ; while ( r != 0 ) { q = IDENT_15 / r ; IDENT_16 = IDENT_15 ; IDENT_15 = r ; r = IDENT_16 - ( q * r ) ; IDENT_16 = IDENT_14 ; IDENT_14 = s ; s = IDENT_16 - ( q * s ) ; } if ( IDENT_15 != 1 ) throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_0 , IDENT_4 , IDENT_9 , IDENT_15 ) ) ; return cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_6 ( IDENT_14 , IDENT_9 ) ; }
org . junit . Assert . assertEquals ( n , cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_6 ( ( ( IDENT_12 [ 0 ] ) * ( cc . redberry . rings . IDENT_7 . IDENT_8 . METHOD_7 ( IDENT_12 [ 1 ] , IDENT_9 ) ) ) , IDENT_9 ) ) 