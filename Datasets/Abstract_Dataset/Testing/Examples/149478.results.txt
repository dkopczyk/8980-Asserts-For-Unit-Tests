METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 } ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > b = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > c = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . parse ( STRING_6 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_5 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 , IDENT_0 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_8 = cc . redberry . rings . IDENT_1 . IDENT_2 . Arrays . asList ( c , b ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > expected = METHOD_1 ( IDENT_8 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_9 > IDENT_10 = IDENT_8 . stream ( ) . map ( ( p ) -> cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( p . METHOD_3 ( METHOD_4 ( INT_0 ) ) ) ) . collect ( java . util . stream . IDENT_11 . toList ( ) ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_9 > IDENT_12 = METHOD_1 ( IDENT_10 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 ) ; cc . redberry . rings . IDENT_1 . IDENT_2 . List < cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_13 = METHOD_5 ( IDENT_8 , IDENT_12 . stream ( ) . map ( ( p ) -> p . IDENT_14 . METHOD_6 ( ) ) . collect ( java . util . stream . IDENT_11 . toList ( ) ) , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 ) ; "<AssertPlaceHolder>" ; } stream ( ) { return cc . redberry . rings . IDENT_1 . IDENT_15 . Arrays . stream ( data , 0 , ( ( IDENT_16 ) + 1 ) ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_13 ) 