METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 domain = new cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_1 ( 7 ) ; java . lang . String [ ] IDENT_3 = new java . lang . String [ ] { "a" , "b" , STRING_0 , STRING_1 , STRING_2 } ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 [ ] IDENT_5 = new cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 [ ] { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_3 , domain , IDENT_3 ) , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_4 , domain , IDENT_3 ) , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_5 , domain , IDENT_3 ) , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_6 , domain , IDENT_3 ) } ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 base = IDENT_5 [ 0 ] . METHOD_2 ( ) . METHOD_3 ( IDENT_5 ) ; assert cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_6 . METHOD_4 ( base ) ; for ( int i = 0 ; i < ( METHOD_5 ( 20 , 20 ) ) ; i ++ ) { System . out . println ( ( i + 20 ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 . METHOD_6 ( ) . METHOD_7 ( ( i + 20 ) ) ; long start = java . lang . System . METHOD_8 ( ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 > IDENT_9 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_10 . METHOD_9 ( base ) ; "<AssertPlaceHolder>" ; System . out . println ( cc . redberry . rings . util . IDENT_11 . METHOD_10 ( ( ( java . lang . System . METHOD_8 ( ) ) - start ) ) ) ; } } size ( ) { return ( cc . redberry . rings . IDENT_0 . IDENT_12 . IDENT_13 . METHOD_11 ( ) ) + 1 ; }
org . junit . Assert . assertEquals ( 4 , IDENT_9 . size ( ) ) 