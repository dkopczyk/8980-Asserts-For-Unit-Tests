METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 domain = new cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_1 ( INT_0 ) ; java . lang . String [ ] IDENT_3 = new java . lang . String [ ] { "a" , "b" } ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 < cc . redberry . rings . IDENT_5 . BigInteger > a = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_0 , domain , IDENT_6 . IDENT_7 , IDENT_3 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 < cc . redberry . rings . IDENT_5 . BigInteger > b = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_1 , domain , IDENT_6 . IDENT_7 , IDENT_3 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 < cc . redberry . rings . IDENT_5 . BigInteger > IDENT_8 = METHOD_2 ( a , b ) ; IDENT_8 = IDENT_8 . METHOD_3 ( ) . METHOD_4 ( domain . valueOf ( INT_1 ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 < cc . redberry . rings . IDENT_5 . BigInteger > expected = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_2 , domain , IDENT_6 . IDENT_7 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String , cc . redberry . rings . IDENT_9 , cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_10 , java . lang . String [ ] ) { cc . redberry . rings . METHOD_1 IDENT_11 = IDENT_12 . METHOD_5 ( ) ; return cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_6 ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( string , IDENT_11 , IDENT_13 , IDENT_14 ) ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_8 ) 