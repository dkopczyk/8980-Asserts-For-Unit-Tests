METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 . BigInteger > a = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_0 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 . BigInteger > b = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_1 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 . BigInteger > IDENT_4 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_2 ) ; a = a . METHOD_1 ( ) . METHOD_2 ( IDENT_4 ) ; b = b . METHOD_1 ( ) . METHOD_2 ( IDENT_4 ) ; org . apache . commons . math3 . random . IDENT_5 IDENT_6 = METHOD_3 ( ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_7 domain = new cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_4 ( INT_0 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_9 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( a . METHOD_6 ( domain ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_10 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( b . METHOD_6 ( domain ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_11 = METHOD_7 ( IDENT_9 , IDENT_10 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_4 IDENT_12 = new cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_4 ( INT_1 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_13 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( a . METHOD_6 ( IDENT_12 ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_14 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( b . METHOD_6 ( IDENT_12 ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 IDENT_15 = METHOD_7 ( IDENT_13 , IDENT_14 ) ; System . out . println ( IDENT_15 . METHOD_8 ( IDENT_11 ) ) ; IDENT_6 . METHOD_9 ( ( - INT_2 ) ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_8 actual = METHOD_10 ( IDENT_13 , IDENT_14 , IDENT_11 . METHOD_6 ( IDENT_13 . IDENT_16 ) , IDENT_6 ) ; if ( actual == null ) { System . out . println ( STRING_3 ) ; actual = METHOD_10 ( IDENT_13 , IDENT_14 , IDENT_11 . METHOD_6 ( IDENT_13 . IDENT_16 ) , IDENT_6 ) ; } "<AssertPlaceHolder>" ; } METHOD_11 ( ) { if ( METHOD_12 ( ) ) return this ; if ( METHOD_13 ( ) ) return this ; if ( ( IDENT_17 ) == 0 ) { data [ 0 ] = 1 ; return this ; } return METHOD_2 ( IDENT_16 . METHOD_14 ( METHOD_15 ( ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_15 . METHOD_11 ( ) , actual . METHOD_11 ( ) ) 