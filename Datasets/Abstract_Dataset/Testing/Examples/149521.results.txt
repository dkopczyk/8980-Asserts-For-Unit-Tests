METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 domain = new cc . redberry . rings . IDENT_0 . IDENT_1 . METHOD_1 ( 2 ) ; java . lang . String [ ] IDENT_3 = new java . lang . String [ ] { "a" , "b" } ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 a = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_0 , domain , IDENT_3 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 b = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_1 , domain , IDENT_3 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_1 , domain , IDENT_3 ) ; a = a . METHOD_2 ( IDENT_5 ) ; b = b . METHOD_2 ( IDENT_5 ) ; for ( int i = 0 ; i < 10 ; i ++ ) "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_6 extends cc . redberry . rings . IDENT_0 . IDENT_7 , IDENT_6 extends cc . redberry . rings . IDENT_0 . IDENT_7 ) { if ( a instanceof cc . redberry . rings . IDENT_0 . IDENT_8 ) return ( ( IDENT_6 ) ( cc . redberry . rings . IDENT_0 . IDENT_9 . METHOD_3 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_8 ) ( a ) ) , ( ( cc . redberry . rings . IDENT_0 . IDENT_8 ) ( b ) ) ) ) ) ; else if ( a instanceof cc . redberry . rings . IDENT_0 . IDENT_10 ) return ( ( IDENT_6 ) ( cc . redberry . rings . IDENT_0 . IDENT_11 . METHOD_3 ( ( ( cc . redberry . rings . IDENT_0 . IDENT_10 ) ( a ) ) , ( ( cc . redberry . rings . IDENT_0 . IDENT_10 ) ( b ) ) ) ) ) ; else throw new java . lang . RuntimeException ( ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , METHOD_3 ( a , b ) ) 