METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 < cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_5 = METHOD_1 ( 3 , cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_6 ) ; cc . redberry . rings . io . IDENT_7 < cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > , ? , ? > IDENT_8 = cc . redberry . rings . io . IDENT_7 . METHOD_2 ( IDENT_5 , STRING_0 , STRING_1 , STRING_2 ) ; cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > a = IDENT_8 . parse ( STRING_3 ) ; cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > b = IDENT_8 . parse ( STRING_4 ) ; cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > expected = IDENT_8 . parse ( STRING_5 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_9 extends cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_10 , IDENT_9 extends cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_10 , int ) { if ( METHOD_4 ( a ) ) return METHOD_5 ( cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_11 . METHOD_3 ( METHOD_6 ( a ) , METHOD_6 ( b ) , IDENT_12 ) ) ; return cc . redberry . rings . IDENT_0 . IDENT_2 . IDENT_13 . METHOD_7 ( a . METHOD_8 ( IDENT_12 ) , b . METHOD_8 ( IDENT_12 ) ) . METHOD_9 ( IDENT_12 ) ; }
org . junit . Assert . assertEquals ( expected , METHOD_3 ( a , b , 0 ) ) 