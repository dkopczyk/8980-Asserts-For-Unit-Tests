METHOD_0 ( ) { org . apache . commons . math3 . random . IDENT_0 IDENT_1 = METHOD_1 ( ) ; cc . redberry . rings . util . IDENT_2 IDENT_3 = METHOD_2 ( ) ; for ( long IDENT_4 : java . util . Arrays . asList ( 2 , 3 , INT_0 , Integer . MAX_VALUE ) ) { cc . redberry . rings . IDENT_5 IDENT_6 = cc . redberry . rings . IDENT_7 . METHOD_3 ( IDENT_4 ) ; cc . redberry . rings . IDENT_8 . IDENT_9 < cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 > IDENT_12 = cc . redberry . rings . IDENT_7 . METHOD_4 ( IDENT_6 ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { int IDENT_13 = IDENT_3 . METHOD_5 ( 2 , 10 ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 [ ] IDENT_14 = new cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 [ IDENT_13 ] ; for ( int j = 0 ; j < ( IDENT_14 . length ) ; j ++ ) IDENT_14 [ j ] = cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_15 . METHOD_6 ( IDENT_3 . METHOD_5 ( 15 , INT_1 ) , IDENT_6 . IDENT_4 , IDENT_1 ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 IDENT_16 = cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_17 . METHOD_7 ( IDENT_14 ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 IDENT_18 = cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_15 . METHOD_6 ( IDENT_3 . METHOD_5 ( 0 , 10 ) , IDENT_6 . IDENT_4 , IDENT_1 ) ; IDENT_18 . METHOD_8 ( IDENT_16 ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_19 . IDENT_20 < cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 > IDENT_21 = new cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_19 . IDENT_20 < > ( IDENT_14 ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 g = IDENT_12 . METHOD_9 ( ) ; for ( int l = 0 ; l < ( IDENT_21 . solution . length ) ; l ++ ) g . add ( IDENT_21 . solution [ l ] . METHOD_10 ( ) . METHOD_8 ( IDENT_14 [ l ] ) ) ; cc . redberry . rings . IDENT_8 . IDENT_10 . IDENT_11 [ ] IDENT_22 = IDENT_21 . METHOD_11 ( IDENT_18 ) ; for ( int j = 0 ; j < ( METHOD_11 . length ) ; j ++ ) IDENT_18 . METHOD_12 ( METHOD_11 [ j ] . METHOD_8 ( IDENT_14 [ j ] ) ) ; "<AssertPlaceHolder>" ; } } } METHOD_13 ( ) { return IDENT_6 . METHOD_13 ( data [ IDENT_23 ] ) ; }
org . junit . Assert . assertTrue ( IDENT_18 . METHOD_13 ( ) ) 