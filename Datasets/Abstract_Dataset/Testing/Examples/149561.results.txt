METHOD_0 ( ) { int IDENT_0 = INT_0 ; cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_3 a = cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_4 . create ( INT_1 , INT_2 , INT_2 , INT_2 , 1 ) . METHOD_1 ( METHOD_1 ) ; for ( int i = 0 ; i < 10 ; i ++ ) "<AssertPlaceHolder>" ; } METHOD_2 ( IDENT_5 extends cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_6 , int ) { cc . redberry . rings . IDENT_1 . IDENT_7 . METHOD_3 ( input ) ; cc . redberry . rings . IDENT_1 . IDENT_8 < IDENT_5 > result = cc . redberry . rings . IDENT_1 . IDENT_8 . unit ( input . METHOD_4 ( ) ) ; if ( ! ( input . METHOD_5 ( ) . METHOD_6 ( 0 ) ) ) cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_2 ( input , d , result , input . METHOD_7 ( ) . METHOD_8 ( ) ) ; else cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_2 ( input , d , result , ( - 1 ) ) ; return result ; }
org . junit . Assert . assertEquals ( 4 , cc . redberry . rings . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_2 ( a , 1 ) . size ( ) ) 