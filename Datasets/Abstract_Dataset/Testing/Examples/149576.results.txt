METHOD_0 ( ) { long IDENT_0 = cc . redberry . rings . IDENT_1 . IDENT_2 . METHOD_1 ( INT_0 ) ; org . apache . commons . math3 . random . IDENT_3 IDENT_4 = METHOD_2 ( ) ; org . apache . commons . math3 . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = new org . apache . commons . math3 . IDENT_5 . IDENT_6 . METHOD_3 ( ) ; org . apache . commons . math3 . IDENT_5 . IDENT_6 . METHOD_3 IDENT_9 = new org . apache . commons . math3 . IDENT_5 . IDENT_6 . METHOD_3 ( ) ; long IDENT_10 = METHOD_4 ( 1000 , INT_1 ) ; int IDENT_11 = INT_2 ; int IDENT_12 = INT_3 ; for ( int i = 0 ; i < IDENT_10 ; i ++ ) { if ( ( i * 10 ) == IDENT_10 ) { IDENT_8 . METHOD_5 ( ) ; IDENT_9 . METHOD_5 ( ) ; } cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_15 IDENT_16 = cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_17 . METHOD_6 ( IDENT_11 , IDENT_0 , IDENT_4 ) ; cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_18 IDENT_19 = cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_17 . METHOD_7 ( IDENT_12 , ( ( int ) ( IDENT_0 ) ) , IDENT_4 ) ; cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_15 IDENT_20 = IDENT_19 . METHOD_8 ( METHOD_8 ) ; IDENT_16 . METHOD_9 ( 3 ) ; long start = java . lang . System . METHOD_10 ( ) ; cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_15 [ ] IDENT_21 = cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_22 . IDENT_22 . METHOD_11 ( IDENT_20 , IDENT_16 , true ) ; long IDENT_23 = ( java . lang . System . METHOD_10 ( ) ) - start ; IDENT_8 . METHOD_12 ( IDENT_23 ) ; start = java . lang . System . METHOD_10 ( ) ; cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_15 [ ] IDENT_24 = cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_22 . IDENT_22 . METHOD_13 ( IDENT_20 , IDENT_16 , true ) ; long IDENT_25 = ( java . lang . System . METHOD_10 ( ) ) - start ; IDENT_9 . METHOD_12 ( IDENT_25 ) ; "<AssertPlaceHolder>" ; } System . out . println ( STRING_0 ) ; System . out . println ( IDENT_8 . METHOD_14 ( ) ) ; System . out . println ( STRING_1 ) ; System . out . println ( IDENT_9 . METHOD_14 ( ) ) ; } METHOD_13 ( cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_26 , cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_26 , boolean ) { cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_26 < IDENT_27 > [ ] r = cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_22 . METHOD_15 ( IDENT_20 , IDENT_16 , IDENT_28 ) ; if ( r != null ) return r ; return cc . redberry . rings . IDENT_13 . IDENT_14 . IDENT_22 . METHOD_16 ( IDENT_20 , IDENT_16 , IDENT_28 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_21 , IDENT_24 ) 