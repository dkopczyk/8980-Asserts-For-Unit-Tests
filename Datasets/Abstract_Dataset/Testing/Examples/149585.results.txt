METHOD_0 ( ) { cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > IDENT_5 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 . create ( ( - 2 ) , 0 , 0 , 0 , 0 , 0 , 1 ) . METHOD_1 ( cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_6 , IDENT_6 :: IDENT_7 ) ; cc . redberry . rings . IDENT_0 . IDENT_8 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > field = METHOD_2 ( IDENT_5 ) ; cc . redberry . rings . io . IDENT_9 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > , ? , ? > IDENT_10 = cc . redberry . rings . io . IDENT_9 . METHOD_3 ( field , STRING_0 ) ; cc . redberry . rings . IDENT_0 . IDENT_11 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > > IDENT_12 = METHOD_4 ( field ) ; cc . redberry . rings . io . IDENT_9 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > , ? , ? > IDENT_13 = cc . redberry . rings . io . IDENT_9 . METHOD_3 ( IDENT_12 , IDENT_10 , STRING_1 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > a = IDENT_13 . parse ( STRING_2 ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > b = IDENT_13 . parse ( STRING_3 ) ; for ( int i = 0 ; i < 1 ; ++ i ) { long start ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > IDENT_14 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_15 . IDENT_15 . METHOD_6 ( a , b ) ; System . out . println ( ( STRING_4 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; start = java . lang . System . METHOD_5 ( ) ; cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_2 < cc . redberry . rings . IDENT_3 < cc . redberry . rings . IDENT_4 . BigInteger > > > IDENT_16 = cc . redberry . rings . IDENT_0 . IDENT_1 . IDENT_15 . IDENT_15 . METHOD_8 ( a , b ) ; System . out . println ( ( STRING_5 + ( METHOD_7 ( ( ( java . lang . System . METHOD_5 ( ) ) - start ) ) ) ) ) ; "<AssertPlaceHolder>" ; System . out . println ( ) ; } } METHOD_7 ( long ) { java . lang . String IDENT_17 = STRING_6 ; if ( ( IDENT_18 / 1000 ) > 1 ) { IDENT_17 = STRING_7 ; IDENT_18 OP_0 1000 ; } if ( ( IDENT_18 / 1000 ) > 1 ) { IDENT_17 = STRING_8 ; IDENT_18 OP_0 1000 ; } if ( ( IDENT_18 / 1000 ) > 1 ) { IDENT_17 = STRING_0 ; IDENT_18 OP_0 1000 ; } return IDENT_18 + IDENT_17 ; }
org . junit . Assert . assertEquals ( IDENT_14 , IDENT_16 ) 