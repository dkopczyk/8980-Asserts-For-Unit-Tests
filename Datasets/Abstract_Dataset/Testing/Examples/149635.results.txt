METHOD_0 ( ) { java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( size ) ; com . github . IDENT_2 . IDENT_3 . IDENT_4 IDENT_3 = com . github . IDENT_2 . IDENT_3 . IDENT_4 . builder ( ) . METHOD_2 ( false ) . build ( ) ; int size = 100 ; for ( int i = 0 ; i < size ; i ++ ) { IDENT_3 . METHOD_3 ( IDENT_1 . METHOD_4 ( ) ) ; } double IDENT_5 = ( size > INT_0 ) ? IDENT_6 : IDENT_7 ; double IDENT_8 = ( IDENT_5 * size ) / 100 ; "<AssertPlaceHolder>" ; } count ( ) { if ( ( IDENT_9 ) || ( ( IDENT_10 ) < 0 ) ) { if ( IDENT_11 . equals ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_12 . IDENT_13 ) ) { int IDENT_14 = 1 << ( IDENT_15 . METHOD_5 ( ) ) ; IDENT_10 = METHOD_6 ( IDENT_14 , ( IDENT_14 - ( IDENT_15 . METHOD_7 ( ) . size ( ) ) ) ) ; } else { double IDENT_16 = IDENT_17 . METHOD_8 ( ) ; long IDENT_18 = IDENT_17 . METHOD_9 ( ) ; IDENT_10 = ( ( long ) ( ( IDENT_19 ) * ( 1.0 / IDENT_16 ) ) ) ; long IDENT_20 = ( ( long ) ( java . lang . Math . METHOD_10 ( 2 , IDENT_21 ) ) ) ; if ( IDENT_22 ) { IDENT_10 = ( ( IDENT_10 ) <= ( 5 * ( m ) ) ) ? ( IDENT_10 ) - ( METHOD_11 ( IDENT_10 ) ) : IDENT_10 ; long IDENT_23 = IDENT_10 ; if ( IDENT_18 != 0 ) { IDENT_23 = METHOD_6 ( m , IDENT_18 ) ; } if ( IDENT_23 < ( METHOD_12 ( ) ) ) { IDENT_10 = IDENT_23 ; } } else { if ( ( IDENT_10 ) <= ( FLOAT_0 * ( m ) ) ) { if ( IDENT_18 != 0 ) { IDENT_10 = METHOD_6 ( m , IDENT_18 ) ; } } else if ( ( ( IDENT_21 ) < INT_1 ) && ( ( IDENT_10 ) > ( FLOAT_1 * METHOD_10 ) ) ) { if ( ( IDENT_10 ) > ( ( 1 / INT_2 ) * METHOD_10 ) ) { IDENT_10 = ( ( long ) ( ( - METHOD_10 ) * ( java . lang . Math . log ( ( 1.0 - ( ( ( double ) ( IDENT_10 ) ) / ( ( double ) ( METHOD_10 ) ) ) ) ) ) ) ) ; } } } } IDENT_9 = false ; } return IDENT_10 ; }
org . junit . Assert . assertEquals ( ( ( double ) ( size ) ) , ( ( double ) ( IDENT_3 . count ( ) ) ) , IDENT_8 ) 