METHOD_0 ( ) { if ( IDENT_0 ) { eu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new eu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_6 . METHOD_2 ( ) . METHOD_3 ( ) , IDENT_6 . METHOD_4 ( ) . METHOD_3 ( ) , IDENT_6 . METHOD_5 ( ) . METHOD_3 ( ) ) ; for ( eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 f : IDENT_9 . METHOD_6 ( ) ) { eu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 a = f . METHOD_7 ( ) . METHOD_8 ( ) . get ( 0 ) ; eu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 n = f . METHOD_9 ( ) ; double IDENT_10 = n . METHOD_10 ( a ) ; double t = ( n . METHOD_10 ( IDENT_5 ) ) - IDENT_10 ; eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 IDENT_12 = eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . METHOD_11 ( t ) ; "<AssertPlaceHolder>" ; } } } METHOD_11 ( double ) { return IDENT_10 < ( - ( eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_13 ) ) ? eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_14 : IDENT_10 > ( eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_13 ) ? eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_15 : eu . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_16 ; }
org . junit . Assert . assertEquals ( IDENT_11 . IDENT_14 , IDENT_12 ) 