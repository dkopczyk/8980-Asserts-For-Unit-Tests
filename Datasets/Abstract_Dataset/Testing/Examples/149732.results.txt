METHOD_0 ( ) { fr . gouv . vitam . common . IDENT_0 . IDENT_1 . METHOD_1 ( ) . METHOD_2 ( fr . gouv . vitam . IDENT_2 . internal . client . IDENT_3 . IDENT_4 ) ; when ( fr . gouv . vitam . IDENT_2 . internal . client . IDENT_3 . mock . get ( ) ) . thenReturn ( fr . gouv . vitam . common . client . IDENT_5 . METHOD_3 ( ) ) ; javax . ws . rs . core . Response response = fr . gouv . vitam . IDENT_2 . internal . client . IDENT_3 . client . METHOD_4 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { fr . gouv . vitam . common . IDENT_6 . METHOD_5 ( fr . gouv . vitam . IDENT_2 . internal . client . IDENT_7 . IDENT_8 , IDENT_9 ) ; javax . ws . rs . core . Response response = null ; javax . ws . rs . core . Response . Status status = javax . ws . rs . core . Response . Status . IDENT_10 ; try { response = METHOD_6 ( IDENT_11 . IDENT_12 , ( ( STRING_1 + IDENT_9 ) + STRING_2 ) , null , null , null , javax . ws . rs . core . IDENT_13 . IDENT_14 ) ; status = javax . ws . rs . core . Response . Status . METHOD_7 ( response . getStatus ( ) ) ; switch ( status ) { case IDENT_15 : fr . gouv . vitam . IDENT_2 . internal . client . IDENT_7 . LOGGER . error ( ( ( ( IDENT_15 ) + STRING_3 ) + ( status . METHOD_8 ( ) ) ) ) ; throw new fr . gouv . vitam . IDENT_2 . internal . common . exception . METHOD_9 ( IDENT_15 ) ; case IDENT_16 : throw new fr . gouv . vitam . IDENT_2 . internal . common . exception . METHOD_10 ( status . METHOD_8 ( ) ) ; case IDENT_10 : throw new fr . gouv . vitam . common . exception . METHOD_11 ( fr . gouv . vitam . IDENT_2 . internal . client . IDENT_7 . IDENT_17 ) ; case IDENT_18 : break ; case IDENT_19 : throw new fr . gouv . vitam . common . exception . METHOD_12 ( fr . gouv . vitam . IDENT_2 . internal . client . IDENT_7 . IDENT_20 ) ; default : fr . gouv . vitam . IDENT_2 . internal . client . IDENT_7 . LOGGER . error ( ( ( ( IDENT_15 ) + STRING_3 ) + ( status . METHOD_8 ( ) ) ) ) ; throw new fr . gouv . vitam . IDENT_2 . internal . common . exception . METHOD_9 ( ( ( ( IDENT_15 ) + STRING_3 ) + ( status . METHOD_8 ( ) ) ) ) ; } return response ; } catch ( final fr . gouv . vitam . common . exception . IDENT_21 e ) { throw new fr . gouv . vitam . IDENT_2 . internal . common . exception . METHOD_9 ( IDENT_15 , e ) ; } finally { if ( status != ( javax . ws . rs . core . Response . Status . IDENT_18 ) ) { METHOD_13 ( response ) ; } } }
org . junit . Assert . assertNotNull ( response ) 