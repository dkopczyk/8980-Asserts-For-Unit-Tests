METHOD_0 ( ) { java . net . URL url = fr . gouv . vitam . common . IDENT_0 . IDENT_1 . class . getResource ( STRING_0 ) ; java . io . File file = new java . io . File ( url . METHOD_1 ( ) ) ; file = new java . io . File ( file . METHOD_2 ( ) . METHOD_2 ( ) , STRING_1 ) ; java . io . InputStream input = new java . io . METHOD_3 ( file ) ; boolean match = true ; try ( final java . io . IDENT_2 reader = new java . io . METHOD_4 ( input ) ) { try ( final java . io . IDENT_3 IDENT_4 = new java . io . METHOD_5 ( reader ) ) { java . lang . String line ; while ( ( line = IDENT_4 . METHOD_6 ( ) ) != null ) { if ( line . matches ( STRING_2 ) ) { continue ; } if ( line . contains ( STRING_3 ) ) { boolean IDENT_5 = line . matches ( STRING_4 ) ; if ( ! IDENT_5 ) { System . err . println ( ( STRING_5 + line ) ) ; } match OP_0 IDENT_5 ; } } } } "<AssertPlaceHolder>" ; } matches ( java . lang . Object ) { try { com . fasterxml . jackson . databind . IDENT_6 mapper = new com . fasterxml . jackson . databind . METHOD_7 ( ) ; fr . gouv . vitam . common . security . rest . IDENT_7 [ ] IDENT_8 = mapper . METHOD_8 ( ( ( java . lang . String ) ( o ) ) , fr . gouv . vitam . common . security . rest . IDENT_7 [ ] . class ) ; fr . gouv . vitam . common . security . rest . IDENT_7 IDENT_9 = java . util . Arrays . stream ( IDENT_8 ) . filter ( ( IDENT_10 ) -> IDENT_10 . METHOD_9 ( ) . equals ( STRING_6 ) ) . METHOD_10 ( ) . METHOD_11 ( RuntimeException :: new ) ; org . junit . Assert . assertEquals ( STRING_7 , IDENT_9 . METHOD_12 ( ) ) ; org . junit . Assert . assertEquals ( STRING_8 , IDENT_9 . METHOD_13 ( ) ) ; org . junit . Assert . assertEquals ( 1 , IDENT_9 . METHOD_14 ( ) . length ) ; org . junit . Assert . assertEquals ( STRING_9 , IDENT_9 . METHOD_14 ( ) [ 0 ] ) ; org . junit . Assert . assertEquals ( 0 , IDENT_9 . METHOD_15 ( ) . length ) ; org . junit . Assert . assertEquals ( STRING_10 , IDENT_9 . METHOD_16 ( ) ) ; return true ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertTrue ( match ) 