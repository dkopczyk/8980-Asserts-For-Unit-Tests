METHOD_0 ( ) { nl . IDENT_0 . IDENT_1 . domain . IDENT_2 IDENT_3 = new nl . IDENT_0 . IDENT_1 . domain . METHOD_1 ( ) ; nl . IDENT_0 . IDENT_1 . domain . IDENT_4 IDENT_5 = new nl . IDENT_0 . IDENT_1 . domain . METHOD_2 ( STRING_0 , STRING_1 . getBytes ( ) , STRING_2 , nl . IDENT_0 . IDENT_1 . service . IDENT_6 . IDENT_7 ) ; IDENT_3 . METHOD_3 ( ) . METHOD_4 ( IDENT_5 ) ; IDENT_3 . METHOD_5 ( ) . METHOD_6 ( IDENT_5 , STRING_3 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { java . util . Map < java . lang . String , nl . IDENT_0 . IDENT_1 . domain . METHOD_2 > result = new java . util . IDENT_8 < java . lang . String , nl . IDENT_0 . IDENT_1 . domain . METHOD_2 > ( ) ; nl . IDENT_0 . IDENT_1 . domain . METHOD_1 . METHOD_8 ( METHOD_9 ( ) , result ) ; for ( nl . IDENT_0 . IDENT_1 . domain . IDENT_9 IDENT_10 : METHOD_3 ( ) . METHOD_10 ( ) ) { nl . IDENT_0 . IDENT_1 . domain . METHOD_1 . METHOD_8 ( IDENT_10 . getResource ( ) , result ) ; } for ( nl . IDENT_0 . IDENT_1 . domain . METHOD_2 resource : METHOD_5 ( ) . METHOD_11 ( ) ) { nl . IDENT_0 . IDENT_1 . domain . METHOD_1 . METHOD_8 ( resource , result ) ; } for ( nl . IDENT_0 . IDENT_1 . domain . IDENT_11 IDENT_12 : METHOD_12 ( ) . METHOD_13 ( ) ) { nl . IDENT_0 . IDENT_1 . domain . METHOD_1 . METHOD_8 ( IDENT_12 . getResource ( ) , result ) ; } return new java . util . ArrayList < nl . IDENT_0 . IDENT_1 . domain . METHOD_2 > ( result . values ( ) ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_3 . METHOD_7 ( ) . size ( ) ) 