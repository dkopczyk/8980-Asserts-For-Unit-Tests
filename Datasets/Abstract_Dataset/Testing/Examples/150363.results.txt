METHOD_0 ( ) { IDENT_0 = new com . IDENT_1 . IDENT_2 . util . METHOD_1 ( ) ; IDENT_0 . METHOD_2 ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ; try { IDENT_0 . METHOD_3 ( this ) ; } catch ( com . IDENT_1 . IDENT_2 . util . METHOD_1 . IDENT_6 e ) { e . printStackTrace ( ) ; } IDENT_7 = new com . IDENT_1 . IDENT_2 . util . METHOD_4 ( ) ; IDENT_7 . init ( IDENT_0 , com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 ) ; try { IDENT_7 . start ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; } for ( int i = 0 ; i < ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ; i ++ ) { com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 IDENT_10 = new com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_5 ( ) ; IDENT_0 . METHOD_6 ( IDENT_10 ) ; } while ( ( IDENT_0 . size ( 0 ) ) > 0 ) { try { java . lang . Thread . sleep ( 1000 ) ; } catch ( java . lang . IDENT_11 e ) { e . printStackTrace ( ) ; } } System . out . println ( ( ( ( STRING_0 + ( IDENT_12 ) ) + STRING_1 ) + ( IDENT_13 ) ) ) ; System . out . println ( ( STRING_2 + ( com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_14 . get ( ) ) ) ) ; "<AssertPlaceHolder>" ; com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_14 . get ( ) ; IDENT_7 . METHOD_7 ( ) ; System . out . println ( STRING_3 ) ; } get ( ) { if ( IDENT_15 . isEmpty ( ) ) return null ; int size = IDENT_15 . size ( ) ; com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 [ ] events = new com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 [ size ] ; int IDENT_19 = 0 ; int IDENT_20 = 0 ; for ( ; IDENT_20 < size ; IDENT_20 ++ ) { com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 event = ( ( com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 ) ( IDENT_15 . METHOD_8 ( ) ) ) ; if ( event != null ) { events [ IDENT_20 ] = event ; IDENT_19 += ( ( io . netty . buffer . IDENT_21 ) ( events [ IDENT_20 ] . METHOD_9 ( ) ) ) . METHOD_10 ( ) ; } else break ; } if ( IDENT_20 == 0 ) return null ; IDENT_22 . METHOD_11 ( ( - IDENT_19 ) ) ; if ( IDENT_20 == size ) { return events ; } com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 [ ] IDENT_23 = new com . IDENT_1 . IDENT_2 . IDENT_16 . transport . netty . IDENT_17 . handler . IDENT_18 [ IDENT_20 ] ; for ( int x = 0 ; x < IDENT_20 ; x ++ ) { IDENT_23 [ x ] = events [ x ] ; } return IDENT_23 ; }
org . junit . Assert . assertEquals ( true , ( ( IDENT_12 ) == ( IDENT_13 ) ) ) 