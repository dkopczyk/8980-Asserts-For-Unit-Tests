METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 meta = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; IDENT_5 . add ( meta ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_5 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . query . validator . IDENT_9 IDENT_10 = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . query . validator . METHOD_3 ( IDENT_7 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . query . request . IDENT_11 IDENT_12 = new com . IDENT_0 . IDENT_1 . IDENT_2 . query . request . METHOD_4 ( ) ; IDENT_12 . METHOD_5 ( STRING_0 ) ; IDENT_12 . METHOD_6 ( STRING_1 ) ; IDENT_12 . METHOD_7 ( com . google . common . collect . Lists . newArrayList ( STRING_2 ) ) ; IDENT_12 . METHOD_8 ( STRING_3 ) ; IDENT_12 . METHOD_9 ( STRING_4 ) ; IDENT_12 . METHOD_10 ( STRING_5 ) ; IDENT_12 . METHOD_11 ( 0 ) ; IDENT_12 . METHOD_12 ( com . google . common . collect . Lists . newArrayList ( STRING_6 ) ) ; IDENT_12 . METHOD_13 ( Constants . IDENT_13 . core ) ; IDENT_12 . METHOD_14 ( STRING_7 ) ; try { IDENT_10 . validate ( IDENT_12 ) ; org . junit . Assert . fail ( STRING_8 ) ; } catch ( com . IDENT_0 . IDENT_1 . IDENT_2 . exception . IDENT_14 ex ) { "<AssertPlaceHolder>" ; } } validate ( com . IDENT_0 . IDENT_1 . IDENT_2 . query . request . IDENT_15 ) { if ( com . google . common . base . IDENT_16 . METHOD_15 ( req . METHOD_16 ( ) ) ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( IDENT_17 . IDENT_18 . METHOD_18 ( ) ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . query . request . IDENT_19 IDENT_20 = ( ( com . IDENT_0 . IDENT_1 . IDENT_2 . query . request . IDENT_19 ) ( req ) ) ; org . joda . time . IDENT_21 start = null ; org . joda . time . IDENT_21 end = null ; java . lang . String IDENT_22 = IDENT_20 . METHOD_19 ( ) ; java . lang . String IDENT_23 = IDENT_20 . METHOD_20 ( ) ; java . lang . String IDENT_24 = IDENT_20 . METHOD_21 ( ) ; java . lang . String IDENT_25 = IDENT_20 . METHOD_22 ( ) ; if ( IDENT_23 != null ) { if ( ( ( IDENT_24 == null ) && ( IDENT_25 == null ) ) && ( IDENT_22 == null ) ) { if ( IDENT_23 . equals ( STRING_9 ) ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( ( ( IDENT_17 . IDENT_26 . METHOD_18 ( ) ) + IDENT_23 ) ) ; } else if ( IDENT_23 . equals ( STRING_10 ) ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( ( ( IDENT_17 . IDENT_26 . METHOD_18 ( ) ) + IDENT_23 ) ) ; } } else { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) ; } } else { if ( IDENT_22 != null ) { java . lang . String [ ] IDENT_28 = IDENT_22 . split ( "/" ) ; if ( ( IDENT_28 . length ) != 2 ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) ; } else { IDENT_24 = IDENT_28 [ 0 ] ; IDENT_25 = IDENT_28 [ 1 ] ; } } try { start = IDENT_29 . IDENT_30 . METHOD_23 ( IDENT_24 ) ; end = IDENT_29 . IDENT_30 . METHOD_23 ( IDENT_25 ) ; } catch ( java . lang . Exception e ) { } if ( start == null ) throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) ; if ( end == null ) throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) ; if ( ( start . compareTo ( end ) ) >= 0 ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( ( ( ( ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) + start ) + "/" ) + end ) ) ; } org . joda . time . IDENT_21 now = new org . joda . time . METHOD_24 ( ) ; if ( ( start . compareTo ( now ) ) >= 0 ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . exception . METHOD_17 ( ( ( IDENT_17 . IDENT_27 . METHOD_18 ( ) ) + start ) ) ; } } }
org . junit . Assert . assertTrue ( true ) 