METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . storage . spi . IDENT_2 configuration = com . IDENT_0 . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . storage . spi . IDENT_5 storage = com . IDENT_0 . IDENT_1 . storage . api . IDENT_6 . METHOD_2 ( configuration ) ; java . io . File directory = new java . io . File ( ( ( "/" + ( com . IDENT_0 . IDENT_1 . engine . IDENT_7 . class . METHOD_3 ( ) ) ) + STRING_0 ) ) ; if ( storage . exists ( directory ) ) { storage . METHOD_4 ( directory , true ) ; } com . IDENT_0 . IDENT_1 . engine . IDENT_8 IDENT_9 = new com . IDENT_0 . IDENT_1 . engine . METHOD_5 ( directory ) ; try ( com . IDENT_0 . IDENT_1 . engine . IDENT_10 IDENT_11 = com . IDENT_0 . IDENT_1 . engine . IDENT_10 . create ( storage , IDENT_9 , new com . IDENT_0 . IDENT_1 . IDENT_12 . METHOD_6 ( ) ) ) { IDENT_11 . METHOD_7 ( STRING_1 , STRING_2 ) ; IDENT_11 . METHOD_7 ( STRING_3 , STRING_4 ) ; IDENT_11 . METHOD_7 ( STRING_5 , STRING_6 ) ; } try ( com . IDENT_0 . IDENT_1 . engine . IDENT_10 IDENT_11 = com . IDENT_0 . IDENT_1 . engine . IDENT_10 . METHOD_8 ( storage , directory ) ) { "<AssertPlaceHolder>" ; } } METHOD_9 ( java . lang . String ) { return IDENT_13 . containsKey ( name ) ; }
org . junit . Assert . assertTrue ( IDENT_11 . METHOD_9 ( STRING_1 ) ) 