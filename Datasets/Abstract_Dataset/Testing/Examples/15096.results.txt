METHOD_0 ( ) { IDENT_0 . METHOD_1 ( IDENT_1 . IDENT_2 . IDENT_3 , STRING_0 ) ; IDENT_0 . METHOD_2 ( IDENT_1 . IDENT_2 . IDENT_4 , true ) ; METHOD_3 ( ( ( STRING_1 + ( org . apache . hadoop . hive . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 ) ) + STRING_2 ) ) ; METHOD_3 ( ( ( STRING_3 + ( org . apache . hadoop . hive . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 ) ) + STRING_4 ) ) ; org . apache . hadoop . hive . IDENT_5 . IDENT_6 . METHOD_4 ( IDENT_0 ) ; java . util . List < java . lang . String > rs = METHOD_3 ( ( ( STRING_5 + ( org . apache . hadoop . hive . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 ) ) + STRING_6 ) ) ; int [ ] [ ] IDENT_9 = new int [ ] [ ] { new int [ ] { 1 , 2 } } ; "<AssertPlaceHolder>" ; } METHOD_5 ( int [ ] [ ] ) { assert ( IDENT_10 . length ) > 0 ; int [ ] [ ] IDENT_11 = IDENT_10 . METHOD_6 ( ) ; java . util . Arrays . METHOD_7 ( IDENT_11 , new org . apache . hadoop . hive . IDENT_5 . IDENT_6 . METHOD_8 ( ) ) ; java . util . List < java . lang . String > rs = new java . util . ArrayList < java . lang . String > ( ) ; for ( int [ ] row : IDENT_11 ) { assert ( row . length ) > 0 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( int value : row ) { sb . append ( value ) . append ( STRING_7 ) ; } sb . METHOD_9 ( ( ( sb . length ( ) ) - 1 ) ) ; rs . add ( sb . toString ( ) ) ; } return rs ; }
org . junit . Assert . assertEquals ( org . apache . hadoop . hive . IDENT_5 . IDENT_6 . METHOD_5 ( IDENT_9 ) , rs ) 