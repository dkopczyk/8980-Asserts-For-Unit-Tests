METHOD_0 ( ) { java . util . List < org . apache . hadoop . fs . Path > IDENT_0 = new java . util . ArrayList ( ) ; org . apache . hadoop . fs . Path path = new org . apache . hadoop . fs . Path ( STRING_0 ) ; IDENT_0 . add ( path ) ; IDENT_0 . add ( path ) ; IDENT_0 . add ( path ) ; java . util . concurrent . IDENT_1 pool = mock ( java . util . concurrent . IDENT_1 . class ) ; java . util . concurrent . IDENT_2 IDENT_3 = mock ( java . util . concurrent . IDENT_2 . class ) ; when ( IDENT_3 . get ( ) ) . METHOD_1 ( new java . lang . RuntimeException ( ) ) ; when ( pool . METHOD_2 ( any ( java . util . concurrent . IDENT_4 . class ) ) ) . thenReturn ( IDENT_3 ) ; java . lang . Exception e = null ; try { org . apache . hadoop . hive . IDENT_5 . exec . IDENT_6 . METHOD_3 ( mock ( org . apache . hadoop . IDENT_7 . IDENT_8 . class ) , mock ( org . apache . hadoop . hive . IDENT_5 . plan . IDENT_9 . class ) , mock ( org . apache . hadoop . fs . Path . class ) , mock ( org . apache . hadoop . hive . IDENT_5 . Context . class ) , false , IDENT_0 , pool ) ; } catch ( java . lang . Exception IDENT_10 ) { e = IDENT_10 ; } "<AssertPlaceHolder>" ; verify ( pool , times ( 3 ) ) . METHOD_2 ( any ( java . util . concurrent . IDENT_4 . class ) ) ; verify ( pool ) . METHOD_4 ( ) ; } METHOD_2 ( org . apache . hive . spark . client . IDENT_11 ) { return protocol . METHOD_2 ( job , java . util . Collections . < org . apache . hive . spark . client . IDENT_12 . IDENT_13 < T > > emptyList ( ) ) ; }
org . junit . Assert . assertNotNull ( e ) 