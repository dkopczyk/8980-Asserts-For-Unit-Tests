METHOD_0 ( ) { final int IDENT_0 = 20 ; final int IDENT_1 = 4 ; final int IDENT_2 = 100 ; java . util . List < java . lang . String > IDENT_3 = METHOD_1 ( IDENT_0 ) ; org . apache . hadoop . IDENT_4 . IDENT_5 [ ] IDENT_6 = METHOD_2 ( IDENT_2 ) ; java . lang . StringBuilder IDENT_7 = new java . lang . StringBuilder ( "\n" ) ; java . lang . String [ ] IDENT_8 = new java . lang . String [ IDENT_6 . length ] ; double IDENT_9 = 0 ; double IDENT_10 = 0 ; double IDENT_11 = 0 ; double IDENT_12 = Double . MAX_VALUE ; for ( int IDENT_13 = IDENT_1 ; IDENT_13 <= ( IDENT_3 . size ( ) ) ; ++ IDENT_13 ) { java . util . List < java . lang . String > IDENT_14 = IDENT_3 . METHOD_3 ( 0 , IDENT_13 ) ; org . apache . hadoop . hive . IDENT_15 . exec . IDENT_16 . IDENT_17 IDENT_18 = new org . apache . hadoop . hive . IDENT_15 . exec . IDENT_16 . METHOD_4 ( IDENT_14 ) ; int IDENT_19 = 0 ; int IDENT_20 = 0 ; java . lang . String IDENT_21 = IDENT_14 . get ( ( IDENT_13 - 1 ) ) ; for ( int IDENT_22 = 0 ; IDENT_22 < ( IDENT_6 . length ) ; ++ IDENT_22 ) { java . lang . String [ ] IDENT_23 = IDENT_18 . METHOD_5 ( IDENT_6 [ IDENT_22 ] ) ; "<AssertPlaceHolder>" ; java . lang . String IDENT_24 = IDENT_23 [ 0 ] ; if ( ( IDENT_13 > IDENT_1 ) && ( ! ( IDENT_24 . equals ( IDENT_8 [ IDENT_22 ] ) ) ) ) { ++ IDENT_19 ; } if ( IDENT_21 . equals ( IDENT_24 ) ) { ++ IDENT_20 ; } IDENT_8 [ IDENT_22 ] = IDENT_24 ; } if ( IDENT_13 == IDENT_1 ) { continue ; } java . lang . String IDENT_25 = ( STRING_0 + IDENT_13 ) + STRING_1 ; java . lang . String IDENT_26 = IDENT_19 + STRING_2 ; java . lang . String IDENT_27 = IDENT_20 + STRING_3 ; LOG . info ( ( ( ( IDENT_26 + STRING_4 ) + IDENT_27 ) + IDENT_25 ) ) ; double IDENT_28 = ( FLOAT_0 * ( IDENT_6 . length ) ) / IDENT_13 ; double IDENT_29 = ( FLOAT_0 * ( IDENT_6 . length ) ) / IDENT_13 ; IDENT_9 += IDENT_19 / IDENT_28 ; IDENT_11 = java . lang . Math . max ( ( IDENT_19 / IDENT_28 ) , IDENT_11 ) ; IDENT_10 += IDENT_20 / IDENT_29 ; IDENT_12 = java . lang . Math . min ( ( IDENT_20 / IDENT_29 ) , IDENT_12 ) ; METHOD_6 ( IDENT_7 , IDENT_19 , IDENT_20 , IDENT_25 , IDENT_26 , IDENT_27 , IDENT_28 , IDENT_29 ) ; } int count = ( IDENT_3 . size ( ) ) - IDENT_1 ; double IDENT_30 = IDENT_9 / count ; double IDENT_31 = IDENT_10 / count ; java . lang . String IDENT_32 = ( ( ( ( ( ( STRING_5 + IDENT_30 ) + STRING_6 ) + IDENT_11 ) + STRING_7 ) + IDENT_31 ) + STRING_6 ) + IDENT_12 ; LOG . info ( IDENT_32 ) ; if ( ( ( ( IDENT_30 > FLOAT_1 ) || ( IDENT_31 < FLOAT_2 ) ) || ( IDENT_11 > FLOAT_3 ) ) || ( IDENT_12 < FLOAT_4 ) ) { org . junit . Assert . fail ( ( ( IDENT_32 + STRING_8 ) + ( IDENT_7 . toString ( ) ) ) ) ; } } METHOD_5 ( org . apache . hadoop . IDENT_4 . IDENT_5 ) { if ( ! ( split instanceof org . apache . hadoop . IDENT_4 . IDENT_33 ) ) { if ( IDENT_34 ) { org . apache . hadoop . hive . IDENT_15 . exec . IDENT_16 . METHOD_4 . LOG . debug ( ( ( STRING_9 + split ) + STRING_10 ) ) ; } return split . METHOD_5 ( ) ; } org . apache . hadoop . IDENT_4 . IDENT_33 IDENT_35 = ( ( org . apache . hadoop . IDENT_4 . IDENT_33 ) ( split ) ) ; java . lang . String IDENT_36 = ( ( ( ( STRING_11 + ( IDENT_35 . getPath ( ) ) ) + STRING_12 ) + ( IDENT_35 . METHOD_7 ( ) ) ) + STRING_13 ) + ( IDENT_35 . METHOD_8 ( ) ) ; java . util . List < java . lang . String > IDENT_37 = METHOD_9 ( IDENT_35 ) ; java . lang . String location = IDENT_37 . get ( org . apache . hadoop . hive . IDENT_15 . exec . IDENT_16 . METHOD_4 . METHOD_10 ( IDENT_37 , IDENT_35 . getPath ( ) . toString ( ) , IDENT_35 . METHOD_7 ( ) , IDENT_36 ) ) ; return location != null ? new java . lang . String [ ] { location } : null ; }
org . junit . Assert . assertEquals ( 1 , IDENT_23 . length ) 