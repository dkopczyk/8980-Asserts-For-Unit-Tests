METHOD_0 ( ) { java . util . List < ch . IDENT_0 . IDENT_1 . core . pattern . parser . IDENT_2 > IDENT_3 = new ch . IDENT_0 . IDENT_1 . core . pattern . parser . METHOD_1 ( STRING_0 ) . METHOD_2 ( ) ; java . util . List < ch . IDENT_0 . IDENT_1 . core . pattern . parser . IDENT_2 > IDENT_4 = new java . util . ArrayList < ch . IDENT_0 . IDENT_1 . core . pattern . parser . IDENT_2 > ( ) ; IDENT_4 . add ( IDENT_2 . IDENT_5 ) ; IDENT_4 . add ( IDENT_2 . IDENT_6 ) ; IDENT_4 . add ( new ch . IDENT_0 . IDENT_1 . core . pattern . parser . METHOD_3 ( METHOD_3 . IDENT_7 , STRING_1 ) ) ; IDENT_4 . add ( METHOD_3 . IDENT_5 ) ; IDENT_4 . add ( new ch . IDENT_0 . IDENT_1 . core . pattern . parser . METHOD_3 ( METHOD_3 . IDENT_8 , STRING_2 ) ) ; java . util . List < java . lang . String > IDENT_9 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_9 . add ( STRING_3 ) ; IDENT_4 . add ( new ch . IDENT_0 . IDENT_1 . core . pattern . parser . METHOD_3 ( METHOD_3 . IDENT_10 , IDENT_9 ) ) ; IDENT_4 . add ( METHOD_3 . IDENT_11 ) ; "<AssertPlaceHolder>" ; } add ( IDENT_12 ) { IDENT_13 [ IDENT_14 ] = event ; if ( ( ++ ( IDENT_14 ) ) == ( IDENT_15 ) ) IDENT_14 = 0 ; if ( ( IDENT_16 ) < ( IDENT_15 ) ) ( IDENT_16 ) ++ ; else if ( ( ++ ( first ) ) == ( IDENT_15 ) ) first = 0 ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_3 ) 