METHOD_0 ( ) { random = new java . util . METHOD_1 ( INT_0 ) ; org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 map = new org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( false , false , org . apache . hadoop . hive . IDENT_0 . plan . IDENT_5 . IDENT_6 . IDENT_7 , IDENT_8 , FLOAT_0 , IDENT_9 , ( - 1 ) ) ; org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 . IDENT_11 IDENT_12 = new org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( IDENT_8 ) ; i ++ ) { long key ; while ( true ) { key = random . METHOD_4 ( ) ; if ( ! ( IDENT_12 . contains ( key ) ) ) { break ; } } map . METHOD_5 ( key ) ; IDENT_12 . add ( key ) ; } IDENT_12 . verify ( map ) ; long IDENT_13 ; while ( true ) { IDENT_13 = random . METHOD_4 ( ) ; if ( ! ( IDENT_12 . contains ( IDENT_13 ) ) ) { break ; } } org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_14 . IDENT_15 IDENT_16 = map . METHOD_6 ( ) ; org . apache . hadoop . hive . IDENT_0 . exec . IDENT_17 . IDENT_18 IDENT_19 = map . contains ( IDENT_13 , IDENT_16 ) ; "<AssertPlaceHolder>" ; } contains ( long , org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_14 . IDENT_15 ) { org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_20 . IDENT_21 IDENT_22 = ( ( org . apache . hadoop . hive . IDENT_0 . exec . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_20 . IDENT_21 ) ( IDENT_16 ) ) ; IDENT_22 . METHOD_7 ( ) ; long hashCode = org . apache . hive . common . util . IDENT_23 . METHOD_8 ( key ) ; int IDENT_24 = METHOD_9 ( key , hashCode ) ; org . apache . hadoop . hive . IDENT_0 . exec . IDENT_17 . IDENT_18 IDENT_19 ; if ( IDENT_24 == ( - 1 ) ) { IDENT_19 = IDENT_17 . IDENT_18 . IDENT_25 ; } else { IDENT_22 . set ( IDENT_26 [ IDENT_24 ] ) ; IDENT_19 = IDENT_17 . IDENT_18 . IDENT_27 ; } IDENT_22 . METHOD_10 ( IDENT_19 ) ; return IDENT_19 ; }
org . junit . Assert . assertTrue ( ( IDENT_19 == ( IDENT_17 . IDENT_18 . IDENT_25 ) ) ) 