METHOD_0 ( ) { final org . apache . hive . spark . client . IDENT_0 . IDENT_1 server = METHOD_1 ( new org . apache . hive . spark . client . IDENT_0 . METHOD_2 ( org . apache . hive . spark . client . IDENT_0 . IDENT_2 . IDENT_3 , IDENT_4 ) ) ; final java . lang . String msg = STRING_0 ; java . util . concurrent . IDENT_5 < java . lang . String > IDENT_6 = ( ) -> { org . apache . hive . spark . client . IDENT_0 . IDENT_7 [ ] IDENT_8 = METHOD_3 ( server , org . apache . hive . spark . client . IDENT_0 . IDENT_2 . IDENT_3 , java . util . UUID . METHOD_4 ( ) . toString ( ) ) ; org . apache . hive . spark . client . IDENT_0 . IDENT_7 IDENT_0 ; if ( java . util . concurrent . IDENT_9 . METHOD_5 ( ) . METHOD_6 ( ) ) { IDENT_0 = IDENT_8 [ 0 ] ; } else { IDENT_0 = IDENT_8 [ 1 ] ; } org . apache . hive . spark . client . IDENT_0 . IDENT_10 IDENT_11 = new org . apache . hive . spark . client . IDENT_0 . METHOD_7 ( STRING_0 ) ; IDENT_12 < org . apache . hive . spark . client . IDENT_0 . METHOD_7 > call = IDENT_0 . call ( IDENT_11 , . class ) ; org . apache . hive . spark . client . IDENT_0 . METHOD_7 IDENT_13 = call . get ( 10 , TimeUnit . IDENT_14 ) ; return IDENT_13 . message ; } ; final int IDENT_15 = ( java . util . concurrent . IDENT_9 . METHOD_5 ( ) . METHOD_8 ( 5 ) ) + 5 ; java . util . concurrent . IDENT_16 executor = java . util . concurrent . IDENT_17 . METHOD_9 ( IDENT_15 ) ; java . util . List < java . util . concurrent . IDENT_12 < java . lang . String > > IDENT_18 = new java . util . ArrayList ( IDENT_15 ) ; for ( int i = 0 ; i < IDENT_15 ; i ++ ) { IDENT_18 . add ( executor . METHOD_10 ( IDENT_6 ) ) ; } executor . METHOD_11 ( ) ; for ( java . util . concurrent . IDENT_12 < java . lang . String > future : IDENT_18 ) { "<AssertPlaceHolder>" ; } } get ( ) { return METHOD_12 ( ) ; }
org . junit . Assert . assertEquals ( msg , future . get ( ) ) 