METHOD_0 ( ) { java . util . Set < com . validator . IDENT_0 . IDENT_1 > IDENT_2 = new java . util . IDENT_3 < com . validator . IDENT_0 . IDENT_1 > ( ) ; IDENT_2 . add ( IDENT_4 . IDENT_5 ) ; IDENT_2 . add ( IDENT_4 . IDENT_6 ) ; IDENT_2 . add ( IDENT_4 . IDENT_7 ) ; IDENT_2 . add ( IDENT_4 . IDENT_8 ) ; IDENT_2 . add ( IDENT_4 . IDENT_9 ) ; IDENT_2 . add ( IDENT_4 . IDENT_10 ) ; IDENT_2 . add ( IDENT_4 . IDENT_11 ) ; IDENT_2 . add ( IDENT_4 . IDENT_12 ) ; IDENT_2 . add ( IDENT_4 . IDENT_13 ) ; IDENT_2 . add ( IDENT_4 . IDENT_14 ) ; IDENT_2 . add ( IDENT_4 . IDENT_15 ) ; IDENT_2 . add ( IDENT_4 . IDENT_16 ) ; com . validator . IDENT_0 . IDENT_17 input = new com . validator . IDENT_0 . METHOD_1 ( ) ; input . METHOD_2 ( true ) ; input . METHOD_3 ( STRING_0 ) ; input . METHOD_4 ( STRING_1 ) ; input . METHOD_5 ( STRING_2 ) ; input . METHOD_6 ( STRING_3 ) ; input . METHOD_7 ( STRING_4 ) ; input . METHOD_8 ( true ) ; input . METHOD_9 ( true ) ; input . METHOD_10 ( STRING_5 ) ; input . METHOD_11 ( STRING_5 ) ; input . METHOD_12 ( STRING_6 ) ; input . METHOD_13 ( STRING_7 ) ; input . METHOD_14 ( STRING_1 ) ; input . METHOD_15 ( STRING_2 ) ; input . METHOD_16 ( STRING_3 ) ; com . validator . IDENT_0 . IDENT_18 IDENT_19 = new com . validator . IDENT_0 . METHOD_17 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } execute ( com . validation . IDENT_0 . METHOD_1 ) { com . validation . IDENT_0 . IDENT_1 IDENT_20 = IDENT_4 . IDENT_21 ; for ( java . util . Iterator < com . validation . IDENT_0 . IDENT_1 > iterator = IDENT_22 . iterator ( ) ; iterator . hasNext ( ) ; ) { IDENT_20 = iterator . next ( ) ; if ( IDENT_20 . validate ( IDENT_23 ) ) { return IDENT_20 . METHOD_18 ( ) ; } } return null ; }
org . junit . Assert . assertNull ( IDENT_19 . execute ( input ) ) 