METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 builder = new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 ( false ) ; java . lang . String IDENT_4 = "test" ; IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_5 input = new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( METHOD_3 ( null , IDENT_4 ) , false , false ) ; IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 IDENT_7 = METHOD_4 ( STRING_0 ) ; builder . METHOD_5 ( input , IDENT_7 ) ; IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 IDENT_8 = METHOD_4 ( STRING_1 ) ; builder . METHOD_5 ( input , IDENT_8 ) ; IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_9 IDENT_10 = builder . build ( ) ; IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 < IDENT_0 . model . IDENT_12 > IDENT_13 = new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_6 ( ) ; IDENT_13 . METHOD_7 ( ) ; IDENT_13 . METHOD_8 ( new IDENT_0 . model . METHOD_9 ( null , IDENT_4 ) ) ; java . util . List < IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_14 > IDENT_15 = IDENT_10 . METHOD_10 ( IDENT_13 ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( java . lang . String [ ] ) { IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_16 result = new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_12 ( ) ; for ( java . lang . String value : values ) { result . add ( new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_13 ( new IDENT_0 . model . METHOD_9 ( null , value ) ) ) ; } return result ; }
org . junit . Assert . assertThat ( IDENT_15 , org . hamcrest . Matchers . contains ( new IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_14 ( java . util . Arrays . asList ( IDENT_7 , IDENT_8 ) , METHOD_11 ( IDENT_4 ) , 0 , 1 ) ) ) 