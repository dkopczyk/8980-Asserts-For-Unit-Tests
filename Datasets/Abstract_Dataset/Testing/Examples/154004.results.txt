METHOD_0 ( ) { java . lang . String IDENT_0 = "bar" ; org . jboss . IDENT_1 . core . IDENT_2 processor = new org . jboss . IDENT_1 . core . METHOD_1 ( IDENT_0 ) ; java . util . List < javax . ws . rs . core . IDENT_3 > expected = java . util . Arrays . asList ( IDENT_3 . IDENT_4 , IDENT_3 . IDENT_5 , IDENT_3 . IDENT_6 , IDENT_3 . IDENT_7 ) ; org . jboss . IDENT_1 . mock . IDENT_8 request = org . jboss . IDENT_1 . mock . IDENT_8 . get ( ( ( ( ( ( STRING_0 + IDENT_0 ) + STRING_1 ) + ( expected . get ( 0 ) ) ) + STRING_2 ) + ( expected . get ( 1 ) ) ) ) ; org . jboss . IDENT_1 . core . IDENT_9 . jaxrs . IDENT_10 context = new org . jboss . IDENT_1 . core . IDENT_9 . jaxrs . METHOD_2 ( request , null , null ) ; request . accept ( expected . get ( 2 ) ) ; request . accept ( expected . get ( 3 ) ) ; processor . filter ( context ) ; java . util . List < javax . ws . rs . core . IDENT_3 > actual = request . METHOD_3 ( ) . METHOD_4 ( ) ; for ( javax . ws . rs . core . IDENT_3 expect : expected ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( ) { java . util . List < javax . ws . rs . core . IDENT_3 > list = new java . util . ArrayList < javax . ws . rs . core . IDENT_3 > ( ) ; java . util . List IDENT_11 = headers . get ( IDENT_12 . IDENT_13 ) ; if ( IDENT_11 == null ) return list ; for ( java . lang . Object obj : IDENT_11 ) { if ( obj instanceof javax . ws . rs . core . IDENT_3 ) { list . add ( ( ( javax . ws . rs . core . IDENT_3 ) ( obj ) ) ) ; continue ; } java . lang . String accept = null ; if ( obj instanceof java . lang . String ) { accept = ( ( java . lang . String ) ( obj ) ) ; } else { accept = configuration . METHOD_5 ( obj ) ; } java . util . IDENT_14 IDENT_15 = new java . util . METHOD_6 ( accept , STRING_2 ) ; while ( IDENT_15 . METHOD_7 ( ) ) { java . lang . String item = IDENT_15 . METHOD_8 ( ) . trim ( ) ; list . add ( javax . ws . rs . core . IDENT_3 . valueOf ( item ) ) ; } } org . jboss . IDENT_1 . util . IDENT_16 . METHOD_9 ( list ) ; return list ; }
org . junit . Assert . assertTrue ( actual . contains ( expect ) ) 