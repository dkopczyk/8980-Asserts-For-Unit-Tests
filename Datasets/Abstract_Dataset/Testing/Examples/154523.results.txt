METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = client . METHOD_1 ( ) ; java . lang . String key = java . util . UUID . METHOD_2 ( ) . toString ( ) ; java . lang . String value = java . util . UUID . METHOD_2 ( ) . toString ( ) ; METHOD_1 . METHOD_3 ( key , value ) ; final java . util . concurrent . IDENT_4 IDENT_5 = new java . util . concurrent . METHOD_4 ( 1 ) ; final java . util . concurrent . atomic . IDENT_6 IDENT_7 = new java . util . concurrent . atomic . METHOD_5 ( false ) ; METHOD_1 . METHOD_6 ( key , IDENT_8 . IDENT_9 , new com . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 < java . util . List < com . IDENT_0 . IDENT_1 . model . IDENT_12 . IDENT_13 > > ( ) { @ com . IDENT_0 . IDENT_1 . Override public void METHOD_7 ( com . IDENT_0 . IDENT_1 . model . IDENT_14 < java . util . List < com . IDENT_0 . IDENT_1 . model . IDENT_12 . IDENT_13 > > IDENT_15 ) { IDENT_7 . set ( true ) ; IDENT_5 . METHOD_8 ( ) ; } @ com . IDENT_0 . IDENT_1 . Override public void METHOD_9 ( java . lang . Throwable IDENT_16 ) { IDENT_16 . printStackTrace ( ) ; IDENT_5 . METHOD_8 ( ) ; } } ) ; IDENT_5 . METHOD_10 ( 3 , TimeUnit . IDENT_17 ) ; METHOD_1 . METHOD_11 ( key ) ; "<AssertPlaceHolder>" ; } get ( ) { if ( ( IDENT_18 ) != null ) { long IDENT_19 = java . time . IDENT_20 . METHOD_12 ( IDENT_18 , java . time . IDENT_21 . now ( ) ) . METHOD_13 ( ) ; org . junit . Assert . assertTrue ( java . lang . String . format ( STRING_0 , IDENT_22 . METHOD_13 ( ) , METHOD_12 ) , ( ( java . lang . Math . METHOD_14 ( ( METHOD_12 - ( IDENT_22 . METHOD_13 ( ) ) ) ) ) < 20 ) ) ; } IDENT_18 = java . time . IDENT_21 . now ( ) ; ( run ) ++ ; java . util . List < java . lang . Integer > response = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_23 ) ; i ++ ) { response . add ( 1 ) ; } return response ; }
org . junit . Assert . assertTrue ( IDENT_7 . get ( ) ) 