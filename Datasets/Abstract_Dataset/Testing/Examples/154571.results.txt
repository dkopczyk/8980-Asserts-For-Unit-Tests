METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_3 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_4 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_5 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_6 ; IDENT_3 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 0 , 0 ) ; IDENT_4 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 0 , 10 ) ; IDENT_5 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 10 , 10 ) ; IDENT_6 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 10 , 0 ) ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_7 . METHOD_2 ( graph , IDENT_3 , IDENT_4 , IDENT_5 , IDENT_6 , IDENT_3 ) ; java . util . List < com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 > IDENT_8 = com . github . IDENT_0 . IDENT_1 . geom . IDENT_7 . METHOD_3 ( graph , IDENT_3 , IDENT_5 ) ; for ( int i = 0 ; i < 100 ; i ++ ) { final java . util . List < com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 > IDENT_9 = com . github . IDENT_0 . IDENT_1 . geom . IDENT_7 . METHOD_3 ( graph , IDENT_3 , IDENT_5 ) ; "<AssertPlaceHolder>" ; IDENT_8 = IDENT_9 ; } } METHOD_3 ( com . github . IDENT_0 . IDENT_1 . geom . IDENT_10 , com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 , com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ) { return com . github . IDENT_0 . IDENT_1 . geom . IDENT_7 . METHOD_4 ( graph , from , to , com . github . IDENT_0 . IDENT_1 . geom . IDENT_11 . METHOD_5 ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_9 ) 