METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_3 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_4 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_5 ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_2 IDENT_6 ; IDENT_3 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 0 , 0 ) ; IDENT_4 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 0 , 10 ) ; IDENT_5 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 10 , 10 ) ; IDENT_6 = new com . github . IDENT_0 . IDENT_1 . geom . METHOD_1 ( 10 , 0 ) ; com . github . IDENT_0 . IDENT_1 . geom . IDENT_7 . METHOD_2 ( graph , IDENT_3 , IDENT_4 , IDENT_5 , IDENT_6 , IDENT_3 ) ; final org . apache . commons . math3 . random . IDENT_8 IDENT_9 = new org . apache . commons . math3 . random . METHOD_3 ( ) { @ com . github . IDENT_0 . IDENT_1 . geom . Override public void METHOD_4 ( long IDENT_10 ) { } @ com . github . IDENT_0 . IDENT_1 . geom . Override public void METHOD_4 ( @ javax . annotation . IDENT_11 int [ ] IDENT_10 ) { } @ com . github . IDENT_0 . IDENT_1 . geom . Override public void METHOD_4 ( int IDENT_10 ) { } @ com . github . IDENT_0 . IDENT_1 . geom . Override public long METHOD_5 ( ) { return 0 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public int METHOD_6 ( int IDENT_10 ) { return IDENT_10 + 1 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public int METHOD_6 ( ) { return 0 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public double METHOD_7 ( ) { return 0 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public float METHOD_8 ( ) { return 0 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public double METHOD_9 ( ) { return 0 ; } @ com . github . IDENT_0 . IDENT_1 . geom . Override public void METHOD_10 ( @ javax . annotation . IDENT_11 byte [ ] IDENT_10 ) { } @ com . github . IDENT_0 . IDENT_1 . geom . Override public boolean METHOD_11 ( ) { return false ; } } ; boolean IDENT_12 = false ; try { graph . METHOD_12 ( IDENT_9 ) ; } catch ( final java . lang . IllegalStateException e ) { IDENT_12 = true ; } "<AssertPlaceHolder>" ; } METHOD_12 ( org . apache . commons . math3 . random . METHOD_3 ) { return delegate . METHOD_12 ( generator ) ; }
org . junit . Assert . assertTrue ( IDENT_12 ) 