METHOD_0 ( ) { net . ripe . IDENT_0 . IDENT_1 . IDENT_2 < net . ripe . IDENT_0 . IDENT_3 , java . util . List < net . ripe . IDENT_4 . commons . validation . IDENT_5 . IDENT_6 > > IDENT_7 = net . ripe . IDENT_4 . commons . validation . IDENT_5 . IDENT_8 . METHOD_1 ( new net . ripe . IDENT_4 . commons . crypto . IDENT_9 . METHOD_1 . METHOD_2 ( net . ripe . IDENT_0 . IDENT_10 . parse ( STRING_0 ) , 20 ) , new net . ripe . IDENT_4 . commons . crypto . IDENT_9 . METHOD_1 . METHOD_2 ( net . ripe . IDENT_0 . IDENT_10 . parse ( STRING_1 ) , 20 ) ) ; net . ripe . IDENT_4 . commons . validation . METHOD_1 . IDENT_11 route = new net . ripe . IDENT_4 . commons . validation . METHOD_1 . METHOD_3 ( IDENT_12 , net . ripe . IDENT_0 . IDENT_10 . parse ( STRING_2 ) ) ; net . ripe . IDENT_4 . commons . validation . METHOD_1 . IDENT_13 IDENT_14 = subject . METHOD_4 ( IDENT_7 , route ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( net . ripe . IDENT_0 . IDENT_1 . IDENT_2 , net . ripe . IDENT_4 . commons . validation . METHOD_1 . METHOD_3 ) { net . ripe . IDENT_4 . commons . validation . METHOD_1 . IDENT_13 result = IDENT_13 . IDENT_15 ; for ( java . lang . IDENT_16 < ? extends net . ripe . IDENT_4 . commons . validation . METHOD_1 . IDENT_6 > IDENT_17 : IDENT_18 . METHOD_5 ( IDENT_19 . METHOD_6 ( ) ) ) { for ( net . ripe . IDENT_4 . commons . validation . METHOD_1 . IDENT_6 IDENT_20 : IDENT_17 ) { switch ( validate ( IDENT_20 , IDENT_19 ) ) { case IDENT_21 : return IDENT_13 . IDENT_21 ; case IDENT_22 : result = IDENT_13 . IDENT_22 ; break ; case IDENT_23 : result = IDENT_13 . IDENT_23 ; break ; case IDENT_15 : break ; } } } return result ; }
org . junit . Assert . assertEquals ( IDENT_13 . IDENT_21 , IDENT_14 ) 