METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 exceptions = new java . util . concurrent . atomic . METHOD_1 ( ) ; final java . util . concurrent . IDENT_1 IDENT_2 = java . util . concurrent . IDENT_3 . METHOD_2 ( net . ripe . db . whois . api . rest . client . IDENT_4 . IDENT_5 ) ; for ( int IDENT_6 = 0 ; IDENT_6 < ( net . ripe . db . whois . api . rest . client . IDENT_4 . IDENT_5 ) ; IDENT_6 ++ ) { IDENT_2 . METHOD_3 ( new java . lang . METHOD_4 ( ) { @ net . ripe . db . whois . api . rest . client . Override public void run ( ) { final net . ripe . db . whois . api . rest . client . IDENT_7 IDENT_8 = new net . ripe . db . whois . api . rest . client . METHOD_5 ( new java . io . ByteArrayInputStream ( ( STRING_0 1 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + STRING_3 2 ) + STRING_4 ) + STRING_5 2 ) + STRING_6 2 ) + STRING_7 2 ) + STRING_8 2 ) + STRING_9 2 ) + STRING_10 2 ) + STRING_11 2 ) + STRING_12 2 ) + STRING_13 2 ) + STRING_0 ) + STRING_14 ) + STRING_0 0 ) + STRING_15 ) ) . getBytes ( ) ) ) ; while ( IDENT_8 . hasNext ( ) ) { try { IDENT_8 . next ( ) ; } catch ( java . lang . Exception e ) { exceptions . METHOD_6 ( ) ; } } } } ) ; } IDENT_2 . METHOD_7 ( ) ; IDENT_2 . METHOD_8 ( 10 , TimeUnit . IDENT_9 ) ; "<AssertPlaceHolder>" ; } get ( ) { return ( original ) == null ? new net . ripe . db . whois . common . IDENT_10 . METHOD_9 ( attributes ) : new net . ripe . db . whois . common . IDENT_10 . METHOD_9 ( original , attributes ) ; }
org . junit . Assert . assertThat ( exceptions . get ( ) , org . hamcrest . Matchers . is ( 0 ) ) 