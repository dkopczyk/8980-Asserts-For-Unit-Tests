METHOD_0 ( ) { final net . ripe . db . whois . common . IDENT_0 . IDENT_1 IDENT_2 = net . ripe . db . whois . common . IDENT_0 . IDENT_1 . parse ( ( STRING_0 2 + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + STRING_2 ) + STRING_3 ) + STRING_0 3 ) + STRING_0 0 ) + STRING_4 ) + STRING_4 4 ) + STRING_4 1 ) + STRING_5 ) + STRING_4 0 ) + STRING_6 ) + STRING_4 3 ) + STRING_0 5 ) + STRING_7 ) + STRING_0 7 ) + STRING_0 4 ) + STRING_4 2 ) + STRING_0 8 ) + STRING_0 6 ) + STRING_8 ) + STRING_9 ) + STRING_0 1 ) + STRING_0 9 ) + STRING_0 ) ) ) ; final net . ripe . db . whois . update . IDENT_3 . IDENT_4 IDENT_5 = subject . METHOD_1 ( IDENT_2 , IDENT_6 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( net . ripe . db . whois . common . IDENT_0 . IDENT_1 , net . ripe . db . whois . update . domain . IDENT_8 , net . ripe . db . whois . update . domain . IDENT_9 ) { try { if ( net . ripe . db . whois . update . IDENT_3 . IDENT_10 . METHOD_2 ( object ) ) { return net . ripe . db . whois . update . IDENT_3 . IDENT_10 . parse ( object ) ; } else if ( net . ripe . db . whois . update . IDENT_3 . IDENT_11 . METHOD_3 ( object ) ) { return net . ripe . db . whois . update . IDENT_3 . IDENT_11 . parse ( object ) ; } else { IDENT_7 . METHOD_4 ( IDENT_6 , new net . ripe . db . whois . common . Message ( IDENT_12 . Type . IDENT_13 , STRING_10 ) ) ; } } catch ( java . lang . IllegalArgumentException e ) { final net . ripe . db . whois . common . Message IDENT_14 = new net . ripe . db . whois . common . Message ( IDENT_12 . Type . IDENT_13 , e . getMessage ( ) ) ; final java . util . List < net . ripe . db . whois . common . IDENT_0 . IDENT_15 > attributes = object . METHOD_5 ( IDENT_16 . IDENT_17 ) ; if ( attributes . isEmpty ( ) ) { IDENT_7 . METHOD_4 ( IDENT_6 , IDENT_14 ) ; } else { IDENT_7 . METHOD_4 ( IDENT_6 , attributes . get ( ( ( attributes . size ( ) ) - 1 ) ) , IDENT_14 ) ; } } return null ; }
org . junit . Assert . assertTrue ( ( IDENT_5 instanceof net . ripe . db . whois . update . IDENT_3 . IDENT_11 ) ) 