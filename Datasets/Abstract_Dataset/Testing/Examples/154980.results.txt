METHOD_0 ( ) { org . json . JSONObject IDENT_0 = new org . json . JSONObject ( this . IDENT_0 ) ; org . json . IDENT_1 IDENT_2 = IDENT_0 . METHOD_1 ( STRING_0 ) ; for ( int i = 0 ; i < ( IDENT_2 . length ( ) ) ; i ++ ) { org . json . JSONObject test = IDENT_2 . METHOD_2 ( i ) ; byte [ ] message = test . getString ( STRING_1 ) . getBytes ( STRING_2 ) ; byte [ ] IDENT_3 = java . security . IDENT_4 . getInstance ( STRING_3 ) . METHOD_3 ( message ) ; final java . math . BigInteger [ ] IDENT_5 = new java . math . BigInteger [ 16 ] ; org . IDENT_6 . IDENT_7 . crypto . IDENT_8 . IDENT_9 IDENT_10 = new org . IDENT_6 . IDENT_7 . crypto . IDENT_8 . METHOD_4 ( new org . IDENT_6 . IDENT_7 . crypto . IDENT_11 . METHOD_5 ( ) ) { int IDENT_12 = 0 ; @ com . IDENT_6 . core . Override public boolean isValid ( java . math . BigInteger k ) { IDENT_5 [ ( ( IDENT_12 ) ++ ) ] = k ; return ( IDENT_12 ) == 16 ; } } ; java . math . BigInteger d = new java . math . BigInteger ( test . getString ( STRING_4 ) , 16 ) ; IDENT_10 . init ( com . IDENT_6 . crypto . IDENT_13 . IDENT_14 . order ( ) , d , IDENT_3 ) ; IDENT_10 . METHOD_6 ( ) ; for ( int j = 0 ; j < 16 ; j ++ ) { java . math . BigInteger IDENT_15 = IDENT_5 [ j ] ; java . lang . String key = STRING_5 + j ; if ( test . METHOD_7 ( key ) ) { "<AssertPlaceHolder>" ; } } } } toString ( T extends com . IDENT_6 . core . IDENT_16 . IDENT_17 ) { return obj . toString ( ) ; }
org . junit . Assert . assertEquals ( test . getString ( key ) , IDENT_15 . toString ( 16 ) ) 