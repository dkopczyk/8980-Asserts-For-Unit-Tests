METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) . METHOD_2 ( METHOD_3 ( configuration , STRING_0 , false ) ) ; java . util . List < org . apache . cassandra . IDENT_1 . IDENT_2 > IDENT_3 = IDENT_4 . METHOD_4 ( ) ; boolean IDENT_5 = false ; for ( org . apache . cassandra . IDENT_1 . IDENT_2 IDENT_6 : IDENT_3 ) { if ( org . apache . commons . lang . StringUtils . equals ( IDENT_6 . name , STRING_0 ) ) { IDENT_5 = true ; break ; } } "<AssertPlaceHolder>" ; } METHOD_4 ( ) { java . util . List < org . apache . cassandra . IDENT_1 . IDENT_2 > IDENT_7 ; try { IDENT_7 = IDENT_0 . METHOD_1 ( ) . METHOD_5 ( ) ; for ( java . util . Iterator < org . apache . cassandra . IDENT_1 . IDENT_2 > iterator = IDENT_7 . iterator ( ) ; iterator . hasNext ( ) ; ) { org . apache . cassandra . IDENT_1 . IDENT_2 IDENT_6 = iterator . next ( ) ; java . lang . String name = IDENT_6 . name ; org . apache . cassandra . hadoop . hive . IDENT_8 . IDENT_9 . log . debug ( STRING_1 , name ) ; if ( ( ( org . apache . commons . lang . StringUtils . METHOD_6 ( name , org . apache . cassandra . hadoop . hive . IDENT_8 . IDENT_9 . IDENT_10 ) ) > ( - 1 ) ) || ( METHOD_7 ( name ) ) ) { org . apache . cassandra . hadoop . hive . IDENT_8 . IDENT_9 . log . debug ( STRING_2 , name ) ; iterator . remove ( ) ; } } } catch ( java . lang . Exception ex ) { throw new org . apache . cassandra . hadoop . hive . IDENT_8 . METHOD_8 ( STRING_3 , ex ) ; } return IDENT_7 ; }
org . junit . Assert . assertTrue ( IDENT_5 ) 