METHOD_0 ( ) { uk . me . IDENT_0 . IDENT_1 . runtime . network . IDENT_2 IDENT_3 = mock ( uk . me . IDENT_0 . IDENT_1 . runtime . network . IDENT_2 . class ) ; uk . me . IDENT_0 . IDENT_1 . runtime . IDENT_4 IDENT_5 = new uk . me . IDENT_0 . IDENT_1 . runtime . METHOD_1 ( 1 ) ; uk . me . IDENT_0 . IDENT_1 . compiler . IDENT_6 s = uk . me . IDENT_0 . IDENT_1 . compiler . IDENT_6 . METHOD_2 ( STRING_0 ) ; uk . me . IDENT_0 . IDENT_1 . runtime . IDENT_7 c = new uk . me . IDENT_0 . IDENT_1 . runtime . METHOD_3 ( 3 , STRING_1 , STRING_2 , s . METHOD_4 ( ) , IDENT_3 , IDENT_5 . METHOD_5 ( ) ) ; IDENT_5 . add ( c , 0 ) ; java . lang . Thread . sleep ( 200 ) ; verify ( IDENT_3 ) . METHOD_6 ( eq ( 3 ) , anyString ( ) ) ; c . METHOD_7 ( uk . me . IDENT_0 . IDENT_1 . runtime . IDENT_8 . p . METHOD_8 ( IDENT_9 . getBytes ( ) , true , true , null ) ) ; java . lang . Thread . sleep ( 200 ) ; verify ( IDENT_3 , METHOD_9 ( ) ) . remove ( c ) ; c . METHOD_7 ( uk . me . IDENT_0 . IDENT_1 . runtime . IDENT_8 . p . METHOD_8 ( IDENT_10 . getBytes ( ) , true , true , null ) ) ; java . lang . Thread . sleep ( 200 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 ) . remove ( c ) ; IDENT_5 . METHOD_10 ( ) ; } METHOD_11 ( ) { return ( this . IDENT_11 ) >= ( this . METHOD_4 . size ( ) ) ; }
org . junit . Assert . assertTrue ( c . METHOD_11 ( ) ) 