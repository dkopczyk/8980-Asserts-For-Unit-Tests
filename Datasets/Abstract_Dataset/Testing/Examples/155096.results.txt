METHOD_0 ( ) { java . lang . String IDENT_0 = com . github . IDENT_1 . util . IDENT_2 . METHOD_1 ( STRING_0 ) ; java . util . List < com . github . IDENT_1 . api . model . IDENT_3 > IDENT_4 = com . github . IDENT_1 . parser . IDENT_5 . parse ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { com . github . IDENT_1 . parser . List < com . github . IDENT_1 . api . model . IDENT_3 > IDENT_4 = null ; try ( com . github . IDENT_1 . parser . IDENT_6 is = new com . github . IDENT_1 . parser . METHOD_2 ( new com . github . IDENT_1 . parser . METHOD_3 ( json ) , STRING_1 ) ) { IDENT_4 = new com . fasterxml . jackson . databind . METHOD_4 ( ) . METHOD_5 ( is , new com . fasterxml . jackson . core . type . IDENT_7 < com . github . IDENT_1 . parser . List < com . github . IDENT_1 . api . model . IDENT_3 > > ( ) { } ) ; com . github . IDENT_1 . parser . Iterator < com . github . IDENT_1 . api . model . IDENT_3 > it = IDENT_4 . iterator ( ) ; while ( it . hasNext ( ) ) { com . github . IDENT_1 . api . model . IDENT_3 feature = it . next ( ) ; if ( ! ( feature . METHOD_6 ( ) ) ) { com . github . IDENT_1 . parser . IDENT_5 . log . METHOD_7 ( ( ( STRING_2 + json ) + STRING_3 ) ) ; it . remove ( ) ; } else { feature . METHOD_8 ( ) ; feature . METHOD_9 ( ) ; } } } catch ( com . github . IDENT_1 . parser . IDENT_8 e ) { com . github . IDENT_1 . parser . IDENT_5 . log . log ( IDENT_9 . IDENT_10 , ( STRING_4 + json ) ) ; } catch ( com . fasterxml . jackson . databind . IDENT_11 e ) { com . github . IDENT_1 . parser . IDENT_5 . log . log ( IDENT_9 . IDENT_10 , ( STRING_5 + json ) ) ; } catch ( com . fasterxml . jackson . core . IDENT_12 e ) { com . github . IDENT_1 . parser . IDENT_5 . log . log ( IDENT_9 . IDENT_10 , ( STRING_6 + json ) ) ; } catch ( com . github . IDENT_1 . parser . IOException e ) { com . github . IDENT_1 . parser . IDENT_5 . log . log ( IDENT_9 . IDENT_10 , ( STRING_7 + json ) ) ; } return IDENT_4 ; }
org . junit . Assert . assertNull ( IDENT_4 ) 