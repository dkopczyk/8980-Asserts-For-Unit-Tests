METHOD_0 ( ) { org . IDENT_0 . IDENT_1 array = new org . IDENT_0 . METHOD_1 ( ) ; array . size = 2 ; array . keys = new short [ ] { 0 , 2 , 0 , 0 } ; array . values = new org . IDENT_0 . IDENT_2 [ 4 ] ; org . IDENT_0 . METHOD_1 IDENT_3 = new org . IDENT_0 . METHOD_1 ( ) ; IDENT_3 . size = 3 ; IDENT_3 . keys = new short [ ] { 5 , 6 , 7 , 0 } ; IDENT_3 . values = new org . IDENT_0 . IDENT_2 [ 4 ] ; array . append ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } append ( org . IDENT_0 . buffer . IDENT_4 ) { assert ( ( ( size ) == 0 ) || ( ( IDENT_3 . size ) == 0 ) ) || ( ( org . IDENT_0 . buffer . IDENT_5 . METHOD_2 ( keys [ ( ( size ) - 1 ) ] , IDENT_3 . keys [ 0 ] ) ) < 0 ) ; if ( ( ( IDENT_3 . size ) != 0 ) && ( ( size ) != 0 ) ) { keys = java . util . Arrays . METHOD_3 ( keys , ( ( size ) + ( IDENT_3 . size ) ) ) ; values = java . util . Arrays . METHOD_3 ( values , ( ( size ) + ( IDENT_3 . size ) ) ) ; java . lang . System . METHOD_4 ( IDENT_3 . keys , 0 , keys , size , IDENT_3 . size ) ; java . lang . System . METHOD_4 ( IDENT_3 . values , 0 , values , size , IDENT_3 . size ) ; size += IDENT_3 . size ; } else if ( ( ( size ) == 0 ) && ( ( IDENT_3 . size ) != 0 ) ) { keys = java . util . Arrays . METHOD_3 ( IDENT_3 . keys , IDENT_3 . keys . length ) ; values = java . util . Arrays . METHOD_3 ( IDENT_3 . values , IDENT_3 . values . length ) ; size = IDENT_3 . size ; } }
org . junit . Assert . assertEquals ( 5 , array . size ) 