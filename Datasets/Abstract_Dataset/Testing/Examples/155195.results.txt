METHOD_0 ( ) { org . IDENT_0 . IDENT_1 container = new org . IDENT_0 . METHOD_1 ( new short [ ] { 10 , 20 , INT_0 } ) . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( int ) { short key = METHOD_4 ( IDENT_2 ) ; int IDENT_3 = IDENT_4 . METHOD_5 ( key , ( - 1 ) ) ; long IDENT_5 = - 1L ; while ( ( ( IDENT_3 != ( - 1 ) ) && ( IDENT_3 < ( IDENT_4 . size ( ) ) ) ) && ( IDENT_5 == ( - 1L ) ) ) { short IDENT_6 = IDENT_4 . METHOD_6 ( IDENT_3 ) ; org . IDENT_0 . buffer . IDENT_7 container = IDENT_4 . METHOD_7 ( IDENT_3 ) ; int IDENT_8 = ( ( org . IDENT_0 . buffer . IDENT_9 . METHOD_8 ( IDENT_6 , key ) ) < 0 ) ? container . METHOD_9 ( ) : container . METHOD_3 ( METHOD_10 ( IDENT_2 ) ) ; IDENT_5 = ( IDENT_8 == ( - 1 ) ) ? - 1L : org . IDENT_0 . IDENT_9 . METHOD_11 ( ( ( IDENT_6 << 16 ) | IDENT_8 ) ) ; OP_0 IDENT_3 ; } assert IDENT_5 <= INT_1 ; assert IDENT_5 <= ( org . IDENT_0 . IDENT_9 . METHOD_11 ( IDENT_2 ) ) ; return IDENT_5 ; }
org . junit . Assert . assertEquals ( ( - 1 ) , container . METHOD_3 ( ( ( short ) ( 5 ) ) ) ) 