METHOD_0 ( ) { final short [ ] content = new short [ ] { 1 , 3 , 5 , 7 , 9 } ; org . IDENT_0 . IDENT_1 c = org . IDENT_0 . IDENT_2 . METHOD_1 ( content ) ; c = c . METHOD_2 ( 0 , INT_0 ) ; c = c . METHOD_2 ( 0 , INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_0 . IDENT_1 , short [ ] ) { org . IDENT_0 . IDENT_3 IDENT_4 = c . METHOD_4 ( ) ; int IDENT_5 = 0 ; boolean fail = false ; while ( IDENT_4 . hasNext ( ) ) { if ( IDENT_5 == ( s . length ) ) { fail = true ; break ; } if ( ( IDENT_4 . next ( ) ) != ( s [ IDENT_5 ] ) ) { fail = true ; break ; } ++ IDENT_5 ; } if ( IDENT_5 != ( s . length ) ) { fail = true ; } if ( fail ) { System . out . METHOD_5 ( STRING_0 ) ; IDENT_4 = c . METHOD_4 ( ) ; while ( IDENT_4 . hasNext ( ) ) { System . out . METHOD_5 ( ( " " + ( IDENT_4 . next ( ) ) ) ) ; } System . out . METHOD_5 ( STRING_1 ) ; for ( final short IDENT_6 : s ) { System . out . METHOD_5 ( ( " " + IDENT_6 ) ) ; } System . out . println ( ) ; } return ! fail ; }
org . junit . Assert . assertTrue ( org . IDENT_0 . IDENT_2 . METHOD_3 ( c , content ) ) 