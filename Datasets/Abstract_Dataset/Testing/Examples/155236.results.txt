METHOD_0 ( ) { int length = 1000 ; int IDENT_0 = 10 ; java . util . IDENT_1 random = new java . util . METHOD_1 ( INT_0 ) ; for ( int test = 0 ; test < 50 ; ++ test ) { final org . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_2 . METHOD_2 ( ) ; final org . IDENT_2 . METHOD_2 IDENT_5 = new org . IDENT_2 . METHOD_2 ( ) ; java . util . Set < java . lang . Integer > IDENT_6 = new java . util . HashSet ( ) ; java . util . Set < java . lang . Integer > IDENT_7 = new java . util . HashSet ( ) ; int IDENT_8 = length / 2 ; for ( int i = 0 ; i < IDENT_8 ; i ++ ) { int IDENT_9 = random . METHOD_3 ( length ) ; int IDENT_10 = random . METHOD_3 ( length ) ; IDENT_4 . add ( IDENT_9 ) ; IDENT_6 . add ( IDENT_9 ) ; IDENT_5 . add ( IDENT_10 ) ; IDENT_7 . add ( IDENT_10 ) ; } java . util . Set < java . lang . Integer > IDENT_11 = new java . util . METHOD_4 ( ) ; for ( int i : IDENT_6 ) { if ( ! ( IDENT_7 . contains ( i ) ) ) { IDENT_11 . add ( i ) ; } } for ( int IDENT_12 = 0 ; IDENT_12 < IDENT_0 ; IDENT_12 ++ ) { int IDENT_13 = random . METHOD_3 ( ( length - 1 ) ) ; int IDENT_14 = ( random . METHOD_3 ( ( length - IDENT_13 ) ) ) + 1 ; int IDENT_15 = IDENT_13 + IDENT_14 ; java . util . Set < java . lang . Integer > IDENT_16 = new java . util . METHOD_4 ( ) ; for ( int i = IDENT_13 ; i < IDENT_15 ; i ++ ) { if ( IDENT_11 . contains ( i ) ) { IDENT_16 . add ( i ) ; } } org . IDENT_2 . METHOD_2 result = org . IDENT_2 . METHOD_2 . METHOD_5 ( IDENT_4 , IDENT_5 , ( ( long ) ( IDENT_13 ) ) , ( ( long ) ( IDENT_15 ) ) ) ; java . util . Set < java . lang . Integer > IDENT_17 = new java . util . METHOD_4 ( ) ; org . IDENT_2 . IDENT_18 IDENT_19 = result . METHOD_6 ( ) ; while ( IDENT_19 . hasNext ( ) ) { IDENT_17 . add ( IDENT_19 . next ( ) ) ; } "<AssertPlaceHolder>" ; } } } next ( ) { return iterator . next ( ) ; }
org . junit . Assert . assertEquals ( IDENT_16 , IDENT_17 ) 