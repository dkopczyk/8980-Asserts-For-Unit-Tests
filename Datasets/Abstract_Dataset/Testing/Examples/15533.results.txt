METHOD_0 ( ) { final org . apache . hc . core5 . http . IDENT_0 IDENT_1 = new org . apache . hc . core5 . http . message . METHOD_1 ( STRING_0 , STRING_1 0 ) ; final org . apache . hc . core5 . http . IDENT_2 IDENT_3 = org . apache . hc . IDENT_4 . http . impl . cache . IDENT_5 . METHOD_2 ( ) ; IDENT_3 . METHOD_3 ( STRING_2 , STRING_3 ) ; IDENT_3 . METHOD_3 ( STRING_4 , STRING_5 ) ; IDENT_3 . METHOD_3 ( STRING_1 , STRING_6 ) ; METHOD_4 ( IDENT_3 ) ; final org . apache . hc . core5 . http . IDENT_0 IDENT_6 = new org . apache . hc . core5 . http . message . METHOD_1 ( STRING_0 , STRING_1 0 ) ; final org . apache . hc . core5 . http . IDENT_2 IDENT_7 = org . apache . hc . IDENT_4 . http . impl . cache . IDENT_5 . METHOD_2 ( ) ; IDENT_7 . METHOD_3 ( STRING_2 , STRING_3 ) ; IDENT_7 . METHOD_3 ( STRING_4 , STRING_5 ) ; IDENT_7 . METHOD_3 ( STRING_1 , STRING_7 ) ; final org . easymock . IDENT_8 < org . apache . hc . core5 . http . IDENT_0 > IDENT_9 = org . easymock . EasyMock . METHOD_5 ( ) ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_6 ( org . easymock . EasyMock . METHOD_7 ( IDENT_9 ) , org . easymock . EasyMock . METHOD_8 ( IDENT_11 . IDENT_12 . class ) ) ) . andReturn ( IDENT_7 ) . times ( 0 , 1 ) ; METHOD_9 ( ) ; execute ( IDENT_1 ) ; final org . apache . hc . core5 . http . IDENT_2 result = execute ( IDENT_6 ) ; METHOD_10 ( ) ; if ( ! ( IDENT_9 . METHOD_11 ( ) ) ) { "<AssertPlaceHolder>" ; } } METHOD_12 ( java . lang . String ) { return ( IDENT_13 ) != null ? IDENT_13 . METHOD_12 ( name ) : null ; }
org . junit . Assert . assertNull ( result . METHOD_12 ( STRING_4 ) ) 