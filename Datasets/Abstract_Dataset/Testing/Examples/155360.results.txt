METHOD_0 ( ) { org . IDENT_0 . buffer . IDENT_1 IDENT_2 = new org . IDENT_0 . buffer . METHOD_1 ( ) ; IDENT_2 = IDENT_2 . add ( 1 , INT_0 ) ; IDENT_2 = IDENT_2 . add ( INT_1 , INT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( ) { if ( org . IDENT_0 . buffer . IDENT_3 . METHOD_2 ( this . IDENT_4 ) ) { long [ ] IDENT_5 = this . IDENT_4 . array ( ) ; int IDENT_6 = 0 ; long IDENT_7 = IDENT_5 [ 0 ] ; for ( int i = 0 ; i < ( ( IDENT_5 . length ) - 1 ) ; i ++ ) { long IDENT_8 = IDENT_7 ; IDENT_7 = IDENT_5 [ ( i + 1 ) ] ; IDENT_6 += ( java . lang . Long . METHOD_3 ( ( ( OP_0 IDENT_8 ) & ( IDENT_8 << 1 ) ) ) ) + ( ( IDENT_8 > > > INT_3 ) & ( OP_0 IDENT_7 ) ) ; } long IDENT_8 = IDENT_7 ; IDENT_6 += java . lang . Long . METHOD_3 ( ( ( OP_0 IDENT_8 ) & ( IDENT_8 << 1 ) ) ) ; if ( ( IDENT_8 & - INT_4 ) != 0 ) { IDENT_6 ++ ; } return IDENT_6 ; } else { int IDENT_6 = 0 ; long IDENT_7 = IDENT_4 . get ( 0 ) ; int len = IDENT_4 . METHOD_4 ( ) ; for ( int i = 0 ; i < ( len - 1 ) ; i ++ ) { long IDENT_8 = IDENT_7 ; IDENT_7 = IDENT_4 . get ( ( i + 1 ) ) ; IDENT_6 += ( java . lang . Long . METHOD_3 ( ( ( OP_0 IDENT_8 ) & ( IDENT_8 << 1 ) ) ) ) + ( ( IDENT_8 > > > INT_3 ) & ( OP_0 IDENT_7 ) ) ; } long IDENT_8 = IDENT_7 ; IDENT_6 += java . lang . Long . METHOD_3 ( ( ( OP_0 IDENT_8 ) & ( IDENT_8 << 1 ) ) ) ; if ( ( IDENT_8 & - INT_4 ) != 0 ) { IDENT_6 ++ ; } return IDENT_6 ; } }
org . junit . Assert . assertEquals ( 2 , IDENT_2 . METHOD_0 ( ) ) 