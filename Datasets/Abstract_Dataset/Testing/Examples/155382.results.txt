METHOD_0 ( ) { org . IDENT_0 . buffer . IDENT_1 r = new org . IDENT_0 . buffer . METHOD_1 ( ) ; long IDENT_2 = 1L << 16 ; long IDENT_3 = 1L << INT_0 ; r . add ( IDENT_2 , IDENT_3 ) ; for ( long s = IDENT_2 ; s <= IDENT_3 ; s += INT_1 ) { for ( long e = s ; e <= IDENT_3 ; e += INT_1 ) { "<AssertPlaceHolder>" ; } } } METHOD_2 ( long , long ) { if ( ( java . lang . Long . METHOD_3 ( start , end ) ) >= 0 ) { return 0 ; } long size = 0 ; int IDENT_4 = this . IDENT_5 . METHOD_4 ( org . IDENT_0 . IDENT_6 . METHOD_5 ( start ) ) ; if ( IDENT_4 < 0 ) { IDENT_4 = ( - IDENT_4 ) - 1 ; } else { int IDENT_7 = org . IDENT_0 . IDENT_6 . METHOD_6 ( org . IDENT_0 . IDENT_6 . METHOD_7 ( start ) ) ; if ( IDENT_7 != 0 ) { size OP_0 this . IDENT_5 . METHOD_8 ( IDENT_4 ) . METHOD_9 ( ( ( short ) ( IDENT_7 - 1 ) ) ) ; } } short IDENT_8 = org . IDENT_0 . IDENT_6 . METHOD_5 ( ( end - 1 ) ) ; for ( int i = IDENT_4 ; i < ( this . IDENT_5 . size ( ) ) ; i ++ ) { short key = this . IDENT_5 . METHOD_10 ( i ) ; int IDENT_9 = org . IDENT_0 . IDENT_6 . METHOD_3 ( key , IDENT_8 ) ; if ( IDENT_9 < 0 ) { size += this . IDENT_5 . METHOD_8 ( i ) . METHOD_11 ( ) ; } else if ( IDENT_9 == 0 ) { return size + ( this . IDENT_5 . METHOD_8 ( i ) . METHOD_9 ( org . IDENT_0 . IDENT_6 . METHOD_7 ( ( ( int ) ( end - 1 ) ) ) ) ) ; } } return size ; }
org . junit . Assert . assertEquals ( ( e - s ) , r . METHOD_2 ( s , e ) ) 