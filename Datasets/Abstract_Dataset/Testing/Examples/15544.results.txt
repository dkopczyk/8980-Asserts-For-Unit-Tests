METHOD_0 ( ) { policy = new org . apache . hc . IDENT_0 . http . impl . cache . METHOD_1 ( 0 , false , false , false ) ; request = new org . apache . hc . core5 . http . message . METHOD_2 ( STRING_0 , "/" ) ; request . METHOD_3 ( STRING_1 , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . apache . hc . core5 . http . IDENT_1 , org . apache . hc . core5 . http . IDENT_2 ) { final org . apache . hc . core5 . http . IDENT_3 version = ( ( request . METHOD_5 ( ) ) != null ) ? request . METHOD_5 ( ) : org . apache . hc . core5 . http . IDENT_4 . IDENT_5 ; if ( ( version . METHOD_6 ( IDENT_4 . IDENT_6 ) ) > 0 ) { if ( log . METHOD_7 ( ) ) { log . debug ( ( ( STRING_3 + version ) + STRING_4 ) ) ; } return false ; } final java . lang . String [ ] IDENT_7 = new java . lang . String [ ] { org . apache . hc . IDENT_0 . http . cache . IDENT_8 . IDENT_9 } ; if ( METHOD_8 ( request , IDENT_7 ) ) { log . debug ( STRING_5 ) ; return false ; } if ( request . METHOD_9 ( ) . contains ( STRING_6 ) ) { if ( ( IDENT_10 ) && ( METHOD_10 ( response ) ) ) { log . debug ( STRING_7 ) ; return false ; } else if ( ! ( METHOD_11 ( response ) ) ) { log . debug ( STRING_8 ) ; return false ; } } if ( METHOD_12 ( response ) ) { log . debug ( STRING_9 ) ; return false ; } if ( IDENT_11 ) { if ( ( ( request . METHOD_13 ( IDENT_8 . IDENT_12 ) ) > 0 ) && ( ! ( METHOD_8 ( response , org . apache . hc . IDENT_0 . http . impl . cache . METHOD_1 . IDENT_13 ) ) ) ) { log . debug ( STRING_10 ) ; return false ; } } final java . lang . String method = request . METHOD_14 ( ) ; return METHOD_4 ( method , response ) ; }
org . junit . Assert . assertTrue ( policy . METHOD_4 ( request , response ) ) 