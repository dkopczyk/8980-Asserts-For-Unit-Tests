METHOD_0 ( ) { final java . lang . String data = STRING_0 ; final int expected = 20 ; java . nio . ByteBuffer IDENT_0 = java . nio . ByteBuffer . METHOD_1 ( data . getBytes ( ) ) ; instance . write ( IDENT_0 ) ; byte [ ] out = new byte [ expected ] ; int read = instance . read ( out , 0 , expected ) ; System . out . println ( ( STRING_1 + ( new java . lang . String ( out ) ) ) ) ; "<AssertPlaceHolder>" ; } read ( byte [ ] , int , int ) { int IDENT_1 = 0 ; try { while ( IDENT_1 < len ) { java . nio . ByteBuffer IDENT_2 = IDENT_3 . METHOD_2 ( ) ; while ( ( IDENT_1 < len ) && ( IDENT_2 . METHOD_3 ( ) ) ) { bytes [ ( ( IDENT_1 ++ ) + offset ) ] = IDENT_2 . get ( ) ; } if ( IDENT_2 . METHOD_3 ( ) ) { IDENT_3 . METHOD_4 ( IDENT_2 ) ; } } } catch ( java . lang . IDENT_4 e ) { e . printStackTrace ( ) ; } return IDENT_1 ; }
org . junit . Assert . assertEquals ( 20 , read ) 