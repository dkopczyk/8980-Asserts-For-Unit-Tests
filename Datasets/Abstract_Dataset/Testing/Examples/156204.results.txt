METHOD_0 ( ) { final java . io . InputStream input = com . IDENT_0 . IDENT_1 . io . IDENT_2 . METHOD_1 ( STRING_0 , STRING_1 ) ; final java . lang . String IDENT_3 = STRING_1 ; final java . lang . String IDENT_4 = com . IDENT_0 . IDENT_1 . io . IDENT_5 . METHOD_2 ( input , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . InputStream , java . lang . String ) { java . lang . String IDENT_6 = null ; if ( IDENT_7 != null ) { final byte [ ] bytes = new byte [ com . IDENT_0 . IDENT_1 . io . IDENT_5 . IDENT_8 ] ; is . METHOD_3 ( com . IDENT_0 . IDENT_1 . io . IDENT_5 . IDENT_8 ) ; int offset = 0 ; int max = com . IDENT_0 . IDENT_1 . io . IDENT_5 . IDENT_8 ; int c = is . read ( bytes , offset , max ) ; int IDENT_9 = - 1 ; while ( ( ( c != ( - 1 ) ) && ( IDENT_9 == ( - 1 ) ) ) && ( offset < ( com . IDENT_0 . IDENT_1 . io . IDENT_5 . IDENT_8 ) ) ) { offset += c ; max OP_0 c ; c = is . read ( bytes , offset , max ) ; IDENT_9 = new java . lang . String ( bytes , 0 , offset , IDENT_7 ) . indexOf ( STRING_2 ) ; } if ( IDENT_9 == ( - 1 ) ) { if ( c == ( - 1 ) ) { throw new java . io . IOException ( STRING_3 ) ; } else { throw new java . io . IOException ( ( ( STRING_4 + offset ) + STRING_5 ) ) ; } } final int IDENT_10 = offset ; if ( IDENT_10 > 0 ) { is . METHOD_4 ( ) ; java . lang . String IDENT_11 = new java . lang . String ( bytes , IDENT_7 ) . substring ( 0 , IDENT_9 ) ; final java . util . regex . IDENT_12 m = com . IDENT_0 . IDENT_1 . io . IDENT_5 . IDENT_13 . matcher ( IDENT_11 ) ; if ( m . find ( ) ) { IDENT_6 = m . group ( 1 ) . METHOD_5 ( Locale . IDENT_14 ) ; IDENT_6 = IDENT_6 . substring ( 1 , ( ( IDENT_6 . length ( ) ) - 1 ) ) ; } } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_4 ) 