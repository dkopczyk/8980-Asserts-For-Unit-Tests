METHOD_0 ( ) { final java . io . InputStream input = com . IDENT_0 . IDENT_1 . io . IDENT_2 . METHOD_1 ( STRING_0 , STRING_1 ) ; final java . lang . String IDENT_3 = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . InputStream , java . lang . String ) { java . lang . String IDENT_4 = null ; if ( IDENT_5 != null ) { final byte [ ] bytes = new byte [ com . IDENT_0 . IDENT_1 . io . IDENT_6 . IDENT_7 ] ; is . METHOD_3 ( com . IDENT_0 . IDENT_1 . io . IDENT_6 . IDENT_7 ) ; int offset = 0 ; int max = com . IDENT_0 . IDENT_1 . io . IDENT_6 . IDENT_7 ; int c = is . read ( bytes , offset , max ) ; int IDENT_8 = - 1 ; while ( ( ( c != ( - 1 ) ) && ( IDENT_8 == ( - 1 ) ) ) && ( offset < ( com . IDENT_0 . IDENT_1 . io . IDENT_6 . IDENT_7 ) ) ) { offset += c ; max OP_0 c ; c = is . read ( bytes , offset , max ) ; IDENT_8 = new java . lang . String ( bytes , 0 , offset , IDENT_5 ) . indexOf ( STRING_2 ) ; } if ( IDENT_8 == ( - 1 ) ) { if ( c == ( - 1 ) ) { throw new java . io . IOException ( STRING_3 ) ; } else { throw new java . io . IOException ( ( ( STRING_4 + offset ) + STRING_5 ) ) ; } } final int IDENT_9 = offset ; if ( IDENT_9 > 0 ) { is . METHOD_4 ( ) ; java . lang . String IDENT_10 = new java . lang . String ( bytes , IDENT_5 ) . substring ( 0 , IDENT_8 ) ; final java . util . regex . IDENT_11 m = com . IDENT_0 . IDENT_1 . io . IDENT_6 . IDENT_12 . matcher ( IDENT_10 ) ; if ( m . find ( ) ) { IDENT_4 = m . group ( 1 ) . METHOD_5 ( Locale . IDENT_13 ) ; IDENT_4 = IDENT_4 . substring ( 1 , ( ( IDENT_4 . length ( ) ) - 1 ) ) ; } } } return IDENT_4 ; }
org . junit . Assert . assertEquals ( STRING_1 , com . IDENT_0 . IDENT_1 . io . IDENT_6 . METHOD_2 ( input , IDENT_3 ) ) 