METHOD_0 ( ) { java . util . Set < java . lang . Object > IDENT_0 = new java . util . HashSet ( ) ; java . util . Set < java . lang . Object > IDENT_1 = new java . util . HashSet ( ) ; try { java . util . List < com . IDENT_2 . model . bean . database . IDENT_3 > cs = com . IDENT_2 . model . IDENT_4 . IDENT_5 . METHOD_0 ( new com . IDENT_2 . model . bean . database . METHOD_1 ( this . IDENT_6 , STRING_0 , new com . IDENT_2 . model . bean . database . METHOD_2 ( this . IDENT_7 , STRING_0 ) ) ) ; java . util . List < java . lang . String > IDENT_8 = new java . util . ArrayList ( ) ; for ( com . IDENT_2 . model . bean . database . IDENT_3 c : cs ) { IDENT_8 . add ( c . toString ( ) ) ; } IDENT_0 . addAll ( IDENT_8 ) ; IDENT_1 . addAll ( this . IDENT_9 ) ; com . test . IDENT_10 . LOGGER . info ( ( ( ( ( STRING_1 + IDENT_0 ) + STRING_2 ) + IDENT_1 ) + "\n" ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IDENT_11 e ) { java . util . Set < java . lang . Object > IDENT_12 = new java . util . METHOD_3 ( ) ; for ( java . lang . Object x : IDENT_0 ) { if ( ! ( IDENT_1 . contains ( x ) ) ) { IDENT_12 . add ( x ) ; } } for ( java . lang . Object x : IDENT_1 ) { if ( ! ( IDENT_0 . contains ( x ) ) ) { IDENT_12 . add ( x ) ; } } throw new java . lang . METHOD_4 ( ( ( ( STRING_3 + IDENT_12 ) + "\n" ) + e ) ) ; } } isEmpty ( ) { return this . properties . isEmpty ( ) ; }
org . junit . Assert . assertTrue ( ( ( ( ! ( IDENT_0 . isEmpty ( ) ) ) && ( ! ( IDENT_1 . isEmpty ( ) ) ) ) && ( IDENT_0 . equals ( IDENT_1 ) ) ) ) 