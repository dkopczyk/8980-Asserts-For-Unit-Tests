METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . ast . IDENT_2 IDENT_3 = org . IDENT_0 . IDENT_1 . IDENT_4 . parse ( STRING_0 , false ) ; java . util . List < org . IDENT_0 . IDENT_5 . IDENT_6 > IDENT_7 = new java . util . IDENT_8 < org . IDENT_0 . IDENT_5 . IDENT_6 > ( ) ; org . IDENT_0 . IDENT_1 . IDENT_7 . IDENT_9 IDENT_10 = new org . IDENT_0 . IDENT_1 . IDENT_7 . METHOD_1 ( ) ; IDENT_10 . METHOD_2 ( 3 , 3 ) ; IDENT_7 . add ( IDENT_10 ) ; IDENT_3 . METHOD_3 ( IDENT_7 ) ; org . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 < java . util . Map < java . lang . String , java . lang . Object > > IDENT_13 = new org . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 < java . util . Map < java . lang . String , java . lang . Object > > ( ) { @ org . IDENT_0 . IDENT_1 . IDENT_7 . Override public void METHOD_4 ( org . IDENT_0 . IDENT_1 . ast . expr . IDENT_14 n , java . util . Map < java . lang . String , java . lang . Object > ctx ) { ctx . put ( STRING_1 , true ) ; } } ; java . util . Map < java . lang . String , java . lang . Object > ctx = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; IDENT_3 . accept ( IDENT_13 , ctx ) ; "<AssertPlaceHolder>" ; } accept ( org . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_15 , IDENT_16 ) { if ( METHOD_5 ( ) ) { v . METHOD_4 ( this , IDENT_17 ) ; } }
org . junit . Assert . assertTrue ( ctx . containsKey ( STRING_1 ) ) 