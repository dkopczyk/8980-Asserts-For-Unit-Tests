METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 strategy = mock ( net . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; java . lang . String target = STRING_0 ; java . lang . String IDENT_3 = STRING_1 ; java . lang . String IDENT_4 = STRING_2 ; java . lang . String IDENT_5 = STRING_0 ; when ( strategy . METHOD_1 ( target , IDENT_3 ) ) . thenReturn ( FLOAT_0 ) ; when ( strategy . METHOD_1 ( target , IDENT_4 ) ) . thenReturn ( FLOAT_1 ) ; when ( strategy . METHOD_1 ( target , IDENT_5 ) ) . thenReturn ( 1.0 ) ; net . IDENT_0 . IDENT_1 . IDENT_6 service = new net . IDENT_0 . IDENT_1 . METHOD_2 ( strategy ) ; java . util . List < java . lang . String > IDENT_7 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . add ( IDENT_3 ) ; IDENT_7 . add ( IDENT_4 ) ; IDENT_7 . add ( IDENT_5 ) ; java . util . List < net . IDENT_0 . IDENT_1 . IDENT_8 > IDENT_9 = service . METHOD_3 ( IDENT_7 , target ) ; verify ( strategy ) . METHOD_1 ( IDENT_3 , target ) ; verify ( strategy ) . METHOD_1 ( IDENT_4 , target ) ; verify ( strategy ) . METHOD_1 ( IDENT_5 , target ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { java . lang . String IDENT_10 ; java . lang . String IDENT_11 ; if ( ( first . length ( ) ) > ( IDENT_12 . length ( ) ) ) { IDENT_11 = first . toLowerCase ( ) ; IDENT_10 = IDENT_12 . toLowerCase ( ) ; } else { IDENT_11 = IDENT_12 . toLowerCase ( ) ; IDENT_10 = first . toLowerCase ( ) ; } int IDENT_13 = ( ( IDENT_10 . length ( ) ) / 2 ) + 1 ; java . lang . String IDENT_14 = METHOD_4 ( IDENT_10 , IDENT_11 , IDENT_13 ) ; java . lang . String IDENT_15 = METHOD_4 ( IDENT_11 , IDENT_10 , IDENT_13 ) ; if ( ( ( IDENT_14 . length ( ) ) == 0 ) || ( ( IDENT_15 . length ( ) ) == 0 ) ) return 0.0 ; if ( ( IDENT_14 . length ( ) ) != ( IDENT_15 . length ( ) ) ) return 0.0 ; int IDENT_16 = METHOD_5 ( IDENT_14 , IDENT_15 ) ; double IDENT_17 = ( ( ( ( IDENT_14 . length ( ) ) / ( ( double ) ( IDENT_10 . length ( ) ) ) ) + ( ( IDENT_15 . length ( ) ) / ( ( double ) ( IDENT_11 . length ( ) ) ) ) ) + ( ( ( IDENT_14 . length ( ) ) - METHOD_5 ) / ( ( double ) ( IDENT_14 . length ( ) ) ) ) ) / FLOAT_2 ; return IDENT_17 ; }
org . junit . Assert . assertEquals ( 3 , IDENT_9 . size ( ) ) 