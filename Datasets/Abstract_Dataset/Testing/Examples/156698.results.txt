METHOD_0 ( ) { IDENT_0 . library . IDENT_1 . util . IDENT_2 IDENT_3 = new IDENT_0 . library . IDENT_1 . util . METHOD_1 ( ) ; IDENT_0 . library . IDENT_1 . util . List < java . lang . String > IDENT_4 = new IDENT_0 . library . IDENT_1 . util . ArrayList < java . lang . String > ( ) ; IDENT_4 . add ( ( STRING_0 + ( IDENT_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) ) ; org . w3c . dom . IDENT_5 a = IDENT_3 . METHOD_4 ( ) . METHOD_5 ( STRING_1 , STRING_2 ) ; a . setValue ( "foo" ) ; IDENT_3 . METHOD_2 ( ) . METHOD_6 ( a ) ; IDENT_0 . library . IDENT_1 . util . IDENT_6 s = new IDENT_0 . library . IDENT_1 . util . METHOD_7 ( new IDENT_0 . library . IDENT_1 . util . METHOD_8 ( ) ) ; s . METHOD_9 ( IDENT_3 . METHOD_4 ( ) , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( org . w3c . dom . Document ) { org . w3c . dom . Element IDENT_7 = doc . METHOD_11 ( ) ; IDENT_0 . library . IDENT_1 . util . List < org . w3c . dom . Element > IDENT_8 = METHOD_12 ( IDENT_7 , STRING_3 , IDENT_7 . METHOD_13 ( ) ) ; if ( ( IDENT_8 . size ( ) ) != 1 ) { IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . warn ( STRING_4 ) ; return false ; } org . w3c . dom . Element header = IDENT_8 . get ( 0 ) ; IDENT_0 . library . IDENT_1 . util . List < org . w3c . dom . Element > IDENT_9 = METHOD_12 ( header , STRING_5 , IDENT_0 . library . IDENT_1 . util . IDENT_10 ) ; if ( ( IDENT_9 . size ( ) ) != 1 ) { IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . warn ( ( ( STRING_4 0 + ( IDENT_9 . size ( ) ) ) + STRING_6 ) ) ; return false ; } org . w3c . dom . Element security = IDENT_9 . get ( 0 ) ; IDENT_0 . library . IDENT_1 . util . List < org . w3c . dom . Element > IDENT_11 = METHOD_12 ( security , STRING_7 , IDENT_12 . IDENT_13 ) ; if ( ( IDENT_11 . size ( ) ) != 1 ) { IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . warn ( ( ( STRING_4 3 + ( IDENT_11 . size ( ) ) ) + STRING_8 ) ) ; return false ; } org . w3c . dom . Element IDENT_14 = IDENT_11 . get ( 0 ) ; javax . xml . crypto . IDENT_15 . dom . IDENT_16 IDENT_17 = new javax . xml . crypto . IDENT_15 . dom . METHOD_14 ( new IDENT_0 . library . IDENT_1 . util . METHOD_15 ( ) , IDENT_14 ) ; METHOD_16 ( doc ) ; javax . xml . crypto . IDENT_15 . IDENT_18 IDENT_19 = javax . xml . crypto . IDENT_15 . IDENT_18 . getInstance ( ) ; javax . xml . crypto . IDENT_15 . IDENT_12 IDENT_20 = IDENT_19 . METHOD_17 ( IDENT_17 ) ; boolean IDENT_21 = IDENT_20 . validate ( IDENT_17 ) ; if ( ! IDENT_21 ) { @ IDENT_0 . library . IDENT_1 . util . METHOD_18 ( STRING_9 ) IDENT_0 . library . IDENT_1 . util . Iterator < javax . xml . crypto . IDENT_15 . IDENT_22 > IDENT_23 = IDENT_20 . METHOD_19 ( ) . METHOD_20 ( ) . iterator ( ) ; for ( int j = 0 ; IDENT_23 . hasNext ( ) ; j ++ ) { javax . xml . crypto . IDENT_15 . IDENT_22 r = IDENT_23 . next ( ) ; boolean IDENT_24 = r . validate ( IDENT_17 ) ; IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . debug ( ( ( ( STRING_4 8 + j ) + STRING_4 9 ) + IDENT_24 ) ) ; IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . debug ( ( ( METHOD_21 ( r . METHOD_22 ( ) ) ) + STRING_4 7 ) ) ; IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . debug ( ( ( METHOD_21 ( r . METHOD_23 ( ) ) ) + STRING_10 ) ) ; IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . debug ( ( ( ( STRING_4 4 + ( r . getType ( ) ) ) + STRING_11 ) + ( r . METHOD_24 ( ) ) ) ) ; } boolean IDENT_25 = IDENT_20 . METHOD_25 ( ) . validate ( IDENT_17 ) ; IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . info ( ( STRING_4 2 + IDENT_25 ) ) ; } IDENT_0 . library . IDENT_1 . util . METHOD_7 . LOG . info ( ( STRING_4 5 + ( IDENT_21 ? STRING_4 6 : STRING_4 1 ) ) ) ; return IDENT_20 . validate ( IDENT_17 ) ; }
org . junit . Assert . assertTrue ( s . METHOD_10 ( IDENT_3 . METHOD_4 ( ) ) ) 