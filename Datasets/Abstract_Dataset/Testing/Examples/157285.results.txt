METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 ) ; java . lang . String input = STRING_2 ; java . lang . String expected = STRING_3 ; java . lang . String result = org . sagebionetworks . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( input , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . util . Map ) { if ( input == null ) throw new java . lang . IllegalArgumentException ( STRING_4 ) ; if ( IDENT_0 == null ) throw new java . lang . IllegalArgumentException ( STRING_5 ) ; java . util . regex . IDENT_4 matcher = org . sagebionetworks . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . matcher ( input ) ; boolean result = matcher . find ( ) ; if ( result ) { java . lang . StringBuffer sb = new java . lang . StringBuffer ( ) ; do { java . lang . String group = matcher . group ( ) ; java . lang . String key = group . substring ( 2 , ( ( group . length ( ) ) - 1 ) ) ; java . lang . String value = IDENT_0 . get ( key ) ; if ( value == null ) { throw new java . lang . IllegalArgumentException ( ( STRING_6 + key ) ) ; } matcher . METHOD_2 ( sb , value ) ; result = matcher . find ( ) ; } while ( result ) ; matcher . METHOD_3 ( sb ) ; java . lang . String results = sb . toString ( ) ; org . sagebionetworks . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_4 ( results ) ; return results ; } return input ; }
org . junit . Assert . assertEquals ( expected , result ) 