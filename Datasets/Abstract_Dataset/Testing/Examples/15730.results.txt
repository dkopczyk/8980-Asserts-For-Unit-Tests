METHOD_0 ( ) { final java . lang . String IDENT_0 = org . apache . hc . core5 . http . impl . io . IDENT_1 . METHOD_1 ( org . apache . hc . core5 . http . impl . io . IDENT_1 . IDENT_2 ) ; final java . lang . String IDENT_3 = org . apache . hc . core5 . http . impl . io . IDENT_1 . METHOD_1 ( org . apache . hc . core5 . http . impl . io . IDENT_1 . IDENT_4 ) ; final java . lang . String IDENT_5 = STRING_0 ; final java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { buf . append ( IDENT_0 ) . append ( IDENT_3 ) . append ( IDENT_5 ) ; } final java . lang . String s = buf . toString ( ) ; final org . apache . hc . core5 . http . io . IDENT_6 IDENT_7 = new org . apache . hc . core5 . http . impl . io . METHOD_2 ( 16 , IDENT_8 . UTF_8 . METHOD_3 ( ) ) ; final java . io . ByteArrayOutputStream IDENT_9 = new java . io . ByteArrayOutputStream ( ) ; final org . apache . hc . core5 . util . IDENT_10 IDENT_11 = new org . apache . hc . core5 . util . METHOD_4 ( 16 ) ; IDENT_11 . append ( s ) ; IDENT_7 . METHOD_5 ( IDENT_11 , IDENT_9 ) ; IDENT_7 . METHOD_6 ( IDENT_9 ) ; final org . apache . hc . core5 . http . io . IDENT_12 IDENT_13 = new org . apache . hc . core5 . http . impl . io . METHOD_7 ( 16 , IDENT_8 . UTF_8 . METHOD_8 ( ) ) ; final java . io . ByteArrayInputStream IDENT_14 = new java . io . ByteArrayInputStream ( IDENT_9 . toByteArray ( ) ) ; IDENT_11 . METHOD_9 ( ) ; IDENT_13 . METHOD_10 ( IDENT_11 , IDENT_14 ) ; "<AssertPlaceHolder>" ; } toString ( ) { final java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( STRING_1 ) . append ( this . IDENT_15 ) . append ( STRING_2 ) . append ( this . IDENT_16 ) . append ( STRING_3 ) . append ( this . IDENT_17 ) . append ( STRING_4 ) . append ( this . IDENT_18 ) . append ( STRING_5 ) . append ( this . IDENT_19 ) . append ( STRING_6 ) . append ( this . IDENT_20 ) . append ( "]" ) ; return builder . toString ( ) ; }
org . junit . Assert . assertEquals ( s , IDENT_11 . toString ( ) ) 