METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . sagebionetworks . repo . model . IDENT_1 . IDENT_2 filter = org . sagebionetworks . repo . model . IDENT_1 . IDENT_2 . IDENT_3 ; long offset = 1L ; long IDENT_4 = INT_0 ; java . util . List < java . lang . Long > IDENT_5 = com . google . common . collect . Lists . newArrayList ( INT_1 , INT_2 ) ; boolean IDENT_6 = true ; when ( IDENT_7 . METHOD_1 ( IDENT_0 , IDENT_6 , IDENT_4 , offset ) ) . thenReturn ( IDENT_5 ) ; java . util . List < java . lang . Long > results = IDENT_8 . METHOD_1 ( IDENT_0 , filter , offset , IDENT_4 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 , METHOD_2 ( ) ) . METHOD_1 ( anyString ( ) , METHOD_3 ( ) , METHOD_3 ( ) ) ; } METHOD_1 ( java . lang . String , org . sagebionetworks . repo . model . IDENT_1 . IDENT_2 , long , long ) { org . sagebionetworks . util . IDENT_9 . METHOD_4 ( filter , STRING_1 ) ; boolean IDENT_6 = false ; switch ( filter ) { case IDENT_10 : return IDENT_11 . METHOD_1 ( IDENT_0 , IDENT_4 , offset ) ; case IDENT_3 : IDENT_6 = true ; break ; case IDENT_12 : IDENT_6 = false ; break ; default : throw new java . lang . IllegalArgumentException ( ( STRING_2 + filter ) ) ; } return IDENT_11 . METHOD_1 ( IDENT_0 , IDENT_6 , IDENT_4 , offset ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , results ) 