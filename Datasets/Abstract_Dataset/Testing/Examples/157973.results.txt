METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . entities . IDENT_2 > entities = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { entities . add ( new com . IDENT_0 . IDENT_1 . entities . METHOD_1 ( ) ) ; } entities = com . IDENT_0 . IDENT_1 . IDENT_3 . em . insert ( entities ) ; for ( com . IDENT_0 . IDENT_1 . entities . METHOD_1 entity : entities ) { entity . METHOD_2 ( STRING_0 ) ; } com . IDENT_0 . IDENT_1 . IDENT_4 batch = com . IDENT_0 . IDENT_1 . IDENT_3 . em . METHOD_3 ( ) ; entities = batch . update ( entities ) ; batch . METHOD_4 ( ) ; java . util . List < java . lang . Long > IDENT_5 = new java . util . ArrayList ( ) ; for ( com . IDENT_0 . IDENT_1 . entities . METHOD_1 entity : entities ) { IDENT_5 . add ( entity . getId ( ) ) ; } java . util . List < com . IDENT_0 . IDENT_1 . entities . METHOD_1 > IDENT_6 = com . IDENT_0 . IDENT_1 . IDENT_3 . em . METHOD_5 ( com . IDENT_0 . IDENT_1 . entities . METHOD_1 . class , IDENT_5 ) ; "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( ( obj == null ) || ( ! ( obj instanceof com . IDENT_0 . IDENT_1 . entities . IDENT_7 ) ) ) { return false ; } if ( ( this ) == obj ) { return true ; } com . IDENT_0 . IDENT_1 . entities . IDENT_7 that = ( ( com . IDENT_0 . IDENT_1 . entities . IDENT_7 ) ( obj ) ) ; return ( ( ( this . id ) == ( that . id ) ) && ( java . util . IDENT_8 . equals ( this . IDENT_9 , that . IDENT_9 ) ) ) && ( java . util . IDENT_8 . equals ( this . IDENT_10 , that . IDENT_10 ) ) ; }
org . junit . Assert . assertTrue ( entities . equals ( IDENT_6 ) ) 