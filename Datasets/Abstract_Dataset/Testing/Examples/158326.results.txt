METHOD_0 ( ) { final java . lang . String [ ] IDENT_0 = org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 [ 0 ] ; final java . lang . String IDENT_7 = METHOD_1 ( METHOD_2 ( IDENT_0 ) ) ; java . util . ArrayList < java . lang . String [ ] > IDENT_8 = new java . util . ArrayList ( ) ; IDENT_8 . add ( IDENT_0 ) ; final java . lang . String IDENT_9 = ( STRING_0 + ( METHOD_1 ( METHOD_3 ( IDENT_8 ) ) ) ) + STRING_1 ; METHOD_4 ( ) ; METHOD_5 ( IDENT_0 ) ; final java . lang . String IDENT_10 = IDENT_11 . METHOD_6 ( STRING_2 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String , java . lang . String ) { if ( org . apache . commons . lang3 . StringUtils . METHOD_7 ( IDENT_12 ) ) { java . lang . String IDENT_13 = STRING_3 ; java . lang . String IDENT_14 = STRING_4 ; java . lang . String IDENT_15 = STRING_5 ; if ( IDENT_12 != null ) { int IDENT_16 = IDENT_12 . indexOf ( IDENT_14 ) ; if ( IDENT_16 > 0 ) { java . lang . String IDENT_17 = ( org . IDENT_1 . component . IDENT_18 . IDENT_19 . METHOD_8 ( ) ) + IDENT_13 ; while ( IDENT_16 > 0 ) { int IDENT_20 = 0 ; IDENT_16 = IDENT_16 + ( IDENT_14 . length ( ) ) ; int IDENT_21 = IDENT_12 . indexOf ( IDENT_15 , IDENT_16 ) ; java . lang . String IDENT_22 = IDENT_12 . substring ( IDENT_16 , IDENT_21 ) ; if ( IDENT_22 . contains ( IDENT_17 ) ) { java . lang . String IDENT_23 = IDENT_22 . substring ( ( ( IDENT_17 . length ( ) ) - 1 ) ) ; final java . lang . String IDENT_24 = METHOD_9 ( java . util . Arrays . asList ( IDENT_23 ) , new java . lang . StringBuilder ( ) ) . toString ( ) ; if ( org . apache . commons . lang3 . StringUtils . METHOD_7 ( IDENT_24 ) ) { IDENT_12 = IDENT_12 . replace ( IDENT_22 , IDENT_24 ) ; IDENT_20 = ( IDENT_24 . length ( ) ) - ( IDENT_22 . length ( ) ) ; } } IDENT_16 = IDENT_12 . indexOf ( IDENT_14 , ( IDENT_21 + IDENT_20 ) ) ; } } } return ( ( IDENT_25 + STRING_6 ) + IDENT_12 ) + STRING_1 ; } else { return "" ; } }
org . junit . Assert . assertThat ( IDENT_10 , org . hamcrest . CoreMatchers . equalTo ( IDENT_9 ) ) 