METHOD_0 ( ) { java . lang . System . setProperty ( STRING_0 , STRING_1 ) ; java . lang . System . METHOD_1 ( STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . LOG . debug ( STRING_3 ) ; java . lang . String IDENT_3 = STRING_4 ; java . lang . String IDENT_4 = ( ( java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_5 ) ) != null ) ? java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_5 ) : java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_5 . toLowerCase ( ) ) ; java . lang . String IDENT_6 = ( ( java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_7 ) ) != null ) ? java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_7 ) : java . lang . System . getProperty ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . IDENT_7 . toLowerCase ( ) ) ; java . lang . String IDENT_8 = ( IDENT_4 != null ) ? IDENT_4 : IDENT_6 ; com . github . IDENT_0 . IDENT_1 . http . URL IDENT_9 = null ; try { if ( ( IDENT_8 != null ) && ( IDENT_8 . toLowerCase ( ) . startsWith ( IDENT_3 ) ) ) { IDENT_9 = com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . METHOD_3 ( IDENT_8 ) ; com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . LOG . debug ( ( STRING_5 + ( IDENT_9 . METHOD_4 ( ) ) ) ) ; return new com . github . IDENT_0 . IDENT_1 . http . METHOD_5 ( METHOD_5 . Type . IDENT_10 , new com . github . IDENT_0 . IDENT_1 . http . METHOD_6 ( IDENT_9 . METHOD_7 ( ) , IDENT_9 . METHOD_8 ( ) ) ) ; } else if ( ( ( IDENT_8 != null ) && ( ! ( IDENT_8 . contains ( STRING_6 ) ) ) ) && ( ( IDENT_8 . split ( STRING_7 ) . length ) == 2 ) ) { com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . LOG . debug ( STRING_8 ) ; IDENT_9 = com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . METHOD_3 ( IDENT_3 . METHOD_9 ( IDENT_8 ) ) ; return IDENT_9 != null ? new com . github . IDENT_0 . IDENT_1 . http . METHOD_5 ( METHOD_5 . Type . IDENT_10 , new com . github . IDENT_0 . IDENT_1 . http . METHOD_6 ( IDENT_9 . METHOD_7 ( ) , IDENT_9 . METHOD_8 ( ) ) ) : null ; } else if ( ( ( IDENT_8 != null ) && ( IDENT_8 . toLowerCase ( ) . startsWith ( STRING_9 ) ) ) && ( ( IDENT_8 . split ( STRING_6 ) . length ) == 2 ) ) { com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . LOG . debug ( STRING_10 ) ; IDENT_9 = com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . METHOD_3 ( IDENT_3 . METHOD_9 ( IDENT_8 . split ( STRING_6 ) [ 1 ] ) ) ; return IDENT_9 != null ? new com . github . IDENT_0 . IDENT_1 . http . METHOD_5 ( METHOD_5 . Type . IDENT_11 , new com . github . IDENT_0 . IDENT_1 . http . METHOD_6 ( IDENT_9 . METHOD_7 ( ) , IDENT_9 . METHOD_8 ( ) ) ) : null ; } } catch ( com . github . IDENT_0 . IDENT_1 . http . IDENT_12 | com . github . IDENT_0 . IDENT_1 . http . IDENT_13 IDENT_14 ) { com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . LOG . error ( ( STRING_11 + IDENT_14 ) , IDENT_8 ) ; } return null ; }
org . junit . Assert . assertNull ( com . github . IDENT_0 . IDENT_1 . http . IDENT_2 . METHOD_2 ( ) ) 