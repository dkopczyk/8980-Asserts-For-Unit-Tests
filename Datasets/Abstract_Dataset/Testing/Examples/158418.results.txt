METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_4 IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . METHOD_1 ( ) ; java . util . Map < java . lang . Long , java . lang . Double > IDENT_6 = new java . util . HashMap < java . lang . Long , java . lang . Double > ( ) ; IDENT_6 . put ( 1L , 1.0 ) ; IDENT_6 . put ( INT_0 , 2.0 ) ; IDENT_6 . put ( INT_1 , FLOAT_0 ) ; IDENT_6 . put ( INT_2 , FLOAT_1 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_7 IDENT_8 = new com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 ( STRING_0 , STRING_1 ) ; IDENT_8 . METHOD_3 ( IDENT_6 ) ; java . util . Map < java . lang . Long , java . lang . Double > IDENT_9 = new java . util . HashMap < java . lang . Long , java . lang . Double > ( ) ; IDENT_9 . put ( 1L , FLOAT_2 ) ; IDENT_9 . put ( INT_0 , 2.0 ) ; IDENT_9 . put ( INT_1 , FLOAT_0 ) ; IDENT_9 . put ( INT_2 , FLOAT_3 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_10 = new com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 ( STRING_2 , STRING_3 ) ; IDENT_10 . METHOD_3 ( IDENT_9 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > metrics = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > ( ) ; metrics . add ( IDENT_10 ) ; metrics . add ( IDENT_8 ) ; java . util . List < java . lang . String > IDENT_11 = new java . util . ArrayList < java . lang . String > ( 1 ) ; IDENT_11 . add ( STRING_4 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > result = IDENT_5 . transform ( null , metrics , IDENT_11 ) ; "<AssertPlaceHolder>" ; } transform ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_12 , java . util . List , java . util . List ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . IDENT_14 . METHOD_4 ( ( metrics != null ) , STRING_5 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 . IDENT_14 . METHOD_4 ( ( ( IDENT_11 != null ) && ( ( IDENT_11 . size ( ) ) >= 2 ) ) , STRING_6 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_15 . IDENT_16 IDENT_17 = null ; int IDENT_18 = - 1 ; for ( int i = ( IDENT_11 . size ( ) ) - 1 ; i >= 0 ; i OP_0 ) { java . lang . String IDENT_19 = IDENT_11 . get ( i ) ; try { IDENT_17 = IDENT_15 . IDENT_16 . valueOf ( IDENT_19 ) ; IDENT_18 = i ; break ; } catch ( java . lang . IllegalArgumentException ex ) { } } if ( IDENT_17 == null ) { throw new java . lang . METHOD_5 ( STRING_7 ) ; } java . util . List < java . lang . String > IDENT_20 = IDENT_11 . METHOD_6 ( 0 , IDENT_18 ) ; if ( IDENT_20 . isEmpty ( ) ) { throw new java . lang . METHOD_5 ( STRING_8 ) ; } java . util . List < java . lang . String > IDENT_21 = ( IDENT_18 == ( ( IDENT_11 . size ( ) ) - 1 ) ) ? new java . util . ArrayList ( ) : IDENT_11 . METHOD_6 ( ( IDENT_18 + 1 ) , IDENT_11 . size ( ) ) ; java . util . Map < java . lang . String , java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > > IDENT_22 = new java . util . HashMap ( ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_3 : metrics ) { java . lang . String key = IDENT_20 . stream ( ) . map ( IDENT_3 :: IDENT_23 ) . filter ( IDENT_24 :: IDENT_25 ) . collect ( java . util . stream . IDENT_26 . METHOD_7 ( STRING_9 ) ) ; IDENT_22 . METHOD_8 ( key , new java . util . ArrayList ( ) ) ; IDENT_22 . get ( key ) . add ( IDENT_3 ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . transform . IDENT_4 transform = IDENT_27 . METHOD_9 ( IDENT_17 . getName ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > result = new java . util . ArrayList ( ) ; for ( java . util . Map . Entry < java . lang . String , java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > > entry : IDENT_22 . entrySet ( ) ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > IDENT_28 = entry . getValue ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 > IDENT_29 = ( IDENT_21 . isEmpty ( ) ) ? transform . transform ( null , IDENT_28 ) : transform . transform ( null , IDENT_28 , IDENT_21 ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . METHOD_2 IDENT_30 : IDENT_29 ) { IDENT_30 . METHOD_10 ( ( ( ( entry . getKey ( ) ) != null ) && ( ! ( entry . getKey ( ) . trim ( ) . isEmpty ( ) ) ) ? entry . getKey ( ) : STRING_10 ) ) ; } result . addAll ( IDENT_29 ) ; } return result ; }
org . junit . Assert . assertEquals ( result . size ( ) , 1 ) 