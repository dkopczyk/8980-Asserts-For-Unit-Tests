METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 IDENT_4 = mock ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_3 . class ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_5 > records = new java . util . ArrayList ( ) ; when ( IDENT_4 . get ( any ( com . IDENT_0 . IDENT_1 . IDENT_2 . entity . IDENT_6 . class ) ) ) . thenReturn ( records ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . IDENT_7 IDENT_8 = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . METHOD_1 ( IDENT_4 , IDENT_9 . METHOD_2 ( ) ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_10 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_10 . put ( STRING_0 , STRING_1 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . IDENT_12 query = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 ( STRING_2 , STRING_3 , IDENT_10 , 1L , INT_0 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 > IDENT_13 = IDENT_8 . METHOD_4 ( query ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 ) { METHOD_5 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_14 . METHOD_6 ( ( query != null ) , STRING_4 ) ; long start = java . lang . System . METHOD_7 ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 > IDENT_13 = new java . util . ArrayList ( ) ; if ( com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_15 . METHOD_8 ( query ) ) { java . lang . String value = IDENT_16 . get ( METHOD_9 ( query ) ) ; if ( value == null ) { IDENT_17 . info ( java . text . IDENT_18 . format ( STRING_5 , query ) ) ; IDENT_13 = IDENT_19 . METHOD_4 ( query ) ; long IDENT_20 = ( ( java . lang . System . METHOD_7 ( ) ) - start ) / INT_1 ; IDENT_17 . info ( ( STRING_6 + IDENT_20 ) ) ; if ( IDENT_20 > ( IDENT_21 ) ) { IDENT_17 . warn ( STRING_7 , IDENT_20 , query ) ; } IDENT_22 . METHOD_10 ( new com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . IDENT_23 . METHOD_11 ( query , IDENT_13 ) ) ; } else { IDENT_17 . info ( java . text . IDENT_18 . format ( STRING_8 , query ) ) ; IDENT_17 . info ( ( STRING_9 + ( ( ( java . lang . System . METHOD_7 ( ) ) - start ) / INT_1 ) ) ) ; try { com . fasterxml . jackson . databind . IDENT_24 type = com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . IDENT_23 . IDENT_25 . METHOD_12 ( ) . METHOD_13 ( java . util . List . class , com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 . class ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 > IDENT_26 = com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . IDENT_23 . IDENT_25 . METHOD_14 ( value , type ) ; METHOD_15 ( query , IDENT_26 ) ; for ( int i = 0 ; i < ( IDENT_26 . size ( ) ) ; i ++ ) { com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 q = new com . IDENT_0 . IDENT_1 . IDENT_2 . service . IDENT_11 . METHOD_3 ( query ) ; METHOD_16 ( IDENT_26 . get ( i ) , q ) ; IDENT_13 . add ( q ) ; } } catch ( java . io . IOException e ) { IDENT_17 . warn ( STRING_10 , e ) ; IDENT_13 = IDENT_19 . METHOD_4 ( query ) ; IDENT_22 . METHOD_10 ( new com . IDENT_0 . IDENT_1 . IDENT_2 . service . schema . IDENT_23 . METHOD_11 ( query , IDENT_13 ) ) ; } } } else { IDENT_17 . info ( java . text . IDENT_18 . format ( STRING_11 , query ) ) ; IDENT_13 . add ( query ) ; } return IDENT_13 ; }
org . junit . Assert . assertEquals ( 0 , IDENT_13 . size ( ) ) 