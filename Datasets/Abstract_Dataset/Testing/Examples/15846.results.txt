METHOD_0 ( ) { org . apache . IDENT_0 . internal . IDENT_1 . cache . persistence . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . IDENT_0 . internal . IDENT_1 . cache . persistence . IDENT_2 . METHOD_1 ( IDENT_5 , null , IDENT_6 , log ) ; long time = IDENT_4 . METHOD_2 ( FLOAT_0 , ( ( INT_0 + INT_1 ) / 2 ) , INT_2 , 1 , INT_3 , INT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( double , long , int , int , long , long ) { long IDENT_7 = METHOD_3 ( IDENT_8 , IDENT_9 , IDENT_10 , IDENT_11 ) ; double IDENT_12 = METHOD_4 ( IDENT_9 , IDENT_11 ) ; this . IDENT_7 = IDENT_7 ; this . IDENT_12 = IDENT_12 ; boolean IDENT_13 = ( IDENT_8 > IDENT_12 ) && ( ( IDENT_8 + FLOAT_1 ) > ( org . apache . IDENT_0 . internal . IDENT_1 . cache . persistence . IDENT_2 . METHOD_1 . IDENT_14 ) ) ; int IDENT_15 = ( IDENT_13 ) ? 3 : 1 ; double IDENT_16 = ( IDENT_13 ) ? FLOAT_2 : 1.0 ; boolean IDENT_17 = ( IDENT_7 > 0 ) && ( IDENT_18 > ( IDENT_16 * IDENT_7 ) ) ; boolean IDENT_19 = ( IDENT_8 > IDENT_12 ) && IDENT_17 ; double IDENT_20 = ( ( ( IDENT_7 > 0 ) && ( IDENT_18 > 0 ) ) && ( IDENT_7 > IDENT_18 ) ) ? ( FLOAT_3 * IDENT_7 ) / IDENT_18 : IDENT_8 > IDENT_12 ? 0.0 : FLOAT_3 ; double IDENT_21 = ( IDENT_13 ) ? 1.0 : 1.0 + IDENT_20 ; boolean IDENT_22 = ( IDENT_10 > 0 ) && ( IDENT_18 > ( IDENT_21 * IDENT_10 ) ) ; long IDENT_23 = ( IDENT_22 ) ? METHOD_5 ( IDENT_10 , IDENT_24 , IDENT_15 ) : 0 ; long IDENT_25 = ( IDENT_19 ) ? METHOD_5 ( IDENT_7 , IDENT_24 , IDENT_15 ) : 0 ; return java . lang . Math . max ( IDENT_23 , IDENT_25 ) ; }
org . junit . Assert . assertTrue ( ( time > 0 ) ) 