METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 < com . IDENT_0 . IDENT_1 . serialization . Person > person = Person . IDENT_1 . with ( Person . IDENT_3 , STRING_0 ) . with ( Person . IDENT_4 , STRING_1 ) . with ( Person . IDENT_5 , com . google . common . collect . ImmutableList . of ( Person . IDENT_1 . with ( Person . IDENT_3 , STRING_2 ) , Person . IDENT_1 . with ( Person . IDENT_3 , STRING_3 ) ) ) . with ( Person . IDENT_6 , com . google . common . collect . ImmutableList . of ( STRING_4 0 , STRING_5 , STRING_6 ) ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_7 = person . serialize ( new com . IDENT_0 . IDENT_1 . serialization . METHOD_1 ( ) ) ; java . util . Map < java . lang . String , java . lang . Object > expected = com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Object > of ( STRING_4 , STRING_0 , STRING_7 , STRING_1 , STRING_8 , com . google . common . collect . ImmutableList . of ( com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Object > of ( STRING_4 , STRING_2 ) , com . google . common . collect . ImmutableMap . < java . lang . String , java . lang . Object > of ( STRING_4 , STRING_3 ) ) , STRING_9 , com . google . common . collect . ImmutableList . of ( STRING_4 0 , STRING_5 , STRING_6 ) ) ; "<AssertPlaceHolder>" ; } serialize ( com . IDENT_0 . IDENT_1 . serialization . IDENT_8 ) { return delegate . serialize ( serializer ) ; }
org . junit . Assert . assertThat ( IDENT_7 , org . hamcrest . Matchers . is ( org . hamcrest . Matchers . equalTo ( expected ) ) ) 