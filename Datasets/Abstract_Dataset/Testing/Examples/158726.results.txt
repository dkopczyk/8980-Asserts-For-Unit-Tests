METHOD_0 ( ) { try { com . IDENT_0 . core . IDENT_1 . processor . core . jpa . IDENT_2 . IDENT_3 IDENT_4 = new com . IDENT_0 . core . IDENT_1 . processor . core . jpa . IDENT_2 . METHOD_1 ( com . IDENT_0 . core . IDENT_1 . processor . core . jpa . mock . IDENT_5 . METHOD_2 ( ) ) ; IDENT_4 . getClass ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( ) { com . IDENT_0 . core . IDENT_1 . processor . api . jpa . IDENT_6 IDENT_7 = org . easymock . EasyMock . METHOD_3 ( com . IDENT_0 . core . IDENT_1 . processor . api . jpa . IDENT_6 . class ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_4 ( ) ) . METHOD_5 ( com . IDENT_0 . core . IDENT_1 . processor . core . jpa . mock . IDENT_5 . IDENT_8 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_6 ( ) ) . andReturn ( com . IDENT_0 . core . IDENT_1 . processor . core . jpa . mock . IDENT_5 . METHOD_7 ( ) ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_8 ( ) ) . andReturn ( com . IDENT_0 . core . IDENT_1 . processor . core . jpa . mock . IDENT_5 . IDENT_9 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_9 ( ) ) . andReturn ( null ) ; org . easymock . EasyMock . replay ( IDENT_7 ) ; return IDENT_7 ; }
org . junit . Assert . assertTrue ( true ) 