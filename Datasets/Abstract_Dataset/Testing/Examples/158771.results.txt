METHOD_0 ( ) { com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 IDENT_3 = com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . create ( STRING_0 ) ; com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 IDENT_4 = com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . create ( STRING_0 ) ; "<AssertPlaceHolder>" ; } create ( java . lang . String ) { if ( format == null ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . lang . String [ ] IDENT_5 = format . split ( com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . IDENT_6 , 2 ) ; java . lang . String types = IDENT_5 [ 0 ] ; java . lang . String parameters = ( ( IDENT_5 . length ) > 1 ) ? IDENT_5 [ 1 ] : null ; java . util . Map < java . lang . String , java . lang . String > IDENT_7 = com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . METHOD_1 ( parameters ) ; if ( types . contains ( com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . IDENT_8 ) ) { java . lang . String [ ] tokens = types . split ( com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . IDENT_8 ) ; if ( ( tokens . length ) == 2 ) { return com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . create ( tokens [ 0 ] , tokens [ 1 ] , IDENT_7 ) ; } else { throw new java . lang . IllegalArgumentException ( ( ( ( ( STRING_2 + ( com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . IDENT_8 ) ) + STRING_3 ) + format ) + STRING_4 ) ) ; } } else { return com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . create ( types , com . IDENT_0 . core . IDENT_1 . core . commons . IDENT_2 . IDENT_9 , IDENT_7 ) ; } }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_4 ) 