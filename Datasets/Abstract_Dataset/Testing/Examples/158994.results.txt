METHOD_0 ( ) { java . nio . IDENT_0 . IDENT_1 channel = fixture . METHOD_1 ( true , true , false , false , false , false , IDENT_2 , fs ) ; java . nio . ByteBuffer buffer = java . nio . ByteBuffer . METHOD_2 ( 1000 ) ; "<AssertPlaceHolder>" ; } read ( java . nio . ByteBuffer ) { MOD_0 ( IDENT_3 . IDENT_4 ) { METHOD_3 ( ) ; METHOD_4 ( ) ; if ( ( position ) >= ( IDENT_3 . METHOD_5 ( ) ) ) { return - 1 ; } int IDENT_5 = java . lang . Math . min ( IDENT_6 . METHOD_6 ( ) , ( ( IDENT_3 . METHOD_5 ( ) ) - ( position ) ) ) ; IDENT_3 . METHOD_7 ( ) . position ( position ) ; IDENT_3 . METHOD_7 ( ) . METHOD_8 ( ( ( position ) + IDENT_5 ) ) ; try { IDENT_6 . put ( IDENT_3 . METHOD_7 ( ) ) ; position += IDENT_5 ; } finally { IDENT_3 . METHOD_7 ( ) . METHOD_8 ( IDENT_3 . METHOD_7 ( ) . METHOD_9 ( ) ) ; } return IDENT_5 ; } }
org . junit . Assert . assertEquals ( ( - 1 ) , channel . read ( buffer ) ) 