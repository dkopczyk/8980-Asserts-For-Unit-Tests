METHOD_0 ( ) { java . nio . file . Path IDENT_0 = root . resolve ( STRING_0 ) ; java . nio . file . IDENT_1 . METHOD_1 ( IDENT_0 ) ; java . nio . file . Path IDENT_2 = java . nio . file . IDENT_1 . METHOD_2 ( root . resolve ( STRING_1 ) , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . nio . file . IDENT_3 [ ] ) { boolean IDENT_4 = false ; for ( java . nio . file . IDENT_3 IDENT_5 : options ) { if ( IDENT_5 == ( java . nio . file . IDENT_3 . IDENT_6 ) ) { IDENT_4 = true ; } } com . github . IDENT_7 . IDENT_8 . IDENT_9 IDENT_10 = com . github . IDENT_7 . IDENT_8 . IDENT_9 . resolve ( this , IDENT_4 ) ; if ( ! ( IDENT_10 . METHOD_4 ( ) ) ) { throw new java . nio . file . METHOD_5 ( toString ( ) ) ; } return IDENT_10 . getPath ( ) . METHOD_6 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_2 . METHOD_3 ( IDENT_3 . IDENT_6 ) ) 