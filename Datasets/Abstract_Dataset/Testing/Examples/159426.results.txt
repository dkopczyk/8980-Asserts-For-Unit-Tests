METHOD_0 ( ) { int IDENT_0 = 0 ; int IDENT_1 = 1 ; java . lang . String IDENT_2 = STRING_0 ; java . lang . String IDENT_3 = STRING_1 ; java . lang . String IDENT_4 = STRING_2 ; java . lang . String IDENT_5 = STRING_3 ; org . oscarehr . common . model . IDENT_6 IDENT_7 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_8 . METHOD_2 ( IDENT_7 ) ; IDENT_7 . METHOD_3 ( IDENT_0 ) ; IDENT_7 . setName ( IDENT_2 ) ; dao . METHOD_4 ( IDENT_7 ) ; org . oscarehr . common . model . METHOD_1 IDENT_9 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_8 . METHOD_2 ( IDENT_9 ) ; IDENT_9 . METHOD_3 ( IDENT_0 ) ; IDENT_9 . setName ( IDENT_3 ) ; dao . METHOD_4 ( IDENT_9 ) ; org . oscarehr . common . model . METHOD_1 IDENT_10 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_8 . METHOD_2 ( IDENT_10 ) ; IDENT_10 . METHOD_3 ( IDENT_1 ) ; IDENT_10 . setName ( IDENT_4 ) ; dao . METHOD_4 ( IDENT_10 ) ; org . oscarehr . common . model . METHOD_1 IDENT_11 = new org . oscarehr . common . model . METHOD_1 ( ) ; org . oscarehr . common . dao . utils . IDENT_8 . METHOD_2 ( IDENT_11 ) ; IDENT_11 . METHOD_3 ( IDENT_0 ) ; IDENT_11 . setName ( IDENT_5 ) ; dao . METHOD_4 ( IDENT_11 ) ; java . util . List < org . oscarehr . common . model . METHOD_1 > IDENT_12 = new java . util . ArrayList < org . oscarehr . common . model . METHOD_1 > ( java . util . Arrays . asList ( IDENT_9 , IDENT_11 , IDENT_7 ) ) ; java . util . List < org . oscarehr . common . model . METHOD_1 > result = dao . METHOD_5 ( ) ; org . apache . log4j . IDENT_13 logger = org . oscarehr . util . IDENT_14 . METHOD_6 ( ) ; if ( ( result . size ( ) ) != ( IDENT_12 . size ( ) ) ) { logger . warn ( STRING_4 ) ; org . junit . Assert . fail ( STRING_4 ) ; } for ( int i = 0 ; i < ( IDENT_12 . size ( ) ) ; i ++ ) { if ( ! ( IDENT_12 . get ( i ) . equals ( result . get ( i ) ) ) ) { logger . warn ( STRING_5 ) ; org . junit . Assert . fail ( STRING_5 ) ; } } "<AssertPlaceHolder>" ; } get ( java . lang . String ) { try { return IDENT_15 . get ( path ) ; } catch ( ca . uhn . IDENT_16 . IDENT_17 e ) { IDENT_18 . IDENT_19 . ca . IDENT_20 . IDENT_21 . IDENT_22 . logger . warn ( ( STRING_6 + path ) , e ) ; return null ; } }
org . junit . Assert . assertTrue ( true ) 