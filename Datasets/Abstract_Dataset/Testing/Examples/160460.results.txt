METHOD_0 ( ) { METHOD_1 ( ) . METHOD_2 ( IDENT_0 . IDENT_1 ) . auth ( ) . METHOD_3 ( ) . METHOD_4 ( IDENT_2 , IDENT_3 ) . METHOD_5 ( STRING_0 , IDENT_4 ) . expect ( ) . METHOD_6 ( 200 ) . log ( ) . METHOD_7 ( ) . when ( ) . delete ( new java . net . URL ( context , org . IDENT_5 . IDENT_6 . rest . IDENT_7 . IDENT_8 ) . METHOD_8 ( ) ) ; METHOD_1 ( ) . METHOD_2 ( IDENT_0 . IDENT_1 ) . METHOD_5 ( STRING_0 , IDENT_4 ) . auth ( ) . METHOD_3 ( ) . METHOD_4 ( IDENT_9 , IDENT_10 ) . expect ( ) . log ( ) . METHOD_7 ( ) . METHOD_6 ( INT_0 ) . when ( ) . get ( new java . net . URL ( context , org . IDENT_5 . IDENT_6 . rest . IDENT_7 . IDENT_11 ) . METHOD_8 ( ) ) ; org . IDENT_5 . IDENT_6 . IDENT_12 . METHOD_9 ( ) ; java . util . List < java . lang . String > IDENT_13 = METHOD_10 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( java . lang . String ) { com . IDENT_14 . IDENT_15 . path . json . IDENT_16 ret = METHOD_1 ( ) . METHOD_2 ( IDENT_0 . IDENT_1 ) . METHOD_11 ( STRING_1 , STRING_2 ) . expect ( ) . log ( ) . METHOD_12 ( ) . METHOD_6 ( 200 ) . METHOD_2 ( IDENT_0 . IDENT_1 ) . when ( ) . get ( new java . net . URL ( context , IDENT_17 . IDENT_18 ) . METHOD_8 ( ) ) . andReturn ( ) . METHOD_13 ( ) . METHOD_14 ( ) ; java . util . List < java . util . Map < java . lang . String , java . lang . Object > > IDENT_19 = ret . METHOD_15 ( STRING_3 ) ; for ( java . util . Map < java . lang . String , java . lang . Object > IDENT_20 : IDENT_19 ) { if ( ( id . equals ( IDENT_20 . get ( STRING_4 ) ) ) && ( ( IDENT_20 . get ( STRING_5 ) ) != null ) ) { return ( ( java . util . List < java . lang . String > ) ( ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_20 . get ( STRING_5 ) ) ) . get ( IDENT_21 . IDENT_22 ) ) ) ; } } return null ; }
org . junit . Assert . assertTrue ( ( ( IDENT_13 == null ) || ( IDENT_13 . isEmpty ( ) ) ) ) 