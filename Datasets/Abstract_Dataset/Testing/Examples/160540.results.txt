METHOD_0 ( ) { int IDENT_0 = ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . device . METHOD_1 ( ) ) + 2 ; int IDENT_5 = ( IDENT_6 . length ) / ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . device . METHOD_2 ( ) ) ; long address = 0 ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . device . write ( ( address + ( i * IDENT_5 ) ) , IDENT_6 ) ; } for ( int j = 0 ; j < IDENT_0 ; j ++ ) { byte [ ] result = new byte [ IDENT_6 . length ] ; org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . device . read ( ( address + ( j * IDENT_5 ) ) , result ) ; for ( int i = 0 ; i < ( IDENT_6 . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } } } read ( long , byte [ ] ) { if ( ( ( data . length ) OP_0 ( METHOD_2 ( ) ) ) != 0 ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } final long IDENT_7 = ( data . length ) / ( METHOD_2 ( ) ) ; final long IDENT_8 = address - ( IDENT_7 << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) ; final long IDENT_11 = address + ( IDENT_7 << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) ; byte [ ] IDENT_12 = ( ( byte [ ] ) ( buffer . get ( address ) ) ) ; if ( ( IDENT_12 == null ) || ( ( IDENT_12 . length ) != ( data . length ) ) ) { if ( ( ( IDENT_13 ) == ( address - IDENT_7 ) ) && ( IDENT_11 < ( METHOD_3 ( ) ) ) ) { IDENT_12 = new byte [ ( ( data . length ) << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) + ( data . length ) ] ; device . read ( address , IDENT_12 ) ; java . lang . System . METHOD_4 ( IDENT_12 , 0 , data , 0 , data . length ) ; byte [ ] IDENT_14 ; for ( int i = 1 ; i <= ( 1 << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) ; i ++ ) { IDENT_14 = new byte [ data . length ] ; java . lang . System . METHOD_4 ( IDENT_12 , ( i * ( data . length ) ) , IDENT_14 , 0 , data . length ) ; buffer . put ( ( address + ( i * IDENT_7 ) ) , IDENT_14 ) ; } } else if ( ( ( IDENT_13 ) == ( address + IDENT_7 ) ) && ( IDENT_8 >= 0 ) ) { IDENT_12 = new byte [ ( ( data . length ) << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) + ( data . length ) ] ; device . read ( IDENT_8 , IDENT_12 ) ; java . lang . System . METHOD_4 ( IDENT_12 , ( ( IDENT_12 . length ) - ( data . length ) ) , data , 0 , data . length ) ; byte [ ] IDENT_14 ; for ( int i = 0 ; i < ( 1 << ( org . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 ) ) ; i ++ ) { IDENT_14 = new byte [ data . length ] ; java . lang . System . METHOD_4 ( IDENT_12 , ( i * ( data . length ) ) , IDENT_14 , 0 , data . length ) ; buffer . put ( ( IDENT_8 + ( i * IDENT_7 ) ) , IDENT_14 ) ; } } else { device . read ( address , data ) ; } } else { java . lang . System . METHOD_4 ( IDENT_12 , 0 , data , 0 , data . length ) ; } IDENT_13 = address ; }
org . junit . Assert . assertEquals ( IDENT_6 [ i ] , result [ i ] ) 