METHOD_0 ( ) { IDENT_0 . tools . array . IDENT_1 IDENT_2 = new IDENT_0 . tools . array . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( new org . apache . hadoop . hive . IDENT_3 . IDENT_4 . IDENT_5 [ ] { org . apache . hadoop . hive . IDENT_3 . IDENT_4 . IDENT_6 . METHOD_3 ( IDENT_7 . IDENT_8 ) , org . apache . hadoop . hive . IDENT_3 . IDENT_4 . IDENT_9 . IDENT_7 . IDENT_10 , org . apache . hadoop . hive . IDENT_3 . IDENT_4 . IDENT_9 . IDENT_7 . IDENT_10 } ) ; org . apache . hadoop . io . IDENT_11 offset = new org . apache . hadoop . io . METHOD_4 ( ) ; org . apache . hadoop . io . METHOD_4 length = new org . apache . hadoop . io . METHOD_4 ( ) ; org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . IDENT_15 IDENT_16 = new org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . METHOD_5 ( offset ) ; org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . IDENT_15 IDENT_17 = new org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . METHOD_5 ( length ) ; org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . IDENT_15 [ ] args = new org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . IDENT_15 [ ] { new org . apache . hadoop . hive . IDENT_12 . IDENT_2 . IDENT_13 . IDENT_14 . METHOD_5 ( java . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 0 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_2 ) ) , IDENT_16 , IDENT_17 } ; offset . set ( ( - 12 ) ) ; length . set ( 0 ) ; java . util . List < java . lang . Object > actual = IDENT_2 . evaluate ( args ) ; "<AssertPlaceHolder>" ; IDENT_2 . close ( ) ; } evaluate ( IDENT_0 . IDENT_18 . IDENT_15 [ ] ) { assert ( IDENT_19 . length ) == 1 ; @ IDENT_0 . IDENT_18 . METHOD_6 ( STRING_10 ) final java . util . List < java . lang . Double > input = ( ( java . util . List < java . lang . Double > ) ( IDENT_20 . METHOD_7 ( IDENT_19 [ 0 ] . get ( ) ) ) ) ; return IDENT_2 . evaluate ( input ) ; }
org . junit . Assert . assertNull ( actual ) 