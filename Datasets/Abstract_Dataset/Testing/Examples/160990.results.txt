METHOD_0 ( ) { org . openqa . selenium . IDENT_0 config = new org . openqa . selenium . METHOD_1 ( STRING_0 , "foo" , STRING_1 , STRING_2 ) ; org . openqa . selenium . METHOD_1 IDENT_1 = new org . openqa . selenium . METHOD_1 ( STRING_0 , STRING_3 ) ; org . openqa . selenium . IDENT_2 IDENT_3 = new org . openqa . grid . selenium . node . METHOD_2 ( config ) . apply ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } apply ( org . openqa . selenium . grid . data . IDENT_4 ) { org . openqa . selenium . remote . IDENT_5 id = new org . openqa . selenium . remote . METHOD_3 ( java . util . UUID . METHOD_4 ( ) ) ; org . openqa . selenium . grid . data . IDENT_6 session = IDENT_7 . apply ( id , IDENT_8 . METHOD_5 ( ) ) ; java . net . URL url = null ; try { url = session . METHOD_6 ( ) . METHOD_7 ( ) ; } catch ( java . net . IDENT_9 e ) { throw new java . io . METHOD_8 ( e ) ; } org . openqa . selenium . remote . IDENT_10 IDENT_11 = ( IDENT_8 . METHOD_9 ( ) . contains ( org . openqa . selenium . grid . testing . IDENT_12 ) ) ? IDENT_12 : IDENT_8 . METHOD_9 ( ) . iterator ( ) . next ( ) ; org . openqa . selenium . grid . node . IDENT_13 IDENT_14 = new org . openqa . selenium . grid . node . METHOD_10 ( session . getId ( ) , url , IDENT_11 , IDENT_12 , session . METHOD_5 ( ) ) { @ org . openqa . selenium . grid . testing . Override public void METHOD_11 ( ) { } @ org . openqa . selenium . grid . testing . Override public void execute ( org . openqa . selenium . remote . http . IDENT_15 req , org . openqa . selenium . remote . http . IDENT_16 IDENT_17 ) throws java . io . IOException { if ( session instanceof org . openqa . selenium . grid . web . IDENT_18 ) { ( ( org . openqa . selenium . grid . web . IDENT_18 ) ( session ) ) . execute ( req , IDENT_17 ) ; } else { } } } ; return java . util . Optional . of ( IDENT_14 ) ; }
org . junit . Assert . assertSame ( IDENT_1 , IDENT_3 ) 