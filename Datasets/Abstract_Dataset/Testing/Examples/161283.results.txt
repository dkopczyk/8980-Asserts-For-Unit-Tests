METHOD_0 ( ) { int IDENT_0 = INT_0 ; int IDENT_1 = 12 ; int IDENT_2 = org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . compute ( in , IDENT_0 , out , IDENT_1 , IDENT_8 , IDENT_9 , 0 , a ) ; "<AssertPlaceHolder>" ; } compute ( float [ ] [ ] , int , float [ ] [ ] , int , int , int [ ] , int , float [ ] ) { final int [ ] IDENT_10 ; final int IDENT_11 = INT_1 ; final int IDENT_12 = 12 ; final int IDENT_13 = 1 ; final int IDENT_14 = 1 ; final int IDENT_15 = INT_2 ; final int IDENT_16 = 1 ; final double IDENT_17 = 1.0 ; final double IDENT_18 = IDENT_17 / ( ( double ) ( IDENT_11 ) ) ; final double IDENT_19 = IDENT_17 / ( ( double ) ( IDENT_15 ) ) ; final double [ ] IDENT_20 ; final double [ ] IDENT_21 ; if ( IDENT_22 <= 0 ) { return IDENT_11 ; } if ( IDENT_23 <= 0 ) { return IDENT_12 ; } if ( IDENT_22 != IDENT_11 ) { return - 1 ; } if ( IDENT_23 != IDENT_12 ) { return - 2 ; } IDENT_20 = new double [ IDENT_11 + IDENT_13 ] ; IDENT_21 = new double [ IDENT_15 + IDENT_16 ] ; IDENT_10 = new int [ IDENT_8 ] ; for ( int x = 0 ; x < IDENT_8 ; x ++ ) { IDENT_10 [ x ] = 0 ; if ( ( a [ x ] ) < FLOAT_0 ) { IDENT_10 [ x ] = 1 ; } a [ x ] = FLOAT_1 ; } for ( int x = 0 ; x < IDENT_8 ; x ++ ) { if ( ( IDENT_9 [ x ] ) == 0 ) { if ( ( IDENT_10 [ x ] ) != 0 ) { for ( int i = 0 ; ( i < IDENT_11 ) && ( ( a [ x ] ) > FLOAT_0 ) ; i ++ ) { if ( ( ( in [ i ] [ x ] ) < ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_24 [ i ] [ 0 ] ) ) ) || ( ( in [ i ] [ x ] ) > ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_24 [ i ] [ 1 ] ) ) ) ) { a [ x ] OP_0 FLOAT_2 ; } } if ( ( a [ x ] ) < FLOAT_0 ) { IDENT_9 [ x ] OP_1 IDENT_25 ; } } for ( int i = 0 ; i < IDENT_11 ; i ++ ) { if ( ( IDENT_26 . IDENT_27 [ i ] ) == ( - 1 ) ) { in [ i ] [ x ] = ( ( float ) ( java . lang . Math . log ( ( ( double ) ( in [ i ] [ x ] ) ) ) ) ) ; } if ( ( IDENT_26 . IDENT_27 [ i ] ) == ( - 2 ) ) { in [ i ] [ x ] = ( ( float ) ( java . lang . Math . exp ( ( ( double ) ( in [ i ] [ x ] ) ) ) ) ) ; } } for ( int i = 0 ; i < IDENT_11 ; i ++ ) { in [ i ] [ x ] = ( ( float ) ( IDENT_26 . IDENT_28 [ i ] ) ) + ( ( ( in [ i ] [ x ] ) - ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_29 [ i ] [ 0 ] ) ) ) / ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_29 [ i ] [ 1 ] ) ) ) ; } if ( IDENT_14 != 0 ) { for ( int i = 0 ; i < IDENT_11 ; i ++ ) { IDENT_20 [ i ] = ( ( double ) ( in [ i ] [ x ] ) ) ; if ( ( IDENT_26 . IDENT_27 [ i ] ) == 1 ) { IDENT_20 [ i ] = 0.0 ; for ( int j = 0 ; j < IDENT_11 ; j ++ ) { if ( ( IDENT_26 . IDENT_27 [ j ] ) == 1 ) { IDENT_20 [ i ] += ( ( double ) ( in [ j ] [ x ] ) ) * ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_30 [ j ] [ i ] ) ; } } } } for ( int i = 0 ; i < IDENT_11 ; i ++ ) { in [ i ] [ x ] = ( ( float ) ( IDENT_20 [ i ] ) ) ; } } for ( int i = 0 ; i < IDENT_11 ; i ++ ) { IDENT_20 [ i ] = ( ( double ) ( in [ i ] [ x ] ) ) ; } for ( int i = IDENT_11 ; i < ( IDENT_11 + IDENT_13 ) ; i ++ ) { IDENT_20 [ i ] = 1.0 ; } for ( int i = 0 ; i < IDENT_15 ; i ++ ) { IDENT_21 [ i ] = 0.0 ; for ( int j = 0 ; j < ( IDENT_11 + IDENT_13 ) ; j ++ ) { IDENT_21 [ i ] += ( IDENT_20 [ j ] ) * ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_31 [ j ] [ i ] ) ; } } for ( int i = 0 ; i < IDENT_15 ; i ++ ) { IDENT_21 [ i ] = 1.0 / ( 1.0 + ( java . lang . Math . exp ( ( ( - IDENT_18 ) * ( IDENT_21 [ i ] ) ) ) ) ) ; } for ( int i = IDENT_15 ; i < ( IDENT_15 + IDENT_16 ) ; i ++ ) { IDENT_21 [ i ] = FLOAT_1 ; } for ( int i = 0 ; i < IDENT_12 ; i ++ ) { out [ i ] [ x ] = FLOAT_0 ; for ( int j = 0 ; j < ( IDENT_15 + IDENT_16 ) ; j ++ ) { out [ i ] [ x ] += ( ( float ) ( ( IDENT_21 [ j ] ) * ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_32 [ j ] [ i ] ) ) ) ; } } for ( int i = 0 ; i < IDENT_12 ; i ++ ) { out [ i ] [ x ] = ( ( float ) ( 1.0 / ( 1.0 + ( java . lang . Math . exp ( ( ( - IDENT_19 ) * ( out [ i ] [ x ] ) ) ) ) ) ) ) ; } for ( int i = 0 ; i < IDENT_12 ; i ++ ) { out [ i ] [ x ] = ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_33 [ i ] [ 0 ] ) ) + ( ( ( out [ i ] [ x ] ) - ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_34 [ i ] ) ) ) * ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_33 [ i ] [ 1 ] ) ) ) ; } for ( int i = 0 ; i < IDENT_12 ; i ++ ) { if ( ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_35 [ i ] ) == ( - 1 ) ) { out [ i ] [ x ] = ( ( float ) ( java . lang . Math . log ( ( ( double ) ( out [ i ] [ x ] ) ) ) ) ) ; } if ( ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_35 [ i ] ) == ( - 2 ) ) { out [ i ] [ x ] = ( ( float ) ( java . lang . Math . exp ( ( ( double ) ( out [ i ] [ x ] ) ) ) ) ) ; } } if ( ( IDENT_10 [ x ] ) != 0 ) { for ( int i = 0 ; ( i < IDENT_12 ) && ( ( a [ x ] ) >= ( - FLOAT_3 ) ) ; i ++ ) { if ( ( ( out [ i ] [ x ] ) < ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_36 [ i ] [ 0 ] ) ) ) || ( ( out [ i ] [ x ] ) > ( ( float ) ( org . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . util . IDENT_7 . IDENT_36 [ i ] [ 1 ] ) ) ) ) { a [ x ] OP_0 FLOAT_4 ; } } if ( ( a [ x ] ) < FLOAT_0 ) { IDENT_9 [ x ] OP_1 IDENT_25 ; } } } } return 0 ; }
org . junit . Assert . assertEquals ( ( - 1 ) , IDENT_2 ) 