METHOD_0 ( ) { java . util . List < java . lang . String [ ] > IDENT_0 = org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_1 , STRING_2 } ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_1 , STRING_3 } ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_4 , STRING_2 } ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_4 , STRING_3 } ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_5 , STRING_2 } ) ; org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_5 . METHOD_2 ( IDENT_0 , new java . lang . String [ ] { STRING_5 , STRING_3 } ) ; } METHOD_1 ( java . lang . String ) { IDENT_6 = org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_3 ( IDENT_6 ) ; java . util . List < java . lang . String [ ] > IDENT_0 = new java . util . ArrayList < java . lang . String [ ] > ( ) ; for ( java . lang . String IDENT_7 : org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_8 ) { IDENT_7 = org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_3 ( IDENT_7 ) ; final java . util . regex . IDENT_9 IDENT_10 = org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_4 ( IDENT_7 ) ; java . util . regex . IDENT_11 matcher = IDENT_10 . matcher ( IDENT_6 ) ; if ( matcher . matches ( ) ) { org . IDENT_1 . IDENT_2 . util . IDENT_12 IDENT_13 = new org . IDENT_1 . IDENT_2 . util . METHOD_5 ( IDENT_7 , org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_14 [ 0 ] ) ; try { IDENT_13 . METHOD_6 ( IDENT_6 ) ; IDENT_0 . add ( new java . lang . String [ ] { org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_7 ( IDENT_7 ) , org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_14 [ 0 ] } ) ; try { IDENT_13 = new org . IDENT_1 . IDENT_2 . util . METHOD_5 ( org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_7 ( IDENT_7 ) , org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_14 [ 1 ] ) ; IDENT_13 . METHOD_6 ( IDENT_6 ) ; IDENT_0 . add ( new java . lang . String [ ] { IDENT_7 , org . IDENT_1 . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_14 [ 1 ] } ) ; } catch ( com . IDENT_15 . IDENT_16 . binding . IDENT_17 e ) { } } catch ( com . IDENT_15 . IDENT_16 . binding . IDENT_17 e ) { } } } return IDENT_0 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_0 . size ( ) ) >= 6 ) ) 