METHOD_0 ( ) { org . IDENT_0 . core . meta . IDENT_1 IDENT_2 = null ; org . IDENT_0 . core . IDENT_3 . IDENT_4 target = new org . IDENT_0 . core . IDENT_3 . METHOD_1 ( IDENT_2 ) ; java . lang . String IDENT_5 = null ; org . IDENT_0 . core . config . Configuration config = null ; boolean actual = target . METHOD_2 ( IDENT_5 , config ) ; boolean expected = false ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , org . IDENT_0 . core . config . Configuration ) { if ( IDENT_5 == null ) { return false ; } boolean IDENT_6 = false ; java . lang . String [ ] IDENT_7 = IDENT_5 . split ( STRING_0 ) ; java . lang . String IDENT_8 = null ; if ( ( IDENT_7 . length ) > 1 ) { IDENT_8 = IDENT_5 . METHOD_3 ( STRING_1 , IDENT_9 . IDENT_10 ) ; } for ( java . lang . String IDENT_11 : IDENT_2 . IDENT_12 ) { if ( ( IDENT_8 != null ) && ( IDENT_11 . equals ( IDENT_5 ) ) ) { return true ; } else if ( IDENT_11 . matches ( ( ( STRING_2 + IDENT_5 ) + STRING_3 ) ) ) { return true ; } } try { java . lang . Class . METHOD_4 ( ( STRING_4 + IDENT_5 ) ) ; IDENT_6 = true ; } catch ( java . lang . Exception IDENT_13 ) { if ( ( config != null ) && ( IDENT_8 != null ) ) { java . lang . String IDENT_14 = ( ( config . IDENT_15 ) + "/" ) + ( IDENT_8 . replaceAll ( STRING_0 , "/" ) ) ; try { java . util . List < java . io . File > IDENT_16 = org . IDENT_0 . core . file . IDENT_17 . create ( ) . METHOD_5 ( IDENT_14 , ( IDENT_5 + ( IDENT_18 . IDENT_19 . IDENT_20 ) ) ) ; if ( ( IDENT_16 != null ) && ( ( IDENT_16 . size ( ) ) > 0 ) ) { IDENT_6 = true ; } } catch ( java . lang . Exception e ) { org . IDENT_0 . core . util . IDENT_21 . p ( ( ( ( e . METHOD_6 ( ) ) + STRING_5 ) + IDENT_14 ) ) ; } } } return IDENT_6 ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( expected ) ) ) 