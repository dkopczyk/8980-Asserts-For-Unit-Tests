METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . core . meta . IDENT_2 IDENT_3 = IDENT_4 . METHOD_1 ( IDENT_0 ) ; target . METHOD_2 ( IDENT_3 ) ; config . IDENT_5 = "" ; java . lang . String actual = target . METHOD_3 ( ) ; java . lang . String expected = STRING_1 ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { java . lang . StringBuilder buf = new java . lang . StringBuilder ( ) ; if ( ( ( IDENT_3 . IDENT_6 ) != null ) && ( ( IDENT_3 . IDENT_6 . trim ( ) . length ( ) ) > 0 ) ) { buf . append ( STRING_2 ) ; buf . append ( IDENT_3 . IDENT_6 ) ; buf . append ( STRING_3 ) ; IDENT_7 . METHOD_4 ( buf ) ; IDENT_7 . METHOD_4 ( buf ) ; } for ( java . lang . String IDENT_8 : IDENT_3 . IDENT_9 ) { if ( ( IDENT_8 != null ) && ( ( IDENT_8 . trim ( ) . length ( ) ) > 0 ) ) { buf . append ( STRING_2 0 ) ; buf . append ( IDENT_8 ) ; buf . append ( STRING_3 ) ; IDENT_7 . METHOD_4 ( buf ) ; } } if ( ( ( config . IDENT_5 ) != null ) && ( ( config . IDENT_5 . trim ( ) . length ( ) ) > 0 ) ) { if ( ( ( config . IDENT_10 ) == ( org . IDENT_1 . core . config . IDENT_11 . IDENT_12 ) ) || ( ! ( config . IDENT_5 . equals ( STRING_4 ) ) ) ) { buf . append ( STRING_2 0 ) ; buf . append ( config . IDENT_5 ) ; buf . append ( STRING_3 ) ; IDENT_7 . METHOD_4 ( buf ) ; IDENT_7 . METHOD_4 ( buf ) ; } } else { IDENT_7 . METHOD_4 ( buf ) ; } buf . append ( STRING_5 ) ; buf . append ( IDENT_3 . name ) ; buf . append ( STRING_6 ) ; if ( ( ( config . IDENT_5 ) != null ) && ( ( config . IDENT_5 . trim ( ) . length ( ) ) > 0 ) ) { if ( ( ( config . IDENT_10 ) == ( org . IDENT_1 . core . config . IDENT_11 . IDENT_12 ) ) || ( ! ( config . IDENT_5 . equals ( STRING_4 ) ) ) ) { buf . append ( STRING_7 ) ; java . lang . String [ ] IDENT_13 = config . IDENT_5 . split ( STRING_8 ) ; buf . append ( IDENT_13 [ ( ( IDENT_13 . length ) - 1 ) ] ) ; buf . append ( " " ) ; } } buf . append ( STRING_9 ) ; IDENT_7 . METHOD_4 ( buf ) ; IDENT_7 . METHOD_4 ( buf ) ; buf . append ( STRING_10 ) ; IDENT_7 . METHOD_4 ( buf ) ; return METHOD_5 ( buf . toString ( ) ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( expected ) ) ) 