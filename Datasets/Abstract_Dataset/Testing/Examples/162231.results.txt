METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( any ( com . IDENT_1 . domain . mapper . model . IDENT_2 . class ) ) ) . thenReturn ( IDENT_3 . IDENT_4 ) ; when ( IDENT_5 . METHOD_2 ( ) ) . thenReturn ( new java . lang . Object [ ] { com . IDENT_1 . test . IDENT_6 . IDENT_3 . IDENT_7 } ) ; when ( IDENT_5 . METHOD_3 ( ) ) . METHOD_4 ( new java . lang . RuntimeException ( ) ) ; java . lang . Object result = IDENT_8 . METHOD_5 ( IDENT_5 ) ; verify ( IDENT_0 ) . METHOD_1 ( any ( com . IDENT_1 . domain . mapper . model . IDENT_2 . class ) ) ; verify ( IDENT_5 ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_9 . lang . IDENT_10 ) { java . lang . Object IDENT_11 = null ; java . lang . String IDENT_12 = "" ; com . IDENT_1 . service . index . IDENT_13 . IDENT_14 IDENT_15 = IDENT_16 . METHOD_6 ( IDENT_12 ) ; java . util . List < java . lang . String > IDENT_17 = new java . util . ArrayList < java . lang . String > ( ) ; if ( IDENT_15 != null ) { com . IDENT_1 . domain . mapper . model . common . IDENT_18 example = ( ( com . IDENT_1 . domain . mapper . model . common . IDENT_18 ) ( IDENT_5 . METHOD_2 ( ) [ 0 ] ) ) ; java . util . List < com . IDENT_1 . domain . model . type . IDENT_19 > IDENT_20 = IDENT_15 . METHOD_7 ( example ) ; IDENT_17 = new java . util . ArrayList < java . lang . String > ( ) ; for ( com . IDENT_1 . domain . model . type . IDENT_19 item : IDENT_20 ) { IDENT_17 . add ( this . METHOD_8 ( item . getType ( ) , item . getId ( ) ) ) ; } } try { IDENT_11 = IDENT_5 . METHOD_3 ( ) ; if ( ! ( IDENT_17 . isEmpty ( ) ) ) { IDENT_21 . METHOD_9 ( ) . METHOD_10 ( IDENT_17 ) ; } } catch ( java . lang . Throwable e ) { com . IDENT_1 . service . index . impl . IDENT_22 . logger . error ( STRING_0 , e ) ; } return IDENT_11 ; }
org . junit . Assert . assertEquals ( null , result ) 