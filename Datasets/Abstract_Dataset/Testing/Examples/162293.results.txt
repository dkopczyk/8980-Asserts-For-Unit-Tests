METHOD_0 ( ) { METHOD_1 ( IDENT_0 ) ; when ( IDENT_0 . METHOD_2 ( any ( com . IDENT_1 . domain . mapper . model . IDENT_2 . class ) ) ) . thenReturn ( null ) ; when ( IDENT_0 . METHOD_3 ( any ( com . IDENT_1 . domain . mapper . model . IDENT_2 . class ) ) ) . thenReturn ( 1 ) ; com . IDENT_1 . service . IDENT_3 . impl . IDENT_4 IDENT_5 = METHOD_4 ( IDENT_6 ) ; METHOD_5 ( ) . when ( IDENT_5 ) . METHOD_6 ( com . IDENT_1 . service . IDENT_3 . impl . test . IDENT_7 . id ) ; boolean ret = IDENT_5 . METHOD_7 ( IDENT_8 ) ; verify ( IDENT_0 ) . METHOD_3 ( METHOD_8 ( new com . IDENT_1 . test . IDENT_9 . IDENT_10 < com . IDENT_1 . domain . mapper . model . IDENT_2 > ( ) { @ com . IDENT_1 . service . IDENT_3 . impl . test . Override public boolean matches ( com . IDENT_1 . domain . mapper . model . common . IDENT_11 example ) { return ( ( com . IDENT_1 . test . IDENT_9 . IDENT_12 . METHOD_9 ( example , STRING_0 , com . IDENT_1 . service . IDENT_3 . impl . test . IDENT_7 . id ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_12 . METHOD_9 ( example , STRING_1 , com . IDENT_1 . service . IDENT_3 . impl . test . IDENT_7 . IDENT_13 ) ) ) && ( com . IDENT_1 . test . IDENT_9 . IDENT_12 . METHOD_9 ( example , STRING_2 , com . IDENT_1 . service . IDENT_3 . impl . test . IDENT_7 . id ) ) ; } } ) ) ; verify ( IDENT_5 ) . METHOD_6 ( com . IDENT_1 . service . IDENT_3 . impl . test . IDENT_7 . id ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( int ) { IDENT_14 . METHOD_10 ( id ) ; }
org . junit . Assert . assertTrue ( ret ) 