METHOD_0 ( ) { IDENT_0 . IDENT_1 . model . User [ ] IDENT_2 = new IDENT_0 . IDENT_1 . model . User [ 2 ] ; IDENT_2 [ 0 ] = new IDENT_0 . IDENT_1 . model . User ( STRING_0 , INT_0 ) ; IDENT_2 [ 1 ] = new IDENT_0 . IDENT_1 . model . User ( STRING_1 , INT_1 ) ; IDENT_0 . IDENT_1 . model . User IDENT_3 = new IDENT_0 . IDENT_1 . model . User ( STRING_0 , INT_0 ) ; IDENT_0 . IDENT_1 . model . IDENT_4 storage = new IDENT_0 . IDENT_1 . model . METHOD_1 ( IDENT_2 ) ; IDENT_0 . IDENT_1 . control . IDENT_5 [ ] IDENT_6 = new IDENT_0 . IDENT_1 . control . IDENT_5 [ 1 ] ; IDENT_6 [ 0 ] = new IDENT_0 . IDENT_1 . control . METHOD_2 ( ) ; IDENT_3 . setId ( STRING_2 ) ; boolean result = storage . METHOD_3 ( IDENT_6 , IDENT_3 ) ; boolean control = false ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_0 . IDENT_1 . control . IDENT_5 [ ] , IDENT_0 . IDENT_1 . model . User ) { boolean result = METHOD_4 ( IDENT_7 , user ) ; System . out . println ( result ) ; if ( result ) { for ( int index = 0 ; index < ( this . IDENT_2 . length ) ; index ++ ) { if ( this . IDENT_2 [ index ] . getId ( ) . equals ( user . getId ( ) ) ) { this . IDENT_2 [ index ] = null ; break ; } } } return result ; }
org . junit . Assert . assertThat ( control , org . hamcrest . core . Is . is ( result ) ) 