METHOD_0 ( ) { final org . apache . rya . api . function . IDENT_0 . IDENT_1 function = new org . apache . rya . api . function . IDENT_0 . METHOD_1 ( ) ; final org . eclipse . IDENT_2 . model . IDENT_3 [ ] args = new org . eclipse . IDENT_2 . model . IDENT_3 [ 2 ] ; args [ 0 ] = org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_6 . toString ( ) ) ; args [ 1 ] = org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_7 . toString ( ) ) ; final org . eclipse . IDENT_2 . model . IDENT_3 IDENT_8 = function . evaluate ( org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_5 , args ) ; "<AssertPlaceHolder>" ; } evaluate ( org . eclipse . IDENT_2 . model . IDENT_9 , org . eclipse . IDENT_2 . model . IDENT_3 [ ] ) { if ( ( args . length ) != 2 ) { throw new org . eclipse . IDENT_2 . query . IDENT_10 . IDENT_11 . METHOD_3 ( ( ( ( METHOD_4 ( ) ) + STRING_0 ) + ( args . length ) ) ) ; } final java . lang . String [ ] IDENT_12 = args [ 1 ] . METHOD_5 ( ) . split ( "/" ) ; if ( ( IDENT_12 . length ) != 2 ) { throw new org . eclipse . IDENT_2 . query . IDENT_10 . IDENT_11 . METHOD_3 ( ( ( ( ( METHOD_4 ( ) ) + STRING_1 ) + ( args [ 1 ] ) ) + STRING_2 ) ) ; } try { final java . time . IDENT_13 IDENT_14 = java . time . IDENT_13 . parse ( args [ 0 ] . METHOD_5 ( ) ) ; final java . time . IDENT_13 [ ] IDENT_15 = new java . time . IDENT_13 [ ] { java . time . IDENT_13 . parse ( IDENT_12 [ 0 ] ) , java . time . IDENT_13 . parse ( IDENT_12 [ 1 ] ) } ; final boolean result = METHOD_6 ( IDENT_14 , IDENT_15 ) ; return IDENT_16 . METHOD_2 ( result ) ; } catch ( final java . time . format . IDENT_17 e ) { throw new org . eclipse . IDENT_2 . query . IDENT_10 . IDENT_11 . METHOD_3 ( STRING_3 ) ; } }
org . junit . Assert . assertEquals ( org . apache . rya . api . function . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( true ) , IDENT_8 ) 