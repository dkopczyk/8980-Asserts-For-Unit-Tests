METHOD_0 ( ) { java . util . List < org . oscm . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_3 = org . oscm . internal . IDENT_4 . IDENT_5 . METHOD_1 ( ) ; java . util . List < java . lang . Long > list = IDENT_6 . METHOD_0 ( IDENT_3 ) ; java . util . HashSet < java . lang . Long > keys = new java . util . HashSet < java . lang . Long > ( java . util . Arrays . asList ( java . lang . Long . valueOf ( 10 ) , java . lang . Long . valueOf ( INT_0 ) , java . lang . Long . valueOf ( 20 ) , java . lang . Long . valueOf ( INT_1 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . util . List ) { java . util . Set < java . lang . Long > result = new java . util . HashSet ( ) ; if ( list == null ) { return java . util . Collections . emptyList ( ) ; } for ( org . oscm . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 : list ) { for ( org . oscm . IDENT_8 . IDENT_9 IDENT_10 : IDENT_7 . METHOD_2 ( ) ) { result . add ( java . lang . Long . valueOf ( IDENT_10 . getKey ( ) ) ) ; } } return new java . util . ArrayList ( result ) ; }
org . junit . Assert . assertEquals ( new java . util . ArrayList < java . lang . Long > ( keys ) , list ) 