METHOD_0 ( ) { java . util . List < java . lang . String > data = java . util . Arrays . asList ( "a" , "b" , STRING_0 ) ; IDENT_0 . IDENT_1 . IDENT_2 . core . client . io . IDENT_3 < java . lang . String > source = IDENT_0 . IDENT_1 . IDENT_2 . core . client . io . IDENT_3 . METHOD_1 ( data ) ; IDENT_0 . IDENT_1 . IDENT_2 . core . client . dataset . IDENT_4 < java . lang . String > input = flow . METHOD_2 ( source ) ; IDENT_0 . IDENT_1 . IDENT_2 . core . client . IDENT_5 . IDENT_6 . of ( input ) . METHOD_3 ( IDENT_7 :: put ) . output ( ) . METHOD_4 ( IDENT_8 ) ; new IDENT_0 . IDENT_1 . IDENT_2 . executor . IDENT_9 . METHOD_5 ( ) . METHOD_6 ( flow ) . join ( ) ; for ( java . lang . String v : data ) { "<AssertPlaceHolder>" ; } } b ( java . lang . String ) { return str . getBytes ( IDENT_10 . IDENT_11 ) ; }
org . junit . Assert . assertArrayEquals ( b ( v ) , get ( v ) ) 