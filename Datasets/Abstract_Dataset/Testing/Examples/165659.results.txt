METHOD_0 ( ) { for ( java . util . Map . Entry < org . apache . shardingsphere . core . IDENT_0 . IDENT_1 , java . sql . ResultSet > IDENT_2 : IDENT_3 . entrySet ( ) ) { if ( ( org . apache . shardingsphere . core . IDENT_0 . IDENT_1 . IDENT_4 ) == ( IDENT_2 . getKey ( ) ) ) { continue ; } byte [ ] b = new byte [ 1 ] ; if ( ( ( org . apache . shardingsphere . core . IDENT_0 . IDENT_1 . IDENT_5 ) == ( IDENT_2 . getKey ( ) ) ) || ( ( org . apache . shardingsphere . core . IDENT_0 . IDENT_1 . IDENT_6 ) == ( IDENT_2 . getKey ( ) ) ) ) { try { IDENT_2 . getValue ( ) . METHOD_1 ( 1 ) . read ( b ) ; } catch ( final java . lang . Exception IDENT_7 ) { } } else { IDENT_2 . getValue ( ) . METHOD_1 ( 1 ) . read ( b ) ; "<AssertPlaceHolder>" ; } } } read ( org . apache . shardingsphere . IDENT_8 . transport . IDENT_9 . payload . IDENT_10 ) { return payload . METHOD_2 ( ) ; }
org . junit . Assert . assertThat ( new java . lang . String ( b ) , org . hamcrest . CoreMatchers . is ( "1" ) ) 