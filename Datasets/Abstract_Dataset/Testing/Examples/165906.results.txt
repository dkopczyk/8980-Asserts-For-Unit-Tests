test ( ) { "<AssertPlaceHolder>" ; } METHOD_0 ( ) { MOD_0 ( io . IDENT_0 . plugin . IDENT_1 . class ) { if ( io . IDENT_0 . plugin . IDENT_1 . IDENT_2 ) { return true ; } io . IDENT_0 . plugin . IDENT_1 . IDENT_2 = true ; boolean IDENT_3 = false ; for ( java . lang . String IDENT_4 : io . IDENT_0 . plugin . IDENT_1 . IDENT_5 ) { java . lang . Class < ? > IDENT_6 = java . lang . Class . METHOD_1 ( IDENT_4 ) ; java . lang . reflect . Method [ ] methods = IDENT_6 . METHOD_2 ( ) ; for ( java . lang . reflect . Method m : methods ) { int IDENT_7 = m . METHOD_3 ( ) ; if ( ( ! ( java . lang . reflect . IDENT_8 . METHOD_4 ( IDENT_7 ) ) ) && ( ( m . METHOD_5 ( ) ) > 0 ) ) { continue ; } boolean IDENT_9 = false ; for ( java . lang . annotation . IDENT_10 IDENT_11 : m . METHOD_6 ( ) ) { if ( IDENT_11 instanceof io . IDENT_0 . plugin . IDENT_12 ) { IDENT_9 = true ; break ; } } if ( IDENT_9 ) { try { io . IDENT_0 . plugin . IDENT_1 . logger . info ( STRING_0 , IDENT_4 , m . getName ( ) ) ; m . invoke ( null ) ; IDENT_3 = true ; io . IDENT_0 . plugin . IDENT_1 . logger . info ( STRING_1 , IDENT_4 , m . getName ( ) ) ; } catch ( java . lang . Exception e ) { io . IDENT_0 . plugin . IDENT_1 . logger . error ( STRING_2 , IDENT_4 , m . getName ( ) , e ) ; } } } } return IDENT_3 ; } }
org . junit . Assert . assertTrue ( io . IDENT_0 . plugin . IDENT_1 . METHOD_0 ( ) ) 