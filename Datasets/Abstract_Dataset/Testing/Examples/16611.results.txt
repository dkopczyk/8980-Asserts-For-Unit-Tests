METHOD_0 ( ) { try ( final org . apache . rya . indexing . IDENT_0 . storage . IDENT_1 IDENT_2 = new org . apache . rya . indexing . IDENT_0 . storage . IDENT_3 . METHOD_1 ( METHOD_2 ( ) , conf . METHOD_3 ( ) ) ) { final org . apache . rya . mongodb . instance . IDENT_4 IDENT_5 = new org . apache . rya . mongodb . instance . METHOD_4 ( METHOD_2 ( ) , conf . METHOD_3 ( ) ) ; IDENT_5 . METHOD_5 ( org . apache . rya . api . instance . IDENT_6 . builder ( ) . METHOD_6 ( conf . METHOD_3 ( ) ) . METHOD_7 ( "test" ) . METHOD_8 ( new org . apache . rya . api . instance . IDENT_6 . METHOD_9 ( false ) ) . METHOD_10 ( new org . apache . rya . api . instance . IDENT_6 . METHOD_11 ( false ) ) . METHOD_12 ( new org . apache . rya . api . instance . IDENT_6 . METHOD_13 ( false ) ) . METHOD_14 ( new org . apache . rya . api . instance . IDENT_6 . METHOD_15 ( com . google . common . base . Optional . METHOD_16 ( ) ) ) . METHOD_17 ( new org . apache . rya . api . instance . IDENT_6 . METHOD_18 ( com . google . common . base . Optional . METHOD_16 ( ) ) ) . METHOD_19 ( org . apache . rya . api . instance . IDENT_6 . IDENT_7 . builder ( ) . METHOD_20 ( true ) ) . build ( ) ) ; final java . lang . String IDENT_8 = IDENT_2 . METHOD_21 ( STRING_0 ) ; IDENT_2 . METHOD_22 ( IDENT_8 ) ; final com . google . common . collect . ImmutableMap < java . lang . String , org . apache . rya . api . instance . IDENT_6 . IDENT_7 . IDENT_9 > IDENT_10 = IDENT_5 . METHOD_23 ( ) . METHOD_24 ( ) . METHOD_25 ( ) ; "<AssertPlaceHolder>" ; } } containsKey ( org . apache . accumulo . core . data . IDENT_11 ) { java . util . Set < org . eclipse . IDENT_12 . query . IDENT_13 > IDENT_14 = new java . util . HashSet ( ) ; for ( org . apache . accumulo . core . data . IDENT_15 range : IDENT_16 . METHOD_26 ( ) ) { if ( ( range . contains ( key ) ) && ( METHOD_27 ( key . METHOD_28 ( ) , range . METHOD_29 ( ) . METHOD_28 ( ) , range . METHOD_30 ( ) . METHOD_28 ( ) ) ) ) { IDENT_14 . addAll ( IDENT_16 . get ( range ) ) ; } } return IDENT_14 ; }
org . junit . Assert . assertFalse ( IDENT_10 . containsKey ( IDENT_8 ) ) 