METHOD_0 ( ) { org . IDENT_0 . core . IDENT_1 . IDENT_2 . model . IDENT_3 document = new org . IDENT_0 . core . IDENT_1 . IDENT_2 . model . METHOD_1 ( new org . IDENT_0 . core . IDENT_1 . IDENT_2 . model . METHOD_2 ( IDENT_4 , IDENT_5 ) , STRING_0 , 10 , false , new org . IDENT_0 . core . IDENT_1 . IDENT_2 . model . METHOD_3 ( STRING_1 , STRING_2 , STRING_3 2 , STRING_3 3 , INT_0 , org . IDENT_0 . util . IDENT_6 . IDENT_7 , IDENT_8 , IDENT_9 , null ) ) ; org . IDENT_0 . core . IDENT_1 . IDENT_2 . IDENT_10 service = mock ( org . IDENT_0 . core . IDENT_1 . IDENT_2 . IDENT_10 . class ) ; when ( service . METHOD_4 ( eq ( new org . IDENT_0 . core . IDENT_1 . IDENT_2 . model . METHOD_2 ( IDENT_4 ) ) , anyString ( ) ) ) . thenReturn ( document ) ; METHOD_5 ( ) . METHOD_6 ( service ) ; com . sun . jersey . IDENT_11 . IDENT_12 IDENT_13 = new com . sun . jersey . IDENT_11 . METHOD_7 ( ) ; IDENT_13 . field ( STRING_3 , STRING_4 ) ; IDENT_13 . field ( STRING_3 0 , STRING_3 1 ) ; IDENT_13 . field ( STRING_5 , STRING_6 ) ; IDENT_13 . field ( STRING_7 , STRING_8 ) ; com . sun . jersey . api . client . IDENT_14 IDENT_15 = resource ( ) ; try { IDENT_15 . path ( ( ( ( IDENT_16 ) + ( IDENT_4 ) ) + STRING_9 ) ) . header ( org . IDENT_0 . core . IDENT_1 . IDENT_2 . web . IDENT_17 , METHOD_8 ( ) ) . accept ( javax . ws . rs . core . IDENT_18 . IDENT_19 ) . type ( javax . ws . rs . core . IDENT_18 . IDENT_20 ) . METHOD_9 ( org . IDENT_0 . core . IDENT_1 . IDENT_2 . web . IDENT_21 . class , IDENT_13 ) ; } catch ( final com . sun . jersey . api . client . IDENT_22 ex ) { final int IDENT_23 = ex . METHOD_10 ( ) . getStatus ( ) ; final int IDENT_24 = Status . IDENT_25 . getStatusCode ( ) ; "<AssertPlaceHolder>" ; } } is ( T ) { return java . util . IDENT_26 . equals ( this . value , value ) ; }
org . junit . Assert . assertThat ( IDENT_23 , org . hamcrest . Matchers . is ( IDENT_24 ) ) 