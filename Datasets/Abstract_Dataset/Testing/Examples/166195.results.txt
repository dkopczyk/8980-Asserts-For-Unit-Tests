METHOD_0 ( ) { IDENT_0 . IDENT_1 . io . IDENT_2 IDENT_3 = IDENT_0 . IDENT_1 . io . IDENT_2 . METHOD_1 ( ) ; java . nio . file . Path file = IDENT_4 . METHOD_2 ( ) ; try ( java . io . IDENT_5 IDENT_6 = java . nio . file . IDENT_7 . METHOD_3 ( file ) ) { IDENT_3 . write ( IDENT_6 ) ; } try ( java . io . InputStream is = java . nio . file . IDENT_7 . METHOD_4 ( file ) ) { IDENT_0 . IDENT_1 . io . IDENT_2 IDENT_8 = IDENT_0 . IDENT_1 . io . IDENT_9 . read ( is , IDENT_0 . IDENT_1 . io . IDENT_2 . class ) ; "<AssertPlaceHolder>" ; } } read ( IDENT_0 . IDENT_1 . io . InputStream , java . lang . Class ) { try ( IDENT_0 . IDENT_1 . io . IDENT_10 reader = new IDENT_0 . IDENT_1 . io . METHOD_5 ( is , java . nio . IDENT_11 . IDENT_12 . UTF_8 ) ) { return IDENT_0 . IDENT_1 . io . IDENT_9 . gson . METHOD_6 ( reader , IDENT_13 ) ; } catch ( java . lang . IllegalArgumentException | java . lang . IllegalStateException e ) { throw new IDENT_0 . IDENT_1 . io . METHOD_7 ( STRING_0 , e ) ; } }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_8 ) 