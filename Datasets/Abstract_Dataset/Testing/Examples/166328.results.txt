METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 options = new IDENT_0 . IDENT_1 . METHOD_1 ( ) ; options . METHOD_2 ( ) . METHOD_3 ( ) . add ( new IDENT_0 . filter . METHOD_4 ( STRING_0 ) ) ; IDENT_0 . IDENT_1 . IDENT_3 IDENT_4 = new IDENT_0 . IDENT_1 . METHOD_5 ( options ) ; final java . util . List < IDENT_0 . model . IDENT_5 > IDENT_6 = IDENT_4 . compare ( METHOD_6 ( STRING_1 ) , METHOD_6 ( STRING_2 ) ) ; boolean IDENT_7 = false ; try { METHOD_7 ( IDENT_6 , IDENT_0 . test . annotation . filter . IDENT_8 . class . getName ( ) ) ; } catch ( java . lang . IllegalArgumentException e ) { IDENT_7 = true ; } "<AssertPlaceHolder>" ; } getName ( ) { return name ; }
org . junit . Assert . assertThat ( IDENT_7 , org . hamcrest . CoreMatchers . is ( true ) ) 