METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 + ( ( ( ( ( STRING_1 + STRING_2 ) + STRING_3 ) + STRING_4 ) + STRING_5 ) + STRING_6 ) ; final org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . IDENT_3 expected = new org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . METHOD_1 ( ( STRING_2 + ( ( ( STRING_3 + STRING_4 ) + STRING_5 ) + STRING_6 ) ) , com . google . common . collect . IDENT_4 . METHOD_2 ( new org . apache . rya . indexing . IDENT_1 . storage . accumulo . METHOD_3 ( "a" , "b" , STRING_7 ) , new org . apache . rya . indexing . IDENT_1 . storage . accumulo . METHOD_3 ( "b" , STRING_7 , "a" ) ) ) ; final org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . METHOD_1 request = org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . METHOD_1 . parse ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { METHOD_4 ( IDENT_0 ) ; int IDENT_5 = 0 ; final java . util . Set < org . apache . rya . indexing . IDENT_1 . storage . accumulo . METHOD_3 > IDENT_6 = new java . util . HashSet ( ) ; final java . util . regex . IDENT_7 matcher = org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . METHOD_1 . IDENT_8 . matcher ( IDENT_0 ) ; while ( matcher . find ( ) ) { final java . lang . String IDENT_9 = matcher . group ( 1 ) ; IDENT_6 . add ( new org . apache . rya . indexing . IDENT_1 . storage . accumulo . METHOD_3 ( IDENT_9 . split ( STRING_8 ) ) ) ; IDENT_5 = matcher . end ( ) ; } final java . lang . String IDENT_10 = IDENT_0 . substring ( IDENT_5 ) . trim ( ) ; return new org . apache . rya . indexing . IDENT_1 . IDENT_2 . client . util . METHOD_1 ( IDENT_10 , IDENT_6 ) ; }
org . junit . Assert . assertEquals ( expected , request ) 