METHOD_0 ( ) { try { org . IDENT_0 . test . junit . IDENT_1 . METHOD_1 ( IDENT_2 . IDENT_3 ) ; java . lang . String file = STRING_0 ; org . IDENT_0 . test . junit . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_6 . METHOD_2 ( file ) ; org . IDENT_0 . test . junit . IDENT_7 IDENT_8 = new org . IDENT_0 . IDENT_9 . METHOD_3 ( java . util . Collections . METHOD_4 ( IDENT_5 ) ) ; IDENT_8 . init ( ) ; IDENT_10 = IDENT_8 . METHOD_5 ( ) ; org . IDENT_0 . IDENT_11 . IDENT_12 op = new org . IDENT_0 . IDENT_11 . METHOD_6 ( ) ; op . METHOD_7 ( IDENT_8 ) ; op . METHOD_8 ( true ) ; op . METHOD_9 ( true ) ; op . METHOD_10 ( IDENT_8 . METHOD_11 ( ) ) ; op . METHOD_12 ( IDENT_8 . METHOD_13 ( ) ) ; op . METHOD_14 ( IDENT_8 . METHOD_15 ( ) ) ; op . init ( ) ; org . IDENT_0 . test . junit . IDENT_13 IDENT_14 = org . IDENT_0 . parser . IDENT_15 . METHOD_16 ( uri ( STRING_1 ) ) ; java . util . Set < org . IDENT_0 . test . junit . IDENT_13 > results = op . METHOD_17 ( IDENT_14 , 5 , null ) ; for ( org . IDENT_0 . test . junit . IDENT_13 result : results ) { System . out . println ( result ) ; } int IDENT_16 = INT_0 ; if ( ( results . size ( ) ) != IDENT_16 ) { System . out . println ( ( ( ( ( results . size ( ) ) + STRING_2 ) + IDENT_16 ) + STRING_3 ) ) ; } "<AssertPlaceHolder>" ; } catch ( org . IDENT_0 . test . junit . IDENT_17 | org . IDENT_0 . parser . IDENT_18 e ) { e . printStackTrace ( ) ; } } size ( ) { return IDENT_19 . length ; }
org . junit . Assert . assertTrue ( ( ( results . size ( ) ) == IDENT_16 ) ) 