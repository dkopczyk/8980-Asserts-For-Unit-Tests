METHOD_0 ( ) { org . apache . jena . query . IDENT_0 IDENT_1 = org . apache . jena . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 ) ; org . apache . jena . IDENT_4 . IDENT_5 IDENT_6 = org . apache . jena . IDENT_4 . IDENT_7 . connect ( IDENT_1 ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . api . IDENT_11 IDENT_12 = new org . IDENT_8 . IDENT_9 . IDENT_10 . impl . IDENT_13 . METHOD_2 ( ) ; org . apache . jena . IDENT_14 . model . IDENT_15 IDENT_16 = IDENT_12 . METHOD_3 ( IDENT_6 ) . METHOD_4 ( ) ; org . apache . jena . IDENT_2 . IDENT_3 . write ( System . out , IDENT_16 , IDENT_17 . IDENT_18 ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . api . IDENT_19 IDENT_20 = IDENT_12 . METHOD_5 ( ) . METHOD_6 ( IDENT_16 ) . METHOD_7 ( IDENT_6 ) . METHOD_8 ( false ) . build ( ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . api . IDENT_21 < org . IDENT_8 . IDENT_9 . util . IDENT_22 . IDENT_23 . path . IDENT_24 > IDENT_25 = IDENT_20 . METHOD_9 ( org . IDENT_8 . IDENT_9 . IDENT_26 . IDENT_27 . parse ( STRING_1 , IDENT_28 . IDENT_29 ) , org . IDENT_8 . IDENT_9 . IDENT_26 . IDENT_27 . parse ( STRING_2 , IDENT_28 . IDENT_29 ) ) ; java . util . List < org . IDENT_8 . IDENT_9 . util . IDENT_22 . IDENT_23 . path . IDENT_24 > actual = IDENT_25 . METHOD_10 ( 3 ) . exec ( ) . toList ( ) . METHOD_4 ( ) ; java . util . List < org . IDENT_8 . IDENT_9 . util . IDENT_22 . IDENT_23 . path . IDENT_24 > expected = java . util . Arrays . asList ( org . IDENT_8 . IDENT_9 . util . IDENT_22 . IDENT_23 . path . IDENT_24 . METHOD_11 ( org . apache . jena . IDENT_22 . path . IDENT_30 . parse ( STRING_3 , IDENT_28 . IDENT_29 ) ) ) ; "<AssertPlaceHolder>" ; } parse ( IDENT_31 . IDENT_32 , org . apache . commons . IDENT_33 . IDENT_34 ) { org . apache . commons . IDENT_33 . IDENT_34 IDENT_35 = null ; if ( options . METHOD_12 ( IDENT_36 ) ) { java . lang . String IDENT_37 = IDENT_36 . value ( options ) ; IDENT_37 = ( IDENT_37 == null ) ? "" : IDENT_37 . trim ( ) . toLowerCase ( ) ; if ( ! ( IDENT_37 . isEmpty ( ) ) ) { java . lang . String IDENT_38 = IDENT_39 . get ( IDENT_37 ) ; if ( IDENT_38 != null ) { IDENT_35 = org . apache . commons . IDENT_33 . IDENT_34 . valueOf ( IDENT_38 ) ; } else { throw new java . lang . RuntimeException ( ( ( ( STRING_4 + IDENT_38 ) + STRING_5 ) + ( IDENT_39 . values ( ) ) ) ) ; } } } if ( IDENT_35 == null ) { IDENT_35 = IDENT_40 ; } if ( IDENT_35 == null ) { IDENT_35 = org . apache . commons . IDENT_33 . IDENT_34 . IDENT_41 ; } if ( IDENT_35 == null ) { IDENT_35 = IDENT_42 ; } IDENT_35 = IDENT_35 . METHOD_13 ( IDENT_43 . value ( options ) ) . METHOD_14 ( IDENT_44 . value ( options ) ) . METHOD_15 ( IDENT_45 . value ( options ) ) ; return IDENT_35 ; }
org . junit . Assert . assertEquals ( expected , actual ) 