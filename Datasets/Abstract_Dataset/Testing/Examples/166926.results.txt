METHOD_0 ( ) { IDENT_0 = new eu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_4 , eu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 ) ; IDENT_0 . run ( ) ; org . mockito . IDENT_7 < eu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 > IDENT_9 = org . mockito . IDENT_7 . METHOD_2 ( eu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 . class ) ; verify ( IDENT_4 , times ( 1 ) ) . METHOD_3 ( any ( eu . IDENT_1 . IDENT_2 . IDENT_3 . Integer . class ) , IDENT_9 . METHOD_4 ( ) ) ; boolean IDENT_10 = true ; for ( eu . IDENT_1 . IDENT_2 . db . dto . IDENT_11 IDENT_12 : IDENT_9 . getValue ( ) . METHOD_5 ( ) ) { if ( ( IDENT_9 . getValue ( ) . METHOD_6 ( ) . get ( IDENT_12 ) ) != ( - 1 ) ) { IDENT_10 = false ; break ; } } for ( eu . IDENT_1 . IDENT_2 . db . dto . IDENT_13 IDENT_14 : IDENT_9 . getValue ( ) . METHOD_7 ( ) ) { if ( ( IDENT_9 . getValue ( ) . METHOD_8 ( ) . get ( IDENT_14 ) ) != ( - 1 ) ) { IDENT_10 = false ; break ; } } "<AssertPlaceHolder>" ; } get ( java . lang . String ) { return ( ( IDENT_15 ) ( msg . METHOD_9 ( ) . get ( ( ( ( IDENT_16 ) + STRING_0 ) + key ) ) ) ) ; }
org . junit . Assert . assertTrue ( IDENT_10 ) 