METHOD_0 ( ) { byte [ ] expected = new byte [ ] { INT_0 , 0 , 0 , 20 , INT_1 , INT_2 , 0 , 0 , INT_3 , 6 , INT_4 , INT_5 , ( ( byte ) ( INT_6 ) ) , INT_7 , INT_8 , ( ( byte ) ( INT_9 ) ) , ( ( byte ) ( INT_10 ) ) , INT_11 , INT_8 , INT_12 } ; net . IDENT_0 . packet . IDENT_1 packet = new net . IDENT_0 . packet . METHOD_1 ( ) . METHOD_2 ( ( ( short ) ( INT_13 ) ) ) . METHOD_3 ( ( ( byte ) ( INT_3 ) ) ) . METHOD_4 ( ( ( byte ) ( 6 ) ) ) . METHOD_5 ( STRING_0 ) . METHOD_6 ( STRING_1 ) ; byte [ ] actual = packet . serialize ( ) ; "<AssertPlaceHolder>" ; } serialize ( ) { int length = 4 ; byte [ ] IDENT_2 = null ; if ( ( payload ) != null ) { payload . METHOD_7 ( this ) ; IDENT_2 = payload . serialize ( ) ; length += IDENT_2 . length ; } byte [ ] data = new byte [ length ] ; java . nio . ByteBuffer IDENT_3 = java . nio . ByteBuffer . METHOD_8 ( data ) ; IDENT_3 . put ( this . IDENT_4 ) ; IDENT_3 . put ( this . IDENT_5 ) ; IDENT_3 . METHOD_9 ( this . IDENT_6 ) ; if ( IDENT_2 != null ) IDENT_3 . put ( IDENT_2 ) ; if ( ( ( this . parent ) != null ) && ( ( this . parent ) instanceof net . IDENT_0 . packet . METHOD_1 ) ) ( ( net . IDENT_0 . packet . METHOD_1 ) ( this . parent ) ) . METHOD_4 ( METHOD_1 . IDENT_7 ) ; if ( ( this . IDENT_6 ) == 0 ) { IDENT_3 . METHOD_10 ( ) ; int IDENT_8 = 0 ; for ( int i = 0 ; i < ( length / 2 ) ; ++ i ) { IDENT_8 += INT_14 & ( IDENT_3 . METHOD_11 ( ) ) ; } if ( ( length OP_0 2 ) > 0 ) { IDENT_8 += ( ( IDENT_3 . get ( ) ) & 255 ) << 8 ; } IDENT_8 = ( ( IDENT_8 > > 16 ) & INT_14 ) + ( IDENT_8 & INT_14 ) ; this . IDENT_6 = ( ( short ) ( ( OP_1 IDENT_8 ) & INT_14 ) ) ; IDENT_3 . METHOD_9 ( 2 , this . IDENT_6 ) ; } return data ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( expected , actual ) ) 