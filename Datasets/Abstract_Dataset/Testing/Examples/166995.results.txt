METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . io . InputStream is = mock ( java . io . InputStream . class ) ; try { IDENT_1 . rest . IDENT_2 . fixture . support . IDENT_3 . METHOD_1 ( is , IDENT_0 ) ; } catch ( java . lang . IllegalArgumentException e ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( IDENT_1 . rest . IDENT_2 . fixture . support . InputStream , java . lang . String ) { java . lang . String line = null ; if ( is == null ) { return "" ; } IDENT_1 . rest . IDENT_2 . fixture . support . IDENT_4 in = null ; try { in = new IDENT_1 . rest . IDENT_2 . fixture . support . METHOD_2 ( new IDENT_1 . rest . IDENT_2 . fixture . support . METHOD_3 ( is , IDENT_0 ) ) ; } catch ( IDENT_1 . rest . IDENT_2 . fixture . support . IDENT_5 e ) { throw new java . lang . IllegalArgumentException ( ( STRING_1 + IDENT_0 ) , e ) ; } java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; try { while ( ( line = in . METHOD_4 ( ) ) != null ) { sb . append ( line ) ; } } catch ( IDENT_1 . rest . IDENT_2 . fixture . support . IOException e ) { throw new java . lang . IllegalArgumentException ( STRING_2 , e ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( ( STRING_1 + IDENT_0 ) , e . getMessage ( ) ) 