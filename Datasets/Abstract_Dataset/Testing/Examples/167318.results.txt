METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_0 . IDENT_1 . METHOD_1 ( java . util . Arrays . asList ( new org . IDENT_0 . IDENT_1 . METHOD_2 ( 3 , 3 ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( 3 , 3 ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( 3 , 3 ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( 3 , 3 ) ) , java . util . Arrays . asList ( new org . IDENT_0 . IDENT_1 . METHOD_2 ( new float [ ] [ ] { new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } } ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( new float [ ] [ ] { new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_1 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } } ) , new org . IDENT_0 . IDENT_1 . METHOD_2 ( new float [ ] [ ] { new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } , new float [ ] { FLOAT_0 , FLOAT_0 , FLOAT_0 } } ) ) ) ; org . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . METHOD_3 ( java . util . Arrays . asList ( IDENT_3 ) ) ; java . util . List < org . IDENT_0 . IDENT_1 . IDENT_6 > expected = new java . util . ArrayList < org . IDENT_0 . IDENT_1 . IDENT_6 > ( ) ; java . util . Collection < org . IDENT_0 . IDENT_1 . IDENT_6 > actual = target . METHOD_4 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . IDENT_0 . IDENT_1 . METHOD_3 ) { if ( IDENT_5 == null ) { throw new java . lang . METHOD_5 ( STRING_0 ) ; } java . util . List < org . IDENT_0 . IDENT_1 . IDENT_6 > IDENT_7 = new java . util . ArrayList < org . IDENT_0 . IDENT_1 . IDENT_6 > ( ) ; for ( org . IDENT_0 . IDENT_1 . METHOD_1 IDENT_3 : IDENT_5 . METHOD_6 ( ) ) { int IDENT_8 = IDENT_3 . METHOD_7 ( ) . size ( ) ; for ( int i = 1 ; i < ( IDENT_8 - 1 ) ; i ++ ) { java . util . Collection < org . IDENT_0 . IDENT_1 . IDENT_6 > IDENT_9 = METHOD_4 ( IDENT_3 . METHOD_7 ( ) . get ( ( i - 1 ) ) , IDENT_3 . METHOD_7 ( ) . get ( i ) , IDENT_3 . METHOD_7 ( ) . get ( ( i + 1 ) ) ) ; IDENT_7 . addAll ( IDENT_9 ) ; } } return IDENT_7 ; }
org . junit . Assert . assertEquals ( expected , actual ) 