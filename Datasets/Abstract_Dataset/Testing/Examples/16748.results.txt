METHOD_0 ( ) { final org . apache . rya . streams . api . IDENT_0 IDENT_1 = mock ( org . apache . rya . streams . api . IDENT_0 . class ) ; final org . apache . rya . streams . api . IDENT_2 . IDENT_3 METHOD_0 = mock ( org . apache . rya . streams . api . IDENT_2 . IDENT_3 . class ) ; when ( IDENT_1 . METHOD_1 ( ) ) . thenReturn ( METHOD_0 ) ; final org . apache . rya . streams . api . IDENT_2 . IDENT_4 IDENT_5 = mock ( org . apache . rya . streams . api . IDENT_2 . IDENT_4 . class ) ; when ( IDENT_1 . METHOD_2 ( ) ) . thenReturn ( IDENT_5 ) ; final org . apache . rya . shell . IDENT_6 state = new org . apache . rya . shell . METHOD_3 ( ) ; state . METHOD_4 ( mock ( org . apache . rya . api . client . accumulo . IDENT_7 . class ) , mock ( org . apache . rya . api . client . IDENT_8 . class ) ) ; state . METHOD_5 ( STRING_0 ) ; state . METHOD_6 ( IDENT_1 ) ; final java . util . UUID IDENT_9 = java . util . UUID . METHOD_7 ( ) ; when ( IDENT_5 . METHOD_8 ( eq ( IDENT_9 ) ) ) . thenReturn ( java . util . Optional . of ( new org . apache . rya . streams . api . entity . METHOD_9 ( IDENT_9 , STRING_1 , false , false ) ) ) ; final org . apache . rya . shell . IDENT_10 commands = new org . apache . rya . shell . METHOD_10 ( state , mock ( org . apache . rya . shell . util . IDENT_11 . class ) , mock ( org . apache . rya . shell . util . IDENT_12 . class ) ) ; final java . lang . String message = commands . METHOD_0 ( IDENT_9 . toString ( ) ) ; verify ( METHOD_0 ) . start ( IDENT_9 ) ; final java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } start ( java . util . Map ) { METHOD_11 ( props ) ; this . config = new org . apache . rya . kafka . connect . accumulo . METHOD_12 ( props ) ; }
org . junit . Assert . assertEquals ( expected , message ) 