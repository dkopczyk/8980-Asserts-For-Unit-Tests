METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = io . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_0 ) ; io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_4 = io . IDENT_0 . IDENT_1 . IDENT_2 . parse ( STRING_1 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { if ( s . equals ( STRING_2 ) ) { return new io . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; } int index = s . indexOf ( STRING_3 ) ; if ( index >= 0 ) { java . lang . String address = s . substring ( 0 , index ) ; try { int IDENT_5 = java . lang . Integer . METHOD_2 ( s . substring ( ( index + 1 ) ) ) ; java . net . IDENT_6 IDENT_7 = io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_3 ( address ) ; if ( IDENT_7 instanceof java . net . IDENT_8 ) { return io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_4 ( ( ( java . net . IDENT_8 ) ( IDENT_7 ) ) , IDENT_5 ) ; } else { return io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_4 ( ( ( java . net . IDENT_9 ) ( IDENT_7 ) ) , IDENT_5 ) ; } } catch ( java . lang . IDENT_10 e ) { throw new io . IDENT_0 . exception . METHOD_5 ( io . IDENT_0 . IDENT_1 . METHOD_1 . class , STRING_4 , e ) ; } } index = s . indexOf ( STRING_5 ) ; if ( index >= 0 ) { java . net . IDENT_6 IDENT_11 = io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_3 ( s . substring ( 0 , index ) ) ; java . net . IDENT_6 IDENT_12 = io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_3 ( s . substring ( ( index + 1 ) ) ) ; if ( ( IDENT_11 instanceof java . net . IDENT_8 ) && ( IDENT_12 instanceof java . net . IDENT_8 ) ) { return io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_6 ( ( ( java . net . IDENT_8 ) ( IDENT_11 ) ) , ( ( java . net . IDENT_8 ) ( IDENT_12 ) ) ) ; } else if ( ( IDENT_11 instanceof java . net . IDENT_9 ) && ( IDENT_12 instanceof java . net . IDENT_9 ) ) { return io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_6 ( ( ( java . net . IDENT_9 ) ( IDENT_11 ) ) , ( ( java . net . IDENT_9 ) ( IDENT_12 ) ) ) ; } else { throw io . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_13 ; } } return io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_7 ( io . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_3 ( s ) ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_4 ) 