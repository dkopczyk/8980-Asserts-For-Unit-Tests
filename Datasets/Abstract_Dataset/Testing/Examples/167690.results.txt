METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = io . IDENT_0 . IDENT_1 . IDENT_2 . create ( io . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 ) . METHOD_1 ( new int [ ] { 5 , 15 , INT_0 } ) ; IDENT_3 . METHOD_2 ( ( - 10 ) ) ; java . util . List < java . lang . String > expected = asList ( STRING_0 , STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( ( IDENT_6 ) == null ) { return null ; } if ( ! ( METHOD_4 ( ) ) ) { return null ; } int IDENT_7 = METHOD_5 ( ) ; int IDENT_8 = METHOD_6 ( ) ; java . lang . String [ ] IDENT_9 = new java . lang . String [ ( IDENT_8 - IDENT_7 ) + 1 ] ; java . lang . String [ ] IDENT_10 = io . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_7 ( IDENT_6 , IDENT_7 , ( IDENT_8 - 1 ) ) ; long [ ] values = java . util . Arrays . METHOD_8 ( IDENT_11 , IDENT_7 , ( IDENT_8 + 1 ) ) ; int IDENT_12 = 0 ; for ( long value : IDENT_11 ) { java . lang . String IDENT_13 = java . lang . Long . toString ( value ) ; if ( ( IDENT_13 . length ( ) ) > IDENT_12 ) { IDENT_12 = IDENT_13 . length ( ) ; } } java . lang . String pattern = ( STRING_2 + IDENT_12 ) + STRING_3 ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { IDENT_9 [ i ] = ( IDENT_10 [ i ] ) + ( java . lang . String . format ( pattern , values [ i ] ) ) ; } return asList ( IDENT_9 ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_3 . METHOD_3 ( ) ) 