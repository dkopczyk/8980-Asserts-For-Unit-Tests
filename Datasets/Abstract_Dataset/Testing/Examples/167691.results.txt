METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = io . IDENT_0 . IDENT_1 . IDENT_2 . create ( io . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 ) . METHOD_1 ( new int [ ] { 5 , 10 , 15 } ) ; io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_6 = io . IDENT_0 . IDENT_1 . IDENT_2 . create ( io . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 ) . METHOD_1 ( new int [ ] { 5 , 10 , 15 } ) ; IDENT_3 . METHOD_2 ( 2 ) ; IDENT_3 . METHOD_2 ( 4 ) ; IDENT_6 . METHOD_2 ( 1 ) ; IDENT_3 . METHOD_2 ( 8 ) ; IDENT_6 . METHOD_2 ( INT_0 ) ; IDENT_3 . METHOD_3 ( 1L ) ; IDENT_6 . METHOD_3 ( 1L ) ; io . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 = io . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_4 ( ) ; IDENT_7 . add ( IDENT_3 ) ; IDENT_7 . add ( IDENT_6 ) ; java . util . List < java . lang . String > expected = asList ( STRING_0 , STRING_1 , STRING_2 , STRING_3 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { if ( ( IDENT_8 ) == null ) { return null ; } if ( ! ( METHOD_6 ( ) ) ) { return null ; } int IDENT_9 = METHOD_7 ( ) ; int IDENT_10 = METHOD_8 ( ) ; java . lang . String [ ] IDENT_11 = new java . lang . String [ ( IDENT_10 - IDENT_9 ) + 1 ] ; java . lang . String [ ] IDENT_12 = io . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_9 ( IDENT_8 , IDENT_9 , ( IDENT_10 - 1 ) ) ; long [ ] values = java . util . Arrays . METHOD_10 ( IDENT_13 , IDENT_9 , ( IDENT_10 + 1 ) ) ; int IDENT_14 = 0 ; for ( long value : IDENT_13 ) { java . lang . String IDENT_15 = java . lang . Long . toString ( value ) ; if ( ( IDENT_15 . length ( ) ) > IDENT_14 ) { IDENT_14 = IDENT_15 . length ( ) ; } } java . lang . String pattern = ( STRING_4 + IDENT_14 ) + STRING_5 ; for ( int i = 0 ; i < ( values . length ) ; i ++ ) { IDENT_11 [ i ] = ( IDENT_12 [ i ] ) + ( java . lang . String . format ( pattern , values [ i ] ) ) ; } return asList ( IDENT_11 ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_7 . METHOD_5 ( ) ) 