METHOD_0 ( ) { com . IDENT_0 . entity . IDENT_1 entity = new com . IDENT_0 . entity . METHOD_1 ( ) ; entity . IDENT_2 = IDENT_3 ; IDENT_4 . create ( entity ) . now ( ) ; com . IDENT_0 . List < java . lang . Long > IDENT_5 = new com . IDENT_0 . ArrayList ( 10 ) ; for ( int i = 0 ; i < 10 ; i ++ ) { IDENT_5 . add ( ( ( long ) ( i ) ) ) ; } entity . list . addAll ( IDENT_5 ) ; "<AssertPlaceHolder>" ; entity . list . trim ( 15 ) ; } addAll ( com . IDENT_0 . Collection ) { if ( collection == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } if ( collection . isEmpty ( ) ) { return 0 ; } com . IDENT_0 . List < com . IDENT_6 . client . IDENT_7 > values = new com . IDENT_0 . ArrayList ( collection . size ( ) ) ; int IDENT_8 = 0 ; int IDENT_9 = ( isEmpty ) ? 0 : IDENT_10 . size ( ) ; for ( T value : collection ) { IDENT_8 ++ ; com . IDENT_0 . Map < java . lang . String , java . lang . Object > IDENT_11 = new com . IDENT_0 . HashMap ( 2 ) ; IDENT_11 . put ( STRING_1 , IDENT_9 ) ; IDENT_11 . put ( "value" , ( ( converter ) == null ? value : converter . METHOD_2 ( value ) ) ) ; values . add ( com . IDENT_6 . client . IDENT_7 . get ( IDENT_11 ) ) ; IDENT_9 ++ ; if ( ( IDENT_8 OP_0 ( IDENT_12 ) ) == 0 ) { METHOD_3 ( values ) ; values . METHOD_4 ( ) ; } } if ( ! ( values . isEmpty ( ) ) ) { METHOD_3 ( values ) ; return IDENT_9 ; } else { return IDENT_9 ; } }
org . junit . Assert . assertEquals ( 10 , entity . list . size ( ) ) 