METHOD_0 ( ) { if ( com . splicemachine . IDENT_0 . impl . load . IDENT_1 . IDENT_2 ) return ; java . lang . String sql = STRING_0 + ( STRING_1 4 + STRING_2 ) ; java . sql . ResultSet rs = IDENT_3 . METHOD_1 ( format ( sql , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . IDENT_4 ) ) ; rs . next ( ) ; long IDENT_5 = rs . METHOD_2 ( 1 ) ; IDENT_3 . execute ( format ( ( STRING_3 + ( STRING_1 6 + STRING_1 5 ) ) , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . IDENT_4 , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . IDENT_6 , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . getResource ( STRING_4 ) , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . getResource ( STRING_1 2 ) ) ) ; rs . close ( ) ; java . lang . String select = STRING_5 1 + ( ( STRING_6 + STRING_1 3 ) + STRING_7 7 ) ; rs = IDENT_3 . METHOD_1 ( format ( select , com . splicemachine . IDENT_0 . impl . load . IDENT_1 . getResource ( ( ( STRING_8 + IDENT_5 ) + STRING_9 ) ) ) ) ; java . lang . String s = TestUtils . IDENT_7 . IDENT_8 . METHOD_3 ( rs ) ; java . lang . String expected = STRING_1 8 + ( STRING_1 + STRING_1 0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . splicemachine . IDENT_9 . ResultSet ) { return com . splicemachine . IDENT_9 . TestUtils . IDENT_7 . IDENT_8 . convert ( "" , rs , false ) . toString ( ) . trim ( ) ; }
org . junit . Assert . assertEquals ( expected , s ) 