METHOD_0 ( ) { com . splicemachine . IDENT_0 . impl . load . IDENT_1 conn = IDENT_2 . METHOD_1 ( ) ; conn . METHOD_2 ( com . splicemachine . IDENT_0 . impl . load . IDENT_3 . schema . IDENT_4 ) ; java . lang . String IDENT_5 = ( METHOD_3 ( ) ) + STRING_0 ; try ( com . splicemachine . IDENT_0 . impl . load . IDENT_6 s = conn . METHOD_4 ( ) ) { s . execute ( STRING_1 0 ) ; s . execute ( STRING_2 ) ; try { s . execute ( format ( ( STRING_2 0 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 7 + STRING_1 7 ) + STRING_1 5 ) + STRING_1 7 ) + STRING_1 ) + STRING_1 5 ) + STRING_2 4 ) + STRING_1 5 ) + STRING_1 5 ) + STRING_1 6 ) + STRING_1 7 ) + STRING_1 5 ) + STRING_1 8 ) ) , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . schema . IDENT_4 , STRING_2 2 , IDENT_5 , 0 , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . IDENT_7 . METHOD_5 ( ) ) ) ; } catch ( com . splicemachine . IDENT_0 . impl . load . IDENT_8 IDENT_9 ) { org . junit . Assert . fail ( STRING_3 ) ; } IDENT_5 = ( METHOD_3 ( ) ) + STRING_4 ; try { s . execute ( format ( ( STRING_2 0 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 7 + STRING_1 7 ) + STRING_1 5 ) + STRING_1 7 ) + STRING_1 ) + STRING_1 5 ) + STRING_1 9 ) + STRING_1 5 ) + STRING_1 5 ) + STRING_1 6 ) + STRING_1 7 ) + STRING_1 5 ) + STRING_1 8 ) ) , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . schema . IDENT_4 , STRING_2 2 , IDENT_5 , 0 , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . IDENT_7 . METHOD_5 ( ) ) ) ; } catch ( com . splicemachine . IDENT_0 . impl . load . IDENT_8 IDENT_9 ) { org . junit . Assert . fail ( STRING_3 ) ; } IDENT_5 = ( METHOD_3 ( ) ) + STRING_5 ; try { s . execute ( format ( ( STRING_2 0 + ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 7 + STRING_1 7 ) + STRING_1 5 ) + STRING_1 7 ) + STRING_1 ) + STRING_1 5 ) + STRING_1 3 ) + STRING_1 5 ) + STRING_1 5 ) + STRING_1 6 ) + STRING_1 7 ) + STRING_1 5 ) + STRING_1 8 ) ) , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . schema . IDENT_4 , STRING_2 2 , IDENT_5 , 0 , com . splicemachine . IDENT_0 . impl . load . IDENT_3 . IDENT_7 . METHOD_5 ( ) ) ) ; } catch ( com . splicemachine . IDENT_0 . impl . load . IDENT_8 IDENT_9 ) { org . junit . Assert . fail ( STRING_3 ) ; } try ( com . splicemachine . IDENT_0 . impl . load . ResultSet rs = s . METHOD_6 ( STRING_1 2 ) ) { java . lang . String IDENT_10 = STRING_2 3 + ( ( ( STRING_2 1 + STRING_6 ) + STRING_1 1 ) + STRING_7 ) ; java . lang . String IDENT_11 = STRING_2 3 + ( ( ( STRING_2 1 + STRING_8 ) + STRING_1 4 ) + STRING_9 ) ; java . lang . String IDENT_12 = TestUtils . IDENT_13 . IDENT_14 . toString ( rs ) ; if ( ! ( IDENT_12 . equals ( IDENT_10 ) ) ) "<AssertPlaceHolder>" ; } s . execute ( STRING_1 0 ) ; } } equals ( java . lang . Object ) { if ( ! ( obj instanceof com . splicemachine . db . client . IDENT_15 . IDENT_16 . IDENT_17 ) ) { return false ; } final com . splicemachine . db . client . IDENT_15 . IDENT_16 . IDENT_17 other = ( ( com . splicemachine . db . client . IDENT_15 . IDENT_16 . IDENT_17 ) ( obj ) ) ; if ( ( this . IDENT_18 ) != ( other . IDENT_18 ) ) { return false ; } if ( ( this . IDENT_19 ) != ( other . IDENT_19 ) ) { return false ; } if ( ( this . IDENT_20 ) != ( other . IDENT_20 ) ) { return false ; } if ( ! ( this . schema . equals ( other . schema ) ) ) { return false ; } if ( ( ( this . sql ) == null ) && ( ( other . sql ) != null ) ) { return false ; } if ( ! ( this . sql . equals ( other . sql ) ) ) { return false ; } if ( ( this . type ) != ( other . type ) ) { return false ; } if ( ( this . IDENT_21 ) != ( other . IDENT_21 ) ) { return false ; } return true ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_12 ) 