METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 7 , STRING_0 8 , STRING_1 , STRING_2 , STRING_0 , STRING_3 , STRING_4 , STRING_0 9 , STRING_0 6 , STRING_0 2 , STRING_0 0 , STRING_5 , STRING_0 1 , STRING_0 3 , STRING_5 0 , STRING_6 , STRING_5 2 , STRING_5 1 , STRING_7 , STRING_0 5 , STRING_8 , STRING_0 4 } ; com . splicemachine . IDENT_1 . impl . sql . execute . operations . Arrays . METHOD_1 ( IDENT_0 ) ; java . sql . IDENT_2 cs = IDENT_3 . METHOD_2 ( STRING_9 ) ; java . sql . ResultSet rs = cs . METHOD_3 ( ) ; try { com . splicemachine . IDENT_1 . impl . sql . execute . operations . List < java . lang . String > actual = new com . splicemachine . IDENT_1 . impl . sql . execute . operations . ArrayList ( IDENT_0 . length ) ; while ( rs . next ( ) ) { actual . add ( rs . getString ( 1 ) ) ; } java . lang . String [ ] IDENT_4 = actual . toArray ( new java . lang . String [ actual . size ( ) ] ) ; com . splicemachine . IDENT_1 . impl . sql . execute . operations . Arrays . METHOD_1 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } finally { org . apache . commons . IDENT_5 . IDENT_6 . METHOD_4 ( rs ) ; } } size ( ) { return IDENT_7 . size ( ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , IDENT_4 ) 