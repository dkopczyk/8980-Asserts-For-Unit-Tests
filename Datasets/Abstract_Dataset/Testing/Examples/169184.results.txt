METHOD_0 ( ) { errors . METHOD_1 ( ) ; IDENT_0 . METHOD_1 ( ) ; com . IDENT_1 . logging . IDENT_2 . METHOD_2 ( new com . IDENT_1 . logging . IDENT_2 . METHOD_3 ( ) { public void error ( final List < com . IDENT_1 . logging . IDENT_3 > data , final java . lang . Exception ex ) { MOD_0 ( errors ) { errors . add ( data ) ; IDENT_0 . add ( ( ( com . IDENT_1 . logging . IDENT_2 . IDENT_4 ) ( ex ) ) ) ; } } } ) ; IDENT_5 = STRING_0 ; java . lang . String token = IDENT_6 . METHOD_4 ( IDENT_5 ) ; java . lang . String IDENT_7 = STRING_1 ; HashMap < java . lang . String , java . lang . String > IDENT_8 = new HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_8 . put ( STRING_2 , IDENT_7 ) ; IDENT_8 . put ( STRING_3 0 , token ) ; org . apache . logging . log4j . core . IDENT_9 context = IDENT_6 . METHOD_5 ( STRING_4 , STRING_3 , IDENT_8 ) ; org . apache . logging . log4j . IDENT_10 logger = context . METHOD_6 ( IDENT_7 ) ; IDENT_6 . METHOD_7 ( ) ; java . lang . Thread . sleep ( 1000 ) ; java . lang . String IDENT_11 = java . lang . String . format ( STRING_5 , new Date ( ) . toString ( ) ) ; logger . info ( IDENT_11 ) ; long IDENT_12 = java . lang . System . currentTimeMillis ( ) ; while ( ( ( java . lang . System . currentTimeMillis ( ) ) - IDENT_12 ) < ( INT_0 * 1000 ) ) { if ( ( IDENT_0 . size ( ) ) >= 1 ) break ; java . lang . Thread . sleep ( 1000 ) ; } if ( ( IDENT_0 ) == null ) org . junit . Assert . fail ( STRING_6 ) ; "<AssertPlaceHolder>" ; System . out . println ( IDENT_0 . toString ( ) ) ; if ( ! ( ( IDENT_0 . toString ( ) . contains ( STRING_7 ) ) || ( IDENT_0 . toString ( ) . contains ( STRING_8 ) ) ) ) org . junit . Assert . fail ( java . lang . String . format ( STRING_9 , IDENT_0 . toString ( ) ) ) ; } sleep ( int ) { try { java . lang . Thread . sleep ( IDENT_13 ) ; } catch ( java . lang . IDENT_14 ex ) { java . lang . Thread . METHOD_8 ( ) . METHOD_9 ( ) ; } }
org . junit . Assert . assertTrue ( ( ( errors . size ( ) ) >= 1 ) ) 