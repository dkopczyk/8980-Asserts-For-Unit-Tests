METHOD_0 ( ) { long IDENT_0 = ( java . lang . System . currentTimeMillis ( ) ) / 1000 ; java . lang . Thread . sleep ( INT_0 ) ; int IDENT_1 = 1 ; int IDENT_2 = INT_1 ; System . out . METHOD_1 ( STRING_0 ) ; IDENT_3 . METHOD_2 ( ) ; System . out . METHOD_1 ( STRING_0 4 ) ; IDENT_3 . IDENT_4 [ ] IDENT_5 = new IDENT_3 . IDENT_4 [ IDENT_1 ] ; java . lang . Thread [ ] IDENT_6 = new java . lang . Thread [ IDENT_1 ] ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { IDENT_5 [ i ] = new IDENT_3 . METHOD_3 ( java . lang . String . format ( STRING_1 , i ) , IDENT_2 ) ; IDENT_6 [ i ] = new java . lang . Thread ( IDENT_5 [ i ] ) ; } for ( java . lang . Thread t : IDENT_6 ) t . start ( ) ; for ( java . lang . Thread t : IDENT_6 ) t . join ( ) ; int IDENT_7 = 0 ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) IDENT_7 += IDENT_5 [ i ] . IDENT_7 ; System . out . METHOD_1 ( STRING_2 , IDENT_7 ) ; java . lang . String query = java . lang . String . format ( STRING_3 , IDENT_0 ) ; int IDENT_8 = IDENT_3 . METHOD_4 ( query ) ; if ( IDENT_8 == IDENT_7 ) { System . out . METHOD_1 ( STRING_4 ) ; } else { System . out . METHOD_1 ( STRING_5 , query ) ; for ( int i = 0 ; ( i < INT_2 ) && ( IDENT_8 != IDENT_7 ) ; i ++ ) { do { System . out . METHOD_1 ( STRING_0 3 , IDENT_8 ) ; java . lang . Thread . sleep ( INT_3 ) ; int IDENT_9 = IDENT_3 . METHOD_4 ( query ) ; if ( IDENT_9 == IDENT_8 ) break ; IDENT_8 = IDENT_9 ; } while ( true ) ; System . out . METHOD_1 ( STRING_6 , i ) ; } } java . lang . Boolean IDENT_10 = true ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { java . lang . String IDENT_11 = java . lang . String . format ( STRING_7 , i , IDENT_0 ) ; IDENT_8 = IDENT_3 . METHOD_4 ( IDENT_11 ) ; System . out . METHOD_1 ( STRING_0 2 , i , IDENT_5 [ i ] . IDENT_7 , IDENT_8 , ( IDENT_8 == ( IDENT_5 [ i ] . IDENT_7 ) ? STRING_0 5 : STRING_0 0 ) ) ; IDENT_10 OP_0 IDENT_8 == ( IDENT_5 [ i ] . IDENT_7 ) ; } System . out . METHOD_1 ( STRING_0 1 , ( IDENT_10 ? STRING_8 : STRING_9 ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { IDENT_12 service = IDENT_13 . METHOD_5 ( ) ; service . METHOD_6 ( ) ; try { service . parse ( IDENT_14 , new METHOD_7 ( STRING_10 , true ) ) ; } catch ( IDENT_15 e ) { System . out . METHOD_1 ( STRING_11 , IDENT_14 , e . METHOD_8 ( ) ) ; return - 1 ; } IDENT_16 job = service . METHOD_9 ( ) . create ( IDENT_14 , new METHOD_7 ( ) ) ; while ( ! ( job . METHOD_10 ( ) ) ) { java . lang . Thread . sleep ( 1000 ) ; job . METHOD_11 ( ) ; } METHOD_7 IDENT_17 = new METHOD_7 ( ) ; IDENT_17 . put ( STRING_12 , 100 ) ; IDENT_17 . put ( STRING_13 , 0 ) ; IDENT_17 . put ( STRING_14 , STRING_15 ) ; InputStream stream = job . METHOD_12 ( IDENT_17 ) ; IDENT_18 IDENT_19 = new METHOD_13 ( stream ) ; int result = - 1 ; try { HashMap < java . lang . String , java . lang . String > event = IDENT_19 . METHOD_14 ( ) ; if ( event != null ) { if ( event . containsKey ( STRING_12 ) ) { java . lang . String value = event . get ( STRING_12 ) ; result = java . lang . Integer . METHOD_15 ( value ) ; } } } finally { IDENT_19 . close ( ) ; } job . METHOD_16 ( ) ; return result ; }
org . junit . Assert . assertTrue ( IDENT_10 ) 