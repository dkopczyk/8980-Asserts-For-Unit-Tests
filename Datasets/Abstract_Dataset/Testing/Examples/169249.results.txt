METHOD_0 ( ) { org . apache . commons . math3 . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . commons . math3 . IDENT_0 . METHOD_1 ( FLOAT_0 ) ; org . apache . commons . math3 . IDENT_0 . METHOD_1 IDENT_3 = new org . apache . commons . math3 . IDENT_0 . METHOD_1 ( FLOAT_1 ) . METHOD_2 ( ) ; org . apache . commons . math3 . IDENT_0 . METHOD_1 IDENT_4 = IDENT_2 . METHOD_3 ( IDENT_3 ) ; org . apache . commons . math3 . IDENT_0 . METHOD_1 IDENT_5 = new org . apache . commons . math3 . IDENT_0 . METHOD_1 ( IDENT_2 . METHOD_4 ( ) . METHOD_3 ( IDENT_3 . METHOD_4 ( ) ) , IDENT_2 . METHOD_5 ( ) . METHOD_3 ( IDENT_3 . METHOD_5 ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_6 . javascript . IDENT_7 . IDENT_8 ) { final long IDENT_9 = INT_0 ; long a = ( f ) > > > INT_1 ; long b = ( f ) & IDENT_9 ; long c = ( other . f ) > > > INT_1 ; long d = ( other . f ) & IDENT_9 ; long ac = a * c ; long IDENT_10 = b * c ; long IDENT_11 = a * d ; long IDENT_12 = b * d ; long IDENT_13 = ( ( IDENT_12 > > > INT_1 ) + ( IDENT_11 & IDENT_9 ) ) + ( IDENT_10 & IDENT_9 ) ; IDENT_13 += 1L << INT_2 ; long IDENT_14 = ( ( ac + ( IDENT_11 > > > INT_1 ) ) + ( IDENT_10 > > > INT_1 ) ) + ( IDENT_13 > > > INT_1 ) ; e += ( other . e ) + INT_3 ; f = IDENT_14 ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_4 ) 