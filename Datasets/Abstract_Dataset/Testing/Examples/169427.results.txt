METHOD_0 ( ) { int [ ] IDENT_0 = new int [ ] { Integer . IDENT_1 , ( Integer . IDENT_1 ) + 1 , ( Integer . IDENT_1 ) + 2 , Integer . MAX_VALUE , ( Integer . MAX_VALUE ) - 1 , ( Integer . MAX_VALUE ) - 2 , - 10 , - 9 , - 8 , - 7 , - 6 , - 5 , - 4 , - 3 , - 2 , - 1 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , ( - 1 ) - ( ( Integer . IDENT_1 ) / 2 ) , 0 - ( ( Integer . IDENT_1 ) / 2 ) , 1 - ( ( Integer . IDENT_1 ) / 2 ) , ( - 1 ) + ( ( Integer . MAX_VALUE ) / 2 ) , 0 + ( ( Integer . MAX_VALUE ) / 2 ) , 1 + ( ( Integer . MAX_VALUE ) / 2 ) } ; for ( int a : IDENT_0 ) { java . math . BigInteger IDENT_2 = java . math . BigInteger . valueOf ( a ) ; java . math . BigInteger IDENT_3 = IDENT_2 . add ( BigInteger . IDENT_4 ) ; if ( ( ( IDENT_3 . compareTo ( java . math . BigInteger . valueOf ( Integer . IDENT_1 ) ) ) < 0 ) || ( ( IDENT_3 . compareTo ( java . math . BigInteger . valueOf ( Integer . MAX_VALUE ) ) ) > 0 ) ) { try { org . apache . commons . math3 . util . IDENT_5 . METHOD_1 ( a ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( org . apache . commons . math3 . exception . IDENT_6 IDENT_7 ) { } } else { "<AssertPlaceHolder>" ; } } } fail ( java . lang . String ) { throw new com . google . IDENT_8 . IDENT_9 . METHOD_2 ( message ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , java . math . BigInteger . valueOf ( org . apache . commons . math3 . util . IDENT_5 . METHOD_1 ( a ) ) ) 