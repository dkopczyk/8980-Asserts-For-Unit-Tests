METHOD_0 ( ) { java . lang . String source = ( STRING_0 + ( METHOD_1 ( ) ) ) + STRING_1 ; org . apache . commons . math . IDENT_0 . IDENT_1 expected = new org . apache . commons . math . IDENT_0 . METHOD_2 ( ( - FLOAT_0 ) , 0 ) ; org . apache . commons . math . IDENT_0 . METHOD_2 actual = IDENT_2 . parse ( source ) ; "<AssertPlaceHolder>" ; } parse ( com . google . javascript . IDENT_3 . IDENT_4 ) { try { com . google . javascript . IDENT_3 . IDENT_5 . IDENT_6 . METHOD_3 ( ( STRING_2 + ( IDENT_7 . getName ( ) ) ) ) ; com . google . javascript . IDENT_3 . IDENT_8 . IDENT_9 . IDENT_10 result = com . google . javascript . IDENT_3 . IDENT_8 . IDENT_9 . parse ( IDENT_7 , IDENT_7 . getCode ( ) , compiler . METHOD_4 ( ) , compiler . METHOD_5 ( ) , com . google . javascript . IDENT_3 . IDENT_5 . IDENT_6 ) ; root = result . ast ; compiler . METHOD_6 ( IDENT_7 . getName ( ) , result . IDENT_11 ) ; } catch ( java . io . IOException e ) { compiler . report ( com . google . javascript . IDENT_3 . IDENT_12 . METHOD_7 ( IDENT_4 . IDENT_13 , IDENT_7 . getName ( ) ) ) ; } if ( ( ( root ) == null ) || ( compiler . METHOD_8 ( ) ) ) { root = com . google . javascript . IDENT_14 . IDENT_15 . script ( ) ; } else { compiler . METHOD_9 ( root ) ; } root . METHOD_10 ( IDENT_7 ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 