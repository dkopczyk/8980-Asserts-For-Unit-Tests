METHOD_0 ( ) { int IDENT_0 = 100 ; double [ ] IDENT_1 = new double [ IDENT_0 ] ; double [ ] IDENT_2 = new double [ IDENT_0 ] ; double IDENT_3 = FLOAT_0 ; double IDENT_4 = FLOAT_0 ; METHOD_1 ( IDENT_1 , IDENT_2 , IDENT_3 , IDENT_4 ) ; double [ ] IDENT_5 = new double [ ] { FLOAT_0 , FLOAT_1 , 1.0 } ; double [ ] IDENT_6 = new double [ IDENT_5 . length ] ; for ( int i = 0 ; i < ( IDENT_5 . length ) ; i ++ ) { double IDENT_7 = IDENT_5 [ i ] ; org . apache . commons . math . analysis . IDENT_8 . IDENT_9 IDENT_10 = new org . apache . commons . math . analysis . IDENT_8 . METHOD_2 ( IDENT_7 , 4 , FLOAT_2 ) ; double [ ] res = IDENT_10 . METHOD_3 ( IDENT_1 , IDENT_2 ) ; for ( int j = 1 ; j < ( res . length ) ; ++ j ) { IDENT_6 [ i ] += org . apache . commons . math . util . IDENT_11 . METHOD_4 ( ( ( res [ j ] ) - ( res [ ( j - 1 ) ] ) ) , 2 ) ; } } for ( int i = 1 ; i < ( IDENT_6 . length ) ; ++ i ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( org . apache . commons . math . IDENT_12 . IDENT_13 , org . apache . commons . math . IDENT_12 . IDENT_13 ) { return org . apache . commons . math . IDENT_12 . IDENT_14 . exp ( x . METHOD_5 ( org . apache . commons . math . IDENT_12 . IDENT_14 . log ( y ) ) ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_6 [ i ] ) < ( IDENT_6 [ ( i - 1 ) ] ) ) ) 