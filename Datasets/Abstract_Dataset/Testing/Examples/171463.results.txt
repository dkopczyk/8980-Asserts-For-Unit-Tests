METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 < com . spotify . IDENT_1 . IDENT_2 > reference = new java . util . concurrent . atomic . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( ( request , response ) -> reference . set ( request . request ( ) ) ) ; IDENT_3 . apply ( IDENT_4 ) . create ( IDENT_5 ) . run ( com . spotify . IDENT_1 . logging . IDENT_6 . IDENT_7 . IDENT_8 ) ; "<AssertPlaceHolder>" ; } get ( ) { if ( ! ( com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_11 . METHOD_3 ( config ) ) ) { com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . LOG . warn ( STRING_0 ) ; return new com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . METHOD_4 ( ) ; } com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_11 IDENT_12 = com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_11 . METHOD_5 ( config , IDENT_13 ) ; return new com . spotify . IDENT_1 . IDENT_9 . IDENT_10 . METHOD_6 ( IDENT_12 ) ; }
org . junit . Assert . assertThat ( reference . get ( ) , org . hamcrest . CoreMatchers . is ( request ) ) 