METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 < java . lang . String , java . lang . Integer > IDENT_2 = org . apache . IDENT_0 . impl . IDENT_3 . IDENT_4 . METHOD_1 ( METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) , "a" , 2 , "a" , 10 , "b" , 3 , STRING_0 , 3 , STRING_0 , 4 , STRING_0 , 5 ) ; java . util . Map < java . lang . String , java . lang . Double > actual = com . spotify . IDENT_0 . lib . IDENT_5 . METHOD_5 ( IDENT_2 ) . METHOD_6 ( ) ; java . util . Map < java . lang . String , java . lang . Double > expected = com . google . common . collect . ImmutableMap . of ( "a" , FLOAT_0 , "b" , FLOAT_1 , STRING_0 , FLOAT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( com . spotify . IDENT_0 . lib . IDENT_1 ) { org . apache . IDENT_0 . types . IDENT_6 IDENT_7 = table . METHOD_7 ( ) ; com . spotify . IDENT_0 . lib . IDENT_1 < IDENT_8 , com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > > IDENT_10 = table . METHOD_8 ( new com . spotify . IDENT_0 . lib . IDENT_11 < IDENT_12 , com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > > ( ) { @ com . spotify . IDENT_0 . lib . Override public com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > map ( IDENT_12 input ) { return com . spotify . IDENT_0 . lib . IDENT_9 . of ( input . METHOD_9 ( ) , 1L ) ; } } , IDENT_7 . METHOD_10 ( IDENT_7 . METHOD_11 ( ) , IDENT_7 . METHOD_12 ( ) ) ) ; com . spotify . IDENT_0 . lib . IDENT_13 < IDENT_8 , com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > > IDENT_14 = IDENT_10 . METHOD_13 ( ) ; return IDENT_14 . METHOD_14 ( METHOD_15 ( METHOD_16 ( ) , METHOD_17 ( ) ) ) . METHOD_8 ( new com . spotify . IDENT_0 . lib . IDENT_11 < com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > , java . lang . Double > ( ) { @ com . spotify . IDENT_0 . lib . Override public com . spotify . IDENT_0 . lib . Double map ( com . spotify . IDENT_0 . lib . IDENT_9 < java . lang . Double , java . lang . Long > input ) { return ( input . first ( ) ) / ( input . METHOD_18 ( ) ) ; } } , IDENT_7 . METHOD_11 ( ) ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 