METHOD_0 ( ) { com . spotify . IDENT_0 . IDENT_1 < java . lang . String > task = com . spotify . IDENT_0 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 ) ; java . util . Map < com . spotify . IDENT_0 . IDENT_4 , java . nio . file . Path > IDENT_5 = METHOD_2 ( task ) ; METHOD_3 ( IDENT_5 ) ; com . spotify . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_6 = false ; com . spotify . IDENT_0 . context . IDENT_7 < java . lang . String > IDENT_8 = com . spotify . IDENT_0 . context . IDENT_7 . create ( ) ; java . nio . file . Path IDENT_9 = IDENT_5 . get ( task . id ( ) ) ; final com . spotify . IDENT_0 . IDENT_10 . IDENT_11 < java . lang . String > IDENT_12 = IDENT_13 . METHOD_4 ( IDENT_9 ) ; IDENT_12 . METHOD_5 ( IDENT_8 ) ; IDENT_12 . METHOD_6 ( Throwable :: printStackTrace ) ; IDENT_8 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { if ( ! ( METHOD_8 ( ) ) ) { throw new java . lang . IllegalStateException ( STRING_1 ) ; } return value ; }
org . junit . Assert . assertFalse ( com . spotify . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_6 ) 