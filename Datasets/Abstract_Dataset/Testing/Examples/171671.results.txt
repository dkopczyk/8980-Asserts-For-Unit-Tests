METHOD_0 ( ) { final com . spotify . IDENT_0 . client . IDENT_1 IDENT_2 = METHOD_1 ( com . google . common . base . Optional . < com . spotify . IDENT_3 . IDENT_4 > METHOD_2 ( ) , com . google . common . collect . ImmutableList . < com . spotify . IDENT_3 . IDENT_5 > of ( ) ) ; final java . lang . String path = STRING_0 ; final javax . net . IDENT_6 . IDENT_7 connection = mock ( javax . net . IDENT_6 . IDENT_7 . class ) ; when ( IDENT_8 . connect ( METHOD_3 ( METHOD_4 ( path ) ) , eq ( method ) , eq ( entity ) , METHOD_3 ( METHOD_5 ( java . util . Collections . singletonList ( STRING_1 ) ) ) ) ) . thenReturn ( connection ) ; when ( connection . METHOD_6 ( ) ) . thenReturn ( 200 ) ; final java . net . URI uri = new java . net . URI ( ( STRING_2 + path ) ) ; final java . net . IDENT_9 IDENT_10 = IDENT_2 . connect ( uri , method , entity , headers ) ; "<AssertPlaceHolder>" ; } connect ( java . net . URI , java . lang . String , byte [ ] , java . util . Map ) { final com . spotify . IDENT_0 . client . IDENT_11 IDENT_12 = IDENT_13 . next ( ) ; final java . lang . String IDENT_14 = IDENT_12 . METHOD_7 ( ) . METHOD_8 ( ) ; try { final java . net . IDENT_9 connection = METHOD_9 ( uri , method , entity , headers , IDENT_14 ) ; if ( ( connection . METHOD_6 ( ) ) == ( IDENT_15 ) ) { throw new com . spotify . IDENT_0 . common . METHOD_10 ( java . lang . String . format ( STRING_3 , uri , connection . METHOD_6 ( ) ) ) ; } return connection ; } catch ( java . net . IDENT_16 | java . net . IDENT_17 | java . net . IDENT_18 e ) { com . spotify . IDENT_0 . client . IDENT_19 . log . debug ( e . toString ( ) ) ; throw new com . spotify . IDENT_0 . common . METHOD_10 ( ( STRING_4 + uri ) , e ) ; } catch ( java . io . IOException e ) { throw new com . spotify . IDENT_0 . common . METHOD_10 ( ( STRING_5 + uri ) , e ) ; } }
org . junit . Assert . assertSame ( IDENT_10 , connection ) 