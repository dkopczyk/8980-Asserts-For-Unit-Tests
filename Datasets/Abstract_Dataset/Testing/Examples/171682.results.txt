METHOD_0 ( ) { final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_2 job = com . spotify . IDENT_0 . common . IDENT_1 . IDENT_2 . METHOD_1 ( ) . setName ( "foo" ) . METHOD_2 ( "1" ) . METHOD_3 ( STRING_0 ) . METHOD_4 ( STRING_1 ) . build ( ) ; "<AssertPlaceHolder>" ; } validate ( com . spotify . IDENT_0 . common . IDENT_1 . IDENT_2 ) { final java . util . Set < java . lang . String > errors = com . google . common . collect . IDENT_3 . METHOD_5 ( ) ; errors . addAll ( METHOD_6 ( job ) ) ; errors . addAll ( METHOD_7 ( job . METHOD_8 ( ) ) ) ; errors . addAll ( METHOD_9 ( job . METHOD_10 ( ) ) ) ; final java . util . Set < java . lang . Integer > IDENT_4 = com . google . common . collect . IDENT_3 . METHOD_5 ( ) ; for ( final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_5 mapping : job . METHOD_11 ( ) . values ( ) ) { final java . lang . Integer IDENT_6 = mapping . METHOD_12 ( ) ; if ( ( IDENT_4 . contains ( IDENT_6 ) ) && ( IDENT_6 != null ) ) { errors . add ( java . lang . String . format ( STRING_2 9 , IDENT_6 ) ) ; } IDENT_4 . add ( IDENT_6 ) ; } for ( final Map . Entry < java . lang . String , com . spotify . IDENT_0 . common . IDENT_1 . IDENT_5 > entry : job . METHOD_11 ( ) . entrySet ( ) ) { final java . lang . String name = entry . getKey ( ) ; final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_5 mapping = entry . getValue ( ) ; if ( ! ( com . spotify . IDENT_0 . common . IDENT_7 . IDENT_8 . matcher ( mapping . METHOD_13 ( ) ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_2 6 , mapping . METHOD_13 ( ) ) ) ; } if ( ! ( METHOD_14 ( mapping . METHOD_15 ( ) ) ) ) { errors . add ( java . lang . String . format ( STRING_3 , mapping . METHOD_15 ( ) ) ) ; } if ( ( ( mapping . METHOD_12 ( ) ) != null ) && ( ! ( METHOD_14 ( mapping . METHOD_12 ( ) ) ) ) ) { errors . add ( java . lang . String . format ( STRING_4 , mapping . METHOD_12 ( ) ) ) ; } if ( ! ( com . spotify . IDENT_0 . common . IDENT_7 . IDENT_9 . matcher ( name ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_5 , name ) ) ; } } for ( final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_10 IDENT_11 : job . METHOD_16 ( ) . METHOD_17 ( ) ) { final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_12 IDENT_13 = job . METHOD_16 ( ) . get ( IDENT_11 ) ; if ( ( IDENT_13 == null ) || ( ( IDENT_13 . METHOD_11 ( ) ) == null ) ) { errors . add ( java . lang . String . format ( STRING_2 3 , IDENT_11 . getName ( ) ) ) ; continue ; } for ( final java . lang . String IDENT_14 : IDENT_13 . METHOD_11 ( ) . METHOD_17 ( ) ) { if ( ! ( job . METHOD_11 ( ) . containsKey ( IDENT_14 ) ) ) { errors . add ( java . lang . String . format ( STRING_2 4 , IDENT_11 , IDENT_14 ) ) ; } if ( ! ( com . spotify . IDENT_0 . common . IDENT_7 . IDENT_15 . matcher ( IDENT_11 . getName ( ) ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_6 , IDENT_11 . getName ( ) ) ) ; } } } for ( final Map . Entry < java . lang . String , java . lang . String > entry : job . METHOD_18 ( ) . entrySet ( ) ) { final java . lang . String path = entry . getKey ( ) ; final java . lang . String source = entry . getValue ( ) ; if ( ! ( path . startsWith ( STRING_2 8 ) ) ) { errors . add ( ( STRING_7 + path ) ) ; continue ; } if ( ( source . contains ( STRING_2 8 ) ) && ( ! ( source . startsWith ( STRING_2 8 ) ) ) ) { errors . add ( ( STRING_2 1 + source ) ) ; continue ; } final java . lang . String [ ] IDENT_16 = path . split ( STRING_2 0 , 3 ) ; if ( ( ( ( path . isEmpty ( ) ) || ( path . equals ( STRING_2 8 ) ) ) || ( ( IDENT_16 . length ) > 2 ) ) || ( ( ( IDENT_16 . length ) > 1 ) && ( IDENT_16 [ 1 ] . isEmpty ( ) ) ) ) { errors . add ( java . lang . String . format ( STRING_8 , path ) ) ; } } final java . util . Date IDENT_17 = job . METHOD_19 ( ) ; final java . util . Date now = new java . util . Date ( ) ; if ( ( IDENT_17 != null ) && ( IDENT_17 . METHOD_20 ( now ) ) ) { errors . add ( ( ( ( STRING_9 + IDENT_17 ) + STRING_2 2 ) + now ) ) ; } errors . addAll ( METHOD_21 ( job ) ) ; errors . addAll ( METHOD_22 ( job ) ) ; if ( IDENT_18 ) { errors . addAll ( METHOD_23 ( job ) ) ; } for ( final java . lang . String IDENT_19 : job . METHOD_24 ( ) . METHOD_17 ( ) ) { if ( ! ( IDENT_19 . startsWith ( STRING_2 8 ) ) ) { errors . add ( ( STRING_10 + IDENT_19 ) ) ; continue ; } } final java . util . Set < java . lang . String > IDENT_20 = com . google . common . collect . IDENT_3 . METHOD_5 ( ) ; for ( java . lang . String s : job . METHOD_18 ( ) . METHOD_17 ( ) ) { IDENT_20 . add ( s . split ( STRING_2 0 , 2 ) [ 0 ] ) ; } for ( final java . lang . String IDENT_19 : job . METHOD_24 ( ) . METHOD_17 ( ) ) { if ( IDENT_20 . contains ( IDENT_19 ) ) { errors . add ( java . lang . String . format ( STRING_2 7 , IDENT_19 ) ) ; } } errors . addAll ( METHOD_25 ( job ) ) ; return errors ; }
org . junit . Assert . assertEquals ( 1 , validator . validate ( job ) . size ( ) ) 