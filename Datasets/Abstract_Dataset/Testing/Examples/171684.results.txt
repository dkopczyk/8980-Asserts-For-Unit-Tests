METHOD_0 ( ) { final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_2 job = com . spotify . IDENT_0 . common . IDENT_3 . IDENT_4 . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . build ( ) ; "<AssertPlaceHolder>" ; } validate ( com . spotify . IDENT_0 . common . IDENT_1 . IDENT_2 ) { final java . util . Set < java . lang . String > errors = com . google . common . collect . IDENT_5 . METHOD_3 ( ) ; errors . addAll ( METHOD_4 ( job ) ) ; errors . addAll ( METHOD_5 ( job . METHOD_6 ( ) ) ) ; errors . addAll ( METHOD_7 ( job . METHOD_8 ( ) ) ) ; final java . util . Set < java . lang . Integer > IDENT_6 = com . google . common . collect . IDENT_5 . METHOD_3 ( ) ; for ( final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_7 mapping : job . METHOD_9 ( ) . values ( ) ) { final java . lang . Integer IDENT_8 = mapping . METHOD_10 ( ) ; if ( ( IDENT_6 . contains ( IDENT_8 ) ) && ( IDENT_8 != null ) ) { errors . add ( java . lang . String . format ( STRING_1 9 , IDENT_8 ) ) ; } IDENT_6 . add ( IDENT_8 ) ; } for ( final Map . Entry < java . lang . String , com . spotify . IDENT_0 . common . IDENT_1 . IDENT_7 > entry : job . METHOD_9 ( ) . entrySet ( ) ) { final java . lang . String name = entry . getKey ( ) ; final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_7 mapping = entry . getValue ( ) ; if ( ! ( com . spotify . IDENT_0 . common . IDENT_9 . IDENT_10 . matcher ( mapping . METHOD_11 ( ) ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_1 6 , mapping . METHOD_11 ( ) ) ) ; } if ( ! ( METHOD_12 ( mapping . METHOD_13 ( ) ) ) ) { errors . add ( java . lang . String . format ( STRING_2 , mapping . METHOD_13 ( ) ) ) ; } if ( ( ( mapping . METHOD_10 ( ) ) != null ) && ( ! ( METHOD_12 ( mapping . METHOD_10 ( ) ) ) ) ) { errors . add ( java . lang . String . format ( STRING_3 , mapping . METHOD_10 ( ) ) ) ; } if ( ! ( com . spotify . IDENT_0 . common . IDENT_9 . IDENT_11 . matcher ( name ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_4 , name ) ) ; } } for ( final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_12 IDENT_13 : job . METHOD_14 ( ) . METHOD_15 ( ) ) { final com . spotify . IDENT_0 . common . IDENT_1 . IDENT_14 IDENT_15 = job . METHOD_14 ( ) . get ( IDENT_13 ) ; if ( ( IDENT_15 == null ) || ( ( IDENT_15 . METHOD_9 ( ) ) == null ) ) { errors . add ( java . lang . String . format ( STRING_1 3 , IDENT_13 . getName ( ) ) ) ; continue ; } for ( final java . lang . String IDENT_16 : IDENT_15 . METHOD_9 ( ) . METHOD_15 ( ) ) { if ( ! ( job . METHOD_9 ( ) . containsKey ( IDENT_16 ) ) ) { errors . add ( java . lang . String . format ( STRING_1 4 , IDENT_13 , IDENT_16 ) ) ; } if ( ! ( com . spotify . IDENT_0 . common . IDENT_9 . IDENT_17 . matcher ( IDENT_13 . getName ( ) ) . matches ( ) ) ) { errors . add ( java . lang . String . format ( STRING_5 , IDENT_13 . getName ( ) ) ) ; } } } for ( final Map . Entry < java . lang . String , java . lang . String > entry : job . METHOD_16 ( ) . entrySet ( ) ) { final java . lang . String path = entry . getKey ( ) ; final java . lang . String source = entry . getValue ( ) ; if ( ! ( path . startsWith ( STRING_1 8 ) ) ) { errors . add ( ( STRING_6 + path ) ) ; continue ; } if ( ( source . contains ( STRING_1 8 ) ) && ( ! ( source . startsWith ( STRING_1 8 ) ) ) ) { errors . add ( ( STRING_1 1 + source ) ) ; continue ; } final java . lang . String [ ] IDENT_18 = path . split ( STRING_1 0 , 3 ) ; if ( ( ( ( path . isEmpty ( ) ) || ( path . equals ( STRING_1 8 ) ) ) || ( ( IDENT_18 . length ) > 2 ) ) || ( ( ( IDENT_18 . length ) > 1 ) && ( IDENT_18 [ 1 ] . isEmpty ( ) ) ) ) { errors . add ( java . lang . String . format ( STRING_7 , path ) ) ; } } final java . util . Date IDENT_19 = job . METHOD_17 ( ) ; final java . util . Date now = new java . util . Date ( ) ; if ( ( IDENT_19 != null ) && ( IDENT_19 . METHOD_18 ( now ) ) ) { errors . add ( ( ( ( STRING_8 + IDENT_19 ) + STRING_1 2 ) + now ) ) ; } errors . addAll ( METHOD_19 ( job ) ) ; errors . addAll ( METHOD_20 ( job ) ) ; if ( IDENT_20 ) { errors . addAll ( METHOD_21 ( job ) ) ; } for ( final java . lang . String IDENT_21 : job . METHOD_22 ( ) . METHOD_15 ( ) ) { if ( ! ( IDENT_21 . startsWith ( STRING_1 8 ) ) ) { errors . add ( ( STRING_9 + IDENT_21 ) ) ; continue ; } } final java . util . Set < java . lang . String > IDENT_22 = com . google . common . collect . IDENT_5 . METHOD_3 ( ) ; for ( java . lang . String s : job . METHOD_16 ( ) . METHOD_15 ( ) ) { IDENT_22 . add ( s . split ( STRING_1 0 , 2 ) [ 0 ] ) ; } for ( final java . lang . String IDENT_21 : job . METHOD_22 ( ) . METHOD_15 ( ) ) { if ( IDENT_22 . contains ( IDENT_21 ) ) { errors . add ( java . lang . String . format ( STRING_1 7 , IDENT_21 ) ) ; } } errors . addAll ( METHOD_23 ( job ) ) ; return errors ; }
org . junit . Assert . assertThat ( validator . validate ( job ) , org . hamcrest . core . Is . is ( org . hamcrest . Matchers . empty ( ) ) ) 