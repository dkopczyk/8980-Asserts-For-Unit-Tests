METHOD_0 ( ) { java . lang . String location = STRING_0 ; com . google . cloud . storage . IDENT_0 storage = mock ( com . google . cloud . storage . IDENT_0 . class ) ; com . google . cloud . storage . IDENT_1 IDENT_2 = mock ( com . google . cloud . storage . IDENT_1 . class ) ; com . google . cloud . IDENT_3 IDENT_4 = mock ( com . google . cloud . IDENT_3 . class ) ; when ( IDENT_2 . writer ( ) ) . thenReturn ( IDENT_4 ) ; when ( IDENT_2 . exists ( ) ) . thenReturn ( true ) ; when ( storage . get ( com . google . cloud . storage . IDENT_5 . of ( STRING_1 , "test" ) ) ) . thenReturn ( IDENT_2 ) ; org . springframework . cloud . IDENT_6 . storage . IDENT_7 resource = new org . springframework . cloud . IDENT_6 . storage . METHOD_1 ( storage , location ) ; java . io . IDENT_8 IDENT_9 = resource . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { if ( METHOD_3 ( ) ) { throw new java . lang . IllegalStateException ( ( ( STRING_2 + ( METHOD_4 ( ) ) ) + STRING_3 ) ) ; } else { com . google . cloud . storage . IDENT_1 IDENT_2 = METHOD_5 ( ) ; if ( ( IDENT_2 == null ) || ( ! ( IDENT_2 . exists ( ) ) ) ) { if ( ! ( this . IDENT_10 ) ) { throw new java . io . METHOD_6 ( ( STRING_4 + ( METHOD_4 ( ) ) ) ) ; } IDENT_2 = METHOD_7 ( ) ; } return java . nio . IDENT_11 . IDENT_12 . METHOD_8 ( IDENT_2 . writer ( ) ) ; } }
org . junit . Assert . assertNotNull ( IDENT_9 ) 