METHOD_0 ( ) { java . util . concurrent . IDENT_0 < java . lang . String > IDENT_1 = new java . util . concurrent . IDENT_0 < java . lang . String > ( ) { public java . lang . String call ( ) throws org . springframework . batch . IDENT_2 . IDENT_3 . Exception { java . util . Set < java . lang . String > IDENT_4 = new java . util . HashSet < java . lang . String > ( repository ) ; if ( IDENT_4 . isEmpty ( ) ) { return null ; } throw new java . lang . RuntimeException ( STRING_0 ) ; } } ; org . springframework . batch . IDENT_2 . IDENT_3 . IDENT_5 < java . lang . String > IDENT_2 = new org . springframework . batch . IDENT_2 . IDENT_3 . IDENT_5 < java . lang . String > ( ) ; org . springframework . IDENT_3 . concurrent . IDENT_6 IDENT_7 = new org . springframework . IDENT_3 . concurrent . METHOD_1 ( ) ; IDENT_7 . METHOD_2 ( IDENT_8 . IDENT_9 ) ; IDENT_2 . METHOD_3 ( IDENT_7 ) ; METHOD_4 ( INT_0 ) ; expected . expect ( java . util . concurrent . IDENT_10 . class ) ; expected . expect ( org . springframework . batch . IDENT_2 . IDENT_3 . IDENT_11 . IDENT_12 . METHOD_5 ( STRING_0 ) ) ; java . lang . String value = IDENT_2 . METHOD_6 ( IDENT_1 ) . get ( INT_1 , TimeUnit . IDENT_13 ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String , java . lang . Class ) { return parser . METHOD_7 ( expression ) . getValue ( context , target , type ) ; }
org . junit . Assert . assertEquals ( null , value ) 