METHOD_0 ( ) { final com . github . IDENT_0 . metrics . Map < java . lang . String , java . lang . String > IDENT_1 = null ; com . github . IDENT_0 . metrics . IDENT_2 < java . lang . Integer > IDENT_3 = new com . github . IDENT_0 . metrics . IDENT_2 < java . lang . Integer > ( ) { @ com . github . IDENT_0 . metrics . Override public com . github . IDENT_0 . metrics . Integer getValue ( ) { return 1 ; } @ com . github . IDENT_0 . metrics . Override public com . github . IDENT_0 . metrics . Map < java . lang . String , java . lang . String > METHOD_1 ( ) { return IDENT_1 ; } } ; final com . github . IDENT_0 . metrics . IDENT_4 IDENT_5 = new com . github . IDENT_0 . metrics . METHOD_2 ( IDENT_1 ) ; final com . github . IDENT_0 . metrics . IDENT_6 IDENT_7 = mock ( com . github . IDENT_0 . metrics . IDENT_6 . class ) ; when ( IDENT_7 . METHOD_3 ( ) ) . thenReturn ( 1L ) ; when ( IDENT_7 . METHOD_1 ( ) ) . thenReturn ( IDENT_1 ) ; final com . github . IDENT_0 . metrics . IDENT_8 IDENT_9 = mock ( com . github . IDENT_0 . metrics . IDENT_8 . class ) ; when ( IDENT_9 . METHOD_4 ( ) ) . thenReturn ( INT_0 ) ; when ( IDENT_9 . METHOD_5 ( ) ) . thenReturn ( FLOAT_0 ) ; when ( IDENT_9 . METHOD_6 ( ) ) . thenReturn ( INT_1 ) ; when ( IDENT_9 . METHOD_7 ( ) ) . thenReturn ( FLOAT_1 ) ; when ( IDENT_9 . METHOD_8 ( ) ) . thenReturn ( FLOAT_2 ) ; when ( IDENT_9 . METHOD_9 ( ) ) . thenReturn ( FLOAT_3 ) ; when ( IDENT_9 . METHOD_10 ( ) ) . thenReturn ( FLOAT_4 ) ; when ( IDENT_9 . METHOD_11 ( ) ) . thenReturn ( FLOAT_5 ) ; when ( IDENT_9 . METHOD_12 ( ) ) . thenReturn ( FLOAT_6 ) ; when ( IDENT_9 . METHOD_13 ( ) ) . thenReturn ( FLOAT_7 ) ; when ( IDENT_7 . METHOD_14 ( ) ) . thenReturn ( IDENT_9 ) ; final com . github . IDENT_0 . metrics . IDENT_10 IDENT_11 = new com . github . IDENT_0 . metrics . METHOD_15 ( IDENT_1 ) ; final com . github . IDENT_0 . metrics . IDENT_12 IDENT_13 = new com . github . IDENT_0 . metrics . METHOD_16 ( IDENT_1 ) ; com . github . IDENT_0 . metrics . IDENT_14 < java . lang . String , com . github . IDENT_0 . metrics . IDENT_15 > IDENT_16 = new com . github . IDENT_0 . metrics . IDENT_17 < java . lang . String , com . github . IDENT_0 . metrics . IDENT_15 > ( ) ; IDENT_16 . put ( STRING_0 , IDENT_3 ) ; IDENT_18 . report ( IDENT_16 , this . < com . github . IDENT_0 . metrics . IDENT_19 > map ( STRING_1 , IDENT_5 ) , this . < com . github . IDENT_0 . metrics . IDENT_20 > map ( STRING_2 , IDENT_7 ) , this . < com . github . IDENT_0 . metrics . IDENT_21 > map ( STRING_3 , IDENT_11 ) , this . < com . IDENT_22 . metrics . IDENT_23 > map ( STRING_4 , IDENT_13 ) ) ; verify ( IDENT_24 ) . METHOD_17 ( IDENT_25 . METHOD_18 ( ) ) ; final com . github . IDENT_0 . metrics . Set < com . github . IDENT_0 . metrics . IDENT_24 . IDENT_26 > metrics = IDENT_25 . getValue ( ) ; final com . github . IDENT_0 . metrics . Map < java . lang . String , java . lang . String > IDENT_27 = new com . github . IDENT_0 . metrics . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_27 . put ( "foo" , "bar" ) ; for ( com . github . IDENT_0 . metrics . IDENT_24 . IDENT_26 IDENT_28 : metrics ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( ) { return IDENT_1 ; }
org . junit . Assert . assertEquals ( IDENT_27 , IDENT_28 . METHOD_1 ( ) ) 