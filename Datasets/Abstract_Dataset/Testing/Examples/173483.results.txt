METHOD_0 ( ) { java . nio . file . Path path = java . nio . file . IDENT_0 . METHOD_1 ( STRING_0 , STRING_1 ) ; long size = ( Integer . MAX_VALUE ) + INT_0 ; METHOD_2 ( path , size ) ; org . IDENT_1 . IDENT_2 . framework . io . IDENT_3 t = new org . IDENT_1 . IDENT_2 . framework . io . METHOD_3 ( path . METHOD_4 ( ) , java . nio . IDENT_4 . IDENT_5 . IDENT_6 , true ) ; try ( java . io . IDENT_7 IDENT_8 = new org . apache . commons . io . output . METHOD_5 ( ) ) { long IDENT_9 = t . METHOD_6 ( 0 , IDENT_8 ) ; "<AssertPlaceHolder>" ; } java . nio . file . IDENT_0 . delete ( path ) ; } METHOD_2 ( java . nio . file . Path , long ) { int IDENT_10 = INT_1 ; byte [ ] IDENT_11 = com . google . common . base . IDENT_12 . METHOD_7 ( STRING_2 , IDENT_10 ) . getBytes ( IDENT_5 . IDENT_6 ) ; try ( java . io . IDENT_7 stream = new java . io . METHOD_8 ( path . METHOD_4 ( ) ) ) { long IDENT_13 = size ; while ( IDENT_13 > IDENT_10 ) { stream . write ( IDENT_11 ) ; IDENT_13 OP_0 IDENT_10 ; } stream . write ( IDENT_11 , 0 , ( ( int ) ( IDENT_13 ) ) ) ; stream . METHOD_9 ( ) ; } catch ( java . io . IOException e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } }
org . junit . Assert . assertEquals ( size , IDENT_9 ) 