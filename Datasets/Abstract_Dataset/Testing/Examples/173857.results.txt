METHOD_0 ( ) { org . IDENT_0 . javascript . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Long , org . IDENT_0 . javascript . IDENT_3 < java . lang . Integer > , java . lang . Boolean > IDENT_4 = new org . IDENT_0 . javascript . IDENT_1 . IDENT_2 < java . lang . Integer , java . lang . Long , org . IDENT_0 . javascript . IDENT_3 < java . lang . Integer > , java . lang . Boolean > ( ) { @ org . IDENT_0 . javascript . Override public org . IDENT_0 . javascript . Boolean METHOD_1 ( java . lang . Integer val , java . lang . Long IDENT_5 , org . IDENT_0 . javascript . IDENT_3 < java . lang . Integer > obj ) { return ( obj . METHOD_2 ( ) ) == 2 ; } } ; org . IDENT_0 . javascript . IDENT_3 < java . lang . Integer > IDENT_6 = org . IDENT_0 . javascript . IDENT_7 . METHOD_3 ( 12 , INT_0 ) . filter ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } filter ( org . IDENT_0 . javascript . IDENT_1 . IDENT_2 ) { if ( IDENT_4 == null ) { throw new java . lang . METHOD_4 ( STRING_0 , STRING_1 ) ; } java . util . Iterator < org . IDENT_0 . javascript . IDENT_3 . Entry < IDENT_8 > > IDENT_9 = this . METHOD_5 ( 0 , this . METHOD_2 ( ) , true ) ; org . IDENT_0 . javascript . IDENT_3 < IDENT_8 > result = new org . IDENT_0 . javascript . IDENT_3 < > ( ) ; while ( IDENT_9 . hasNext ( ) ) { org . IDENT_0 . javascript . IDENT_3 . Entry < IDENT_8 > entry = IDENT_9 . next ( ) ; boolean IDENT_10 = IDENT_4 . METHOD_1 ( entry . value , entry . key , this ) ; if ( IDENT_10 ) { result . METHOD_6 ( entry . value ) ; } } return result ; }
org . junit . Assert . assertEquals ( 2 , IDENT_6 . METHOD_2 ( ) ) 