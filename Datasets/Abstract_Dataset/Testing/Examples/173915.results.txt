METHOD_0 ( ) { final net . IDENT_0 . crypto . IDENT_1 . math . IDENT_2 t = new net . IDENT_0 . crypto . IDENT_1 . math . METHOD_1 ( net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_4 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_5 ) ; final net . IDENT_0 . crypto . IDENT_1 . math . METHOD_1 s = net . IDENT_0 . crypto . IDENT_1 . math . METHOD_1 . METHOD_2 ( net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_4 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_6 [ 0 ] , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_6 [ 1 ] , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_7 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_6 [ 0 ] . METHOD_3 ( net . IDENT_0 . crypto . IDENT_1 . math . IDENT_3 . IDENT_6 [ 1 ] ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( net . IDENT_0 . crypto . IDENT_1 . math . IDENT_8 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_9 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_9 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_9 , net . IDENT_0 . crypto . IDENT_1 . math . IDENT_9 ) { return net . IDENT_0 . crypto . IDENT_1 . math . METHOD_1 . METHOD_2 ( IDENT_4 , IDENT_10 , IDENT_11 , IDENT_12 , T , false ) ; }
org . junit . Assert . assertThat ( t , is ( equalTo ( s ) ) ) 