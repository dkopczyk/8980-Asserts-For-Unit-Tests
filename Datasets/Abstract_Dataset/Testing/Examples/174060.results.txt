METHOD_0 ( ) { final int IDENT_0 = 100 ; final int IDENT_1 = 20 ; try { super . METHOD_1 ( eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_4 . IDENT_5 . IDENT_6 , eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_4 . IDENT_5 . IDENT_7 ) ; METHOD_2 ( new eu . IDENT_2 . IDENT_3 . runtime . test . util . METHOD_3 ( IDENT_0 , IDENT_1 , false ) , 0 ) ; METHOD_4 ( this . IDENT_8 ) ; { final eu . IDENT_2 . IDENT_3 . runtime . task . util . IDENT_9 IDENT_10 = new eu . IDENT_2 . IDENT_3 . runtime . task . util . METHOD_5 ( new eu . IDENT_2 . configuration . Configuration ( ) ) ; IDENT_10 . METHOD_6 ( 0 ) ; IDENT_10 . METHOD_7 ( IDENT_11 , 0 ) ; IDENT_10 . METHOD_8 ( IDENT_12 . IDENT_13 ) ; IDENT_10 . METHOD_9 ( IDENT_11 ) ; IDENT_10 . METHOD_10 ( IDENT_14 . IDENT_15 ) ; IDENT_10 . METHOD_11 ( IDENT_16 , 0 ) ; IDENT_10 . METHOD_12 ( ( ( 3 * INT_0 ) * INT_0 ) ) ; IDENT_10 . METHOD_13 ( new eu . IDENT_2 . api . common . IDENT_17 . util . IDENT_18 < eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_19 . IDENT_20 > ( eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_19 . IDENT_20 . class ) ) ; METHOD_14 ( ) . METHOD_15 ( eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_4 . IDENT_21 . class , IDENT_10 , STRING_0 ) ; } { eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_22 < eu . IDENT_2 . api . common . IDENT_23 . IDENT_24 < eu . IDENT_2 . types . IDENT_25 , eu . IDENT_2 . types . IDENT_25 > , eu . IDENT_2 . types . IDENT_25 > IDENT_26 = new eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_22 < eu . IDENT_2 . api . common . IDENT_23 . IDENT_24 < eu . IDENT_2 . types . IDENT_25 , eu . IDENT_2 . types . IDENT_25 > , eu . IDENT_2 . types . IDENT_25 > ( ) ; METHOD_16 ( IDENT_26 , eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_27 . class , eu . IDENT_2 . IDENT_3 . runtime . task . IDENT_28 . IDENT_29 . class ) ; try { IDENT_26 . invoke ( ) ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( STRING_1 ) ; } } "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( e . getMessage ( ) ) ; } } size ( ) { return IDENT_30 ; }
org . junit . Assert . assertEquals ( IDENT_0 , this . IDENT_8 . size ( ) ) 