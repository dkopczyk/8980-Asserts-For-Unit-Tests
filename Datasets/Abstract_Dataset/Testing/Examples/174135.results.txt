METHOD_0 ( ) { java . lang . String json = com . IDENT_0 . util . IDENT_1 . METHOD_1 ( STRING_0 ) ; net . sf . json . JSONObject IDENT_2 = net . sf . json . JSONObject . METHOD_2 ( json ) ; com . IDENT_0 . core . service . IDENT_3 IDENT_4 = mock ( com . IDENT_0 . core . service . IDENT_3 . class ) ; org . springframework . test . util . IDENT_5 . METHOD_3 ( IDENT_4 , STRING_1 , STRING_2 ) ; org . springframework . test . util . IDENT_5 . METHOD_3 ( IDENT_4 , STRING_3 , INT_0 ) ; org . springframework . test . util . IDENT_5 . METHOD_3 ( IDENT_4 , STRING_4 , STRING_5 ) ; org . springframework . test . util . IDENT_5 . METHOD_3 ( IDENT_4 , STRING_6 , true ) ; when ( IDENT_4 . METHOD_4 ( any ( com . IDENT_0 . core . model . IDENT_6 . class ) , anyString ( ) , METHOD_5 ( ) , any ( net . sf . json . JSONObject . class ) ) ) . METHOD_6 ( ) ; when ( IDENT_4 . METHOD_7 ( anyString ( ) , any ( net . sf . json . JSONObject . class ) , METHOD_5 ( ) , anyString ( ) ) ) . thenReturn ( IDENT_2 ) ; com . IDENT_0 . core . model . IDENT_6 a = new com . IDENT_0 . core . model . IDENT_6 . Builder ( ) . name ( STRING_7 ) . build ( ) ; a . setId ( new org . bson . types . METHOD_8 ( ) ) ; java . util . List < com . IDENT_0 . core . model . messages . IDENT_7 > IDENT_8 = IDENT_4 . METHOD_4 ( a , STRING_8 , null , null ) ; int IDENT_9 = IDENT_2 . METHOD_9 ( STRING_9 ) . METHOD_10 ( STRING_9 ) . size ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . IDENT_0 . core . model . IDENT_6 , java . lang . String , java . util . Map , net . sf . json . JSONObject ) { if ( ! ( IDENT_10 ) ) { return java . util . Collections . emptyList ( ) ; } java . net . URL IDENT_11 = METHOD_11 ( IDENT_12 ) ; java . lang . String path = ( IDENT_11 . getPath ( ) ) + IDENT_13 ; net . sf . json . JSONObject response = METHOD_7 ( path , query , IDENT_14 , STRING_10 ) ; if ( response . containsKey ( STRING_11 ) ) { com . IDENT_0 . core . model . messages . IDENT_7 IDENT_15 = METHOD_12 ( response . METHOD_9 ( STRING_11 ) ) ; return com . google . common . collect . Lists . newArrayList ( IDENT_15 ) ; } else { net . sf . json . IDENT_16 IDENT_17 = response . METHOD_9 ( STRING_9 ) . METHOD_10 ( STRING_9 ) ; java . util . List < com . IDENT_0 . core . model . messages . IDENT_7 > IDENT_8 = new java . util . ArrayList ( ) ; for ( java . lang . Object IDENT_18 : IDENT_17 ) { net . sf . json . JSONObject IDENT_19 = ( ( net . sf . json . JSONObject ) ( IDENT_18 ) ) ; net . sf . json . JSONObject IDENT_20 = IDENT_19 . METHOD_9 ( STRING_11 ) ; IDENT_8 . add ( METHOD_12 ( IDENT_20 ) ) ; } return IDENT_8 ; } }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_8 . size ( ) ) 