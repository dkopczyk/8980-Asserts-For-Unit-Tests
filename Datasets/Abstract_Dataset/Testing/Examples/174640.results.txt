METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . util . Map IDENT_1 = new java . util . HashMap < java . lang . String , java . lang . String > ( 2 ) ; IDENT_1 . put ( STRING_1 , STRING_2 ) ; IDENT_1 . put ( STRING_3 , STRING_4 ) ; io . IDENT_2 . IDENT_3 . common . model . IDENT_4 expected = io . IDENT_2 . IDENT_3 . common . model . IDENT_4 . METHOD_1 ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { java . util . Map < java . lang . String , java . lang . String > IDENT_5 = new java . util . HashMap ( ) ; try { if ( ( IDENT_6 != null ) && ( ! ( IDENT_6 . isEmpty ( ) ) ) ) { java . lang . String [ ] IDENT_7 = IDENT_6 . split ( STRING_5 ) ; for ( java . lang . String IDENT_8 : IDENT_7 ) { java . lang . String [ ] fields = IDENT_8 . split ( STRING_6 ) ; IDENT_5 . put ( fields [ 0 ] . trim ( ) , fields [ 1 ] . trim ( ) ) ; } } } catch ( java . lang . Exception e ) { throw new java . lang . IllegalArgumentException ( ( STRING_7 + IDENT_6 ) , e ) ; } return new io . IDENT_2 . IDENT_3 . common . model . METHOD_3 ( IDENT_5 ) ; }
org . junit . Assert . assertEquals ( expected , io . IDENT_2 . IDENT_3 . common . model . METHOD_3 . METHOD_2 ( IDENT_0 ) ) 