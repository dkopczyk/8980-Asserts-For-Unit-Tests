METHOD_0 ( ) { final byte [ ] data = new byte [ ] { 0 , 0 , 0 , 3 , ( ( byte ) ( INT_0 ) ) } ; final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( data ) ; final com . IDENT_0 . transform . IDENT_1 . IDENT_2 fixture = new com . IDENT_0 . transform . IDENT_1 . METHOD_1 ( stream ) ; fixture . METHOD_2 ( INT_1 , false ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( int , boolean ) { int IDENT_3 = ( ( index ) << ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_5 ) ) + ( offset ) ; if ( ( ( ( size ) << ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_5 ) ) - IDENT_3 ) < IDENT_6 ) { METHOD_3 ( ) ; IDENT_3 = ( ( index ) << ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_5 ) ) + ( offset ) ; } int value = 0 ; if ( IDENT_6 > 0 ) { if ( ( IDENT_3 + IDENT_6 ) > ( ( size ) << ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_5 ) ) ) { throw new java . lang . METHOD_4 ( ) ; } for ( int i = com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_7 ; ( i > 0 ) && ( ( index ) < ( buffer . length ) ) ; i OP_0 com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_8 ) { value OP_1 ( ( buffer [ ( ( index ) ++ ) ] ) & ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_9 ) ) << ( i - ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_8 ) ) ; } value OP_2 offset ; if ( IDENT_10 ) { value OP_3 ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_7 ) - IDENT_6 ; } else { value OP_4 ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_7 ) - IDENT_6 ; } IDENT_3 += IDENT_6 ; index = IDENT_3 > > > ( com . IDENT_0 . transform . IDENT_1 . IDENT_4 . IDENT_11 ) ; offset = IDENT_3 & ( IDENT_12 . IDENT_13 ) ; } return value ; }
org . junit . Assert . assertEquals ( ( - 1 ) , fixture . METHOD_2 ( 4 , true ) ) 