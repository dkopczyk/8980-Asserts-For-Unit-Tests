METHOD_0 ( ) { final byte [ ] data = new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; final java . io . ByteArrayInputStream stream = new java . io . ByteArrayInputStream ( data ) ; final com . IDENT_0 . transform . IDENT_1 . IDENT_2 fixture = new com . IDENT_0 . transform . IDENT_1 . METHOD_1 ( stream ) ; final byte [ ] buffer = new byte [ ( data . length ) + 4 ] ; fixture . METHOD_2 ( buffer , 4 , data . length ) ; final byte [ ] expected = new byte [ ] { 0 , 0 , 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; "<AssertPlaceHolder>" ; } METHOD_2 ( byte [ ] , int , int ) { final int IDENT_3 = length ; int IDENT_4 = start ; int read = 0 ; int IDENT_5 ; int IDENT_6 ; while ( read < IDENT_3 ) { IDENT_5 = ( size ) - ( index ) ; IDENT_6 = IDENT_3 - read ; if ( IDENT_5 > IDENT_6 ) { IDENT_5 = IDENT_6 ; } java . lang . System . METHOD_3 ( buffer , index , bytes , IDENT_4 , IDENT_5 ) ; read += IDENT_5 ; index += IDENT_5 ; IDENT_4 += IDENT_5 ; if ( ( index ) == ( size ) ) { METHOD_4 ( ) ; } } return bytes ; }
org . junit . Assert . assertArrayEquals ( expected , buffer ) 