METHOD_0 ( ) { java . nio . file . Path IDENT_0 = org . apache . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_4 ) ; java . nio . file . Path list = org . apache . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_0 , STRING_0 ) ; java . nio . file . Path item = org . apache . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( list ) ; byte [ ] bytes = new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , INT_0 , 12 , INT_1 , INT_2 , 15 , 16 , INT_3 , INT_4 , INT_5 , 20 , INT_6 , INT_7 , INT_8 , INT_9 , INT_10 , INT_11 , INT_12 , INT_13 , INT_14 , INT_15 , INT_16 , - 1 , - 2 , - 3 , - 4 , - 5 , - 6 , - 7 , - 8 , - 9 , - 10 , - INT_0 , - 12 , - INT_1 , - INT_2 , - 15 , - 16 , - INT_3 , - INT_4 , - INT_5 , - 20 , - INT_6 , - INT_7 , - INT_8 , - INT_9 , - INT_10 , - INT_11 , - INT_12 , - INT_13 , - INT_14 , - INT_15 , - INT_16 } ; java . nio . file . IDENT_5 . write ( item , bytes ) ; java . util . List IDENT_6 = ( ( java . util . List ) ( org . apache . IDENT_1 . IDENT_2 . IDENT_3 . resolve ( list , IDENT_7 . IDENT_8 ) ) ) ; "<AssertPlaceHolder>" ; java . util . List IDENT_9 = ( ( java . util . List ) ( org . apache . IDENT_1 . IDENT_2 . IDENT_3 . resolve ( list , IDENT_7 . IDENT_10 ) ) ) ; } get ( java . lang . Object ) { IDENT_11 value = super . get ( key ) ; if ( value == null ) { value = METHOD_4 ( ( ( IDENT_12 ) ( key ) ) ) ; org . apache . IDENT_1 . IDENT_13 . api . impl . IDENT_14 . put ( ( ( IDENT_12 ) ( key ) ) , value ) ; } return value ; }
org . junit . Assert . assertArrayEquals ( bytes , ( ( byte [ ] ) ( IDENT_6 . get ( 0 ) ) ) ) 