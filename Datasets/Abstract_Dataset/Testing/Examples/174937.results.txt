METHOD_0 ( ) { long IDENT_0 = 3 ; IDENT_1 . METHOD_1 ( ( ( IDENT_2 ) - IDENT_0 ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( long , java . util . concurrent . TimeUnit ) { me . IDENT_3 . IDENT_4 . util . Assert . METHOD_3 ( ( n >= 0 ) , STRING_0 ) ; me . IDENT_3 . IDENT_4 . util . Assert . METHOD_3 ( ( IDENT_5 != null ) , STRING_1 ) ; if ( ( METHOD_4 ( ) ) >= n ) { return 0L ; } else { long IDENT_6 = ( IDENT_7 ) - ( java . lang . System . currentTimeMillis ( ) ) ; if ( IDENT_6 < 0 ) return METHOD_2 ( n , IDENT_5 ) ; else return IDENT_5 . convert ( IDENT_6 , TimeUnit . IDENT_8 ) ; } }
org . junit . Assert . assertTrue ( ( ( IDENT_1 . METHOD_2 ( ( IDENT_0 + 1 ) , TimeUnit . IDENT_8 ) ) > 0 ) ) 