METHOD_0 ( ) { net . IDENT_0 . text . IDENT_1 component = IDENT_2 . IDENT_3 . parse ( ( ( ( ( org . IDENT_4 . IDENT_5 . IDENT_6 ) + STRING_0 ) + ( org . IDENT_4 . IDENT_5 . IDENT_6 ) ) + STRING_1 ) ) ; net . IDENT_0 . text . IDENT_7 expected = net . IDENT_0 . text . IDENT_7 . of ( "foo" ) . METHOD_1 ( IDENT_8 . IDENT_9 , true ) . METHOD_1 ( IDENT_8 . IDENT_10 , true ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { try { source = ( STRING_2 + source ) + STRING_3 ; javax . xml . IDENT_11 . IDENT_12 context = javax . xml . IDENT_11 . IDENT_12 . newInstance ( com . IDENT_13 . commons . IDENT_4 . text . xml . Element . class ) ; javax . xml . IDENT_11 . IDENT_14 IDENT_15 = context . METHOD_2 ( ) ; com . IDENT_13 . commons . IDENT_4 . text . xml . Element IDENT_16 = ( ( com . IDENT_13 . commons . IDENT_4 . text . xml . Element ) ( IDENT_15 . METHOD_3 ( new java . io . METHOD_4 ( source ) ) ) ) ; net . IDENT_0 . text . IDENT_7 . Builder builder = net . IDENT_0 . text . IDENT_7 . builder ( ) . content ( "" ) ; IDENT_16 . apply ( builder ) ; IDENT_16 . METHOD_5 ( builder ) ; return builder . build ( ) ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( ( STRING_4 + source ) , e ) ; } }
org . junit . Assert . assertEquals ( expected , component ) 