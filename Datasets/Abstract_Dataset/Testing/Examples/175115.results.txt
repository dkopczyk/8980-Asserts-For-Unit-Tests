METHOD_0 ( ) { java . util . ArrayList < edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . IDENT_3 > METHOD_0 = new java . util . ArrayList < edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . IDENT_3 > ( ) ; METHOD_0 . add ( new edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 ( "" , 3 , 0 ) ) ; METHOD_0 . add ( new edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 ( "" , 2 , 0 ) ) ; METHOD_0 . add ( new edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 ( "" , 5 , 0 ) ) ; METHOD_0 . add ( new edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 ( "" , 1 , 0 ) ) ; METHOD_0 . add ( new edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 ( "" , 4 , 0 ) ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( STRING_0 ) ; for ( edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 entry : METHOD_0 ) sb . append ( entry . toString ( ) ) ; edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . METHOD_1 . METHOD_2 ( METHOD_0 ) ; sb . append ( STRING_1 ) ; for ( int i = 0 ; i < ( METHOD_0 . size ( ) ) ; i ++ ) { if ( i != 0 ) { int IDENT_4 = METHOD_0 . get ( ( i - 1 ) ) . IDENT_5 ; int IDENT_6 = METHOD_0 . get ( i ) . IDENT_5 ; "<AssertPlaceHolder>" ; } sb . append ( METHOD_0 . get ( i ) . toString ( ) ) ; } edu . IDENT_0 . cs . IDENT_1 . input . IDENT_2 . IDENT_7 . LOGGER . info ( sb . toString ( ) ) ; } get ( java . lang . Object ) { assert o instanceof edu . IDENT_0 . cs . IDENT_1 . IDENT_8 . IDENT_9 ; for ( int i = 0 ; i < ( keys . length ) ; i ++ ) if ( keys [ i ] . equals ( o ) ) return IDENT_10 [ i ] ; throw new java . lang . RuntimeException ( new edu . IDENT_0 . cs . IDENT_1 . IDENT_8 . exceptions . METHOD_3 ( java . lang . String . format ( STRING_2 , o . toString ( ) ) ) ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_4 < IDENT_6 ) || ( IDENT_4 == IDENT_6 ) ) ) 