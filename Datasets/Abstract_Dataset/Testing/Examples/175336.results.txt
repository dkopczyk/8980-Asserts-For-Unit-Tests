METHOD_0 ( ) { com . IDENT_0 . internal . kernel . IDENT_1 . METHOD_1 ( new com . IDENT_0 . runtime . IDENT_2 . METHOD_2 ( ) ) ; com . IDENT_0 . device . IDENT_3 device = com . IDENT_0 . internal . kernel . IDENT_1 . instance ( ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . IDENT_0 . device . IDENT_3 , int ) { final int IDENT_4 = 100 ; final int [ ] IDENT_5 = new int [ size ] ; final com . IDENT_0 . runtime . IDENT_2 . IDENT_6 IDENT_7 = new com . IDENT_0 . runtime . IDENT_2 . METHOD_5 ( ) ; final com . IDENT_0 . runtime . IDENT_2 . METHOD_5 IDENT_8 = new com . IDENT_0 . runtime . IDENT_2 . METHOD_6 ( ) ; java . util . List < com . IDENT_0 . runtime . IDENT_2 . METHOD_5 > IDENT_9 = new java . util . ArrayList < com . IDENT_0 . runtime . IDENT_2 . METHOD_5 > ( 2 ) ; IDENT_9 . add ( IDENT_7 ) ; IDENT_9 . add ( IDENT_8 ) ; final com . IDENT_0 . runtime . IDENT_2 . IDENT_10 [ ] results = new com . IDENT_0 . runtime . IDENT_2 . IDENT_10 [ 2 ] ; results [ 0 ] = new com . IDENT_0 . runtime . IDENT_2 . METHOD_7 ( ) ; results [ 1 ] = new com . IDENT_0 . runtime . IDENT_2 . METHOD_7 ( ) ; boolean IDENT_11 = false ; try { java . util . concurrent . IDENT_12 IDENT_13 = java . util . concurrent . IDENT_14 . METHOD_8 ( 2 ) ; try { IDENT_9 . METHOD_9 ( ( k ) -> IDENT_13 . METHOD_10 ( ( ) -> { results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_15 = java . lang . System . currentTimeMillis ( ) ; for ( int i = 0 ; i < IDENT_4 ; i ++ ) { results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_16 = java . util . Arrays . METHOD_11 ( IDENT_5 , IDENT_5 . length ) ; k . METHOD_12 ( results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_16 ) ; k . execute ( com . IDENT_0 . IDENT_17 . create ( device , size , size ) ) ; results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_18 = k . METHOD_13 ( ) ; results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_19 += results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_18 ; results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_20 = k . METHOD_14 ( ) ; } results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_21 = ( java . lang . System . currentTimeMillis ( ) ) - ( results [ ( ( k . getId ( ) ) - 1 ) ] . IDENT_15 ) ; } ) ) ; } finally { IDENT_13 . METHOD_15 ( ) ; try { IDENT_11 = IDENT_13 . METHOD_16 ( 5 , TimeUnit . IDENT_22 ) ; } catch ( java . lang . IDENT_23 ex ) { IDENT_11 = false ; } if ( ! IDENT_11 ) { IDENT_13 . METHOD_17 ( ) ; } } org . junit . Assert . assertTrue ( IDENT_11 ) ; java . lang . ref . IDENT_24 < com . IDENT_0 . IDENT_25 > IDENT_26 = IDENT_7 . METHOD_18 ( device ) ; com . IDENT_0 . IDENT_25 report = IDENT_26 . get ( ) ; org . junit . Assert . assertEquals ( STRING_0 , IDENT_4 , report . METHOD_19 ( ) ) ; org . junit . Assert . assertEquals ( STRING_1 , results [ 0 ] . IDENT_19 , IDENT_7 . METHOD_20 ( ) , FLOAT_0 ) ; org . junit . Assert . assertEquals ( STRING_2 , results [ 0 ] . IDENT_18 , report . METHOD_13 ( ) , FLOAT_0 ) ; org . junit . Assert . assertEquals ( STRING_3 , results [ 0 ] . IDENT_20 , report . METHOD_14 ( ) , FLOAT_0 ) ; org . junit . Assert . assertTrue ( METHOD_21 ( IDENT_5 , results [ 0 ] . IDENT_16 ) ) ; IDENT_26 = IDENT_8 . METHOD_18 ( device ) ; report = IDENT_26 . get ( ) ; org . junit . Assert . assertEquals ( STRING_0 , IDENT_4 , report . METHOD_19 ( ) ) ; org . junit . Assert . assertEquals ( STRING_1 , results [ 1 ] . IDENT_19 , IDENT_8 . METHOD_20 ( ) , FLOAT_0 ) ; org . junit . Assert . assertEquals ( STRING_2 , results [ 1 ] . IDENT_18 , report . METHOD_13 ( ) , FLOAT_0 ) ; org . junit . Assert . assertEquals ( STRING_3 , results [ 1 ] . IDENT_20 , report . METHOD_14 ( ) , FLOAT_0 ) ; org . junit . Assert . assertTrue ( METHOD_22 ( IDENT_5 , results [ 1 ] . IDENT_16 ) ) ; } finally { IDENT_7 . METHOD_23 ( null ) ; IDENT_8 . METHOD_23 ( null ) ; IDENT_7 . METHOD_24 ( ) ; IDENT_8 . METHOD_24 ( ) ; } return true ; }
org . junit . Assert . assertTrue ( METHOD_4 ( device , 16 ) ) 