METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; int [ ] IDENT_2 = new int [ ] { 0 , 1 , 2 , 2 } ; org . IDENT_3 . IDENT_4 . IDENT_5 IDENT_6 = new org . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; METHOD_2 ( IDENT_6 , IDENT_0 ) ; org . IDENT_3 . IDENT_4 . IDENT_7 IDENT_8 = new org . IDENT_3 . IDENT_4 . METHOD_3 ( ) ; METHOD_2 ( IDENT_8 , IDENT_1 ) ; for ( int i = 1 ; i < 4 ; i ++ ) { int IDENT_9 = IDENT_6 . METHOD_4 ( i ) ; int IDENT_10 = IDENT_8 . METHOD_5 ( ( i - 1 ) ) ; int IDENT_11 = ( i - 1 ) + ( IDENT_2 [ ( IDENT_10 - 1 ) ] ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( int ) { int IDENT_12 = pos / ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_14 ) ; int ret = ( IDENT_12 > 0 ) ? ( IDENT_12 * ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_14 ) ) - ( IDENT_15 [ ( IDENT_12 - 1 ) ] ) : 0 ; int n = pos / ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_16 ) ; for ( int i = ( IDENT_12 * ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_14 ) ) / ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_16 ) ; i < n ; i ++ ) { ret += java . lang . Long . METHOD_6 ( IDENT_17 [ i ] ) ; } return ret + ( java . lang . Long . METHOD_6 ( ( ( IDENT_17 [ n ] ) & ( - INT_0 > > ( pos OP_0 ( org . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_16 ) ) ) ) ) ) ; }
org . junit . Assert . assertEquals ( ( i + "" ) , IDENT_9 , IDENT_11 ) 