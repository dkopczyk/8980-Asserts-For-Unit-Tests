METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) . put ( IDENT_1 . IDENT_2 . METHOD_2 ( ) , STRING_0 ) ; boolean set = org . talend . core . runtime . repository . item . IDENT_3 . METHOD_3 ( IDENT_0 , null ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . talend . core . model . properties . IDENT_4 , org . talend . core . model . properties . IDENT_5 ) { if ( property == null ) { return false ; } if ( org . talend . core . runtime . repository . item . IDENT_3 . METHOD_4 ( property ) ) { return false ; } if ( project == null ) { project = org . talend . repository . IDENT_6 . getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( ) ; } java . util . Map < java . lang . String , java . lang . String > IDENT_7 = org . talend . core . runtime . repository . item . IDENT_3 . METHOD_7 ( project ) ; if ( IDENT_7 . isEmpty ( ) ) { return false ; } java . lang . String IDENT_8 = IDENT_7 . METHOD_8 ( ) . iterator ( ) . next ( ) ; java . lang . String version = IDENT_7 . get ( IDENT_8 ) ; java . lang . String IDENT_9 = org . talend . core . runtime . repository . item . IDENT_3 . METHOD_9 ( ) ; org . talend . core . runtime . repository . item . IDENT_3 . METHOD_10 ( property , IDENT_8 , version , IDENT_9 ) ; return true ; }
org . junit . Assert . assertFalse ( set ) 