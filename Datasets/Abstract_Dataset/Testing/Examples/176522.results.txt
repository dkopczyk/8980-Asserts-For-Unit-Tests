METHOD_0 ( ) { java . util . List < org . talend . core . model . process . IDENT_0 > parameters = new java . util . ArrayList < org . talend . core . model . process . IDENT_0 > ( ) ; IDENT_1 = METHOD_1 ( STRING_0 , false , STRING_1 ) ; IDENT_2 = METHOD_1 ( STRING_2 , false , STRING_3 ) ; IDENT_3 = METHOD_1 ( STRING_4 , false , STRING_5 ) ; METHOD_2 ( parameters , IDENT_1 , IDENT_2 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } evaluate ( java . lang . String , java . util . List , org . talend . IDENT_4 . core . model . components . IDENT_5 ) { if ( Boolean . IDENT_6 . toString ( ) . equals ( string ) ) { return false ; } if ( Boolean . IDENT_7 . toString ( ) . equals ( string ) ) { return true ; } if ( ( string . contains ( STRING_6 ) ) && ( ( org . talend . IDENT_4 . core . model . components . IDENT_8 . METHOD_3 ( string , org . talend . IDENT_4 . core . model . components . IDENT_8 . IDENT_9 ) ) || ( org . talend . IDENT_4 . core . model . components . IDENT_8 . METHOD_3 ( string , org . talend . IDENT_4 . core . model . components . IDENT_8 . IDENT_10 ) ) ) ) { return org . talend . IDENT_4 . core . model . components . IDENT_8 . METHOD_4 ( new org . talend . IDENT_4 . core . model . components . METHOD_5 ( string ) , IDENT_11 , IDENT_12 ) . isValid ( ) ; } else { java . lang . String IDENT_13 ; IDENT_13 = string . replace ( STRING_6 , "" ) ; IDENT_13 = IDENT_13 . replace ( STRING_7 , "" ) ; return org . talend . IDENT_4 . core . model . components . METHOD_5 . METHOD_6 ( IDENT_13 , IDENT_11 , IDENT_12 ) ; } }
org . junit . Assert . assertFalse ( org . talend . IDENT_4 . core . model . components . METHOD_5 . evaluate ( STRING_5 , parameters , IDENT_3 ) ) 