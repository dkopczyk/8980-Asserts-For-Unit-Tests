METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) ; IDENT_0 . add ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ; org . talend . IDENT_1 . IDENT_5 . client . IDENT_6 IDENT_7 = new org . talend . IDENT_1 . IDENT_5 . client . METHOD_2 ( ) ; java . util . List < java . lang . String > list = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_7 . METHOD_3 ( "test" , list ) ; expect ( IDENT_8 . METHOD_4 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_9 ) ) . METHOD_5 ( IDENT_0 ) ; expect ( IDENT_8 . METHOD_6 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_9 , org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ) . METHOD_5 ( IDENT_10 ) ; expect ( IDENT_10 . METHOD_7 ( ) ) . METHOD_5 ( IDENT_7 ) ; METHOD_8 ( ) ; javax . xml . ws . IDENT_11 . IDENT_12 IDENT_13 ; javax . xml . ws . IDENT_11 . IDENT_12 IDENT_14 ; javax . xml . ws . IDENT_11 . IDENT_15 builder = new javax . xml . ws . IDENT_11 . METHOD_9 ( ) ; builder . address ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_4 ) ; org . talend . IDENT_1 . IDENT_5 . client . internal . IDENT_16 IDENT_17 = new org . talend . IDENT_1 . IDENT_5 . client . internal . METHOD_10 ( ) ; javax . xml . transform . dom . IDENT_18 result = new javax . xml . transform . dom . METHOD_11 ( ) ; IDENT_17 . METHOD_12 ( IDENT_7 , result ) ; org . w3c . dom . Document IDENT_19 = ( ( org . w3c . dom . Document ) ( result . METHOD_13 ( ) ) ) ; builder . metadata ( IDENT_19 . METHOD_14 ( ) ) ; IDENT_14 = builder . build ( ) ; IDENT_13 = IDENT_20 . METHOD_15 ( org . talend . IDENT_1 . IDENT_2 . service . rest . IDENT_3 . IDENT_9 . toString ( ) , new java . util . ArrayList < java . lang . String > ( ) ) ; "<AssertPlaceHolder>" ; } toString ( ) { if ( ( ( ( ( IDENT_21 ) == null ) || ( IDENT_21 . isEmpty ( ) ) ) || ( ( IDENT_22 ) == null ) ) || ( IDENT_22 . isEmpty ( ) ) ) { return STRING_0 ; } final java . lang . StringBuilder buf = new java . lang . StringBuilder ( STRING_1 ) ; buf . append ( IDENT_21 ) . append ( STRING_2 ) . append ( encode ( IDENT_22 ) ) ; if ( ! ( parameters . isEmpty ( ) ) ) { buf . append ( STRING_3 ) ; boolean IDENT_23 = false ; for ( java . util . Map . Entry < java . lang . String , java . lang . String > param : parameters . entrySet ( ) ) { if ( IDENT_23 ) { buf . append ( STRING_4 ) ; } else { IDENT_23 = true ; } buf . append ( encode ( param . getKey ( ) ) ) ; final java . lang . String value = param . getValue ( ) ; if ( ( value != null ) && ( ( value . length ( ) ) > 0 ) ) { buf . append ( STRING_5 ) . append ( encode ( value ) ) ; } } } return buf . toString ( ) ; }
org . junit . Assert . assertTrue ( IDENT_13 . toString ( ) . equals ( IDENT_14 . toString ( ) ) ) 