METHOD_0 ( ) { org . talend . IDENT_0 . policy . IDENT_1 . IDENT_2 provider = new org . talend . IDENT_0 . policy . IDENT_1 . METHOD_1 ( ) ; provider . METHOD_2 ( ) ; try { METHOD_3 ( STRING_0 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } METHOD_3 ( java . lang . String ) { java . util . List < org . apache . IDENT_3 . IDENT_4 > IDENT_5 = new java . util . ArrayList < org . apache . IDENT_3 . IDENT_4 > ( ) ; javax . xml . IDENT_6 . IDENT_7 IDENT_8 = javax . xml . IDENT_6 . IDENT_7 . newInstance ( ) ; javax . xml . IDENT_6 . IDENT_9 builder = IDENT_8 . METHOD_4 ( ) ; org . w3c . dom . Document doc = builder . METHOD_5 ( ) ; org . w3c . dom . Element element = doc . METHOD_6 ( STRING_2 ) ; doc . METHOD_7 ( element ) ; element . METHOD_8 ( STRING_3 , IDENT_10 ) ; IDENT_5 . add ( new org . talend . IDENT_0 . policy . IDENT_1 . METHOD_9 ( element ) ) ; return IDENT_5 ; }
org . junit . Assert . assertTrue ( ( e instanceof java . lang . IllegalArgumentException ) ) 