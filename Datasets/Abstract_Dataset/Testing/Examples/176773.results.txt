METHOD_0 ( ) { org . apache . cxf . message . Message message = org . easymock . EasyMock . METHOD_1 ( org . apache . cxf . message . IDENT_0 . class ) ; org . easymock . EasyMock . expect ( message . METHOD_2 ( org . talend . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ) ) . andReturn ( Boolean . IDENT_7 ) . METHOD_3 ( ) ; org . easymock . EasyMock . replay ( message ) ; boolean result = org . talend . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 . METHOD_4 ( message , false , true ) ; org . easymock . EasyMock . verify ( message ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . apache . cxf . message . Message , boolean , boolean ) { if ( ! IDENT_9 ) { return IDENT_10 ; } java . lang . Object IDENT_11 = message . METHOD_2 ( org . talend . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 . IDENT_6 ) ; if ( null == IDENT_11 ) { return IDENT_10 ; } else if ( IDENT_11 instanceof java . lang . Boolean ) { return ( ( java . lang . Boolean ) ( IDENT_11 ) ) . METHOD_5 ( ) ; } else if ( IDENT_11 instanceof java . lang . String ) { java . lang . String IDENT_12 = ( ( java . lang . String ) ( IDENT_11 ) ) ; if ( IDENT_12 . equalsIgnoreCase ( STRING_0 ) ) { return true ; } else if ( IDENT_12 . equalsIgnoreCase ( STRING_1 ) ) { return false ; } else { return IDENT_10 ; } } else { return IDENT_10 ; } }
org . junit . Assert . assertEquals ( true , result ) 