METHOD_0 ( ) { "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( user ) . METHOD_1 ( STRING_0 ) ; } execute ( IDENT_0 . IDENT_1 . IDENT_1 . api . user . User , java . lang . String , java . util . List ) { if ( ! ( args . isEmpty ( ) ) ) { METHOD_2 ( this , user ) ; return false ; } if ( ! ( METHOD_3 ( ) . METHOD_4 ( METHOD_5 ( ) , user . METHOD_6 ( ) ) ) ) { user . METHOD_1 ( STRING_1 ) ; return false ; } IDENT_0 . IDENT_1 . IDENT_1 . database . IDENT_2 . IDENT_3 IDENT_4 = METHOD_3 ( ) . METHOD_7 ( METHOD_5 ( ) , user . METHOD_6 ( ) ) ; if ( IDENT_4 . METHOD_8 ( ) . isEmpty ( ) ) { user . METHOD_1 ( STRING_2 ) ; return true ; } user . METHOD_1 ( STRING_3 ) ; java . util . List < java . lang . String > IDENT_5 = IDENT_4 . METHOD_8 ( ) . stream ( ) . map ( ( IDENT_6 ) -> METHOD_9 ( ) . getName ( IDENT_6 ) ) . METHOD_10 ( ) . collect ( java . util . stream . IDENT_7 . toList ( ) ) ; java . util . List < java . lang . String > IDENT_8 = new java . util . ArrayList ( ) ; java . lang . StringBuilder line = new java . lang . StringBuilder ( ) ; IDENT_5 . METHOD_11 ( ( n ) -> { if ( ( ( line . length ( ) ) + ( n . length ( ) ) ) < INT_0 ) { line . append ( n ) ; } else { IDENT_8 . add ( line . toString ( ) . trim ( ) ) ; line . METHOD_12 ( 0 ) ; line . append ( n ) ; } line . append ( STRING_4 ) ; } ) ; line . METHOD_12 ( ( ( line . length ( ) ) - 2 ) ) ; if ( ( line . length ( ) ) > 0 ) { IDENT_8 . add ( line . toString ( ) ) ; } IDENT_8 . METHOD_11 ( ( l ) -> user . METHOD_1 ( STRING_5 , STRING_6 , l ) ) ; int IDENT_9 = user . METHOD_13 ( ( ( METHOD_14 ( ) ) + STRING_7 ) , METHOD_15 ( ) . METHOD_16 ( METHOD_5 ( ) ) ) ; if ( ( IDENT_9 <= ( - 1 ) ) || ( ( IDENT_4 . METHOD_8 ( ) . size ( ) ) < IDENT_9 ) ) { user . METHOD_1 ( STRING_8 , IDENT_10 . IDENT_11 , java . lang . String . valueOf ( ( IDENT_9 - ( IDENT_4 . METHOD_8 ( ) . size ( ) ) ) ) ) ; } return true ; }
org . junit . Assert . assertFalse ( list . execute ( user , "" , java . util . Collections . emptyList ( ) ) ) 