METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_1 . database . IDENT_2 . IDENT_3 is = mock ( IDENT_0 . IDENT_1 . IDENT_1 . database . IDENT_2 . IDENT_3 . class ) ; java . util . Collection < IDENT_0 . IDENT_1 . IDENT_1 . database . IDENT_2 . IDENT_3 > collection = new java . util . ArrayList ( ) ; collection . add ( is ) ; when ( IDENT_4 . METHOD_1 ( ) ) . thenReturn ( collection ) ; IDENT_0 . IDENT_1 . IDENT_1 . IDENT_5 . IDENT_6 IDENT_7 = new IDENT_0 . IDENT_1 . IDENT_1 . IDENT_5 . METHOD_2 ( plugin ) ; IDENT_7 . METHOD_3 ( IDENT_4 ) ; java . util . Map < java . util . UUID , java . lang . Integer > IDENT_8 = new java . util . HashMap ( ) ; when ( is . METHOD_4 ( ) ) . thenReturn ( IDENT_8 ) ; IDENT_8 . put ( user . METHOD_5 ( ) , IDENT_9 . IDENT_10 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_11 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_12 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_12 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_12 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_13 ) ; IDENT_8 . put ( java . util . UUID . METHOD_6 ( ) , IDENT_9 . IDENT_13 ) ; IDENT_7 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_4 ) . METHOD_8 ( ) ; } size ( ) { return IDENT_14 . size ( ) ; }
org . junit . Assert . assertEquals ( 10 , IDENT_8 . size ( ) ) 