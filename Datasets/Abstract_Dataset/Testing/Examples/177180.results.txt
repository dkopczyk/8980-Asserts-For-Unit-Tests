METHOD_0 ( ) { java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( ) ; byte [ ] a = new byte [ 1 + ( IDENT_1 . METHOD_2 ( 100 ) ) ] ; IDENT_1 . METHOD_3 ( a ) ; int [ ] b = net . sf . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( new java . math . BigInteger ( 1 , a ) ) ; java . math . BigInteger c = net . sf . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_5 ( b ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( int [ ] ) { byte [ ] b = new byte [ ( a . length ) * 4 ] ; for ( int i = 0 ; i < ( a . length ) ; i ++ ) { int IDENT_5 = ( ( a . length ) - 1 ) - i ; b [ ( i * 4 ) ] = ( ( byte ) ( ( a [ IDENT_5 ] ) > > > INT_0 ) ) ; b [ ( ( i * 4 ) + 1 ) ] = ( ( byte ) ( ( ( a [ IDENT_5 ] ) > > > 16 ) & 255 ) ) ; b [ ( ( i * 4 ) + 2 ) ] = ( ( byte ) ( ( ( a [ IDENT_5 ] ) > > > 8 ) & 255 ) ) ; b [ ( ( i * 4 ) + 3 ) ] = ( ( byte ) ( ( a [ IDENT_5 ] ) & 255 ) ) ; } return new java . math . BigInteger ( 1 , b ) ; }
org . junit . Assert . assertEquals ( new java . math . BigInteger ( 1 , a ) , c ) 