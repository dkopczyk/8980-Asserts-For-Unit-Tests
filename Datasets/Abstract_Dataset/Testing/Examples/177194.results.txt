METHOD_0 ( ) { int [ ] IDENT_0 = net . sf . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( 1000 , INT_0 ) . IDENT_0 ; byte [ ] data = net . sf . IDENT_1 . util . IDENT_4 . METHOD_2 ( IDENT_0 , INT_0 ) ; int [ ] IDENT_5 = net . sf . IDENT_1 . util . IDENT_4 . METHOD_3 ( data , 1000 , INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( byte [ ] , int , int ) { int [ ] IDENT_0 = new int [ IDENT_6 ] ; int IDENT_7 = INT_1 - ( java . lang . Integer . METHOD_4 ( q ) ) ; int IDENT_8 = ( - 1 ) > > > ( INT_2 - IDENT_7 ) ; int IDENT_9 = 0 ; int IDENT_10 = 0 ; int IDENT_11 = 0 ; int IDENT_12 = 0 ; int IDENT_13 = 0 ; while ( IDENT_13 < IDENT_6 ) { while ( IDENT_12 < IDENT_7 ) { IDENT_11 += ( ( data [ IDENT_9 ] ) & 255 ) << IDENT_12 ; IDENT_12 += 8 - IDENT_10 ; IDENT_9 ++ ; IDENT_10 = 0 ; } IDENT_0 [ IDENT_13 ] = IDENT_11 & IDENT_8 ; IDENT_13 ++ ; IDENT_11 OP_0 IDENT_7 ; IDENT_12 OP_1 IDENT_7 ; } return IDENT_0 ; }
org . junit . Assert . assertArrayEquals ( IDENT_0 , IDENT_5 ) 