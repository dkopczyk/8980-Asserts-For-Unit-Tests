METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; io . github . IDENT_1 . IDENT_2 . api . message . Message IDENT_3 = io . github . IDENT_1 . IDENT_2 . support . TestUtils . METHOD_1 ( io . github . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 . IDENT_6 , IDENT_0 ) ; io . github . IDENT_1 . IDENT_2 . api . message . Message IDENT_7 = io . github . IDENT_1 . IDENT_2 . support . TestUtils . METHOD_1 ( io . github . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_5 . IDENT_6 , IDENT_0 ) ; int IDENT_8 = 200 ; int IDENT_9 = 2 ; when ( IDENT_10 . METHOD_2 ( ) ) . thenReturn ( 0 ) ; when ( IDENT_10 . METHOD_3 ( ) ) . thenReturn ( IDENT_8 ) ; when ( IDENT_10 . METHOD_4 ( ) ) . thenReturn ( IDENT_9 ) ; java . util . function . IDENT_11 < io . github . IDENT_1 . IDENT_2 . api . message . payload . IDENT_12 , io . github . IDENT_1 . IDENT_2 . api . IDENT_13 > IDENT_14 = mock ( java . util . function . IDENT_11 . class ) ; when ( IDENT_15 . METHOD_5 ( ) ) . thenReturn ( METHOD_5 ) ; METHOD_6 ( new java . lang . RuntimeException ( STRING_1 ) ) . when ( METHOD_5 ) . accept ( any ( ) , any ( ) ) ; io . github . IDENT_1 . IDENT_2 . api . IDENT_16 < java . lang . IDENT_17 > IDENT_18 = mock ( io . github . IDENT_1 . IDENT_2 . api . IDENT_16 . class ) ; when ( IDENT_15 . METHOD_7 ( ) ) . thenReturn ( METHOD_7 ) ; io . github . IDENT_1 . IDENT_2 . IDENT_4 . IDENT_19 < io . github . IDENT_1 . IDENT_2 . api . message . payload . IDENT_12 > IDENT_4 = METHOD_8 ( ) ; IDENT_4 . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; METHOD_10 ( IDENT_4 , 2 ) ; IDENT_4 . METHOD_11 ( IDENT_3 , null ) ; verify ( METHOD_7 , METHOD_12 ( ) ) . call ( any ( ) ) ; IDENT_4 . METHOD_11 ( IDENT_7 , null ) ; verify ( METHOD_7 , times ( 1 ) ) . call ( any ( ) ) ; } METHOD_13 ( ) { if ( IDENT_20 . isEmpty ( ) ) { return IDENT_9 ; } java . lang . Integer IDENT_21 = 0 ; for ( java . lang . Integer IDENT_22 : IDENT_20 . values ( ) ) { IDENT_21 += IDENT_22 ; } return java . lang . Math . max ( IDENT_9 , IDENT_21 ) ; }
org . junit . Assert . assertEquals ( IDENT_9 , IDENT_4 . METHOD_13 ( ) ) 