METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_1 = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_5 < java . lang . Integer > IDENT_6 = IDENT_1 . METHOD_2 ( com . google . common . collect . Lists . newArrayList ( 1 , 2 , 3 ) ) ; com . IDENT_0 . IDENT_1 . IDENT_5 < java . lang . Integer > IDENT_7 = IDENT_1 . METHOD_2 ( com . google . common . collect . Lists . newArrayList ( 4 , 5 , 6 ) ) ; com . IDENT_0 . IDENT_1 . IDENT_5 < java . lang . Integer > output = IDENT_1 . METHOD_3 ( IDENT_6 . map ( IDENT_8 , com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_5 ( ) , com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_5 ( ) ) ) . METHOD_6 ( ) , IDENT_7 . map ( IDENT_8 , com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_4 ( com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_5 ( ) , com . IDENT_0 . IDENT_1 . IDENT_9 . METHOD_5 ( ) ) ) . METHOD_6 ( ) ) . map ( new com . IDENT_0 . IDENT_1 . IDENT_10 < com . IDENT_0 . IDENT_1 . IDENT_11 < java . lang . Integer , java . lang . IDENT_12 < java . lang . Integer > > , java . lang . Integer > ( ) { @ com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . Override public void process ( com . IDENT_0 . IDENT_1 . IDENT_11 < java . lang . Integer , java . lang . IDENT_12 < java . lang . Integer > > v , com . IDENT_0 . IDENT_1 . IDENT_13 < java . lang . Integer > IDENT_14 ) { IDENT_14 . METHOD_7 ( 1 ) ; } } , null ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_15 > IDENT_16 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_17 . METHOD_8 ( output , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_18 . class ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . util . List , java . lang . Class ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_15 > IDENT_19 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_15 > ( ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_5 < ? > output : IDENT_20 ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_15 > IDENT_21 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_17 . METHOD_8 ( output , getClass ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . op . IDENT_15 op : IDENT_21 ) { if ( ! ( IDENT_19 . contains ( op ) ) ) { IDENT_19 . add ( op ) ; } } } return IDENT_19 ; }
org . junit . Assert . assertEquals ( IDENT_16 . size ( ) , 2 ) 