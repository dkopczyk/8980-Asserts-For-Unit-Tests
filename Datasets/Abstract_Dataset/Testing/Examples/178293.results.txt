METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; doReturn ( true ) . when ( client ) . METHOD_1 ( anyString ( ) , any ( ) ) ; com . IDENT_1 . nifi . v2 . spark . IDENT_2 IDENT_3 = new com . IDENT_1 . nifi . v2 . spark . METHOD_2 ( IDENT_0 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_5 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_6 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_7 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_8 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_9 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_10 , IDENT_11 ) ; java . lang . Thread IDENT_12 = new java . lang . Thread ( IDENT_3 ) ; com . IDENT_1 . nifi . v2 . spark . METHOD_2 IDENT_13 = new com . IDENT_1 . nifi . v2 . spark . METHOD_2 ( IDENT_0 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_5 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_6 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_7 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_8 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_9 , com . IDENT_1 . nifi . v2 . spark . IDENT_4 . IDENT_10 , IDENT_11 ) ; java . lang . Thread IDENT_14 = new java . lang . Thread ( IDENT_13 ) ; IDENT_12 . start ( ) ; IDENT_14 . start ( ) ; IDENT_12 . join ( ) ; IDENT_14 . join ( ) ; doReturn ( java . util . Collections . singletonList ( ( ( IDENT_0 + STRING_1 ) + ( IDENT_11 . METHOD_3 ( ) ) ) ) ) . when ( client ) . METHOD_4 ( ) ; boolean IDENT_15 = IDENT_11 . METHOD_5 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . String ) { java . lang . Boolean IDENT_15 = false ; try { java . util . List < java . lang . String > IDENT_16 = client . METHOD_4 ( ) ; IDENT_15 = IDENT_16 . contains ( METHOD_6 ( IDENT_0 ) ) ; if ( ! IDENT_15 ) { METHOD_7 ( ) . info ( STRING_2 , new java . lang . Object [ ] { METHOD_6 ( IDENT_0 ) , IDENT_17 } ) ; } else { METHOD_7 ( ) . info ( STRING_3 , new java . lang . Object [ ] { METHOD_6 ( IDENT_0 ) , IDENT_17 } ) ; IDENT_15 = true ; } } catch ( java . lang . Exception ex ) { METHOD_7 ( ) . trace ( ex . getMessage ( ) , ex ) ; } return IDENT_15 ; }
org . junit . Assert . assertTrue ( IDENT_15 ) 