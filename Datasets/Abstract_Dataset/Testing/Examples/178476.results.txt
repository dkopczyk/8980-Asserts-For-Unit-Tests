METHOD_0 ( ) { IDENT_0 . METHOD_1 ( STRING_0 ) ; IDENT_0 . METHOD_2 ( new java . util . IDENT_1 < java . lang . String , java . lang . String > ( ) ) ; java . lang . String IDENT_2 = IDENT_0 . METHOD_3 ( new java . lang . METHOD_4 ( STRING_1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Exception ) { if ( ex == null ) { org . IDENT_3 . IDENT_4 . common . exception . IDENT_5 . logger . warn ( STRING_2 ) ; return IDENT_6 ; } if ( ex instanceof org . IDENT_3 . IDENT_4 . common . exception . IDENT_7 ) { java . lang . String code = ( ( org . IDENT_3 . IDENT_4 . common . exception . IDENT_7 ) ( ex ) ) . getCode ( ) ; if ( code != null ) { return code ; } } if ( ( ( IDENT_8 ) == null ) || ( IDENT_8 . isEmpty ( ) ) ) { return IDENT_6 ; } for ( java . util . Map . Entry < java . lang . String , java . lang . String > entry : IDENT_8 . entrySet ( ) ) { java . lang . String IDENT_9 = entry . getKey ( ) ; java . lang . Class < ? > IDENT_10 = ex . getClass ( ) ; while ( IDENT_10 != ( java . lang . Object . class ) ) { if ( IDENT_10 . getName ( ) . contains ( IDENT_9 ) ) { return entry . getValue ( ) ; } IDENT_10 = IDENT_10 . METHOD_5 ( ) ; } } return IDENT_6 ; }
org . junit . Assert . assertThat ( IDENT_2 , org . hamcrest . CoreMatchers . is ( STRING_0 ) ) 