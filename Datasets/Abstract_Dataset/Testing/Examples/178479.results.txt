METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . common . message . IDENT_2 message = mock ( org . IDENT_0 . IDENT_1 . common . message . IDENT_2 . class ) ; org . springframework . context . IDENT_3 IDENT_4 = mock ( org . springframework . context . IDENT_3 . class ) ; java . util . Locale IDENT_5 = java . util . Locale . METHOD_1 ( ) ; when ( message . getCode ( ) ) . thenReturn ( STRING_0 ) ; when ( message . METHOD_2 ( ) ) . thenReturn ( null ) ; when ( IDENT_4 . getMessage ( STRING_0 , null , IDENT_5 ) ) . thenReturn ( STRING_1 ) ; java . lang . String msg = org . IDENT_0 . IDENT_1 . common . message . IDENT_6 . METHOD_3 ( message , IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_0 . IDENT_1 . common . message . IDENT_2 , org . springframework . context . IDENT_3 , java . util . Locale ) { org . springframework . util . Assert . METHOD_4 ( IDENT_4 , STRING_2 ) ; org . springframework . util . Assert . METHOD_4 ( message , STRING_3 ) ; org . springframework . util . Assert . METHOD_4 ( IDENT_5 , STRING_4 ) ; java . lang . String msg ; java . lang . String code = message . getCode ( ) ; if ( code != null ) { try { msg = IDENT_4 . getMessage ( code , message . METHOD_2 ( ) , IDENT_5 ) ; } catch ( org . springframework . context . IDENT_7 e ) { java . lang . String text = message . getText ( ) ; if ( text != null ) { if ( org . IDENT_0 . IDENT_1 . common . message . IDENT_6 . logger . METHOD_5 ( ) ) { org . IDENT_0 . IDENT_1 . common . message . IDENT_6 . logger . debug ( ( ( ( ( ( ( STRING_5 + code ) + STRING_6 ) + IDENT_5 ) + STRING_7 ) + text ) + STRING_8 ) , e ) ; } msg = text ; } else { throw e ; } } } else { msg = message . getText ( ) ; } return msg ; }
org . junit . Assert . assertThat ( msg , org . hamcrest . CoreMatchers . is ( STRING_1 ) ) 