METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 source = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( new org . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_2 ( ) ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 storage = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( METHOD_4 ( ) , null , source , 1 , INT_0 , false , false ) ; java . util . Map < java . lang . Integer , java . lang . Long > IDENT_6 = new java . util . HashMap ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { long IDENT_7 = storage . METHOD_5 ( ( ( Integer . IDENT_8 ) / ( IDENT_9 . IDENT_8 ) ) ) ; storage . METHOD_6 ( IDENT_7 , i ) ; IDENT_6 . put ( i , IDENT_7 ) ; } System . err . println ( storage ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { int IDENT_7 = IDENT_6 . get ( i ) . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } for ( java . lang . Long IDENT_7 : IDENT_6 . values ( ) ) { storage . METHOD_8 ( IDENT_7 ) ; } } METHOD_9 ( long ) { int IDENT_10 = METHOD_10 ( address ) ; int IDENT_11 = METHOD_11 ( address ) ; int IDENT_12 = METHOD_12 ( IDENT_10 ) ; if ( ( IDENT_11 + 4 ) <= IDENT_12 ) { return IDENT_13 . get ( IDENT_10 ) . METHOD_13 ( ) . METHOD_14 ( IDENT_11 ) ; } else { int value = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { java . nio . ByteBuffer buffer = IDENT_13 . get ( IDENT_10 ) . METHOD_13 ( ) ; value OP_0 ( 255 & ( buffer . get ( IDENT_11 ) ) ) << ( ( IDENT_9 . IDENT_8 ) * ( 3 - i ) ) ; address ++ ; IDENT_10 = METHOD_10 ( address ) ; IDENT_11 = METHOD_11 ( address ) ; } return value ; } }
org . junit . Assert . assertEquals ( i , storage . METHOD_9 ( IDENT_7 ) ) 