METHOD_0 ( ) { int port = new com . tc . util . METHOD_1 ( ) . METHOD_2 ( ) ; java . net . IDENT_0 IDENT_1 = new java . net . METHOD_3 ( port ) ; final java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_4 ( true ) ; com . tc . net . core . event . IDENT_4 listener = mock ( com . tc . net . core . event . IDENT_4 . class ) ; com . tc . net . protocol . IDENT_5 IDENT_6 = mock ( com . tc . net . protocol . IDENT_5 . class ) ; com . tc . net . core . IDENT_7 IDENT_8 = new com . tc . net . core . METHOD_5 ( ) ; final com . tc . net . core . IDENT_9 IDENT_10 = mock ( com . tc . net . core . IDENT_9 . class ) ; com . tc . net . core . IDENT_11 IDENT_12 = new com . tc . net . core . METHOD_6 ( ) ; com . tc . net . core . IDENT_13 IDENT_14 = mock ( com . tc . net . core . IDENT_13 . class ) ; com . tc . net . core . IDENT_15 IDENT_16 = mock ( com . tc . net . core . IDENT_15 . class ) ; when ( IDENT_16 . METHOD_7 ( ) ) . thenReturn ( 0 ) ; when ( IDENT_16 . METHOD_8 ( any ( java . nio . ByteBuffer . class ) ) ) . METHOD_9 ( ( i ) -> { return ( ( java . nio . ByteBuffer ) ( i . METHOD_10 ( ) [ 0 ] ) ) . METHOD_11 ( ) ; } ) ; when ( IDENT_14 . METHOD_12 ( any ( java . nio . IDENT_17 . IDENT_18 . class ) , METHOD_13 ( ) ) ) . METHOD_9 ( ( IDENT_19 ) -> { verify ( IDENT_10 , METHOD_14 ( ) ) . METHOD_15 ( any ( . class ) , any ( . class ) ) ; return IDENT_16 ; } ) ; com . tc . net . core . IDENT_20 conn = new com . tc . net . core . METHOD_16 ( listener , IDENT_6 , IDENT_8 , IDENT_10 , IDENT_12 , IDENT_14 ) ; com . tc . net . IDENT_21 IDENT_22 = new com . tc . net . METHOD_17 ( STRING_0 , port ) ; conn . connect ( IDENT_22 , 0 ) ; com . tc . net . protocol . IDENT_23 msg = mock ( com . tc . net . protocol . IDENT_23 . class ) ; when ( msg . METHOD_18 ( ) ) . thenReturn ( new com . tc . bytes . IDENT_24 [ ] { com . tc . bytes . IDENT_25 . METHOD_19 ( new byte [ INT_0 ] ) } ) ; when ( msg . METHOD_20 ( ) ) . thenReturn ( INT_0 ) ; conn . METHOD_21 ( msg ) ; new java . lang . Thread ( ( ) -> METHOD_22 ( conn ) ) . start ( ) ; int IDENT_26 = conn . METHOD_23 ( ) ; "<AssertPlaceHolder>" ; } METHOD_23 ( ) { MOD_0 ( IDENT_27 ) { return METHOD_24 ( ) ; } }
org . junit . Assert . assertEquals ( 0 , IDENT_26 ) 