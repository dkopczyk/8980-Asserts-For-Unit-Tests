METHOD_0 ( ) { java . util . List < IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . IDENT_3 > IDENT_4 = java . util . Arrays . asList ( new IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . METHOD_1 ( STRING_0 ) , new IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . METHOD_1 ( STRING_1 ) ) ; when ( IDENT_5 . METHOD_0 ( any ( IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . IDENT_6 . class ) ) ) . thenReturn ( METHOD_2 ( IDENT_4 ) ) ; java . util . List < IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . METHOD_1 > result = IDENT_0 . IDENT_1 . cs . IDENT_2 . cli . backend . IDENT_7 . METHOD_0 ( ctx ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( IDENT_0 . IDENT_1 . cs . IDENT_2 . cli . core . IDENT_8 ) { java . util . concurrent . IDENT_9 < java . util . List < IDENT_0 . IDENT_1 . cs . IDENT_2 . core . domain . METHOD_1 > > IDENT_10 = ctx . METHOD_3 ( ) . METHOD_0 ( IDENT_6 . IDENT_11 ) ; try { return IDENT_10 . call ( ) ; } catch ( java . lang . Exception e ) { IDENT_0 . IDENT_1 . cs . IDENT_2 . cli . backend . IDENT_7 . METHOD_4 ( ctx , e ) ; IDENT_0 . IDENT_1 . cs . IDENT_2 . cli . backend . IDENT_7 . logger . warn ( STRING_2 , e ) ; } return new java . util . ArrayList ( ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , result ) 