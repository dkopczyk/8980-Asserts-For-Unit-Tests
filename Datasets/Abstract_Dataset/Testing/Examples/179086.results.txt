METHOD_0 ( ) { java . util . ArrayList < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( java . util . Arrays . asList ( STRING_0 ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 > list = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 > ( ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 IDENT_8 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_1 , 0 , INT_0 , STRING_0 , STRING_0 ) ; list . add ( IDENT_8 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . IDENT_10 [ ] IDENT_11 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . IDENT_10 [ ( IDENT_12 . IDENT_13 . length ) + 1 ] ; for ( int count = 0 ; count < ( ( IDENT_11 . length ) - 1 ) ; count ++ ) { IDENT_11 [ count ] = edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_14 . test . IDENT_12 . IDENT_13 [ count ] ; } IDENT_11 [ ( ( IDENT_11 . length ) - 1 ) ] = edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_15 . IDENT_16 ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_17 [ ] IDENT_18 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_17 [ ] { new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_3 ( STRING_0 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_3 ( STRING_2 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_4 ( INT_1 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_5 ( FLOAT_0 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_6 ( new java . text . METHOD_7 ( STRING_3 ) . parse ( STRING_4 ) ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_8 ( STRING_5 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_19 < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 > ( list ) } ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . IDENT_20 IDENT_21 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 ( new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . Schema ( IDENT_11 ) , IDENT_18 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > IDENT_22 = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > ( ) ; IDENT_22 . add ( IDENT_21 ) ; java . util . List < java . lang . String > IDENT_23 = java . util . Arrays . asList ( IDENT_12 . IDENT_24 , IDENT_12 . IDENT_25 , IDENT_12 . IDENT_26 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > IDENT_27 = edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_28 . METHOD_10 ( edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_15 . IDENT_29 , IDENT_7 , IDENT_23 , IDENT_30 . IDENT_31 ) ; boolean contains = edu . IDENT_1 . IDENT_2 . IDENT_3 . api . utils . TestUtils . equals ( IDENT_22 , IDENT_27 ) ; "<AssertPlaceHolder>" ; } equals ( java . util . List , java . util . List ) { IDENT_22 = METHOD_9 . Builder . METHOD_11 ( IDENT_22 , IDENT_32 . IDENT_33 , IDENT_32 . IDENT_34 ) ; IDENT_35 = METHOD_9 . Builder . METHOD_11 ( IDENT_35 , IDENT_32 . IDENT_33 , IDENT_32 . IDENT_34 ) ; if ( ( IDENT_22 . size ( ) ) != ( IDENT_35 . size ( ) ) ) return false ; return ( IDENT_22 . METHOD_12 ( IDENT_35 ) ) && ( IDENT_35 . METHOD_12 ( IDENT_22 ) ) ; }
org . junit . Assert . assertTrue ( contains ) 