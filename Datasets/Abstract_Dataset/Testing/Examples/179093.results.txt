METHOD_0 ( ) { java . util . ArrayList < java . lang . String > IDENT_0 = new java . util . ArrayList < java . lang . String > ( java . util . Arrays . asList ( STRING_0 ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 > list = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 > ( ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . IDENT_9 IDENT_10 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_1 , 0 , INT_0 , STRING_0 , STRING_0 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 IDENT_11 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_2 , 0 , 3 , STRING_3 , STRING_4 , 0 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 IDENT_12 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_2 , 4 , INT_0 , STRING_5 , STRING_6 , 1 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 IDENT_13 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_2 , INT_1 , INT_2 , STRING_3 , STRING_3 , 5 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 IDENT_14 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 ( STRING_2 , INT_3 , INT_4 , STRING_5 , STRING_5 , 6 ) ; list . add ( IDENT_10 ) ; list . add ( IDENT_11 ) ; list . add ( IDENT_12 ) ; list . add ( IDENT_13 ) ; list . add ( IDENT_14 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . IDENT_15 [ ] IDENT_16 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . IDENT_15 [ ( IDENT_17 . IDENT_18 . length ) + 1 ] ; for ( int count = 0 ; count < ( ( IDENT_16 . length ) - 1 ) ; count ++ ) { IDENT_16 [ count ] = edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_19 . test . IDENT_17 . IDENT_18 [ count ] ; } IDENT_16 [ ( ( IDENT_16 . length ) - 1 ) ] = edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_20 . IDENT_21 ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_22 [ ] IDENT_23 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_22 [ ] { new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_3 ( STRING_7 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_3 ( STRING_0 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_4 ( INT_5 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_5 ( FLOAT_0 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_6 ( new java . text . METHOD_7 ( STRING_8 ) . parse ( STRING_9 ) ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . METHOD_8 ( STRING_4 0 ) , new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . field . IDENT_24 < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . IDENT_8 . METHOD_2 > ( list ) } ; edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . IDENT_25 IDENT_26 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 ( new edu . IDENT_1 . IDENT_2 . IDENT_3 . api . schema . Schema ( IDENT_16 ) , IDENT_23 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > IDENT_27 = new java . util . ArrayList < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > ( ) ; IDENT_27 . add ( IDENT_26 ) ; java . util . List < java . lang . String > IDENT_28 = java . util . Arrays . asList ( IDENT_17 . IDENT_29 , IDENT_17 . IDENT_30 , IDENT_17 . IDENT_31 ) ; java . util . List < edu . IDENT_1 . IDENT_2 . IDENT_3 . api . tuple . METHOD_9 > IDENT_32 = edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_33 . METHOD_10 ( edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_20 . IDENT_34 , IDENT_7 , IDENT_28 , IDENT_35 . IDENT_36 ) ; boolean contains = edu . IDENT_1 . IDENT_2 . IDENT_3 . api . utils . TestUtils . equals ( IDENT_27 , IDENT_32 ) ; "<AssertPlaceHolder>" ; } equals ( java . util . List , java . util . List ) { IDENT_27 = METHOD_9 . Builder . METHOD_11 ( IDENT_27 , IDENT_37 . IDENT_38 , IDENT_37 . IDENT_39 ) ; IDENT_40 = METHOD_9 . Builder . METHOD_11 ( IDENT_40 , IDENT_37 . IDENT_38 , IDENT_37 . IDENT_39 ) ; if ( ( IDENT_27 . size ( ) ) != ( IDENT_40 . size ( ) ) ) return false ; return ( IDENT_27 . METHOD_12 ( IDENT_40 ) ) && ( IDENT_40 . METHOD_12 ( IDENT_27 ) ) ; }
org . junit . Assert . assertTrue ( contains ) 