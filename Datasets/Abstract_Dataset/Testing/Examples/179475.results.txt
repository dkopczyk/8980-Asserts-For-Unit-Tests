METHOD_0 ( ) { java . util . IDENT_0 r = new java . util . METHOD_1 ( java . lang . System . currentTimeMillis ( ) ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { long IDENT_1 = ( java . lang . System . currentTimeMillis ( ) ) + ( ( ( ( ( 1000 * INT_1 ) * INT_1 ) * INT_2 ) * INT_3 ) * 10 ) ; long IDENT_2 = ( ( long ) ( ( java . lang . Math . random ( ) ) * IDENT_1 ) ) ; long IDENT_3 = ( ( long ) ( ( java . lang . Math . random ( ) ) * IDENT_1 ) ) ; if ( IDENT_2 > IDENT_3 ) { long IDENT_4 = IDENT_3 ; IDENT_3 = IDENT_2 ; IDENT_2 = IDENT_4 ; } java . lang . String IDENT_5 = org . IDENT_6 . server . common . data . IDENT_7 . METHOD_2 ( com . IDENT_8 . driver . core . utils . IDENT_9 . METHOD_3 ( IDENT_2 ) ) ; java . lang . String IDENT_10 = org . IDENT_6 . server . common . data . IDENT_7 . METHOD_2 ( com . IDENT_8 . driver . core . utils . IDENT_9 . METHOD_3 ( IDENT_3 ) ) ; if ( ( IDENT_10 . compareTo ( IDENT_5 ) ) < 0 ) { System . out . println ( ( ( ( STRING_0 + IDENT_2 ) + STRING_1 ) + IDENT_5 ) ) ; System . out . println ( ( ( ( STRING_2 + IDENT_3 ) + STRING_1 ) + IDENT_10 ) ) ; } "<AssertPlaceHolder>" ; } } compareTo ( org . IDENT_6 . server . service . IDENT_11 . IDENT_12 ) { return java . lang . Long . compare ( IDENT_1 , o . IDENT_1 ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_10 . compareTo ( IDENT_5 ) ) >= 0 ) ) 