METHOD_0 ( ) { java . lang . String result = org . IDENT_0 . util . StringUtils . METHOD_1 ( 5 ) ; java . util . List < org . IDENT_0 . concurrent . future . IDENT_1 < ? > > IDENT_2 = new java . util . ArrayList ( IDENT_3 ) ; for ( int i = 0 ; i < ( IDENT_3 ) ; i ++ ) { org . IDENT_0 . concurrent . future . IDENT_1 < ? > future = new org . IDENT_0 . concurrent . future . METHOD_2 ( ) ; if ( i != 0 ) { future . METHOD_3 ( null ) ; } IDENT_2 . add ( future ) ; } org . IDENT_0 . concurrent . future . IDENT_4 < java . lang . String > f = org . IDENT_0 . concurrent . future . IDENT_5 . METHOD_4 ( IDENT_2 , result ) ; IDENT_2 . get ( 0 ) . METHOD_3 ( null ) ; org . IDENT_0 . concurrent . future . IDENT_6 . METHOD_5 ( f , IDENT_2 ) ; "<AssertPlaceHolder>" ; } get ( ) { if ( IDENT_7 ) { throw new java . util . concurrent . METHOD_6 ( ) ; } return result ; }
org . junit . Assert . assertEquals ( result , f . get ( ) ) 