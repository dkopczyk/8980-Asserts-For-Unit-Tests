METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = new java . util . ArrayList ( IDENT_1 ) ; java . util . List < org . IDENT_2 . concurrent . future . IDENT_3 < java . lang . String > > IDENT_4 = new java . util . ArrayList ( IDENT_1 ) ; for ( int i = 0 ; i < ( IDENT_1 ) ; i ++ ) { java . lang . String result = org . IDENT_2 . util . StringUtils . METHOD_1 ( 5 ) ; IDENT_0 . add ( result ) ; org . IDENT_2 . concurrent . future . IDENT_3 < java . lang . String > IDENT_5 = new org . IDENT_2 . concurrent . future . METHOD_2 ( ) ; if ( ( i OP_0 2 ) == 1 ) { IDENT_5 . METHOD_3 ( result ) ; } IDENT_4 . add ( IDENT_5 ) ; } org . IDENT_2 . concurrent . future . IDENT_6 < java . util . List < java . lang . String > > IDENT_7 = org . IDENT_2 . concurrent . future . IDENT_8 . METHOD_4 ( IDENT_4 , false ) ; for ( int i = 0 ; i < ( IDENT_1 ) ; i ++ ) { org . IDENT_2 . concurrent . future . METHOD_2 < java . lang . String > IDENT_5 = IDENT_4 . get ( i ) ; if ( ! ( IDENT_5 . METHOD_5 ( ) ) ) { IDENT_5 . METHOD_3 ( IDENT_0 . get ( i ) ) ; } } java . util . List < java . lang . String > IDENT_9 = IDENT_7 . get ( ) ; for ( int i = 0 ; i < ( IDENT_1 ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( ) { METHOD_6 ( ) ; return super . get ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 . get ( i ) , IDENT_9 . get ( i ) ) 