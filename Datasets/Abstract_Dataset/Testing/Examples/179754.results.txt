METHOD_0 ( ) { org . IDENT_0 . concurrent . IDENT_1 IDENT_2 = new org . IDENT_0 . concurrent . METHOD_1 ( ) ; try { java . util . concurrent . atomic . IDENT_3 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( ) ; java . util . concurrent . atomic . METHOD_2 IDENT_5 = new java . util . concurrent . atomic . METHOD_2 ( ) ; org . IDENT_0 . concurrent . future . IDENT_6 < ? > IDENT_7 = METHOD_3 ( ) . METHOD_4 ( null ) ; org . IDENT_0 . concurrent . future . IDENT_6 < java . lang . IDENT_8 > IDENT_9 = IDENT_7 . map ( ( o ) -> { IDENT_4 . set ( true ) ; try { java . lang . Thread . sleep ( ( org . IDENT_0 . concurrent . future . IDENT_10 * 10 ) ) ; IDENT_5 . set ( true ) ; } catch ( e ) { } return null ; } , IDENT_2 ) ; new org . IDENT_0 . test . concurrent . METHOD_5 ( ( ) -> IDENT_4 . get ( ) ) . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; new org . IDENT_0 . test . concurrent . METHOD_5 ( ( ) -> IDENT_5 . get ( ) ) . METHOD_6 ( ) ; } finally { IDENT_2 . METHOD_7 ( ) ; } } METHOD_8 ( boolean ) { return IDENT_11 . METHOD_8 ( IDENT_12 ) ; }
org . junit . Assert . assertFalse ( IDENT_9 . METHOD_8 ( false ) ) 