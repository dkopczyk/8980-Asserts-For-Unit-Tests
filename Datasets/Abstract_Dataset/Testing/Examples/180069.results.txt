METHOD_0 ( ) { for ( int i = 0 ; i < INT_0 ; i ++ ) { int IDENT_0 = ( ( int ) ( ( java . lang . Math . random ( ) ) * 100 ) ) ; int IDENT_1 = ( ( int ) ( ( java . lang . Math . random ( ) ) * 100 ) ) ; int IDENT_2 = ( ( int ) ( ( java . lang . Math . random ( ) ) * 100 ) ) ; int IDENT_3 = ( ( int ) ( ( java . lang . Math . random ( ) ) * 100 ) ) ; double IDENT_4 = org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_1 ( IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 ) ; IDENT_5 . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 = IDENT_5 . IDENT_8 . IDENT_9 . IDENT_10 . get ( ( ( ( IDENT_0 + IDENT_1 ) + IDENT_2 ) + IDENT_3 ) , IDENT_3 , IDENT_4 ) ; double IDENT_12 = org . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_1 ( IDENT_11 . METHOD_2 ( ) , IDENT_11 . METHOD_3 ( ) , IDENT_11 . METHOD_4 ( ) , IDENT_11 . METHOD_5 ( ) ) ; "<AssertPlaceHolder>" ; } } get ( int , int , double ) { int IDENT_13 = IDENT_5 . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_6 ( IDENT_14 , IDENT_3 , IDENT_4 ) ; int IDENT_15 = IDENT_5 . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_7 ( IDENT_14 , IDENT_13 , IDENT_3 , IDENT_4 ) . METHOD_8 ( ) ; return new IDENT_5 . IDENT_8 . IDENT_9 . METHOD_9 ( IDENT_13 , IDENT_15 , ( ( ( IDENT_14 - IDENT_13 ) - IDENT_15 ) - IDENT_3 ) , IDENT_3 ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_12 , 0.0 ) 