METHOD_0 ( ) { final java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( INT_0 ) ; net . IDENT_2 . IDENT_3 . IDENT_4 [ ] IDENT_5 = null ; try { java . util . concurrent . atomic . IDENT_6 IDENT_7 = new java . util . concurrent . atomic . METHOD_2 ( 0 ) ; IDENT_5 = net . IDENT_2 . IDENT_8 . METHOD_3 ( 10 , IDENT_1 , INT_1 , new net . IDENT_2 . IDENT_3 . IDENT_9 . METHOD_4 ( IDENT_7 ) ) ; net . IDENT_2 . IDENT_3 . IDENT_4 IDENT_10 = IDENT_5 [ 0 ] ; IDENT_10 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( IDENT_5 [ 1 ] . METHOD_8 ( ) , IDENT_5 [ 2 ] . METHOD_8 ( ) , null , null ) ; IDENT_10 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( IDENT_5 [ 1 ] . METHOD_8 ( ) , IDENT_5 [ 2 ] . METHOD_8 ( ) , null , null ) ; java . lang . Thread . sleep ( INT_2 ) ; "<AssertPlaceHolder>" ; } finally { if ( IDENT_5 != null ) { for ( int i = 0 ; i < ( IDENT_5 . length ) ; i ++ ) { IDENT_5 [ i ] . METHOD_9 ( ) . METHOD_10 ( ) ; } } } } get ( ) { java . util . Collection < net . IDENT_2 . IDENT_5 . IDENT_11 > keys = IDENT_12 . keys ( ) ; if ( ( keys == null ) || ( ( keys . size ( ) ) == 0 ) ) { return null ; } net . IDENT_2 . IDENT_5 . IDENT_11 key = net . IDENT_2 . utils . Utils . METHOD_11 ( keys , IDENT_1 ) ; if ( key == null ) { return null ; } java . util . Map < net . IDENT_2 . IDENT_5 . IDENT_13 , net . IDENT_2 . utils . IDENT_14 < net . IDENT_2 . IDENT_5 . IDENT_15 , net . IDENT_2 . storage . IDENT_16 > > map = IDENT_12 . METHOD_12 ( key ) ; if ( ( map == null ) || ( ( map . size ( ) ) == 0 ) ) { return null ; } java . util . Collection < net . IDENT_2 . utils . IDENT_14 < net . IDENT_2 . METHOD_12 . IDENT_15 , net . IDENT_2 . storage . IDENT_16 > > value = map . values ( ) ; if ( value . isEmpty ( ) ) { return null ; } net . IDENT_2 . message . IDENT_17 IDENT_18 = new net . IDENT_2 . message . METHOD_13 ( value ) ; java . util . Map < net . IDENT_2 . METHOD_12 . IDENT_13 , net . IDENT_2 . storage . IDENT_16 > IDENT_19 = IDENT_18 . METHOD_14 ( ) ; if ( ( IDENT_19 == null ) || ( ( IDENT_19 . size ( ) ) == 0 ) ) { return null ; } java . util . Collection < net . IDENT_2 . METHOD_12 . IDENT_13 > IDENT_20 = IDENT_19 . METHOD_15 ( ) ; if ( IDENT_20 . isEmpty ( ) ) { return null ; } IDENT_20 . remove ( new net . IDENT_2 . METHOD_12 . METHOD_16 ( IDENT_21 ) ) ; if ( ( IDENT_20 . size ( ) ) == 0 ) { return null ; } net . IDENT_2 . METHOD_12 . IDENT_13 IDENT_22 = net . IDENT_2 . utils . Utils . METHOD_11 ( IDENT_20 , IDENT_1 ) ; return new net . IDENT_2 . IDENT_23 . METHOD_17 ( ) . key ( key ) . data ( IDENT_18 ) . METHOD_18 ( IDENT_22 ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_7 . get ( ) ) 