METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 j = new org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; java . util . Properties p = new java . util . Properties ( ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . properties . entrySet ( ) ) { long result = j . hash ( ( ( java . lang . String ) ( entry . getKey ( ) ) ) ) ; if ( result != ( java . lang . Long . METHOD_2 ( ( ( java . lang . String ) ( entry . getValue ( ) ) ) ) ) ) { System . out . println ( ( STRING_0 + ( ( java . lang . String ) ( entry . getKey ( ) ) ) ) ) ; System . out . println ( ( STRING_1 + ( java . lang . Long . METHOD_2 ( ( ( java . lang . String ) ( entry . getValue ( ) ) ) ) ) ) ) ; System . out . println ( ( STRING_2 + result ) ) ; } "<AssertPlaceHolder>" ; } } hash ( java . lang . String ) { try { int hash = 0 ; for ( byte IDENT_6 : k . getBytes ( STRING_3 ) ) { hash += IDENT_6 & 255 ; hash += hash << 10 ; hash OP_0 hash > > > 6 ; } hash += hash << 3 ; hash OP_0 hash > > > INT_0 ; hash += hash << 15 ; return hash & INT_1 ; } catch ( java . io . IDENT_7 e ) { throw new java . lang . IllegalStateException ( STRING_4 , e ) ; } }
org . junit . Assert . assertEquals ( result , java . lang . Long . METHOD_2 ( ( ( java . lang . String ) ( entry . getValue ( ) ) ) ) ) 