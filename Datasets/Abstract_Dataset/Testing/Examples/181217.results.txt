METHOD_0 ( ) { org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . METHOD_1 ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_3 ) ; trace = new org . eclipse . IDENT_0 . IDENT_1 . core . trace . METHOD_2 ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . io . File IDENT_5 = new java . io . File ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_4 ) ; if ( IDENT_5 . exists ( ) ) { org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . METHOD_3 ( IDENT_5 ) ; } IDENT_5 . METHOD_4 ( ) ; java . io . File IDENT_6 = new java . io . File ( ( ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_4 ) + STRING_0 ) ) ; try ( java . io . IDENT_7 IDENT_8 = new java . io . METHOD_5 ( IDENT_6 ) ) { IDENT_8 . write ( metadata ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } byte [ ] IDENT_9 = new byte [ ] { ( ( byte ) ( INT_0 ) ) , ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( INT_2 ) ) , ( ( byte ) ( INT_0 ) ) } ; byte [ ] IDENT_10 = new byte [ ] { ( ( byte ) ( INT_3 ) ) , INT_4 , INT_5 , INT_6 , ( ( byte ) ( INT_7 ) ) , INT_8 , INT_9 , ( ( byte ) ( INT_0 ) ) , ( ( byte ) ( INT_10 ) ) , ( ( byte ) ( INT_11 ) ) , INT_12 , ( ( byte ) ( INT_13 ) ) , INT_14 , ( ( byte ) ( INT_15 ) ) , INT_16 , ( ( byte ) ( INT_10 ) ) } ; org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_11 IDENT_12 = new org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . METHOD_6 ( 2 , 2 ) ; final int IDENT_13 = ( ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_14 ) / ( IDENT_12 . METHOD_7 ( ) ) ) - 1 ; final int IDENT_15 = ( ( IDENT_13 * ( IDENT_12 . METHOD_7 ( ) ) ) + ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_16 ) ) * 8 ; java . nio . ByteBuffer data = java . nio . ByteBuffer . METHOD_8 ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_17 ) ; data . order ( IDENT_18 . IDENT_19 ) ; data . METHOD_9 ( ) ; data . put ( IDENT_9 ) ; data . put ( IDENT_10 ) ; data . METHOD_10 ( 0 ) ; data . METHOD_11 ( INT_17 ) ; data . METHOD_11 ( ( ( IDENT_13 * INT_18 ) + INT_19 ) ) ; data . METHOD_11 ( IDENT_15 ) ; data . METHOD_11 ( ( ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_17 ) * 8 ) ) ; data . METHOD_11 ( 0 ) ; data . METHOD_10 ( 0 ) ; for ( int i = 0 ; i < IDENT_13 ; i ++ ) { IDENT_12 . METHOD_12 ( ( ( i * INT_18 ) + INT_20 ) ) ; IDENT_12 . METHOD_13 ( i ) ; IDENT_12 . METHOD_14 ( data ) ; } data . METHOD_15 ( ) ; java . io . File IDENT_20 = new java . io . File ( ( ( org . eclipse . IDENT_0 . IDENT_1 . core . tests . trace . IDENT_2 . IDENT_4 ) + STRING_1 ) ) ; try ( java . io . IDENT_21 IDENT_22 = new java . io . METHOD_16 ( IDENT_20 ) ) { IDENT_22 . METHOD_17 ( ) . write ( data ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; } }
org . junit . Assert . assertNotNull ( trace ) 