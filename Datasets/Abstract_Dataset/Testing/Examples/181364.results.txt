METHOD_0 ( ) { org . eclipse . IDENT_0 . IDENT_1 . IDENT_2 . core . context . IDENT_3 IDENT_4 = null ; fixture . METHOD_1 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( double ) { if ( ( IDENT_5 ) == null ) { return new org . eclipse . IDENT_0 . IDENT_1 . core . trace . METHOD_2 ( org . eclipse . IDENT_0 . IDENT_6 . core . trace . IDENT_7 . IDENT_8 , org . eclipse . IDENT_0 . IDENT_1 . core . trace . IDENT_9 . IDENT_10 ) ; } try { long pos = ( java . lang . Math . METHOD_3 ( ( IDENT_11 * ( IDENT_5 . length ( ) ) ) ) ) - ( IDENT_12 ) ; while ( pos > 0 ) { IDENT_13 . METHOD_4 ( ( pos - 1 ) ) ; if ( ( IDENT_13 . read ( ) ) == STRING_0 ) { break ; } pos OP_0 ; } final org . eclipse . IDENT_0 . IDENT_1 . core . trace . location . IDENT_14 location = new org . eclipse . IDENT_0 . IDENT_1 . core . trace . location . METHOD_5 ( pos ) ; final org . eclipse . IDENT_0 . IDENT_1 . core . trace . IDENT_9 context = METHOD_1 ( location ) ; context . METHOD_6 ( IDENT_9 . IDENT_10 ) ; return context ; } catch ( final java . io . IOException e ) { org . eclipse . IDENT_0 . IDENT_6 . core . IDENT_15 . METHOD_7 ( ( STRING_1 + ( getPath ( ) ) ) , e ) ; return new org . eclipse . IDENT_0 . IDENT_1 . core . IDENT_16 . IDENT_17 . METHOD_8 ( org . eclipse . IDENT_0 . IDENT_6 . core . trace . IDENT_7 . IDENT_8 , org . eclipse . IDENT_0 . IDENT_1 . core . trace . IDENT_9 . IDENT_10 ) ; } }
org . junit . Assert . assertNotNull ( fixture ) 