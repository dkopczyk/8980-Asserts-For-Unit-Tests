METHOD_0 ( ) { org . apache . jackrabbit . api . security . authentication . token . IDENT_0 tc = new org . apache . jackrabbit . api . security . authentication . token . METHOD_1 ( STRING_0 ) ; tc . METHOD_2 ( IDENT_1 . IDENT_2 , "" ) ; org . apache . jackrabbit . oak . spi . security . authentication . token . IDENT_3 IDENT_4 = org . mockito . Mockito . mock ( org . apache . jackrabbit . oak . spi . security . authentication . token . IDENT_3 . class ) ; org . apache . jackrabbit . oak . spi . security . authentication . token . IDENT_5 IDENT_6 = org . mockito . Mockito . mock ( org . apache . jackrabbit . oak . spi . security . authentication . token . IDENT_5 . class ) ; org . mockito . Mockito . when ( IDENT_4 . METHOD_3 ( org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( IDENT_6 ) ; org . mockito . Mockito . when ( IDENT_6 . METHOD_4 ( org . mockito . Mockito . METHOD_5 ( ) ) ) . thenReturn ( false ) ; org . mockito . Mockito . when ( IDENT_6 . matches ( tc ) ) . thenReturn ( true ) ; org . apache . jackrabbit . oak . security . authentication . token . IDENT_7 auth = new org . apache . jackrabbit . oak . security . authentication . token . METHOD_6 ( IDENT_4 ) ; try { "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_6 , org . mockito . Mockito . METHOD_7 ( ) ) . METHOD_8 ( org . mockito . Mockito . METHOD_5 ( ) ) ; } catch ( javax . security . auth . IDENT_8 . IDENT_9 e ) { org . junit . Assert . fail ( e . getMessage ( ) ) ; } } METHOD_9 ( javax . jcr . IDENT_10 ) { if ( IDENT_11 instanceof javax . jcr . IDENT_12 ) { java . lang . String IDENT_13 = ( ( javax . jcr . IDENT_12 ) ( IDENT_11 ) ) . METHOD_10 ( ) ; return METHOD_11 ( IDENT_13 ) ; } else { throw new javax . security . auth . IDENT_8 . METHOD_12 ( STRING_1 ) ; } }
org . junit . Assert . assertTrue ( auth . METHOD_9 ( tc ) ) 