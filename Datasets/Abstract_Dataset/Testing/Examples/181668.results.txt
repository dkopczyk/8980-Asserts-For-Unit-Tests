METHOD_0 ( ) { java . util . concurrent . atomic . IDENT_0 < java . lang . Throwable > IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; io . IDENT_2 . future . IDENT_3 < java . lang . Integer > p = io . IDENT_2 . future . IDENT_3 . apply ( IDENT_1 :: set ) ; io . IDENT_2 . future . IDENT_4 < java . lang . Integer > r = new io . IDENT_2 . future . IDENT_4 < java . lang . Integer > ( ) { @ io . IDENT_2 . future . Override public void METHOD_2 ( java . lang . Throwable ex ) { } @ io . IDENT_2 . future . Override public void METHOD_3 ( java . lang . Integer value ) { } } ; io . IDENT_2 . future . IDENT_5 < java . lang . Integer > f = p . METHOD_4 ( r ) ; f . METHOD_5 ( ex ) ; "<AssertPlaceHolder>" ; } get ( ) { final java . util . Optional < ? > [ ] ctx = io . IDENT_2 . future . IDENT_6 . IDENT_7 . get ( ) ; if ( ( ctx == null ) || ( ( ctx . length ) <= ( position ) ) ) return java . util . Optional . empty ( ) ; final java . util . Optional < ? > v = ctx [ position ] ; if ( v == null ) return java . util . Optional . empty ( ) ; else return ( ( java . util . Optional < T > ) ( v ) ) ; }
org . junit . Assert . assertEquals ( ex , IDENT_1 . get ( ) ) 