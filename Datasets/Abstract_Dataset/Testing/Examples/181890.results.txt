METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = this . graph . METHOD_1 ( STRING_0 ) ; System . out . println ( ( STRING_1 + IDENT_3 ) ) ; "<AssertPlaceHolder>" ; @ org . IDENT_0 . IDENT_1 . METHOD_2 ( STRING_2 ) java . lang . IDENT_4 < com . tinkerpop . IDENT_5 . IDENT_2 > IDENT_6 = IDENT_3 . METHOD_3 ( IDENT_7 . IDENT_8 , STRING_3 ) ; } METHOD_1 ( com . tinkerpop . IDENT_5 . IDENT_7 ) { if ( null == IDENT_9 ) return null ; int IDENT_10 = 0 ; java . lang . String id = ( ( java . lang . String ) ( this . getId ( ) ) ) ; java . lang . String IDENT_11 = null ; switch ( IDENT_9 ) { case IDENT_8 : IDENT_10 = id . indexOf ( IDENT_12 . IDENT_13 ) ; IDENT_11 = id . substring ( 0 , IDENT_10 ) ; break ; case IDENT_14 : IDENT_10 = id . indexOf ( IDENT_12 . IDENT_13 ) ; IDENT_10 = id . indexOf ( IDENT_12 . IDENT_15 , ( IDENT_10 + ( IDENT_12 . IDENT_13 . length ( ) ) ) ) ; IDENT_11 = id . substring ( ( IDENT_10 + ( IDENT_12 . IDENT_15 . length ( ) ) ) , id . length ( ) ) ; break ; default : throw new java . lang . IllegalArgumentException ( ( ( STRING_4 + IDENT_9 ) + STRING_5 ) ) ; } return this . METHOD_4 ( ) . METHOD_1 ( IDENT_11 ) ; }
org . junit . Assert . assertNotNull ( IDENT_3 ) 