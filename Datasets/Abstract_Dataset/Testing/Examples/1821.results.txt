METHOD_0 ( ) { final java . util . List < java . util . Map < java . lang . String , java . lang . Object > > IDENT_0 = IDENT_1 . METHOD_1 ( 1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int ) { final java . util . List < java . util . Map < java . lang . String , java . lang . Object > > result = new java . util . ArrayList ( ) ; final de . IDENT_2 . IDENT_3 . IDENT_4 . tools . IDENT_5 IDENT_6 = new de . IDENT_2 . IDENT_3 . IDENT_4 . tools . METHOD_2 ( IDENT_7 ) ; final de . IDENT_2 . IDENT_3 . IDENT_4 . mapping . IDENT_8 IDENT_9 = IDENT_7 . METHOD_3 ( IDENT_10 , de . IDENT_2 . IDENT_3 . IDENT_4 . mapping . IDENT_8 . class ) . getValue ( ) ; final java . util . List < de . IDENT_2 . IDENT_3 . IDENT_4 . meta . IDENT_11 > IDENT_12 = de . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_13 . IDENT_14 . METHOD_4 ( IDENT_7 , IDENT_10 , IDENT_15 ) ; if ( IDENT_16 < 0 ) { IDENT_16 = Integer . MAX_VALUE ; } int IDENT_17 = 0 ; while ( ( IDENT_17 < IDENT_16 ) && ( IDENT_18 . next ( ) ) ) { final java . util . Map < java . lang . String , java . lang . Object > IDENT_19 = new java . util . HashMap ( ) ; for ( int IDENT_20 = 1 ; IDENT_20 <= ( IDENT_12 . size ( ) ) ; IDENT_20 ++ ) { final de . IDENT_2 . IDENT_3 . IDENT_4 . meta . IDENT_11 IDENT_21 = IDENT_12 . get ( ( IDENT_20 - 1 ) ) ; final java . lang . String IDENT_22 = IDENT_9 . METHOD_5 ( IDENT_21 , IDENT_15 ) ; final de . IDENT_2 . IDENT_3 . IDENT_4 . meta . IDENT_23 IDENT_24 = IDENT_6 . METHOD_6 ( IDENT_10 , IDENT_21 ) ; final de . IDENT_2 . IDENT_3 . IDENT_4 . mapping . IDENT_25 IDENT_26 = IDENT_6 . METHOD_7 ( IDENT_21 , IDENT_10 , IDENT_21 ) ; final java . lang . Object data = IDENT_24 . getValue ( IDENT_18 , IDENT_20 ) ; final java . lang . Object IDENT_27 = IDENT_26 . METHOD_8 ( ) . map ( IDENT_21 , IDENT_21 , data ) ; IDENT_19 . put ( IDENT_22 , IDENT_27 ) ; } result . add ( IDENT_19 ) ; IDENT_17 ++ ; } return IDENT_17 == 0 ? null : result ; }
org . junit . Assert . assertEquals ( 1 , IDENT_0 . size ( ) ) 