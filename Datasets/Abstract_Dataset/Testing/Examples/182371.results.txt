METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 IDENT_4 = com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 . METHOD_1 ( ) . setName ( STRING_0 ) . METHOD_2 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . build ( ) ; com . fasterxml . jackson . databind . IDENT_5 json = new com . IDENT_0 . IDENT_1 . METHOD_3 ( com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 . METHOD_4 ( ) ) . serialize ( IDENT_4 , IDENT_6 . IDENT_7 ) ; com . google . IDENT_8 . Message IDENT_9 = new com . IDENT_0 . IDENT_1 . METHOD_5 ( com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 . METHOD_4 ( ) ) . parse ( json , IDENT_6 . IDENT_7 ) ; com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 IDENT_10 = com . IDENT_0 . IDENT_1 . testing . IDENT_2 . IDENT_3 . METHOD_1 ( ) . METHOD_6 ( IDENT_9 ) . build ( ) ; "<AssertPlaceHolder>" ; } parse ( com . fasterxml . jackson . databind . IDENT_5 , com . IDENT_0 . IDENT_1 . IDENT_6 ) { com . google . IDENT_8 . Message . Builder builder = com . google . IDENT_8 . IDENT_11 . METHOD_1 ( schema . METHOD_4 ( ) ) ; for ( Map . Entry < java . lang . String , com . google . IDENT_8 . IDENT_12 . IDENT_13 > IDENT_14 : schema . METHOD_7 ( ) . entrySet ( ) ) { java . lang . String IDENT_15 = schema . METHOD_8 ( IDENT_14 . getKey ( ) ) ; com . google . IDENT_8 . IDENT_12 . IDENT_13 field = IDENT_14 . getValue ( ) ; if ( ( node . METHOD_9 ( IDENT_15 ) ) && ( ! ( node . get ( IDENT_15 ) . METHOD_10 ( ) ) ) ) { com . fasterxml . jackson . databind . IDENT_5 IDENT_16 = node . get ( IDENT_15 ) ; if ( field . METHOD_11 ( ) ) { if ( schema . METHOD_12 ( ) . containsKey ( field . getName ( ) ) ) { METHOD_13 ( registry , builder , IDENT_15 , field , IDENT_16 ) ; } else { METHOD_14 ( registry , builder , IDENT_15 , field , IDENT_16 ) ; } } else { java . lang . Object value = METHOD_15 ( IDENT_16 , field , registry ) ; if ( value != null ) { builder . METHOD_16 ( field , value ) ; } } } } return builder . build ( ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_10 ) 