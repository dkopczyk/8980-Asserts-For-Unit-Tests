METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_6 . METHOD_2 ( ) , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_7 ) ; long IDENT_8 = INT_0 ; java . lang . String IDENT_9 = STRING_0 ; java . lang . String IDENT_10 = STRING_1 ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_11 > IDENT_12 = IDENT_4 . METHOD_3 ( IDENT_9 , IDENT_10 , 10 , ( ( Long . MAX_VALUE ) - IDENT_8 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String , java . lang . String , int , long ) { long IDENT_13 = com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . METHOD_4 ( IDENT_14 ) ; java . lang . String IDENT_15 = ( ( java . lang . Long . toString ( IDENT_13 ) ) + ( com . IDENT_0 . IDENT_1 . IDENT_16 . IDENT_17 ) ) + cluster ; if ( org . apache . commons . lang . StringUtils . METHOD_5 ( IDENT_10 ) ) { IDENT_15 += ( com . IDENT_0 . IDENT_1 . IDENT_16 . IDENT_17 ) + ( com . IDENT_0 . IDENT_1 . util . IDENT_18 . METHOD_6 ( IDENT_10 ) ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 . LOG . info ( ( ( ( ( ( ( ( ( ( ( ( STRING_2 + cluster ) + STRING_3 ) + IDENT_10 ) + STRING_4 ) + IDENT_14 ) + STRING_5 ) + IDENT_13 ) + STRING_6 ) + IDENT_19 ) + STRING_7 ) + IDENT_15 ) ) ; byte [ ] IDENT_20 = org . apache . hadoop . hbase . util . IDENT_21 . METHOD_7 ( IDENT_15 ) ; org . apache . hadoop . hbase . client . IDENT_22 IDENT_23 = METHOD_8 ( ) ; IDENT_23 . METHOD_9 ( IDENT_20 ) ; org . apache . hadoop . hbase . filter . IDENT_24 IDENT_25 = new org . apache . hadoop . hbase . filter . METHOD_10 ( new org . apache . hadoop . hbase . filter . METHOD_11 ( IDENT_20 ) ) ; IDENT_23 . METHOD_12 ( IDENT_25 ) ; IDENT_23 . METHOD_13 ( java . lang . Math . min ( IDENT_19 , IDENT_26 ) ) ; IDENT_23 . METHOD_14 ( 1 ) ; return METHOD_15 ( cluster , null , IDENT_23 , IDENT_19 , Boolean . IDENT_27 , 0L , 0L ) ; }
org . junit . Assert . assertEquals ( IDENT_12 . size ( ) , 0 ) 