METHOD_0 ( ) { org . glassfish . IDENT_0 . server . IDENT_1 server = METHOD_1 ( org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . class ) ; try { org . glassfish . IDENT_0 . client . IDENT_6 client = METHOD_2 ( ) ; java . util . Map < java . lang . String , java . lang . Object > properties = client . METHOD_3 ( ) ; properties . put ( IDENT_7 . IDENT_8 , 1 ) ; final java . util . concurrent . atomic . IDENT_9 IDENT_10 = new java . util . concurrent . atomic . METHOD_4 ( false ) ; org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_11 handler = new org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_5 ( ) { @ org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . Override public void METHOD_6 ( java . util . logging . IDENT_12 record ) { java . lang . String IDENT_13 = org . glassfish . IDENT_0 . core . IDENT_14 . IDENT_15 . METHOD_7 ( 2 , org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_16 . class . METHOD_8 ( ) [ 0 ] . getName ( ) , org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_16 . class . getName ( ) , 1 ) ; System . out . println ( ( STRING_0 + IDENT_13 ) ) ; System . out . println ( ( STRING_1 + ( record . getMessage ( ) ) ) ) ; if ( IDENT_13 . equals ( record . getMessage ( ) ) ) { IDENT_10 . set ( true ) ; } } } ; logger . METHOD_9 ( IDENT_17 . IDENT_18 ) ; logger . METHOD_10 ( handler ) ; client . METHOD_11 ( org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_16 . class , METHOD_12 ( org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . class , STRING_2 ) ) ; "<AssertPlaceHolder>" ; logger . METHOD_13 ( handler ) ; } catch ( java . io . IOException e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } finally { METHOD_14 ( server ) ; } } get ( ) { if ( ( buffer ) == null ) { buffer = java . nio . ByteBuffer . METHOD_15 ( IDENT_19 . METHOD_16 ( ) . METHOD_17 ( ) ) ; } return buffer ; }
org . junit . Assert . assertTrue ( IDENT_10 . get ( ) ) 