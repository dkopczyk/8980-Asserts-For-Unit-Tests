METHOD_0 ( ) { org . glassfish . IDENT_0 . server . IDENT_1 server = METHOD_1 ( org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; try { final javax . IDENT_5 . IDENT_6 IDENT_7 = IDENT_6 . Builder . create ( ) . build ( ) ; IDENT_8 = new java . util . concurrent . METHOD_2 ( 1 ) ; org . glassfish . IDENT_0 . client . IDENT_9 client = METHOD_3 ( ) ; client . METHOD_4 ( new javax . IDENT_5 . METHOD_5 ( ) { @ org . glassfish . IDENT_0 . test . IDENT_2 . Override public void METHOD_6 ( javax . IDENT_5 . IDENT_10 session , javax . IDENT_5 . IDENT_11 config ) { session . METHOD_7 ( new javax . IDENT_5 . IDENT_12 . IDENT_13 < java . nio . ByteBuffer > ( ) { @ java . lang . Override public void METHOD_8 ( java . nio . ByteBuffer message ) { if ( STRING_0 . equals ( new java . lang . String ( message . array ( ) ) ) ) { IDENT_8 . METHOD_9 ( ) ; } } } ) ; try { session . METHOD_10 ( ) . METHOD_11 ( STRING_1 ) ; } catch ( java . io . IOException e ) { } } } , IDENT_7 , METHOD_12 ( org . glassfish . IDENT_0 . test . IDENT_2 . IDENT_3 . IDENT_4 . class ) ) ; IDENT_8 . METHOD_13 ( 5 , TimeUnit . IDENT_14 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; throw new java . lang . RuntimeException ( e . getMessage ( ) , e ) ; } finally { METHOD_14 ( server ) ; } } METHOD_15 ( ) { return count ; }
org . junit . Assert . assertEquals ( 0 , IDENT_8 . METHOD_15 ( ) ) 