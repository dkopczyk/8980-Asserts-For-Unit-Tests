METHOD_0 ( ) { if ( METHOD_1 ( ) ) { return ; } final java . util . Map < java . lang . String , java . lang . Object > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; IDENT_0 . put ( STRING_0 , java . util . Arrays . asList ( IDENT_1 . IDENT_2 , IDENT_1 . IDENT_3 ) ) ; final java . lang . String IDENT_4 ; if ( METHOD_2 ( ) ) { IDENT_4 = STRING_1 ; } else { IDENT_4 = STRING_2 ; } final java . lang . String query = ( ( STRING_3 + STRING_4 ) + IDENT_4 ) + STRING_5 ; final java . util . List < com . IDENT_5 . model . test . IDENT_6 > IDENT_7 = IDENT_8 . METHOD_3 ( query , com . IDENT_5 . model . test . IDENT_6 . class , IDENT_0 ) ; "<AssertPlaceHolder>" ; final com . IDENT_5 . IDENT_9 . IDENT_10 < com . IDENT_5 . model . test . IDENT_6 > IDENT_11 = METHOD_4 ( com . IDENT_5 . model . test . IDENT_6 . class ) ; final com . IDENT_5 . IDENT_9 . IDENT_10 < com . IDENT_5 . model . test . IDENT_12 > IDENT_13 = IDENT_11 . METHOD_5 ( STRING_6 , com . IDENT_5 . model . test . IDENT_12 . class ) ; METHOD_5 . METHOD_6 ( STRING_7 , java . util . Arrays . asList ( IDENT_1 . IDENT_2 , IDENT_1 . IDENT_3 ) ) ; IDENT_11 . METHOD_6 ( STRING_6 , METHOD_5 ) ; METHOD_7 ( IDENT_7 , IDENT_11 . METHOD_8 ( ) ) ; } METHOD_3 ( java . lang . String , java . lang . Class , java . util . Map ) { final javax . persistence . IDENT_14 < T > IDENT_15 = IDENT_16 . METHOD_9 ( query , IDENT_17 ) ; METHOD_10 ( IDENT_15 , parameters ) ; return IDENT_15 . METHOD_8 ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_7 . size ( ) ) > 0 ) ) 