METHOD_0 ( ) { final eu . IDENT_0 . concurrent . IDENT_1 < eu . IDENT_0 . concurrent . IDENT_2 . IDENT_3 > future = new eu . IDENT_0 . concurrent . METHOD_1 ( IDENT_4 , to ) ; doReturn ( future ) . when ( IDENT_5 ) . apply ( from ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . function . IDENT_6 , T ) { try { return IDENT_7 . apply ( value ) ; } catch ( final java . lang . Exception e ) { return new eu . IDENT_0 . concurrent . METHOD_3 ( IDENT_4 , e ) ; } }
org . junit . Assert . assertThat ( base . METHOD_2 ( IDENT_5 , from ) , org . hamcrest . core . Is . is ( future ) ) 