METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( boolean ) { final java . util . concurrent . IDENT_0 IDENT_1 = new java . util . concurrent . METHOD_2 ( 1 ) ; final java . util . concurrent . atomic . IDENT_2 < java . lang . IDENT_3 > error = new java . util . concurrent . atomic . METHOD_3 ( ) ; final java . util . concurrent . atomic . IDENT_4 result = new java . util . concurrent . atomic . METHOD_4 ( ) ; final eu . IDENT_5 . concurrent . IDENT_6 IDENT_7 = eu . IDENT_5 . concurrent . IDENT_8 . builder ( ) . executor ( java . util . concurrent . IDENT_9 . METHOD_5 ( ) ) . METHOD_6 ( METHOD_6 ) . METHOD_7 ( new eu . IDENT_5 . concurrent . METHOD_8 ( ) { @ eu . IDENT_5 . concurrent . Override MOD_0 void METHOD_9 ( final java . lang . String IDENT_10 , final java . lang . Throwable e ) { if ( e instanceof java . lang . IDENT_3 ) { error . set ( ( ( java . lang . IDENT_3 ) ( e ) ) ) ; } IDENT_1 . METHOD_10 ( ) ; } } ) . build ( ) ; final eu . IDENT_5 . concurrent . IDENT_11 < java . lang . Integer > source = IDENT_7 . METHOD_11 ( ) ; eu . IDENT_5 . concurrent . IDENT_12 < java . lang . Integer > IDENT_13 = source ; for ( int i = 0 ; i < INT_0 ; i ++ ) { IDENT_13 = IDENT_13 . METHOD_12 ( ( value ) -> { return IDENT_7 . METHOD_13 ( ( value + 1 ) ) ; } ) ; } source . METHOD_14 ( 0 ) ; final eu . IDENT_5 . concurrent . IDENT_12 < java . lang . Integer > IDENT_14 = IDENT_13 ; final java . lang . Thread IDENT_15 = new java . lang . Thread ( ( ) -> { try { result . set ( IDENT_14 . join ( ) ) ; } catch ( e ) { return ; } catch ( final e ) { System . err . println ( STRING_0 ) ; eu . IDENT_5 . concurrent . e . printStackTrace ( System . err ) ; } IDENT_1 . METHOD_10 ( ) ; } ) ; IDENT_15 . start ( ) ; IDENT_1 . METHOD_15 ( ) ; IDENT_15 . METHOD_16 ( ) ; IDENT_15 . join ( ) ; return ( error . get ( ) ) != null ; }
org . junit . Assert . assertFalse ( METHOD_1 ( true ) ) 