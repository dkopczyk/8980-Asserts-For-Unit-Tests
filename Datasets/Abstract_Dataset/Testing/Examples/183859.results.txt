METHOD_0 ( ) { org . IDENT_0 . web . IDENT_1 . IDENT_2 . IDENT_3 IDENT_2 = new org . IDENT_0 . web . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . lang . String result = IDENT_2 . METHOD_2 ( STRING_0 , new org . IDENT_0 . web . IDENT_4 . METHOD_3 ( STRING_1 ) ) ; java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , org . IDENT_0 . web . IDENT_4 . METHOD_3 ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( INT_0 ) ; int len = body . length ( ) ; boolean IDENT_5 = false ; int IDENT_6 = - 1 ; for ( int i = 0 ; i < len ; i ++ ) { char ch = body . charAt ( i ) ; switch ( ch ) { case STRING_3 : if ( IDENT_5 ) { sb . append ( ch ) ; } IDENT_5 = true ; break ; case STRING_4 : if ( IDENT_5 ) { IDENT_6 = i ; IDENT_5 = false ; } else { sb . append ( ch ) ; } break ; case STRING_5 : if ( IDENT_6 >= 0 ) { java . lang . String name = body . substring ( ( IDENT_6 + 1 ) , i ) ; java . lang . String value = METHOD_4 ( name . trim ( ) , error ) ; if ( value != null ) { sb . append ( value ) ; } } IDENT_6 = - 1 ; break ; case STRING_6 : if ( ( i + 1 ) < len ) { char IDENT_7 = body . charAt ( ( i + 1 ) ) ; if ( ( IDENT_7 == STRING_6 ) || ( IDENT_7 == STRING_3 ) ) { sb . append ( IDENT_7 ) ; i ++ ; break ; } } default : if ( IDENT_6 < 0 ) { if ( IDENT_5 ) { sb . append ( STRING_3 ) ; } sb . append ( ch ) ; IDENT_5 = false ; } break ; } } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( expected , result ) 