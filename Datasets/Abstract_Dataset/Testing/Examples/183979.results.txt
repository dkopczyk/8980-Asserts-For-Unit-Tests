METHOD_0 ( ) { java . util . List < java . lang . String > expResult = new java . util . ArrayList ( ) ; expResult . add ( STRING_0 ) ; expResult . add ( STRING_1 ) ; expResult . add ( STRING_2 ) ; expResult . add ( STRING_3 ) ; expResult . add ( STRING_4 ) ; expResult . add ( STRING_5 ) ; java . util . List < java . lang . String > result = instance . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( ) { java . util . Map < java . lang . Integer , java . lang . String > IDENT_0 = new java . util . METHOD_2 ( ) ; java . util . concurrent . atomic . IDENT_1 key = new java . util . concurrent . atomic . METHOD_3 ( 50 ) ; java . util . concurrent . atomic . METHOD_3 IDENT_2 = new java . util . concurrent . atomic . METHOD_3 ( 6 ) ; java . util . IDENT_3 < java . lang . String > IDENT_4 = new java . util . METHOD_4 ( ) ; java . util . List < java . lang . String > IDENT_5 = fields . METHOD_5 ( ) ; if ( IDENT_5 . isEmpty ( ) ) { IDENT_5 = fields . METHOD_6 ( ) ; } IDENT_5 . stream ( ) . METHOD_7 ( ( name ) -> { METHOD_8 ( name , IDENT_0 , IDENT_2 , key ) ; } ) ; IDENT_0 . entrySet ( ) . stream ( ) . METHOD_7 ( ( map ) -> { IDENT_4 . add ( map . getValue ( ) ) ; } ) ; return IDENT_4 . stream ( ) . METHOD_9 ( ) . collect ( java . util . stream . IDENT_6 . toList ( ) ) ; }
org . junit . Assert . assertEquals ( expResult , result ) 