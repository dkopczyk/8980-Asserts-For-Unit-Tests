METHOD_0 ( ) { java . util . List < javax . IDENT_0 . IDENT_1 < javax . IDENT_0 . IDENT_2 . IDENT_3 > > times = new java . util . ArrayList ( METHOD_1 ( ) ) ; times . add ( IDENT_4 . create ( INT_0 , IDENT_5 . IDENT_6 ) ) ; java . util . List < javax . IDENT_0 . IDENT_1 < javax . IDENT_0 . IDENT_2 . IDENT_3 > > list = times . stream ( ) . filter ( IDENT_7 . IDENT_8 . IDENT_9 . function . IDENT_10 . METHOD_2 ( IDENT_5 . IDENT_6 ) ) . collect ( java . util . stream . IDENT_11 . toList ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( javax . IDENT_0 . IDENT_12 [ ] ) { if ( ( java . util . IDENT_13 . METHOD_3 ( IDENT_14 ) ) || ( ( IDENT_14 . length ) == 0 ) ) { return ( q ) -> true ; } java . util . function . IDENT_15 < javax . IDENT_0 . IDENT_1 < IDENT_16 > > IDENT_17 = null ; for ( javax . IDENT_0 . IDENT_12 < IDENT_16 > IDENT_18 : IDENT_14 ) { if ( java . util . IDENT_13 . METHOD_3 ( IDENT_17 ) ) { IDENT_17 = ( q ) -> q . METHOD_4 ( ) . equals ( IDENT_18 ) ; } else { IDENT_17 = IDENT_17 . METHOD_5 ( ( q ) -> q . METHOD_4 ( ) . equals ( IDENT_18 ) ) ; } } return IDENT_17 ; }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( 2 ) , java . lang . Integer . valueOf ( list . size ( ) ) ) 