METHOD_0 ( ) { IDENT_0 . IDENT_1 . security . crypto . IDENT_2 IDENT_3 = new IDENT_0 . IDENT_1 . security . crypto . METHOD_0 . METHOD_1 ( ) ; IDENT_0 . IDENT_1 . security . crypto . IDENT_4 IDENT_5 = IDENT_3 . METHOD_2 ( IDENT_6 ) ; METHOD_3 ( IDENT_5 , STRING_0 ) ; byte [ ] IDENT_7 = IDENT_0 . IDENT_1 . security . crypto . config . IDENT_8 . METHOD_4 ( new java . io . METHOD_5 ( STRING_0 ) ) ; IDENT_0 . IDENT_1 . security . crypto . METHOD_0 . IDENT_9 IDENT_10 = new IDENT_0 . IDENT_1 . security . crypto . METHOD_0 . METHOD_6 ( ) ; "<AssertPlaceHolder>" ; } verify ( java . security . IDENT_11 . IDENT_12 , byte [ ] , boolean , java . lang . String ) { byte [ ] IDENT_13 = response . METHOD_7 ( ) . METHOD_8 ( ) [ 0 ] . METHOD_9 ( ) . METHOD_10 ( ) ; byte [ ] IDENT_14 = response . METHOD_7 ( ) . METHOD_8 ( ) [ 0 ] . METHOD_11 ( ) ; javax . crypto . IDENT_15 IDENT_16 = null ; byte [ ] IDENT_17 = null ; java . security . IDENT_18 IDENT_19 = null ; byte [ ] IDENT_20 = null ; try { IDENT_16 = javax . crypto . IDENT_15 . getInstance ( STRING_1 ) ; IDENT_16 . init ( IDENT_15 . IDENT_21 , IDENT_11 ) ; IDENT_17 = IDENT_16 . METHOD_12 ( IDENT_14 ) ; IDENT_19 = java . security . IDENT_18 . getInstance ( IDENT_22 ) ; IDENT_20 = IDENT_19 . METHOD_13 ( IDENT_13 ) ; } catch ( java . lang . Exception e ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_14 ( STRING_2 ) ; } int i = 4 ; if ( ( IDENT_17 [ i ] ) != 6 ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_15 ( ( STRING_1 0 + i ) ) ; } java . lang . String IDENT_24 = IDENT_0 . IDENT_1 . security . util . IDENT_25 . IDENT_26 . METHOD_16 ( IDENT_17 , ( i + 2 ) , IDENT_17 [ ( i + 1 ) ] ) ; java . lang . String IDENT_27 = IDENT_0 . IDENT_1 . security . util . IDENT_25 . IDENT_26 . METHOD_17 ( IDENT_24 ) ; if ( ( ( ( ! ( IDENT_27 . equals ( STRING_3 ) ) ) && ( ! ( IDENT_27 . equals ( STRING_4 ) ) ) ) && ( ! ( IDENT_27 . equals ( STRING_5 ) ) ) ) && ( ! ( IDENT_27 . equals ( STRING_6 ) ) ) ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_15 ( STRING_1 1 ) ; } i += ( IDENT_17 [ ( i + 1 ) ] ) + 2 ; if ( ( IDENT_17 [ i ] ) != 4 ) { i += ( IDENT_17 [ ( i + 1 ) ] ) + 2 ; if ( ( IDENT_17 [ i ] ) != 4 ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_15 ( ( STRING_7 + i ) ) ; } } if ( ( METHOD_13 . length ) != ( IDENT_17 [ ( i + 1 ) ] ) ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_15 ( STRING_8 ) ; } i += 2 ; for ( int j = 0 ; j < ( METHOD_13 . length ) ; j ++ ) { if ( ( METHOD_13 [ j ] ) != ( IDENT_17 [ ( i + j ) ] ) ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_14 ( STRING_9 ) ; } } if ( IDENT_28 ) { IDENT_19 . METHOD_18 ( ) ; byte [ ] IDENT_29 = IDENT_19 . METHOD_13 ( IDENT_30 ) ; byte [ ] IDENT_31 = METHOD_19 ( ) ; if ( ( IDENT_29 . length ) != ( IDENT_31 . length ) ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_14 ( STRING_10 ) ; } for ( int j = 0 ; j < ( IDENT_29 . length ) ; j ++ ) { if ( ( IDENT_29 [ j ] ) != ( IDENT_31 [ j ] ) ) { throw new IDENT_0 . IDENT_1 . security . crypto . IDENT_23 . METHOD_14 ( STRING_9 ) ; } } } return true ; }
org . junit . Assert . assertTrue ( IDENT_10 . verify ( data , IDENT_7 , new java . security . IDENT_11 . IDENT_12 [ ] { } , provider ) ) 