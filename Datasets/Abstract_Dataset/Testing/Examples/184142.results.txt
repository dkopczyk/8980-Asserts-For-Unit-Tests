METHOD_0 ( ) { IDENT_0 . tools . IDENT_1 . IDENT_2 < IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 > IDENT_5 = new IDENT_0 . tools . IDENT_1 . METHOD_1 ( ) ; IDENT_5 . addAll ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . class , true , true ) ; final IDENT_0 . tools . IDENT_1 . IDENT_6 . IDENT_7 < IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 > IDENT_8 = IDENT_0 . tools . IDENT_1 . IDENT_6 . IDENT_9 . < IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 > create ( ) . add ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_10 , IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_11 ) . METHOD_2 ( ) . add ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_12 ) . build ( ) ; final java . util . concurrent . atomic . IDENT_13 IDENT_14 = new java . util . concurrent . atomic . METHOD_3 ( 0 ) ; IDENT_5 . METHOD_4 ( IDENT_8 , ( pattern ) -> { IDENT_14 . METHOD_5 ( ) ; } ) ; IDENT_5 . METHOD_6 ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_10 ) ; IDENT_5 . METHOD_6 ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_11 ) ; IDENT_5 . METHOD_6 ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_15 ) ; IDENT_5 . METHOD_6 ( IDENT_0 . tools . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( T extends IDENT_0 . tools . IDENT_1 . IDENT_16 ) { if ( ( IDENT_17 . METHOD_7 ( ) ) && ( IDENT_17 . METHOD_8 ( ) ) ) { throw new IDENT_0 . tools . IDENT_1 . METHOD_9 ( STRING_0 ) ; } IDENT_0 . tools . IDENT_1 . IDENT_18 < java . lang . Boolean > result = METHOD_10 ( next ) ; try { return result . get ( ) ; } catch ( java . lang . IDENT_19 e ) { throw new IDENT_0 . tools . IDENT_1 . METHOD_9 ( e ) ; } catch ( IDENT_0 . tools . IDENT_1 . IDENT_20 e ) { if ( ( e . METHOD_11 ( ) ) instanceof java . lang . RuntimeException ) { throw ( ( java . lang . RuntimeException ) ( e . METHOD_11 ( ) ) ) ; } else { throw new IDENT_0 . tools . IDENT_1 . METHOD_9 ( e . METHOD_11 ( ) ) ; } } }
org . junit . Assert . assertEquals ( 1 , IDENT_14 . get ( ) ) 