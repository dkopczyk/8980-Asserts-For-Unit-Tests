METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; try { java . lang . String result = generator . METHOD_1 ( IDENT_0 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } catch ( IDENT_3 . IDENT_4 | IDENT_3 . IDENT_5 IDENT_6 ) { IDENT_6 . printStackTrace ( ) ; } } METHOD_1 ( java . lang . String , java . util . Map ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( line ) ; java . util . regex . IDENT_7 m = IDENT_3 . IDENT_8 . IDENT_9 . matcher ( sb ) ; java . util . HashSet < java . lang . String > IDENT_10 = new java . util . HashSet ( ) ; while ( m . find ( ) ) { IDENT_10 . add ( m . group ( 0 ) ) ; if ( IDENT_2 . containsKey ( m . group ( 0 ) ) ) { sb . replace ( m . start ( ) , m . end ( ) , IDENT_2 . get ( m . group ( 0 ) ) ) ; } else { throw new IDENT_3 . METHOD_2 ( STRING_2 ) ; } m . METHOD_3 ( sb ) ; } if ( ( IDENT_10 . size ( ) ) != ( IDENT_2 . size ( ) ) ) { throw new IDENT_3 . METHOD_4 ( STRING_3 ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertThat ( result , org . hamcrest . core . Is . is ( IDENT_1 ) ) 