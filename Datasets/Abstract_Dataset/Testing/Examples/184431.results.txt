METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; try { generator . METHOD_1 ( IDENT_0 , IDENT_1 ) ; } catch ( IDENT_2 . IDENT_3 | IDENT_2 . IDENT_4 IDENT_5 ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . String , java . util . Map ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( line ) ; java . util . regex . IDENT_6 m = IDENT_2 . IDENT_7 . IDENT_8 . matcher ( sb ) ; java . util . HashSet < java . lang . String > IDENT_9 = new java . util . HashSet ( ) ; while ( m . find ( ) ) { IDENT_9 . add ( m . group ( 0 ) ) ; if ( IDENT_1 . containsKey ( m . group ( 0 ) ) ) { sb . replace ( m . start ( ) , m . end ( ) , IDENT_1 . get ( m . group ( 0 ) ) ) ; } else { throw new IDENT_2 . METHOD_2 ( STRING_1 ) ; } m . METHOD_3 ( sb ) ; } if ( ( IDENT_9 . size ( ) ) != ( IDENT_1 . size ( ) ) ) { throw new IDENT_2 . METHOD_4 ( STRING_2 ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertThat ( IDENT_5 . getMessage ( ) , org . hamcrest . core . Is . is ( STRING_2 ) ) 