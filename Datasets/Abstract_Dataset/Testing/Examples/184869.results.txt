METHOD_0 ( ) { com . vaadin . IDENT_0 . data . util . IDENT_1 < java . lang . String , com . vaadin . IDENT_0 . data . util . Person > container = new com . vaadin . IDENT_0 . data . util . IDENT_1 < java . lang . String , com . vaadin . IDENT_0 . data . util . Person > ( com . vaadin . IDENT_0 . data . util . Person . class ) ; container . METHOD_1 ( STRING_0 , new com . vaadin . IDENT_0 . data . util . Person ( STRING_0 ) ) ; try { container . METHOD_1 ( ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_1 ( null ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_2 ( null , null ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_2 ( new com . vaadin . IDENT_0 . data . util . Person ( STRING_1 ) ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_3 ( 0 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_3 ( 0 , new com . vaadin . IDENT_0 . data . util . Person ( STRING_1 ) ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } try { container . METHOD_4 ( STRING_2 , java . lang . String . class , "" ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_2 e ) { } "<AssertPlaceHolder>" ; } size ( ) { METHOD_5 ( ) ; return ( ( size ) + ( METHOD_6 ( ) ) ) - ( IDENT_3 . size ( ) ) ; }
org . junit . Assert . assertEquals ( 1 , container . size ( ) ) 