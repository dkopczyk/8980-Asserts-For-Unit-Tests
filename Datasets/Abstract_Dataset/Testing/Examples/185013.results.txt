METHOD_0 ( ) { com . vaadin . IDENT_0 . data . util . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_3 ) ; com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_4 query = new com . vaadin . IDENT_0 . data . util . IDENT_1 . query . METHOD_2 ( STRING_0 , java . util . Arrays . asList ( STRING_1 ) , IDENT_3 ) ; com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_5 delegate = org . easymock . EasyMock . METHOD_3 ( com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_5 . class ) ; org . easymock . EasyMock . expect ( delegate . METHOD_4 ( ) ) . andReturn ( STRING_2 ) ; org . easymock . EasyMock . replay ( delegate ) ; query . METHOD_5 ( delegate ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( delegate ) ; } METHOD_6 ( ) { com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_6 . METHOD_7 ( ) . log ( IDENT_7 . IDENT_8 , STRING_3 ) ; com . vaadin . IDENT_0 . data . util . IDENT_1 . query . generator . IDENT_9 IDENT_10 = IDENT_11 . METHOD_8 ( METHOD_9 ( ) , filters , null , 0 , 0 , STRING_4 ) ; boolean IDENT_12 = false ; if ( ! ( METHOD_10 ( ) ) ) { IDENT_12 = true ; METHOD_11 ( ) ; } java . sql . ResultSet r = null ; int count = - 1 ; try { r = METHOD_12 ( IDENT_10 ) ; r . next ( ) ; count = r . METHOD_13 ( 1 ) ; } finally { try { if ( r != null ) { METHOD_14 ( null , r . METHOD_15 ( ) , r ) ; } } finally { if ( IDENT_12 ) { commit ( ) ; } } } return count ; }
org . junit . Assert . assertEquals ( 0 , query . METHOD_6 ( ) ) 