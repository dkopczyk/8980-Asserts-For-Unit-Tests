METHOD_0 ( ) { com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_2 query = new com . vaadin . IDENT_0 . data . util . IDENT_1 . query . METHOD_1 ( STRING_0 , java . util . Arrays . asList ( STRING_1 ) , IDENT_3 ) ; com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_4 delegate = org . easymock . EasyMock . METHOD_2 ( com . vaadin . IDENT_0 . data . util . IDENT_1 . query . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( delegate . METHOD_3 ( 1 ) ) . METHOD_4 ( new java . lang . METHOD_5 ( ) ) ; org . easymock . EasyMock . replay ( delegate ) ; query . METHOD_6 ( delegate ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( delegate ) ; } METHOD_7 ( java . lang . Object [ ] ) { java . util . List < com . vaadin . IDENT_0 . data . IDENT_5 . IDENT_6 > IDENT_7 = new java . util . ArrayList < com . vaadin . IDENT_0 . data . IDENT_5 . IDENT_6 > ( ) ; if ( ( filters ) != null ) { IDENT_7 . addAll ( filters ) ; } int IDENT_8 = 0 ; for ( java . lang . String IDENT_9 : IDENT_10 ) { IDENT_7 . add ( new com . vaadin . IDENT_0 . data . util . filter . IDENT_11 . METHOD_8 ( IDENT_9 , keys [ IDENT_8 ] ) ) ; IDENT_8 ++ ; } com . vaadin . IDENT_0 . data . util . IDENT_1 . query . generator . IDENT_12 IDENT_13 = IDENT_14 . METHOD_9 ( METHOD_10 ( ) , IDENT_7 , IDENT_15 , 0 , 0 , STRING_2 ) ; boolean IDENT_16 = false ; if ( ! ( METHOD_11 ( ) ) ) { IDENT_16 = true ; METHOD_12 ( ) ; } java . sql . ResultSet rs = null ; try { rs = METHOD_13 ( IDENT_13 ) ; boolean contains = rs . next ( ) ; return contains ; } finally { try { if ( rs != null ) { METHOD_14 ( null , rs . METHOD_15 ( ) , rs ) ; } } finally { if ( IDENT_16 ) { commit ( ) ; } } } }
org . junit . Assert . assertTrue ( query . METHOD_7 ( 1 ) ) 