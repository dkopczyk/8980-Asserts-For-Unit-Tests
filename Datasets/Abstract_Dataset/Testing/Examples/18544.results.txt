METHOD_0 ( ) { org . apache . jackrabbit . oak . spi . security . IDENT_0 . IDENT_1 value = new org . apache . jackrabbit . oak . spi . security . IDENT_0 . METHOD_1 ( "name" ) ; org . apache . jackrabbit . oak . spi . security . IDENT_2 options = org . apache . jackrabbit . oak . spi . security . IDENT_2 . of ( "test" , value ) ; "<AssertPlaceHolder>" ; } get ( java . lang . String ) { if ( IDENT_3 == null ) { return com . google . common . collect . IDENT_4 . of ( ) ; } java . util . Set < java . security . IDENT_5 > IDENT_6 ; if ( ! ( IDENT_7 . containsKey ( IDENT_3 ) ) ) { java . lang . String [ ] IDENT_8 = IDENT_9 . get ( IDENT_3 ) ; if ( IDENT_8 == null ) { IDENT_6 = com . google . common . collect . IDENT_4 . of ( ) ; } else { com . google . common . collect . IDENT_4 . Builder < java . security . IDENT_5 > builder = com . google . common . collect . IDENT_4 . builder ( ) ; for ( java . lang . String IDENT_10 : IDENT_9 . get ( IDENT_3 ) ) { try { org . apache . jackrabbit . api . security . user . IDENT_11 IDENT_12 = IDENT_13 . METHOD_2 ( IDENT_10 ) ; if ( ( IDENT_12 != null ) && ( IDENT_12 . METHOD_3 ( ) ) ) { java . security . IDENT_5 IDENT_14 = IDENT_12 . METHOD_4 ( ) ; if ( org . apache . jackrabbit . oak . spi . security . IDENT_15 . IDENT_16 . METHOD_3 ( IDENT_14 ) ) { builder . add ( IDENT_14 ) ; } else { org . apache . jackrabbit . oak . spi . security . authentication . IDENT_17 . impl . IDENT_15 . IDENT_18 . log . warn ( STRING_0 , IDENT_10 ) ; } } else { org . apache . jackrabbit . oak . spi . security . authentication . IDENT_17 . impl . IDENT_15 . IDENT_18 . log . warn ( STRING_1 , IDENT_10 ) ; } } catch ( javax . jcr . IDENT_19 e ) { org . apache . jackrabbit . oak . spi . security . authentication . IDENT_17 . impl . IDENT_15 . IDENT_18 . log . debug ( STRING_2 , IDENT_10 , e ) ; } } IDENT_6 = builder . build ( ) ; } IDENT_7 . put ( IDENT_3 , IDENT_6 ) ; } else { IDENT_6 = IDENT_7 . get ( IDENT_3 ) ; } return IDENT_6 ; }
org . junit . Assert . assertSame ( value , options . get ( "test" ) ) 