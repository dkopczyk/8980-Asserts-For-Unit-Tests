METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_0 . put ( STRING_0 , STRING_1 ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . dao . jena . IDENT_5 IDENT_6 = this . METHOD_1 ( ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . dao . IDENT_7 IDENT_8 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . dao . METHOD_2 ( IDENT_6 ) ; java . util . HashMap < java . lang . String , java . lang . String > IDENT_9 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; try { for ( java . lang . String key : IDENT_0 . METHOD_3 ( ) ) { java . lang . String IDENT_10 = IDENT_0 . get ( key ) ; java . lang . String uri = IDENT_8 . METHOD_4 ( IDENT_10 ) ; IDENT_9 . put ( key , uri ) ; } } catch ( java . lang . Exception ex ) { System . out . println ( ( STRING_2 + ex ) ) ; } java . util . List < java . lang . String > values = new java . util . ArrayList < java . lang . String > ( IDENT_9 . values ( ) ) ; java . util . Set < java . lang . String > IDENT_11 = new java . util . HashSet < java . lang . String > ( IDENT_9 . values ( ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return m . size ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_11 . size ( ) ) == ( values . size ( ) ) ) ) 