METHOD_0 ( ) { final int IDENT_0 = 10 ; final java . util . concurrent . atomic . IDENT_1 IDENT_2 = new java . util . concurrent . atomic . METHOD_1 ( ) ; final java . util . concurrent . IDENT_3 IDENT_4 = new java . util . concurrent . METHOD_2 ( ( IDENT_0 + 1 ) ) ; final java . util . concurrent . METHOD_2 IDENT_5 = new java . util . concurrent . METHOD_2 ( ( IDENT_0 + 1 ) ) ; for ( ; ( IDENT_2 . get ( ) ) < IDENT_0 ; IDENT_2 . METHOD_3 ( ) ) { final long index = ( ( long ) ( IDENT_2 . get ( ) ) ) * IDENT_0 ; com . IDENT_6 . IDENT_7 . IDENT_8 . LOG . info ( STRING_0 , index ) ; java . lang . Thread IDENT_9 = new java . lang . Thread ( new java . lang . METHOD_4 ( ) { @ com . IDENT_6 . IDENT_7 . Override public void run ( ) { try { IDENT_4 . METHOD_5 ( ) ; IDENT_4 . METHOD_6 ( ) ; IDENT_10 . METHOD_7 ( 0L , new com . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_8 ( index ) ) ; IDENT_5 . METHOD_5 ( ) ; } catch ( java . lang . IDENT_11 e ) { java . lang . Thread . METHOD_9 ( ) . METHOD_10 ( ) ; } } } ) ; IDENT_9 . start ( ) ; } IDENT_4 . METHOD_5 ( ) ; com . IDENT_6 . IDENT_7 . IDENT_8 . LOG . info ( STRING_1 ) ; IDENT_5 . METHOD_5 ( ) ; IDENT_5 . METHOD_6 ( ) ; com . IDENT_6 . IDENT_7 . IDENT_8 . LOG . info ( STRING_2 ) ; for ( int i = 0 ; i < IDENT_0 ; i += com . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_12 ) { long reference = buffer . get ( i ) ; for ( int j = 0 ; j < ( com . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_12 ) ; j ++ ) { "<AssertPlaceHolder>" ; } } } get ( com . IDENT_6 . cache . IDENT_13 ) { return cache . containsKey ( IDENT_14 ) ? cache . get ( IDENT_14 ) : com . IDENT_6 . cache . IDENT_15 . IDENT_16 ; }
org . junit . Assert . assertEquals ( ( reference + j ) , ( ( long ) ( buffer . get ( ( i + j ) ) ) ) ) 