METHOD_0 ( ) { org . springframework . http . IDENT_0 IDENT_1 = mock ( org . springframework . http . IDENT_0 . class ) ; com . vmware . IDENT_2 . IDENT_3 . rest . factory . IDENT_4 IDENT_5 = mock ( com . vmware . IDENT_2 . IDENT_3 . rest . factory . IDENT_4 . class ) ; METHOD_1 ( com . vmware . IDENT_2 . IDENT_3 . rest . factory . IDENT_4 . class ) . METHOD_2 ( ) . thenReturn ( IDENT_5 ) ; when ( IDENT_5 . METHOD_3 ( any ( org . springframework . http . IDENT_6 . class ) , anyString ( ) , anyString ( ) , any ( java . lang . Class . class ) ) ) . thenReturn ( IDENT_1 ) ; com . vmware . IDENT_2 . IDENT_3 . controller . IDENT_7 IDENT_8 = new com . vmware . IDENT_2 . IDENT_3 . controller . METHOD_4 ( ) ; javax . servlet . http . IDENT_9 IDENT_10 = mock ( javax . servlet . http . IDENT_9 . class ) ; javax . servlet . http . IDENT_11 IDENT_12 = mock ( javax . servlet . http . IDENT_11 . class ) ; when ( IDENT_10 . METHOD_5 ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_10 . METHOD_6 ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_10 . METHOD_7 ( ) ) . thenReturn ( "test" ) ; when ( IDENT_10 . METHOD_8 ( ) ) . thenReturn ( STRING_1 ) ; org . springframework . http . IDENT_0 response = IDENT_8 . METHOD_9 ( null , IDENT_6 . IDENT_13 , IDENT_10 , IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( java . lang . String , org . springframework . http . IDENT_6 , javax . servlet . http . IDENT_9 , javax . servlet . http . IDENT_11 ) { org . springframework . http . IDENT_0 < java . lang . Object > nodes ; java . lang . String path = ( request . METHOD_5 ( ) ) + ( request . METHOD_6 ( ) ) ; try { java . lang . String query = request . METHOD_7 ( ) ; org . springframework . http . IDENT_6 IDENT_14 = org . springframework . http . IDENT_6 . valueOf ( request . METHOD_8 ( ) ) ; java . lang . String IDENT_15 = request . METHOD_10 ( ) ; com . vmware . IDENT_2 . IDENT_3 . rest . factory . IDENT_4 < java . lang . String > IDENT_16 = new com . vmware . IDENT_2 . IDENT_3 . rest . factory . IDENT_4 < java . lang . String > ( body , IDENT_15 ) ; nodes = IDENT_16 . METHOD_3 ( IDENT_14 , path , query , java . lang . Object . class ) ; } catch ( org . springframework . web . client . IDENT_17 e ) { org . springframework . http . IDENT_18 headers = new org . springframework . http . METHOD_11 ( ) ; headers . METHOD_12 ( IDENT_19 . IDENT_20 ) ; nodes = new org . springframework . http . IDENT_0 < java . lang . Object > ( e . METHOD_13 ( ) , headers , e . getStatusCode ( ) ) ; } catch ( java . lang . Exception e ) { throw new com . vmware . IDENT_2 . IDENT_3 . common . exception . METHOD_14 ( IDENT_21 . IDENT_22 . value ( ) , STRING_2 , ( STRING_3 + ( path != null ? path : "" ) ) ) ; } return nodes ; }
org . junit . Assert . assertSame ( IDENT_1 , response ) 