METHOD_0 ( ) { com . vmware . IDENT_0 . common . test . IDENT_1 ctx = new com . vmware . IDENT_0 . common . test . METHOD_1 ( 1 , com . vmware . IDENT_0 . common . test . METHOD_1 . IDENT_2 ) ; java . util . concurrent . atomic . IDENT_3 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( ) ; com . vmware . IDENT_0 . common . IDENT_5 < java . lang . Integer > original = new com . vmware . IDENT_0 . common . METHOD_3 ( ) ; original . METHOD_4 ( ( result , ex ) -> { IDENT_4 . METHOD_5 ( ) ; throw new java . lang . RuntimeException ( ) ; } ) . METHOD_4 ( METHOD_6 ( ctx ) ) ; METHOD_7 ( 10 , ( ) -> original . fail ( new com . vmware . IDENT_0 . common . METHOD_8 ( ) ) ) ; ctx . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { java . lang . StringBuilder result = super . get ( ) ; if ( ( result . length ( ) ) > ( ( com . vmware . IDENT_0 . common . IDENT_6 . IDENT_7 ) * 10 ) ) { result = new java . lang . StringBuilder ( com . vmware . IDENT_0 . common . IDENT_6 . IDENT_7 ) ; set ( result ) ; } else { result . METHOD_10 ( 0 ) ; } return result ; }
org . junit . Assert . assertEquals ( 1 , IDENT_4 . get ( ) ) 