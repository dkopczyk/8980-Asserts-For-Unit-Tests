METHOD_0 ( ) { try { com . IDENT_0 . IDENT_1 . engine . IDENT_2 model = new com . IDENT_0 . IDENT_1 . engine . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_3 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_3 . put ( IDENT_4 . IDENT_5 , "" ) ; IDENT_3 . put ( IDENT_4 . IDENT_6 , STRING_0 ) ; model . METHOD_2 ( ) . put ( IDENT_4 . IDENT_7 , IDENT_3 ) ; java . lang . String IDENT_8 = STRING_1 ; java . lang . String IDENT_9 = STRING_2 ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_3 ( ) ) . andReturn ( 1 ) ; IDENT_11 . METHOD_4 ( IDENT_10 , model ) ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_5 ( ) ) . andReturn ( IDENT_9 ) ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_6 ( ) ) . andReturn ( IDENT_8 ) ; IDENT_12 . process ( org . easymock . EasyMock . METHOD_7 ( java . lang . String . class ) , org . easymock . EasyMock . METHOD_7 ( java . util . Map . class ) , org . easymock . EasyMock . METHOD_7 ( java . io . IDENT_13 . class ) ) ; org . easymock . EasyMock . replay ( IDENT_14 , IDENT_15 , IDENT_11 , IDENT_12 , IDENT_10 , IDENT_16 , IDENT_17 ) ; java . lang . String result = IDENT_18 . METHOD_8 ( IDENT_17 , IDENT_10 , model ) ; org . easymock . EasyMock . verify ( IDENT_14 , IDENT_15 , IDENT_11 , IDENT_12 , IDENT_10 , IDENT_16 , IDENT_17 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } METHOD_8 ( javax . servlet . http . IDENT_19 , com . IDENT_0 . IDENT_1 . IDENT_20 . IDENT_21 , com . IDENT_0 . IDENT_1 . engine . METHOD_1 ) { java . lang . Integer IDENT_22 = IDENT_23 . METHOD_3 ( ) ; if ( ( IDENT_22 == null ) || ( IDENT_22 == 0 ) ) { return IDENT_23 . METHOD_9 ( ) ; } IDENT_24 . METHOD_4 ( IDENT_23 , model ) ; java . lang . String IDENT_25 = IDENT_23 . METHOD_5 ( ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_26 = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; boolean IDENT_27 = ( IDENT_25 != null ) && ( ( IDENT_25 . length ( ) ) > 0 ) ; if ( IDENT_27 ) { com . IDENT_0 . IDENT_1 . IDENT_28 IDENT_29 = METHOD_5 ( IDENT_25 ) ; IDENT_29 . METHOD_10 ( model ) ; } model . METHOD_11 ( IDENT_26 ) ; IDENT_26 . put ( IDENT_4 . IDENT_30 , model . METHOD_12 ( ) ) ; if ( model . METHOD_2 ( ) . containsKey ( IDENT_4 . IDENT_7 ) ) { IDENT_26 . put ( IDENT_4 . IDENT_5 , model . METHOD_2 ( ) . get ( IDENT_4 . IDENT_7 ) . get ( IDENT_4 . IDENT_5 ) ) ; IDENT_26 . put ( IDENT_4 . IDENT_6 , model . METHOD_2 ( ) . get ( IDENT_4 . IDENT_7 ) . get ( IDENT_4 . IDENT_6 ) ) ; } java . lang . String result = "" ; try { java . io . StringWriter out = new java . io . StringWriter ( ) ; IDENT_31 . process ( ( ( com . IDENT_0 . IDENT_1 . template . IDENT_32 . IDENT_33 ) + ( IDENT_23 . METHOD_6 ( ) ) ) , IDENT_26 , out ) ; result += out . toString ( ) ; } catch ( com . IDENT_0 . IDENT_1 . exception . IDENT_34 e ) { throw e ; } return result ; }
org . junit . Assert . assertTrue ( false ) 