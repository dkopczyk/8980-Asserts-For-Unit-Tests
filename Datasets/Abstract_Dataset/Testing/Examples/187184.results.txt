METHOD_0 ( ) { java . lang . Throwable exception = new java . lang . Exception ( ) ; com . IDENT_0 . IDENT_1 . engine . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . engine . METHOD_1 ( ) ; java . util . Map < java . lang . String , byte [ ] > IDENT_4 = org . easymock . EasyMock . METHOD_2 ( java . util . Map . class ) ; java . lang . String IDENT_5 = STRING_0 ; byte [ ] content = STRING_1 . getBytes ( ) ; org . easymock . EasyMock . expect ( IDENT_4 . containsKey ( IDENT_5 ) ) . andReturn ( false ) ; org . easymock . EasyMock . replay ( IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_4 ) ; try { IDENT_3 . getResource ( IDENT_5 ) ; } catch ( java . lang . Exception e ) { exception = e ; } "<AssertPlaceHolder>" ; } getResource ( java . lang . String ) { if ( IDENT_6 . containsKey ( path ) ) { return IDENT_6 . get ( path ) ; } throw new com . IDENT_0 . IDENT_1 . engine . METHOD_4 ( ( STRING_2 + path ) ) ; }
org . junit . Assert . assertTrue ( ( exception instanceof com . IDENT_0 . IDENT_1 . engine . METHOD_4 ) ) 