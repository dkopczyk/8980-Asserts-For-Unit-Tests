METHOD_0 ( ) { final float [ ] data = new float [ ( IDENT_0 ) * ( IDENT_1 ) ] ; java . lang . String msg = ( java . lang . String . format ( org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , IDENT_6 , IDENT_0 , IDENT_1 ) ) + STRING_0 ; for ( int r = 0 ; r < ( IDENT_0 ) ; r ++ ) { for ( int c = 0 ; c < ( 2 * ( IDENT_1 ) ) ; c ++ ) { final float expected = random . METHOD_1 ( ) ; try { IDENT_7 . METHOD_2 ( expected , r , c , data , 0 ) ; final float actual = IDENT_7 . METHOD_3 ( r , c , data , 0 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IllegalArgumentException e ) { } } } } METHOD_3 ( int , int , int , float [ ] [ ] [ ] ) { final int i = METHOD_4 ( s , r , c ) ; final int IDENT_8 = METHOD_5 ( i ) ; final int IDENT_9 = IDENT_8 / ( IDENT_10 ) ; final int IDENT_11 = IDENT_8 OP_0 ( IDENT_10 ) ; final int IDENT_12 = IDENT_11 / ( IDENT_13 ) ; final int cc = IDENT_11 OP_0 ( IDENT_13 ) ; if ( i >= 0 ) { return IDENT_14 [ IDENT_9 ] [ IDENT_12 ] [ cc ] ; } else if ( i > ( Integer . IDENT_15 ) ) { return - ( IDENT_14 [ IDENT_9 ] [ IDENT_12 ] [ cc ] ) ; } else { return org . IDENT_2 . IDENT_3 . IDENT_16 . IDENT_17 ; } }
org . junit . Assert . assertEquals ( java . lang . String . format ( msg , r , c ) , expected , actual , 0.0 ) 