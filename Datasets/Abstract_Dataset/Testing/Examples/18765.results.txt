METHOD_0 ( ) { java . lang . String [ ] filters = new java . lang . String [ ] { STRING_0 } ; org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . IDENT_2 IDENT_3 = new org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_1 ( ) { @ org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . Override public java . net . IDENT_4 resolve ( java . lang . String host ) { return null ; } } ; org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . IDENT_5 IDENT_6 = new org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_2 ( filters , IDENT_3 ) ; java . net . IDENT_7 address = new java . net . METHOD_3 ( STRING_1 , INT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . net . IDENT_4 ) { if ( ( IDENT_8 ) == null ) { return true ; } if ( ( IDENT_8 . length ) == 0 ) { return true ; } for ( java . lang . String s : this . IDENT_8 ) { java . lang . String [ ] IDENT_9 = s . split ( STRING_2 ) ; if ( ( ( ( IDENT_9 . length ) == 2 ) && ( ! ( org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_2 . METHOD_5 ( IDENT_9 [ 0 ] ) ) ) ) && ( ! ( org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_2 . METHOD_5 ( IDENT_9 [ 1 ] ) ) ) ) { if ( org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_2 . METHOD_4 ( address , IDENT_10 , IDENT_9 [ 0 ] . trim ( ) , IDENT_9 [ 1 ] . trim ( ) ) ) { return true ; } } else { if ( org . apache . jackrabbit . oak . IDENT_0 . IDENT_1 . server . METHOD_2 . METHOD_4 ( address , IDENT_10 , s . trim ( ) ) ) { return true ; } } } return false ; }
org . junit . Assert . assertEquals ( false , IDENT_6 . METHOD_4 ( address ) ) 