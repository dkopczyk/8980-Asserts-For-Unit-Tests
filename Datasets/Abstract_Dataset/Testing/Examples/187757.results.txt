METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . codec . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . codec . METHOD_1 ( ) ; java . util . List < java . lang . Object > out = new java . util . ArrayList ( ) ; io . netty . buffer . IDENT_4 buf = METHOD_2 ( new byte [ ] { 1 , 7 , 0 , ( ( byte ) ( INT_0 ) ) , 2 , 1 , 0 , 0 , ( ( byte ) ( INT_1 ) ) } ) ; IDENT_3 . decode ( null , buf , out ) ; "<AssertPlaceHolder>" ; } decode ( io . netty . channel . IDENT_5 , io . netty . buffer . IDENT_4 , java . util . List ) { if ( com . IDENT_0 . IDENT_1 . codec . METHOD_1 . logger . METHOD_3 ( ) ) { com . IDENT_0 . IDENT_1 . codec . METHOD_1 . logger . debug ( STRING_0 , com . IDENT_0 . IDENT_1 . util . IDENT_6 . METHOD_4 ( in ) ) ; } io . netty . buffer . IDENT_4 data ; if ( ( IDENT_7 ) != null ) { io . netty . buffer . IDENT_8 IDENT_9 = io . netty . buffer . IDENT_10 . METHOD_5 ( 2 ) ; IDENT_9 . METHOD_6 ( IDENT_7 . METHOD_7 ( ) ) ; IDENT_9 . METHOD_6 ( in ) ; IDENT_9 . METHOD_8 ( ( ( IDENT_7 . METHOD_9 ( ) ) + ( in . METHOD_9 ( ) ) ) ) ; data = IDENT_9 ; IDENT_7 . METHOD_10 ( ) ; IDENT_7 = null ; } else { data = in ; } while ( data . METHOD_11 ( ) ) { if ( ( ( data . METHOD_9 ( ) ) == 1 ) && ( METHOD_12 ( data , data . METHOD_13 ( ) ) ) ) { out . add ( METHOD_14 ( data ) ) ; } else { boolean IDENT_11 = false ; for ( int IDENT_12 = data . METHOD_13 ( ) ; IDENT_12 < ( ( data . METHOD_13 ( ) ) + ( data . METHOD_9 ( ) ) ) ; IDENT_12 ++ ) { if ( ( data . METHOD_15 ( IDENT_12 ) ) == ( IDENT_13 . IDENT_14 ) ) { int IDENT_15 = METHOD_16 ( data , IDENT_12 ) ; if ( IDENT_15 > 0 ) { if ( ( IDENT_12 > ( data . METHOD_13 ( ) ) ) && ( METHOD_12 ( data , ( IDENT_12 - 1 ) ) ) ) { data . METHOD_13 ( ( IDENT_12 - 1 ) ) ; out . add ( METHOD_14 ( data ) ) ; } else if ( IDENT_12 > ( data . METHOD_13 ( ) ) ) { data . METHOD_13 ( IDENT_12 ) ; } com . IDENT_0 . IDENT_1 . codec . IDENT_13 IDENT_16 = METHOD_17 ( data ) ; if ( IDENT_16 != null ) { out . add ( IDENT_16 ) ; data . METHOD_18 ( ) ; IDENT_11 = true ; } else { com . IDENT_0 . IDENT_1 . codec . METHOD_1 . logger . debug ( STRING_1 ) ; } } } } if ( ! IDENT_11 ) { IDENT_7 = data . METHOD_7 ( ) ; break ; } } } in . METHOD_19 ( in . METHOD_9 ( ) ) ; com . IDENT_0 . IDENT_1 . codec . METHOD_1 . logger . trace ( STRING_2 , out ) ; }
org . junit . Assert . assertEquals ( 0 , out . size ( ) ) 