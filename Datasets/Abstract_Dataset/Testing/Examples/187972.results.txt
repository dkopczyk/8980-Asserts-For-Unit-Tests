METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . Map < java . lang . String , org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . List < org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . IDENT_3 > > IDENT_4 = org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . IDENT_5 . METHOD_1 ( IDENT_6 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . IDENT_0 . IDENT_1 . datamodel . interfaces . IDENT_3 , org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . Map ) { org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . Map < java . lang . String , org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . List < org . IDENT_0 . IDENT_1 . datamodel . interfaces . IDENT_3 > > IDENT_8 = new org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . HashMap ( IDENT_9 ) ; java . lang . String IDENT_10 = statement . METHOD_2 ( ) . METHOD_3 ( ) . getId ( ) ; if ( IDENT_8 . containsKey ( IDENT_10 ) ) { org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . List < org . IDENT_0 . IDENT_1 . datamodel . interfaces . IDENT_3 > IDENT_11 = new org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . ArrayList ( IDENT_8 . get ( IDENT_10 ) . size ( ) ) ; boolean IDENT_12 = false ; for ( org . IDENT_0 . IDENT_1 . datamodel . interfaces . IDENT_3 IDENT_13 : IDENT_8 . get ( IDENT_10 ) ) { if ( ( IDENT_13 . METHOD_4 ( ) . equals ( statement . METHOD_4 ( ) ) ) && ( ! ( IDENT_13 . METHOD_4 ( ) . isEmpty ( ) ) ) ) { IDENT_12 = true ; IDENT_11 . add ( statement ) ; } else { IDENT_11 . add ( IDENT_13 ) ; } } if ( ! IDENT_12 ) { IDENT_11 . add ( statement ) ; } IDENT_8 . put ( IDENT_10 , IDENT_11 ) ; } else { IDENT_8 . put ( IDENT_10 , org . IDENT_0 . IDENT_1 . datamodel . IDENT_2 . Collections . singletonList ( statement ) ) ; } return IDENT_8 ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_4 ) 