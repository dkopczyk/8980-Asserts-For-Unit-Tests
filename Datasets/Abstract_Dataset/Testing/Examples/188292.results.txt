METHOD_0 ( ) { java . io . File IDENT_0 = org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( STRING_0 ) ; java . nio . IDENT_5 . IDENT_6 in = org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_3 ( ) , true ) ; java . nio . IDENT_5 . IDENT_6 out = org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( IDENT_0 , false ) ; java . nio . ByteBuffer IDENT_7 = org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_4 ( ( ( int ) ( in . size ( ) ) ) ) ; in . read ( IDENT_7 ) ; org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_5 ( IDENT_7 , 1 , ( ( ( int ) ( in . size ( ) ) ) - 2 ) ) ; IDENT_7 . METHOD_6 ( ) ; out . write ( IDENT_7 ) ; long size = out . size ( ) ; IDENT_7 = java . nio . ByteBuffer . METHOD_7 ( 1 ) ; IDENT_7 . put ( ( ( byte ) ( 0 ) ) ) ; IDENT_7 . METHOD_6 ( ) ; out . write ( IDENT_7 , size ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . io . File ) { java . nio . IDENT_5 . IDENT_6 channel = null ; try { channel = new java . io . METHOD_9 ( file ) . METHOD_2 ( ) ; long size = channel . size ( ) ; if ( size < ( org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_10 ) ) { return false ; } else if ( org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_10 ( file , channel , ( size - ( org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . IDENT_10 ) ) ) ) { return true ; } return org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_11 ( file , channel ) ; } finally { org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_12 ( channel ) ; } }
org . junit . Assert . assertTrue ( org . jboss . as . server . IDENT_1 . IDENT_2 . IDENT_9 . METHOD_8 ( IDENT_0 ) ) 