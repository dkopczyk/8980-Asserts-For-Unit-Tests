METHOD_0 ( ) { final int port = IDENT_0 . IDENT_1 ; try ( java . net . IDENT_2 IDENT_3 = org . wildfly . IDENT_4 . IDENT_0 . METHOD_1 ( port ) ) { final java . lang . Thread IDENT_5 = METHOD_2 ( IDENT_3 ) ; final org . wildfly . IDENT_4 . IDENT_6 . IDENT_7 future = new org . wildfly . IDENT_4 . IDENT_6 . METHOD_3 ( ) ; javax . net . IDENT_8 . IDENT_9 IDENT_10 = org . wildfly . IDENT_4 . IDENT_0 . METHOD_4 ( STRING_0 ) ; try ( javax . net . IDENT_8 . IDENT_11 IDENT_12 = ( ( javax . net . IDENT_8 . IDENT_11 ) ( IDENT_10 . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) { IDENT_12 . connect ( new java . net . METHOD_7 ( IDENT_0 . IDENT_13 , port ) ) ; IDENT_12 . METHOD_8 ( new org . wildfly . IDENT_4 . IDENT_6 . METHOD_9 ( future ) ) ; IDENT_12 . METHOD_10 ( ) . write ( org . wildfly . IDENT_4 . IDENT_6 . IDENT_14 ) ; IDENT_12 . METHOD_11 ( ) . METHOD_12 ( ) ; IDENT_12 . METHOD_10 ( ) . METHOD_13 ( ) ; } byte [ ] IDENT_15 = future . get ( ) ; byte [ ] IDENT_16 = METHOD_14 ( IDENT_10 , port ) ; "<AssertPlaceHolder>" ; IDENT_3 . close ( ) ; IDENT_5 . join ( ) ; } } METHOD_14 ( javax . net . IDENT_8 . IDENT_9 , int ) { final org . wildfly . IDENT_4 . IDENT_6 . METHOD_3 future = new org . wildfly . IDENT_4 . IDENT_6 . METHOD_3 ( ) ; try ( javax . net . IDENT_8 . IDENT_11 IDENT_12 = ( ( javax . net . IDENT_8 . IDENT_11 ) ( context . METHOD_5 ( ) . METHOD_6 ( ) ) ) ) { IDENT_12 . connect ( new java . net . METHOD_7 ( IDENT_0 . IDENT_13 , port ) ) ; IDENT_12 . METHOD_8 ( new org . wildfly . IDENT_4 . IDENT_6 . METHOD_9 ( future ) ) ; IDENT_12 . METHOD_10 ( ) . write ( org . wildfly . IDENT_4 . IDENT_6 . IDENT_14 ) ; IDENT_12 . METHOD_10 ( ) . METHOD_13 ( ) ; } return future . get ( ) ; }
org . junit . Assert . assertFalse ( java . util . Arrays . equals ( IDENT_15 , IDENT_16 ) ) 