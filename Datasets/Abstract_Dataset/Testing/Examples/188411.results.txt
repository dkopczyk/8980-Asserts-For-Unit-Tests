METHOD_0 ( ) { java . lang . Exception [ ] exceptions = new java . lang . Exception [ 3 ] ; for ( int i = 0 ; i < ( exceptions . length ) ; ++ i ) { exceptions [ i ] = new java . lang . Exception ( ) ; } org . wildfly . common . function . IDENT_0 < java . lang . Exception > action = mock ( org . wildfly . common . function . IDENT_0 . class ) ; METHOD_1 ( ) . when ( action ) . run ( ) ; org . wildfly . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . wildfly . IDENT_1 . IDENT_2 . IDENT_5 . METHOD_2 ( java . time . IDENT_6 . IDENT_7 , java . time . IDENT_6 . IDENT_7 ) ; IDENT_4 . invoke ( action ) ; METHOD_3 ( exceptions [ 0 ] ) . METHOD_1 ( ) . when ( action ) . run ( ) ; IDENT_4 . invoke ( action ) ; METHOD_3 ( exceptions [ 0 ] , exceptions [ 1 ] ) . METHOD_1 ( ) . when ( action ) . run ( ) ; IDENT_4 . invoke ( action ) ; METHOD_3 ( exceptions ) . METHOD_1 ( ) . when ( action ) . run ( ) ; try { IDENT_4 . invoke ( action ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } invoke ( org . wildfly . common . function . IDENT_0 ) { org . wildfly . common . function . IDENT_8 < java . lang . IDENT_9 , IDENT_10 > adapter = new org . wildfly . common . function . IDENT_8 < java . lang . IDENT_9 , IDENT_10 > ( ) { @ org . wildfly . IDENT_1 . IDENT_2 . IDENT_5 . Override public org . wildfly . IDENT_1 . IDENT_2 . IDENT_5 . IDENT_9 get ( ) throws IDENT_10 { action . run ( ) ; return null ; } } ; this . invoke ( adapter ) ; }
org . junit . Assert . assertSame ( exceptions [ 2 ] , e ) 