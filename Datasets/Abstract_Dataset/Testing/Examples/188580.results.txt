METHOD_0 ( ) { org . jboss . as . test . integration . jpa . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = METHOD_1 ( STRING_0 , org . jboss . as . test . integration . jpa . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; try { IDENT_3 . METHOD_2 ( 1 , null ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . lang . Throwable IDENT_4 ) { javax . validation . IDENT_5 IDENT_6 = null ; while ( ( IDENT_4 != null ) && ( ! ( IDENT_4 instanceof javax . validation . IDENT_5 ) ) ) { IDENT_4 = IDENT_4 . METHOD_3 ( ) ; } IDENT_6 = ( ( javax . validation . IDENT_5 ) ( IDENT_4 ) ) ; java . util . Set < javax . validation . IDENT_7 < ? > > IDENT_8 = IDENT_6 . METHOD_4 ( ) ; java . util . List < java . lang . String > IDENT_9 = new java . util . ArrayList < java . lang . String > ( ) ; for ( javax . validation . IDENT_7 < ? > IDENT_10 : IDENT_8 ) { IDENT_9 . add ( IDENT_10 . getMessage ( ) ) ; } java . util . List < java . lang . String > IDENT_11 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_11 . add ( STRING_2 ) ; IDENT_11 . add ( STRING_3 ) ; java . util . Collections . METHOD_5 ( IDENT_9 ) ; java . util . Collections . METHOD_5 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } } add ( org . jboss . IDENT_12 . service . IDENT_13 ) { final java . util . concurrent . IDENT_14 < org . jboss . IDENT_12 . service . IDENT_13 > IDENT_15 = this . IDENT_15 ; if ( IDENT_15 . contains ( IDENT_16 ) ) { throw IDENT_17 . IDENT_18 . METHOD_6 ( IDENT_16 ) ; } IDENT_15 . add ( IDENT_16 ) ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_9 ) 