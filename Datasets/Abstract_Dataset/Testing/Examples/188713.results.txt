METHOD_0 ( ) { java . lang . String init = STRING_0 4 + ( ( STRING_0 6 + STRING_1 ) + STRING_0 0 ) ; java . lang . String q = STRING_2 + ( ( ( ( ( ( ( ( ( ( STRING_3 + STRING_4 ) + STRING_5 ) + STRING_6 ) + STRING_0 5 ) + STRING_0 1 ) + STRING_7 ) + STRING_0 3 ) + STRING_0 7 ) + STRING_0 0 ) + STRING_0 0 ) ; java . lang . String IDENT_0 = STRING_0 2 + STRING_8 ; fr . IDENT_1 . IDENT_2 . core . IDENT_3 g = METHOD_1 ( ) ; fr . IDENT_1 . IDENT_2 . core . query . IDENT_4 exec = fr . IDENT_1 . IDENT_2 . core . query . IDENT_4 . create ( g ) ; exec . query ( init ) ; exec . query ( q ) ; fr . IDENT_1 . IDENT_2 . IDENT_5 . core . IDENT_6 map = exec . query ( IDENT_0 ) ; fr . IDENT_1 . IDENT_2 . IDENT_7 . api . IDENT_8 IDENT_9 = ( ( fr . IDENT_1 . IDENT_2 . IDENT_7 . api . IDENT_8 ) ( map . getValue ( STRING_9 ) ) ) ; System . out . println ( IDENT_9 ) ; for ( fr . IDENT_1 . IDENT_2 . IDENT_7 . api . IDENT_8 IDENT_10 : IDENT_9 . METHOD_2 ( ) ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( ) { java . util . ArrayList < fr . IDENT_1 . IDENT_2 . IDENT_7 . api . IDENT_8 > list = new java . util . ArrayList ( ) ; if ( ( METHOD_3 ( ) ) == null ) { } else { list . add ( fr . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_11 . IDENT_12 . METHOD_4 ( METHOD_5 ( ) ) ) ; for ( fr . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_13 . parser . IDENT_14 exp : METHOD_3 ( ) ) { list . add ( exp . METHOD_6 ( ) ) ; } } return list ; }
org . junit . Assert . assertEquals ( true , IDENT_10 . METHOD_2 ( ) . get ( 0 ) . equals ( IDENT_10 . METHOD_2 ( ) . get ( 1 ) ) ) 