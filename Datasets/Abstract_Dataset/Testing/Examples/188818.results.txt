METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > IDENT_5 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_0 , 0 , new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 ( ) , true ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 meta = com . google . common . collect . IDENT_6 . METHOD_3 ( IDENT_5 ) ; "<AssertPlaceHolder>" . METHOD_4 ( 0.0 ) ; } METHOD_1 ( java . lang . String , int , com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 , boolean ) { com . IDENT_0 . IDENT_1 . IDENT_2 . List < java . lang . String > args = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_5 ( command ) ; if ( args . isEmpty ( ) ) return null ; com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 state = IDENT_8 . METHOD_6 ( ) ; state . IDENT_9 = line ; com . IDENT_0 . IDENT_1 . IDENT_2 . List < java . lang . String > IDENT_10 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_7 ( args , STRING_1 ) ; if ( ! ( IDENT_10 . isEmpty ( ) ) ) { try { state . IDENT_11 = java . lang . Double . METHOD_8 ( com . google . common . collect . IDENT_6 . METHOD_3 ( IDENT_10 ) ) ; } catch ( java . lang . IllegalArgumentException e ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . util . METHOD_9 ( STRING_2 ) ; } } com . IDENT_0 . IDENT_1 . IDENT_2 . List < java . lang . String > IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_7 ( args , STRING_3 ) ; if ( ! ( IDENT_12 . isEmpty ( ) ) ) { try { state . IDENT_13 = java . lang . Double . METHOD_8 ( com . google . common . collect . IDENT_6 . METHOD_3 ( IDENT_12 ) ) ; } catch ( java . lang . IllegalArgumentException e ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . util . METHOD_9 ( STRING_4 ) ; } } com . IDENT_0 . IDENT_1 . IDENT_2 . Set < com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_14 > IDENT_15 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_10 ( args ) ; boolean IDENT_16 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . METHOD_11 ( args ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . Collection < com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_14 > IDENT_17 = IDENT_15 . stream ( ) . filter ( ( c ) -> c . METHOD_12 ( ) ) . collect ( java . util . stream . IDENT_18 . toList ( ) ) ; if ( ( IDENT_17 . size ( ) ) > 1 ) { throw new com . IDENT_0 . IDENT_1 . IDENT_2 . util . METHOD_9 ( ( ( ( com . IDENT_0 . IDENT_1 . IDENT_19 . IDENT_20 . getString ( STRING_5 ) ) + STRING_6 ) + ( org . apache . commons . lang3 . StringUtils . join ( IDENT_17 , STRING_7 ) ) ) ) ; } if ( ( METHOD_11 && ( IDENT_17 . isEmpty ( ) ) ) && ( ( state . IDENT_21 ) != null ) ) { IDENT_15 . add ( state . IDENT_21 ) ; } com . IDENT_0 . IDENT_1 . IDENT_2 . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 > results = new com . IDENT_0 . IDENT_1 . IDENT_2 . ArrayList ( ) ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . util . IDENT_14 i : IDENT_15 ) { if ( i == ( IDENT_22 ) ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . logger . METHOD_13 ( ( STRING_8 + command ) ) ; } else { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 meta = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_14 ( i , args , line , state , METHOD_11 ) ; meta . command = command ; if ( ( meta . IDENT_23 ) != null ) { meta . IDENT_23 . METHOD_15 ( state . IDENT_11 ) ; } results . add ( meta ) ; } } if ( ( results . isEmpty ( ) ) && IDENT_24 ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 meta = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_16 ( ) ; meta . state = state ; meta . command = command ; meta . code = state . IDENT_21 ; return com . IDENT_0 . IDENT_1 . IDENT_2 . Collections . singletonList ( meta ) ; } return results ; }
org . junit . Assert . assertThat ( meta . state . IDENT_11 ) 