METHOD_0 ( ) { java . lang . String date = STRING_0 ; org . apache . jackrabbit . oak . api . IDENT_0 source = org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_2 . METHOD_1 ( "foo" , date ) ; org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_3 builder = org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_3 . METHOD_2 ( Type . IDENT_4 ) ; builder . METHOD_3 ( source ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { METHOD_5 ( ( ( name ) != null ) , STRING_1 ) ; METHOD_5 ( ( ( METHOD_6 ( ) ) || ( ( values . size ( ) ) == 1 ) ) , STRING_2 ) ; if ( values . isEmpty ( ) ) { return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_5 . METHOD_7 ( name , org . apache . jackrabbit . oak . api . Type . METHOD_8 ( type . METHOD_9 ( ) , true ) ) ; } else if ( METHOD_6 ( ) ) { switch ( type . METHOD_9 ( ) ) { case javax . jcr . IDENT_6 . IDENT_7 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_8 . METHOD_10 ( name , ( ( java . lang . IDENT_9 < java . lang . String > ) ( values ) ) ) ; case javax . jcr . IDENT_6 . IDENT_10 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_11 . METHOD_11 ( name , ( ( java . lang . IDENT_9 < org . apache . jackrabbit . oak . api . IDENT_12 > ) ( values ) ) ) ; case javax . jcr . IDENT_6 . IDENT_13 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_14 . METHOD_12 ( name , ( ( java . lang . IDENT_9 < java . lang . Long > ) ( values ) ) ) ; case javax . jcr . IDENT_6 . IDENT_15 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_16 . METHOD_13 ( name , ( ( java . lang . IDENT_9 < java . lang . Double > ) ( values ) ) ) ; case javax . jcr . IDENT_6 . IDENT_17 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_18 . METHOD_14 ( name , ( ( java . lang . IDENT_9 < java . lang . Boolean > ) ( values ) ) ) ; case javax . jcr . IDENT_6 . IDENT_19 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_20 . METHOD_15 ( name , ( ( java . lang . IDENT_9 < java . math . BigDecimal > ) ( values ) ) ) ; default : return new org . apache . jackrabbit . oak . plugins . IDENT_1 . METHOD_16 ( name , ( ( java . lang . IDENT_9 < java . lang . String > ) ( values ) ) , org . apache . jackrabbit . oak . api . Type . METHOD_8 ( type . METHOD_9 ( ) , true ) ) ; } } else { T value = values . get ( 0 ) ; switch ( type . METHOD_9 ( ) ) { case javax . jcr . IDENT_6 . IDENT_7 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_21 . METHOD_10 ( name , ( ( java . lang . String ) ( value ) ) ) ; case javax . jcr . IDENT_6 . IDENT_10 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_22 . METHOD_17 ( name , ( ( org . apache . jackrabbit . oak . api . IDENT_12 ) ( value ) ) ) ; case javax . jcr . IDENT_6 . IDENT_13 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_23 . METHOD_12 ( name , ( ( java . lang . Long ) ( value ) ) ) ; case javax . jcr . IDENT_6 . IDENT_15 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_24 . METHOD_13 ( name , ( ( java . lang . Double ) ( value ) ) ) ; case javax . jcr . IDENT_6 . IDENT_17 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_25 . METHOD_14 ( name , ( ( java . lang . Boolean ) ( value ) ) ) ; case javax . jcr . IDENT_6 . IDENT_19 : return org . apache . jackrabbit . oak . plugins . IDENT_1 . IDENT_26 . METHOD_15 ( name , ( ( java . math . BigDecimal ) ( value ) ) ) ; default : return new org . apache . jackrabbit . oak . plugins . IDENT_1 . METHOD_18 ( name , ( ( java . lang . String ) ( value ) ) , type ) ; } } }
org . junit . Assert . assertEquals ( source , builder . METHOD_4 ( ) ) 