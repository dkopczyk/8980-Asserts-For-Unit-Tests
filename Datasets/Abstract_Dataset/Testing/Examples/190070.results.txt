METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . IDENT_3 . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . METHOD_2 ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . core . api . IDENT_6 IDENT_7 = org . mockito . Mockito . mock ( org . IDENT_0 . IDENT_1 . IDENT_2 . core . impl . IDENT_8 . class ) ; org . IDENT_9 . api . mockito . IDENT_10 . METHOD_3 ( org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . common . util . IDENT_11 . class ) ; org . IDENT_9 . api . mockito . IDENT_10 . when ( org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . common . util . IDENT_11 . METHOD_4 ( org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . IDENT_12 . IDENT_13 ) ) . thenReturn ( IDENT_7 ) ; org . IDENT_0 . IDENT_14 . IDENT_15 request = org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . IDENT_3 . METHOD_5 ( ) ; org . IDENT_9 . api . mockito . IDENT_10 . when ( org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . common . util . IDENT_11 . METHOD_6 ( request ) ) . thenReturn ( org . IDENT_0 . IDENT_1 . IDENT_2 . rest . api . store . impl . IDENT_12 . IDENT_13 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . core . models . IDENT_16 IDENT_17 = new org . IDENT_0 . IDENT_1 . IDENT_2 . core . models . IDENT_16 . Builder ( ) . build ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . core . models . IDENT_16 IDENT_18 = new org . IDENT_0 . IDENT_1 . IDENT_2 . core . models . IDENT_16 . Builder ( ) . build ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . core . models . IDENT_16 > IDENT_19 = new java . util . ArrayList ( ) ; IDENT_19 . add ( IDENT_17 ) ; IDENT_19 . add ( IDENT_18 ) ; org . mockito . Mockito . when ( IDENT_7 . METHOD_7 ( ) ) . thenReturn ( IDENT_19 ) ; javax . ws . rs . core . Response response = IDENT_5 . METHOD_8 ( 10 , 0 , null , request ) ; "<AssertPlaceHolder>" ; } getStatus ( ) { return status ; }
org . junit . Assert . assertEquals ( 200 , response . getStatus ( ) ) 