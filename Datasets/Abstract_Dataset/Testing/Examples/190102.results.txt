METHOD_0 ( ) { java . io . File IDENT_0 = IDENT_1 . METHOD_1 ( STRING_0 ) ; IDENT_0 . delete ( ) ; java . lang . String [ ] args = new java . lang . String [ ] { STRING_1 , STRING_2 3 , STRING_3 3 , STRING_3 0 , STRING_4 , STRING_3 5 , STRING_3 8 , STRING_5 , STRING_3 8 , STRING_3 7 , IDENT_0 . getAbsolutePath ( ) , STRING_6 , STRING_3 , IDENT_2 [ 0 ] , IDENT_2 [ 1 ] , IDENT_2 [ 2 ] } ; org . IDENT_3 . tools . IDENT_4 . IDENT_5 options = new org . IDENT_3 . tools . IDENT_4 . METHOD_2 ( args ) ; options . METHOD_3 ( ) ; java . util . List < org . IDENT_3 . tools . IDENT_4 . IDENT_6 . IDENT_7 > IDENT_8 = org . IDENT_3 . tools . IDENT_4 . IDENT_9 . METHOD_4 ( options ) ; options = new org . IDENT_3 . tools . IDENT_4 . METHOD_2 ( args ) ; options . METHOD_3 ( ) ; java . util . List < org . IDENT_3 . tools . IDENT_4 . IDENT_6 . IDENT_7 > IDENT_10 = org . IDENT_3 . tools . IDENT_4 . IDENT_9 . METHOD_4 ( options ) ; for ( int i = 0 ; i < ( IDENT_8 . size ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } java . io . File IDENT_11 = IDENT_1 . METHOD_1 ( STRING_2 ) ; args = new java . lang . String [ ] { STRING_3 4 , IDENT_11 . getAbsolutePath ( ) , STRING_1 , STRING_2 2 , STRING_2 1 , STRING_3 7 , IDENT_0 . getAbsolutePath ( ) , STRING_6 , STRING_3 8 , STRING_3 5 , STRING_3 8 , STRING_3 2 , STRING_3 6 , STRING_3 1 , STRING_3 6 , STRING_3 9 , STRING_3 3 , STRING_7 , STRING_2 0 } ; options = new org . IDENT_3 . tools . IDENT_4 . METHOD_2 ( args ) ; options . METHOD_3 ( ) ; org . IDENT_3 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 IDENT_17 = ( ( org . IDENT_3 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 ) ( org . IDENT_3 . tools . IDENT_4 . IDENT_9 . METHOD_5 ( options ) ) ) ; System . out . println ( IDENT_17 ) ; java . io . File IDENT_18 = IDENT_1 . METHOD_1 ( STRING_8 ) ; args = new java . lang . String [ ] { STRING_3 4 , IDENT_18 . getAbsolutePath ( ) , STRING_2 3 , STRING_3 3 , STRING_2 2 , STRING_2 1 , STRING_3 0 , STRING_4 , STRING_6 , STRING_3 , STRING_3 5 , "2" , STRING_3 9 , STRING_3 3 , IDENT_2 [ 0 ] , IDENT_2 [ 1 ] , IDENT_2 [ 2 ] } ; options = new org . IDENT_3 . tools . IDENT_4 . METHOD_2 ( args ) ; options . METHOD_3 ( ) ; } get ( long ) { return get ( time , 0 , 0 ) ; }
org . junit . Assert . assertTrue ( IDENT_10 . get ( i ) . equals ( IDENT_8 . get ( i ) ) ) 