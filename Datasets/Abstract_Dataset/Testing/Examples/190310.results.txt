METHOD_0 ( ) { IDENT_0 . METHOD_1 ( STRING_0 ) ; IDENT_0 . METHOD_1 ( STRING_1 ) ; IDENT_0 . METHOD_1 ( STRING_2 ) ; java . sql . ResultSet rs = IDENT_0 . METHOD_2 ( STRING_3 ) ; "<AssertPlaceHolder>" ; final org . IDENT_1 . IDENT_2 IDENT_3 = this ; IDENT_3 . IDENT_4 = false ; new java . lang . Thread ( ) { @ org . IDENT_1 . Override public void run ( ) { try { IDENT_5 . METHOD_1 ( STRING_4 ) ; } catch ( java . sql . IDENT_6 e ) { e . printStackTrace ( ) ; return ; } MOD_0 ( IDENT_3 ) { IDENT_3 . IDENT_4 = true ; IDENT_3 . METHOD_3 ( ) ; } } } . start ( ) ; java . lang . Thread . sleep ( 100 ) ; rs . close ( ) ; MOD_0 ( IDENT_3 ) { if ( ! ( IDENT_3 . IDENT_4 ) ) { IDENT_3 . METHOD_4 ( INT_0 ) ; if ( ! ( IDENT_3 . IDENT_4 ) ) throw new java . lang . Exception ( STRING_5 ) ; } } } next ( ) { if ( ! ( IDENT_7 ) ) { return false ; } IDENT_8 = - 1 ; if ( ( row ) == 0 ) { ( row ) ++ ; return true ; } if ( ( ( IDENT_9 ) != 0 ) && ( ( row ) == ( IDENT_9 ) ) ) { return false ; } int IDENT_10 = METHOD_5 ( ) . METHOD_6 ( stmt . IDENT_11 ) ; switch ( IDENT_10 ) { case IDENT_12 : close ( ) ; return false ; case IDENT_13 : ( row ) ++ ; return true ; case IDENT_14 : default : METHOD_5 ( ) . METHOD_7 ( IDENT_10 ) ; return false ; } }
org . junit . Assert . assertTrue ( rs . next ( ) ) 