METHOD_0 ( ) { java . util . IDENT_0 random = new java . util . METHOD_1 ( ) ; long IDENT_1 = org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( ) ; long IDENT_6 = ( random . METHOD_3 ( org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 ) ) + ( IDENT_5 . IDENT_9 ) ; org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 IDENT_10 = new org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_1 , IDENT_6 ) ; org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 IDENT_11 = new org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 ( IDENT_1 , IDENT_6 ) ; long IDENT_12 = ( random . METHOD_3 ( ( ( int ) ( ( METHOD_4 . IDENT_13 ) - 1L ) ) ) ) + 1L ; for ( int i = 0 ; i < ( org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_14 ) ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_5 ( long ) { org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_15 result ; if ( IDENT_16 > ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_13 ) ) throw new java . lang . Exception ( ( IDENT_16 + STRING_0 ) ) ; if ( ( IDENT_17 . get ( ( ( int ) ( IDENT_16 ) ) ) ) != null ) return null ; java . util . METHOD_1 random = new java . util . METHOD_1 ( IDENT_16 ) ; int IDENT_18 = ( IDENT_19 . size ( ) ) - 1 ; for ( int i = 0 ; i <= IDENT_18 ; i ++ ) { if ( ( IDENT_19 . get ( i ) ) > IDENT_16 ) { if ( i > 0 ) IDENT_18 = i - 1 ; else assert false : STRING_1 + IDENT_16 ; break ; } } java . util . List < java . lang . Object [ ] > IDENT_20 = IDENT_21 . get ( IDENT_18 ) ; java . lang . Object [ ] db = IDENT_20 . get ( random . METHOD_3 ( IDENT_20 . size ( ) ) ) ; java . lang . String IDENT_22 = ( ( java . lang . String ) ( db [ 0 ] ) ) ; int IDENT_23 = ( ( java . lang . Integer ) ( db [ 1 ] ) ) ; result = this . new METHOD_6 ( IDENT_22 ) ; int IDENT_24 = ( random . METHOD_3 ( ( ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_25 ) - ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_26 ) ) ) ) + ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_26 ) ; for ( int i = 0 ; i < IDENT_24 ; i ++ ) { int IDENT_27 = ( random . METHOD_3 ( ( ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_28 ) - ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_29 ) ) ) ) + ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_29 ) ; int IDENT_30 = ( random . METHOD_3 ( ( ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_31 ) - ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_32 ) ) ) ) + ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_32 ) ; int index = random . METHOD_3 ( IDENT_23 ) ; result . METHOD_7 ( index , METHOD_8 ( random , IDENT_27 ) , METHOD_8 ( random , IDENT_30 ) ) ; } if ( ( ( IDENT_16 - 1L ) > 0 ) && ( ( IDENT_17 . get ( ( IDENT_16 - 1L ) ) ) == null ) ) { org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_33 IDENT_34 = METHOD_9 ( ( IDENT_16 - 1L ) ) ; if ( ( IDENT_34 == null ) || ( ( IDENT_34 . IDENT_22 ) != IDENT_22 ) ) return result ; int IDENT_35 = ( random . METHOD_3 ( ( ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_36 ) - ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_37 ) ) ) ) + ( org . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_4 . IDENT_37 ) ; int IDENT_38 = IDENT_34 . values . size ( ) ; assert IDENT_38 >= IDENT_35 : STRING_2 ; java . util . List < java . lang . Integer > IDENT_39 = new java . util . IDENT_40 < java . lang . Integer > ( ) ; for ( int i = 0 ; i < IDENT_38 ; i ++ ) IDENT_39 . add ( i ) ; for ( int i = 0 ; i < IDENT_35 ; i ++ ) { int index = IDENT_39 . remove ( random . METHOD_3 ( IDENT_39 . size ( ) ) ) ; result . METHOD_10 ( IDENT_34 . METHOD_11 ( index ) , IDENT_34 . getKey ( index ) ) ; } } return result ; }
org . junit . Assert . assertEquals ( IDENT_10 . METHOD_5 ( IDENT_12 ) . toString ( ) , IDENT_11 . METHOD_5 ( IDENT_12 ) . toString ( ) ) 