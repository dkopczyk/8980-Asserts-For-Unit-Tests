METHOD_0 ( ) { final int IDENT_0 = 8 ; final int IDENT_1 = 50 ; this . data = java . nio . ByteBuffer . METHOD_1 ( org . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_2 ( ( INT_0 * INT_0 ) ) ) ; java . lang . Long IDENT_6 = METHOD_3 ( STRING_0 ) ; java . util . concurrent . IDENT_7 < java . util . IDENT_8 < java . lang . Long > > IDENT_9 = new java . util . concurrent . IDENT_7 < java . util . IDENT_8 < java . lang . Long > > ( ) { @ org . IDENT_2 . IDENT_3 . IDENT_4 . Override public java . util . IDENT_8 < java . lang . Long > call ( ) { try { java . util . IDENT_8 < java . lang . Long > values = new java . util . IDENT_8 < java . lang . Long > ( ) ; boolean IDENT_10 = false ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { long IDENT_11 = METHOD_4 ( STRING_0 , IDENT_10 ) ; values . add ( IDENT_11 ) ; IDENT_10 = ! IDENT_10 ; } return values ; } catch ( java . security . IDENT_12 e ) { e . printStackTrace ( ) ; return null ; } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; return null ; } } } ; java . util . IDENT_8 < java . util . concurrent . IDENT_13 < java . util . IDENT_8 < java . lang . Long > > > results = METHOD_5 ( IDENT_0 , IDENT_9 ) ; for ( java . util . concurrent . IDENT_13 < java . util . IDENT_8 < java . lang . Long > > result : results ) { for ( java . lang . Long value : result . get ( ) ) { "<AssertPlaceHolder>" ; } } } get ( ) { assert ! ( IDENT_14 ) : STRING_1 + ( this . IDENT_15 ) ; return buffer . get ( ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , value ) 