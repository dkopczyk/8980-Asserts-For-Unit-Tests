METHOD_0 ( ) { org . xwiki . test . ui . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . xwiki . test . ui . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 , STRING_1 ) ; IDENT_3 . METHOD_2 ( STRING_2 ) ; org . xwiki . test . ui . IDENT_0 . IDENT_4 IDENT_5 = IDENT_3 . METHOD_3 ( ) ; org . xwiki . test . ui . IDENT_0 . IDENT_1 . IDENT_6 IDENT_7 = IDENT_5 . METHOD_4 ( ) ; IDENT_7 . METHOD_5 ( STRING_3 ) ; IDENT_5 = IDENT_7 . METHOD_3 ( ) ; IDENT_7 = IDENT_5 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String ) { java . util . List < org . openqa . selenium . IDENT_8 > IDENT_9 = METHOD_7 ( ) . METHOD_8 ( org . openqa . selenium . IDENT_10 . id ( ( STRING_4 + IDENT_11 ) ) ) . METHOD_9 ( org . openqa . selenium . IDENT_10 . METHOD_10 ( STRING_5 ) ) ; java . util . List < org . openqa . selenium . IDENT_8 > elements = METHOD_7 ( ) . METHOD_8 ( org . openqa . selenium . IDENT_10 . id ( ( STRING_4 + METHOD_10 ) ) ) . METHOD_9 ( org . openqa . selenium . IDENT_10 . METHOD_10 ( STRING_6 ) ) ; java . util . List < org . xwiki . test . ui . IDENT_0 . IDENT_1 . IDENT_12 > IDENT_13 = new java . util . ArrayList < org . xwiki . test . ui . IDENT_0 . IDENT_1 . IDENT_12 > ( elements . size ( ) ) ; for ( int i = 0 ; i < ( elements . size ( ) ) ; i ++ ) { org . openqa . selenium . IDENT_8 element = elements . get ( i ) ; if ( ! ( element . METHOD_11 ( ) ) ) { IDENT_9 . get ( i ) . METHOD_12 ( ) ; } int IDENT_14 = java . lang . Integer . METHOD_13 ( element . METHOD_14 ( STRING_7 ) . split ( STRING_8 ) [ 2 ] ) ; IDENT_13 . add ( new org . xwiki . test . ui . IDENT_0 . IDENT_1 . METHOD_15 ( element , METHOD_10 , IDENT_14 ) ) ; } return IDENT_13 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_7 . METHOD_6 ( STRING_3 ) . size ( ) ) 