METHOD_0 ( ) { com . IDENT_0 . hive . IDENT_1 . IDENT_2 . IDENT_3 IDENT_1 = new com . IDENT_0 . hive . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; org . apache . hadoop . hive . IDENT_4 . IDENT_5 . IDENT_6 [ ] IDENT_7 = new org . apache . hadoop . hive . IDENT_4 . IDENT_5 . IDENT_6 [ ] { org . apache . hadoop . hive . IDENT_4 . IDENT_5 . IDENT_8 . METHOD_2 ( IDENT_9 . IDENT_10 ) } ; IDENT_1 . METHOD_3 ( IDENT_7 ) ; java . util . List < java . lang . Long > IDENT_11 = java . util . Arrays . asList ( INT_0 ) ; org . apache . hadoop . hive . IDENT_12 . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 IDENT_16 = mock ( org . apache . hadoop . hive . IDENT_12 . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 . class ) ; org . apache . hadoop . hive . IDENT_12 . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 [ ] IDENT_17 = new org . apache . hadoop . hive . IDENT_12 . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 [ ] { IDENT_16 , IDENT_16 } ; when ( IDENT_16 . get ( ) ) . thenReturn ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } evaluate ( com . IDENT_0 . hive . IDENT_1 . IDENT_2 . IDENT_15 [ ] ) { if ( ( args . length ) != 1 ) { return null ; } java . util . List < java . lang . Long > IDENT_2 = ( ( java . util . List < java . lang . Long > ) ( IDENT_18 . METHOD_4 ( args [ 0 ] . get ( ) ) ) ) ; java . util . List < java . lang . Double > result = new java . util . ArrayList ( ) ; if ( ( IDENT_2 . size ( ) ) <= 0 ) { return result ; } result . add ( 1.0 ) ; for ( int i = 1 ; i < ( IDENT_2 . size ( ) ) ; i ++ ) { if ( ( ( IDENT_2 . get ( i ) ) <= 0 ) || ( ( IDENT_2 . get ( ( i - 1 ) ) ) <= 0 ) ) { result . add ( 0.0 ) ; } else { result . add ( ( ( ( double ) ( IDENT_2 . get ( i ) ) ) / ( IDENT_2 . get ( ( i - 1 ) ) ) ) ) ; } } return result ; }
org . junit . Assert . assertEquals ( null , IDENT_1 . evaluate ( IDENT_17 ) ) 