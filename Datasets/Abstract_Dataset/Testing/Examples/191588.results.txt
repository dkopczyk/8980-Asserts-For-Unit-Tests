METHOD_0 ( ) { "<AssertPlaceHolder>" ; } build ( int ) { final java . util . Collection < com . IDENT_0 . IDENT_1 . util . IDENT_2 > elements = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { if ( ( i OP_0 2 ) == 0 ) elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( i ) ) ; else elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( ( ( i OP_0 3 ) == 0 ? 1L : ( ( long ) ( i ) ) ) ) ) ; } for ( int i = 50 ; i < size ; i ++ ) { elements . add ( com . IDENT_0 . IDENT_1 . util . IDENT_3 . from ( i ) ) ; } final com . IDENT_0 . IDENT_1 . util . mutable . IDENT_4 mutable = new com . IDENT_0 . IDENT_1 . util . mutable . impl . METHOD_2 ( elements ) ; final java . io . ByteArrayOutputStream IDENT_5 = new java . io . ByteArrayOutputStream ( ) ; mutable . METHOD_3 ( IDENT_5 ) ; final com . IDENT_0 . IDENT_1 . util . buf . IDENT_6 buf = com . IDENT_0 . IDENT_1 . util . buf . IDENT_6 . from ( IDENT_5 . toByteArray ( ) ) ; final com . IDENT_0 . IDENT_1 . util . IDENT_7 . IDENT_4 result = com . IDENT_0 . IDENT_1 . util . IDENT_7 . impl . IDENT_8 . from ( buf ) ; org . junit . Assert . assertEquals ( size , result . size ( ) ) ; return result ; }
org . junit . Assert . assertTrue ( build ( 100 ) . toString ( ) . contains ( java . lang . Integer . toString ( 100 ) ) ) 