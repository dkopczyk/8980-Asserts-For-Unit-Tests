METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_3 . init ( 1 ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 IDENT_4 = new edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . METHOD_1 ( new edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . METHOD_2 ( 2 , 2 ) , 1 ) ; edu . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_7 s = IDENT_4 . METHOD_3 ( new double [ ] { 0 , 1 , 0 , 1 } , new int [ ] { 0 , 2 , 4 } , 2 , new int [ ] [ ] { new int [ ] { 1 , 1 , 0 , 0 , 0 } , new int [ ] { 1 , 1 , 0 , 0 , 0 } } ) ; s . METHOD_4 ( 0 , new double [ ] { FLOAT_0 , FLOAT_1 } ) ; System . err . println ( s . METHOD_5 ( 0 , 0 , 0 , 1 , 1 ) ) ; s = IDENT_4 . METHOD_3 ( new double [ ] { 0 , 1 } , new int [ ] { 0 , 2 } , 2 , new int [ ] [ ] { new int [ ] { 1 , 1 , 0 , 0 , 0 } } ) ; s . METHOD_4 ( 0 , new double [ ] { FLOAT_0 } ) ; System . err . println ( s . METHOD_5 ( 0 , 0 , 0 , 1 , 1 ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( int , int , int , int , int ) { final double IDENT_8 = IDENT_9 . METHOD_5 ( IDENT_10 , IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 ) ; final double IDENT_15 = IDENT_16 [ IDENT_10 ] ; final double IDENT_17 = IDENT_18 [ IDENT_10 ] ; final double IDENT_19 = IDENT_20 [ IDENT_11 ] ; final double IDENT_21 = IDENT_20 [ IDENT_13 ] ; double IDENT_22 = IDENT_15 - IDENT_17 ; final double IDENT_23 = IDENT_22 / ( IDENT_24 ) ; final double IDENT_25 = ( 1 - ( edu . IDENT_0 . IDENT_1 . util . IDENT_26 . METHOD_6 ( IDENT_23 ) ) ) * ( IDENT_27 ) ; final double IDENT_28 ; if ( IDENT_15 <= IDENT_17 ) { if ( ( IDENT_19 > IDENT_21 ) && ( IDENT_12 < IDENT_14 ) ) { IDENT_28 = ( 1.0 + IDENT_25 ) * IDENT_8 ; } else { if ( IDENT_17 > ( IDENT_15 + IDENT_8 ) ) { IDENT_28 = ( 1.0 + IDENT_25 ) * IDENT_8 ; } else { IDENT_28 = ( IDENT_25 * ( IDENT_17 - IDENT_15 ) ) + IDENT_8 ; } } } else { if ( ( IDENT_19 > IDENT_21 ) && ( IDENT_12 < IDENT_14 ) ) { if ( IDENT_17 > ( IDENT_15 - ( java . lang . Math . METHOD_7 ( IDENT_8 ) ) ) ) { IDENT_28 = ( IDENT_25 * ( IDENT_15 - IDENT_17 ) ) - ( ( 1 + IDENT_25 ) * ( java . lang . Math . METHOD_7 ( IDENT_8 ) ) ) ; } else { IDENT_28 = IDENT_8 ; } } else { IDENT_28 = IDENT_8 ; } } return IDENT_28 ; }
org . junit . Assert . assertTrue ( true ) 