METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ( IDENT_0 + STRING_1 ) ) ; IDENT_1 . IDENT_2 . IDENT_3 IDENT_5 = IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ( IDENT_0 + STRING_2 ) ) ; IDENT_1 . IDENT_2 . IDENT_3 IDENT_6 = IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_3 ) ; IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( STRING_4 ) ; IDENT_1 . IDENT_2 . IDENT_8 IDENT_9 = METHOD_2 ( IDENT_6 , IDENT_4 ) ; METHOD_2 ( IDENT_7 , IDENT_5 ) ; IDENT_1 . server . IDENT_10 p = IDENT_1 . server . IDENT_10 . METHOD_3 ( STRING_5 , STRING_6 , IDENT_4 . toString ( ) , IDENT_11 . IDENT_12 ) ; p . METHOD_4 ( IDENT_6 ) ; java . util . IDENT_13 < IDENT_1 . server . IDENT_10 > results = new java . util . IDENT_13 < IDENT_1 . server . IDENT_10 > ( ) ; results . METHOD_5 ( p ) ; IDENT_1 . server . IDENT_10 [ ] expected = results . toArray ( new IDENT_1 . server . IDENT_10 [ 0 ] ) ; IDENT_14 . filter ( p , IDENT_9 , null , results ) ; IDENT_1 . server . IDENT_10 [ ] IDENT_15 = results . toArray ( new IDENT_1 . server . IDENT_10 [ 0 ] ) ; "<AssertPlaceHolder>" ; } filter ( IDENT_1 . server . IDENT_10 , IDENT_1 . IDENT_2 . impl . IDENT_8 , IDENT_1 . db . IDENT_16 , java . util . IDENT_17 ) { if ( ( ( ( IDENT_18 == null ) || ( ! ( IDENT_18 . METHOD_6 ( ) ) ) ) || ( results == null ) ) || ( ( results . size ( ) ) == 0 ) ) { return ; } for ( java . util . Iterator < IDENT_1 . server . IDENT_10 > it = results . iterator ( ) ; it . hasNext ( ) ; ) { IDENT_1 . server . IDENT_10 res = it . next ( ) ; if ( ( res == null ) || ( ( res . METHOD_7 ( ) ) == null ) ) { if ( IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_8 ( IDENT_20 . IDENT_21 ) ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_9 ( STRING_7 ) ; } continue ; } IDENT_1 . IDENT_2 . impl . IDENT_8 session = IDENT_18 . METHOD_10 ( ) . METHOD_11 ( res . METHOD_7 ( ) ) ; if ( session == null ) { if ( IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_8 ( IDENT_20 . IDENT_21 ) ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . log ( IDENT_20 . IDENT_21 , STRING_8 , new java . lang . Object [ ] { res . METHOD_7 ( ) . toString ( ) , res . toString ( ) } ) ; } continue ; } if ( ! ( METHOD_12 ( session ) ) ) { if ( IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_8 ( IDENT_20 . IDENT_21 ) ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_9 ( STRING_9 ) ; } METHOD_13 ( session , results ) ; continue ; } java . util . IDENT_17 < IDENT_1 . server . IDENT_10 > queue = ( ( java . util . IDENT_17 < IDENT_1 . server . IDENT_10 > ) ( session . METHOD_14 ( IDENT_1 . IDENT_2 . impl . IDENT_19 . IDENT_22 ) ) ) ; if ( filter ( session , res , queue ) ) { if ( IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_8 ( IDENT_20 . IDENT_21 ) ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . log ( IDENT_20 . IDENT_21 , STRING_10 , res . toString ( ) ) ; } it . remove ( ) ; if ( ( queue . size ( ) ) > ( IDENT_23 ) ) { if ( IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_8 ( IDENT_20 . IDENT_21 ) ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . METHOD_9 ( STRING_11 ) ; } IDENT_1 . server . IDENT_10 p ; while ( ( p = queue . METHOD_15 ( ) ) != null ) { try { p . METHOD_4 ( session . METHOD_16 ( ) ) ; results . METHOD_5 ( p ) ; } catch ( IDENT_1 . IDENT_2 . impl . IDENT_24 ex ) { IDENT_1 . IDENT_2 . impl . IDENT_19 . log . log ( IDENT_20 . IDENT_21 , STRING_12 , ex ) ; } } } } } }
org . junit . Assert . assertArrayEquals ( expected , IDENT_15 ) 