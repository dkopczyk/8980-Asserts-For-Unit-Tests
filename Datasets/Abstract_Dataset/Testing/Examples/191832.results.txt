METHOD_0 ( ) { IDENT_0 . IDENT_1 obj = new IDENT_0 . METHOD_1 ( ) ; obj . METHOD_2 ( STRING_0 . getBytes ( ) , ( ( short ) ( 0 ) ) , ( ( byte ) ( ( IDENT_0 . METHOD_1 . IDENT_2 ) | ( IDENT_0 . METHOD_1 . IDENT_3 ) ) ) , ( ( short ) ( 4 ) ) ) ; byte [ ] res = new byte [ 20 ] ; obj . METHOD_3 ( STRING_1 . getBytes ( ) , ( ( short ) ( 0 ) ) , ( ( short ) ( INT_0 ) ) , res , ( ( short ) ( 0 ) ) ) ; byte [ ] expected = new byte [ ] { ( ( byte ) ( INT_1 ) ) , ( ( byte ) ( INT_2 ) ) , ( ( byte ) ( INT_3 ) ) , INT_4 , ( ( byte ) ( INT_5 ) ) , ( ( byte ) ( INT_6 ) ) , INT_7 , ( ( byte ) ( INT_8 ) ) , ( ( byte ) ( INT_9 ) ) , INT_10 , INT_11 , ( ( byte ) ( INT_12 ) ) , ( ( byte ) ( INT_13 ) ) , ( ( byte ) ( INT_14 ) ) , ( ( byte ) ( INT_3 ) ) , ( ( byte ) ( INT_15 ) ) , INT_16 , ( ( byte ) ( INT_17 ) ) , INT_18 , INT_19 } ; "<AssertPlaceHolder>" ; } METHOD_3 ( byte [ ] , short , short , byte [ ] , short ) { byte [ ] buf = null ; if ( ( ( type ) & ( IDENT_0 . METHOD_1 . IDENT_4 ) ) == ( IDENT_0 . METHOD_1 . IDENT_2 ) ) { if ( ( len > ( IDENT_0 . METHOD_1 . IDENT_5 ) ) || ( len == 0 ) ) { IDENT_6 . framework . IDENT_7 . METHOD_4 ( IDENT_8 . IDENT_9 ) ; } if ( ( ( props ) & ( IDENT_0 . METHOD_1 . IDENT_10 ) ) == ( IDENT_0 . METHOD_1 . IDENT_10 ) ) { short IDENT_11 = ( ( short ) ( ( IDENT_0 . METHOD_1 . IDENT_5 ) - len ) ) ; short i = ( ( IDENT_12 ) < IDENT_11 ) ? IDENT_12 : IDENT_11 ; for ( ; i < ( IDENT_0 . METHOD_1 . IDENT_5 ) ; i ++ ) { if ( i < IDENT_11 ) { if ( ( IDENT_13 [ i ] ) == 0 ) { continue ; } else { IDENT_6 . framework . IDENT_7 . METHOD_4 ( IDENT_8 . IDENT_14 ) ; } } else { break ; } } short IDENT_15 = ( ( short ) ( ( i - IDENT_11 ) + IDENT_16 ) ) ; byte IDENT_17 = IDENT_6 . framework . IDENT_18 . METHOD_5 ( IDENT_19 , IDENT_15 , IDENT_13 , i , len ) ; if ( IDENT_17 == ( - 1 ) ) { IDENT_6 . framework . IDENT_7 . METHOD_4 ( IDENT_8 . IDENT_14 ) ; } IDENT_12 = IDENT_11 ; IDENT_6 . framework . IDENT_18 . METHOD_6 ( IDENT_19 , IDENT_16 , IDENT_13 , IDENT_11 , len ) ; } buf = IDENT_19 ; } else if ( ( ( type ) & ( IDENT_0 . METHOD_1 . IDENT_4 ) ) == ( IDENT_0 . METHOD_1 . IDENT_20 ) ) { IDENT_6 . framework . IDENT_18 . METHOD_7 ( IDENT_0 . METHOD_1 . IDENT_21 , IDENT_0 . METHOD_1 . IDENT_22 , ( ( short ) ( 8 ) ) , ( ( byte ) ( 0 ) ) ) ; if ( ( ( IDENT_23 ) == null ) || ( ( ( ( ( IDENT_23 [ 0 ] ) == 0 ) && ( ( IDENT_23 [ 1 ] ) == 0 ) ) && ( ( IDENT_23 [ 2 ] ) == 0 ) ) && ( ( IDENT_23 [ 3 ] ) == 0 ) ) ) { IDENT_6 . framework . IDENT_18 . METHOD_8 ( IDENT_0 . METHOD_1 . IDENT_21 , ( ( short ) ( 6 ) ) , IDENT_24 ) ; } else { IDENT_6 . framework . IDENT_18 . METHOD_9 ( IDENT_23 , IDENT_0 . METHOD_1 . IDENT_22 , IDENT_0 . METHOD_1 . IDENT_21 , ( ( short ) ( 4 ) ) , IDENT_0 . METHOD_1 . IDENT_25 ) ; short IDENT_26 = 0 ; short IDENT_27 = ( ( short ) ( ( ( IDENT_24 ) > > > 8 ) & 255 ) ) ; short IDENT_28 = ( ( short ) ( ( IDENT_24 ) & 255 ) ) ; for ( byte j = 7 ; j > 0 ; j OP_0 ) { short IDENT_29 = ( ( short ) ( ( IDENT_0 . METHOD_1 . IDENT_21 [ j ] ) & 255 ) ) ; if ( j == 7 ) { IDENT_29 += IDENT_28 ; } else if ( j == 6 ) { IDENT_29 += IDENT_27 ; } IDENT_29 += IDENT_26 ; IDENT_26 = ( ( byte ) ( IDENT_29 > > > 8 ) ) ; IDENT_0 . METHOD_1 . IDENT_21 [ j ] = ( ( byte ) ( IDENT_29 ) ) ; } } ( IDENT_24 ) ++ ; buf = IDENT_0 . METHOD_1 . IDENT_21 ; IDENT_16 = 0 ; len = 8 ; } else { IDENT_6 . framework . IDENT_7 . METHOD_4 ( IDENT_8 . IDENT_30 ) ; } IDENT_31 . METHOD_10 ( ) ; IDENT_31 . update ( IDENT_32 , IDENT_0 . METHOD_1 . IDENT_22 , IDENT_0 . METHOD_1 . IDENT_5 ) ; short IDENT_33 = IDENT_31 . METHOD_11 ( buf , IDENT_16 , len , IDENT_34 , IDENT_35 ) ; IDENT_31 . METHOD_10 ( ) ; IDENT_31 . update ( IDENT_36 , IDENT_0 . METHOD_1 . IDENT_22 , IDENT_0 . METHOD_1 . IDENT_5 ) ; return IDENT_31 . METHOD_11 ( IDENT_34 , IDENT_35 , IDENT_33 , IDENT_34 , IDENT_35 ) ; }
org . junit . Assert . assertArrayEquals ( expected , res ) 