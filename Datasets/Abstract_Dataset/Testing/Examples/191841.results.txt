METHOD_0 ( ) { java . util . List < byte [ ] > expected = new java . util . ArrayList < byte [ ] > ( ) ; expected . add ( new byte [ ] { INT_0 , ( ( byte ) ( INT_1 ) ) , INT_2 , 100 } ) ; expected . add ( new byte [ ] { INT_3 , ( ( byte ) ( INT_4 ) ) , INT_5 , ( ( byte ) ( INT_6 ) ) } ) ; expected . add ( new byte [ ] { INT_7 , INT_8 , ( ( byte ) ( INT_9 ) ) , INT_10 } ) ; expected . add ( new byte [ ] { INT_11 , 1 , INT_12 , INT_13 } ) ; expected . add ( new byte [ ] { INT_14 , ( ( byte ) ( INT_15 ) ) , ( ( byte ) ( INT_16 ) ) , ( ( byte ) ( INT_17 ) ) } ) ; expected . add ( new byte [ ] { INT_18 , ( ( byte ) ( INT_4 ) ) , ( ( byte ) ( INT_19 ) ) , ( ( byte ) ( INT_20 ) ) } ) ; expected . add ( new byte [ ] { INT_21 , ( ( byte ) ( INT_22 ) ) , ( ( byte ) ( INT_20 ) ) , 9 } ) ; expected . add ( new byte [ ] { INT_23 , INT_24 , ( ( byte ) ( INT_25 ) ) , INT_26 } ) ; expected . add ( new byte [ ] { 8 , ( ( byte ) ( INT_27 ) ) , INT_28 , ( ( byte ) ( INT_29 ) ) } ) ; expected . add ( new byte [ ] { INT_30 , ( ( byte ) ( INT_31 ) ) , INT_32 , INT_33 } ) ; IDENT_0 . IDENT_1 obj = new IDENT_0 . METHOD_1 ( ) ; byte [ ] key = STRING_0 . getBytes ( ) ; byte [ ] IDENT_2 = new byte [ ] { 0 , ( ( byte ) ( 255 ) ) , ( ( byte ) ( 255 ) ) , ( ( byte ) ( INT_34 ) ) } ; obj . METHOD_2 ( key , ( ( short ) ( 0 ) ) , ( ( byte ) ( ( IDENT_0 . METHOD_1 . IDENT_3 ) | ( IDENT_0 . METHOD_1 . IDENT_4 ) ) ) , ( ( short ) ( key . length ) ) ) ; obj . METHOD_3 ( IDENT_2 , ( ( short ) ( 0 ) ) ) ; for ( byte [ ] expect : expected ) { byte [ ] IDENT_5 = new byte [ 4 ] ; obj . METHOD_4 ( new byte [ 8 ] , ( ( short ) ( 0 ) ) , ( ( short ) ( 8 ) ) , IDENT_5 , ( ( short ) ( 0 ) ) ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( byte [ ] , short , short , byte [ ] , short ) { short length = METHOD_5 ( IDENT_6 , IDENT_7 , len , IDENT_0 . METHOD_1 . IDENT_8 , IDENT_0 . METHOD_1 . IDENT_9 ) ; short IDENT_10 = ( ( short ) ( ( IDENT_0 . METHOD_1 . IDENT_8 [ ( ( short ) ( length - 1 ) ) ] ) & 15 ) ) ; IDENT_5 [ ( IDENT_11 ++ ) ] = ( ( byte ) ( ( IDENT_0 . METHOD_1 . IDENT_8 [ ( IDENT_10 ++ ) ] ) & INT_35 ) ) ; IDENT_5 [ ( IDENT_11 ++ ) ] = IDENT_0 . METHOD_1 . IDENT_8 [ ( IDENT_10 ++ ) ] ; IDENT_5 [ ( IDENT_11 ++ ) ] = IDENT_0 . METHOD_1 . IDENT_8 [ ( IDENT_10 ++ ) ] ; IDENT_5 [ ( IDENT_11 ++ ) ] = IDENT_0 . METHOD_1 . IDENT_8 [ ( IDENT_10 ++ ) ] ; return 4 ; }
org . junit . Assert . assertArrayEquals ( expect , IDENT_5 ) 