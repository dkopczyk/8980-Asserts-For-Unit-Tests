METHOD_0 ( ) { algorithm . IDENT_0 . IDENT_1 IDENT_2 = new algorithm . IDENT_0 . METHOD_1 ( ) ; int n = 10 ; "<AssertPlaceHolder>" ; } METHOD_2 ( int ) { java . util . List < java . lang . Integer > res = new java . util . ArrayList < java . lang . Integer > ( ) ; if ( n < 2 ) { return res ; } res . add ( 2 ) ; for ( int i = 3 ; i <= n ; ++ i ) { int IDENT_3 = ( ( int ) ( java . lang . Math . METHOD_3 ( i ) ) ) ; boolean IDENT_4 = true ; for ( int j = 2 ; j <= IDENT_3 ; ++ j ) { if ( ( i OP_0 j ) == 0 ) { IDENT_4 = false ; break ; } } if ( IDENT_4 ) { res . add ( i ) ; } } return res ; }
org . junit . Assert . assertArrayEquals ( new java . lang . Integer [ ] { 2 , 3 , 5 , 7 } , METHOD_2 . METHOD_2 ( n ) . toArray ( ) ) 