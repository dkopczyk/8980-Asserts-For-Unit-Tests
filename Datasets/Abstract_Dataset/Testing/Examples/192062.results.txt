METHOD_0 ( ) { algorithm . IDENT_0 . IDENT_1 . IDENT_2 s = new algorithm . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; int [ ] [ ] IDENT_3 = new int [ ] [ ] { new int [ ] { 0 } , new int [ ] { 0 } } ; int IDENT_4 = 1 ; "<AssertPlaceHolder>" ; } METHOD_2 ( int [ ] [ ] ) { int m = IDENT_5 . length ; if ( m == 0 ) { return 0 ; } int n = IDENT_5 [ 0 ] . length ; if ( n == 0 ) { return 0 ; } int [ ] [ ] IDENT_6 = new int [ m ] [ n ] ; for ( int r = 0 ; r < m ; ++ r ) { for ( int c = 0 ; c < n ; ++ c ) { if ( ( r == 0 ) && ( c == 0 ) ) { IDENT_6 [ r ] [ c ] = ( ( IDENT_5 [ r ] [ c ] ) == 0 ) ? 1 : 0 ; } else if ( r == 0 ) { IDENT_6 [ r ] [ c ] = ( ( IDENT_5 [ r ] [ c ] ) == 0 ) ? IDENT_6 [ r ] [ ( c - 1 ) ] : 0 ; } else if ( c == 0 ) { IDENT_6 [ r ] [ c ] = ( ( IDENT_5 [ r ] [ c ] ) == 0 ) ? IDENT_6 [ ( r - 1 ) ] [ c ] : 0 ; } else { IDENT_6 [ r ] [ c ] = ( ( IDENT_5 [ r ] [ c ] ) == 0 ) ? ( IDENT_6 [ ( r - 1 ) ] [ c ] ) + ( IDENT_6 [ r ] [ ( c - 1 ) ] ) : 0 ; } } } return IDENT_6 [ ( m - 1 ) ] [ ( n - 1 ) ] ; }
org . junit . Assert . assertEquals ( IDENT_4 , s . METHOD_2 ( IDENT_3 ) ) 