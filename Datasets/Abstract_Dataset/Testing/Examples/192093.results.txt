METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . expr . IDENT_2 [ ] expected = new com . github . IDENT_0 . IDENT_1 . expr . IDENT_2 [ ] { new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_3 , "1" , 0 ) , new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_4 , STRING_0 , 1 ) , new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_3 , "2" , 2 ) , new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_4 , STRING_0 , 3 ) , new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_3 , STRING_1 , 4 ) , new com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 ( IDENT_5 , null , 5 ) } ; com . github . IDENT_0 . IDENT_1 . expr . IDENT_6 IDENT_7 = new com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 ( ) ; com . github . IDENT_0 . IDENT_1 . util . IDENT_8 < com . github . IDENT_0 . IDENT_1 . expr . METHOD_1 > stream = IDENT_7 . METHOD_3 ( STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { java . util . List < com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 > tokens = new java . util . ArrayList < com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 > ( ) ; int IDENT_9 = 0 ; while ( ! ( input . isEmpty ( ) ) ) { boolean IDENT_10 = false ; for ( com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 . Type IDENT_11 : com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 . Type . values ( ) ) { java . util . regex . IDENT_12 matcher = IDENT_11 . pattern . matcher ( input ) ; if ( matcher . find ( ) ) { IDENT_10 = true ; input = matcher . METHOD_4 ( "" ) ; if ( IDENT_11 != ( com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 . Type . IDENT_13 ) ) { tokens . add ( new com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 ( IDENT_11 , matcher . group ( ) , IDENT_9 ) ) ; } IDENT_9 += matcher . end ( ) ; break ; } } if ( ! IDENT_10 ) { throw new com . github . IDENT_0 . IDENT_1 . expr . METHOD_5 ( input ) ; } } tokens . add ( new com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 ( com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 . Type . IDENT_5 , null , IDENT_9 ) ) ; return new com . github . IDENT_0 . IDENT_1 . util . IDENT_8 < com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 > ( tokens . toArray ( new com . github . IDENT_0 . IDENT_1 . expr . METHOD_2 . METHOD_1 [ tokens . size ( ) ] ) ) ; }
org . junit . Assert . assertArrayEquals ( expected , stream . toArray ( ) ) 