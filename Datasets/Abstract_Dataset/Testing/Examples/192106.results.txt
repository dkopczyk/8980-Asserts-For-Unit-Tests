METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . backend . service . IDENT_2 . logger . info ( STRING_0 ) ; org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . backend . repo . builder . METHOD_1 ( ) . METHOD_2 ( 10 ) . METHOD_3 ( 5 ) . METHOD_4 ( 1 ) . METHOD_5 ( INT_0 ) . description ( STRING_1 ) . name ( STRING_1 ) . METHOD_6 ( STRING_2 ) . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ; org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 IDENT_5 = new org . IDENT_0 . IDENT_1 . backend . repo . builder . METHOD_1 ( ) . METHOD_2 ( 10 ) . METHOD_3 ( 5 ) . METHOD_4 ( 1 ) . METHOD_5 ( INT_0 ) . description ( STRING_2 1 ) . name ( STRING_2 1 ) . METHOD_6 ( STRING_4 ) . METHOD_7 ( STRING_3 ) . METHOD_8 ( ) ; org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 IDENT_6 = new org . IDENT_0 . IDENT_1 . backend . repo . builder . METHOD_1 ( ) . METHOD_2 ( 10 ) . METHOD_3 ( 5 ) . METHOD_4 ( 1 ) . METHOD_5 ( INT_0 ) . description ( STRING_5 ) . name ( STRING_5 ) . METHOD_6 ( STRING_6 ) . METHOD_7 ( STRING_2 0 ) . METHOD_8 ( ) ; org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 IDENT_7 = new org . IDENT_0 . IDENT_1 . backend . repo . builder . METHOD_1 ( ) . METHOD_2 ( 10 ) . METHOD_3 ( 5 ) . METHOD_4 ( 1 ) . METHOD_5 ( INT_0 ) . description ( STRING_7 ) . name ( STRING_7 ) . METHOD_6 ( null ) . METHOD_7 ( STRING_2 0 ) . METHOD_8 ( ) ; IDENT_8 . save ( IDENT_4 ) ; IDENT_8 . save ( IDENT_5 ) ; IDENT_8 . save ( IDENT_6 ) ; IDENT_8 . save ( IDENT_7 ) ; java . lang . String IDENT_9 = STRING_8 ; org . IDENT_0 . IDENT_1 . backend . service . IDENT_2 . logger . info ( STRING_9 ) ; java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 > IDENT_10 = new java . util . ArrayList ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 > IDENT_11 = new java . util . ArrayList ( ) ; IDENT_11 . add ( IDENT_4 ) ; IDENT_11 . add ( IDENT_5 ) ; IDENT_10 . add ( IDENT_6 ) ; IDENT_10 . add ( IDENT_7 ) ; when ( IDENT_8 . METHOD_9 ( STRING_2 0 , empty ( ) , empty ( ) ) ) . thenReturn ( IDENT_10 ) ; when ( IDENT_8 . METHOD_9 ( STRING_3 , empty ( ) , empty ( ) ) ) . thenReturn ( IDENT_11 ) ; java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_12 > result = IDENT_13 . METHOD_10 ( IDENT_9 , new org . IDENT_0 . IDENT_1 . backend . service . IDENT_2 . METHOD_11 ( ) , empty ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( java . lang . String , java . util . IDENT_14 , java . util . Optional ) { java . util . Collection < java . lang . String > IDENT_15 = org . IDENT_0 . IDENT_1 . backend . util . IDENT_16 . METHOD_12 ( IDENT_9 , STRING_10 ) ; java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 > IDENT_17 = new java . util . ArrayList ( ) ; for ( java . lang . String org : IDENT_15 ) { java . lang . IDENT_18 < org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 > IDENT_19 = repository . METHOD_9 ( org , java . util . Optional . empty ( ) , IDENT_20 ) ; for ( org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 project : IDENT_19 ) { IDENT_17 . add ( project ) ; } } java . util . List < java . lang . String > IDENT_21 = new java . util . ArrayList ( ) ; for ( org . IDENT_0 . IDENT_1 . backend . model . IDENT_3 p : IDENT_17 ) { if ( org . apache . commons . lang . StringUtils . isEmpty ( p . METHOD_13 ( ) ) ) { org . IDENT_0 . IDENT_1 . backend . service . IDENT_22 . logger . info ( java . lang . String . format ( STRING_11 , p . getName ( ) ) ) ; continue ; } IDENT_21 . add ( p . METHOD_13 ( ) ) ; } java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_12 > IDENT_23 = new java . util . ArrayList ( ) ; java . util . Set < java . lang . String > IDENT_24 = new java . util . HashSet ( IDENT_21 ) ; int IDENT_25 ; for ( java . lang . String IDENT_26 : IDENT_24 ) { org . IDENT_0 . IDENT_1 . backend . model . IDENT_12 l = new org . IDENT_0 . IDENT_1 . backend . model . METHOD_14 ( IDENT_26 ) ; IDENT_25 = java . util . Collections . METHOD_15 ( IDENT_21 , IDENT_26 ) ; l . METHOD_16 ( ( ( int ) ( java . lang . Math . METHOD_17 ( ( ( ( ( double ) ( METHOD_15 ) ) / ( IDENT_21 . size ( ) ) ) * 100 ) ) ) ) ) ; l . METHOD_18 ( METHOD_15 ) ; IDENT_23 . add ( l ) ; } if ( ( IDENT_23 . size ( ) ) > 1 ) { java . util . Collections . METHOD_19 ( IDENT_23 , c ) ; } return IDENT_23 ; }
org . junit . Assert . assertEquals ( 3 , result . size ( ) ) 