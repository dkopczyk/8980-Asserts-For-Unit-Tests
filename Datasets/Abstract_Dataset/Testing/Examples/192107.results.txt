METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List ) { java . util . List < org . IDENT_0 . IDENT_1 . backend . model . IDENT_2 > IDENT_3 = org . IDENT_0 . IDENT_1 . backend . util . IDENT_4 . METHOD_2 ( IDENT_5 ) ; java . util . Map < java . util . Date , java . util . Map < java . lang . String , java . lang . Integer > > IDENT_6 = new java . util . HashMap ( ) ; java . util . IDENT_7 < java . util . Date > IDENT_8 = new java . util . METHOD_3 ( ) ; java . util . Set < java . lang . String > IDENT_9 = new java . util . HashSet ( ) ; for ( org . IDENT_0 . IDENT_1 . backend . model . IDENT_2 p : IDENT_3 ) { java . lang . String IDENT_10 = p . METHOD_4 ( ) ; java . util . Date date = p . METHOD_5 ( ) ; if ( IDENT_10 == null ) IDENT_10 = STRING_0 ; IDENT_8 . add ( date ) ; IDENT_9 . add ( IDENT_10 ) ; java . util . Map < java . lang . String , java . lang . Integer > IDENT_11 = IDENT_6 . get ( date ) ; if ( IDENT_11 == null ) { IDENT_11 = new java . util . HashMap ( ) ; IDENT_6 . put ( date , IDENT_11 ) ; } if ( IDENT_11 . containsKey ( IDENT_10 ) ) { IDENT_11 . put ( IDENT_10 , ( ( IDENT_11 . get ( IDENT_10 ) ) + 1 ) ) ; } else { IDENT_11 . put ( IDENT_10 , 1 ) ; } } java . util . List < org . IDENT_0 . IDENT_1 . backend . util . IDENT_4 > result = new java . util . ArrayList ( ) ; for ( java . lang . String l : IDENT_9 ) { java . util . List < java . lang . Integer > IDENT_12 = new java . util . ArrayList ( ) ; java . util . List < java . util . Date > IDENT_13 = new java . util . ArrayList ( IDENT_8 ) ; for ( java . util . Date d : IDENT_13 ) { java . lang . Integer i = IDENT_6 . get ( d ) . get ( l ) ; if ( i == null ) { IDENT_12 . add ( 0 ) ; } else { IDENT_12 . add ( i ) ; } } result . add ( new org . IDENT_0 . IDENT_1 . backend . util . METHOD_6 ( l , IDENT_12 , IDENT_13 ) ) ; } return result ; }
org . junit . Assert . assertThat ( org . IDENT_0 . IDENT_1 . backend . util . METHOD_6 . METHOD_1 ( com . google . common . collect . Lists . newArrayList ( ) ) , empty ( ) ) 