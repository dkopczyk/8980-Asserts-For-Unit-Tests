METHOD_0 ( ) { for ( int IDENT_0 = 1 ; IDENT_0 <= 8 ; IDENT_0 ++ ) { final com . IDENT_1 . IDENT_2 . api . impl . IDENT_3 strategy = new com . IDENT_1 . IDENT_2 . api . impl . METHOD_1 ( IDENT_0 ) ; final java . lang . String IDENT_4 = strategy . METHOD_2 ( STRING_0 , STRING_1 ) . toString ( ) ; "<AssertPlaceHolder>" ; } for ( final int IDENT_0 : new int [ ] { 0 , 9 , INT_0 } ) { try { new com . IDENT_1 . IDENT_2 . api . impl . METHOD_1 ( IDENT_0 ) ; org . junit . Assert . fail ( ( STRING_2 + IDENT_0 ) ) ; } catch ( final java . lang . IllegalArgumentException IDENT_5 ) { } } } toString ( ) { return target . toString ( ) ; }
org . junit . Assert . assertEquals ( java . lang . Integer . toString ( IDENT_0 ) , IDENT_4 . substring ( ( ( IDENT_4 . length ( ) ) - 1 ) , IDENT_4 . length ( ) ) ) 