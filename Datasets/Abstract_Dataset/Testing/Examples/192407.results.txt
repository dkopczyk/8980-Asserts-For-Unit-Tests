METHOD_0 ( ) { IDENT_0 IDENT_1 = IDENT_2 . instance ( ) ; IDENT_0 IDENT_3 = IDENT_2 . instance ( ) ; IDENT_4 IDENT_5 = IDENT_6 . instance ( ) ; IDENT_4 IDENT_7 = IDENT_6 . instance ( ) ; IDENT_4 IDENT_8 = IDENT_6 . instance ( ) ; IDENT_9 . set ( IDENT_1 , IDENT_5 ) ; java . util . Map < IDENT_0 , IDENT_4 > IDENT_10 = new java . util . HashMap < IDENT_0 , IDENT_4 > ( ) ; IDENT_10 . put ( IDENT_1 , IDENT_7 ) ; IDENT_10 . put ( IDENT_3 , IDENT_8 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Map ) { if ( m . isEmpty ( ) ) { return true ; } final java . util . Map < byte [ ] , byte [ ] > IDENT_11 = new java . util . IDENT_12 < byte [ ] , byte [ ] > ( m . size ( ) ) ; for ( Map . Entry < ? extends IDENT_0 , ? extends IDENT_4 > entry : m . entrySet ( ) ) { IDENT_11 . put ( METHOD_2 ( entry . getKey ( ) ) , METHOD_3 ( entry . getValue ( ) ) ) ; } return org . springframework . data . redis . core . IDENT_13 . execute ( new org . springframework . data . redis . core . IDENT_14 < java . lang . Boolean > ( ) { @ org . springframework . data . redis . core . Override public org . springframework . data . redis . core . Boolean METHOD_4 ( org . springframework . data . redis . connection . IDENT_15 connection ) { return connection . METHOD_5 ( IDENT_11 ) ; } } , true ) ; }
org . junit . Assert . assertFalse ( IDENT_9 . METHOD_1 ( IDENT_10 ) ) 