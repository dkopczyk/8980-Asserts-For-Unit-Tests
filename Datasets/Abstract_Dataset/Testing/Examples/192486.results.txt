METHOD_0 ( ) { IDENT_0 = METHOD_1 ( STRING_0 ) ; IDENT_1 = METHOD_2 ( IDENT_0 , 1 , Integer . MAX_VALUE , Long . MAX_VALUE ) ; java . lang . String key = STRING_1 ; java . lang . String value = "value" ; com . github . IDENT_2 . util . IDENT_3 < java . lang . IDENT_4 > future = new com . github . IDENT_2 . util . IDENT_3 < java . lang . IDENT_4 > ( ) ; IDENT_1 . add ( key , value , future ) ; IDENT_1 . add ( STRING_2 , STRING_3 , com . github . IDENT_2 . util . IDENT_5 . < java . lang . IDENT_4 > METHOD_3 ( ) ) ; future . get ( ) ; "<AssertPlaceHolder>" ; } get ( int ) { return IDENT_6 . read ( new com . google . common . base . IDENT_7 < java . nio . ByteBuffer , com . github . IDENT_2 . index . IDENT_8 > ( ) { @ com . github . IDENT_2 . index . Override public com . github . IDENT_2 . index . IDENT_8 apply ( java . nio . ByteBuffer IDENT_9 ) { IDENT_9 . METHOD_4 ( ( ( index + 1 ) * ( codec . length ( ) ) ) ) . position ( ( index * ( codec . length ( ) ) ) ) ; return codec . decode ( IDENT_9 ) ; } } ) ; }
org . junit . Assert . assertThat ( IDENT_1 . get ( key ) , org . hamcrest . core . Is . is ( value ) ) 