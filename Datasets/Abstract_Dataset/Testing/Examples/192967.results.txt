METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = com . google . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { int length = IDENT_5 . length ( ) ; java . lang . StringBuilder IDENT_6 = new java . lang . StringBuilder ( ( length * 2 ) ) ; for ( int i = 0 ; i < length ; i ++ ) { char IDENT_7 = IDENT_5 . charAt ( i ) ; else if ( IDENT_7 <= INT_0 ) { IDENT_6 . append ( STRING_1 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_2 + IDENT_7 ) - 1 ) ) ) ; } else if ( IDENT_7 <= INT_1 ) { IDENT_6 . append ( STRING_3 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_2 + IDENT_7 ) - INT_2 ) ) ) ; } else if ( ( ( ( IDENT_7 == STRING_4 ) || ( IDENT_7 == STRING_5 ) ) || ( IDENT_7 == STRING_6 ) ) || ( IDENT_7 == STRING_7 ) ) { IDENT_6 . append ( IDENT_7 ) ; } else if ( IDENT_7 <= STRING_8 ) { IDENT_6 . append ( STRING_9 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_2 + IDENT_7 ) - STRING_10 ) ) ) ; } else if ( IDENT_7 <= STRING_11 ) { IDENT_6 . append ( IDENT_7 ) ; } else if ( IDENT_7 == STRING_12 ) { IDENT_6 . append ( STRING_13 ) ; } else if ( IDENT_7 <= STRING_14 ) { IDENT_6 . append ( STRING_3 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_15 + IDENT_7 ) - STRING_16 ) ) ) ; } else if ( IDENT_7 == STRING_17 ) { IDENT_6 . append ( STRING_18 ) ; } else if ( IDENT_7 <= STRING_19 ) { IDENT_6 . append ( IDENT_7 ) ; } else if ( IDENT_7 <= STRING_20 ) { IDENT_6 . append ( STRING_3 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_21 + IDENT_7 ) - STRING_22 ) ) ) ; } else if ( IDENT_7 == STRING_23 ) { IDENT_6 . append ( STRING_24 ) ; } else if ( IDENT_7 <= STRING_25 ) { IDENT_6 . append ( STRING_26 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_2 + IDENT_7 ) - STRING_1 ) ) ) ; } else if ( IDENT_7 <= INT_3 ) { IDENT_6 . append ( STRING_3 ) ; IDENT_6 . append ( ( ( char ) ( ( STRING_27 + IDENT_7 ) - STRING_28 ) ) ) ; } else { throw new java . lang . IllegalArgumentException ( ( ( STRING_29 + IDENT_7 ) + STRING_30 ) ) ; } } return IDENT_6 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 