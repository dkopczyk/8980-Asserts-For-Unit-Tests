METHOD_0 ( ) { final java . io . StringWriter writer = new java . io . StringWriter ( ) ; final java . lang . String IDENT_0 = STRING_0 ; final java . util . IDENT_1 < java . lang . String > IDENT_2 = new java . util . IDENT_1 < java . lang . String > ( ) { @ org . apache . IDENT_3 . mapper . Override public int compare ( final java . lang . String IDENT_4 , final java . lang . String IDENT_5 ) { return ( IDENT_0 . indexOf ( IDENT_4 ) ) - ( IDENT_0 . indexOf ( IDENT_5 ) ) ; } } ; new org . apache . IDENT_3 . mapper . METHOD_1 ( ) . METHOD_2 ( false ) . METHOD_3 ( true ) . METHOD_4 ( IDENT_2 ) . build ( ) . METHOD_5 ( new org . apache . IDENT_3 . mapper . IDENT_6 . METHOD_6 ( ) , writer ) ; "<AssertPlaceHolder>" ; } toString ( ) { final java . lang . StringBuilder buffer = new java . lang . StringBuilder ( ) ; buffer . append ( ( ( java . lang . Class < ? > ) ( IDENT_7 ) ) . METHOD_7 ( ) ) ; final java . lang . reflect . Type [ ] IDENT_8 = METHOD_8 ( ) ; if ( ( IDENT_8 . length ) > 0 ) { buffer . append ( STRING_1 ) ; int length = IDENT_8 . length ; for ( int i = 0 ; i < length ; i ++ ) { buffer . append ( IDENT_8 [ i ] . toString ( ) ) ; if ( i != ( ( IDENT_8 . length ) - 1 ) ) { buffer . append ( STRING_2 ) ; } } buffer . append ( STRING_3 ) ; } return buffer . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , writer . toString ( ) ) 