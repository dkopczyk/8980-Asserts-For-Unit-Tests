METHOD_0 ( ) { java . lang . String e = STRING_0 + ( ( STRING_1 + STRING_2 ) + STRING_3 ) ; java . lang . String r = IDENT_0 . IDENT_1 . serialize ( new org . apache . IDENT_2 . xml . IDENT_3 . METHOD_1 ( STRING_4 , INT_0 ) ) ; "<AssertPlaceHolder>" ; } serialize ( java . lang . Object , org . apache . IDENT_2 . config . IDENT_4 ) { if ( value == null ) return "" ; if ( serializer == null ) serializer = this . serializer ; java . lang . Class < ? > c = value . getClass ( ) ; if ( value instanceof java . lang . IDENT_5 ) return METHOD_2 ( ( ( java . lang . IDENT_5 ) ( value ) ) ) ; if ( METHOD_3 ( c ) ) return value . toString ( ) ; if ( value instanceof byte [ ] ) { java . lang . String s = null ; byte [ ] b = ( ( byte [ ] ) ( value ) ) ; if ( ( IDENT_6 ) == ( IDENT_7 . IDENT_8 ) ) s = METHOD_4 ( b ) ; else if ( ( IDENT_6 ) == ( IDENT_7 . IDENT_9 ) ) s = METHOD_5 ( b ) ; else s = METHOD_6 ( b ) ; int l = IDENT_10 ; if ( ( l <= 0 ) || ( ( s . length ( ) ) <= l ) ) return s ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < ( s . length ( ) ) ; i += l ) sb . append ( ( ( IDENT_10 ) > 0 ? "\n" : "" ) ) . append ( s . substring ( i , java . lang . Math . min ( s . length ( ) , ( i + l ) ) ) ) ; return sb . toString ( ) ; } java . lang . String r = null ; if ( IDENT_11 ) r = "\n" + ( ( java . lang . String ) ( serializer . serialize ( value ) ) ) ; else r = ( ( java . lang . String ) ( serializer . serialize ( value ) ) ) ; if ( r . startsWith ( STRING_5 ) ) return r . substring ( 1 , ( ( r . length ( ) ) - 1 ) ) ; return r ; }
org . junit . Assert . assertEquals ( e , r ) 