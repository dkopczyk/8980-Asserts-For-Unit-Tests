METHOD_0 ( ) { org . apache . kafka . common . utils . IDENT_0 time = new org . apache . kafka . common . utils . METHOD_1 ( ) ; org . apache . kafka . IDENT_1 . consumer . IDENT_2 . IDENT_3 IDENT_4 = new org . apache . kafka . IDENT_1 . consumer . IDENT_2 . METHOD_2 ( new org . apache . kafka . common . utils . METHOD_3 ( ) , IDENT_5 . IDENT_6 ) ; org . apache . kafka . IDENT_1 . consumer . IDENT_2 . IDENT_7 metadata = METHOD_4 ( IDENT_4 ) ; org . apache . kafka . IDENT_1 . IDENT_8 client = new org . apache . kafka . IDENT_1 . METHOD_5 ( time , metadata ) ; METHOD_6 ( client , java . util . Collections . METHOD_7 ( IDENT_9 , 1 ) ) ; org . apache . kafka . common . Node node = metadata . METHOD_8 ( ) . nodes ( ) . get ( 0 ) ; org . apache . kafka . IDENT_1 . consumer . IDENT_2 . IDENT_10 IDENT_11 = new org . apache . kafka . IDENT_1 . consumer . METHOD_9 ( ) ; org . apache . kafka . IDENT_1 . consumer . IDENT_12 < java . lang . String , java . lang . String > consumer = METHOD_10 ( time , client , IDENT_4 , metadata , IDENT_11 , true ) ; consumer . METHOD_11 ( METHOD_12 ( IDENT_9 ) , METHOD_13 ( consumer ) ) ; org . apache . kafka . common . Node IDENT_13 = METHOD_14 ( client , node , IDENT_11 , singletonList ( IDENT_14 ) , null ) ; consumer . METHOD_15 ( time . METHOD_16 ( Long . MAX_VALUE ) ) ; consumer . METHOD_17 ( IDENT_15 . IDENT_16 ) ; client . METHOD_18 ( METHOD_19 ( IDENT_14 , 0 , 5 ) , node ) ; client . METHOD_17 ( 0 , time . METHOD_20 ( ) ) ; client . METHOD_21 ( METHOD_19 ( IDENT_14 , 5 , 0 ) , node ) ; java . util . concurrent . atomic . IDENT_17 IDENT_18 = METHOD_22 ( client , IDENT_13 ) ; time . sleep ( IDENT_19 ) ; java . lang . Thread . sleep ( IDENT_19 ) ; consumer . METHOD_17 ( IDENT_15 . IDENT_16 ) ; "<AssertPlaceHolder>" ; consumer . close ( java . time . IDENT_15 . METHOD_23 ( 0 ) ) ; } get ( ) { return value ; }
org . junit . Assert . assertTrue ( IDENT_18 . get ( ) ) 