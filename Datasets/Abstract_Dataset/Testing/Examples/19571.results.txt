METHOD_0 ( ) { IDENT_0 . METHOD_1 ( METHOD_2 ( IDENT_1 ) , IDENT_2 ) ; METHOD_3 ( STRING_0 , IDENT_3 , singletonList ( IDENT_4 ) ) ; client . METHOD_4 ( new org . apache . kafka . common . IDENT_5 . METHOD_5 ( new org . apache . kafka . common . message . METHOD_6 ( ) . METHOD_7 ( IDENT_6 . IDENT_7 . code ( ) ) ) ) ; IDENT_0 . METHOD_8 ( ) ; IDENT_3 . METHOD_9 ( ) ; IDENT_0 . METHOD_10 ( METHOD_2 ( IDENT_4 ) ) ; client . METHOD_4 ( new org . apache . kafka . IDENT_8 . IDENT_9 . METHOD_11 ( ) { @ org . apache . kafka . IDENT_8 . consumer . IDENT_10 . Override public boolean matches ( org . apache . kafka . common . IDENT_5 . IDENT_11 body ) { org . apache . kafka . common . IDENT_5 . IDENT_12 IDENT_13 = ( ( org . apache . kafka . common . IDENT_5 . IDENT_12 ) ( body ) ) ; return ( IDENT_13 . METHOD_12 ( ) . equals ( IDENT_12 . IDENT_14 ) ) && ( ( IDENT_13 . METHOD_13 ( ) ) == ( org . apache . kafka . common . IDENT_5 . IDENT_12 . IDENT_15 ) ) ; } } , METHOD_14 ( METHOD_15 ( IDENT_4 , IDENT_6 . IDENT_7 ) ) ) ; java . util . concurrent . atomic . IDENT_16 IDENT_17 = new java . util . concurrent . atomic . METHOD_16 ( false ) ; IDENT_3 . METHOD_17 ( METHOD_15 ( IDENT_4 , new org . apache . kafka . IDENT_8 . consumer . METHOD_18 ( INT_0 ) ) , METHOD_19 ( IDENT_17 ) ) ; IDENT_3 . METHOD_20 ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return value ; }
org . junit . Assert . assertTrue ( IDENT_17 . get ( ) ) 