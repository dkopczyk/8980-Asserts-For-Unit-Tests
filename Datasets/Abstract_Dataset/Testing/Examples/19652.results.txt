METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . apache . kafka . common . security . IDENT_1 . IDENT_2 . IDENT_3 response = new org . apache . kafka . common . security . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_0 . getBytes ( IDENT_4 . UTF_8 ) ) ; java . lang . String message = new java . lang . String ( response . METHOD_2 ( ) , java . nio . IDENT_5 . IDENT_4 . UTF_8 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { java . lang . String IDENT_6 = ( IDENT_7 . isEmpty ( ) ) ? "" : STRING_1 + ( IDENT_7 ) ; java . lang . String IDENT_8 = METHOD_3 ( ) ; if ( ( IDENT_8 . length ( ) ) > 0 ) IDENT_8 = ( org . apache . kafka . common . security . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 ) + IDENT_8 ; java . lang . String message = java . lang . String . format ( STRING_2 , IDENT_6 , org . apache . kafka . common . security . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 , IDENT_10 , IDENT_8 , org . apache . kafka . common . security . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 , org . apache . kafka . common . security . IDENT_1 . IDENT_2 . METHOD_1 . IDENT_9 ) ; return message . getBytes ( IDENT_4 . UTF_8 ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , message ) 