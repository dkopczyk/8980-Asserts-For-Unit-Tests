METHOD_0 ( ) { final org . easymock . IDENT_0 < org . apache . kafka . connect . util . IDENT_1 < java . util . Map < java . lang . String , java . lang . String > > > cb = org . easymock . IDENT_0 . newInstance ( ) ; IDENT_2 . METHOD_1 ( org . easymock . EasyMock . eq ( org . apache . kafka . connect . runtime . rest . resources . IDENT_3 . IDENT_4 ) , org . easymock . EasyMock . METHOD_2 ( cb ) ) ; METHOD_3 ( cb , org . apache . kafka . connect . runtime . rest . resources . IDENT_3 . IDENT_5 ) ; org . IDENT_6 . api . easymock . IDENT_7 . METHOD_4 ( ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_8 = IDENT_9 . METHOD_5 ( org . apache . kafka . connect . runtime . rest . resources . IDENT_3 . IDENT_4 , org . apache . kafka . connect . runtime . rest . resources . IDENT_3 . IDENT_10 ) ; "<AssertPlaceHolder>" ; org . IDENT_6 . api . easymock . IDENT_7 . METHOD_6 ( ) ; } METHOD_5 ( java . lang . String , java . lang . Boolean ) { org . apache . kafka . connect . util . IDENT_11 < java . util . Map < java . lang . String , java . lang . String > > cb = new org . apache . kafka . connect . util . METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_1 ( IDENT_12 , cb ) ; return METHOD_9 ( cb , ( ( STRING_0 + IDENT_12 ) + STRING_1 ) , STRING_2 , null , IDENT_13 ) ; }
org . junit . Assert . assertEquals ( org . apache . kafka . connect . runtime . rest . resources . IDENT_3 . IDENT_5 , IDENT_8 ) 