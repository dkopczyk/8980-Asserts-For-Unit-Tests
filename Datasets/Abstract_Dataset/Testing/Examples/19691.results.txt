METHOD_0 ( ) { org . apache . kafka . connect . util . IDENT_0 < java . lang . IDENT_1 > IDENT_2 = METHOD_1 ( ) ; org . apache . kafka . connect . util . IDENT_0 < java . util . Map < java . nio . ByteBuffer , java . nio . ByteBuffer > > IDENT_3 = METHOD_2 ( ) ; org . IDENT_4 . api . easymock . IDENT_5 . METHOD_3 ( ) ; store . set ( org . apache . kafka . connect . storage . IDENT_6 . IDENT_7 , IDENT_2 ) . get ( ) ; store . METHOD_4 ( ) ; org . apache . kafka . connect . storage . IDENT_8 IDENT_9 = new org . apache . kafka . connect . storage . METHOD_5 ( ) ; IDENT_9 . METHOD_6 ( config ) ; IDENT_9 . start ( ) ; java . util . Map < java . nio . ByteBuffer , java . nio . ByteBuffer > values = IDENT_9 . get ( java . util . Arrays . asList ( org . apache . kafka . connect . storage . IDENT_6 . buffer ( STRING_0 ) ) , IDENT_3 ) . get ( ) ; "<AssertPlaceHolder>" ; org . IDENT_4 . api . easymock . IDENT_5 . METHOD_7 ( ) ; } buffer ( java . lang . String ) { return java . nio . ByteBuffer . METHOD_8 ( v . getBytes ( ) ) ; }
org . junit . Assert . assertEquals ( org . apache . kafka . connect . storage . IDENT_6 . buffer ( "value" ) , values . get ( org . apache . kafka . connect . storage . IDENT_6 . buffer ( STRING_0 ) ) ) 