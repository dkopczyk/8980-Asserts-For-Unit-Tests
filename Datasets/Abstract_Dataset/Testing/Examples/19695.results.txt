METHOD_0 ( ) { byte [ ] value = new byte [ 0 ] ; java . lang . String IDENT_0 = STRING_0 ; org . apache . kafka . connect . util . IDENT_1 < java . lang . String , byte [ ] > IDENT_2 = mock ( org . apache . kafka . connect . util . IDENT_1 . class ) ; org . apache . kafka . connect . storage . IDENT_3 converter = mock ( org . apache . kafka . connect . storage . IDENT_3 . class ) ; org . apache . kafka . connect . storage . IDENT_4 store = new org . apache . kafka . connect . storage . METHOD_1 ( new org . apache . kafka . common . utils . METHOD_2 ( ) , converter , org . apache . kafka . connect . storage . IDENT_5 . IDENT_6 , IDENT_2 ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_7 = new java . util . HashMap ( ) ; IDENT_7 . put ( STRING_1 , IDENT_0 ) ; IDENT_7 . put ( STRING_2 , STRING_3 ) ; IDENT_7 . put ( STRING_4 , 1L ) ; expect ( converter . METHOD_3 ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_6 , value ) ) . andReturn ( new org . apache . kafka . connect . data . METHOD_4 ( null , IDENT_7 ) ) ; METHOD_5 ( ) ; store . read ( org . apache . kafka . connect . storage . IDENT_5 . METHOD_6 ( 0 , STRING_5 , value ) ) ; store . METHOD_7 ( new org . apache . kafka . connect . runtime . METHOD_8 ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_8 , METHOD_8 . IDENT_9 . IDENT_10 , org . apache . kafka . connect . storage . IDENT_5 . IDENT_11 , 0 ) ) ; org . apache . kafka . connect . runtime . METHOD_8 status = new org . apache . kafka . connect . runtime . METHOD_8 ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_8 , METHOD_8 . IDENT_9 . IDENT_12 , IDENT_0 , 1 ) ; "<AssertPlaceHolder>" ; METHOD_9 ( ) ; } get ( org . apache . kafka . connect . data . Field ) { java . lang . Object val = values [ field . index ( ) ] ; if ( ( val == null ) && ( ( field . schema ( ) . METHOD_10 ( ) ) != null ) ) { val = field . schema ( ) . METHOD_10 ( ) ; } return val ; }
org . junit . Assert . assertEquals ( status , store . get ( org . apache . kafka . connect . storage . IDENT_5 . IDENT_8 ) ) 