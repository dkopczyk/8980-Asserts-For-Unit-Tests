METHOD_0 ( ) { org . IDENT_0 . compiler . core . common . type . IDENT_1 a = org . IDENT_0 . compiler . core . common . type . IDENT_2 . METHOD_1 ( IDENT_3 , IDENT_4 , IDENT_5 ) ; org . IDENT_0 . compiler . core . common . type . IDENT_1 b = org . IDENT_0 . compiler . core . common . type . IDENT_2 . METHOD_1 ( IDENT_3 , IDENT_6 , IDENT_7 ) ; org . IDENT_0 . compiler . core . common . type . IDENT_1 result = org . IDENT_0 . compiler . core . test . IDENT_8 . METHOD_2 ( a , b ) ; for ( long IDENT_9 = IDENT_4 ; IDENT_9 <= ( IDENT_5 ) ; IDENT_9 ++ ) { for ( long IDENT_10 = IDENT_6 ; IDENT_10 <= ( IDENT_7 ) ; IDENT_10 ++ ) { long res = 0 ; if ( ( IDENT_3 ) == 8 ) { res = ( ( byte ) ( IDENT_9 * IDENT_10 ) ) ; } else if ( ( IDENT_3 ) == 16 ) { res = ( ( short ) ( IDENT_9 * IDENT_10 ) ) ; } else if ( ( IDENT_3 ) == INT_0 ) { res = ( ( int ) ( IDENT_9 * IDENT_10 ) ) ; } else if ( ( IDENT_3 ) == INT_1 ) { res = IDENT_9 * IDENT_10 ; } "<AssertPlaceHolder>" ; if ( IDENT_10 == ( Long . MAX_VALUE ) ) { break ; } } if ( IDENT_9 == ( Long . MAX_VALUE ) ) { break ; } } }
org . junit . Assert . assertTrue ( result . contains ( res ) ) 