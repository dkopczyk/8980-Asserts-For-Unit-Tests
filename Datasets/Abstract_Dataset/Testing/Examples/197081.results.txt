METHOD_0 ( ) { if ( ! ( METHOD_1 ( STRING_0 ) ) ) return ; for ( test . java . lang . invoke . IDENT_0 IDENT_1 : test . java . lang . invoke . IDENT_2 . IDENT_3 ) { int IDENT_4 = IDENT_1 . type ( ) . METHOD_2 ( ) ; for ( int IDENT_5 = 0 ; IDENT_5 <= ( java . lang . Math . min ( IDENT_4 , ( ( test . java . lang . invoke . IDENT_2 . IDENT_6 . length ) - 1 ) ) ) ; IDENT_5 ++ ) { int IDENT_7 = ( IDENT_4 - 1 ) + IDENT_5 ; if ( IDENT_7 < 0 ) continue ; for ( int pos = 0 ; ( pos + IDENT_5 ) <= IDENT_7 ; pos ++ ) { test . java . lang . invoke . IDENT_0 IDENT_8 = test . java . lang . invoke . IDENT_2 . IDENT_6 [ IDENT_5 ] ; int [ ] args = new int [ IDENT_7 ] ; int IDENT_9 = 0 ; int IDENT_10 = INT_0 ; for ( int i = 0 ; i < pos ; i ++ ) args [ ( IDENT_9 ++ ) ] = ( IDENT_10 ++ ) + 0 ; for ( int i = 0 ; i < IDENT_5 ; i ++ ) args [ ( IDENT_9 ++ ) ] = ( IDENT_10 ++ ) + 10 ; while ( IDENT_9 < ( args . length ) ) args [ ( IDENT_9 ++ ) ] = ( IDENT_10 ++ ) + 20 ; int [ ] IDENT_11 = test . java . lang . invoke . Arrays . METHOD_3 ( args , pos , ( pos + IDENT_5 ) ) ; int IDENT_12 = ( ( int ) ( IDENT_8 . METHOD_4 ( int [ ] . class , IDENT_11 . length ) . METHOD_5 ( IDENT_11 ) ) ) ; int [ ] IDENT_13 = test . java . lang . invoke . Arrays . METHOD_3 ( args , 0 , IDENT_4 ) ; java . lang . System . METHOD_6 ( args , ( pos + IDENT_5 ) , IDENT_13 , ( pos + 1 ) , ( IDENT_4 - ( pos + 1 ) ) ) ; IDENT_13 [ pos ] = IDENT_12 ; java . lang . Object expect = IDENT_1 . METHOD_4 ( int [ ] . class , IDENT_13 . length ) . METHOD_5 ( IDENT_13 ) ; test . java . lang . invoke . IDENT_0 IDENT_14 = test . java . lang . invoke . IDENT_2 . METHOD_7 ( IDENT_1 , pos , int [ ] . class , test . java . lang . invoke . IDENT_2 . IDENT_6 [ IDENT_5 ] ) ; if ( IDENT_14 == null ) continue ; assert ( IDENT_14 . type ( ) . METHOD_2 ( ) ) == IDENT_7 ; java . lang . Object IDENT_15 = IDENT_14 . METHOD_4 ( int [ ] . class , args . length ) . METHOD_5 ( args ) ; "<AssertPlaceHolder>" ; } } } }
org . junit . Assert . assertEquals ( expect , IDENT_15 ) 