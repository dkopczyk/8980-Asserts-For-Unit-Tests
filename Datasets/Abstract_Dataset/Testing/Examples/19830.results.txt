METHOD_0 ( ) { final byte [ ] [ ] bytes = new byte [ ] [ ] { new byte [ ] { 0 } , new byte [ ] { 1 } , new byte [ ] { 2 } } ; for ( final byte [ ] IDENT_0 : bytes ) { final org . apache . kafka . common . utils . IDENT_1 IDENT_2 = org . apache . kafka . common . utils . IDENT_1 . METHOD_1 ( IDENT_0 ) ; store . put ( IDENT_2 , IDENT_0 ) ; cache . put ( IDENT_3 , IDENT_2 , new org . apache . kafka . streams . state . IDENT_4 . METHOD_2 ( null ) ) ; } "<AssertPlaceHolder>" ; } METHOD_3 ( ) { final org . apache . kafka . streams . state . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = cache . METHOD_4 ( IDENT_3 ) ; final org . apache . kafka . streams . state . IDENT_8 < org . apache . kafka . common . utils . IDENT_1 , byte [ ] > IDENT_9 = new org . apache . kafka . streams . state . IDENT_4 . METHOD_5 ( STRING_0 , store . METHOD_4 ( ) ) ; return new org . apache . kafka . streams . state . IDENT_4 . METHOD_6 ( IDENT_7 , IDENT_9 ) ; }
org . junit . Assert . assertFalse ( METHOD_3 ( ) . hasNext ( ) ) 