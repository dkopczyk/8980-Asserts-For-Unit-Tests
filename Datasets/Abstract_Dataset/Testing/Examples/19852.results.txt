METHOD_0 ( ) { final org . apache . kafka . streams . state . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = mock ( org . apache . kafka . streams . state . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; expect ( IDENT_3 . METHOD_1 ( METHOD_2 ( org . apache . kafka . streams . state . IDENT_0 . IDENT_4 . class ) , eq ( false ) ) ) . andReturn ( true ) ; replay ( IDENT_3 ) ; IDENT_5 = new org . apache . kafka . streams . state . IDENT_0 . METHOD_3 ( IDENT_3 , STRING_0 , new org . apache . kafka . common . utils . METHOD_4 ( ) , org . apache . kafka . common . serialization . IDENT_6 . String ( ) , new org . apache . kafka . streams . state . IDENT_0 . METHOD_5 ( org . apache . kafka . common . serialization . IDENT_6 . String ( ) ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 ) ; } METHOD_1 ( org . apache . kafka . streams . state . IDENT_0 . IDENT_4 , boolean ) { final org . apache . kafka . streams . state . IDENT_7 < org . apache . kafka . common . utils . IDENT_8 , byte [ ] > IDENT_9 = org . apache . kafka . streams . state . IDENT_0 . IDENT_10 . METHOD_6 ( ) ; if ( METHOD_6 instanceof org . apache . kafka . streams . state . IDENT_0 . IDENT_11 ) { return ( ( org . apache . kafka . streams . state . IDENT_0 . IDENT_11 < byte [ ] , byte [ ] > ) ( METHOD_6 ) ) . METHOD_1 ( ( key , IDENT_12 , IDENT_13 , IDENT_14 ) -> listener . apply ( org . apache . kafka . streams . state . IDENT_0 . IDENT_15 . METHOD_7 ( key , IDENT_16 , IDENT_17 . METHOD_8 ( ) , IDENT_17 . METHOD_9 ( ) ) , ( IDENT_12 != null ? IDENT_17 . METHOD_10 ( IDENT_12 ) : null ) , ( IDENT_13 != null ? IDENT_17 . METHOD_10 ( IDENT_13 ) : null ) , IDENT_14 ) , IDENT_18 ) ; } return false ; }
org . junit . Assert . assertTrue ( IDENT_5 . METHOD_1 ( null , false ) ) 