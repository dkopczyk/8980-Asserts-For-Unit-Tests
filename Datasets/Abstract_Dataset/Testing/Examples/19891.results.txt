METHOD_0 ( ) { final java . util . Map < org . apache . kafka . common . IDENT_0 , java . lang . Long > IDENT_1 = new java . util . HashMap ( ) ; IDENT_1 . put ( IDENT_2 , INT_0 ) ; consumer . METHOD_1 ( IDENT_1 ) ; final java . util . Map < org . apache . kafka . common . IDENT_0 , java . lang . Long > IDENT_3 = new java . util . HashMap ( ) ; IDENT_3 . put ( IDENT_2 , 0L ) ; consumer . METHOD_2 ( IDENT_3 ) ; IDENT_4 . METHOD_3 ( consumer , IDENT_5 , ( - INT_1 ) ) ; final org . apache . kafka . IDENT_6 . consumer . IDENT_7 < byte [ ] , byte [ ] > records = consumer . METHOD_4 ( java . time . IDENT_8 . METHOD_5 ( INT_2 ) ) ; "<AssertPlaceHolder>" ; } count ( ) { return count ( org . apache . kafka . streams . IDENT_9 . IDENT_10 . with ( IDENT_11 , org . apache . kafka . common . serialization . IDENT_12 . Long ( ) ) ) ; }
org . junit . Assert . assertEquals ( 5 , records . count ( ) ) 