METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 . IDENT_2 service = org . easymock . EasyMock . METHOD_1 ( org . apache . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; org . apache . IDENT_0 . IDENT_1 . IDENT_3 repo = org . easymock . EasyMock . METHOD_1 ( org . apache . IDENT_0 . IDENT_1 . IDENT_3 . class ) ; org . apache . IDENT_0 . IDENT_1 . IDENT_4 feature = org . easymock . EasyMock . METHOD_1 ( org . apache . IDENT_0 . IDENT_1 . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( service . METHOD_2 ( ) ) . andReturn ( new org . apache . IDENT_0 . IDENT_1 . IDENT_3 [ ] { repo } ) ; org . easymock . EasyMock . expect ( repo . METHOD_3 ( ) ) . andReturn ( new org . apache . IDENT_0 . IDENT_1 . IDENT_4 [ ] { feature } ) ; org . easymock . EasyMock . expect ( feature . METHOD_4 ( ) ) . andReturn ( true ) . METHOD_5 ( ) ; org . easymock . EasyMock . expect ( feature . METHOD_6 ( ) ) . andReturn ( false ) . METHOD_5 ( ) ; org . easymock . EasyMock . expect ( feature . getName ( ) ) . andReturn ( STRING_0 ) ; org . easymock . EasyMock . expect ( feature . getId ( ) ) . andReturn ( STRING_1 ) ; org . easymock . EasyMock . expect ( service . METHOD_7 ( org . easymock . EasyMock . eq ( STRING_1 ) ) ) . andReturn ( IDENT_5 . IDENT_6 ) ; org . easymock . EasyMock . expect ( feature . METHOD_8 ( ) ) . andReturn ( STRING_2 ) ; org . easymock . EasyMock . expect ( feature . METHOD_9 ( ) ) . andReturn ( STRING_3 ) ; org . easymock . EasyMock . expect ( service . METHOD_10 ( feature ) ) . andReturn ( true ) ; org . easymock . EasyMock . expect ( repo . getName ( ) ) . andReturn ( STRING_4 ) . METHOD_5 ( ) ; org . easymock . EasyMock . replay ( service , repo , feature ) ; org . apache . IDENT_0 . IDENT_1 . command . IDENT_7 command = new org . apache . IDENT_0 . IDENT_1 . command . METHOD_11 ( ) ; command . METHOD_12 ( service ) ; command . IDENT_8 = true ; command . IDENT_9 = true ; java . io . ByteArrayOutputStream IDENT_10 = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_11 out = new java . io . METHOD_13 ( IDENT_10 ) ; java . lang . System . METHOD_14 ( out ) ; command . execute ( ) ; out . METHOD_15 ( ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( service , repo , feature ) ; } toString ( ) { return expr . substring ( IDENT_12 ) ; }
org . junit . Assert . assertTrue ( IDENT_10 . toString ( ) . contains ( STRING_0 ) ) 