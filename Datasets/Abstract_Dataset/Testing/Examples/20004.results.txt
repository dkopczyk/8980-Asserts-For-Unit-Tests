METHOD_0 ( ) { long IDENT_0 = ( ( 1 << 4 ) | ( 1 << 6 ) ) | ( 1 << 8 ) ; System . out . println ( ( ( ( STRING_0 + ( java . lang . Long . METHOD_1 ( IDENT_0 ) ) ) + STRING_1 ) + ( java . lang . Long . METHOD_2 ( IDENT_0 ) ) ) ) ; long IDENT_1 = ( ( long ) ( java . lang . Math . METHOD_3 ( 2 , 10 ) ) ) - 1 ; System . out . println ( ( ( ( STRING_2 + ( java . lang . Long . METHOD_1 ( IDENT_1 ) ) ) + STRING_1 ) + ( java . lang . Long . METHOD_2 ( IDENT_1 ) ) ) ) ; System . out . println ( STRING_3 ) ; int count = METHOD_4 ( IDENT_0 , IDENT_1 ) ; System . out . println ( ( STRING_4 + count ) ) ; int IDENT_2 = ( ( int ) ( METHOD_5 ( java . lang . Long . METHOD_2 ( IDENT_1 ) , java . lang . Long . METHOD_2 ( IDENT_0 ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( int , int ) { if ( n < k ) { throw new java . lang . IllegalArgumentException ( STRING_5 ) ; } long res = 1 ; for ( int i = ( n - k ) + 1 ; i <= n ; i ++ ) { res OP_0 i ; } for ( int i = 1 ; i <= k ; i ++ ) { res OP_1 i ; } return res ; }
org . junit . Assert . assertTrue ( ( IDENT_2 > count ) ) 