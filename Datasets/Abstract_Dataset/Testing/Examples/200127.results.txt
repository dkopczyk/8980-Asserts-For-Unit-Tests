METHOD_0 ( ) { jsprit . core . problem . IDENT_0 . Builder IDENT_1 = IDENT_0 . Builder . newInstance ( ) ; new jsprit . core . problem . io . METHOD_1 ( IDENT_1 ) . read ( STRING_0 ) ; jsprit . core . problem . IDENT_0 IDENT_2 = IDENT_1 . build ( ) ; jsprit . core . algorithm . IDENT_3 IDENT_4 = jsprit . core . algorithm . io . IDENT_5 . METHOD_2 ( IDENT_2 , STRING_1 ) ; IDENT_4 . METHOD_3 ( 100 ) ; final java . util . List < java . lang . Boolean > IDENT_6 = new java . util . ArrayList < java . lang . Boolean > ( ) ; IDENT_4 . METHOD_4 ( new jsprit . core . algorithm . IDENT_7 . listener . METHOD_5 ( ) { @ jsprit . core . algorithm . Override public void METHOD_6 ( jsprit . core . problem . solution . route . IDENT_8 IDENT_9 , jsprit . core . problem . IDENT_10 . IDENT_11 IDENT_12 , jsprit . core . problem . IDENT_10 . IDENT_11 IDENT_13 ) { if ( IDENT_12 == null ) return ; if ( ( IDENT_12 . getId ( ) . equals ( STRING_2 ) ) && ( IDENT_13 . getId ( ) . equals ( STRING_3 ) ) ) { for ( jsprit . core . problem . job . IDENT_14 j : IDENT_9 . METHOD_7 ( ) . METHOD_8 ( ) ) { if ( j . getId ( ) . equals ( "1" ) ) { IDENT_6 . add ( true ) ; } } } if ( ( IDENT_12 . getId ( ) . equals ( STRING_3 ) ) && ( IDENT_13 . getId ( ) . equals ( STRING_2 ) ) ) { for ( jsprit . core . problem . job . IDENT_14 j : IDENT_9 . METHOD_7 ( ) . METHOD_8 ( ) ) { if ( j . getId ( ) . equals ( "2" ) ) { IDENT_6 . add ( true ) ; } } } } } ) ; @ jsprit . core . algorithm . METHOD_9 ( STRING_4 ) java . util . Collection < jsprit . core . problem . solution . IDENT_15 > IDENT_16 = IDENT_4 . METHOD_10 ( ) ; System . out . println ( ( STRING_5 + ( IDENT_6 . size ( ) ) ) ) ; "<AssertPlaceHolder>" ; }
org . junit . Assert . assertTrue ( IDENT_6 . isEmpty ( ) ) 