METHOD_0 ( ) { java . io . InputStream in = null ; java . io . ByteArrayOutputStream IDENT_0 = null ; try { final byte [ ] IDENT_1 = new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ; in = new java . io . InputStream ( ) { MOD_0 int count = 0 ; public int METHOD_1 ( ) { return ( IDENT_1 . length ) - ( count ) ; } public int read ( ) { throw new java . lang . METHOD_2 ( ) ; } public int read ( byte [ ] bytes , int IDENT_2 , int len ) { if ( ( count ) < ( IDENT_1 . length ) ) { try { java . lang . Thread . sleep ( 1000 ) ; } catch ( java . lang . IDENT_3 IDENT_4 ) { java . lang . Thread . METHOD_3 ( ) . METHOD_4 ( ) ; } bytes [ IDENT_2 ] = IDENT_1 [ ( ( count ) ++ ) ] ; return 1 ; } else return - 1 ; } } ; IDENT_0 = new java . io . ByteArrayOutputStream ( ) ; IDENT_5 . io . IDENT_6 . METHOD_5 ( in , IDENT_0 , new java . io . METHOD_6 ( System . out ) ) ; "<AssertPlaceHolder>" ; } finally { IDENT_5 . io . IDENT_6 . close ( in ) ; IDENT_5 . io . IDENT_6 . close ( IDENT_0 ) ; } }
org . junit . Assert . assertArrayEquals ( IDENT_1 , IDENT_0 . toByteArray ( ) ) 