METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 , STRING_2 ) ; IDENT_3 . METHOD_2 ( STRING_3 ) ) ; org . junit . Assert . assertThat ( IDENT_4 [ 2 ] , org . hamcrest . core . Is . is ( STRING_4 ) ; IDENT_3 . METHOD_3 ( true ) ; IDENT_3 . METHOD_4 ( true ) ; IDENT_3 . METHOD_5 ( true ) ; IDENT_3 . METHOD_6 ( java . util . regex . IDENT_5 . METHOD_7 ( STRING_5 ) ) ; final com . IDENT_0 . IDENT_1 . IDENT_6 reader = new com . IDENT_0 . IDENT_1 . METHOD_8 ( new java . io . METHOD_9 ( STRING_6 ) , IDENT_3 ) ; try { final java . util . List < java . lang . String [ ] > list = new com . IDENT_0 . IDENT_1 . IDENT_7 . METHOD_10 ( ) . filter ( new com . IDENT_0 . IDENT_1 . filters . METHOD_11 ( new com . IDENT_0 . IDENT_1 . filters . METHOD_12 ( ) ) . eq ( 0 , STRING_7 ) . eq ( 1 , STRING_8 ) ) . load ( reader ) ; org . junit . Assert . assertThat ( list . size ( ) , org . hamcrest . core . Is . is ( 2 ) ) ; final java . lang . String [ ] IDENT_4 = list . get ( 0 ) ; org . junit . Assert . assertThat ( IDENT_4 . length , org . hamcrest . core . Is . is ( 3 ) ) ; org . junit . Assert . assertThat ( IDENT_4 [ 0 ] , org . hamcrest . core . Is . is ( STRING_7 ) ) ; org . junit . Assert . assertThat ( IDENT_4 [ 1 ] , org . hamcrest . core . Is . is ( STRING_9 ) ) ; org . junit . Assert . assertThat ( IDENT_4 [ 2 ] , org . hamcrest . core . Is . is ( STRING_10 ) ) ; final java . lang . String [ ] IDENT_8 = list . get ( 1 ) ; org . junit . Assert . assertThat ( IDENT_8 . length , org . hamcrest . core . Is . is ( 3 ) ) ; org . junit . Assert . assertThat ( IDENT_8 [ 0 ] , org . hamcrest . core . Is . is ( STRING_11 ) ) ; org . junit . Assert . assertThat ( IDENT_8 [ 1 ] , org . hamcrest . core . Is . is ( STRING_8 ) ) ; "<AssertPlaceHolder>" ; } finally { reader . close ( ) ; } }
org . junit . Assert . assertNull ( IDENT_8 [ 2 ] ) 