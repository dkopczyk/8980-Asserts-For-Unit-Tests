METHOD_0 ( ) { for ( int base = 10 ; base >= ( - 10 ) ; OP_0 base ) { for ( int exp = 10 ; exp >= ( - 10 ) ; OP_0 exp ) { for ( int IDENT_0 = 10 ; IDENT_0 >= ( - 1 ) ; OP_0 IDENT_0 ) { this . strategy = com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ; java . lang . Object expected ; try { expected = METHOD_1 ( base , exp , IDENT_0 ) ; } catch ( java . lang . Exception e ) { expected = e . getClass ( ) ; } this . strategy = com . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 ; java . lang . Object actual ; try { actual = METHOD_1 ( base , exp , IDENT_0 ) ; } catch ( java . lang . Exception e ) { actual = e . getClass ( ) ; } java . lang . String message = java . lang . String . format ( STRING_0 , base , exp , IDENT_0 ) ; "<AssertPlaceHolder>" ; } } } }
org . junit . Assert . assertEquals ( message , expected , actual ) 