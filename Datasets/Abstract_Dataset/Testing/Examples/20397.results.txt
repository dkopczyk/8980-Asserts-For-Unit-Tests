METHOD_0 ( ) { METHOD_1 ( java . util . Collections . < org . apache . maven . project . IDENT_0 > emptyList ( ) ) ; rule . execute ( helper ) ; "<AssertPlaceHolder>" ; } execute ( org . apache . maven . IDENT_1 . rule . api . IDENT_2 ) { org . apache . maven . plugin . logging . IDENT_3 log = helper . METHOD_2 ( ) ; try { org . apache . maven . project . IDENT_0 project = ( ( org . apache . maven . project . IDENT_0 ) ( helper . evaluate ( STRING_0 ) ) ) ; org . apache . maven . IDENT_4 . IDENT_5 session = ( ( org . apache . maven . IDENT_4 . IDENT_5 ) ( helper . evaluate ( STRING_1 ) ) ) ; java . lang . String target = ( ( java . lang . String ) ( helper . evaluate ( STRING_2 ) ) ) ; java . lang . String IDENT_6 = ( ( java . lang . String ) ( helper . evaluate ( STRING_3 ) ) ) ; org . apache . maven . IDENT_7 . resolver . IDENT_8 resolver = ( ( org . apache . maven . IDENT_7 . resolver . IDENT_8 ) ( helper . METHOD_3 ( org . apache . maven . IDENT_7 . resolver . IDENT_8 . class ) ) ) ; org . apache . maven . IDENT_4 . IDENT_9 IDENT_10 = ( ( org . apache . maven . IDENT_4 . IDENT_9 ) ( helper . METHOD_3 ( org . apache . maven . IDENT_4 . IDENT_9 . class ) ) ) ; log . info ( ( STRING_0 2 + target ) ) ; log . info ( ( STRING_4 + IDENT_6 ) ) ; log . info ( ( STRING_5 + project ) ) ; log . info ( ( STRING_6 + IDENT_10 ) ) ; log . info ( ( STRING_0 0 + session ) ) ; log . info ( ( STRING_0 1 + resolver ) ) ; if ( this . IDENT_11 ) { throw new org . apache . maven . IDENT_1 . rule . api . METHOD_4 ( STRING_7 ) ; } } catch ( org . IDENT_12 . IDENT_13 . component . repository . exception . IDENT_14 e ) { throw new org . apache . maven . IDENT_1 . rule . api . METHOD_4 ( ( STRING_8 + ( e . METHOD_5 ( ) ) ) , e ) ; } catch ( org . IDENT_12 . IDENT_13 . component . IDENT_15 . expression . IDENT_16 e ) { throw new org . apache . maven . IDENT_1 . rule . api . METHOD_4 ( ( STRING_9 + ( e . METHOD_5 ( ) ) ) , e ) ; } }
org . junit . Assert . assertTrue ( true ) 