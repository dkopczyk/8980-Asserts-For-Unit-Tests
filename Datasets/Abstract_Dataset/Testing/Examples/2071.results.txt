METHOD_0 ( ) { java . nio . IDENT_0 . IDENT_1 . METHOD_1 ( ) . close ( ) ; long IDENT_2 = METHOD_2 ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { java . lang . String string = ( STRING_0 + i ) + STRING_1 ; java . io . ByteArrayInputStream input = new java . io . ByteArrayInputStream ( string . getBytes ( ) ) ; net . sf . IDENT_3 . IDENT_4 expect = new net . sf . IDENT_3 . METHOD_3 ( ) . METHOD_4 ( input ) . METHOD_5 ( TestUtils . IDENT_5 , TimeUnit . IDENT_6 ) . build ( ) ; expect . expect ( contains ( ( i + STRING_2 ) ) ) ; input . close ( ) ; expect . close ( ) ; } long IDENT_7 = METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { javax . management . IDENT_8 IDENT_9 = new javax . management . METHOD_6 ( STRING_3 ) ; javax . management . IDENT_10 server = java . lang . management . IDENT_11 . METHOD_7 ( ) ; try { return ( ( java . lang . Long ) ( server . METHOD_8 ( IDENT_9 , STRING_4 ) ) ) ; } catch ( javax . management . IDENT_12 IDENT_13 ) { org . junit . IDENT_14 . METHOD_9 ( STRING_5 , IDENT_13 ) ; throw IDENT_13 ; } }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 