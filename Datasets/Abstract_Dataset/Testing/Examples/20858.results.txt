METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { } ; org . apache . IDENT_1 . elasticsearch . dao . IDENT_2 dao = METHOD_1 ( IDENT_0 ) ; java . util . List < java . lang . String > args = java . util . Arrays . asList ( STRING_0 , STRING_1 ) ; java . lang . String [ ] actual = dao . METHOD_2 ( args ) ; java . lang . String [ ] expected = new java . lang . String [ ] { } ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . List ) { org . apache . IDENT_1 . elasticsearch . dao . IDENT_2 . LOG . debug ( STRING_2 , IDENT_3 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_4 = new java . util . HashMap ( ) ; java . lang . String [ ] IDENT_5 = IDENT_6 . METHOD_3 ( ) ; for ( java . lang . String index : IDENT_5 ) { int IDENT_7 = index . indexOf ( org . apache . IDENT_1 . elasticsearch . dao . IDENT_8 ) ; if ( IDENT_7 != ( - 1 ) ) { java . lang . String IDENT_9 = index . substring ( 0 , IDENT_7 ) ; if ( IDENT_3 . contains ( IDENT_9 ) ) { java . lang . String IDENT_10 = IDENT_4 . get ( IDENT_9 ) ; if ( ( IDENT_10 == null ) || ( ( index . compareTo ( IDENT_10 ) ) > 0 ) ) { IDENT_4 . put ( IDENT_9 , index ) ; } } } } return IDENT_4 . values ( ) . toArray ( new java . lang . String [ IDENT_4 . size ( ) ] ) ; }
org . junit . Assert . assertArrayEquals ( expected , actual ) 