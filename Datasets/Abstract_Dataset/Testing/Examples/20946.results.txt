METHOD_0 ( ) { org . apache . hadoop . conf . Configuration config = new org . apache . hadoop . conf . Configuration ( ) ; java . lang . String query = "" ; new org . apache . IDENT_0 . IDENT_1 . filter . query . IDENT_2 . METHOD_1 ( ) . METHOD_2 ( query , config ) ; { org . apache . IDENT_0 . IDENT_1 . filter . IDENT_3 filter = new org . apache . IDENT_0 . IDENT_1 . filter . query . METHOD_3 ( ) { @ org . apache . IDENT_0 . IDENT_1 . filter . query . Override MOD_0 java . util . HashMap < java . lang . String , java . lang . Object > METHOD_4 ( org . apache . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 ) { return new java . util . HashMap < java . lang . String , java . lang . Object > ( ) { { put ( Constants . IDENT_6 . IDENT_7 . getName ( ) , STRING_0 ) ; put ( Constants . IDENT_6 . IDENT_8 . getName ( ) , 0 ) ; put ( Constants . IDENT_6 . IDENT_9 . getName ( ) , STRING_1 ) ; put ( Constants . IDENT_6 . IDENT_10 . getName ( ) , 1 ) ; } } ; } } ; filter . METHOD_5 ( config ) ; "<AssertPlaceHolder>" ; } } test ( org . apache . IDENT_0 . IDENT_1 . IDENT_4 ) { java . util . Map < java . lang . String , java . lang . Object > fields = METHOD_4 ( IDENT_5 ) ; org . apache . IDENT_0 . IDENT_11 . IDENT_12 . IDENT_13 resolver = new org . apache . IDENT_0 . IDENT_11 . IDENT_12 . METHOD_6 ( fields ) ; java . lang . String IDENT_14 = ( ( java . lang . String ) ( resolver . resolve ( Constants . IDENT_6 . IDENT_7 . getName ( ) ) ) ) ; java . lang . Integer IDENT_15 = ( ( java . lang . Integer ) ( resolver . resolve ( Constants . IDENT_6 . IDENT_8 . getName ( ) ) ) ) ; java . lang . String IDENT_16 = ( ( java . lang . String ) ( resolver . resolve ( Constants . IDENT_6 . IDENT_9 . getName ( ) ) ) ) ; java . lang . Integer IDENT_17 = ( ( java . lang . Integer ) ( resolver . resolve ( Constants . IDENT_6 . IDENT_10 . getName ( ) ) ) ) ; java . lang . String IDENT_18 = "" + ( resolver . resolve ( Constants . IDENT_6 . IDENT_19 . getName ( ) ) ) ; if ( ( ! ( IDENT_20 ) ) || ( METHOD_7 ( IDENT_14 , IDENT_15 , IDENT_16 , IDENT_17 , IDENT_18 ) ) ) { if ( ( IDENT_21 ) != null ) { byte [ ] data = ( ( byte [ ] ) ( resolver . resolve ( IDENT_22 . IDENT_23 . IDENT_24 . getName ( ) ) ) ) ; try { return IDENT_25 . INSTANCE . match ( IDENT_21 , data ) ; } catch ( java . util . concurrent . IDENT_26 e ) { throw new java . lang . IllegalStateException ( ( ( ( STRING_2 + ( IDENT_21 ) ) + STRING_3 ) + ( javax . xml . IDENT_27 . IDENT_28 . METHOD_8 ( data ) ) ) , e ) ; } } else if ( ! ( IDENT_20 ) ) { return true ; } else { return true ; } } else { return false ; } }
org . junit . Assert . assertTrue ( filter . test ( null ) ) 