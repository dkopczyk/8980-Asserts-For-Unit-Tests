METHOD_0 ( ) { executor . METHOD_1 ( STRING_0 , "2" , message ) ; executor . METHOD_1 ( STRING_1 , STRING_2 , message ) ; executor . METHOD_1 ( STRING_3 , STRING_4 , message ) ; java . lang . Object IDENT_0 = executor . METHOD_2 ( ) . get ( STRING_3 ) ; "<AssertPlaceHolder>" ; } get ( org . apache . hadoop . hbase . client . IDENT_1 ) { if ( ! ( data . containsKey ( get . METHOD_3 ( ) ) ) ) return new org . apache . hadoop . hbase . client . Result ( ) ; byte [ ] row = get . METHOD_3 ( ) ; java . util . List < org . apache . hadoop . hbase . IDENT_2 > IDENT_3 = new java . util . ArrayList < org . apache . hadoop . hbase . IDENT_2 > ( ) ; if ( ! ( get . METHOD_4 ( ) ) ) { IDENT_3 = org . apache . IDENT_4 . hbase . mock . IDENT_5 . METHOD_5 ( row , data . get ( row ) , get . METHOD_6 ( ) ) ; } else { for ( byte [ ] IDENT_6 : get . METHOD_7 ( ) . METHOD_8 ( ) ) { if ( ( data . get ( row ) . get ( IDENT_6 ) ) == null ) continue ; java . util . IDENT_7 < byte [ ] > IDENT_8 = get . METHOD_7 ( ) . get ( IDENT_6 ) ; if ( ( IDENT_8 == null ) || ( IDENT_8 . isEmpty ( ) ) ) IDENT_8 = data . get ( row ) . get ( IDENT_6 ) . METHOD_9 ( ) ; for ( byte [ ] IDENT_9 : IDENT_8 ) { if ( IDENT_9 == null ) IDENT_9 = "" . getBytes ( ) ; if ( ( ( ! ( data . get ( row ) . containsKey ( IDENT_6 ) ) ) || ( ! ( data . get ( row ) . get ( IDENT_6 ) . containsKey ( IDENT_9 ) ) ) ) || ( data . get ( row ) . get ( IDENT_6 ) . get ( IDENT_9 ) . isEmpty ( ) ) ) continue ; Map . Entry < java . lang . Long , byte [ ] > IDENT_10 = data . get ( row ) . get ( IDENT_6 ) . get ( IDENT_9 ) . METHOD_10 ( ) ; IDENT_3 . add ( new org . apache . hadoop . hbase . METHOD_11 ( row , IDENT_6 , IDENT_9 , IDENT_10 . getKey ( ) , IDENT_10 . getValue ( ) ) ) ; } } } org . apache . hadoop . hbase . filter . IDENT_11 filter = get . METHOD_12 ( ) ; if ( filter != null ) { filter . METHOD_13 ( ) ; java . util . List < org . apache . hadoop . hbase . METHOD_11 > IDENT_12 = new java . util . ArrayList < org . apache . hadoop . hbase . METHOD_11 > ( IDENT_3 . size ( ) ) ; for ( org . apache . hadoop . hbase . METHOD_11 IDENT_13 : IDENT_3 ) { if ( filter . METHOD_14 ( ) ) { break ; } if ( filter . METHOD_15 ( IDENT_13 . METHOD_16 ( ) , IDENT_13 . METHOD_17 ( ) , IDENT_13 . METHOD_18 ( ) ) ) { continue ; } if ( ( filter . METHOD_19 ( IDENT_13 ) ) == ( IDENT_11 . IDENT_14 . IDENT_15 ) ) { IDENT_12 . add ( IDENT_13 ) ; } } if ( filter . METHOD_20 ( ) ) { filter . METHOD_21 ( ) ; } IDENT_3 = IDENT_12 ; } return new org . apache . hadoop . hbase . client . Result ( IDENT_3 ) ; }
org . junit . Assert . assertEquals ( 6 , IDENT_0 ) 