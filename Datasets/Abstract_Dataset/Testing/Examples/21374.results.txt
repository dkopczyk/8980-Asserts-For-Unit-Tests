METHOD_0 ( ) { final byte [ ] data = new byte [ INT_0 + 8 ] ; for ( int i = 0 ; i < INT_0 ; i ++ ) { data [ i ] = STRING_0 ; } java . nio . file . IDENT_0 . write ( IDENT_1 . METHOD_1 ( ) , data , IDENT_2 . IDENT_3 , IDENT_2 . IDENT_4 ) ; final int IDENT_5 = org . apache . nifi . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_2 ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . File ) { final java . io . IDENT_10 IDENT_11 = new java . io . METHOD_3 ( IDENT_12 , STRING_1 ) ; long IDENT_13 = ( IDENT_12 . length ( ) ) - INT_0 ; int count = 0 ; boolean IDENT_14 = false ; while ( ! IDENT_14 ) { int IDENT_15 = INT_0 ; if ( IDENT_13 < 0 ) { IDENT_15 = ( ( int ) ( IDENT_13 + INT_0 ) ) ; IDENT_13 = 0 ; IDENT_14 = true ; } IDENT_11 . METHOD_4 ( IDENT_13 ) ; final byte [ ] buffer = new byte [ IDENT_15 ] ; final int read = org . apache . nifi . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_5 ( IDENT_11 , buffer ) ; for ( int i = read - 1 ; i >= 0 ; i OP_0 ) { final byte b = buffer [ i ] ; if ( b == 0 ) { count ++ ; } else { return count ; } } IDENT_13 OP_1 INT_0 ; } return count ; }
org . junit . Assert . assertEquals ( 8 , IDENT_5 ) 