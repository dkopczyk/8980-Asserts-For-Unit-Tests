METHOD_0 ( ) { parser = new org . apache . olingo . odata2 . jpa . processor . core . METHOD_1 ( mock ( STRING_0 ) ) ; try { parser . METHOD_2 ( org . apache . olingo . odata2 . jpa . processor . core . mock . data . IDENT_0 . METHOD_3 ( IDENT_1 . IDENT_2 , false ) , METHOD_4 ( 2 ) , STRING_1 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_3 e ) { "<AssertPlaceHolder>" ; } catch ( org . apache . olingo . odata2 . api . IDENT_4 . IDENT_5 e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_6 . IDENT_7 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_6 . IDENT_8 ) ) ) ; } } METHOD_4 ( int ) { java . lang . String uri = null ; java . io . InputStream is = null ; switch ( IDENT_9 ) { case 0 : uri = ( STRING_3 + ( org . apache . olingo . odata2 . jpa . processor . core . mock . IDENT_10 . IDENT_11 ) ) + STRING_4 ; break ; case 1 : uri = STRING_5 ; break ; case 2 : uri = ( STRING_3 + ( org . apache . olingo . odata2 . jpa . processor . core . mock . IDENT_10 . IDENT_11 ) ) + STRING_6 ; } try { is = new java . io . ByteArrayInputStream ( uri . getBytes ( STRING_7 ) ) ; } catch ( java . io . IDENT_12 e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_6 . IDENT_7 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_6 . IDENT_8 ) ) ) ; } return is ; }
org . junit . Assert . assertEquals ( true , true ) 