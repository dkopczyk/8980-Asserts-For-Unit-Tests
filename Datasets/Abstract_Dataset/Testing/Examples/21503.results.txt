METHOD_0 ( ) { char [ ] IDENT_0 = new char [ ] { STRING_0 , STRING_1 , STRING_2 } ; try { java . sql . IDENT_1 IDENT_2 = new javax . sql . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_0 ) ; java . lang . String IDENT_5 = org . apache . olingo . odata2 . jpa . processor . core . IDENT_6 . data . IDENT_7 . getString ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } catch ( javax . sql . IDENT_3 . IDENT_4 . IDENT_8 e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_10 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_11 ) ) ) ; } catch ( java . sql . IDENT_12 e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_10 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_11 ) ) ) ; } catch ( org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_13 e ) { org . junit . Assert . fail ( ( ( ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_10 ) + ( e . getMessage ( ) ) ) + ( org . apache . olingo . odata2 . jpa . processor . core . common . IDENT_9 . IDENT_11 ) ) ) ; } } getString ( java . sql . IDENT_1 ) { java . io . IDENT_14 IDENT_15 = null ; try { if ( IDENT_2 == null ) { return null ; } IDENT_15 = IDENT_2 . METHOD_2 ( ) ; java . io . StringWriter buffer = null ; long IDENT_16 = IDENT_2 . length ( ) ; long IDENT_17 = IDENT_16 ; int len = 0 ; int IDENT_18 = 0 ; boolean IDENT_19 = false ; if ( IDENT_16 > ( Integer . MAX_VALUE ) ) { buffer = new java . io . StringWriter ( Integer . MAX_VALUE ) ; len = Integer . MAX_VALUE ; IDENT_19 = true ; } else { buffer = new java . io . StringWriter ( ( ( int ) ( IDENT_16 ) ) ) ; len = ( ( int ) ( IDENT_16 ) ) ; } char [ ] c = new char [ len ] ; while ( IDENT_17 > len ) { IDENT_15 . read ( c , IDENT_18 , len ) ; buffer . write ( c ) ; IDENT_18 = len + 1 ; IDENT_17 = IDENT_17 - ( Integer . MAX_VALUE ) ; if ( IDENT_17 > ( Integer . MAX_VALUE ) ) { len = Integer . MAX_VALUE ; } else { len = ( ( int ) ( IDENT_17 ) ) ; } } if ( IDENT_17 <= len ) { IDENT_15 . read ( c , IDENT_18 , len ) ; } if ( IDENT_19 ) { return buffer . toString ( ) ; } else { return new java . lang . String ( c ) ; } } catch ( java . sql . IDENT_12 e ) { throw org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_13 . METHOD_3 ( IDENT_13 . IDENT_20 , e ) ; } catch ( java . io . IOException e ) { throw org . apache . olingo . odata2 . jpa . processor . api . exception . IDENT_13 . METHOD_3 ( IDENT_13 . IDENT_20 , e ) ; } finally { if ( IDENT_15 != null ) { try { IDENT_15 . close ( ) ; } catch ( java . io . IOException e ) { } } } }
org . junit . Assert . assertEquals ( new java . lang . String ( IDENT_0 ) , IDENT_5 ) 