METHOD_0 ( ) { final java . lang . String actual = IDENT_0 . METHOD_1 ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_4 . IDENT_5 , IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_4 . IDENT_6 ) ; final java . lang . String expected = ( ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_4 . IDENT_7 ) + STRING_0 ) + ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_4 . IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { org . apache . commons . lang3 . IDENT_8 . METHOD_2 ( IDENT_9 ) ; org . apache . commons . lang3 . IDENT_8 . METHOD_2 ( IDENT_10 ) ; if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_10 ) ) { return IDENT_10 ; } if ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_12 . isValid ( IDENT_9 ) ) { if ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_12 . isValid ( IDENT_10 ) ) { return METHOD_3 ( IDENT_10 ) ; } if ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_12 . METHOD_4 ( IDENT_9 ) ) { return ( context . IDENT_13 ) + ( METHOD_5 ( IDENT_9 , IDENT_10 ) ) ; } final java . lang . String IDENT_14 = METHOD_6 ( context . IDENT_15 ) ; IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_16 . LOG . debug ( STRING_1 , IDENT_14 ) ; java . lang . String IDENT_17 = METHOD_5 ( ( IDENT_14 + IDENT_9 ) , IDENT_10 ) ; if ( IDENT_17 . startsWith ( IDENT_12 . IDENT_18 ) ) { IDENT_17 = METHOD_3 ( IDENT_17 ) ; } IDENT_1 . IDENT_2 . IDENT_3 . model . resource . processor . support . IDENT_16 . LOG . debug ( STRING_2 , IDENT_17 ) ; return IDENT_17 ; } if ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_19 . isValid ( IDENT_9 ) ) { final java . lang . String IDENT_20 = ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_12 . isValid ( IDENT_10 ) ) ? METHOD_7 ( IDENT_9 ) : IDENT_9 ; return METHOD_5 ( IDENT_20 , IDENT_10 ) ; } if ( IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_21 . isValid ( IDENT_9 ) ) { final java . lang . String IDENT_22 = ( context . IDENT_13 ) + ( METHOD_5 ( IDENT_9 , IDENT_10 ) ) ; final java . lang . String IDENT_23 = METHOD_3 ( IDENT_10 ) ; return IDENT_1 . IDENT_2 . IDENT_3 . model . resource . IDENT_11 . IDENT_12 . isValid ( IDENT_10 ) ? IDENT_23 : IDENT_22 ; } throw new IDENT_1 . IDENT_2 . IDENT_3 . METHOD_8 ( ( ( ( STRING_3 + IDENT_10 ) + STRING_4 ) + IDENT_9 ) ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 