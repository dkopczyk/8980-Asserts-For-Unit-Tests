METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = java . util . Arrays . asList ( IDENT_1 . tools . IDENT_2 . IDENT_3 . IDENT_4 , IDENT_1 . tools . IDENT_2 . IDENT_3 . IDENT_5 , IDENT_1 . tools . IDENT_2 . IDENT_3 . IDENT_6 , IDENT_1 . tools . IDENT_2 . IDENT_3 . IDENT_7 ) ; IDENT_1 . tools . util . IDENT_8 [ ] expected = new IDENT_1 . tools . util . IDENT_8 [ ] { new IDENT_1 . tools . util . METHOD_1 ( 0 , 3 , IDENT_1 . tools . IDENT_2 . IDENT_3 . IDENT_9 ) } ; IDENT_1 . tools . util . METHOD_1 [ ] actual = IDENT_1 . tools . IDENT_2 . IDENT_3 . codec . decode ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } decode ( java . util . List ) { int start = - 1 ; int end = - 1 ; java . util . List < IDENT_1 . tools . util . METHOD_1 > IDENT_10 = new java . util . ArrayList ( c . size ( ) ) ; for ( int IDENT_11 = 0 ; IDENT_11 < ( c . size ( ) ) ; IDENT_11 ++ ) { java . lang . String IDENT_12 = c . get ( IDENT_11 ) ; if ( IDENT_12 . METHOD_2 ( IDENT_1 . tools . IDENT_2 . IDENT_13 . IDENT_14 ) ) { if ( start != ( - 1 ) ) { IDENT_10 . add ( new IDENT_1 . tools . util . METHOD_1 ( start , end , IDENT_1 . tools . IDENT_2 . IDENT_13 . METHOD_3 ( c . get ( ( IDENT_11 - 1 ) ) ) ) ) ; } start = IDENT_11 ; end = IDENT_11 + 1 ; } else if ( IDENT_12 . METHOD_2 ( IDENT_1 . tools . IDENT_2 . IDENT_13 . IDENT_15 ) ) { end = IDENT_11 + 1 ; } else if ( IDENT_12 . METHOD_2 ( IDENT_1 . tools . IDENT_2 . IDENT_13 . IDENT_7 ) ) { if ( start != ( - 1 ) ) { IDENT_10 . add ( new IDENT_1 . tools . util . METHOD_1 ( start , end , IDENT_1 . tools . IDENT_2 . IDENT_13 . METHOD_3 ( c . get ( ( IDENT_11 - 1 ) ) ) ) ) ; start = - 1 ; end = - 1 ; } } } if ( start != ( - 1 ) ) { IDENT_10 . add ( new IDENT_1 . tools . util . METHOD_1 ( start , end , IDENT_1 . tools . IDENT_2 . IDENT_13 . METHOD_3 ( c . get ( ( ( c . size ( ) ) - 1 ) ) ) ) ) ; } return IDENT_10 . toArray ( new IDENT_1 . tools . util . METHOD_1 [ IDENT_10 . size ( ) ] ) ; }
org . junit . Assert . assertArrayEquals ( expected , actual ) 