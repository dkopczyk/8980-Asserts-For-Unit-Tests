METHOD_0 ( ) { org . apache . phoenix . util . IDENT_0 IDENT_1 = new org . apache . phoenix . util . METHOD_1 ( STRING_0 , java . sql . IDENT_2 . IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { java . util . List < java . lang . String > components = com . google . common . collect . Lists . newArrayList ( IDENT_4 . split ( STRING_1 , 2 ) ) ; if ( ( components . size ( ) ) != 2 ) { throw new java . lang . IllegalArgumentException ( ( STRING_2 + IDENT_4 ) ) ; } java . lang . String [ ] IDENT_5 = components . get ( 0 ) . split ( " " ) ; java . lang . String IDENT_6 = components . get ( 1 ) ; java . lang . Integer IDENT_7 = null ; java . lang . Integer IDENT_8 = null ; if ( IDENT_5 [ 0 ] . contains ( STRING_3 ) ) { java . util . regex . IDENT_9 matcher = java . util . regex . IDENT_10 . METHOD_3 ( STRING_4 ) . matcher ( IDENT_5 [ 0 ] ) ; if ( ( ! ( matcher . matches ( ) ) ) || ( ( matcher . METHOD_4 ( ) ) > 3 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_5 + ( IDENT_5 [ 0 ] ) ) ) ; } IDENT_7 = java . lang . Integer . valueOf ( matcher . group ( 2 ) ) ; if ( ( matcher . group ( 3 ) ) != null ) { IDENT_8 = java . lang . Integer . valueOf ( matcher . group ( 3 ) ) ; } IDENT_5 [ 0 ] = matcher . group ( 1 ) ; } org . apache . phoenix . util . IDENT_11 IDENT_12 ; if ( ( IDENT_5 . length ) < 2 ) { IDENT_12 = org . apache . phoenix . util . IDENT_11 . METHOD_5 ( IDENT_5 [ 0 ] ) ; } else { IDENT_12 = org . apache . phoenix . util . IDENT_11 . METHOD_5 ( ( ( ( IDENT_5 [ 0 ] ) + " " ) + ( IDENT_5 [ 1 ] ) ) ) ; } return org . apache . phoenix . util . METHOD_1 . create ( IDENT_6 , IDENT_12 . METHOD_6 ( ) , IDENT_7 , IDENT_8 ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , org . apache . phoenix . util . METHOD_1 . METHOD_2 ( IDENT_1 . toString ( ) ) ) 