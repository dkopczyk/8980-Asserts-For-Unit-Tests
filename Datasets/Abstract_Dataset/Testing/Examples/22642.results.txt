METHOD_0 ( ) { java . util . IDENT_0 < java . lang . String , java . lang . String > IDENT_1 = new java . util . METHOD_1 ( ) ; IDENT_1 . put ( STRING_0 , STRING_1 ) ; IDENT_1 . put ( STRING_2 , STRING_3 ) ; for ( java . lang . String IDENT_2 : IDENT_1 . METHOD_2 ( ) ) { java . io . File IDENT_3 = new java . io . File ( IDENT_1 . get ( IDENT_2 ) ) ; java . io . File IDENT_4 = org . apache . poi . IDENT_5 . IDENT_6 . internal . IDENT_7 . METHOD_3 ( new java . io . File ( IDENT_2 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_3 ( java . io . File ) { if ( f != null ) { java . lang . String path = f . getPath ( ) ; int IDENT_8 = path . length ( ) ; while ( ( OP_0 IDENT_8 ) >= 0 ) { char IDENT_9 = path . charAt ( IDENT_8 ) ; if ( IDENT_9 == ( java . io . File . IDENT_10 ) ) { return new java . io . File ( path . substring ( 0 , IDENT_8 ) ) ; } } } return null ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_4 ) 