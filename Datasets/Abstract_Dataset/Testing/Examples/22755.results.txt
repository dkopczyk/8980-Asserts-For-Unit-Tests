METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . io . ByteArrayOutputStream IDENT_1 = new java . io . ByteArrayOutputStream ( ) ; java . io . ByteArrayOutputStream expected = new java . io . ByteArrayOutputStream ( ) ; java . io . ByteArrayOutputStream actual = new java . io . ByteArrayOutputStream ( ) ; try { try ( org . apache . poi . IDENT_2 . IDENT_3 . IDENT_4 fs = new org . apache . poi . IDENT_2 . IDENT_3 . METHOD_1 ( org . apache . poi . IDENT_5 . record . IDENT_6 . IDENT_7 . METHOD_2 ( IDENT_0 ) , true ) ; org . apache . poi . IDENT_5 . IDENT_8 . IDENT_9 IDENT_10 = new org . apache . poi . IDENT_5 . IDENT_8 . METHOD_3 ( fs ) ) { IDENT_10 . METHOD_4 ( ) ; IDENT_10 . write ( expected ) ; org . apache . poi . IDENT_11 . record . crypto . IDENT_12 . METHOD_5 ( STRING_1 ) ; IDENT_10 . write ( IDENT_1 ) ; } java . io . ByteArrayInputStream IDENT_13 = new java . io . ByteArrayInputStream ( IDENT_1 . toByteArray ( ) ) ; try ( org . apache . poi . IDENT_2 . IDENT_3 . METHOD_1 fs = new org . apache . poi . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_13 ) ; org . apache . poi . IDENT_5 . IDENT_8 . METHOD_3 IDENT_10 = new org . apache . poi . IDENT_5 . IDENT_8 . METHOD_3 ( fs ) ) { org . apache . poi . IDENT_11 . record . crypto . IDENT_12 . METHOD_5 ( null ) ; IDENT_10 . write ( actual ) ; } } finally { org . apache . poi . IDENT_11 . record . crypto . IDENT_12 . METHOD_5 ( null ) ; } "<AssertPlaceHolder>" ; } toByteArray ( ) { byte [ ] result = new byte [ ( ( org . apache . poi . util . IDENT_14 . IDENT_15 ) * 2 ) + ( IDENT_16 . length ) ] ; org . apache . poi . util . IDENT_17 IDENT_18 = new org . apache . poi . util . METHOD_6 ( result , 0 ) ; try { IDENT_18 . METHOD_7 ( ( ( org . apache . poi . util . IDENT_14 . IDENT_15 ) + ( IDENT_16 . length ) ) ) ; IDENT_18 . METHOD_7 ( IDENT_19 ) ; IDENT_18 . write ( IDENT_16 ) ; return result ; } finally { org . apache . poi . util . IDENT_20 . METHOD_8 ( IDENT_18 ) ; } }
org . junit . Assert . assertArrayEquals ( expected . toByteArray ( ) , actual . toByteArray ( ) ) 