METHOD_0 ( ) { byte [ ] IDENT_0 = new byte [ IDENT_1 . length ] ; java . lang . System . METHOD_1 ( IDENT_1 , 0 , IDENT_0 , 0 , 12 ) ; java . lang . System . METHOD_1 ( IDENT_1 , ( 12 + 16 ) , IDENT_0 , ( 12 + 16 ) , ( ( ( IDENT_1 . length ) - 12 ) - 16 ) ) ; java . util . Date date = org . apache . poi . IDENT_2 . util . IDENT_3 . IDENT_4 . parse ( STRING_0 ) ; org . apache . poi . IDENT_2 . util . IDENT_5 . METHOD_2 ( date , IDENT_0 , 12 ) ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( java . util . Date , byte [ ] , int ) { java . util . Calendar IDENT_6 = org . apache . poi . util . IDENT_7 . METHOD_3 ( ) ; IDENT_6 . METHOD_4 ( date ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 0 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_10 ) ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 2 ) , ( ( short ) ( ( IDENT_6 . get ( Calendar . IDENT_11 ) ) + 1 ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 4 ) , ( ( short ) ( ( IDENT_6 . get ( Calendar . IDENT_12 ) ) - 1 ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 6 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_13 ) ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 8 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_14 ) ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 10 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_15 ) ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + 12 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_16 ) ) ) ) ; org . apache . poi . util . IDENT_8 . METHOD_5 ( IDENT_9 , ( offset + INT_0 ) , ( ( short ) ( IDENT_6 . get ( Calendar . IDENT_17 ) ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_1 [ i ] , IDENT_0 [ i ] ) 