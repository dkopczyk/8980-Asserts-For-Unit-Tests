METHOD_0 ( ) { org . apache . IDENT_0 . view . IDENT_1 IDENT_2 = new org . apache . IDENT_0 . view . METHOD_1 ( ) ; java . util . List < org . apache . IDENT_0 . entity . IDENT_3 > IDENT_4 = new java . util . ArrayList < org . apache . IDENT_0 . entity . IDENT_3 > ( ) ; org . apache . IDENT_0 . entity . IDENT_3 IDENT_5 = new org . apache . IDENT_0 . entity . METHOD_2 ( ) ; IDENT_5 . setId ( id ) ; IDENT_5 . setName ( IDENT_6 ) ; IDENT_5 . METHOD_3 ( IDENT_7 . IDENT_8 ) ; IDENT_5 . METHOD_4 ( IDENT_7 . IDENT_9 ) ; IDENT_4 . add ( IDENT_5 ) ; org . mockito . Mockito . when ( IDENT_10 . split ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( new java . lang . String [ 0 ] ) ; boolean IDENT_11 = IDENT_12 . METHOD_5 ( STRING_0 , IDENT_4 , IDENT_2 , id , IDENT_7 . IDENT_13 ) ; org . mockito . Mockito . verify ( IDENT_10 ) . split ( org . mockito . Mockito . anyString ( ) , org . mockito . Mockito . anyString ( ) ) ; "<AssertPlaceHolder>" ; } split ( java . lang . String , java . lang . String ) { if ( value != null ) { value = ( value . startsWith ( IDENT_14 ) ) ? value . substring ( 1 ) : value ; java . lang . String [ ] IDENT_15 = value . split ( IDENT_14 ) ; java . lang . String [ ] IDENT_16 = new java . lang . String [ IDENT_15 . length ] ; int c = - 1 ; for ( java . lang . String IDENT_17 : IDENT_15 ) { java . lang . String str = IDENT_17 . trim ( ) ; if ( ( str . length ( ) ) > 0 ) { c ++ ; IDENT_16 [ c ] = str ; } } return IDENT_16 ; } else { return new java . lang . String [ 0 ] ; } }
org . junit . Assert . assertFalse ( IDENT_11 ) 