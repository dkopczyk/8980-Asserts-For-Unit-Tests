METHOD_0 ( ) { IDENT_0 . METHOD_1 ( 100 ) ; org . apache . IDENT_1 . session . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = METHOD_2 ( org . apache . IDENT_1 . session . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; IDENT_0 . METHOD_3 ( IDENT_5 ) ; java . lang . String IDENT_6 = java . util . UUID . METHOD_4 ( ) . toString ( ) ; final org . apache . IDENT_1 . session . IDENT_2 . IDENT_7 IDENT_8 = new org . apache . IDENT_1 . session . IDENT_2 . METHOD_5 ( ) ; IDENT_8 . setId ( IDENT_6 ) ; final org . apache . IDENT_1 . session . IDENT_9 [ ] IDENT_10 = new org . apache . IDENT_1 . session . IDENT_2 . METHOD_5 [ ] { IDENT_8 } ; IDENT_0 . METHOD_6 ( new org . apache . IDENT_1 . session . IDENT_2 . METHOD_7 ( ) { public org . apache . IDENT_1 . session . IDENT_9 METHOD_8 ( org . apache . IDENT_1 . session . IDENT_2 . IDENT_11 IDENT_12 ) { return IDENT_10 [ 0 ] ; } } ) ; expect ( IDENT_5 . create ( eq ( IDENT_8 ) ) ) . andReturn ( IDENT_6 ) ; IDENT_5 . update ( eq ( IDENT_8 ) ) ; METHOD_9 ( ) . METHOD_10 ( ) ; replay ( IDENT_5 ) ; org . apache . IDENT_1 . session . IDENT_9 session = IDENT_0 . start ( null ) ; "<AssertPlaceHolder>" ; verify ( IDENT_5 ) ; METHOD_11 ( IDENT_5 ) ; expect ( IDENT_5 . METHOD_12 ( IDENT_6 ) ) . andReturn ( IDENT_8 ) . METHOD_10 ( ) ; IDENT_5 . update ( eq ( IDENT_8 ) ) ; replay ( IDENT_5 ) ; IDENT_0 . METHOD_13 ( new org . apache . IDENT_1 . session . IDENT_2 . METHOD_14 ( IDENT_6 ) , 1 ) ; verify ( IDENT_5 ) ; METHOD_11 ( IDENT_5 ) ; sleep ( 20 ) ; expect ( IDENT_5 . METHOD_12 ( IDENT_6 ) ) . andReturn ( IDENT_8 ) ; IDENT_5 . update ( eq ( IDENT_8 ) ) ; IDENT_5 . delete ( IDENT_8 ) ; replay ( IDENT_5 ) ; try { IDENT_0 . METHOD_15 ( new org . apache . IDENT_1 . session . IDENT_2 . METHOD_14 ( IDENT_6 ) ) ; org . junit . Assert . fail ( ( ( STRING_0 + IDENT_6 ) + STRING_1 ) ) ; } catch ( org . apache . IDENT_1 . session . IDENT_13 expected ) { } verify ( IDENT_5 ) ; } start ( org . apache . IDENT_1 . session . IDENT_2 . IDENT_11 ) { return METHOD_8 ( context ) ; }
org . junit . Assert . assertNotNull ( session ) 