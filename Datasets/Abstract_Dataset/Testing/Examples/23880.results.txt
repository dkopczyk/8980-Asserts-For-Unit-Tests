METHOD_0 ( ) { final org . apache . IDENT_0 . feature . IDENT_1 feature = org . apache . IDENT_0 . feature . IDENT_2 . METHOD_1 ( ) . newInstance ( ) ; try { org . apache . IDENT_0 . feature . IDENT_3 . validate ( feature ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . IllegalArgumentException ex ) { java . lang . String message = ex . getMessage ( ) ; "<AssertPlaceHolder>" ; } feature . METHOD_2 ( STRING_1 , STRING_2 ) ; feature . METHOD_2 ( STRING_3 , 10 ) ; org . apache . IDENT_0 . feature . IDENT_3 . validate ( feature ) ; } contains ( org . apache . IDENT_0 . IDENT_4 . IDENT_5 ) { return ( ( METHOD_3 ( range . IDENT_6 , ( range . IDENT_7 ? 0 : - 1 ) ) ) <= 0 ) && ( ( METHOD_4 ( range . IDENT_8 , ( range . IDENT_9 ? 0 : + 1 ) ) ) >= 0 ) ; }
org . junit . Assert . assertTrue ( message , ( ( message . contains ( STRING_1 ) ) || ( message . contains ( STRING_3 ) ) ) ) 