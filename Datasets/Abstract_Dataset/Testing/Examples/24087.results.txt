METHOD_0 ( ) { org . apache . kafka . IDENT_0 . consumer . IDENT_1 < java . lang . String , java . lang . String > IDENT_2 = mock ( org . apache . kafka . IDENT_0 . consumer . IDENT_1 . class ) ; org . apache . kafka . common . IDENT_3 IDENT_4 = new org . apache . kafka . common . METHOD_1 ( "test" , 0 ) ; org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = mock ( org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_7 . IDENT_8 . class ) ; when ( IDENT_9 . METHOD_2 ( any ( ) ) ) . thenReturn ( java . util . Collections . METHOD_3 ( IDENT_4 ) ) ; org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_10 . IDENT_11 < java . lang . String , java . lang . String > IDENT_12 = org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_10 . config . builder . IDENT_13 . METHOD_4 ( IDENT_9 , mock ( org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_7 . IDENT_14 . class ) , ( - 1 ) ) . build ( ) ; org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_10 . IDENT_15 < java . lang . String , java . lang . String > IDENT_16 = new org . apache . IDENT_5 . kafka . IDENT_6 . IDENT_10 . METHOD_5 ( IDENT_12 , ( IDENT_17 ) -> IDENT_2 ) ; java . util . List < java . util . Map < java . lang . String , java . lang . Object > > IDENT_18 = IDENT_16 . METHOD_6 ( ) ; java . util . List < org . apache . kafka . common . METHOD_1 > IDENT_19 = METHOD_7 ( IDENT_18 ) ; verify ( IDENT_9 ) . METHOD_2 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } contains ( java . lang . Integer ) { return IDENT_20 . containsKey ( IDENT_21 ) ; }
org . junit . Assert . assertThat ( IDENT_19 , org . hamcrest . Matchers . contains ( IDENT_4 ) ) 