METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 } ; for ( java . lang . String s : IDENT_0 ) { java . lang . String input = s . replace ( " " , "" ) ; net . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . decode ( net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_1 ( input ) , net . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . class ) ; byte [ ] IDENT_9 = net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . encode ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( byte [ ] ) { char [ ] IDENT_10 = new char [ ( bytes . length ) * 2 ] ; for ( int j = 0 ; j < ( bytes . length ) ; j ++ ) { int v = ( bytes [ j ] ) & 255 ; IDENT_10 [ ( j * 2 ) ] = net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_11 [ ( v > > > 4 ) ] ; IDENT_10 [ ( ( j * 2 ) + 1 ) ] = net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_11 [ ( v & 15 ) ] ; } return new java . lang . String ( IDENT_10 ) ; }
org . junit . Assert . assertEquals ( net . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_2 ( IDENT_9 ) , input ) 