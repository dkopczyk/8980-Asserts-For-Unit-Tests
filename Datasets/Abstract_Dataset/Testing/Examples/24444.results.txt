METHOD_0 ( ) { int length = ( ( int ) ( METHOD_1 ( STRING_0 ) . length ( ) ) ) ; java . util . IDENT_0 r = new java . util . METHOD_2 ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { int IDENT_1 = r . METHOD_3 ( length ) ; java . io . InputStream is = METHOD_4 ( STRING_1 , IDENT_1 ) ; java . io . ByteArrayOutputStream IDENT_2 = new java . io . ByteArrayOutputStream ( ) ; org . apache . IDENT_3 . io . IDENT_4 . METHOD_5 ( is , IDENT_2 ) ; "<AssertPlaceHolder>" ; } try { java . io . InputStream is = METHOD_4 ( STRING_1 , ( length + 1 ) ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . io . IDENT_5 e ) { } } METHOD_5 ( java . io . InputStream , java . io . IDENT_6 ) { long count = org . apache . IDENT_3 . io . IDENT_4 . METHOD_6 ( input , output ) ; if ( count > ( Integer . MAX_VALUE ) ) { return - 1 ; } return ( ( int ) ( count ) ) ; }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_2 . toByteArray ( ) . length ) 