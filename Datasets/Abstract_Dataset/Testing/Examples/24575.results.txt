METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . Element e = mock ( org . apache . tinkerpop . IDENT_0 . IDENT_1 . Element . class ) ; when ( e . id ( ) ) . thenReturn ( INT_0 ) ; "<AssertPlaceHolder>" ; } apply ( org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . IDENT_3 ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_4 graph = IDENT_2 . METHOD_1 ( ) . METHOD_2 ( org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . empty . IDENT_5 . instance ( ) ) ; for ( final org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . IDENT_2 . IDENT_7 . map . IDENT_8 IDENT_7 : org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . util . IDENT_9 . METHOD_3 ( org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . IDENT_2 . IDENT_7 . map . IDENT_8 . class , IDENT_2 ) ) { final org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . IDENT_10 . IDENT_11 < ? , ? > IDENT_12 = IDENT_7 . METHOD_4 ( graph , org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . util . IDENT_13 . instance ( ) ) . METHOD_5 ( ) . get ( ) . METHOD_6 ( ) ; if ( ! ( IDENT_12 . METHOD_7 ( ) ) ) IDENT_12 . METHOD_8 ( ) ; boolean IDENT_14 = org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . util . IDENT_9 . METHOD_9 ( IDENT_15 . IDENT_16 , org . apache . tinkerpop . IDENT_0 . spark . process . IDENT_6 . IDENT_2 . strategy . IDENT_17 . IDENT_18 . IDENT_19 , IDENT_12 ) ; if ( ! IDENT_14 ) { for ( final org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . IDENT_7 . map . IDENT_20 IDENT_21 : org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . util . IDENT_9 . METHOD_10 ( IDENT_15 . IDENT_16 , org . apache . tinkerpop . IDENT_0 . process . IDENT_2 . IDENT_7 . map . IDENT_20 . class , IDENT_12 ) ) { if ( ( IDENT_21 . METHOD_11 ( ) ) || ( ! ( IDENT_21 . METHOD_12 ( ) . equals ( IDENT_22 . IDENT_23 ) ) ) ) { IDENT_14 = true ; break ; } } } if ( ( ( ! IDENT_14 ) && ( ! ( org . apache . tinkerpop . IDENT_0 . process . IDENT_6 . IDENT_2 . strategy . IDENT_17 . IDENT_24 . METHOD_13 ( IDENT_12 . METHOD_14 ( ) ) ) ) ) && ( ! ( ( IDENT_12 . METHOD_15 ( ) . contains ( IDENT_25 . IDENT_26 ) ) || ( IDENT_12 . METHOD_15 ( ) . contains ( IDENT_25 . IDENT_27 ) ) ) ) ) { IDENT_7 . METHOD_16 ( IDENT_7 . METHOD_17 ( ) . METHOD_18 ( Constants . IDENT_28 , true ) . METHOD_18 ( Constants . IDENT_29 , true ) ) ; } } }
org . junit . Assert . assertEquals ( INT_0 , T . id . apply ( e ) ) 