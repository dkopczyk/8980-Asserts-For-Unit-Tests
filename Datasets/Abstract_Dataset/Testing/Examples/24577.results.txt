METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 e = mock ( org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; when ( e . value ( ) ) . thenReturn ( STRING_0 ) ; "<AssertPlaceHolder>" ; } apply ( org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . IDENT_4 ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_5 graph = IDENT_3 . METHOD_1 ( ) . METHOD_2 ( org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . empty . IDENT_6 . instance ( ) ) ; for ( final org . apache . tinkerpop . IDENT_0 . process . IDENT_7 . IDENT_3 . IDENT_8 . map . IDENT_9 IDENT_8 : org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . util . IDENT_10 . METHOD_3 ( org . apache . tinkerpop . IDENT_0 . process . IDENT_7 . IDENT_3 . IDENT_8 . map . IDENT_9 . class , IDENT_3 ) ) { final org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . IDENT_11 . IDENT_12 < ? , ? > IDENT_13 = IDENT_8 . METHOD_4 ( graph , org . apache . tinkerpop . IDENT_0 . process . IDENT_7 . util . IDENT_14 . instance ( ) ) . METHOD_5 ( ) . get ( ) . METHOD_6 ( ) ; if ( ! ( IDENT_13 . METHOD_7 ( ) ) ) IDENT_13 . METHOD_8 ( ) ; boolean IDENT_15 = org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . util . IDENT_10 . METHOD_9 ( IDENT_16 . IDENT_17 , org . apache . tinkerpop . IDENT_0 . spark . process . IDENT_7 . IDENT_3 . strategy . IDENT_18 . IDENT_19 . IDENT_20 , IDENT_13 ) ; if ( ! IDENT_15 ) { for ( final org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . IDENT_8 . map . IDENT_21 IDENT_22 : org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . util . IDENT_10 . METHOD_10 ( IDENT_16 . IDENT_17 , org . apache . tinkerpop . IDENT_0 . process . IDENT_3 . IDENT_8 . map . IDENT_21 . class , IDENT_13 ) ) { if ( ( IDENT_22 . METHOD_11 ( ) ) || ( ! ( IDENT_22 . METHOD_12 ( ) . equals ( IDENT_23 . IDENT_24 ) ) ) ) { IDENT_15 = true ; break ; } } } if ( ( ( ! IDENT_15 ) && ( ! ( org . apache . tinkerpop . IDENT_0 . process . IDENT_7 . IDENT_3 . strategy . IDENT_18 . IDENT_25 . METHOD_13 ( IDENT_13 . METHOD_14 ( ) ) ) ) ) && ( ! ( ( IDENT_13 . METHOD_15 ( ) . contains ( IDENT_26 . IDENT_27 ) ) || ( IDENT_13 . METHOD_15 ( ) . contains ( IDENT_26 . IDENT_28 ) ) ) ) ) { IDENT_8 . METHOD_16 ( IDENT_8 . METHOD_17 ( ) . METHOD_18 ( Constants . IDENT_29 , true ) . METHOD_18 ( Constants . IDENT_30 , true ) ) ; } } }
org . junit . Assert . assertEquals ( STRING_0 , T . value . apply ( e ) ) 