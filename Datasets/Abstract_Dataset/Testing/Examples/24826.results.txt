METHOD_0 ( ) { final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 IDENT_0 = g . METHOD_1 ( METHOD_2 ( STRING_0 ) ) . next ( ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 IDENT_5 = org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 . of ( IDENT_0 ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 . IDENT_6 IDENT_7 = IDENT_5 . METHOD_3 ( ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 IDENT_8 = g . METHOD_1 ( METHOD_2 ( STRING_1 ) ) . next ( ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 IDENT_9 = org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 . of ( IDENT_8 ) ; final org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 . IDENT_10 IDENT_11 = ( ( org . apache . tinkerpop . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 . IDENT_10 ) ( org . apache . tinkerpop . IDENT_0 . util . iterator . IDENT_12 . filter ( IDENT_9 . METHOD_3 ( ) . METHOD_4 ( IDENT_13 . IDENT_14 , STRING_2 ) , ( x ) -> x . METHOD_5 ( ) . id ( ) . equals ( METHOD_2 ( STRING_0 ) ) ) . next ( ) . METHOD_5 ( ) ) ) ; final java . util . Set < org . apache . tinkerpop . IDENT_0 . IDENT_1 . IDENT_2 > set = new java . util . HashSet ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { set . add ( IDENT_0 ) ; set . add ( IDENT_7 ) ; set . add ( IDENT_11 ) ; } "<AssertPlaceHolder>" ; } size ( ) { if ( ( error . get ( ) ) != null ) throw new java . lang . RuntimeException ( error . get ( ) ) ; return this . IDENT_15 . size ( ) ; }
org . junit . Assert . assertEquals ( 1 , set . size ( ) ) 