METHOD_0 ( ) { java . lang . String content = METHOD_1 ( IDENT_0 , IDENT_1 ) ; org . json . JSONObject json = METHOD_2 ( Collections . IDENT_2 , content ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 , times ( 1 ) ) . METHOD_3 ( IDENT_1 , IDENT_0 ) ; } METHOD_1 ( java . util . List , java . util . List ) { java . lang . StringBuilder builder = new java . lang . StringBuilder ( 255 ) ; builder . append ( STRING_0 ) ; if ( IDENT_4 != null ) { builder . append ( STRING_1 ) ; boolean IDENT_5 = true ; for ( org . IDENT_6 . service . IDENT_7 . repository . IDENT_8 IDENT_9 : IDENT_4 ) { if ( ! IDENT_5 ) { builder . append ( STRING_2 ) ; } else { IDENT_5 = false ; } builder . append ( ( ( STRING_3 + ( IDENT_9 . toString ( ) ) ) + STRING_3 ) ) ; } builder . append ( "]" ) ; } if ( ( IDENT_4 != null ) && ( IDENT_1 != null ) ) { builder . append ( STRING_2 ) ; } if ( IDENT_1 != null ) { builder . append ( STRING_4 ) ; boolean IDENT_5 = true ; for ( org . IDENT_6 . service . IDENT_7 . repository . IDENT_8 IDENT_10 : IDENT_1 ) { if ( ! IDENT_5 ) { builder . append ( STRING_2 ) ; } else { IDENT_5 = false ; } builder . append ( ( ( STRING_3 + ( IDENT_10 . toString ( ) ) ) + STRING_3 ) ) ; } builder . append ( "]" ) ; } builder . append ( STRING_5 ) ; return builder . toString ( ) ; }
org . junit . Assert . assertNotNull ( json ) 