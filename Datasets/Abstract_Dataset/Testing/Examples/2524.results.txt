METHOD_0 ( ) { org . IDENT_0 . service . IDENT_1 . repository . IDENT_2 IDENT_3 = METHOD_1 ( STRING_0 ) ; java . lang . String IDENT_4 = org . IDENT_0 . module . IDENT_5 . test . util . IDENT_6 . METHOD_2 ( ) ; when ( IDENT_7 . METHOD_3 ( ) ) . thenReturn ( asList ( IDENT_8 ) ) ; when ( IDENT_8 . process ( IDENT_3 , IDENT_4 ) ) . thenReturn ( IDENT_9 . IDENT_10 ) ; org . IDENT_0 . service . IDENT_1 . security . IDENT_9 result = IDENT_11 . METHOD_4 ( IDENT_3 , IDENT_4 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_8 ) . process ( IDENT_3 , IDENT_4 ) ; verify ( IDENT_11 ) . METHOD_5 ( IDENT_3 , IDENT_4 ) ; } METHOD_4 ( org . IDENT_0 . service . IDENT_1 . repository . IDENT_2 , java . lang . String ) { org . IDENT_0 . service . IDENT_1 . security . IDENT_9 result = org . IDENT_0 . service . IDENT_1 . security . IDENT_9 . IDENT_10 ; java . util . List < org . IDENT_0 . repo . security . IDENT_12 . processor . IDENT_13 > IDENT_14 = IDENT_15 . METHOD_3 ( ) ; for ( org . IDENT_0 . repo . security . IDENT_12 . processor . IDENT_13 IDENT_16 : IDENT_14 ) { result = IDENT_16 . process ( IDENT_3 , IDENT_4 ) ; if ( IDENT_9 . IDENT_17 . equals ( result ) ) { return result ; } } result = METHOD_5 ( IDENT_3 , IDENT_4 ) ; java . util . List < org . IDENT_0 . repo . security . IDENT_12 . processor . IDENT_18 > IDENT_19 = IDENT_15 . METHOD_6 ( ) ; for ( org . IDENT_0 . repo . security . IDENT_12 . processor . IDENT_18 IDENT_20 : IDENT_19 ) { result = IDENT_20 . process ( result , IDENT_3 , IDENT_4 ) ; } return result ; }
org . junit . Assert . assertEquals ( IDENT_9 . IDENT_10 , result ) 