METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String api = STRING_1 ; org . apache . IDENT_1 . query . validator . IDENT_2 request = new org . apache . IDENT_1 . query . validator . METHOD_1 ( ) ; request . METHOD_2 ( IDENT_0 ) ; request . METHOD_3 ( ) . METHOD_4 ( api ) ; org . apache . IDENT_1 . query . validator . IDENT_3 response = validator . execute ( request , new org . apache . IDENT_1 . query . validator . METHOD_5 ( ) { @ org . apache . IDENT_1 . query . validator . IDENT_4 . Override public boolean equals ( java . util . List < org . apache . IDENT_1 . persistence . Entity > IDENT_5 , java . util . List < org . apache . IDENT_1 . persistence . Entity > IDENT_6 ) { boolean equals = ( IDENT_5 . size ( ) ) == ( IDENT_5 . size ( ) ) ; if ( ! equals ) return false ; for ( org . apache . IDENT_1 . persistence . Entity entity : IDENT_6 ) { int IDENT_7 = ( ( java . lang . Integer ) ( entity . getProperty ( STRING_2 ) ) ) ; if ( ( IDENT_7 < 16 ) == false ) { return false ; } } return equals ; } } ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( ( IDENT_8 ) != null ) { sb . append ( "/" ) ; sb . append ( IDENT_8 ) ; } for ( int i = 0 ; i < ( parameters . size ( ) ) ; i ++ ) { org . apache . IDENT_1 . services . IDENT_9 p = parameters . get ( i ) ; if ( p instanceof org . apache . IDENT_1 . services . IDENT_9 . IDENT_10 ) { if ( i == ( ( parameters . size ( ) ) - 1 ) ) { sb . append ( STRING_3 ) ; } else { sb . append ( STRING_4 ) ; } boolean IDENT_11 = false ; java . lang . String q = p . toString ( ) ; if ( METHOD_6 ( q ) ) { try { sb . append ( STRING_5 ) . append ( java . net . IDENT_12 . encode ( q , STRING_6 ) ) ; } catch ( java . io . IDENT_13 e ) { org . apache . IDENT_1 . services . IDENT_14 . logger . error ( STRING_7 , e ) ; } IDENT_11 = true ; } int IDENT_15 = p . METHOD_7 ( ) . METHOD_8 ( ) ; if ( IDENT_15 != ( org . apache . IDENT_1 . persistence . Query . IDENT_16 ) ) { if ( IDENT_11 ) { sb . append ( STRING_8 ) ; } sb . append ( STRING_9 ) . append ( IDENT_15 ) ; IDENT_11 = true ; } if ( ( p . METHOD_7 ( ) . METHOD_9 ( ) ) != null ) { if ( IDENT_11 ) { sb . append ( STRING_8 ) ; } sb . append ( STRING_10 ) . append ( p . METHOD_7 ( ) . METHOD_9 ( ) ) ; IDENT_11 = true ; } } else { sb . append ( STRING_11 ) ; sb . append ( p . toString ( ) ) ; } } return sb . toString ( ) ; }
org . junit . Assert . assertTrue ( response . toString ( ) , response . result ( ) ) 