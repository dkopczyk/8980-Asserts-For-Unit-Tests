METHOD_0 ( ) { app . METHOD_1 ( ) ; app . put ( STRING_0 , STRING_1 ) ; app . put ( STRING_2 , STRING_3 ) ; java . io . InputStream IDENT_0 = getClass ( ) . METHOD_2 ( ) . getResourceAsStream ( STRING_4 ) ; byte [ ] IDENT_1 = org . apache . commons . io . IDENT_2 . toByteArray ( IDENT_0 ) ; app . put ( STRING_5 , IDENT_1 ) ; IDENT_0 . close ( ) ; java . lang . reflect . Field f = org . apache . IDENT_3 . persistence . Schema . class . METHOD_3 ( STRING_6 ) ; f . METHOD_4 ( true ) ; byte [ ] IDENT_4 = ( ( byte [ ] ) ( f . get ( org . apache . IDENT_3 . persistence . Schema . class ) ) ) ; byte [ ] IDENT_5 = STRING_7 . getBytes ( ) ; f . set ( org . apache . IDENT_3 . persistence . Schema . class , IDENT_5 ) ; org . apache . IDENT_3 . persistence . entities . IDENT_6 IDENT_7 = ( ( org . apache . IDENT_3 . persistence . entities . IDENT_6 ) ( app . METHOD_5 ( IDENT_8 . IDENT_9 , 1 , STRING_8 ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ; "<AssertPlaceHolder>" ; f . set ( org . apache . IDENT_3 . persistence . Schema . class , IDENT_4 ) ; try { app . METHOD_8 ( ) . get ( IDENT_7 . METHOD_9 ( ) ) ; org . junit . Assert . fail ( STRING_9 ) ; } catch ( java . lang . IllegalStateException e ) { } } METHOD_10 ( ) { return IDENT_10 ; }
org . junit . Assert . assertArrayEquals ( IDENT_7 . METHOD_10 ( ) , IDENT_1 ) 