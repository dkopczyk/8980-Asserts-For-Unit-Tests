METHOD_0 ( ) { java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_3 = new java . util . concurrent . IDENT_4 < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > ( ) ; IDENT_3 . put ( STRING_0 , IDENT_5 ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_6 = new java . util . METHOD_1 ( ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_7 = new java . util . METHOD_1 ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_8 = new java . util . ArrayList ( ) ; when ( IDENT_9 . METHOD_2 ( ) ) . thenReturn ( IDENT_3 ) ; for ( org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_10 : IDENT_3 . values ( ) ) { IDENT_8 . add ( IDENT_10 ) ; } IDENT_6 = METHOD_3 ( IDENT_8 ) ; IDENT_7 = IDENT_11 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( org . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 . logger . METHOD_5 ( ) ) { org . IDENT_0 . IDENT_1 . IDENT_12 . IDENT_13 . logger . debug ( STRING_1 ) ; } java . util . Map < java . lang . String , org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_14 = IDENT_9 . METHOD_2 ( ) ; java . util . Map < java . lang . String , java . lang . Object > data = new java . util . METHOD_1 ( ) ; java . util . List < org . IDENT_0 . IDENT_1 . model . IDENT_2 > IDENT_8 = new java . util . ArrayList ( ) ; if ( ( IDENT_14 != null ) && ( ! ( IDENT_14 . isEmpty ( ) ) ) ) { for ( org . IDENT_0 . IDENT_1 . model . IDENT_2 IDENT_10 : IDENT_14 . values ( ) ) { IDENT_8 . add ( IDENT_10 ) ; } } data . put ( STRING_2 , IDENT_8 ) ; return data ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_7 ) 