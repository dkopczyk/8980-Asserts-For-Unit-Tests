METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . file . IDENT_2 IDENT_3 = null ; org . IDENT_0 . IDENT_1 . file . IDENT_2 IDENT_4 = null ; try { IDENT_3 = new org . IDENT_0 . IDENT_1 . file . METHOD_1 ( org . IDENT_0 . IDENT_1 . file . IDENT_5 . IDENT_6 , org . IDENT_0 . IDENT_1 . file . IDENT_5 . IDENT_7 ) ; IDENT_4 = new org . IDENT_0 . IDENT_1 . file . METHOD_1 ( org . IDENT_0 . IDENT_1 . file . IDENT_5 . IDENT_8 , org . IDENT_0 . IDENT_1 . file . IDENT_5 . IDENT_9 ) ; org . IDENT_0 . IDENT_1 . file . List < org . IDENT_0 . IDENT_1 . file . IDENT_10 > IDENT_11 = org . IDENT_0 . IDENT_1 . file . IDENT_5 . toList ( IDENT_3 . METHOD_2 ( ) ) ; org . IDENT_0 . IDENT_1 . file . List < org . IDENT_0 . IDENT_1 . file . IDENT_10 > IDENT_12 = org . IDENT_0 . IDENT_1 . file . IDENT_5 . toList ( IDENT_4 . METHOD_2 ( ) ) ; int IDENT_13 = METHOD_3 ( IDENT_11 , IDENT_12 ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . Throwable t ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } finally { org . IDENT_0 . storage . api . IDENT_14 . METHOD_4 ( IDENT_4 ) ; org . IDENT_0 . storage . api . IDENT_14 . METHOD_4 ( IDENT_3 ) ; } } METHOD_3 ( org . IDENT_0 . IDENT_1 . file . List , org . IDENT_0 . IDENT_1 . file . List ) { int IDENT_15 = - 1 ; for ( int i = 0 ; i < ( IDENT_12 . size ( ) ) ; ++ i ) { org . IDENT_0 . IDENT_1 . file . IDENT_10 IDENT_16 = IDENT_11 . get ( i ) ; org . IDENT_0 . IDENT_1 . file . IDENT_10 IDENT_17 = IDENT_12 . get ( i ) ; if ( IDENT_16 . equals ( IDENT_17 ) ) { IDENT_15 = IDENT_17 . getId ( ) ; } else { break ; } } return IDENT_15 + 1 ; }
org . junit . Assert . assertEquals ( 3 , IDENT_13 ) 