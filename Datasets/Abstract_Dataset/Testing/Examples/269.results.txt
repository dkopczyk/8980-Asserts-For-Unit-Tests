METHOD_0 ( ) { java . util . HashMap < java . lang . String , java . lang . String > args = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; args . put ( STRING_0 , "a" ) ; args . put ( STRING_1 , "b" ) ; args . put ( STRING_2 , STRING_3 ) ; edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . IDENT_4 expResult = new edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . METHOD_1 ( args ) ; java . util . HashMap < java . lang . String , java . lang . Double > values = new java . util . HashMap < java . lang . String , java . lang . Double > ( ) ; values . put ( "a" , 1.0 ) ; values . put ( "b" , 2.0 ) ; edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . METHOD_1 instance = new edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . METHOD_1 ( "a" , "b" ) ; edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . METHOD_1 result = instance . METHOD_2 ( values ) ; "<AssertPlaceHolder>" ; } build ( edu . IDENT_0 . IDENT_1 . shared . IDENT_2 . IDENT_3 . IDENT_5 ) { java . lang . StringBuilder query = new java . lang . StringBuilder ( ) ; for ( java . lang . String key : args . METHOD_3 ( ) ) { for ( java . lang . String value : args . get ( key ) ) { if ( ( query . length ( ) ) == 0 ) { query . append ( key ) . append ( STRING_4 ) . append ( IDENT_6 . encode ( value ) ) ; } else { query . append ( STRING_5 ) . append ( key ) . append ( STRING_4 ) . append ( IDENT_6 . encode ( value ) ) ; } } } java . lang . String url = ( ( ( ( ( ( ( protocol ) + STRING_6 ) + ( host ) ) + STRING_7 ) + ( port ) ) + ( page ) ) + ( ( query . length ( ) ) > 0 ? STRING_8 : "" ) ) + ( query . toString ( ) ) ; return url ; }
org . junit . Assert . assertEquals ( expResult . build ( IDENT_6 ) , result . build ( IDENT_6 ) ) 