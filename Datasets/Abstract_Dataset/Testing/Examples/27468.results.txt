extension ( ) { java . io . File shell = METHOD_0 ( STRING_0 0 , STRING_1 ) ; com . asakusafw . IDENT_0 . core . IDENT_1 script = new com . asakusafw . IDENT_0 . core . METHOD_1 ( STRING_2 , set ( ) , STRING_0 , STRING_3 , java . util . Arrays . asList ( shell . getAbsolutePath ( ) , STRING_4 ) , map ( ) , java . util . Arrays . asList ( STRING_2 ) ) ; com . asakusafw . IDENT_0 . core . IDENT_2 handler = handler ( ) ; try ( com . asakusafw . IDENT_0 . core . util . IDENT_3 IDENT_4 = new com . asakusafw . IDENT_0 . core . util . METHOD_2 ( ) ) { java . io . File file = IDENT_4 . create ( STRING_2 , STRING_5 , new java . io . ByteArrayInputStream ( STRING_6 . getBytes ( com . asakusafw . IDENT_0 . IDENT_5 . IDENT_6 . IDENT_7 ) ) ) ; com . asakusafw . IDENT_0 . core . IDENT_8 context = new com . asakusafw . IDENT_0 . core . METHOD_3 ( "b" , STRING_7 , STRING_8 , com . asakusafw . IDENT_0 . core . IDENT_9 . IDENT_10 , map ( ) , map ( ) , java . util . Collections . METHOD_4 ( STRING_2 , new com . asakusafw . IDENT_0 . IDENT_5 . METHOD_5 ( file ) ) ) ; execute ( context , script , handler ) ; } java . util . List < java . lang . String > results = METHOD_6 ( shell ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . io . File ) { java . io . File output = new java . io . File ( IDENT_11 . METHOD_7 ( ) , ( ( IDENT_11 . getName ( ) ) + STRING_9 ) ) ; java . util . List < java . lang . String > results = new java . util . ArrayList ( ) ; try ( java . util . IDENT_12 IDENT_13 = new java . util . METHOD_8 ( output ) ) { while ( IDENT_13 . METHOD_9 ( ) ) { results . add ( IDENT_13 . METHOD_10 ( ) ) ; } } return results ; }
org . junit . Assert . assertThat ( results , is ( java . util . Arrays . asList ( STRING_4 , STRING_6 ) ) ) 