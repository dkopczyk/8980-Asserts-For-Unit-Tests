METHOD_0 ( ) { com . asakusafw . IDENT_0 . core . IDENT_1 instance = create ( STRING_0 , "1" , STRING_1 , "2" ) ; java . util . concurrent . IDENT_2 IDENT_3 = new java . util . concurrent . METHOD_1 ( 3 ) ; java . util . List < com . asakusafw . IDENT_0 . IDENT_4 . IDENT_5 . IDENT_6 > IDENT_7 = new java . util . ArrayList ( ) ; IDENT_7 . add ( new com . asakusafw . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( STRING_2 ) { @ com . asakusafw . IDENT_0 . IDENT_4 . Override MOD_0 void METHOD_3 ( ) throws com . asakusafw . IDENT_0 . IDENT_4 . IDENT_8 , java . io . IOException { try { IDENT_3 . METHOD_4 ( ) ; } catch ( java . util . concurrent . IDENT_9 e ) { throw new java . io . IOException ( e ) ; } } } . resource ( STRING_3 ) ) ; IDENT_7 . add ( new com . asakusafw . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( STRING_4 ) { @ com . asakusafw . IDENT_0 . IDENT_4 . Override MOD_0 void METHOD_3 ( ) throws com . asakusafw . IDENT_0 . IDENT_4 . IDENT_8 , java . io . IOException { try { IDENT_3 . METHOD_4 ( ) ; } catch ( java . util . concurrent . IDENT_9 e ) { throw new java . io . IOException ( e ) ; } } } . resource ( STRING_3 ) ) ; IDENT_7 . add ( new com . asakusafw . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( STRING_5 ) { @ com . asakusafw . IDENT_0 . IDENT_4 . Override MOD_0 void METHOD_3 ( ) throws com . asakusafw . IDENT_0 . IDENT_4 . IDENT_8 , java . io . IOException { try { IDENT_3 . METHOD_4 ( ) ; } catch ( java . util . concurrent . IDENT_9 e ) { throw new java . io . IOException ( e ) ; } } } . resource ( STRING_6 ) ) ; instance . execute ( IDENT_10 . IDENT_11 , com . asakusafw . IDENT_0 . IDENT_4 . IDENT_5 . IDENT_12 , IDENT_7 , IDENT_1 . IDENT_13 ) ; java . util . Set < java . lang . String > rest = METHOD_5 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_14 ; }
org . junit . Assert . assertThat ( rest . size ( ) , is ( 0 ) ) 