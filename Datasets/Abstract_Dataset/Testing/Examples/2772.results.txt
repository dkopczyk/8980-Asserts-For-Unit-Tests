METHOD_0 ( ) { java . lang . String s = "" ; int IDENT_0 = 1 ; for ( int i = 0 ; i < 1000 ; i ++ ) { s = org . apache . hadoop . yarn . IDENT_1 . util . IDENT_2 . METHOD_1 ( 16 ) ; if ( ( i OP_0 IDENT_0 ) == 0 ) { System . out . println ( ( ( ( STRING_0 + i ) + STRING_1 ) + s ) ) ; IDENT_0 OP_1 5 ; } "<AssertPlaceHolder>" ; for ( int j = 0 ; j < ( s . length ( ) ) ; j ++ ) { char c = s . charAt ( j ) ; if ( ( ( ( c < STRING_2 ) || ( ( c > STRING_3 ) && ( c < STRING_4 ) ) ) || ( ( c > STRING_5 ) && ( c < STRING_6 ) ) ) || ( c > STRING_7 ) ) org . junit . Assert . fail ( ( STRING_8 + s ) ) ; } } } METHOD_1 ( int ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = ( ( char ) ( org . apache . hadoop . yarn . IDENT_1 . util . IDENT_2 . IDENT_3 . METHOD_2 ( INT_0 ) ) ) ; if ( c < ( ( char ) ( 10 ) ) ) { c += STRING_2 ; } else if ( c < ( ( char ) ( INT_1 ) ) ) { c += INT_2 ; } else { c += INT_3 ; } sb . append ( c ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertTrue ( ( ( s . length ( ) ) == 16 ) ) 