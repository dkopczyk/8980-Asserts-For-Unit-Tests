METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_1 IDENT_6 = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; java . util . IDENT_7 < java . lang . Integer , java . lang . Integer > IDENT_8 = new java . util . IDENT_9 < java . lang . Integer , java . lang . Integer > ( ) ; IDENT_8 . put ( 1 , 1 ) ; IDENT_8 . put ( 2 , 2 ) ; IDENT_5 . METHOD_2 ( 1 ) ; IDENT_5 . METHOD_3 ( IDENT_8 ) ; IDENT_5 . METHOD_4 ( IDENT_10 . IDENT_11 ) ; IDENT_6 . METHOD_2 ( 1 ) ; IDENT_6 . METHOD_3 ( IDENT_8 ) ; IDENT_6 . METHOD_4 ( IDENT_10 . IDENT_11 ) ; com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . IDENT_12 IDENT_13 = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_5 ( null , 0 , 0 ) ; IDENT_13 . METHOD_6 ( storage ) ; com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_5 IDENT_14 = new com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_5 ( null , 0 , 0 ) ; IDENT_14 . METHOD_6 ( storage ) ; boolean IDENT_15 = IDENT_16 . METHOD_7 ( IDENT_5 , IDENT_6 , IDENT_14 , IDENT_13 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_1 , com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_1 , com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_5 , com . IDENT_0 . IDENT_1 . core . IDENT_2 . IDENT_3 . METHOD_5 ) { if ( ( ( IDENT_17 . METHOD_8 ( ) ) > 0 ) && ( ( IDENT_17 . METHOD_8 ( ) ) != ( IDENT_18 . METHOD_8 ( ) ) ) ) { return false ; } boolean IDENT_19 = true ; long IDENT_20 = METHOD_9 ( IDENT_17 , session ) ; long IDENT_21 = METHOD_9 ( IDENT_18 , IDENT_13 ) ; if ( IDENT_20 == IDENT_21 ) { if ( IDENT_20 == 0 ) { return true ; } byte [ ] IDENT_22 = METHOD_10 ( IDENT_17 , session ) ; byte [ ] IDENT_23 = METHOD_10 ( IDENT_18 , IDENT_13 ) ; java . util . Iterator < Map . Entry < java . lang . Integer , java . lang . Integer > > IDENT_24 = IDENT_17 . METHOD_11 ( ) . entrySet ( ) . iterator ( ) ; java . util . Iterator < Map . Entry < java . lang . Integer , java . lang . Integer > > IDENT_25 = IDENT_18 . METHOD_11 ( ) . entrySet ( ) . iterator ( ) ; int IDENT_26 = 0 ; int IDENT_27 = 0 ; int IDENT_28 = 0 ; int IDENT_29 = 0 ; if ( ( IDENT_24 . hasNext ( ) ) && ( IDENT_25 . hasNext ( ) ) ) { Map . Entry < java . lang . Integer , java . lang . Integer > IDENT_30 = IDENT_24 . next ( ) ; Map . Entry < java . lang . Integer , java . lang . Integer > IDENT_31 = IDENT_25 . next ( ) ; IDENT_26 = IDENT_30 . getKey ( ) ; IDENT_27 = IDENT_26 + ( IDENT_30 . getValue ( ) ) ; IDENT_28 = IDENT_31 . getKey ( ) ; IDENT_29 = IDENT_31 . getValue ( ) ; do { if ( ( IDENT_22 [ IDENT_26 ] ) != ( IDENT_23 [ IDENT_28 ] ) ) { return false ; } ++ IDENT_26 ; ++ IDENT_28 ; if ( ( IDENT_26 >= ( IDENT_22 . length ) ) || ( IDENT_28 >= ( IDENT_23 . length ) ) ) { break ; } if ( IDENT_26 >= IDENT_27 ) { if ( IDENT_24 . hasNext ( ) ) { IDENT_30 = IDENT_24 . next ( ) ; IDENT_26 = IDENT_30 . getKey ( ) ; IDENT_27 = IDENT_26 + ( IDENT_30 . getValue ( ) ) ; } else { break ; } } if ( IDENT_28 >= IDENT_29 ) { if ( IDENT_25 . hasNext ( ) ) { IDENT_31 = IDENT_25 . next ( ) ; IDENT_28 = IDENT_31 . getKey ( ) ; IDENT_29 = IDENT_31 . getValue ( ) ; } else { break ; } } } while ( true ) ; } IDENT_19 = true ; } else { IDENT_19 = false ; } return IDENT_19 ; }
org . junit . Assert . assertTrue ( IDENT_15 ) 