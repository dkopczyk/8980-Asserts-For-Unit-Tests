METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . core . configuration . IDENT_2 . IDENT_3 IDENT_4 = mock ( com . IDENT_0 . IDENT_1 . core . configuration . IDENT_2 . IDENT_3 . class ) ; when ( IDENT_4 . METHOD_1 ( ) ) . thenReturn ( IDENT_5 . IDENT_6 ) ; when ( IDENT_4 . METHOD_2 ( ) ) . thenReturn ( FLOAT_0 ) ; when ( IDENT_4 . METHOD_3 ( ) ) . thenReturn ( FLOAT_1 ) ; when ( IDENT_4 . METHOD_4 ( ) ) . thenReturn ( FLOAT_2 ) ; when ( IDENT_4 . METHOD_5 ( ) ) . thenReturn ( FLOAT_1 ) ; when ( IDENT_4 . METHOD_6 ( ) ) . thenReturn ( FLOAT_3 ) ; when ( IDENT_4 . METHOD_7 ( ) ) . thenReturn ( FLOAT_4 ) ; when ( IDENT_4 . METHOD_8 ( ) ) . thenReturn ( FLOAT_5 ) ; when ( IDENT_4 . METHOD_9 ( ) ) . thenReturn ( FLOAT_6 ) ; double IDENT_7 = FLOAT_7 ; java . util . List < com . IDENT_0 . IDENT_1 . core . IDENT_8 . IDENT_2 . IDENT_9 > IDENT_10 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . core . IDENT_8 . IDENT_2 . IDENT_9 > ( ) ; when ( IDENT_11 [ 0 ] . METHOD_10 ( ) ) . thenReturn ( ( ( date . getTime ( ) ) - FLOAT_8 ) ) ; when ( IDENT_11 [ 0 ] . METHOD_11 ( ) ) . thenReturn ( IDENT_12 . IDENT_13 ) ; when ( IDENT_11 [ 0 ] . METHOD_12 ( ) ) . thenReturn ( 1000 ) ; when ( IDENT_11 [ 0 ] . METHOD_13 ( ) ) . thenReturn ( IDENT_14 . IDENT_15 ) ; IDENT_10 . add ( IDENT_11 [ 0 ] ) ; when ( IDENT_11 [ 1 ] . METHOD_10 ( ) ) . thenReturn ( ( ( date . getTime ( ) ) + FLOAT_6 ) ) ; when ( IDENT_11 [ 1 ] . METHOD_11 ( ) ) . thenReturn ( IDENT_12 . IDENT_16 ) ; when ( IDENT_11 [ 1 ] . METHOD_12 ( ) ) . thenReturn ( 1000 ) ; when ( IDENT_11 [ 1 ] . METHOD_13 ( ) ) . thenReturn ( IDENT_14 . IDENT_17 ) ; IDENT_10 . add ( IDENT_11 [ 1 ] ) ; when ( IDENT_11 [ 2 ] . METHOD_10 ( ) ) . thenReturn ( ( ( date . getTime ( ) ) + FLOAT_9 ) ) ; when ( IDENT_11 [ 2 ] . METHOD_11 ( ) ) . thenReturn ( IDENT_12 . IDENT_13 ) ; when ( IDENT_11 [ 2 ] . METHOD_12 ( ) ) . thenReturn ( 1000 ) ; when ( IDENT_11 [ 2 ] . METHOD_13 ( ) ) . thenReturn ( IDENT_14 . IDENT_17 ) ; IDENT_10 . add ( IDENT_11 [ 2 ] ) ; java . util . List < com . IDENT_0 . IDENT_1 . core . IDENT_8 . IDENT_2 . IDENT_18 > IDENT_19 = IDENT_20 . create ( IDENT_10 , IDENT_4 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_21 . size ( ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_19 . size ( ) ) 