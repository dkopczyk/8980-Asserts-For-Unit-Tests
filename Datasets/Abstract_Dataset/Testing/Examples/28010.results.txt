METHOD_0 ( ) { org . mockito . Mockito . when ( IDENT_0 . METHOD_1 ( org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( false ) ; java . lang . String [ ] IDENT_1 = METHOD_2 ( ) ; org . mockito . Mockito . when ( IDENT_0 . METHOD_3 ( org . mockito . Mockito . anyString ( ) ) ) . thenReturn ( IDENT_1 ) ; com . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = null ; IDENT_7 = IDENT_8 . METHOD_4 ( IDENT_9 , new java . util . Date ( ( ( long ) ( FLOAT_0 * 1000 ) ) ) , 0 , STRING_0 , FLOAT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String , java . util . Date , double , java . lang . String , double ) { java . lang . String IDENT_10 = ( directory + ( com . IDENT_2 . IDENT_3 . core . util . IDENT_11 . IDENT_12 ) ) + ( IDENT_13 . IDENT_14 . IDENT_15 ) ; boolean IDENT_16 = false ; double IDENT_17 = 0.0 ; double IDENT_18 = 0.0 ; if ( ! ( IDENT_0 . METHOD_1 ( IDENT_10 ) ) ) { IDENT_16 = true ; IDENT_10 = ( directory + ( com . IDENT_2 . IDENT_3 . core . util . IDENT_11 . IDENT_12 ) ) + ( IDENT_13 . IDENT_14 . IDENT_19 ) ; if ( ! ( IDENT_0 . METHOD_1 ( IDENT_10 ) ) ) { if ( IDENT_20 == null ) { com . IDENT_2 . IDENT_3 . core . IDENT_4 . impl . IDENT_21 . LOGGER . debug ( STRING_1 ) ; } else { com . IDENT_2 . IDENT_3 . core . IDENT_4 . impl . IDENT_21 . LOGGER . debug ( ( STRING_2 + IDENT_22 ) ) ; IDENT_17 = ( IDENT_20 . getTime ( ) ) + ( IDENT_22 * 1000 ) ; IDENT_18 = IDENT_23 + ( IDENT_22 * 1000 ) ; } return null ; } } IDENT_17 = 0 ; java . lang . String [ ] IDENT_24 = null ; try { IDENT_24 = IDENT_0 . METHOD_3 ( IDENT_10 ) ; } catch ( java . io . IOException IDENT_25 ) { com . IDENT_2 . IDENT_3 . core . IDENT_4 . impl . IDENT_21 . LOGGER . error ( ( STRING_3 + IDENT_10 ) ) ; return null ; } for ( java . lang . String IDENT_26 : IDENT_24 ) { if ( ( IDENT_17 <= 0 ) && ( ( IDENT_26 . indexOf ( STRING_4 ) ) > 0 ) ) { java . lang . String [ ] IDENT_27 = IDENT_26 . split ( STRING_5 ) ; if ( ( IDENT_28 != null ) && ( ( IDENT_28 . compareTo ( STRING_3 0 ) ) < 0 ) ) { IDENT_17 = java . lang . Double . METHOD_5 ( IDENT_27 [ 1 ] . trim ( ) . substring ( 0 , ( ( IDENT_27 [ 1 ] . length ( ) ) - 2 ) ) ) ; } else { java . text . IDENT_29 format = new java . text . METHOD_6 ( STRING_6 ) ; try { IDENT_17 = format . parse ( IDENT_27 [ 1 ] . trim ( ) . substring ( 0 , ( ( IDENT_27 [ 1 ] . length ( ) ) - 2 ) ) ) . getTime ( ) ; } catch ( java . text . IDENT_30 e ) { com . IDENT_2 . IDENT_3 . core . IDENT_4 . impl . IDENT_21 . LOGGER . warn ( STRING_7 , e ) ; } } } if ( ( IDENT_26 . indexOf ( STRING_8 ) ) > 0 ) { java . lang . String [ ] IDENT_31 = IDENT_26 . split ( STRING_5 ) ; if ( ( IDENT_28 != null ) && ( ( IDENT_28 . compareTo ( STRING_3 0 ) ) < 0 ) ) { IDENT_18 = java . lang . Double . METHOD_5 ( IDENT_31 [ 1 ] . trim ( ) . substring ( 0 , ( ( IDENT_31 [ 1 ] . length ( ) ) - 2 ) ) ) ; } else { IDENT_18 = com . IDENT_2 . IDENT_3 . core . util . IDENT_11 . METHOD_7 ( IDENT_31 [ 1 ] . trim ( ) . substring ( 1 , ( ( IDENT_31 [ 1 ] . length ( ) ) - 2 ) ) ) ; } break ; } } if ( IDENT_16 ) { IDENT_17 += IDENT_22 * 1000 ; IDENT_18 += IDENT_22 * 1000 ; } if ( IDENT_28 != null ) { com . IDENT_2 . IDENT_3 . core . IDENT_4 . impl . IDENT_21 . LOGGER . info ( ( ( ( ( ( STRING_3 3 + IDENT_18 ) + STRING_3 2 ) + IDENT_17 ) + STRING_9 ) + IDENT_28 ) ) ; } com . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . IDENT_6 time = new com . IDENT_2 . IDENT_3 . core . IDENT_4 . IDENT_5 . METHOD_8 ( ) ; time . METHOD_9 ( IDENT_18 ) ; time . METHOD_10 ( IDENT_17 ) ; return time ; }
org . junit . Assert . assertEquals ( IDENT_7 , null ) 