METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . annotation . model . IDENT_2 configuration = new com . github . IDENT_0 . IDENT_1 . annotation . model . METHOD_1 ( ) . METHOD_2 ( null ) ; java . util . Set < com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_3 > IDENT_4 = this . validator . validate ( configuration ) ; "<AssertPlaceHolder>" ; } validate ( java . lang . Object ) { java . lang . reflect . Method [ ] methods = object . getClass ( ) . METHOD_3 ( ) ; java . util . Set < com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_3 > IDENT_4 = new java . util . HashSet < com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_3 > ( ) ; for ( java . lang . reflect . Method method : methods ) { java . lang . annotation . IDENT_5 [ ] IDENT_6 = method . METHOD_4 ( ) ; for ( java . lang . annotation . IDENT_5 annotation : IDENT_6 ) { com . github . IDENT_0 . IDENT_1 . annotation . validation . IDENT_7 IDENT_8 = annotation . METHOD_5 ( ) . METHOD_6 ( com . github . IDENT_0 . IDENT_1 . annotation . validation . IDENT_7 . class ) ; if ( IDENT_8 == null ) { continue ; } com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_9 validator = ( ( com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_9 ) ( com . github . IDENT_0 . IDENT_1 . common . helper . IDENT_10 . newInstance ( IDENT_8 . METHOD_7 ( ) ) ) ) ; java . util . Set < com . github . IDENT_0 . IDENT_1 . annotation . validation . apply . IDENT_3 > res = validator . validate ( object , method , annotation ) ; this . addAll ( IDENT_4 , res ) ; } } return IDENT_4 ; }
org . junit . Assert . assertEquals ( 8 , IDENT_4 . size ( ) ) 