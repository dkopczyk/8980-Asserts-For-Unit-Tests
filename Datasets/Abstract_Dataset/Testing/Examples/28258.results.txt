METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = this . METHOD_1 ( 3 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 ( ) ; IDENT_5 . setId ( 4 ) ; IDENT_5 . METHOD_3 ( false ) ; IDENT_5 . METHOD_4 ( new java . util . METHOD_5 ( INT_0 , java . util . Calendar . IDENT_6 , 1 ) . getTime ( ) ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 > IDENT_7 = java . util . Arrays . asList ( IDENT_5 ) ; doReturn ( IDENT_7 ) . when ( IDENT_8 ) . METHOD_6 ( any ( ) , any ( ) ) ; java . util . Date IDENT_9 = new java . util . METHOD_5 ( INT_0 , java . util . Calendar . IDENT_6 , 2 ) . getTime ( ) ; java . util . Calendar IDENT_10 = new java . util . METHOD_5 ( INT_0 , java . util . Calendar . IDENT_11 , 1 ) ; java . util . Calendar IDENT_12 = new java . util . METHOD_5 ( INT_1 , java . util . Calendar . IDENT_13 , 1 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 > result = IDENT_14 . METHOD_7 ( IDENT_10 , IDENT_12 , IDENT_4 , IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( java . util . Calendar , java . util . Calendar , java . util . List , java . util . Date ) { java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 > IDENT_15 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_2 > ( ) ; if ( ( ( IDENT_12 . get ( Calendar . IDENT_16 ) ) - ( IDENT_10 . get ( Calendar . IDENT_16 ) ) ) > 0 ) { for ( int IDENT_17 = IDENT_10 . get ( Calendar . IDENT_16 ) ; IDENT_17 <= ( IDENT_12 . get ( Calendar . IDENT_16 ) ) ; IDENT_17 ++ ) { IDENT_15 = java . util . stream . IDENT_18 . METHOD_8 ( METHOD_9 ( IDENT_19 , METHOD_10 ( IDENT_9 ) , IDENT_17 ) . stream ( ) , IDENT_15 . stream ( ) ) . collect ( java . util . stream . IDENT_20 . toList ( ) ) ; } } else { IDENT_15 = METHOD_9 ( IDENT_19 , METHOD_10 ( IDENT_9 ) , IDENT_12 . get ( Calendar . IDENT_16 ) ) ; } return IDENT_15 ; }
org . junit . Assert . assertThat ( result . size ( ) , org . hamcrest . core . Is . is ( 3 ) ) 