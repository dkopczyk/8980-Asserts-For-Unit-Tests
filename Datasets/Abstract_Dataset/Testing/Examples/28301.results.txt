METHOD_0 ( ) { fr . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_2 = mock ( fr . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; fr . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_1 ( IDENT_2 ) ; com . IDENT_5 . IDENT_6 . IDENT_7 IDENT_8 = mock ( com . IDENT_5 . IDENT_6 . IDENT_7 . class ) ; java . sql . IDENT_9 connection = mock ( java . sql . IDENT_9 . class ) ; METHOD_2 ( IDENT_8 . METHOD_3 ( ) ) . METHOD_4 ( connection ) ; fr . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 IDENT_12 = fr . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_13 . METHOD_5 ( IDENT_2 , IDENT_8 ) ; fr . IDENT_0 . IDENT_1 . command . IDENT_14 . IDENT_1 . debug . IDENT_15 IDENT_16 = METHOD_6 ( IDENT_12 ) ; java . sql . IDENT_9 result = IDENT_16 . METHOD_3 ( IDENT_12 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_8 ) . METHOD_3 ( ) ; } METHOD_3 ( fr . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 ) { try { java . lang . reflect . Method method = fr . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 . class . METHOD_7 ( STRING_0 ) ; method . METHOD_8 ( true ) ; return ( ( java . sql . IDENT_9 ) ( method . invoke ( IDENT_17 ) ) ) ; } catch ( java . lang . IDENT_18 | java . lang . IDENT_19 | java . lang . reflect . IDENT_20 e ) { throw new java . lang . IllegalStateException ( STRING_1 , e ) ; } }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . equalTo ( connection ) ) 