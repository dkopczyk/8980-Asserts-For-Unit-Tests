METHOD_0 ( ) { final com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; IDENT_5 . METHOD_2 ( true ) ; final com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_6 = new com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( true ) ; final com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 parent = new com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; parent . METHOD_3 ( IDENT_5 ) ; parent . METHOD_4 ( java . util . Arrays . asList ( IDENT_5 , IDENT_6 ) ) ; parent . METHOD_5 ( new java . util . HashMap < java . lang . String , com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > ( ) { { put ( STRING_0 , IDENT_5 ) ; put ( STRING_1 , IDENT_6 ) ; } } ) ; com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 test = new com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 ( ) ; test . setId ( "test" ) ; test . METHOD_7 ( java . util . Arrays . < java . util . Map < java . lang . String , com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > > asList ( new java . util . HashMap < java . lang . String , com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > ( ) { { put ( STRING_2 , parent ) ; } } , new java . util . HashMap < java . lang . String , com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > ( ) { { put ( STRING_2 , parent ) ; } } , null ) ) ; test . METHOD_8 ( new java . util . HashMap < java . lang . String , java . util . List < com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > > ( ) { { put ( STRING_2 , java . util . Arrays . asList ( IDENT_5 , IDENT_6 ) ) ; put ( STRING_3 , java . util . Collections . < com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 > emptyList ( ) ) ; put ( STRING_4 , null ) ; } } ) ; com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . mapper . save ( test ) ; com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 result = com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . mapper . load ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_6 . class , "test" ) ; "<AssertPlaceHolder>" ; } load ( T , com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 ) { @ com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_9 ( STRING_5 ) final java . lang . Class < T > clazz = ( ( java . lang . Class < T > ) ( IDENT_9 . getClass ( ) ) ) ; config = METHOD_10 ( config ) ; final com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 converter = METHOD_11 ( config ) ; final java . lang . String tableName = METHOD_12 ( clazz , IDENT_9 , config ) ; final com . amazonaws . services . IDENT_1 . model . IDENT_11 IDENT_12 = new com . amazonaws . services . IDENT_1 . model . METHOD_13 ( ) . METHOD_14 ( config . METHOD_15 ( ) ) ; final java . util . Map < java . lang . String , com . amazonaws . services . IDENT_1 . model . IDENT_13 > key = getKey ( converter , IDENT_9 , clazz ) ; IDENT_12 . METHOD_16 ( key ) ; IDENT_12 . METHOD_17 ( tableName ) ; IDENT_12 . METHOD_18 ( ( ( config . METHOD_19 ( ) ) == ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . IDENT_14 . IDENT_15 ) ) ) ; final com . amazonaws . services . IDENT_1 . model . IDENT_16 item = db . METHOD_20 ( com . amazonaws . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_17 . METHOD_21 ( IDENT_12 ) ) ; final java . util . Map < java . lang . String , com . amazonaws . services . IDENT_1 . model . IDENT_13 > IDENT_18 = item . METHOD_20 ( ) ; if ( IDENT_18 == null ) { return null ; } final T object = METHOD_22 ( converter , METHOD_23 ( IDENT_18 , clazz , tableName , config ) ) ; return object ; }
org . junit . Assert . assertEquals ( test , result ) 