METHOD_0 ( ) { java . util . Map < java . lang . String , java . util . List < com . amazonaws . services . IDENT_0 . model . IDENT_1 > > IDENT_2 = new java . util . HashMap < java . lang . String , java . util . List < com . amazonaws . services . IDENT_0 . model . IDENT_1 > > ( ) ; java . util . List < com . amazonaws . services . IDENT_0 . model . IDENT_1 > IDENT_3 = new java . util . ArrayList < com . amazonaws . services . IDENT_0 . model . IDENT_1 > ( ) ; com . amazonaws . services . IDENT_0 . model . IDENT_1 IDENT_4 = new com . amazonaws . services . IDENT_0 . model . METHOD_1 ( ) ; com . amazonaws . services . IDENT_0 . model . METHOD_1 IDENT_5 = new com . amazonaws . services . IDENT_0 . model . METHOD_1 ( ) ; com . amazonaws . services . IDENT_0 . model . METHOD_1 IDENT_6 = new com . amazonaws . services . IDENT_0 . model . METHOD_1 ( ) ; IDENT_3 . add ( IDENT_4 ) ; IDENT_3 . add ( IDENT_5 ) ; IDENT_3 . add ( IDENT_6 ) ; IDENT_2 . put ( STRING_0 , IDENT_3 ) ; org . easymock . EasyMock . METHOD_2 ( IDENT_7 ) ; com . amazonaws . IDENT_8 IDENT_9 = new com . amazonaws . METHOD_3 ( STRING_1 ) ; IDENT_9 . METHOD_4 ( STRING_2 ) ; com . amazonaws . services . IDENT_0 . model . IDENT_10 IDENT_11 = org . easymock . EasyMock . METHOD_5 ( com . amazonaws . services . IDENT_0 . model . IDENT_10 . class ) ; org . easymock . EasyMock . METHOD_2 ( IDENT_11 ) ; org . easymock . EasyMock . expect ( IDENT_11 . METHOD_6 ( ) ) . andReturn ( new java . util . HashMap < java . lang . String , java . util . List < com . amazonaws . services . IDENT_0 . model . METHOD_1 > > ( ) ) . times ( 2 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_7 ( METHOD_8 ( com . amazonaws . services . IDENT_0 . model . IDENT_12 . class ) ) ) . METHOD_9 ( IDENT_9 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_7 ( METHOD_8 ( com . amazonaws . services . IDENT_0 . model . IDENT_12 . class ) ) ) . andReturn ( IDENT_11 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_7 ( METHOD_8 ( com . amazonaws . services . IDENT_0 . model . IDENT_12 . class ) ) ) . andReturn ( IDENT_11 ) ; org . easymock . EasyMock . replay ( IDENT_7 , IDENT_11 ) ; java . util . List < com . amazonaws . IDENT_13 . IDENT_0 . IDENT_14 . IDENT_15 . IDENT_16 > result = mapper . METHOD_10 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_7 ) ; } size ( ) { return com . amazonaws . http . IDENT_17 . IDENT_18 . size ( ) ; }
org . junit . Assert . assertEquals ( result . size ( ) , 0 ) 