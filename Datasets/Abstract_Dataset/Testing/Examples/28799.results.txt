METHOD_0 ( ) { com . amazonaws . services . IDENT_0 . internal . IDENT_1 < com . amazonaws . services . IDENT_0 . model . IDENT_2 > req = new com . amazonaws . services . IDENT_0 . internal . METHOD_1 ( STRING_0 ) ; req . METHOD_2 ( STRING_1 , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . amazonaws . IDENT_3 ) { com . amazonaws . services . IDENT_0 . internal . METHOD_1 < ? > IDENT_4 = ( ( com . amazonaws . services . IDENT_0 . internal . METHOD_1 < ? > ) ( request ) ) ; final java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_5 = IDENT_4 . METHOD_4 ( ) ; if ( IDENT_5 . isEmpty ( ) ) { return null ; } final java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; java . lang . String IDENT_6 = "" ; try { for ( final java . util . Map . Entry < java . lang . String , java . util . List < java . lang . String > > entry : IDENT_5 . entrySet ( ) ) { final java . lang . String IDENT_7 = java . net . IDENT_8 . encode ( entry . getKey ( ) , com . amazonaws . services . IDENT_0 . internal . IDENT_9 . IDENT_10 ) ; final java . util . List < java . lang . String > values = entry . getValue ( ) ; if ( values == null ) { continue ; } sb . append ( IDENT_6 ) ; IDENT_6 = STRING_3 ; java . lang . String IDENT_11 = "" ; for ( java . lang . String value : values ) { sb . append ( IDENT_11 ) ; IDENT_11 = STRING_3 ; final java . lang . String IDENT_12 = java . net . IDENT_8 . encode ( value , com . amazonaws . services . IDENT_0 . internal . IDENT_9 . IDENT_10 ) ; sb . append ( IDENT_7 ) . append ( STRING_4 ) . append ( IDENT_12 ) ; } } } catch ( final java . io . IDENT_13 e ) { throw new java . lang . IllegalArgumentException ( e ) ; } return sb . toString ( ) ; }
org . junit . Assert . assertNotNull ( com . amazonaws . services . IDENT_0 . internal . IDENT_9 . METHOD_3 ( req ) ) 