METHOD_0 ( ) { IDENT_0 . IDENT_1 . parser . IDENT_2 < IDENT_0 . IDENT_1 . model . IDENT_3 > IDENT_4 = parser . METHOD_1 ( java . nio . file . IDENT_5 . get ( METHOD_2 ( ) , STRING_0 ) ) ; IDENT_0 . IDENT_1 . parser . IDENT_6 . METHOD_3 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_0 . IDENT_1 . parser . IDENT_2 ) { log . debug ( STRING_1 ) ; for ( int i = 0 ; i < ( IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) ; i ++ ) { IDENT_0 . IDENT_1 . parser . IDENT_7 error = IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . get ( i ) ; if ( error . METHOD_6 ( ) . equals ( IDENT_8 . IDENT_9 ) ) { log . debug ( ( ( ( IDENT_4 . METHOD_4 ( ) . METHOD_7 ( ) ) + "\n" ) + error ) ) ; } } log . debug ( STRING_2 ) ; for ( int i = 0 ; i < ( IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) ; i ++ ) { IDENT_0 . IDENT_1 . parser . IDENT_7 error = IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . get ( i ) ; if ( error . METHOD_6 ( ) . equals ( IDENT_8 . IDENT_10 ) ) { log . debug ( ( ( ( IDENT_4 . METHOD_4 ( ) . METHOD_7 ( ) ) + "\n" ) + error ) ) ; } } log . debug ( STRING_3 ) ; for ( int i = 0 ; i < ( IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) ; i ++ ) { IDENT_0 . IDENT_1 . parser . IDENT_7 error = IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . get ( i ) ; if ( error . METHOD_6 ( ) . equals ( IDENT_8 . IDENT_11 ) ) { log . debug ( ( ( ( IDENT_4 . METHOD_4 ( ) . METHOD_7 ( ) ) + "\n" ) + error ) ) ; } } }
org . junit . Assert . assertEquals ( 1 , IDENT_4 . METHOD_4 ( ) . METHOD_5 ( ) . size ( ) ) 