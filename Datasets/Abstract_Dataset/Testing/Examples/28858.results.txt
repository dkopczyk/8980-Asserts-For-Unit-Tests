METHOD_0 ( ) { final java . io . IOException exception = new java . io . IOException ( STRING_0 ) ; IDENT_0 . amazon . IDENT_1 . core . http . IDENT_2 < ? > IDENT_3 = mock ( IDENT_0 . amazon . IDENT_1 . core . http . IDENT_2 . class ) ; when ( IDENT_3 . METHOD_1 ( ) ) . thenReturn ( false ) ; when ( IDENT_3 . METHOD_2 ( any ( ) , any ( ) ) ) . METHOD_3 ( exception ) ; IDENT_0 . amazon . IDENT_1 . core . http . IDENT_4 context = IDENT_0 . amazon . IDENT_1 . core . internal . http . IDENT_5 . IDENT_6 . METHOD_4 ( null ) ; try { client . METHOD_5 ( ) . request ( utils . IDENT_7 . METHOD_6 ( ) . build ( ) ) . METHOD_7 ( IDENT_0 . amazon . IDENT_1 . core . http . IDENT_8 . builder ( ) . build ( ) ) . METHOD_4 ( context ) . execute ( IDENT_3 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( IDENT_0 . amazon . IDENT_1 . core . exception . IDENT_9 e ) { "<AssertPlaceHolder>" ; } verify ( IDENT_3 , times ( 4 ) ) . METHOD_2 ( any ( ) , any ( ) ) ; } METHOD_8 ( ) { return IDENT_0 . amazon . IDENT_1 . utils . IDENT_10 . METHOD_9 ( IDENT_0 . amazon . IDENT_1 . IDENT_11 . IDENT_12 . Exception . class , super . METHOD_8 ( ) , STRING_2 ) ; }
org . junit . Assert . assertSame ( exception , e . METHOD_8 ( ) ) 