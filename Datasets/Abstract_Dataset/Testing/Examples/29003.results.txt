METHOD_0 ( ) { java . util . List < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 > IDENT_4 = new java . util . ArrayList < IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 > ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 obj = METHOD_1 ( ) ; IDENT_4 . add ( obj ) ; } IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . IDENT_5 . IDENT_6 mapper = new IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . IDENT_5 . METHOD_2 ( IDENT_7 ) ; IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 [ ] IDENT_8 = IDENT_4 . toArray ( new IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 [ IDENT_4 . size ( ) ] ) ; mapper . METHOD_3 ( ( ( java . lang . Object [ ] ) ( IDENT_8 ) ) ) ; for ( IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 obj : IDENT_4 ) { IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 IDENT_9 = mapper . load ( IDENT_0 . amazon . IDENT_1 . services . IDENT_2 . mapper . IDENT_3 . class , obj . getKey ( ) ) ; "<AssertPlaceHolder>" ; } } getKey ( ) { return this . key ; }
org . junit . Assert . assertEquals ( obj , IDENT_9 ) 