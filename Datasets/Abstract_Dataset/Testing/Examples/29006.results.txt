METHOD_0 ( ) { com . amazonaws . services . IDENT_0 . document . IDENT_1 IDENT_2 = new com . amazonaws . services . IDENT_0 . document . METHOD_1 ( IDENT_3 ) . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , STRING_4 ) . METHOD_3 ( com . amazonaws . services . IDENT_0 . document . IDENT_4 . IDENT_5 , com . amazonaws . services . IDENT_0 . document . IDENT_4 . IDENT_6 , "foo" , 1 , "foo" , 2 , "foo" , 3 , "foo" , 4 , "foo" , 5 ) ; int IDENT_7 = 0 ; java . util . Map < java . lang . String , com . amazonaws . services . IDENT_0 . model . IDENT_8 > IDENT_9 = null ; do { if ( IDENT_7 > 0 ) { java . lang . Thread . sleep ( ( ( 1 << IDENT_7 ) * 1000 ) ) ; } com . amazonaws . services . IDENT_0 . document . IDENT_10 IDENT_11 ; if ( ( IDENT_9 == null ) || ( ( IDENT_9 . size ( ) ) > 0 ) ) { IDENT_11 = IDENT_12 . METHOD_4 ( IDENT_2 ) ; } else { IDENT_11 = IDENT_12 . METHOD_5 ( IDENT_9 ) ; } java . util . Map < java . lang . String , java . util . List < com . amazonaws . services . IDENT_0 . document . IDENT_13 > > IDENT_14 = IDENT_11 . METHOD_6 ( ) ; for ( Map . Entry < java . lang . String , java . util . List < com . amazonaws . services . IDENT_0 . document . IDENT_13 > > e : IDENT_14 . entrySet ( ) ) { System . out . println ( ( STRING_5 + ( e . getKey ( ) ) ) ) ; for ( com . amazonaws . services . IDENT_0 . document . IDENT_13 item : e . getValue ( ) ) { System . out . println ( ( STRING_6 + item ) ) ; } "<AssertPlaceHolder>" ; } IDENT_9 = IDENT_11 . METHOD_7 ( ) ; System . out . println ( ( STRING_7 + IDENT_9 ) ) ; } while ( ( IDENT_9 . size ( ) ) > 0 ) ; } getValue ( ) { return IDENT_15 . METHOD_8 ( ) . METHOD_9 ( ( ( java . lang . String ) ( IDENT_15 . getValue ( ) ) ) ) ; }
org . junit . Assert . assertTrue ( ( ( e . getValue ( ) . size ( ) ) == 5 ) ) 