METHOD_0 ( ) { IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 expected = IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_4 . builder ( ) . METHOD_1 ( 10 ) . METHOD_2 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_5 . IDENT_6 ) . METHOD_3 ( STRING_0 ) . build ( ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_7 IDENT_8 = new IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . METHOD_4 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_9 . class , IDENT_10 ) ; IDENT_11 . setProperty ( IDENT_8 , STRING_1 , expected . getClass ( ) . getName ( ) ) ; IDENT_11 . setProperty ( IDENT_8 , STRING_2 , expected . METHOD_1 ) ; IDENT_11 . setProperty ( IDENT_8 , STRING_3 , expected . METHOD_2 ) ; IDENT_11 . setProperty ( IDENT_8 , STRING_4 , expected . METHOD_3 ) ; IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_9 actual = IDENT_8 . build ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_3 . IDENT_9 . class ) ; "<AssertPlaceHolder>" ; } build ( java . util . function . IDENT_12 [ ] ) { java . lang . reflect . Method IDENT_13 ; try { IDENT_13 = IDENT_14 . METHOD_5 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_15 . IDENT_16 ) ; } catch ( java . lang . IDENT_17 e ) { throw new java . lang . RuntimeException ( e ) ; } java . lang . Object source ; try { source = IDENT_13 . invoke ( null ) ; } catch ( java . lang . IDENT_18 | java . lang . reflect . IDENT_19 e ) { throw new java . lang . RuntimeException ( e ) ; } for ( Map . Entry < java . lang . String , java . lang . Object > setValue : values . entrySet ( ) ) { java . lang . Object IDENT_20 = METHOD_6 ( setValue ) ; java . lang . reflect . Method IDENT_21 = properties . get ( setValue . getKey ( ) ) . stream ( ) . filter ( ( t ) -> org . apache . commons . lang3 . IDENT_22 . METHOD_7 ( IDENT_20 . getClass ( ) , t . type ) ) . METHOD_8 ( ) . map ( ( a ) -> a . IDENT_13 ) . METHOD_9 ( ( ) -> new java . lang . IllegalStateException ( java . lang . String . format ( STRING_5 , setValue . getKey ( ) , IDENT_20 . getClass ( ) . getName ( ) ) ) ) ; try { source = IDENT_21 . invoke ( source , IDENT_20 ) ; } catch ( java . lang . IDENT_18 | java . lang . reflect . IDENT_19 e ) { throw new java . lang . RuntimeException ( e ) ; } } if ( IDENT_23 != null ) { for ( java . util . function . IDENT_12 < java . lang . Object , java . lang . Object > IDENT_21 : IDENT_23 ) { source = IDENT_21 . apply ( source ) ; } } java . lang . reflect . Method IDENT_24 ; try { IDENT_24 = IDENT_25 . METHOD_5 ( IDENT_0 . amazon . IDENT_1 . IDENT_2 . config . IDENT_15 . IDENT_26 ) ; return IDENT_24 . invoke ( source ) ; } catch ( java . lang . IDENT_18 | java . lang . IDENT_17 | java . lang . reflect . IDENT_19 e ) { throw new java . lang . RuntimeException ( e ) ; } }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . equalTo ( expected ) ) 