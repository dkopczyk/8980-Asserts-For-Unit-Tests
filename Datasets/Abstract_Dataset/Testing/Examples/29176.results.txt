METHOD_0 ( ) { com . amazonaws . services . IDENT_0 . IDENT_1 IDENT_2 = org . IDENT_3 . api . easymock . IDENT_4 . METHOD_1 ( com . amazonaws . services . IDENT_0 . IDENT_1 . class ) ; java . util . Map < java . lang . String , com . amazonaws . services . IDENT_0 . model . IDENT_5 > IDENT_6 = new java . util . HashMap < java . lang . String , com . amazonaws . services . IDENT_0 . model . IDENT_5 > ( ) ; IDENT_6 . put ( IDENT_7 . IDENT_8 , new com . amazonaws . services . IDENT_0 . model . METHOD_2 ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . resource ) ) ; IDENT_2 . METHOD_3 ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . table , IDENT_6 ) ; java . util . Map < java . lang . String , com . amazonaws . services . IDENT_0 . model . METHOD_2 > IDENT_13 = new java . util . HashMap < java . lang . String , com . amazonaws . services . IDENT_0 . model . METHOD_2 > ( ) ; IDENT_13 . put ( IDENT_7 . IDENT_8 , new com . amazonaws . services . IDENT_0 . model . METHOD_2 ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . resource ) ) ; IDENT_13 . put ( IDENT_14 . IDENT_15 , new com . amazonaws . services . IDENT_0 . model . METHOD_2 ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_16 ) ) ; com . amazonaws . services . IDENT_0 . model . IDENT_17 result = new com . amazonaws . services . IDENT_0 . model . METHOD_4 ( ) . METHOD_5 ( IDENT_13 ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_6 ( ) . andReturn ( result ) ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_7 ( ) ; java . lang . String IDENT_18 = com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_14 . METHOD_8 ( IDENT_2 , com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . table , com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . resource ) ; "<AssertPlaceHolder>" ; org . IDENT_3 . api . easymock . IDENT_4 . METHOD_9 ( ) ; } METHOD_8 ( com . amazonaws . services . IDENT_0 . IDENT_1 , java . lang . String , java . lang . String ) { java . lang . String IDENT_19 ; final java . util . Map < java . lang . String , com . amazonaws . services . IDENT_0 . model . METHOD_2 > IDENT_6 = new java . util . HashMap < java . lang . String , com . amazonaws . services . IDENT_0 . model . METHOD_2 > ( ) ; IDENT_6 . put ( IDENT_7 . IDENT_8 , new com . amazonaws . services . IDENT_0 . model . METHOD_2 ( resource ) ) ; final com . amazonaws . services . IDENT_0 . model . METHOD_4 result = IDENT_2 . METHOD_3 ( table , IDENT_6 ) ; final java . util . Map < java . lang . String , com . amazonaws . services . IDENT_0 . model . METHOD_2 > item = result . METHOD_3 ( ) ; if ( ( item != null ) && ( item . containsKey ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_14 . IDENT_15 ) ) ) { IDENT_19 = item . get ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_14 . IDENT_15 ) . METHOD_10 ( ) ; } else { IDENT_19 = null ; } return IDENT_19 ; }
org . junit . Assert . assertEquals ( com . amazonaws . services . IDENT_0 . json . IDENT_9 . IDENT_10 . IDENT_11 . IDENT_12 . IDENT_16 , IDENT_18 ) 