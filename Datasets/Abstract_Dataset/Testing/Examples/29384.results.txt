METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; conf . set ( IDENT_1 . IDENT_2 , IDENT_0 ) ; map = org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . METHOD_1 ( conf ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . apache . hadoop . IDENT_5 . IDENT_6 ) { java . util . Map < java . lang . String , java . lang . String > map = new java . util . HashMap ( ) ; java . lang . String IDENT_7 = IDENT_8 . get ( IDENT_1 . IDENT_9 ) ; if ( ( IDENT_7 == null ) || ( IDENT_7 . isEmpty ( ) ) ) { org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . LOG . warn ( STRING_1 ) ; return map ; } java . lang . String [ ] IDENT_10 = IDENT_7 . split ( STRING_2 ) ; java . lang . String [ ] types = org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . METHOD_2 ( IDENT_8 . get ( IDENT_1 . IDENT_2 ) , STRING_3 ) ; if ( types == null ) { org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . LOG . warn ( STRING_4 ) ; return map ; } if ( ( IDENT_10 . length ) != ( types . length ) ) { org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . LOG . warn ( ( ( ( STRING_5 + ( IDENT_10 . length ) ) + STRING_6 ) + ( types . length ) ) ) ; return map ; } for ( int i = 0 ; i < ( IDENT_10 . length ) ; i ++ ) { map . put ( IDENT_10 [ i ] , types [ i ] ) ; } org . apache . hadoop . hive . IDENT_3 . util . IDENT_4 . LOG . debug ( ( STRING_7 + map ) ) ; return map ; }
org . junit . Assert . assertTrue ( map . isEmpty ( ) ) 