METHOD_0 ( ) { java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_3 = new java . util . ArrayList ( ) ; org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_4 = IDENT_2 . IDENT_5 ; for ( int i = 0 ; i < 8 ; i ++ ) { org . IDENT_0 . IDENT_1 . IDENT_2 [ ] split = IDENT_4 . split ( ) ; IDENT_4 = split [ 0 ] ; IDENT_3 . add ( split [ 1 ] ) ; } IDENT_3 . add ( IDENT_4 ) ; int [ ] IDENT_6 = new int [ IDENT_3 . size ( ) ] ; for ( int i = 0 ; i < ( IDENT_6 . length ) ; i ++ ) { IDENT_6 [ i ] = IDENT_3 . get ( i ) . METHOD_1 ( ) ; } for ( org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_7 : IDENT_3 ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( int , int [ ] ) { org . IDENT_0 . IDENT_1 . Arrays . METHOD_3 ( IDENT_8 ) ; int IDENT_9 = ( IDENT_10 == 0 ) ? 1 : ( java . lang . Integer . METHOD_4 ( IDENT_10 ) ) << 1 ; while ( ( org . IDENT_0 . IDENT_1 . Arrays . METHOD_5 ( IDENT_8 , ( IDENT_9 | IDENT_10 ) ) ) >= 0 ) { IDENT_9 = IDENT_9 << 1 ; } int IDENT_11 = IDENT_9 - 1 ; return new org . IDENT_0 . IDENT_1 . METHOD_6 ( IDENT_10 , IDENT_11 ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , org . IDENT_0 . IDENT_1 . METHOD_6 . METHOD_2 ( IDENT_7 . METHOD_1 ( ) , IDENT_6 ) ) 