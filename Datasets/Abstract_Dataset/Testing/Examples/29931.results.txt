METHOD_0 ( ) { final tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_1 IDENT_2 = new tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . METHOD_1 ( IDENT_3 , IDENT_4 ) ; java . util . ArrayList < tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_5 > IDENT_6 = new java . util . ArrayList ( ) ; IDENT_6 . add ( IDENT_7 ) ; IDENT_6 . add ( IDENT_8 ) ; tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_9 . METHOD_2 ( IDENT_2 , STRING_0 , IDENT_6 ) ; new tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . METHOD_3 ( tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . METHOD_1 . class ) { { tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_9 . invoke ( IDENT_2 , STRING_1 ) ; result = true ; IDENT_7 . METHOD_4 ( ) ; result = true ; IDENT_8 . METHOD_4 ( ) ; result = true ; } } ; boolean result = tests . unit . com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_9 . invoke ( IDENT_2 , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { java . lang . Boolean IDENT_10 = true ; for ( Map . Entry < com . microsoft . azure . sdk . iot . device . IDENT_11 . IDENT_11 , com . microsoft . azure . sdk . iot . device . transport . IDENT_0 . IDENT_12 > entry : IDENT_13 . entrySet ( ) ) { if ( ! ( entry . getValue ( ) . METHOD_4 ( ) ) ) { IDENT_10 = false ; break ; } } return IDENT_10 ; }
org . junit . Assert . assertTrue ( result ) 