METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; java . lang . String IDENT_2 = null ; java . lang . String IDENT_3 = STRING_2 ; java . lang . String IDENT_4 = ( ( ( STRING_3 + IDENT_1 ) + STRING_4 ) + IDENT_0 ) + STRING_5 ; java . lang . String IDENT_5 = ( STRING_3 + IDENT_1 ) + STRING_6 ; new tests . unit . com . microsoft . azure . sdk . iot . service . METHOD_1 ( ) { { IDENT_6 . METHOD_2 ( ) ; result = IDENT_1 ; device . METHOD_3 ( ) ; result = IDENT_0 ; device . METHOD_4 ( ) ; result = IDENT_3 ; device . METHOD_5 ( ) ; result = IDENT_2 ; } } ; METHOD_6 ( IDENT_5 , IDENT_0 ) ; tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_7 IDENT_8 = tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_7 . METHOD_7 ( IDENT_5 ) ; tests . unit . com . microsoft . azure . sdk . iot . service . IDENT_9 IDENT_10 = IDENT_8 . METHOD_8 ( IDENT_0 ) ; java . lang . String IDENT_11 = IDENT_8 . METHOD_9 ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( com . microsoft . azure . sdk . iot . service . IDENT_9 ) { if ( device == null ) { throw new java . lang . IllegalArgumentException ( STRING_7 ) ; } if ( ( com . microsoft . azure . sdk . iot . service . IDENT_12 . METHOD_10 ( device . METHOD_3 ( ) ) ) || ( ( com . microsoft . azure . sdk . iot . service . IDENT_12 . METHOD_10 ( device . METHOD_5 ( ) ) ) && ( com . microsoft . azure . sdk . iot . service . IDENT_12 . METHOD_10 ( device . METHOD_4 ( ) ) ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } java . lang . StringBuilder IDENT_13 = new java . lang . StringBuilder ( ) ; IDENT_13 . append ( java . lang . String . format ( STRING_9 , IDENT_6 . METHOD_2 ( ) ) ) ; IDENT_13 . append ( java . lang . String . format ( STRING_10 , device . METHOD_3 ( ) ) ) ; if ( ( device . METHOD_5 ( ) ) == null ) { IDENT_13 . append ( STRING_11 ) ; } else { IDENT_13 . append ( java . lang . String . format ( STRING_12 , device . METHOD_5 ( ) ) ) ; } return IDENT_13 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_11 ) 