METHOD_0 ( ) { com . IDENT_0 . auth . IDENT_1 IDENT_2 = com . IDENT_0 . auth . IDENT_3 . METHOD_1 ( ) ; com . IDENT_0 . http . IDENT_4 IDENT_5 = com . IDENT_0 . http . IDENT_4 . IDENT_6 ; java . lang . String IDENT_7 = STRING_0 4 ; com . IDENT_0 . auth . IDENT_8 IDENT_9 = mock ( com . IDENT_0 . auth . IDENT_8 . class ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_10 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( STRING_1 5 , STRING_1 8 ) ; put ( STRING_2 , STRING_1 3 ) ; put ( STRING_0 , null ) ; } } ; java . util . Map < java . lang . String , java . lang . String > headers = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( STRING_3 , STRING_0 1 ) ; put ( STRING_4 , STRING_1 4 ) ; put ( STRING_0 0 , STRING_5 ) ; put ( STRING_0 6 , STRING_0 2 ) ; put ( STRING_6 , STRING_1 1 ) ; put ( STRING_0 3 , STRING_1 ) ; put ( STRING_1 7 , STRING_0 9 ) ; } } ; java . util . Map < java . lang . String , java . lang . String > IDENT_11 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) { { put ( STRING_0 5 , STRING_0 8 ) ; put ( STRING_0 7 , STRING_1 6 ) ; } } ; java . lang . String IDENT_12 = IDENT_2 . METHOD_2 ( IDENT_5 , IDENT_7 , IDENT_9 , IDENT_10 , headers , IDENT_11 ) ; java . lang . String expected = STRING_1 2 + ( ( ( ( STRING_7 + STRING_1 0 ) + STRING_1 9 ) + STRING_8 ) + STRING_9 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( com . IDENT_0 . http . IDENT_4 , java . lang . String , com . IDENT_0 . auth . IDENT_8 , java . util . Map , java . util . Map , java . util . Map ) { java . lang . String [ ] IDENT_13 = IDENT_10 . METHOD_3 ( ) . toArray ( new java . lang . String [ ] { } ) ; java . util . Arrays . METHOD_4 ( IDENT_13 ) ; java . lang . StringBuilder IDENT_14 = new java . lang . StringBuilder ( ) ; try { for ( java . lang . String key : IDENT_13 ) { IDENT_14 . append ( STRING_10 ) . append ( com . IDENT_0 . auth . IDENT_15 . METHOD_5 ( key ) ) . append ( STRING_11 ) . append ( com . IDENT_0 . auth . IDENT_15 . METHOD_5 ( IDENT_10 . get ( key ) ) ) ; } java . lang . StringBuilder IDENT_12 = new java . lang . StringBuilder ( ) ; IDENT_12 . append ( method . toString ( ) ) ; IDENT_12 . append ( com . IDENT_0 . auth . IDENT_16 . IDENT_17 ) ; IDENT_12 . append ( com . IDENT_0 . auth . IDENT_15 . METHOD_5 ( "/" ) ) ; IDENT_12 . append ( com . IDENT_0 . auth . IDENT_16 . IDENT_17 ) ; IDENT_12 . append ( com . IDENT_0 . auth . IDENT_15 . METHOD_5 ( IDENT_14 . toString ( ) . substring ( 1 ) ) ) ; return IDENT_12 . toString ( ) ; } catch ( java . io . IDENT_18 exp ) { throw new java . lang . RuntimeException ( STRING_12 ) ; } }
org . junit . Assert . assertEquals ( expected , IDENT_12 ) 