METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( com . microsoft . azure . management . IDENT_0 ) { final java . lang . String IDENT_1 = com . microsoft . azure . management . IDENT_2 . Utils . METHOD_2 ( STRING_0 ) ; final java . lang . String IDENT_3 = com . microsoft . azure . management . IDENT_2 . Utils . METHOD_2 ( STRING_1 6 ) ; try { System . out . println ( STRING_2 2 ) ; com . microsoft . azure . management . storage . IDENT_4 IDENT_5 = azure . METHOD_3 ( ) . METHOD_4 ( IDENT_1 ) . METHOD_5 ( IDENT_6 . IDENT_7 ) . METHOD_6 ( IDENT_3 ) . METHOD_7 ( ) . METHOD_8 ( IDENT_8 . IDENT_9 ) . create ( ) ; System . out . println ( STRING_1 8 ) ; com . microsoft . azure . management . IDENT_2 . Utils . METHOD_9 ( IDENT_5 ) ; java . util . List < com . microsoft . azure . management . storage . IDENT_10 > IDENT_11 = IDENT_5 . METHOD_10 ( ) ; final java . lang . String IDENT_12 = java . lang . String . format ( STRING_3 9 , IDENT_5 . name ( ) , IDENT_11 . get ( 0 ) . value ( ) ) ; com . microsoft . azure . management . monitor . IDENT_2 . IDENT_13 . METHOD_11 ( IDENT_12 ) ; org . joda . time . IDENT_14 IDENT_15 = org . joda . time . IDENT_14 . now ( ) ; for ( com . microsoft . azure . management . monitor . IDENT_16 IDENT_17 : azure . METHOD_12 ( ) . METHOD_13 ( IDENT_5 . id ( ) ) ) { if ( IDENT_17 . name ( ) . METHOD_14 ( ) . equalsIgnoreCase ( STRING_4 ) ) { com . microsoft . azure . management . monitor . IDENT_18 IDENT_19 = IDENT_17 . METHOD_15 ( ) . METHOD_16 ( IDENT_15 . METHOD_17 ( 7 ) ) . METHOD_18 ( IDENT_15 ) . METHOD_19 ( STRING_5 ) . METHOD_20 ( org . joda . time . IDENT_20 . METHOD_21 ( 5 ) ) . METHOD_22 ( STRING_3 7 ) . execute ( ) ; System . out . println ( ( ( STRING_2 1 + ( IDENT_5 . id ( ) ) ) + STRING_6 ) ) ; System . out . println ( ( STRING_3 + ( IDENT_19 . METHOD_23 ( ) ) ) ) ; System . out . println ( ( STRING_7 + ( IDENT_19 . METHOD_24 ( ) ) ) ) ; System . out . println ( ( STRING_1 7 + ( IDENT_19 . METHOD_25 ( ) ) ) ) ; System . out . println ( ( STRING_3 3 + ( IDENT_19 . METHOD_26 ( ) ) ) ) ; for ( com . microsoft . azure . management . monitor . IDENT_21 IDENT_22 : IDENT_19 . metrics ( ) ) { System . out . println ( ( STRING_1 + ( IDENT_22 . name ( ) . METHOD_14 ( ) ) ) ) ; System . out . println ( ( STRING_1 5 + ( IDENT_22 . type ( ) ) ) ) ; System . out . println ( ( STRING_3 8 + ( IDENT_22 . unit ( ) ) ) ) ; System . out . println ( STRING_3 4 ) ; for ( com . microsoft . azure . management . monitor . IDENT_23 IDENT_24 : IDENT_22 . METHOD_27 ( ) ) { System . out . println ( STRING_3 1 ) ; for ( com . microsoft . azure . management . monitor . IDENT_25 metadata : IDENT_24 . METHOD_28 ( ) ) { System . out . println ( ( ( ( STRING_8 + ( metadata . name ( ) . METHOD_14 ( ) ) ) + STRING_2 4 ) + ( metadata . value ( ) ) ) ) ; } System . out . println ( STRING_3 2 ) ; for ( com . microsoft . azure . management . monitor . IDENT_26 data : IDENT_24 . data ( ) ) { System . out . println ( ( ( ( ( ( ( ( ( ( ( ( STRING_8 + ( data . METHOD_29 ( ) ) ) + STRING_3 6 ) + ( data . METHOD_30 ( ) ) ) + STRING_2 ) + ( data . METHOD_31 ( ) ) ) + STRING_1 3 ) + ( data . METHOD_32 ( ) ) ) + STRING_9 ) + ( data . METHOD_33 ( ) ) ) + STRING_2 0 ) + ( data . count ( ) ) ) ) ; } } } break ; } } com . microsoft . azure . IDENT_27 < com . microsoft . azure . management . monitor . IDENT_28 > IDENT_29 = azure . METHOD_34 ( ) . METHOD_15 ( ) . METHOD_16 ( IDENT_15 . METHOD_17 ( 7 ) ) . METHOD_18 ( IDENT_15 ) . METHOD_35 ( ) . METHOD_36 ( IDENT_5 . id ( ) ) . execute ( ) ; System . out . println ( STRING_1 9 ) ; for ( com . microsoft . azure . management . monitor . IDENT_28 event : IDENT_29 ) { if ( ( event . METHOD_37 ( ) ) != null ) { System . out . println ( ( STRING_1 0 + ( event . METHOD_37 ( ) . METHOD_14 ( ) ) ) ) ; } if ( ( event . METHOD_38 ( ) ) != null ) { System . out . println ( ( STRING_1 4 + ( event . METHOD_38 ( ) . METHOD_14 ( ) ) ) ) ; } System . out . println ( ( STRING_1 1 + ( event . METHOD_39 ( ) ) ) ) ; System . out . println ( ( STRING_1 2 + ( event . METHOD_40 ( ) ) ) ) ; System . out . println ( ( STRING_2 3 + ( event . METHOD_41 ( ) ) ) ) ; } return true ; } catch ( java . lang . Exception f ) { System . out . println ( f . getMessage ( ) ) ; f . printStackTrace ( ) ; } finally { if ( ( azure . METHOD_42 ( ) . METHOD_43 ( IDENT_3 ) ) != null ) { System . out . println ( ( STRING_3 0 + IDENT_3 ) ) ; azure . METHOD_42 ( ) . METHOD_44 ( IDENT_3 ) ; System . out . println ( ( STRING_3 5 + IDENT_3 ) ) ; } else { System . out . println ( STRING_2 5 ) ; } } return false ; }
org . junit . Assert . assertTrue ( com . microsoft . azure . management . monitor . IDENT_2 . IDENT_13 . METHOD_1 ( azure ) ) 