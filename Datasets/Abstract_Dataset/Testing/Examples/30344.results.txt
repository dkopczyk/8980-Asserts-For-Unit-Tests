METHOD_0 ( ) { java . util . concurrent . IDENT_0 IDENT_1 = new java . util . concurrent . METHOD_1 ( 1 ) ; java . util . concurrent . atomic . IDENT_2 < java . net . IDENT_3 > IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( ) ; java . net . IDENT_5 IDENT_6 = new java . net . METHOD_3 ( 0 ) ; try { io . IDENT_7 . IDENT_8 . METHOD_4 ( ( ) -> { IDENT_1 . METHOD_5 ( ) ; java . net . IDENT_3 IDENT_9 = IDENT_6 . accept ( ) ; IDENT_4 . set ( IDENT_9 ) ; java . lang . Thread . sleep ( INT_0 ) ; byte [ ] bytes = new byte [ INT_1 ] ; int n = IDENT_9 . METHOD_6 ( ) . read ( bytes ) ; System . out . println ( new java . lang . String ( bytes , 0 , n , IDENT_10 . UTF_8 ) ) ; java . lang . String response = STRING_0 + ( ( ( STRING_1 + STRING_2 ) + STRING_3 ) + STRING_4 ) ; java . io . IDENT_11 out = IDENT_9 . METHOD_7 ( ) ; out . write ( response . getBytes ( ) ) ; out . METHOD_8 ( ) ; IDENT_9 . close ( ) ; return 1 ; } ) . METHOD_9 ( io . IDENT_7 . IDENT_12 . IDENT_13 . io ( ) ) . METHOD_10 ( ) ; IDENT_1 . METHOD_11 ( ) ; com . azure . common . http . IDENT_14 client = com . azure . common . http . IDENT_14 . METHOD_12 ( ) ; com . azure . common . http . IDENT_15 request = new com . azure . common . http . METHOD_13 ( IDENT_16 . IDENT_17 , new java . net . URL ( ( ( STRING_5 + ( IDENT_6 . METHOD_14 ( ) ) ) + STRING_6 ) ) ) ; com . azure . common . http . IDENT_18 response = client . METHOD_15 ( request ) . block ( ) ; "<AssertPlaceHolder>" ; System . out . println ( STRING_7 ) ; IDENT_19 . test . IDENT_20 . create ( response . METHOD_16 ( ) ) . METHOD_17 ( java . io . IOException . class ) ; } finally { IDENT_6 . close ( ) ; } } METHOD_18 ( ) { return this . METHOD_18 ; }
org . junit . Assert . assertEquals ( 200 , response . METHOD_18 ( ) ) 