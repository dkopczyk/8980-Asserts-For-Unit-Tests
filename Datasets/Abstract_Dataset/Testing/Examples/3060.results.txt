METHOD_0 ( ) { com . IDENT_0 . http . IDENT_1 request = mock ( com . IDENT_0 . http . IDENT_1 . class ) ; org . apache . http . IDENT_2 proxy = com . IDENT_0 . http . IDENT_3 . METHOD_1 ( null , STRING_0 , request ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String , com . IDENT_0 . http . IDENT_1 ) { try { java . lang . String IDENT_4 = ( ! ( com . IDENT_0 . utils . StringUtils . isEmpty ( IDENT_5 ) ) ) ? IDENT_5 : IDENT_6 ; if ( com . IDENT_0 . utils . StringUtils . isEmpty ( IDENT_4 ) ) { return null ; } java . net . URL IDENT_7 = new java . net . URL ( IDENT_4 ) ; java . lang . String IDENT_8 = IDENT_7 . METHOD_2 ( ) ; if ( IDENT_8 != null ) { byte [ ] bytes = IDENT_8 . getBytes ( STRING_1 ) ; java . lang . String auth = javax . xml . IDENT_9 . IDENT_10 . METHOD_3 ( bytes ) ; request . METHOD_4 ( STRING_2 , ( STRING_3 + auth ) ) ; } return new org . apache . http . METHOD_5 ( IDENT_7 . METHOD_6 ( ) , IDENT_7 . METHOD_7 ( ) , IDENT_7 . METHOD_8 ( ) ) ; } catch ( java . io . IOException e ) { throw new com . IDENT_0 . exceptions . METHOD_9 ( STRING_4 , STRING_5 ) ; } }
org . junit . Assert . assertNotNull ( proxy ) 