METHOD_0 ( ) { final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_5 . METHOD_1 ( ) ; try { IDENT_4 . METHOD_2 ( STRING_0 ) ; IDENT_4 . METHOD_2 ( STRING_1 ) ; IDENT_4 . METHOD_2 ( STRING_2 ) ; final net . IDENT_0 . IDENT_1 . IDENT_2 . HashMap < java . lang . String , net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 > IDENT_7 = new net . IDENT_0 . IDENT_1 . IDENT_2 . HashMap ( ) ; final java . util . concurrent . IDENT_8 IDENT_9 = new java . util . concurrent . METHOD_3 ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 , net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_11 , INT_0 , TimeUnit . IDENT_12 , new net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_4 ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_13 ) , new net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_5 ( ) ) ; final net . IDENT_0 . IDENT_1 . IDENT_2 . ArrayList < net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_14 < ? > > IDENT_15 = new net . IDENT_0 . IDENT_1 . IDENT_2 . ArrayList ( ) ; for ( int i = 0 ; i < ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 . IDENT_16 ) ; i ++ ) { final java . lang . String uri = ( ( i + STRING_3 ) + ( net . IDENT_0 . IDENT_1 . IDENT_2 . UUID . METHOD_6 ( ) ) ) + STRING_4 ; final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 item = METHOD_7 ( ( ( STRING_5 + uri ) + STRING_6 ) ) ; IDENT_7 . put ( uri , item ) ; } IDENT_7 . METHOD_8 ( ( key , value ) -> IDENT_15 . add ( IDENT_9 . METHOD_9 ( new net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_10 ( key , value ) ) ) ) ; for ( final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_14 < ? > future : IDENT_15 ) future . get ( ) ; for ( final java . lang . String uri : IDENT_7 . METHOD_11 ( ) ) "<AssertPlaceHolder>" ; } finally { IDENT_4 . METHOD_2 ( STRING_7 ) ; } } METHOD_12 ( java . lang . String ) { final net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_17 rs = IDENT_5 . METHOD_1 ( ) . METHOD_13 ( ( ( STRING_8 + uri ) + STRING_9 ) ) ; rs . next ( ) ; return rs . METHOD_14 ( ) ; }
org . junit . Assert . assertTrue ( METHOD_12 ( uri ) ) 