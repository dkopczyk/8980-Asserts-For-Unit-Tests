METHOD_0 ( ) { final org . IDENT_0 . util . http . IDENT_1 req = new org . IDENT_0 . util . http . METHOD_1 ( ) ; req . IDENT_2 = true ; req . IDENT_3 . put ( STRING_0 , STRING_1 ) ; req . IDENT_3 . put ( STRING_2 , STRING_2 ) ; final org . IDENT_0 . http . IDENT_4 IDENT_5 = new org . IDENT_0 . http . METHOD_2 ( ) ; IDENT_5 . headers . put ( STRING_3 , STRING_4 ) ; IDENT_5 . IDENT_6 . put ( STRING_0 , STRING_4 ) ; IDENT_5 . IDENT_7 . add ( org . IDENT_0 . http . IDENT_8 . get ( ( ( byte ) ( - 1 ) ) ) ) ; req . IDENT_9 . add ( IDENT_5 ) ; final org . IDENT_0 . http . ByteArrayOutputStream out = org . IDENT_0 . http . IDENT_10 . METHOD_3 ( ) ; org . IDENT_0 . http . IDENT_11 . METHOD_4 ( out , req ) ; final org . IDENT_0 . http . IDENT_12 IDENT_13 = new org . IDENT_0 . http . METHOD_5 ( ) ; IDENT_13 . add ( token ( ( ( ( ( STRING_5 + ( org . IDENT_0 . http . IDENT_10 . IDENT_14 ) ) + STRING_6 ) + ( org . IDENT_0 . http . IDENT_10 . IDENT_14 ) ) + ( org . IDENT_0 . http . IDENT_10 . IDENT_14 ) ) ) ) ; IDENT_13 . add ( ( - 1 ) ) . add ( token ( ( ( ( org . IDENT_0 . http . IDENT_10 . IDENT_14 ) + STRING_7 ) + ( org . IDENT_0 . http . IDENT_10 . IDENT_14 ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( ) { final int [ ] IDENT_15 = new int [ header . size ( ) ] ; final int size = header . size ( ) ; for ( int s = 0 ; s < size ; ++ s ) { for ( final org . IDENT_0 . util . IDENT_16 e : IDENT_17 ) { IDENT_15 [ s ] = java . lang . Math . max ( IDENT_15 [ s ] , e . get ( s ) . length ) ; } IDENT_15 [ s ] = java . lang . Math . max ( IDENT_15 [ s ] , header . get ( s ) . length ) ; } final org . IDENT_0 . util . IDENT_18 IDENT_19 = new org . IDENT_0 . util . METHOD_7 ( ) ; for ( int IDENT_20 = 0 ; IDENT_20 < size ; ++ IDENT_20 ) { final byte [ ] s = header . get ( IDENT_20 ) ; final int is = ( ( IDENT_15 [ IDENT_20 ] ) - ( s . length ) ) + ( org . IDENT_0 . util . IDENT_21 . IDENT_22 ) ; IDENT_19 . add ( s ) ; for ( int i = 0 ; i < is ; ++ i ) IDENT_19 . add ( STRING_8 ) ; } IDENT_19 . add ( org . IDENT_0 . util . IDENT_23 ) ; for ( int IDENT_20 = 0 ; IDENT_20 < size ; ++ IDENT_20 ) { for ( int i = 0 ; i < ( ( IDENT_15 [ IDENT_20 ] ) + ( ( IDENT_20 + 1 ) == size ? 0 : org . IDENT_0 . util . IDENT_21 . IDENT_22 ) ) ; ++ i ) IDENT_19 . add ( STRING_9 ) ; } IDENT_19 . add ( org . IDENT_0 . util . IDENT_23 ) ; for ( final org . IDENT_0 . util . IDENT_16 e : IDENT_17 ) { for ( int IDENT_20 = 0 ; IDENT_20 < size ; ++ IDENT_20 ) { final byte [ ] s = e . get ( IDENT_20 ) ; final int is = ( IDENT_15 [ IDENT_20 ] ) - ( s . length ) ; if ( ( IDENT_20 < ( IDENT_24 . size ( ) ) ) && ( IDENT_24 . get ( IDENT_20 ) ) ) { for ( int i = 0 ; i < is ; ++ i ) IDENT_19 . add ( STRING_8 ) ; IDENT_19 . add ( s ) ; } else { IDENT_19 . add ( s ) ; for ( int i = 0 ; i < is ; ++ i ) IDENT_19 . add ( STRING_8 ) ; } for ( int i = 0 ; i < ( org . IDENT_0 . util . IDENT_21 . IDENT_22 ) ; ++ i ) IDENT_19 . add ( STRING_8 ) ; } IDENT_19 . add ( org . IDENT_0 . util . IDENT_23 ) ; } if ( ( description ) != null ) { IDENT_19 . add ( org . IDENT_0 . util . IDENT_23 ) . METHOD_8 ( description , IDENT_17 . size ( ) ) . add ( org . IDENT_0 . util . IDENT_25 ) ; } return IDENT_19 . METHOD_6 ( ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_13 . METHOD_6 ( ) , out . toByteArray ( ) ) 