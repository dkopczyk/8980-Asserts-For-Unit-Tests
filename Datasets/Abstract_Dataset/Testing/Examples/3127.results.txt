METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_3 request = new com . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_1 ( ) ; java . lang . String IDENT_4 = STRING_0 ; com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_5 IDENT_6 = new com . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( IDENT_4 ) ; java . lang . String IDENT_7 = STRING_1 ; com . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 IDENT_8 = new com . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( IDENT_7 ) ; { com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_9 [ ] schema = com . IDENT_0 . IDENT_1 . IDENT_2 . common . IDENT_10 . METHOD_3 ( 5 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > IDENT_12 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { IDENT_12 . add ( com . IDENT_0 . IDENT_1 . IDENT_2 . common . IDENT_10 . METHOD_4 ( schema ) ) ; } for ( com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 IDENT_13 : IDENT_12 ) { IDENT_6 . METHOD_5 ( IDENT_13 ) ; } request . METHOD_6 ( IDENT_6 ) ; } { com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_9 [ ] schema = com . IDENT_0 . IDENT_1 . IDENT_2 . common . IDENT_10 . METHOD_3 ( 5 ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > IDENT_12 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 > ( ) ; for ( int i = 0 ; i < 50 ; i ++ ) { IDENT_12 . add ( com . IDENT_0 . IDENT_1 . IDENT_2 . common . IDENT_10 . METHOD_4 ( schema ) ) ; } for ( com . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_11 IDENT_13 : IDENT_12 ) { IDENT_8 . METHOD_5 ( IDENT_13 ) ; } request . METHOD_6 ( IDENT_8 ) ; } "<AssertPlaceHolder>" ; METHOD_7 ( request , IDENT_6 , IDENT_4 ) ; METHOD_7 ( request , IDENT_8 , IDENT_7 ) ; } METHOD_8 ( ) { return IDENT_14 ; }
org . junit . Assert . assertEquals ( request . METHOD_8 ( ) . size ( ) , 2 ) 