METHOD_0 ( ) { java . util . Map < java . lang . String , java . util . IDENT_0 < java . lang . String , java . util . IDENT_0 < java . lang . String , org . batfish . datamodel . IDENT_1 > > > IDENT_2 = com . google . common . collect . ImmutableMap . of ( STRING_0 , com . google . common . collect . IDENT_3 . of ( STRING_1 , com . google . common . collect . IDENT_3 . of ( STRING_2 , new org . batfish . datamodel . METHOD_1 ( com . google . common . collect . IDENT_4 . of ( 1 ) , 0 ) , STRING_3 , new org . batfish . datamodel . METHOD_1 ( com . google . common . collect . IDENT_4 . of ( 2 , 3 ) , 0 ) ) ) ) ; java . util . List < org . batfish . datamodel . table . IDENT_5 > expected = com . google . common . collect . ImmutableList . of ( org . batfish . IDENT_6 . IDENT_7 . IDENT_8 , org . batfish . datamodel . table . IDENT_5 . of ( org . batfish . IDENT_6 . IDENT_9 , STRING_1 , org . batfish . IDENT_6 . IDENT_10 , STRING_3 , org . batfish . IDENT_6 . IDENT_11 , new org . batfish . datamodel . collections . METHOD_2 ( STRING_0 , com . google . common . collect . IDENT_4 . of ( 2 , 3 ) ) ) ) ; java . util . List < org . batfish . datamodel . table . IDENT_5 > IDENT_12 = org . batfish . IDENT_6 . IDENT_13 . IDENT_14 . METHOD_3 ( IDENT_2 . entrySet ( ) . iterator ( ) . next ( ) ) ; "<AssertPlaceHolder>" ; } next ( ) { if ( ( IDENT_15 ) == null ) { METHOD_4 ( ) ; } net . sf . IDENT_16 . IDENT_17 result = IDENT_15 ; IDENT_15 = null ; return result ; }
org . junit . Assert . assertThat ( IDENT_12 , org . hamcrest . Matchers . equalTo ( expected ) ) 