METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 algorithm = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_4 > IDENT_5 = com . google . common . collect . Lists . newArrayList ( mock ( com . IDENT_0 . IDENT_1 . IDENT_4 . class ) , mock ( com . IDENT_0 . IDENT_1 . IDENT_4 . class ) , mock ( com . IDENT_0 . IDENT_1 . IDENT_4 . class ) , mock ( com . IDENT_0 . IDENT_1 . IDENT_4 . class ) , mock ( com . IDENT_0 . IDENT_1 . IDENT_4 . class ) ) ; java . util . Set < com . IDENT_0 . IDENT_1 . IDENT_4 > IDENT_6 = com . google . common . collect . IDENT_7 . METHOD_2 ( ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { IDENT_6 . add ( algorithm . METHOD_3 ( IDENT_5 , null ) ) ; } "<AssertPlaceHolder>" ; } METHOD_3 ( java . util . Map , com . google . common . hash . IDENT_8 ) { for ( java . lang . String IDENT_9 : com . google . common . collect . IDENT_7 . METHOD_4 ( IDENT_10 . METHOD_5 ( ) , IDENT_11 . METHOD_5 ( ) ) ) { for ( java . lang . Integer hash : METHOD_6 ( IDENT_9 ) ) { IDENT_12 . remove ( hash ) ; } } for ( java . lang . String IDENT_9 : com . google . common . collect . IDENT_7 . METHOD_4 ( IDENT_11 . METHOD_5 ( ) , IDENT_10 . METHOD_5 ( ) ) ) { for ( java . lang . Integer hash : METHOD_6 ( IDENT_9 ) ) { IDENT_12 . put ( hash , IDENT_9 ) ; } } if ( ! ( IDENT_10 . equals ( IDENT_11 ) ) ) { IDENT_10 = IDENT_11 ; } Map . Entry < java . lang . Integer , java . lang . String > entry = IDENT_12 . METHOD_7 ( IDENT_13 . METHOD_8 ( ) ) ; if ( entry == null ) { entry = IDENT_12 . METHOD_9 ( ) ; } return IDENT_10 . get ( entry . getValue ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_5 . size ( ) , IDENT_6 . size ( ) ) 