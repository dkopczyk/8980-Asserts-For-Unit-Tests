METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( any ( com . IDENT_1 . IDENT_2 . pool . Exception . class ) ) ) . thenReturn ( false ) ; com . IDENT_1 . IDENT_2 . pool . IDENT_3 < com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_5 > pool = METHOD_2 ( com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_6 ) ; com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_5 service = pool . execute ( com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_7 , com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_8 ) ; try { pool . execute ( com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_7 , new com . IDENT_1 . IDENT_2 . IDENT_9 < com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_5 , java . lang . IDENT_10 > ( ) { @ com . IDENT_1 . IDENT_2 . pool . Override public com . IDENT_1 . IDENT_2 . pool . IDENT_10 call ( com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_5 service ) throws com . IDENT_1 . IDENT_2 . exceptions . IDENT_11 { throw new java . lang . METHOD_3 ( ) ; } } ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . METHOD_3 expected ) { } "<AssertPlaceHolder>" ; } execute ( com . IDENT_1 . IDENT_2 . IDENT_12 , com . IDENT_1 . IDENT_2 . IDENT_9 ) { return IDENT_13 . METHOD_4 ( new java . util . concurrent . IDENT_14 < IDENT_15 > ( ) { @ com . IDENT_1 . IDENT_2 . pool . Override public IDENT_15 call ( ) throws com . IDENT_1 . IDENT_2 . pool . Exception { return IDENT_16 . execute ( IDENT_17 , IDENT_18 ) ; } } ) ; }
org . junit . Assert . assertSame ( service , pool . execute ( com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_7 , com . IDENT_1 . IDENT_2 . pool . IDENT_4 . IDENT_8 ) ) 