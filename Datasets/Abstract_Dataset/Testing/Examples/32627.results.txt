METHOD_0 ( ) { ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_5 = this . IDENT_6 ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . IDENT_8 . classes . IDENT_9 IDENT_10 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . IDENT_8 . classes . IDENT_9 . getInstance ( IDENT_5 . METHOD_1 ( 2 ) ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_12 IDENT_13 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_12 . getInstance ( IDENT_5 , new ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . interfaces . Element [ ] { IDENT_5 . METHOD_1 ( 4 ) , IDENT_5 . METHOD_1 ( 2 ) , IDENT_5 . METHOD_1 ( 8 ) , IDENT_5 . METHOD_1 ( 16 ) } ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . interfaces . Element IDENT_14 = IDENT_5 . METHOD_1 ( 4 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_15 . IDENT_16 . interfaces . IDENT_17 IDENT_18 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_15 . classes . IDENT_19 . METHOD_2 ( IDENT_10 , IDENT_13 . METHOD_3 ( ) . METHOD_4 ( ) , IDENT_20 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_15 . classes . IDENT_19 IDENT_21 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_15 . classes . IDENT_19 . getInstance ( IDENT_18 , IDENT_10 , IDENT_14 , IDENT_13 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_22 IDENT_23 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_22 . getInstance ( IDENT_5 . METHOD_1 ( 8 ) , IDENT_5 . METHOD_1 ( INT_0 ) ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . interfaces . Element IDENT_24 = IDENT_5 . METHOD_5 ( ) . METHOD_1 ( 3 ) ; int index = 1 ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_22 IDENT_25 = IDENT_21 . METHOD_6 ( IDENT_24 , index ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . classes . IDENT_26 IDENT_27 = IDENT_21 . METHOD_7 ( IDENT_25 , IDENT_23 ) ; boolean v = IDENT_21 . verify ( IDENT_27 , IDENT_23 ) ; "<AssertPlaceHolder>" ; } verify ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . interfaces . Element , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_11 . interfaces . Element ) { if ( ( ! ( this . METHOD_8 ( ) . contains ( IDENT_27 ) ) ) || ( ! ( this . METHOD_9 ( ) . contains ( IDENT_23 ) ) ) ) { throw new java . lang . IllegalArgumentException ( ) ; } return this . METHOD_10 ( ( ( IDENT_28 ) ( IDENT_27 ) ) , ( ( IDENT_29 ) ( IDENT_23 ) ) ) ; }
org . junit . Assert . assertTrue ( v ) 