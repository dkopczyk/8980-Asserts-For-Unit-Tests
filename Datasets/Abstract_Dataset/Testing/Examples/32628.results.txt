METHOD_0 ( ) { final ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_5 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_3 . classes . IDENT_6 . getInstance ( ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . IDENT_8 . IDENT_9 ) ; final ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_10 . classes . IDENT_11 IDENT_12 = IDENT_5 . METHOD_1 ( ) ; final ch . IDENT_0 . IDENT_1 . helper . random . IDENT_13 . IDENT_14 IDENT_15 = ch . IDENT_0 . IDENT_1 . helper . random . IDENT_13 . IDENT_14 . getInstance ( ) ; final ch . IDENT_0 . IDENT_1 . helper . random . IDENT_16 IDENT_17 = ch . IDENT_0 . IDENT_1 . helper . random . IDENT_18 . IDENT_19 . getInstance ( ) ; final int size = 5 ; final ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . interfaces . Element IDENT_21 = IDENT_12 . METHOD_2 ( 4 ) ; final ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . interfaces . Element IDENT_22 = IDENT_5 . METHOD_3 ( IDENT_15 ) . get ( 0 ) ; final ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . interfaces . Element IDENT_23 = IDENT_22 . METHOD_4 ( IDENT_21 ) ; ch . IDENT_0 . IDENT_1 . helper . math . IDENT_24 IDENT_25 = ch . IDENT_0 . IDENT_1 . helper . math . IDENT_24 . getInstance ( new int [ ] { 3 , 2 , 1 , 4 , 0 } ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_26 IDENT_27 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_28 . getInstance ( size ) . METHOD_2 ( IDENT_25 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_29 . IDENT_30 . classes . IDENT_31 IDENT_32 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_29 . IDENT_30 . classes . IDENT_31 . getInstance ( IDENT_5 , size , IDENT_15 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_34 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 . getInstance ( IDENT_12 . METHOD_2 ( 2 ) , IDENT_12 . METHOD_2 ( 3 ) , IDENT_12 . METHOD_2 ( 4 ) , IDENT_12 . METHOD_2 ( 5 ) , IDENT_12 . METHOD_2 ( 6 ) ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_35 = IDENT_32 . commit ( IDENT_27 , IDENT_34 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_36 IDENT_37 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_36 . getInstance ( IDENT_5 , size ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_38 = IDENT_37 . METHOD_5 ( IDENT_17 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_39 = ch . IDENT_0 . IDENT_1 . math . function . classes . IDENT_40 . getInstance ( IDENT_5 , size ) . apply ( IDENT_38 . METHOD_4 ( IDENT_21 ) , IDENT_27 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . IDENT_41 . interfaces . IDENT_42 IDENT_43 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . classes . IDENT_44 . METHOD_6 ( 4 , null ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . IDENT_41 . interfaces . IDENT_45 IDENT_46 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . classes . IDENT_44 . METHOD_7 ( 4 , size ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . classes . IDENT_44 IDENT_47 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_7 . classes . IDENT_44 . getInstance ( IDENT_43 , IDENT_46 , size , IDENT_5 , 2 , IDENT_15 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_48 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 . getInstance ( IDENT_27 , IDENT_34 , IDENT_21 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_49 = ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 . getInstance ( IDENT_35 , IDENT_38 , IDENT_39 , IDENT_22 , IDENT_23 ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . classes . IDENT_33 IDENT_50 = IDENT_47 . METHOD_8 ( IDENT_48 , IDENT_49 , IDENT_17 ) ; boolean v = IDENT_47 . verify ( IDENT_50 , IDENT_49 ) ; "<AssertPlaceHolder>" ; } verify ( ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . interfaces . Element , ch . IDENT_0 . IDENT_1 . math . IDENT_2 . IDENT_20 . interfaces . Element ) { if ( ( ! ( this . METHOD_9 ( ) . contains ( IDENT_50 ) ) ) || ( ! ( this . METHOD_10 ( ) . contains ( IDENT_49 ) ) ) ) { throw new java . lang . IllegalArgumentException ( ) ; } return this . METHOD_11 ( ( ( IDENT_51 ) ( IDENT_50 ) ) , ( ( IDENT_52 ) ( IDENT_49 ) ) ) ; }
org . junit . Assert . assertTrue ( v ) 