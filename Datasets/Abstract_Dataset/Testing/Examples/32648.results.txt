METHOD_0 ( ) { ch . IDENT_0 . IDENT_1 . crypto . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_5 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_2 . IDENT_3 . classes . IDENT_4 . getInstance ( IDENT_4 . IDENT_6 . IDENT_7 , IDENT_4 . IDENT_8 . IDENT_9 , ch . IDENT_0 . IDENT_1 . helper . array . classes . IDENT_10 . getInstance ( STRING_0 ) ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_11 . IDENT_12 . interfaces . Element < ch . IDENT_0 . IDENT_1 . helper . array . classes . IDENT_10 > key = IDENT_5 . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; ch . IDENT_0 . IDENT_1 . crypto . IDENT_2 . IDENT_3 . classes . IDENT_4 IDENT_13 = ch . IDENT_0 . IDENT_1 . crypto . IDENT_2 . IDENT_3 . classes . IDENT_4 . getInstance ( IDENT_4 . IDENT_6 . IDENT_7 , IDENT_4 . IDENT_8 . IDENT_9 , ch . IDENT_0 . IDENT_1 . helper . array . classes . IDENT_10 . getInstance ( STRING_0 ) ) ; ch . IDENT_0 . IDENT_1 . math . IDENT_11 . IDENT_12 . interfaces . Element < ch . IDENT_0 . IDENT_1 . helper . array . classes . IDENT_10 > IDENT_14 = IDENT_13 . METHOD_1 ( ) . METHOD_2 ( STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { if ( IDENT_15 == null ) { throw new java . lang . IllegalArgumentException ( ) ; } return this . METHOD_2 ( ch . IDENT_0 . IDENT_1 . helper . random . IDENT_15 . IDENT_16 . getInstance ( IDENT_15 ) ) ; }
org . junit . Assert . assertEquals ( key , IDENT_14 ) 