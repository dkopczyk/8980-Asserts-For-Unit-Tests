METHOD_0 ( ) { ( INT_0 IDENT_0 ) ch . IDENT_1 . IDENT_2 . helper . converter . interfaces . IDENT_3 < java . lang . String , ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_4 > converter = ch . IDENT_1 . IDENT_2 . helper . converter . classes . IDENT_5 . IDENT_6 . getInstance ( ) ; ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_4 IDENT_7 = converter . convert ( STRING_0 ) ; ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_4 IDENT_8 = converter . convert ( STRING_1 ) ; ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_4 expected = ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_4 . getInstance ( STRING_2 . METHOD_1 ( ) ) ; ch . IDENT_1 . IDENT_2 . helper . hash . IDENT_9 IDENT_10 = ch . IDENT_1 . IDENT_2 . helper . hash . IDENT_9 . IDENT_11 ; ch . IDENT_1 . IDENT_2 . helper . IDENT_12 . IDENT_13 IDENT_14 = ch . IDENT_1 . IDENT_2 . helper . random . IDENT_7 . IDENT_15 . METHOD_2 ( IDENT_10 , INT_1 ) . getInstance ( IDENT_7 , IDENT_8 ) . METHOD_3 ( ) . iterator ( ) ; "<AssertPlaceHolder>" ; } next ( int ) { if ( n < 0 ) { throw new java . lang . IllegalArgumentException ( ) ; } this . METHOD_4 ( ) ; java . util . List < IDENT_16 > values = new java . util . METHOD_5 ( ) ; while ( ( n > 0 ) && ( this . hasNext ( ) ) ) { values . add ( this . METHOD_6 ( ) ) ; n OP_0 ; } this . METHOD_7 ( ) ; return ch . IDENT_1 . IDENT_2 . helper . array . classes . IDENT_17 . getInstance ( values ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_14 . next ( INT_0 ) ) 