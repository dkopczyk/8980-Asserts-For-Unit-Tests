METHOD_0 ( ) { java . lang . String file = STRING_0 ; org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . Map < java . lang . String , java . lang . Integer > count = new org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . HashMap < java . lang . String , java . lang . Integer > ( ) ; for ( org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . IDENT_3 type : org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . IDENT_3 . values ( ) ) { count . put ( type . METHOD_1 ( ) , 0 ) ; } org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . METHOD_2 ( new org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . File ( file ) ) ; while ( IDENT_5 . METHOD_3 ( ) ) { java . lang . String IDENT_6 = IDENT_5 . METHOD_4 ( ) . split ( STRING_1 ) [ 1 ] ; count . put ( IDENT_6 , ( ( count . get ( IDENT_6 ) ) + 1 ) ) ; } for ( org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . IDENT_3 type : org . IDENT_0 . IDENT_1 . pattern . IDENT_2 . IDENT_3 . values ( ) ) { System . out . println ( ( ( ( count . get ( type . METHOD_1 ( ) ) ) + STRING_1 ) + type ) ) ; } "<AssertPlaceHolder>" ; } METHOD_1 ( ) { return name ( ) . toLowerCase ( ) . replaceAll ( STRING_2 , STRING_3 ) ; }
org . junit . Assert . assertTrue ( ( ( 2 + 2 ) == 4 ) ) 