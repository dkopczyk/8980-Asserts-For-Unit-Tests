METHOD_0 ( ) { java . security . IDENT_0 random = new java . security . METHOD_1 ( ) ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int s = 3 ; s < 10 ; ++ s ) { for ( int g = 0 ; g < s ; ++ g ) { for ( int n = 2 ; n < ( s - g ) ; ++ n ) { byte [ ] IDENT_1 = new byte [ INT_0 ] ; random . METHOD_2 ( IDENT_1 ) ; java . util . List < java . lang . String > IDENT_2 = com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( IDENT_1 , s , n , STRING_0 ) ; java . util . List < java . lang . String > IDENT_7 = new java . util . ArrayList ( ) ; java . util . Set < java . lang . Integer > IDENT_8 = new java . util . HashSet < java . lang . Integer > ( ) ; while ( ( IDENT_8 . size ( ) ) < n ) { int p = random . METHOD_4 ( s ) ; if ( ! ( IDENT_8 . contains ( p ) ) ) { IDENT_7 . add ( IDENT_2 . get ( p ) ) ; IDENT_8 . add ( p ) ; } } byte [ ] IDENT_9 = com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_5 ( IDENT_7 , STRING_0 ) ; "<AssertPlaceHolder>" ; } } } } } METHOD_5 ( java . util . List , java . lang . String ) { com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_10 [ ] IDENT_11 = new com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_10 [ IDENT_12 . size ( ) ] ; int i = 0 ; for ( java . lang . String m : IDENT_12 ) { byte [ ] e = com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_13 . decode ( m , IDENT_14 ) ; IDENT_11 [ i ] = new com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_6 ( ) ; IDENT_11 [ i ] . x = e [ 0 ] ; IDENT_11 [ i ] . IDENT_15 = e [ 1 ] ; IDENT_11 [ i ] . IDENT_16 = e [ 2 ] ; IDENT_11 [ i ] . y = org . IDENT_17 . util . Arrays . METHOD_7 ( e , 3 , ( ( IDENT_11 [ i ] . IDENT_16 ) + 3 ) ) ; ++ i ; } return com . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_8 ( IDENT_11 ) ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( IDENT_9 , IDENT_1 ) ) 