METHOD_0 ( ) { java . lang . String [ ] [ ] IDENT_0 = new java . lang . String [ ] [ ] { new java . lang . String [ ] { STRING_0 , STRING_0 } , new java . lang . String [ ] { STRING_1 1 , STRING_1 1 } , new java . lang . String [ ] { STRING_2 , "" } , new java . lang . String [ ] { STRING_3 , "" } } ; for ( java . lang . String [ ] IDENT_1 : IDENT_0 ) { java . lang . String test = ( STRING_1 + ( IDENT_1 [ 0 ] ) ) + STRING_4 ; java . lang . String expected = IDENT_1 [ 1 ] ; java . lang . String json = ( STRING_5 + ( IDENT_1 [ 0 ] ) ) + STRING_6 ; IDENT_2 . IDENT_3 template = IDENT_2 . IDENT_3 . parse ( test ) ; java . lang . String IDENT_4 = template . render ( json ) ; "<AssertPlaceHolder>" ; } } render ( java . util . Map ) { if ( this . IDENT_5 . METHOD_1 ( ) ) { return render ( IDENT_6 , IDENT_2 . IDENT_7 . METHOD_2 ( ) , true ) ; } else { if ( ( this . IDENT_8 ) > ( this . IDENT_5 . IDENT_9 ) ) { throw new java . lang . RuntimeException ( ( ( STRING_7 + ( this . IDENT_5 . IDENT_9 ) ) + STRING_8 ) ) ; } return METHOD_3 ( IDENT_6 ) ; } }
org . junit . Assert . assertThat ( IDENT_4 , org . hamcrest . CoreMatchers . is ( expected ) ) 