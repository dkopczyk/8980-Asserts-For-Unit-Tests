METHOD_0 ( ) { IDENT_0 = mock ( de . IDENT_1 . IDENT_2 . page . IDENT_3 . class ) ; org . IDENT_4 . reflect . IDENT_5 . METHOD_1 ( IDENT_6 , IDENT_0 ) ; @ de . IDENT_1 . IDENT_2 . page . METHOD_2 ( STRING_0 ) java . util . List < de . IDENT_1 . IDENT_2 . page . IDENT_7 > IDENT_8 = com . google . common . collect . Lists . newArrayList ( new de . IDENT_1 . IDENT_2 . page . METHOD_3 ( STRING_1 , STRING_2 , new java . util . Date ( ) ) , new de . IDENT_1 . IDENT_2 . page . METHOD_3 ( STRING_3 , STRING_2 , new java . util . Date ( ) ) , new de . IDENT_1 . IDENT_2 . page . METHOD_3 ( STRING_4 , STRING_2 , new java . util . Date ( ) ) , new de . IDENT_1 . IDENT_2 . page . METHOD_3 ( STRING_5 , STRING_2 , new java . util . Date ( ) ) , new de . IDENT_1 . IDENT_2 . page . METHOD_3 ( STRING_6 , STRING_2 , new java . util . Date ( ) ) ) ; when ( IDENT_0 . METHOD_4 ( de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_10 , de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_11 , de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_12 ) ) . thenReturn ( IDENT_8 ) ; java . util . List < java . lang . String > result = IDENT_6 . METHOD_0 ( de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_10 , de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_11 , de . IDENT_1 . IDENT_2 . page . IDENT_9 . IDENT_12 , STRING_5 , STRING_3 ) ; java . util . List < java . lang . String > IDENT_13 = com . google . common . collect . Lists . newArrayList ( STRING_4 , STRING_3 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , java . lang . String ) { java . util . List < de . IDENT_1 . IDENT_2 . page . METHOD_3 > IDENT_14 = com . google . common . collect . Lists . newArrayList ( IDENT_0 . METHOD_4 ( IDENT_15 , IDENT_16 , path ) ) ; boolean IDENT_17 = false ; boolean IDENT_18 = false ; for ( de . IDENT_1 . IDENT_2 . page . METHOD_3 IDENT_19 : IDENT_14 ) { java . lang . String commit = IDENT_19 . METHOD_5 ( ) ; if ( ( ! IDENT_17 ) && ( commit . equals ( IDENT_20 ) ) ) { IDENT_17 = true ; } if ( ( ! IDENT_18 ) && ( commit . equals ( IDENT_21 ) ) ) { IDENT_18 = true ; } if ( IDENT_17 && IDENT_18 ) { break ; } } if ( ( ! IDENT_17 ) || ( ! IDENT_18 ) ) { throw new java . lang . IllegalArgumentException ( STRING_7 ) ; } java . util . Collections . METHOD_6 ( IDENT_14 ) ; boolean IDENT_22 = false ; for ( java . util . Iterator < de . IDENT_1 . IDENT_2 . page . METHOD_3 > IDENT_23 = IDENT_14 . iterator ( ) ; IDENT_23 . hasNext ( ) ; ) { de . IDENT_1 . IDENT_2 . page . METHOD_3 version = IDENT_23 . next ( ) ; if ( ! IDENT_22 ) { IDENT_23 . remove ( ) ; } java . lang . String commit = version . METHOD_5 ( ) ; if ( commit . equals ( IDENT_20 ) ) { IDENT_22 = true ; } else if ( commit . equals ( IDENT_21 ) ) { IDENT_22 = false ; } } com . google . common . base . IDENT_24 < de . IDENT_1 . IDENT_2 . page . METHOD_3 , java . lang . String > function = new com . google . common . base . IDENT_24 < de . IDENT_1 . IDENT_2 . page . METHOD_3 , java . lang . String > ( ) { @ de . IDENT_1 . IDENT_2 . page . Override public java . lang . String apply ( de . IDENT_1 . IDENT_2 . page . METHOD_3 version ) { return version . METHOD_5 ( ) ; } } ; return com . google . common . collect . Lists . transform ( IDENT_14 , function ) ; }
org . junit . Assert . assertEquals ( IDENT_13 , result ) 