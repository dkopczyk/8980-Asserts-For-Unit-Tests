METHOD_0 ( ) { IDENT_0 . tree . IDENT_1 < java . lang . String > IDENT_2 = new IDENT_0 . tree . IDENT_1 < java . lang . String > ( ) ; IDENT_2 . insert ( STRING_0 , STRING_0 ) ; "<AssertPlaceHolder>" ; } delete ( java . lang . String ) { IDENT_0 . tree . IDENT_3 < T , java . lang . Boolean > IDENT_4 = new IDENT_0 . tree . IDENT_5 < T , java . lang . Boolean > ( Boolean . IDENT_6 ) { public void METHOD_1 ( java . lang . String key , IDENT_0 . tree . IDENT_7 < T > parent , IDENT_0 . tree . IDENT_7 < T > node ) { result = node . METHOD_2 ( ) ; if ( result ) { if ( ( node . METHOD_3 ( ) . size ( ) ) == 0 ) { java . util . Iterator < IDENT_0 . tree . IDENT_7 < T > > it = parent . METHOD_3 ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { if ( it . next ( ) . getKey ( ) . equals ( node . getKey ( ) ) ) { it . remove ( ) ; break ; } } if ( ( ( parent . METHOD_3 ( ) . size ( ) ) == 1 ) && ( ( parent . METHOD_2 ( ) ) == false ) ) { METHOD_4 ( parent , parent . METHOD_3 ( ) . get ( 0 ) ) ; } } else if ( ( node . METHOD_3 ( ) . size ( ) ) == 1 ) { METHOD_4 ( node , node . METHOD_3 ( ) . get ( 0 ) ) ; } else { node . METHOD_5 ( false ) ; } } } MOD_0 void METHOD_4 ( IDENT_0 . tree . IDENT_7 < T > parent , IDENT_0 . tree . IDENT_7 < T > child ) { parent . METHOD_6 ( ( ( parent . getKey ( ) ) + ( child . getKey ( ) ) ) ) ; parent . METHOD_5 ( child . METHOD_2 ( ) ) ; parent . setValue ( child . getValue ( ) ) ; parent . METHOD_7 ( child . METHOD_3 ( ) ) ; } } ; METHOD_1 ( key , IDENT_4 ) ; if ( IDENT_4 . METHOD_8 ( ) ) { ( size ) OP_0 ; } return IDENT_4 . METHOD_8 ( ) . METHOD_9 ( ) ; }
org . junit . Assert . assertTrue ( IDENT_2 . delete ( STRING_0 ) ) 