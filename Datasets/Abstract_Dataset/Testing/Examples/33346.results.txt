METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . str . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . str . METHOD_1 ( ) ; for ( int k = 0 ; k < INT_0 ; k ++ ) { IDENT_3 . METHOD_2 ( ) ; if ( k > 0 ) { IDENT_3 . put ( k ) . put ( STRING_0 ) ; } else { IDENT_3 . put ( STRING_0 ) ; } com . IDENT_0 . IDENT_4 . engine . IDENT_5 . IDENT_6 IDENT_7 = com . IDENT_0 . IDENT_4 . engine . IDENT_5 . IDENT_8 . getInstance ( IDENT_3 , INT_1 ) ; "<AssertPlaceHolder>" ; final long n = ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_11 ) * ( k == 0 ? 1 : k ) ; long IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_13 . METHOD_3 ( STRING_1 ) ; IDENT_12 = IDENT_12 - ( IDENT_12 OP_0 n ) ; for ( int i = 0 ; i < INT_2 ; i ++ ) { long actual = IDENT_7 . METHOD_4 ( ( IDENT_12 + ( i * ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_14 ) ) ) ) ; if ( IDENT_12 != actual ) { org . junit . Assert . fail ( ( ( ( ( ( STRING_2 + IDENT_3 ) + STRING_3 ) + ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . toString ( IDENT_12 ) ) ) + STRING_4 ) + ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . toString ( actual ) ) ) ) ; } } } } getInstance ( java . lang . IDENT_15 , int ) { int k = - 1 ; if ( cs == null ) { throw com . IDENT_0 . IDENT_4 . IDENT_16 . METHOD_5 ( position , STRING_5 ) ; } final int len = cs . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = cs . charAt ( i ) ; if ( ( c < STRING_6 ) || ( c > STRING_7 ) ) { k = i ; break ; } } if ( k == ( - 1 ) ) { throw com . IDENT_0 . IDENT_4 . IDENT_16 . METHOD_5 ( ( position + len ) , STRING_8 ) ; } if ( ( k + 1 ) < len ) { throw com . IDENT_0 . IDENT_4 . IDENT_16 . METHOD_5 ( ( position + k ) , STRING_9 ) ; } try { final int n ; if ( k == 0 ) { n = 1 ; } else { n = com . IDENT_0 . IDENT_1 . IDENT_17 . METHOD_6 ( cs , 0 , k ) ; if ( n == 0 ) { throw com . IDENT_0 . IDENT_4 . IDENT_16 . METHOD_5 ( position , STRING_10 ) ; } } switch ( cs . charAt ( k ) ) { case STRING_11 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_7 ( ( ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_14 ) * n ) ) ; case STRING_0 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_7 ( ( ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_11 ) * n ) ) ; case STRING_12 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_7 ( ( ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_18 ) * n ) ) ; case STRING_13 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_7 ( ( ( com . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . IDENT_19 ) * n ) ) ; case STRING_14 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_8 ( n ) ; case STRING_15 : return new com . IDENT_0 . IDENT_4 . engine . IDENT_5 . METHOD_9 ( n ) ; default : break ; } } catch ( com . IDENT_0 . IDENT_1 . IDENT_20 IDENT_21 ) { assert false ; } throw com . IDENT_0 . IDENT_4 . IDENT_16 . METHOD_5 ( ( position + k ) , STRING_16 ) ; }
org . junit . Assert . assertNotNull ( IDENT_7 ) 