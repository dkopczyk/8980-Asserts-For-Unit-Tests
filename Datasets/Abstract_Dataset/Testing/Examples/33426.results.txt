METHOD_0 ( ) { METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 < com . IDENT_0 . store . IDENT_3 < com . IDENT_0 . model . IDENT_4 > > IDENT_5 = new com . IDENT_0 . IDENT_1 . IDENT_2 < com . IDENT_0 . store . IDENT_3 < com . IDENT_0 . model . IDENT_4 > > ( ) { { add ( METHOD_2 ( ) . reader ( com . IDENT_0 . model . IDENT_4 . class , STRING_0 ) ) ; add ( METHOD_2 ( ) . reader ( com . IDENT_0 . model . IDENT_4 . class , STRING_1 ) ) ; add ( METHOD_2 ( ) . reader ( com . IDENT_0 . model . IDENT_4 . class , STRING_2 ) ) ; add ( METHOD_2 ( ) . reader ( com . IDENT_0 . model . IDENT_4 . class , STRING_3 ) ) ; add ( METHOD_2 ( ) . reader ( com . IDENT_0 . model . IDENT_4 . class , STRING_4 ) ) ; } } ; try { java . util . List < com . IDENT_0 . store . IDENT_6 < com . IDENT_0 . model . IDENT_4 > > list = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_5 . size ( ) ) ; i ++ ) { list . add ( com . IDENT_0 . store . IDENT_7 . METHOD_3 ( IDENT_5 . get ( i ) ) ) ; } long IDENT_8 = 0 ; for ( com . IDENT_0 . model . IDENT_4 q : com . IDENT_0 . store . IDENT_9 . METHOD_4 ( list , IDENT_10 ) ) { "<AssertPlaceHolder>" ; IDENT_8 = q . METHOD_5 ( ) ; } } finally { for ( int i = 0 , n = IDENT_5 . size ( ) ; i < n ; i ++ ) { IDENT_5 . METHOD_6 ( i ) . close ( ) ; } } } METHOD_5 ( ) { return IDENT_11 ; }
org . junit . Assert . assertTrue ( ( IDENT_8 <= ( q . METHOD_5 ( ) ) ) ) 