METHOD_0 ( ) { final int IDENT_0 = 5 ; int IDENT_1 = 2 ; final int IDENT_2 = 1000 ; final com . IDENT_3 . store . factory . configuration . IDENT_4 < ? > [ ] meta = new com . IDENT_3 . store . factory . configuration . IDENT_4 [ IDENT_0 ] ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { final com . IDENT_3 . store . factory . configuration . IDENT_4 < ? > m = new com . IDENT_3 . store . factory . configuration . METHOD_1 ( ( STRING_0 + i ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) . build ( ) ; ( ( com . IDENT_3 . store . factory . IDENT_5 ) ( METHOD_4 ( ) ) ) . writer ( m ) . close ( ) ; meta [ i ] = m ; } try ( final com . IDENT_3 . store . factory . IDENT_6 IDENT_7 = new com . IDENT_3 . store . factory . METHOD_5 ( IDENT_8 . METHOD_6 ( ) , 1000 , 2 ) ) { final java . util . concurrent . IDENT_9 IDENT_10 = new java . util . concurrent . METHOD_7 ( IDENT_1 ) ; final java . util . concurrent . IDENT_11 IDENT_12 = new java . util . concurrent . METHOD_8 ( IDENT_1 ) ; final java . util . concurrent . atomic . IDENT_13 errors = new java . util . concurrent . atomic . METHOD_9 ( ) ; for ( int i = 0 ; i < IDENT_1 ; i ++ ) { final int x = i ; new java . lang . Thread ( ( ) -> { com . IDENT_3 . IDENT_14 . IDENT_15 IDENT_16 = new com . IDENT_3 . IDENT_14 . METHOD_10 ( x , ( - x ) ) ; try { IDENT_10 . METHOD_11 ( ) ; for ( int IDENT_17 = 0 ; IDENT_17 < IDENT_2 ; IDENT_17 ++ ) { IDENT_4 < ? > m = meta [ ( ( IDENT_16 . METHOD_12 ( ) ) OP_0 IDENT_0 ) ] ; try ( com . IDENT_3 . store . IDENT_18 IDENT_19 = IDENT_7 . reader ( m ) ) { java . util . concurrent . IDENT_20 . IDENT_21 . METHOD_13 ( 100 ) ; } } } catch ( e ) { com . IDENT_3 . store . factory . e . printStackTrace ( ) ; errors . METHOD_14 ( ) ; } finally { IDENT_12 . METHOD_15 ( ) ; } } ) . start ( ) ; } IDENT_12 . METHOD_11 ( ) ; "<AssertPlaceHolder>" ; } } get ( ) { return com . IDENT_3 . IDENT_14 . IDENT_22 . METHOD_16 ( ) . METHOD_17 ( METHOD_18 ( 1 ) ) ; }
org . junit . Assert . assertEquals ( 0 , errors . get ( ) ) 