METHOD_0 ( ) { final javax . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = mock ( javax . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; final net . IDENT_5 . IDENT_6 . ui . IDENT_0 . IDENT_7 IDENT_8 = mock ( net . IDENT_5 . IDENT_6 . ui . IDENT_0 . IDENT_7 . class ) ; final javax . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 IDENT_11 = mock ( javax . IDENT_0 . IDENT_1 . IDENT_9 . IDENT_10 . class ) ; final javax . IDENT_0 . IDENT_12 . IDENT_13 IDENT_14 = new javax . IDENT_0 . IDENT_12 . METHOD_1 ( STRING_0 , IDENT_4 . getClass ( ) . getName ( ) ) ; final javax . IDENT_0 . IDENT_12 . METHOD_1 IDENT_15 = new javax . IDENT_0 . IDENT_12 . METHOD_1 ( STRING_1 , IDENT_8 . getClass ( ) . getName ( ) ) ; final javax . IDENT_0 . IDENT_12 . METHOD_1 IDENT_16 = new javax . IDENT_0 . IDENT_12 . METHOD_1 ( STRING_2 , IDENT_11 . getClass ( ) . getName ( ) ) ; when ( javax . IDENT_0 . IDENT_12 . METHOD_2 ( ) ) . thenReturn ( new javax . IDENT_0 . IDENT_12 . METHOD_1 [ ] { IDENT_14 , IDENT_15 , IDENT_16 } ) ; when ( javax . IDENT_0 . IDENT_12 . METHOD_3 ( ) ) . thenReturn ( IDENT_8 ) ; final javax . IDENT_0 . IDENT_12 . METHOD_1 IDENT_17 = IDENT_18 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { final javax . IDENT_0 . IDENT_19 IDENT_20 = javax . IDENT_0 . IDENT_12 . METHOD_3 ( ) ; if ( IDENT_20 == null ) { throw new java . lang . IllegalStateException ( STRING_3 ) ; } final javax . IDENT_0 . IDENT_12 . METHOD_1 [ ] IDENT_21 = javax . IDENT_0 . IDENT_12 . METHOD_2 ( ) ; for ( final javax . IDENT_0 . IDENT_12 . METHOD_1 IDENT_22 : IDENT_21 ) { if ( IDENT_22 . METHOD_5 ( ) . equals ( IDENT_20 . getClass ( ) . getName ( ) ) ) { return IDENT_22 ; } } throw new java . lang . IllegalStateException ( java . lang . String . format ( STRING_4 , IDENT_20 . getName ( ) ) ) ; }
org . junit . Assert . assertSame ( IDENT_15 , IDENT_17 ) 