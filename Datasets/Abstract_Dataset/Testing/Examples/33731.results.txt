METHOD_0 ( ) { IDENT_0 . execute ( provider ) ; final java . io . File IDENT_1 = new java . io . File ( ( ( ( com . github . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ) + ( IDENT_7 ) ) + ( IDENT_8 ) ) ) ; final long IDENT_9 = IDENT_1 . length ( ) ; IDENT_0 . execute ( provider ) ; final long IDENT_10 = IDENT_1 . length ( ) ; "<AssertPlaceHolder>" ; } execute ( com . github . IDENT_2 . core . IDENT_3 . provider . IDENT_11 ) { this . provider = provider ; IDENT_12 = new java . util . ArrayList ( ) ; if ( ! ( METHOD_1 ( provider ) ) ) { return ; } final java . util . List < java . lang . String > IDENT_13 = provider . METHOD_2 ( ) ; if ( ! ( METHOD_1 ( IDENT_13 ) ) ) { return ; } for ( final java . lang . String IDENT_14 : IDENT_13 ) { try { METHOD_3 ( IDENT_14 , null ) ; } catch ( final java . lang . Throwable t ) { com . github . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_15 . log . error ( java . lang . String . format ( config . error ( STRING_0 ) , IDENT_14 ) , t ) ; IDENT_12 . add ( java . lang . String . format ( config . error ( STRING_1 ) , IDENT_14 , t . getMessage ( ) ) ) ; } } if ( ! ( IDENT_12 . isEmpty ( ) ) ) { com . github . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_15 . log . error ( java . lang . String . format ( config . error ( STRING_2 ) , IDENT_12 . size ( ) , IDENT_13 . size ( ) ) ) ; for ( final java . lang . String IDENT_16 : IDENT_12 ) { com . github . IDENT_2 . core . IDENT_3 . IDENT_4 . IDENT_15 . log . error ( IDENT_16 ) ; } throw new com . github . IDENT_2 . core . IDENT_3 . exceptions . METHOD_4 ( config . error ( STRING_3 ) ) ; } }
org . junit . Assert . assertThat ( IDENT_10 , org . hamcrest . Matchers . equalTo ( IDENT_9 ) ) 