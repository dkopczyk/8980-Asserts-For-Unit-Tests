METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_1 . METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 > list = IDENT_4 . METHOD_2 ( 10 , 1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( int , int ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 > IDENT_7 = new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_5 < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 > ( ) ; java . util . Map < java . lang . String , java . lang . Object > parameters = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; parameters . put ( STRING_0 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 ) ; if ( IDENT_9 > 0 ) { parameters . put ( STRING_1 , ( "" + IDENT_9 ) ) ; } if ( page > 0 ) { parameters . put ( STRING_2 , ( "" + page ) ) ; } com . IDENT_0 . IDENT_1 . Response response = IDENT_10 . get ( IDENT_10 . getPath ( ) , parameters , IDENT_11 , IDENT_12 ) ; if ( response . METHOD_3 ( ) ) { throw new com . IDENT_0 . IDENT_1 . METHOD_4 ( response . METHOD_5 ( ) , response . METHOD_6 ( ) ) ; } org . w3c . dom . Element IDENT_13 = response . METHOD_7 ( ) ; org . w3c . dom . IDENT_14 IDENT_15 = IDENT_13 . METHOD_8 ( STRING_3 ) ; IDENT_7 . METHOD_9 ( IDENT_13 . METHOD_10 ( STRING_2 ) ) ; IDENT_7 . METHOD_11 ( IDENT_13 . METHOD_10 ( STRING_4 ) ) ; IDENT_7 . METHOD_12 ( IDENT_13 . METHOD_10 ( STRING_5 ) ) ; IDENT_7 . METHOD_13 ( IDENT_13 . METHOD_10 ( STRING_6 ) ) ; for ( int i = 0 ; i < ( IDENT_15 . METHOD_14 ( ) ) ; i ++ ) { org . w3c . dom . Element IDENT_16 = ( ( org . w3c . dom . Element ) ( IDENT_15 . item ( i ) ) ) ; IDENT_7 . add ( METHOD_15 ( IDENT_16 ) ) ; } return IDENT_7 ; }
org . junit . Assert . assertTrue ( ( ( list . size ( ) ) > 0 ) ) 