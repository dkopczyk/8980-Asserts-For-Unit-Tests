METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_1 . METHOD_1 ( ) ; java . lang . String IDENT_5 = null ; java . util . Calendar IDENT_6 = java . util . Calendar . getInstance ( ) ; java . util . Calendar IDENT_7 = java . util . Calendar . getInstance ( ) ; java . util . Calendar IDENT_8 = java . util . Calendar . getInstance ( ) ; java . util . Calendar IDENT_9 = java . util . Calendar . getInstance ( ) ; IDENT_6 . METHOD_2 ( Calendar . IDENT_10 , ( - 5 ) ) ; IDENT_8 . METHOD_2 ( Calendar . IDENT_10 , ( - 5 ) ) ; java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 > IDENT_11 = IDENT_4 . METHOD_3 ( IDENT_13 , IDENT_5 , IDENT_6 . getTime ( ) , IDENT_7 . getTime ( ) , IDENT_8 . getTime ( ) , IDENT_9 . getTime ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String , java . lang . String , java . util . Date , java . util . Date , java . util . Date , java . util . Date ) { java . util . Map < java . lang . String , java . lang . Object > parameters = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 > IDENT_14 = new java . util . ArrayList < com . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 > ( ) ; parameters . put ( STRING_0 , com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_15 ) ; if ( IDENT_16 != null ) { parameters . put ( STRING_1 , IDENT_16 ) ; } if ( IDENT_5 != null ) { parameters . put ( STRING_2 , IDENT_5 ) ; } if ( IDENT_6 != null ) { parameters . put ( STRING_3 , java . lang . Long . toString ( ( ( IDENT_6 . getTime ( ) ) / INT_0 ) ) ) ; } if ( IDENT_7 != null ) { parameters . put ( STRING_4 , java . lang . Long . toString ( ( ( IDENT_7 . getTime ( ) ) / INT_0 ) ) ) ; } if ( IDENT_8 != null ) { parameters . put ( STRING_5 , ( ( java . text . IDENT_17 ) ( IDENT_18 . IDENT_19 . get ( ) ) ) . format ( IDENT_8 ) ) ; } if ( IDENT_9 != null ) { parameters . put ( STRING_6 , ( ( java . text . IDENT_17 ) ( IDENT_18 . IDENT_19 . get ( ) ) ) . format ( IDENT_9 ) ) ; } com . IDENT_0 . IDENT_1 . Response response = IDENT_20 . get ( IDENT_20 . getPath ( ) , parameters , IDENT_21 , IDENT_22 ) ; if ( response . METHOD_4 ( ) ) { throw new com . IDENT_0 . IDENT_1 . METHOD_5 ( response . METHOD_6 ( ) , response . METHOD_7 ( ) ) ; } org . w3c . dom . Element IDENT_23 = response . METHOD_8 ( ) ; org . w3c . dom . IDENT_24 IDENT_25 = IDENT_23 . METHOD_9 ( STRING_7 ) ; for ( int i = 0 ; i < ( IDENT_25 . METHOD_10 ( ) ) ; i ++ ) { org . w3c . dom . Element IDENT_26 = ( ( org . w3c . dom . Element ) ( IDENT_25 . item ( i ) ) ) ; com . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 IDENT_27 = new com . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_11 ( ) ; IDENT_27 . METHOD_12 ( IDENT_26 . METHOD_13 ( STRING_8 ) ) ; IDENT_27 . setValue ( com . IDENT_0 . IDENT_1 . util . IDENT_28 . getValue ( IDENT_26 ) ) ; IDENT_14 . add ( IDENT_27 ) ; } return IDENT_14 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_11 . size ( ) ) > 0 ) ) 