METHOD_0 ( ) { final java . util . List < com . allanbank . mongodb . bson . Document > IDENT_0 = java . util . Collections . singletonList ( com . allanbank . mongodb . bson . builder . IDENT_1 . start ( ) . METHOD_1 ( STRING_0 , ( - INT_0 ) ) . METHOD_2 ( STRING_1 , 1 ) . build ( ) ) ; final com . allanbank . mongodb . client . message . IDENT_2 IDENT_3 = new com . allanbank . mongodb . client . message . METHOD_3 ( 0 , 0 , 0 , IDENT_0 , false , false , false , false ) ; final com . allanbank . mongodb . IDENT_4 < com . allanbank . mongodb . bson . Document > IDENT_5 = METHOD_4 ( com . allanbank . mongodb . IDENT_4 . class ) ; replay ( IDENT_5 ) ; final com . allanbank . mongodb . client . IDENT_6 . IDENT_7 IDENT_6 = new com . allanbank . mongodb . client . IDENT_6 . METHOD_5 ( IDENT_5 ) ; final com . allanbank . mongodb . error . IDENT_8 error = ( ( com . allanbank . mongodb . error . IDENT_8 ) ( IDENT_6 . METHOD_6 ( IDENT_3 ) ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_5 ) ; } METHOD_6 ( com . allanbank . mongodb . client . message . METHOD_3 ) { com . allanbank . mongodb . IDENT_9 error = super . METHOD_6 ( IDENT_3 ) ; if ( error == null ) { final java . util . List < com . allanbank . mongodb . bson . Document > results = IDENT_3 . METHOD_7 ( ) ; if ( ( results . size ( ) ) != 1 ) { error = new com . allanbank . mongodb . error . METHOD_8 ( IDENT_3 , STRING_2 ) ; } } return error ; }
org . junit . Assert . assertNull ( error ) 