METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) ; final org . bonitasoft . engine . core . process . instance . model . builder . IDENT_1 IDENT_2 = org . bonitasoft . engine . builder . IDENT_3 . get ( org . bonitasoft . engine . core . process . instance . model . builder . IDENT_1 . class ) ; final long IDENT_4 = INT_0 ; final org . bonitasoft . engine . core . process . instance . model . IDENT_5 IDENT_6 = IDENT_2 . METHOD_2 ( STRING_0 , IDENT_4 ) . METHOD_3 ( ) ; IDENT_7 . METHOD_4 ( IDENT_6 ) ; IDENT_0 . METHOD_5 ( ) ; METHOD_6 ( ) ; IDENT_0 . METHOD_1 ( ) ; final org . bonitasoft . engine . persistence . IDENT_8 IDENT_9 = new org . bonitasoft . engine . persistence . METHOD_7 ( 0 , org . bonitasoft . engine . persistence . METHOD_7 . IDENT_10 ) ; final long IDENT_11 = IDENT_7 . METHOD_8 ( IDENT_9 ) ; IDENT_0 . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { final org . bonitasoft . engine . transaction . IDENT_12 . IDENT_13 IDENT_14 = METHOD_9 ( ) ; try { if ( IDENT_15 ) { logger . log ( getClass ( ) , IDENT_16 . IDENT_17 , ( ( ( STRING_1 + ( java . lang . Thread . METHOD_10 ( ) . getId ( ) ) ) + " " ) + ( IDENT_18 . METHOD_11 ( ) . toString ( ) ) ) ) ; } final int status = IDENT_18 . getStatus ( ) ; if ( status == ( javax . transaction . Status . IDENT_19 ) ) { throw new org . bonitasoft . engine . transaction . METHOD_12 ( STRING_2 ) ; } if ( IDENT_14 . IDENT_20 ) { return ; } if ( status == ( javax . transaction . Status . IDENT_21 ) ) { if ( IDENT_15 ) { logger . log ( getClass ( ) , IDENT_16 . IDENT_17 , ( ( ( STRING_3 + ( java . lang . Thread . METHOD_10 ( ) . getId ( ) ) ) + " " ) + ( IDENT_18 . METHOD_11 ( ) . toString ( ) ) ) ) ; } IDENT_18 . METHOD_13 ( ) ; } else { try { METHOD_14 ( IDENT_14 ) ; } finally { IDENT_18 . commit ( ) ; } } } catch ( javax . transaction . IDENT_22 | javax . transaction . IDENT_23 | javax . transaction . IDENT_24 | javax . transaction . IDENT_25 e ) { throw new org . bonitasoft . engine . transaction . METHOD_12 ( e ) ; } finally { METHOD_15 ( IDENT_14 ) ; } }
org . junit . Assert . assertEquals ( 0 , IDENT_11 ) 