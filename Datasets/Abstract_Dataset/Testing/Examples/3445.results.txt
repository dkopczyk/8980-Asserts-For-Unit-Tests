METHOD_0 ( ) { try { final com . allanbank . mongodb . IDENT_0 config = new com . allanbank . mongodb . METHOD_1 ( new java . net . METHOD_2 ( STRING_0 , INT_0 ) ) ; IDENT_1 = new com . allanbank . mongodb . client . connection . IDENT_2 . METHOD_3 ( config ) ; final com . allanbank . mongodb . client . connection . IDENT_3 IDENT_4 = METHOD_4 ( com . allanbank . mongodb . client . connection . IDENT_3 . class ) ; final com . allanbank . mongodb . client . connection . IDENT_5 IDENT_6 = METHOD_4 ( com . allanbank . mongodb . client . connection . IDENT_5 . class ) ; expect ( IDENT_6 . connect ( ) ) . andReturn ( IDENT_4 ) ; replay ( IDENT_4 , IDENT_6 ) ; IDENT_1 . METHOD_5 ( IDENT_6 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_4 , IDENT_6 ) ; METHOD_6 ( IDENT_6 ) ; } catch ( final java . io . IOException IDENT_7 ) { final java . lang . IDENT_8 error = new java . lang . METHOD_7 ( IDENT_7 . getMessage ( ) ) ; error . METHOD_8 ( IDENT_7 ) ; throw error ; } } connect ( ) { final java . util . List < java . net . METHOD_2 > IDENT_9 = new java . util . ArrayList < java . net . METHOD_2 > ( IDENT_10 . METHOD_9 ( ) ) ; java . io . IOException IDENT_11 = null ; java . util . Collections . METHOD_10 ( IDENT_9 ) ; for ( final java . net . METHOD_2 address : IDENT_9 ) { try { final com . allanbank . mongodb . client . state . IDENT_12 server = IDENT_13 . add ( address ) ; final com . allanbank . mongodb . client . connection . IDENT_3 conn = connect ( server , IDENT_10 ) ; final com . allanbank . mongodb . client . state . IDENT_14 cb = new com . allanbank . mongodb . client . state . METHOD_11 ( server ) ; conn . METHOD_12 ( new com . allanbank . mongodb . client . message . METHOD_13 ( ) , cb ) ; if ( IDENT_15 . IDENT_16 . equals ( server . METHOD_14 ( ) ) ) { try { cb . get ( ) ; } catch ( final java . util . concurrent . IDENT_17 e ) { com . allanbank . mongodb . client . connection . IDENT_18 . IDENT_19 . LOG . debug ( e , STRING_1 ) ; } catch ( final java . lang . IDENT_20 e ) { com . allanbank . mongodb . client . connection . IDENT_18 . IDENT_19 . LOG . debug ( e , STRING_1 ) ; } } return conn ; } catch ( final java . io . IOException error ) { IDENT_11 = error ; } } if ( IDENT_11 != null ) { throw IDENT_11 ; } throw new java . io . IOException ( ( STRING_2 + IDENT_9 ) ) ; }
org . junit . Assert . assertSame ( IDENT_4 , IDENT_1 . connect ( ) ) 