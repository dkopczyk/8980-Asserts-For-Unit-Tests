METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; java . lang . String expected = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String [ ] ) { if ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . equalsIgnoreCase ( IDENT_7 ) ) { return com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ; } java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; if ( IDENT_7 != null ) { builder . append ( IDENT_7 ) ; } if ( args != null ) { for ( java . lang . String val : args ) { if ( ! ( com . github . IDENT_2 . IDENT_3 . util . IDENT_8 . empty ( val ) ) ) { if ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 . equalsIgnoreCase ( val ) ) { return com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 ; } builder . append ( com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_9 ) ; builder . append ( val ) ; } } } java . lang . String IDENT_10 = builder . toString ( ) . trim ( ) ; if ( com . github . IDENT_2 . IDENT_3 . util . IDENT_8 . empty ( IDENT_10 ) ) { return null ; } return IDENT_10 ; }
org . junit . Assert . assertEquals ( expected , com . github . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_0 , IDENT_1 ) ) 