METHOD_0 ( ) { METHOD_1 ( IDENT_0 . IDENT_1 , IDENT_2 ) ; org . locationtech . IDENT_1 . api . IDENT_3 commit = IDENT_0 . IDENT_1 . command ( org . locationtech . IDENT_1 . api . IDENT_4 . IDENT_5 . class ) . call ( ) ; IDENT_6 . METHOD_2 ( commit ) ; IDENT_7 . IDENT_1 . command ( org . locationtech . IDENT_1 . api . IDENT_8 . IDENT_9 . class ) . setName ( STRING_0 ) . METHOD_3 ( IDENT_10 . IDENT_11 ) . call ( ) ; IDENT_7 . IDENT_1 . command ( org . locationtech . IDENT_1 . api . IDENT_8 . IDENT_12 . class ) . setName ( IDENT_13 . IDENT_14 ) . METHOD_3 ( STRING_0 ) . call ( ) ; org . locationtech . IDENT_1 . api . IDENT_4 . IDENT_15 IDENT_16 = METHOD_4 ( ) ; METHOD_4 . METHOD_5 ( true ) . call ( ) ; java . util . Iterator < org . locationtech . IDENT_1 . api . IDENT_3 > IDENT_17 = IDENT_7 . IDENT_1 . command ( org . locationtech . IDENT_1 . api . IDENT_4 . IDENT_18 . class ) . call ( ) ; java . util . List < org . locationtech . IDENT_1 . api . IDENT_3 > IDENT_19 = new java . util . ArrayList < org . locationtech . IDENT_1 . api . IDENT_3 > ( ) ; for ( ; IDENT_17 . hasNext ( ) ; ) { IDENT_19 . add ( IDENT_17 . next ( ) ) ; } "<AssertPlaceHolder>" ; } next ( ) { org . locationtech . IDENT_1 . storage . IDENT_20 . IDENT_21 . Node n = q . METHOD_6 ( ) ; for ( java . lang . String IDENT_22 : graph . METHOD_7 ( n . id , IDENT_23 ) ) { org . locationtech . IDENT_1 . storage . IDENT_20 . IDENT_21 . Node m = nodes . get ( IDENT_22 ) ; java . lang . Double IDENT_24 = ( n . IDENT_24 ) + 1 ; if ( m == null ) { m = METHOD_8 ( IDENT_22 , IDENT_24 ) ; q . METHOD_9 ( m ) ; } else { if ( IDENT_24 < ( m . IDENT_24 ) ) { m . IDENT_24 = IDENT_24 ; q . remove ( m ) ; q . METHOD_9 ( m ) ; } } } return org . locationtech . IDENT_1 . api . IDENT_10 . valueOf ( n . id ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_19 ) 