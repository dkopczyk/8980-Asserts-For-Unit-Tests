METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . api . IDENT_2 . IDENT_3 . get ( ) . catalog ( ) . METHOD_1 ( "foo" , STRING_0 , true ) . map ( STRING_1 ) . METHOD_2 ( ) . build ( METHOD_2 ) ; com . IDENT_0 . IDENT_1 . json . IDENT_4 obj = new com . IDENT_0 . IDENT_1 . json . METHOD_3 ( ) ; obj . put ( "name" , STRING_1 ) ; obj . put ( STRING_2 , STRING_3 ) ; obj . METHOD_4 ( STRING_4 ) . put ( STRING_5 , STRING_6 ) ; obj . METHOD_5 ( STRING_0 0 ) . METHOD_6 ( ) . put ( "name" , STRING_7 ) ; org . springframework . test . web . servlet . request . IDENT_5 IDENT_6 = METHOD_7 ( STRING_0 1 ) . METHOD_8 ( IDENT_7 . IDENT_8 ) . content ( obj . toString ( ) ) ; org . springframework . mock . web . IDENT_9 req = IDENT_6 . METHOD_9 ( new com . IDENT_10 . mock . web . METHOD_10 ( ) ) ; try { new com . IDENT_0 . IDENT_1 . api . IDENT_2 . METHOD_11 ( METHOD_2 , new com . IDENT_0 . IDENT_1 . util . METHOD_12 ( ) ) . create ( "foo" , new com . IDENT_0 . IDENT_1 . json . METHOD_3 ( ) . put ( "name" , STRING_1 ) , req ) ; org . junit . Assert . fail ( ) ; } catch ( com . IDENT_0 . IDENT_1 . api . exceptions . IDENT_11 e ) { "<AssertPlaceHolder>" ; } } put ( java . lang . String , java . lang . Object ) { if ( ! ( isEmpty ( val ) ) ) { if ( ( ( order ) != null ) && ( ! ( IDENT_12 . containsKey ( key ) ) ) ) { order . add ( key ) ; } IDENT_12 . put ( key , val ) ; } return this ; }
org . junit . Assert . assertTrue ( e . getMessage ( ) . contains ( STRING_0 2 ) ) 