METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . builder . IDENT_2 builder = new net . IDENT_0 . IDENT_1 . builder . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( STRING_1 ) . METHOD_4 ( STRING_2 ) . METHOD_5 ( ) ; java . lang . String expected = STRING_3 ; java . lang . String actual = com . google . common . base . IDENT_3 . METHOD_6 ( " " ) . join ( IDENT_1 . path ( builder . build ( ) ) ) ; "<AssertPlaceHolder>" ; } build ( ) { com . google . common . collect . ImmutableList . Builder < java . lang . String > args = new com . google . common . collect . ImmutableList . Builder < java . lang . String > ( ) ; com . google . common . base . IDENT_4 . METHOD_7 ( ( ! ( IDENT_5 . isEmpty ( ) ) ) , STRING_4 ) ; com . google . common . base . IDENT_4 . METHOD_7 ( ( ! ( IDENT_6 . isEmpty ( ) ) ) , STRING_5 ) ; args . add ( ( IDENT_7 ? STRING_6 : STRING_7 ) ) ; args . add ( STRING_8 , this . IDENT_8 . toString ( ) ) ; if ( ( IDENT_9 ) != null ) { args . add ( STRING_9 0 , IDENT_9 ) ; } if ( ( IDENT_10 ) != null ) { args . add ( STRING_10 , net . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_8 ( IDENT_10 , TimeUnit . IDENT_12 ) ) ; } if ( ( format ) != null ) { args . add ( STRING_11 , format ) ; } if ( IDENT_13 ) { args . add ( STRING_12 ) ; } if ( ( IDENT_14 ) != null ) { args . add ( STRING_9 4 , IDENT_14 . toString ( ) ) ; } args . addAll ( IDENT_15 ) ; for ( java . lang . String input : IDENT_5 ) { args . add ( STRING_13 , input ) ; } if ( ( IDENT_16 ) > 0 ) { args . add ( STRING_9 2 , java . lang . Integer . toString ( IDENT_16 ) ) ; if ( ( IDENT_17 ) != null ) { args . add ( STRING_9 , ( ( IDENT_18 ) + ( IDENT_17 ) ) ) ; } } if ( ! ( com . google . common . base . IDENT_19 . METHOD_9 ( IDENT_20 ) ) ) { args . add ( STRING_9 5 , IDENT_20 ) ; } if ( ! ( com . google . common . base . IDENT_19 . METHOD_9 ( IDENT_21 ) ) ) { args . add ( STRING_9 1 , IDENT_21 ) ; } if ( ! ( com . google . common . base . IDENT_19 . METHOD_9 ( IDENT_22 ) ) ) { args . add ( STRING_9 3 , IDENT_22 ) ; } for ( net . IDENT_0 . IDENT_1 . builder . IDENT_23 output : this . IDENT_6 ) { args . addAll ( output . build ( this , IDENT_16 ) ) ; } return args . build ( ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 