METHOD_0 ( ) { java . util . List < java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . String > > > IDENT_4 = java . util . Collections . emptyList ( ) ; java . lang . String IDENT_5 = STRING_0 ; com . google . common . base . Optional < java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . String > > > result = IDENT_6 . METHOD_1 ( IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . IDENT_7 , T ) { METHOD_2 ( IDENT_4 , STRING_1 ) ; METHOD_2 ( target , STRING_2 ) ; com . google . common . base . Optional < IDENT_8 > IDENT_9 = METHOD_3 ( ) ; com . google . common . base . Optional < java . lang . Double > IDENT_10 = METHOD_3 ( ) ; for ( IDENT_8 group : IDENT_4 ) { com . google . common . base . Optional < java . lang . Double > IDENT_11 = METHOD_4 ( group , target ) ; if ( ( IDENT_11 . METHOD_5 ( ) ) && ( ( ! ( IDENT_10 . METHOD_5 ( ) ) ) || ( ( IDENT_11 . get ( ) ) > ( IDENT_10 . get ( ) ) ) ) ) { IDENT_10 = IDENT_11 ; IDENT_9 = of ( group ) ; } } return IDENT_9 ; }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . equalTo ( com . google . common . base . Optional . < java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 < java . lang . String > > > METHOD_3 ( ) ) ) 