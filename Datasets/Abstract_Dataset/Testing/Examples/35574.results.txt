METHOD_0 ( ) { set . set ( 1 ) ; final int ret = set . METHOD_1 ( 0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int ) { if ( i < 0 ) { if ( i == ( - 1 ) ) return - 1 ; throw new java . lang . METHOD_2 ( ( STRING_0 + i ) ) ; } final long [ ] [ ] [ ] IDENT_0 = this . IDENT_0 ; final int IDENT_1 = ( IDENT_0 . length ) - 1 ; if ( IDENT_2 > IDENT_1 ) { IDENT_2 = IDENT_1 ; IDENT_3 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ; IDENT_8 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_9 ; IDENT_10 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_11 ; } else { IDENT_3 = ( IDENT_12 > > ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_13 ) ) & ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_14 ) ; IDENT_8 = IDENT_12 & ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_15 ) ; IDENT_10 = i OP_0 ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_16 ) ; } long IDENT_17 ; long [ ] [ ] IDENT_18 ; long [ ] IDENT_19 ; for ( ; IDENT_2 >= 0 ; OP_1 IDENT_2 ) { if ( ( IDENT_18 = IDENT_0 [ IDENT_2 ] ) != null ) for ( ; IDENT_3 >= 0 ; OP_1 IDENT_3 ) { if ( ( IDENT_19 = IDENT_18 [ IDENT_3 ] ) != null ) for ( ; IDENT_8 >= 0 ; OP_1 IDENT_8 ) { if ( ( IDENT_17 = IDENT_19 [ IDENT_8 ] ) != 0 ) for ( int IDENT_20 = IDENT_10 ; IDENT_20 >= 0 ; OP_1 IDENT_20 ) { if ( ( IDENT_17 & ( 1L << IDENT_20 ) ) != 0 ) return ( ( ( ( IDENT_2 << ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_21 ) ) + ( IDENT_3 << ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_13 ) ) ) + IDENT_8 ) << ( com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_22 ) ) + IDENT_20 ; } IDENT_10 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_11 ; } IDENT_8 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_9 ; IDENT_10 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_11 ; } IDENT_3 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 ; IDENT_8 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_9 ; IDENT_10 = com . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_11 ; } return - 1 ; }
org . junit . Assert . assertEquals ( ( - 1 ) , ret ) 