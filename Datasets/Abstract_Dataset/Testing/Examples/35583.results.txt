METHOD_0 ( ) { final int i = ( 1 << ( ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) + ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 ) ) ) - 1 ; set . set ( ( i - 1 ) ) ; final int ret = set . METHOD_1 ( i ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int ) { if ( i < 0 ) { if ( i == ( - 1 ) ) return - 1 ; throw new java . lang . METHOD_2 ( ( STRING_0 + i ) ) ; } final long [ ] [ ] [ ] IDENT_5 = this . IDENT_5 ; final int IDENT_6 = ( IDENT_5 . length ) - 1 ; if ( IDENT_7 > IDENT_6 ) { IDENT_7 = IDENT_6 ; IDENT_8 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 ; IDENT_10 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 ; IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 ; } else { IDENT_8 = ( IDENT_14 > > ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 ) ) & ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_15 ) ; IDENT_10 = IDENT_14 & ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_16 ) ; IDENT_12 = i OP_0 ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_17 ) ; } long IDENT_18 ; long [ ] [ ] IDENT_19 ; long [ ] IDENT_20 ; for ( ; IDENT_7 >= 0 ; OP_1 IDENT_7 ) { if ( ( IDENT_19 = IDENT_5 [ IDENT_7 ] ) != null ) for ( ; IDENT_8 >= 0 ; OP_1 IDENT_8 ) { if ( ( IDENT_20 = IDENT_19 [ IDENT_8 ] ) != null ) for ( ; IDENT_10 >= 0 ; OP_1 IDENT_10 ) { if ( ( IDENT_18 = IDENT_20 [ IDENT_10 ] ) != 0 ) for ( int IDENT_21 = IDENT_12 ; IDENT_21 >= 0 ; OP_1 IDENT_21 ) { if ( ( IDENT_18 & ( 1L << IDENT_21 ) ) != 0 ) return ( ( ( ( IDENT_7 << ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 ) ) + ( IDENT_8 << ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_4 ) ) ) + IDENT_10 ) << ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 ) ) + IDENT_21 ; } IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 ; } IDENT_10 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 ; IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 ; } IDENT_8 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 ; IDENT_10 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_11 ; IDENT_12 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_13 ; } return - 1 ; }
org . junit . Assert . assertEquals ( ( i - 1 ) , ret ) 