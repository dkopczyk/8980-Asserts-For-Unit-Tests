METHOD_0 ( ) { java . util . Set < java . lang . String > fields = com . IDENT_0 . IDENT_1 . db . solr . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; java . util . HashMap < java . lang . String , com . IDENT_0 . IDENT_1 . IDENT_4 > IDENT_5 = new java . util . HashMap ( com . IDENT_0 . IDENT_1 . db . solr . IDENT_2 . IDENT_6 ) ; com . IDENT_0 . IDENT_1 . Status result = instance . read ( com . IDENT_0 . IDENT_1 . db . solr . IDENT_2 . IDENT_7 , com . IDENT_0 . IDENT_1 . db . solr . IDENT_2 . IDENT_8 , fields , IDENT_5 ) ; "<AssertPlaceHolder>" ; } read ( java . lang . String , java . lang . String , java . util . Set , java . util . Map ) { java . lang . String IDENT_9 = METHOD_2 ( table , key ) ; try { java . lang . Object IDENT_10 = client . get ( IDENT_9 ) ; if ( IDENT_10 == null ) { return com . IDENT_0 . IDENT_1 . Status . IDENT_11 ; } decode ( IDENT_10 , fields , result ) ; return com . IDENT_0 . IDENT_1 . Status . IDENT_12 ; } catch ( java . lang . Exception e ) { if ( log . METHOD_3 ( ) ) { log . error ( ( STRING_0 + IDENT_9 ) , e ) ; } return com . IDENT_0 . IDENT_1 . Status . IDENT_11 ; } }
org . junit . Assert . assertEquals ( Status . IDENT_12 , result ) 