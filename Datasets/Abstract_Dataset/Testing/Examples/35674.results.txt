METHOD_0 ( ) { java . io . File [ ] IDENT_0 = java . io . File . METHOD_1 ( ) ; java . io . File IDENT_1 = new java . io . File ( ( ( ( ( ( IDENT_0 [ 0 ] ) + STRING_0 ) + ( java . io . File . IDENT_2 ) ) + STRING_1 ) + ( java . io . File . IDENT_2 ) ) ) ; java . io . File IDENT_3 = new java . io . File ( ( ( ( ( IDENT_0 [ 0 ] ) + STRING_0 ) + ( java . io . File . IDENT_2 ) ) + STRING_1 ) ) ; java . lang . String path = org . IDENT_4 . util . IDENT_5 . METHOD_2 ( IDENT_1 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . File , java . io . File ) { java . util . ArrayList < java . lang . String > IDENT_1 = org . IDENT_4 . util . IDENT_5 . METHOD_3 ( IDENT_6 ) ; java . util . ArrayList < java . lang . String > IDENT_7 = org . IDENT_4 . util . IDENT_5 . METHOD_3 ( IDENT_8 ) ; if ( ! ( IDENT_1 . get ( 0 ) . equals ( IDENT_7 . get ( 0 ) ) ) ) { return IDENT_8 . getPath ( ) ; } int IDENT_9 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( IDENT_9 = 1 ; ( IDENT_9 < ( IDENT_1 . size ( ) ) ) && ( IDENT_9 < ( IDENT_7 . size ( ) ) ) ; IDENT_9 ++ ) { if ( ! ( IDENT_1 . get ( IDENT_9 ) . equals ( IDENT_7 . get ( IDENT_9 ) ) ) ) { break ; } } boolean first = true ; for ( int i = IDENT_9 ; i < ( IDENT_1 . size ( ) ) ; i ++ ) { if ( ! first ) { sb . append ( File . IDENT_2 ) ; } else { first = false ; } sb . append ( STRING_2 ) ; } first = true ; for ( int i = IDENT_9 ; i < ( IDENT_7 . size ( ) ) ; i ++ ) { if ( first ) { if ( ( sb . length ( ) ) != 0 ) { sb . append ( File . IDENT_2 ) ; } first = false ; } else { sb . append ( File . IDENT_2 ) ; } sb . append ( IDENT_7 . get ( i ) ) ; } if ( ( sb . length ( ) ) == 0 ) { return STRING_3 ; } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( path , STRING_3 ) 