METHOD_0 ( ) { project = new net . sourceforge . IDENT_0 . METHOD_1 ( ) ; try { project . build ( ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalStateException expected ) { "<AssertPlaceHolder>" ; } project . METHOD_2 ( IDENT_1 ) ; project . build ( ) ; } build ( ) { if ( ( IDENT_1 ) == null ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } if ( IDENT_2 ) { net . sourceforge . IDENT_0 . METHOD_1 . LOG . warn ( ( ( STRING_1 + ( name ) ) + STRING_2 ) ) ; return ; } if ( ( ( IDENT_3 ) && ( ! ( IDENT_4 ) ) ) && ( ! ( ( ! ( IDENT_5 ) ) && ( IDENT_6 ) ) ) ) { info ( STRING_3 ) ; return ; } final boolean IDENT_7 = IDENT_4 ; try { METHOD_3 ( new java . util . Date ( ) ) ; final net . sourceforge . IDENT_0 . IDENT_8 IDENT_9 = IDENT_1 . METHOD_4 ( ) ; if ( IDENT_9 == null ) { throw new java . lang . IllegalStateException ( STRING_4 ) ; } if ( IDENT_9 . METHOD_5 ( IDENT_10 ) ) { return ; } METHOD_6 ( ) ; final java . lang . String target = METHOD_7 ( IDENT_7 ) ; final org . IDENT_11 . Element IDENT_12 = METHOD_8 ( IDENT_7 ) ; if ( IDENT_12 == null ) { return ; } final net . sourceforge . IDENT_0 . IDENT_13 IDENT_14 = IDENT_1 . METHOD_9 ( ) ; IDENT_14 . METHOD_10 ( IDENT_12 ) ; final java . util . Date now ; if ( ( ( IDENT_1 . METHOD_11 ( ) ) != null ) && ( ( IDENT_1 . METHOD_11 ( ) . METHOD_12 ( ) ) != null ) ) { now = IDENT_1 . METHOD_11 ( ) . METHOD_12 ( ) ; } else { now = new java . util . Date ( ) ; } if ( METHOD_13 ( ) . METHOD_14 ( ) ) { IDENT_15 = METHOD_13 ( ) . METHOD_15 ( IDENT_15 , IDENT_14 . METHOD_16 ( ) ) ; } IDENT_14 . METHOD_10 ( METHOD_17 ( now ) ) ; METHOD_18 ( IDENT_16 . IDENT_17 ) ; final org . IDENT_11 . Element IDENT_18 = IDENT_9 . build ( IDENT_19 , IDENT_20 , now , METHOD_19 ( now ) , target , IDENT_21 ) ; IDENT_14 . METHOD_10 ( IDENT_18 . METHOD_20 ( ) ) ; boolean IDENT_22 = IDENT_14 . METHOD_21 ( ) ; METHOD_22 ( new net . sourceforge . IDENT_0 . events . METHOD_23 ( this , IDENT_22 ) ) ; if ( ( ! ( METHOD_13 ( ) . METHOD_14 ( ) ) ) && IDENT_22 ) { IDENT_15 = METHOD_13 ( ) . METHOD_15 ( IDENT_15 , IDENT_14 . METHOD_16 ( ) ) ; } METHOD_18 ( IDENT_16 . IDENT_23 ) ; IDENT_14 . METHOD_24 ( now ) ; if ( ! ( IDENT_6 ) ) { IDENT_20 = now ; } if ( IDENT_22 ) { IDENT_20 = now ; IDENT_24 = now ; info ( STRING_5 ) ; } else { info ( STRING_6 ) ; } ( IDENT_19 ) ++ ; METHOD_25 ( IDENT_22 ) ; METHOD_26 ( ) ; METHOD_27 ( IDENT_14 ) ; IDENT_14 . METHOD_28 ( ) ; } finally { METHOD_29 ( IDENT_7 ) ; METHOD_18 ( IDENT_16 . IDENT_25 ) ; } }
org . junit . Assert . assertEquals ( STRING_0 , expected . getMessage ( ) ) 