METHOD_0 ( ) { IDENT_0 . IDENT_1 . shared . client . configuration . api . IDENT_2 . IDENT_3 IDENT_4 = METHOD_1 ( INT_0 ) ; java . util . List < IDENT_0 . IDENT_1 . shared . client . configuration . api . IDENT_2 . IDENT_3 > IDENT_5 = java . util . Arrays . asList ( IDENT_4 ) ; IDENT_0 . IDENT_1 . shared . client . configuration . api . Configuration config = new IDENT_0 . IDENT_1 . shared . client . configuration . api . Configuration ( 1L ) ; config . METHOD_2 ( IDENT_5 ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_3 ( INT_0 ) ) . andReturn ( false ) ; org . easymock . EasyMock . replay ( IDENT_6 ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_6 ) ; } parse ( IDENT_0 . IDENT_1 . shared . client . configuration . api . Configuration ) { if ( ( ( configuration . METHOD_4 ( ) ) != null ) && ( ! ( configuration . METHOD_4 ( ) . isEmpty ( ) ) ) ) { return METHOD_5 ( configuration . METHOD_4 ( ) ) ; } else { throw new IDENT_0 . IDENT_1 . server . configuration . parser . exception . METHOD_6 ( STRING_0 ) ; } }
org . junit . Assert . assertEquals ( 0 , parser . parse ( config ) . size ( ) ) 