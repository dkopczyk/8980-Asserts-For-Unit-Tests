METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . getAbsolutePath ( ) ) ; IDENT_0 . IDENT_1 . IDENT_2 . mock . IDENT_8 IDENT_9 = new IDENT_0 . IDENT_1 . IDENT_2 . mock . METHOD_2 ( ) ; try { IDENT_5 . METHOD_3 ( ) ; IDENT_5 . METHOD_4 ( IDENT_9 ) ; IDENT_5 . METHOD_5 ( ) ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . exception . IDENT_10 e ) { org . junit . Assert . fail ( STRING_0 ) ; } "<AssertPlaceHolder>" ; } METHOD_6 ( ) { boolean isEmpty = false ; try { METHOD_7 ( ) ; if ( ! ( METHOD_8 ( ) . METHOD_9 ( ) ) ) { isEmpty = true ; } } catch ( java . io . IOException e ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . LOG . error ( STRING_1 , e ) ; } catch ( java . lang . Exception ex ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . LOG . error ( ( STRING_2 + ( ex . getMessage ( ) ) ) ) ; } finally { try { METHOD_10 ( ) ; } catch ( java . lang . Exception ex ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . LOG . error ( ( STRING_2 + ( ex . getMessage ( ) ) ) ) ; } } if ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . LOG . METHOD_11 ( ) ) IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 . LOG . debug ( ( STRING_3 + isEmpty ) ) ; return isEmpty ; }
org . junit . Assert . assertFalse ( IDENT_5 . METHOD_6 ( ) ) 