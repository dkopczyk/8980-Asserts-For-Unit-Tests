METHOD_0 ( ) { class IDENT_0 implements java . util . concurrent . IDENT_1 < java . lang . IDENT_2 > { MOD_0 final java . lang . String IDENT_3 ; MOD_0 final java . util . concurrent . IDENT_4 IDENT_5 ; METHOD_1 ( java . lang . String path , java . util . concurrent . IDENT_4 IDENT_6 ) { IDENT_3 = path ; IDENT_5 = IDENT_6 ; } @ alluxio . util . io . Override @ javax . annotation . IDENT_7 public alluxio . util . io . IDENT_2 call ( ) throws alluxio . util . io . Exception { IDENT_5 . METHOD_2 ( ) ; alluxio . util . io . IDENT_8 . METHOD_3 ( IDENT_3 , IDENT_9 ) ; return null ; } } final int IDENT_10 = 5 ; java . util . List < java . util . concurrent . IDENT_11 < java . lang . IDENT_2 > > IDENT_12 = new java . util . ArrayList ( IDENT_10 ) ; for ( int IDENT_13 = 0 ; IDENT_13 < 5 ; IDENT_13 ++ ) { final java . util . concurrent . IDENT_14 executor = java . util . concurrent . IDENT_15 . METHOD_4 ( IDENT_10 ) ; final java . util . concurrent . IDENT_4 IDENT_6 = new java . util . concurrent . METHOD_5 ( IDENT_10 ) ; try { java . io . File IDENT_16 = new java . io . File ( IDENT_17 . METHOD_6 ( ) , ( STRING_0 + IDENT_13 ) ) ; for ( int i = 0 ; i < IDENT_10 ; i ++ ) { java . io . File IDENT_18 = new java . io . File ( IDENT_16 , java . lang . String . valueOf ( i ) ) ; IDENT_12 . add ( executor . METHOD_7 ( new METHOD_1 ( IDENT_18 . getAbsolutePath ( ) , IDENT_6 ) ) ) ; } for ( java . util . concurrent . IDENT_11 < java . lang . IDENT_2 > f : IDENT_12 ) { f . get ( ) ; } "<AssertPlaceHolder>" ; } finally { executor . METHOD_8 ( ) ; } } } exists ( java . lang . String ) { return java . nio . file . IDENT_19 . exists ( java . nio . file . IDENT_20 . get ( path ) ) ; }
org . junit . Assert . assertTrue ( alluxio . util . io . IDENT_8 . exists ( IDENT_16 . getAbsolutePath ( ) ) ) 