METHOD_0 ( ) { br . com . IDENT_0 . IDENT_1 . http . route . IDENT_2 first = mock ( br . com . IDENT_0 . IDENT_1 . http . route . IDENT_2 . class ) ; when ( first . METHOD_1 ( ) ) . thenReturn ( METHOD_2 ( ) ) ; br . com . IDENT_0 . IDENT_1 . http . route . IDENT_2 IDENT_3 = mock ( br . com . IDENT_0 . IDENT_1 . http . route . IDENT_2 . class ) ; when ( IDENT_3 . METHOD_1 ( ) ) . thenReturn ( METHOD_2 ( ) ) ; br . com . IDENT_0 . IDENT_1 . controller . IDENT_4 IDENT_5 = IDENT_3 . METHOD_3 ( request , STRING_0 ) ; IDENT_6 . add ( IDENT_3 ) ; IDENT_6 . add ( first ) ; when ( first . METHOD_4 ( ) ) . thenReturn ( Path . IDENT_7 ) ; when ( IDENT_3 . METHOD_4 ( ) ) . thenReturn ( Path . IDENT_8 ) ; java . util . IDENT_9 < br . com . IDENT_0 . IDENT_1 . controller . IDENT_10 > get = java . util . IDENT_9 . of ( IDENT_10 . IDENT_11 ) ; when ( first . METHOD_5 ( ) ) . thenReturn ( get ) ; when ( IDENT_3 . METHOD_5 ( ) ) . thenReturn ( get ) ; when ( first . METHOD_6 ( anyString ( ) ) ) . thenReturn ( false ) ; when ( IDENT_3 . METHOD_6 ( anyString ( ) ) ) . thenReturn ( true ) ; br . com . IDENT_0 . IDENT_1 . controller . IDENT_4 found = IDENT_6 . parse ( STRING_1 , IDENT_10 . IDENT_11 , request ) ; "<AssertPlaceHolder>" ; } is ( java . lang . Class ) { br . com . IDENT_0 . IDENT_1 . proxy . IDENT_12 < T > handler = new br . com . IDENT_0 . IDENT_1 . proxy . IDENT_12 < T > ( ) { @ br . com . IDENT_0 . IDENT_1 . http . route . Override public java . lang . Object METHOD_7 ( java . lang . Object proxy , java . lang . reflect . Method method , java . lang . Object [ ] args , br . com . IDENT_0 . IDENT_1 . proxy . IDENT_13 IDENT_14 ) { boolean IDENT_15 = ! ( strategy . getClass ( ) . equals ( br . com . IDENT_0 . IDENT_1 . http . route . IDENT_16 . class ) ) ; if ( IDENT_15 ) { return null ; } is ( type , method ) ; return null ; } } ; return IDENT_17 . METHOD_8 ( type , handler ) ; }
org . junit . Assert . assertThat ( found , org . hamcrest . Matchers . is ( IDENT_5 ) ) 