METHOD_0 ( ) { java . util . List < org . camunda . bpm . IDENT_0 . debug . IDENT_1 . IDENT_2 > IDENT_3 = IDENT_4 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . util . List < org . camunda . bpm . IDENT_0 . debug . IDENT_1 . IDENT_2 > IDENT_3 = new java . util . ArrayList < org . camunda . bpm . IDENT_0 . debug . IDENT_1 . IDENT_2 > ( ) ; java . lang . String IDENT_5 = null ; java . lang . String IDENT_6 = null ; java . lang . String IDENT_7 = null ; int IDENT_8 = IDENT_9 . METHOD_2 ( IDENT_10 ) ; if ( METHOD_2 == ( - 1 ) ) { IDENT_6 = IDENT_10 ; } else { IDENT_5 = IDENT_10 . substring ( 0 , METHOD_2 ) ; IDENT_6 = IDENT_10 . substring ( ( METHOD_2 + 1 ) ) ; IDENT_7 = IDENT_10 . substring ( METHOD_2 , ( METHOD_2 + 1 ) ) ; } if ( IDENT_5 == null ) { IDENT_3 = METHOD_3 ( IDENT_6 ) ; } else { java . lang . String [ ] IDENT_11 = IDENT_9 . split ( IDENT_5 ) ; java . util . List < java . lang . Class < ? > > IDENT_12 = METHOD_4 ( IDENT_11 ) ; IDENT_3 = METHOD_5 ( IDENT_12 , IDENT_6 , ( IDENT_5 + IDENT_7 ) ) ; } return IDENT_3 ; }
org . junit . Assert . assertEquals ( 2 , IDENT_3 . size ( ) ) 