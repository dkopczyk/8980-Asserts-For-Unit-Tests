METHOD_0 ( ) { final net . IDENT_0 . processor . IDENT_1 . IDENT_2 IDENT_3 = new net . IDENT_0 . processor . IDENT_1 . METHOD_1 ( ) ; final java . lang . Double [ ] IDENT_4 = new net . IDENT_0 . processor . IDENT_1 . Double [ ] { null , null } ; try { final java . io . File IDENT_5 = new java . io . File ( getClass ( ) . getResource ( net . IDENT_0 . processor . IDENT_1 . IDENT_6 . IDENT_7 ) . METHOD_2 ( ) ) ; net . IDENT_0 . IDENT_8 IDENT_9 = new net . IDENT_0 . METHOD_3 ( IDENT_5 ) { @ net . IDENT_0 . processor . IDENT_1 . Override public void METHOD_4 ( java . lang . String [ ] elements , int IDENT_10 ) { if ( ( elements . length ) == 2 ) { java . lang . String IDENT_11 = ( ( ( STRING_0 + IDENT_10 ) + STRING_1 ) + ( IDENT_5 . getName ( ) ) ) + "]" ; "<AssertPlaceHolder>" ; } else { org . junit . Assert . fail ( ( ( ( ( STRING_0 + IDENT_10 ) + STRING_1 ) + ( IDENT_5 . getName ( ) ) ) + STRING_2 ) ) ; } } } ; IDENT_9 . METHOD_5 ( ) ; } catch ( java . net . IDENT_12 e ) { e . printStackTrace ( ) ; org . junit . Assert . fail ( ) ; } } process ( java . lang . Double , java . lang . Double , net . IDENT_0 . processor . IDENT_13 ) { return process ( x , y , IDENT_14 , result ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_11 , IDENT_4 , IDENT_3 . process ( elements [ 0 ] , elements [ 1 ] , null ) ) 