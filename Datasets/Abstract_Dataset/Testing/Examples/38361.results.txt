METHOD_0 ( ) { "<AssertPlaceHolder>" ; } apply ( IDENT_0 . IDENT_1 , IDENT_0 . IDENT_1 . IDENT_2 ) { if ( IDENT_3 . isEmpty ( ) ) { return IDENT_3 ; } final java . util . List < java . util . List < IDENT_4 > > IDENT_5 = new java . util . ArrayList ( ) ; final java . util . List < java . lang . Object > IDENT_6 = new java . util . ArrayList ( IDENT_3 . METHOD_1 ( ) ) ; final java . util . List < java . lang . Object > IDENT_7 = new java . util . ArrayList ( ) ; final java . util . List < java . lang . Object > index = new java . util . ArrayList ( ) ; if ( ( function instanceof IDENT_0 . IDENT_1 . IDENT_8 ) && ( ! ( IDENT_9 . isEmpty ( ) ) ) ) { for ( final java . lang . Object key : IDENT_9 . METHOD_2 ( ) ) { index . add ( key ) ; } } for ( final int c : METHOD_1 ) { if ( ( function instanceof IDENT_0 . IDENT_1 . IDENT_8 ) && ( ! ( IDENT_9 . isEmpty ( ) ) ) ) { final java . util . List < IDENT_4 > column = new java . util . ArrayList ( ) ; for ( final Map . Entry < java . lang . Object , IDENT_0 . impl . IDENT_10 > entry : IDENT_9 . entrySet ( ) ) { final IDENT_0 . impl . IDENT_10 IDENT_11 = entry . getValue ( ) ; final int r = IDENT_11 . METHOD_3 ( 0 ) ; column . add ( IDENT_3 . get ( r , c ) ) ; } IDENT_5 . add ( column ) ; IDENT_7 . add ( IDENT_6 . get ( c ) ) ; } else { IDENT_5 . add ( IDENT_3 . METHOD_4 ( c ) ) ; IDENT_7 . add ( IDENT_6 . get ( c ) ) ; } } for ( int c = 0 ; c < ( IDENT_3 . size ( ) ) ; c ++ ) { if ( ! ( METHOD_1 . contains ( c ) ) ) { final java . util . List < IDENT_4 > column = new java . util . ArrayList ( ) ; if ( IDENT_9 . isEmpty ( ) ) { try { if ( function instanceof IDENT_0 . IDENT_1 . IDENT_8 ) { column . add ( ( ( IDENT_4 ) ( IDENT_0 . IDENT_1 . IDENT_8 . class . METHOD_5 ( function ) . apply ( IDENT_3 . METHOD_4 ( c ) ) ) ) ) ; } else { for ( int r = 0 ; r < ( IDENT_3 . length ( ) ) ; r ++ ) { column . add ( ( ( IDENT_4 ) ( IDENT_0 . IDENT_1 . IDENT_2 . class . METHOD_5 ( function ) . apply ( IDENT_3 . get ( r , c ) ) ) ) ) ; } } } catch ( final java . lang . IDENT_12 IDENT_13 ) { } if ( function instanceof IDENT_0 . impl . IDENT_14 . IDENT_15 ) { IDENT_0 . impl . IDENT_14 . IDENT_15 . class . METHOD_5 ( function ) . METHOD_6 ( ) ; } } else { for ( final Map . Entry < java . lang . Object , IDENT_0 . impl . IDENT_10 > entry : IDENT_9 . entrySet ( ) ) { final IDENT_0 . impl . IDENT_10 IDENT_11 = entry . getValue ( ) ; try { if ( function instanceof IDENT_0 . IDENT_1 . IDENT_8 ) { final java . util . List < IDENT_4 > values = new java . util . ArrayList ( IDENT_11 . METHOD_7 ( ) ) ; for ( int r = IDENT_11 . METHOD_3 ( 0 ) ; r >= 0 ; r = IDENT_11 . METHOD_3 ( ( r + 1 ) ) ) { values . add ( IDENT_3 . get ( r , c ) ) ; } column . add ( ( ( IDENT_4 ) ( IDENT_0 . IDENT_1 . IDENT_8 . class . METHOD_5 ( function ) . apply ( values ) ) ) ) ; } else { for ( int r = IDENT_11 . METHOD_3 ( 0 ) ; r >= 0 ; r = IDENT_11 . METHOD_3 ( ( r + 1 ) ) ) { column . add ( ( ( IDENT_4 ) ( IDENT_0 . IDENT_1 . IDENT_2 . class . METHOD_5 ( function ) . apply ( IDENT_3 . get ( r , c ) ) ) ) ) ; } } } catch ( final java . lang . IDENT_12 IDENT_13 ) { } if ( function instanceof IDENT_0 . impl . IDENT_14 . IDENT_15 ) { IDENT_0 . impl . IDENT_14 . IDENT_15 . class . METHOD_5 ( function ) . METHOD_6 ( ) ; } } } if ( ! ( column . isEmpty ( ) ) ) { IDENT_5 . add ( column ) ; IDENT_7 . add ( IDENT_6 . get ( c ) ) ; } } } if ( ( IDENT_7 . size ( ) ) <= ( METHOD_1 . size ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_0 + ( function . getClass ( ) . METHOD_8 ( ) ) ) ) ; } return new IDENT_0 . METHOD_9 ( index , IDENT_7 , IDENT_5 ) ; }
org . junit . Assert . assertArrayEquals ( new java . lang . Object [ ] { 1 , 2 , 0 , 2 , 1 , 2 } , IDENT_3 . apply ( new IDENT_0 . METHOD_9 . IDENT_2 < java . lang . Object , java . lang . Integer > ( ) { @ IDENT_0 . Override public java . lang . Integer apply ( final java . lang . Object value ) { return value == null ? 0 : value . toString ( ) . length ( ) ; } } ) . toArray ( ) ) 