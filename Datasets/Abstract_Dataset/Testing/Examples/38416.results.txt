METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; com . IDENT_2 . IDENT_3 . IDENT_4 < IDENT_5 , IDENT_6 > map = new com . IDENT_2 . IDENT_3 . IDENT_4 < IDENT_5 , IDENT_6 > ( 0 ) { @ com . IDENT_2 . IDENT_3 . Override MOD_0 void METHOD_2 ( int IDENT_7 ) { super . METHOD_2 ( IDENT_7 ) ; IDENT_1 . METHOD_3 ( ) ; } } ; final int max = ( com . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_4 ( ) ) ? 0 : com . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_5 ( 0 , INT_0 ) ; for ( int i = 0 ; i < max ; i ++ ) { map . put ( com . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_6 ( i ) , IDENT_9 ) ; } final int IDENT_10 = com . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_5 ( max , ( max + INT_1 ) ) ; map . METHOD_7 ( ( IDENT_10 + ( map . size ( ) ) ) ) ; final int IDENT_11 = IDENT_1 . get ( ) ; for ( int i = 0 ; i < IDENT_10 ; i ++ ) { map . put ( com . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_6 ( i ) , IDENT_9 ) ; } "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . Integer ) { }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_1 . get ( ) ) 