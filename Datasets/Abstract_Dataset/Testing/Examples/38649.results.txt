METHOD_0 ( ) { io . cdap . cdap . api . data . schema . Schema IDENT_0 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_0 , Schema . Field . of ( STRING_1 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_1 ) ) , Schema . Field . of ( STRING_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) , Schema . Field . of ( STRING_3 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) , Schema . Field . of ( STRING_4 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_3 ) ) ) ; io . cdap . cdap . api . data . schema . Schema IDENT_4 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_2 , Schema . Field . of ( STRING_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) , Schema . Field . of ( STRING_5 , io . cdap . cdap . api . data . schema . Schema . METHOD_2 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) ) ) ; io . cdap . plugin . batch . IDENT_5 . IDENT_6 IDENT_7 = new io . cdap . plugin . batch . IDENT_5 . METHOD_3 ( STRING_2 , STRING_6 ) ; io . cdap . plugin . batch . IDENT_5 . IDENT_8 IDENT_9 = new io . cdap . plugin . batch . IDENT_5 . METHOD_4 ( IDENT_7 ) ; io . cdap . cdap . IDENT_10 . mock . common . IDENT_11 IDENT_12 = new io . cdap . cdap . IDENT_10 . mock . common . METHOD_5 ( IDENT_0 , java . util . Collections . IDENT_13 ) ; IDENT_9 . METHOD_6 ( IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { java . util . List < io . cdap . cdap . api . data . schema . Schema . Field > fields = new java . util . ArrayList ( ) ; java . lang . String [ ] IDENT_14 = IDENT_15 . split ( STRING_7 ) ; for ( java . lang . String mapping : IDENT_14 ) { java . lang . String [ ] params = mapping . split ( STRING_8 ) ; java . lang . String IDENT_16 = params [ 0 ] . trim ( ) ; if ( com . google . common . base . IDENT_17 . METHOD_8 ( IDENT_16 ) ) { throw new java . lang . IllegalArgumentException ( STRING_9 ) ; } else if ( ( ( params . length ) < 2 ) || ( com . google . common . base . IDENT_17 . METHOD_8 ( params [ 1 ] ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_10 + IDENT_16 ) ) ; } io . cdap . cdap . api . data . schema . Schema . Field field = Schema . Field . of ( IDENT_16 , io . cdap . cdap . api . data . schema . Schema . METHOD_9 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . valueOf ( params [ 1 ] . trim ( ) . METHOD_10 ( ) ) ) ) ) ; if ( fields . contains ( field ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_11 , IDENT_16 , IDENT_16 ) ) ; } else { fields . add ( field ) ; } } return io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_12 , fields ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , IDENT_12 . METHOD_7 ( ) ) 