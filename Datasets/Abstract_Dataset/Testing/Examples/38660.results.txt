METHOD_0 ( ) { java . util . List < io . cdap . plugin . batch . IDENT_0 . IDENT_1 . IDENT_2 > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( new io . cdap . plugin . batch . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_0 , STRING_1 , STRING_0 , Schema . Field . of ( STRING_0 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_4 ) ) ) ) ; IDENT_3 . add ( new io . cdap . plugin . batch . IDENT_0 . IDENT_1 . METHOD_1 ( STRING_2 , STRING_3 , STRING_2 , Schema . Field . of ( STRING_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_4 ) ) ) ) ; java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_5 = new java . util . METHOD_2 ( ) ; IDENT_5 . put ( STRING_1 , java . util . Collections . singletonList ( STRING_0 ) ) ; IDENT_5 . put ( STRING_3 , java . util . Collections . singletonList ( STRING_2 ) ) ; java . util . List < io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 > IDENT_9 = io . cdap . plugin . batch . IDENT_0 . IDENT_1 . METHOD_3 ( IDENT_3 , IDENT_5 ) ; io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 operation = new io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . METHOD_4 ( STRING_4 , IDENT_1 . IDENT_10 , java . util . Arrays . asList ( STRING_5 , STRING_6 ) , java . util . Arrays . asList ( STRING_0 , STRING_2 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . util . Collection , java . util . Map ) { java . util . IDENT_11 < io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 > operations = new java . util . METHOD_5 ( ) ; java . util . List < java . lang . String > IDENT_12 = new java . util . ArrayList ( ) ; java . util . Set < java . lang . String > IDENT_13 = new java . util . METHOD_6 ( ) ; for ( Map . Entry < java . lang . String , java . util . List < java . lang . String > > IDENT_14 : IDENT_5 . entrySet ( ) ) { for ( java . lang . String field : IDENT_14 . getValue ( ) ) { IDENT_12 . add ( ( ( ( IDENT_14 . getKey ( ) ) + STRING_7 ) + field ) ) ; IDENT_13 . add ( field ) ; } } io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 IDENT_15 = new io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . METHOD_4 ( STRING_4 , io . cdap . plugin . batch . IDENT_0 . IDENT_1 . IDENT_10 , IDENT_12 , new java . util . ArrayList ( IDENT_13 ) ) ; operations . add ( IDENT_15 ) ; java . util . Set < java . lang . String > IDENT_16 = new java . util . HashSet ( IDENT_13 ) ; for ( io . cdap . plugin . batch . IDENT_0 . IDENT_1 . METHOD_1 IDENT_17 : IDENT_3 ) { java . lang . String IDENT_18 = ( IDENT_16 . contains ( IDENT_17 . IDENT_19 ) ) ? IDENT_17 . IDENT_19 : ( ( IDENT_17 . IDENT_20 ) + STRING_7 ) + ( IDENT_17 . IDENT_19 ) ; if ( IDENT_17 . name . equals ( IDENT_17 . IDENT_19 ) ) { if ( IDENT_5 . get ( IDENT_17 . IDENT_20 ) . contains ( IDENT_17 . IDENT_19 ) ) { continue ; } java . lang . String IDENT_21 = java . lang . String . format ( STRING_8 , IDENT_18 ) ; io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 IDENT_22 = new io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . METHOD_4 ( IDENT_21 , io . cdap . plugin . batch . IDENT_0 . IDENT_1 . IDENT_23 , java . util . Collections . singletonList ( IDENT_18 ) , IDENT_17 . name ) ; operations . add ( IDENT_22 ) ; continue ; } java . lang . String IDENT_21 = java . lang . String . format ( STRING_9 , IDENT_18 ) ; io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . IDENT_8 transform = new io . cdap . cdap . IDENT_6 . api . IDENT_7 . field . METHOD_4 ( IDENT_21 , io . cdap . plugin . batch . IDENT_0 . IDENT_1 . IDENT_24 , java . util . Collections . singletonList ( IDENT_18 ) , IDENT_17 . name ) ; operations . add ( transform ) ; } return operations ; }
org . junit . Assert . assertEquals ( java . util . Collections . singletonList ( operation ) , IDENT_9 ) 