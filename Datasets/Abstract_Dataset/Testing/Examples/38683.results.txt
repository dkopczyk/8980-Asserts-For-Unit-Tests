METHOD_0 ( ) { io . cdap . cdap . api . data . schema . Schema IDENT_0 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_0 , Schema . Field . of ( STRING_1 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_1 ) ) , Schema . Field . of ( STRING_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_1 ) ) , Schema . Field . of ( STRING_3 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) ) ; io . cdap . cdap . api . data . schema . Schema IDENT_3 = io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_0 , Schema . Field . of ( STRING_1 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_1 ) ) , Schema . Field . of ( STRING_2 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_1 ) ) , Schema . Field . of ( STRING_3 , io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . IDENT_2 ) ) ) ; io . cdap . plugin . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = new io . cdap . plugin . IDENT_4 . IDENT_5 . METHOD_2 ( STRING_4 , STRING_1 , IDENT_0 . toString ( ) ) ; io . cdap . plugin . IDENT_4 . IDENT_5 IDENT_8 = new io . cdap . plugin . IDENT_4 . METHOD_3 ( IDENT_7 ) ; io . cdap . cdap . IDENT_9 . mock . common . IDENT_10 IDENT_11 = new io . cdap . cdap . IDENT_9 . mock . common . METHOD_4 ( IDENT_3 ) ; IDENT_8 . METHOD_5 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( ) { java . util . List < io . cdap . cdap . api . data . schema . Schema . Field > fields = new java . util . ArrayList ( ) ; java . lang . String [ ] IDENT_12 = IDENT_13 . split ( STRING_5 ) ; for ( java . lang . String mapping : IDENT_12 ) { java . lang . String [ ] params = mapping . split ( STRING_6 ) ; java . lang . String IDENT_14 = params [ 0 ] . trim ( ) ; if ( com . google . common . base . IDENT_15 . METHOD_7 ( IDENT_14 ) ) { throw new java . lang . IllegalArgumentException ( STRING_7 ) ; } else if ( ( ( params . length ) < 2 ) || ( com . google . common . base . IDENT_15 . METHOD_7 ( params [ 1 ] ) ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_8 + IDENT_14 ) ) ; } io . cdap . cdap . api . data . schema . Schema . Field field = Schema . Field . of ( IDENT_14 , io . cdap . cdap . api . data . schema . Schema . METHOD_8 ( io . cdap . cdap . api . data . schema . Schema . of ( Schema . Type . valueOf ( params [ 1 ] . trim ( ) . METHOD_9 ( ) ) ) ) ) ; if ( fields . contains ( field ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_9 , IDENT_14 , IDENT_14 ) ) ; } else { fields . add ( field ) ; } } return io . cdap . cdap . api . data . schema . Schema . METHOD_1 ( STRING_10 , fields ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_11 . METHOD_6 ( ) ) 