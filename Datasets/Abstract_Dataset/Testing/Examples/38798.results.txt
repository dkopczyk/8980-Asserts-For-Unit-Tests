METHOD_0 ( ) { net . IDENT_0 . core . business . version . IDENT_1 IDENT_2 = METHOD_1 ( net . IDENT_0 . core . business . version . IDENT_1 . class ) ; replay ( IDENT_2 ) ; net . IDENT_0 . core . backend . handler . IDENT_3 IDENT_4 = new net . IDENT_0 . core . backend . handler . METHOD_2 ( IDENT_2 ) ; java . util . Collection < net . IDENT_0 . core . backend . handler . METHOD_2 . IDENT_5 > IDENT_6 = IDENT_4 . METHOD_3 ( null ) ; "<AssertPlaceHolder>" ; verify ( IDENT_2 ) ; } METHOD_3 ( java . lang . String ) { java . util . Collection < net . IDENT_0 . core . backend . handler . METHOD_2 . IDENT_5 > IDENT_6 = new java . util . ArrayList ( ) ; if ( ( IDENT_7 == null ) || ( STRING_0 . equals ( IDENT_7 ) ) ) { java . io . File IDENT_8 = new java . io . File ( net . IDENT_0 . core . backend . handler . IDENT_9 . getValue ( ) ) ; IDENT_6 . add ( new net . IDENT_0 . core . backend . handler . METHOD_2 . METHOD_4 ( IDENT_8 . getName ( ) , IDENT_8 . getAbsolutePath ( ) ) ) ; java . nio . file . IDENT_10 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ( root ) -> IDENT_6 . add ( new net . IDENT_0 . core . backend . handler . METHOD_4 ( root . toString ( ) , root . toString ( ) ) ) ) ; } else { IDENT_6 . addAll ( METHOD_8 ( IDENT_7 , false ) . stream ( ) . map ( ( child ) -> new net . IDENT_0 . core . backend . handler . METHOD_4 ( child . getName ( ) , child . getAbsolutePath ( ) ) ) . collect ( toList ( ) ) ) ; } return IDENT_6 ; }
org . junit . Assert . assertNotNull ( IDENT_6 ) 