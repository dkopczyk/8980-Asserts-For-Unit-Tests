METHOD_0 ( ) { org . openscience . cdk . IDENT_0 . IDENT_1 mock = mock ( org . openscience . cdk . IDENT_0 . IDENT_1 . class ) ; when ( mock . matches ( any ( org . openscience . cdk . interfaces . IDENT_2 . class ) , any ( org . openscience . cdk . interfaces . IDENT_2 . class ) ) ) . thenReturn ( false ) ; org . openscience . cdk . IDENT_0 . IDENT_3 state = METHOD_1 ( org . openscience . cdk . IDENT_0 . IDENT_4 . METHOD_2 ( ) , mock ) ; state . IDENT_5 [ 0 ] = 0 ; state . IDENT_5 [ 1 ] = 1 ; state . IDENT_5 [ 2 ] = 2 ; state . IDENT_5 [ 3 ] = 3 ; state . IDENT_5 [ 4 ] = 4 ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { "<AssertPlaceHolder>" ; } } } METHOD_3 ( int , int ) { if ( ! ( IDENT_6 . matches ( IDENT_7 . METHOD_4 ( n ) , IDENT_8 . METHOD_4 ( m ) ) ) ) return false ; int IDENT_9 = 0 ; int IDENT_10 = 0 ; int IDENT_11 = 0 ; int IDENT_12 = 0 ; for ( int IDENT_13 : IDENT_14 [ n ] ) { int IDENT_15 = IDENT_5 [ IDENT_13 ] ; if ( IDENT_15 != ( IDENT_16 ) ) { org . openscience . cdk . interfaces . IDENT_2 IDENT_17 = IDENT_18 . get ( m , IDENT_15 ) ; if ( IDENT_17 == null ) return false ; if ( ! ( IDENT_19 . matches ( IDENT_20 . get ( n , IDENT_13 ) , IDENT_17 ) ) ) return false ; } else { if ( ( IDENT_21 [ IDENT_13 ] ) > 0 ) IDENT_9 ++ ; else IDENT_11 ++ ; } } for ( int IDENT_15 : IDENT_22 [ m ] ) { int IDENT_13 = IDENT_23 [ IDENT_15 ] ; if ( IDENT_13 != ( IDENT_16 ) ) { org . openscience . cdk . interfaces . IDENT_2 IDENT_24 = IDENT_20 . get ( n , IDENT_13 ) ; if ( IDENT_24 == null ) return false ; if ( ! ( IDENT_19 . matches ( IDENT_24 , IDENT_18 . get ( m , IDENT_15 ) ) ) ) return false ; } else { if ( ( IDENT_25 [ IDENT_15 ] ) > 0 ) IDENT_10 ++ ; else IDENT_12 ++ ; } } return ( IDENT_9 == IDENT_10 ) && ( IDENT_11 == IDENT_12 ) ; }
org . junit . Assert . assertFalse ( state . METHOD_3 ( i , j ) ) 