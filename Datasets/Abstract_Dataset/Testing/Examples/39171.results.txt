METHOD_0 ( ) { int [ ] [ ] IDENT_0 = org . openscience . cdk . graph . IDENT_1 . METHOD_1 ( new org . openscience . cdk . METHOD_2 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( org . openscience . cdk . interfaces . IDENT_2 ) { if ( container == null ) throw new java . lang . METHOD_3 ( STRING_0 ) ; int n = container . METHOD_4 ( ) ; int [ ] [ ] graph = new int [ n ] [ org . openscience . cdk . graph . IDENT_1 . IDENT_3 ] ; int [ ] IDENT_4 = new int [ n ] ; for ( org . openscience . cdk . interfaces . IDENT_5 IDENT_6 : container . METHOD_5 ( ) ) { int v = container . indexOf ( IDENT_6 . METHOD_6 ( ) ) ; int IDENT_7 = container . indexOf ( IDENT_6 . METHOD_7 ( ) ) ; if ( ( v < 0 ) || ( IDENT_7 < 0 ) ) throw new java . lang . IllegalArgumentException ( ( ( STRING_1 + ( container . indexOf ( IDENT_6 ) ) ) + STRING_2 ) ) ; graph [ v ] [ ( ( IDENT_4 [ v ] ) ++ ) ] = IDENT_7 ; graph [ IDENT_7 ] [ ( ( IDENT_4 [ IDENT_7 ] ) ++ ) ] = v ; if ( ( IDENT_4 [ v ] ) == ( graph [ v ] . length ) ) graph [ v ] = METHOD_8 ( graph [ v ] , ( ( IDENT_4 [ v ] ) * 2 ) ) ; if ( ( IDENT_4 [ IDENT_7 ] ) == ( graph [ IDENT_7 ] . length ) ) graph [ IDENT_7 ] = METHOD_8 ( graph [ IDENT_7 ] , ( ( IDENT_4 [ IDENT_7 ] ) * 2 ) ) ; } for ( int v = 0 ; v < n ; v ++ ) { graph [ v ] = METHOD_8 ( graph [ v ] , IDENT_4 [ v ] ) ; } return graph ; }
org . junit . Assert . assertThat ( IDENT_0 . length , org . hamcrest . CoreMatchers . is ( 0 ) ) 