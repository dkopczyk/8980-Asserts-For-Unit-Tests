METHOD_0 ( ) { org . openscience . cdk . interfaces . IDENT_0 m = org . openscience . cdk . graph . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 ) ; long [ ] IDENT_3 = org . openscience . cdk . graph . IDENT_1 . IDENT_4 . METHOD_2 ( m , org . openscience . cdk . graph . IDENT_5 . METHOD_3 ( m ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . openscience . cdk . interfaces . IDENT_0 ) { if ( container == null ) throw new java . lang . METHOD_4 ( STRING_1 ) ; int n = container . METHOD_5 ( ) ; int [ ] [ ] graph = new int [ n ] [ org . openscience . cdk . graph . IDENT_5 . IDENT_6 ] ; int [ ] IDENT_7 = new int [ n ] ; for ( org . openscience . cdk . interfaces . IDENT_8 IDENT_9 : container . METHOD_6 ( ) ) { int v = container . indexOf ( IDENT_9 . METHOD_7 ( ) ) ; int IDENT_10 = container . indexOf ( IDENT_9 . METHOD_8 ( ) ) ; if ( ( v < 0 ) || ( IDENT_10 < 0 ) ) throw new java . lang . IllegalArgumentException ( ( ( STRING_2 + ( container . indexOf ( IDENT_9 ) ) ) + STRING_3 ) ) ; graph [ v ] [ ( ( IDENT_7 [ v ] ) ++ ) ] = IDENT_10 ; graph [ IDENT_10 ] [ ( ( IDENT_7 [ IDENT_10 ] ) ++ ) ] = v ; if ( ( IDENT_7 [ v ] ) == ( graph [ v ] . length ) ) graph [ v ] = METHOD_9 ( graph [ v ] , ( ( IDENT_7 [ v ] ) * 2 ) ) ; if ( ( IDENT_7 [ IDENT_10 ] ) == ( graph [ IDENT_10 ] . length ) ) graph [ IDENT_10 ] = METHOD_9 ( graph [ IDENT_10 ] , ( ( IDENT_7 [ IDENT_10 ] ) * 2 ) ) ; } for ( int v = 0 ; v < n ; v ++ ) { graph [ v ] = METHOD_9 ( graph [ v ] , IDENT_7 [ v ] ) ; } return graph ; }
org . junit . Assert . assertThat ( IDENT_3 , org . hamcrest . CoreMatchers . is ( new long [ ] { 2 , 3 , 1 } ) ) 