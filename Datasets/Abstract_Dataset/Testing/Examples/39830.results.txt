METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( int , int ) { java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; if ( IDENT_0 == 1 ) { if ( IDENT_1 != 0 ) { sb . append ( STRING_0 ) . append ( org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) . append ( STRING_1 ) ; } else { sb . append ( org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ; } } else if ( IDENT_0 > 1 ) { if ( IDENT_1 != 0 ) { sb . append ( STRING_0 ) . append ( IDENT_0 ) . append ( org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) . append ( STRING_1 ) ; } else { sb . append ( IDENT_0 ) . append ( org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ; } } final char IDENT_6 = ( IDENT_1 < 0 ) ? org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 : org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_8 ; final int IDENT_9 = java . lang . Math . METHOD_2 ( IDENT_1 ) ; if ( IDENT_9 > 1 ) sb . append ( IDENT_9 ) ; if ( IDENT_9 > 0 ) sb . append ( IDENT_6 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertThat ( org . openscience . cdk . renderer . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ( - 2 ) , 0 ) , org . hamcrest . CoreMatchers . is ( "2" ) ) 