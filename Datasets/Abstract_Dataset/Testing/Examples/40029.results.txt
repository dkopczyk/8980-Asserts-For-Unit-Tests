METHOD_0 ( ) { java . util . Map < java . lang . Integer , java . lang . Double > map = new java . util . IDENT_0 < java . lang . Integer , java . lang . Double > ( ) ; map . put ( 1 , FLOAT_0 ) ; map . put ( 2 , 2.0 ) ; map . put ( 3 , 1.0 ) ; map . put ( 4 , FLOAT_1 ) ; java . util . Map < java . lang . Integer , java . lang . Double > expResult = new java . util . IDENT_0 < java . lang . Integer , java . lang . Double > ( ) ; expResult . put ( 3 , 1.0 ) ; expResult . put ( 2 , 2.0 ) ; expResult . put ( 1 , FLOAT_0 ) ; expResult . put ( 4 , FLOAT_1 ) ; java . util . Map < java . lang . Integer , java . lang . Double > result = org . openscience . cdk . IDENT_1 . filters . IDENT_2 . METHOD_1 ( map ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Map ) { java . util . List < Map . Entry < java . lang . Integer , java . lang . Double > > list = new java . util . IDENT_3 < Map . Entry < java . lang . Integer , java . lang . Double > > ( map . entrySet ( ) ) ; java . util . Collections . METHOD_2 ( list , new java . util . IDENT_4 < Map . Entry < java . lang . Integer , java . lang . Double > > ( ) { @ java . lang . Override public int compare ( Map . Entry < java . lang . Integer , java . lang . Double > entry , Map . Entry < java . lang . Integer , java . lang . Double > IDENT_5 ) { return entry . getValue ( ) . equals ( IDENT_5 . getValue ( ) ) ? 0 : ( entry . getValue ( ) ) > ( IDENT_5 . getValue ( ) ) ? 1 : - 1 ; } } ) ; java . util . Map < java . lang . Integer , java . lang . Double > result = new java . util . IDENT_6 < java . lang . Integer , java . lang . Double > ( ) ; for ( java . util . Iterator < Map . Entry < java . lang . Integer , java . lang . Double > > it = list . iterator ( ) ; it . hasNext ( ) ; ) { Map . Entry < java . lang . Integer , java . lang . Double > entry = it . next ( ) ; result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return result ; }
org . junit . Assert . assertEquals ( expResult , result ) 