METHOD_0 ( ) { org . openscience . cdk . geometry . IDENT_0 IDENT_1 = new org . openscience . cdk . geometry . METHOD_1 ( 0.0 , FLOAT_0 , FLOAT_1 , 0.0 , new org . openscience . cdk . geometry . METHOD_2 ( ) { @ org . openscience . cdk . geometry . Override public double METHOD_3 ( org . openscience . cdk . interfaces . IDENT_2 IDENT_3 , org . openscience . cdk . interfaces . IDENT_2 IDENT_4 ) { return 1.0 ; } } ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . openscience . cdk . interfaces . IDENT_5 , org . openscience . cdk . interfaces . IDENT_2 ) { int length = ( ( int ) ( ( ( IDENT_6 ) - ( IDENT_7 ) ) / ( IDENT_8 ) ) ) + 1 ; org . openscience . cdk . geometry . METHOD_1 . logger . debug ( STRING_0 , length ) ; int IDENT_9 = ( ( int ) ( ( ( IDENT_10 ) * FLOAT_2 ) / ( IDENT_8 ) ) ) ; double IDENT_11 = java . lang . Math . METHOD_4 ( IDENT_10 , 2.0 ) ; double [ ] IDENT_12 = new double [ IDENT_9 ] ; double IDENT_13 = 0.0 ; if ( ( IDENT_12 . length ) > 0 ) { IDENT_12 [ 0 ] = 1 ; for ( int IDENT_14 = 1 ; IDENT_14 < ( IDENT_12 . length ) ; IDENT_14 ++ ) { double IDENT_15 = java . lang . Math . exp ( ( ( ( - 1.0 ) * ( java . lang . Math . METHOD_4 ( ( ( ( double ) ( IDENT_14 ) ) * ( IDENT_8 ) ) , 2.0 ) ) ) / IDENT_11 ) ) ; IDENT_12 [ IDENT_14 ] = IDENT_15 ; IDENT_13 += IDENT_15 ; } for ( int IDENT_14 = 0 ; IDENT_14 < ( IDENT_12 . length ) ; IDENT_14 ++ ) { IDENT_12 [ IDENT_14 ] = ( IDENT_12 [ IDENT_14 ] ) / IDENT_13 ; } } double [ ] IDENT_16 = new double [ length ] ; double IDENT_17 = 0.0 ; int index = 0 ; javax . IDENT_18 . IDENT_19 IDENT_20 = IDENT_3 . METHOD_5 ( ) ; java . util . Iterator < org . openscience . cdk . interfaces . IDENT_2 > IDENT_21 = container . METHOD_6 ( ) . iterator ( ) ; while ( IDENT_21 . hasNext ( ) ) { org . openscience . cdk . interfaces . IDENT_2 IDENT_22 = ( ( org . openscience . cdk . interfaces . IDENT_2 ) ( IDENT_21 . next ( ) ) ) ; if ( IDENT_22 . equals ( IDENT_3 ) ) continue ; IDENT_17 = IDENT_20 . METHOD_7 ( IDENT_22 . METHOD_5 ( ) ) ; index = ( ( int ) ( ( METHOD_7 - ( IDENT_7 ) ) / ( this . IDENT_8 ) ) ) ; double IDENT_23 = 1.0 ; if ( ( IDENT_24 ) != null ) { IDENT_23 = IDENT_24 . METHOD_3 ( IDENT_3 , IDENT_22 ) ; } if ( ( IDENT_12 . length ) > 0 ) { IDENT_16 [ index ] += IDENT_23 * ( IDENT_12 [ 0 ] ) ; for ( int IDENT_14 = 1 ; IDENT_14 < ( IDENT_12 . length ) ; IDENT_14 ++ ) { double IDENT_25 = IDENT_23 * ( IDENT_12 [ IDENT_14 ] ) ; if ( ( index - IDENT_14 ) >= 0 ) { IDENT_16 [ ( index - IDENT_14 ) ] += IDENT_25 ; } if ( ( index + IDENT_14 ) < length ) { IDENT_16 [ ( index + IDENT_14 ) ] += IDENT_25 ; } } } else { IDENT_16 [ index ] += IDENT_23 ; } } return IDENT_16 ; }
org . junit . Assert . assertNotNull ( IDENT_1 ) 