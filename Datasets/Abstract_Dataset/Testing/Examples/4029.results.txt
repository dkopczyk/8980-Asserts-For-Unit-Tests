METHOD_0 ( ) { IDENT_0 . util . IDENT_1 . Map < java . lang . String , java . lang . Integer > map = IDENT_0 . util . IDENT_1 . IDENT_2 . of ( IDENT_0 . util . IDENT_1 . IDENT_3 . METHOD_1 ( ) ) . append ( STRING_0 , 4 ) . METHOD_2 ( IDENT_2 :: of ) . append ( STRING_1 , 5 ) . METHOD_3 ( ) ; IDENT_0 . util . IDENT_1 . Map < java . lang . String , java . lang . Integer > expected = IDENT_0 . util . IDENT_1 . IDENT_2 . of ( "a" , 1 , STRING_2 , INT_0 , STRING_3 , INT_1 , STRING_0 , 4 , STRING_1 , 5 ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { IDENT_0 . util . IDENT_1 . Map < IDENT_4 , IDENT_5 > map = ( IDENT_0 . util . IDENT_1 . IDENT_2 . METHOD_4 ( ) ) ? new java . util . concurrent . METHOD_5 ( ) : new IDENT_0 . util . IDENT_1 . HashMap ( ) ; METHOD_6 ( IDENT_0 . util . IDENT_1 . IDENT_2 . METHOD_7 ( map ) ) ; return map ; }
org . junit . Assert . assertEquals ( expected , map ) 