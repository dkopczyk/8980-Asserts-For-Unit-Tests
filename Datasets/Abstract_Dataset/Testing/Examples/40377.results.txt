METHOD_0 ( ) { org . openscience . cdk . hash . IDENT_0 IDENT_1 = new org . openscience . cdk . hash . METHOD_1 ( ) ; org . openscience . cdk . hash . IDENT_2 generator = new org . openscience . cdk . hash . METHOD_2 ( new org . openscience . cdk . hash . METHOD_3 ( IDENT_3 . IDENT_4 ) , new org . openscience . cdk . hash . METHOD_4 ( new org . openscience . cdk . hash . METHOD_3 ( IDENT_3 . IDENT_4 ) , IDENT_1 , 8 ) , IDENT_1 , org . openscience . cdk . hash . IDENT_5 . IDENT_6 . IDENT_7 , new org . openscience . cdk . hash . METHOD_5 ( ) , org . openscience . cdk . hash . IDENT_8 . METHOD_6 ( ) ) ; long [ ] [ ] IDENT_9 = new long [ ] [ ] { new long [ ] { 1 , 2 , 3 , 4 } , new long [ ] { 1 , 1 , 1 , 1 } , new long [ ] { 1 , 2 , 2 , 4 } , new long [ ] { 2 , 2 , 2 , 2 } } ; long IDENT_10 = ( ( 1 OP_0 2 ) OP_0 3 ) OP_0 4 ; long IDENT_11 = ( ( 1 OP_0 ( IDENT_1 . next ( 1 ) ) ) OP_0 ( IDENT_1 . next ( IDENT_1 . next ( 1 ) ) ) ) OP_0 ( IDENT_1 . next ( IDENT_1 . next ( IDENT_1 . next ( 1 ) ) ) ) ; long IDENT_12 = ( ( 1 OP_0 2 ) OP_0 ( IDENT_1 . next ( 2 ) ) ) OP_0 4 ; long IDENT_13 = ( ( 2 OP_0 ( IDENT_1 . next ( 2 ) ) ) OP_0 ( IDENT_1 . next ( IDENT_1 . next ( 2 ) ) ) ) OP_0 ( IDENT_1 . next ( IDENT_1 . next ( IDENT_1 . next ( 2 ) ) ) ) ; long [ ] values = generator . METHOD_7 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( long [ ] [ ] ) { int n = IDENT_9 . length ; int m = IDENT_9 [ 0 ] . length ; long [ ] IDENT_14 = new long [ n ] ; long [ ] IDENT_15 = new long [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { java . util . Arrays . METHOD_8 ( IDENT_9 [ i ] ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( ( j > 0 ) && ( ( IDENT_9 [ i ] [ j ] ) == ( IDENT_9 [ i ] [ ( j - 1 ) ] ) ) ) { IDENT_14 [ i ] OP_1 IDENT_15 [ j ] = METHOD_9 ( IDENT_15 [ ( j - 1 ) ] ) ; } else { IDENT_14 [ i ] OP_1 IDENT_15 [ j ] = IDENT_9 [ i ] [ j ] ; } } } return IDENT_14 ; }
org . junit . Assert . assertArrayEquals ( values , new long [ ] { IDENT_10 , IDENT_11 , IDENT_12 , IDENT_13 } ) 