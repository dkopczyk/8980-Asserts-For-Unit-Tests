METHOD_0 ( ) { com . IDENT_0 . graph . IDENT_1 . IDENT_2 a = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 0 , "a" ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 b = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 1 , "b" ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 c = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 2 , STRING_0 ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 d = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 3 , STRING_1 ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 e = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 4 , STRING_2 ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 f = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 5 , STRING_3 ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 g = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 6 , STRING_4 ) ; com . IDENT_0 . graph . IDENT_1 . METHOD_1 IDENT_3 = new com . IDENT_0 . graph . IDENT_1 . METHOD_1 ( 7 , STRING_5 ) ; com . IDENT_0 . graph . IDENT_1 . IDENT_4 graph = new com . IDENT_0 . graph . IDENT_1 . METHOD_2 ( 8 , a ) ; graph . METHOD_3 ( a , b ) ; graph . METHOD_3 ( a , c ) ; graph . METHOD_3 ( b , a ) ; graph . METHOD_3 ( b , d ) ; graph . METHOD_3 ( b , e ) ; graph . METHOD_3 ( c , a ) ; graph . METHOD_3 ( c , f ) ; graph . METHOD_3 ( c , g ) ; graph . METHOD_3 ( d , b ) ; graph . METHOD_3 ( e , b ) ; graph . METHOD_3 ( e , IDENT_3 ) ; graph . METHOD_3 ( f , c ) ; graph . METHOD_3 ( g , c ) ; graph . METHOD_3 ( IDENT_3 , e ) ; boolean IDENT_5 = graph . METHOD_4 ( a , c ) ; "<AssertPlaceHolder>" ; IDENT_6 . METHOD_5 ( graph ) ; } METHOD_4 ( com . IDENT_0 . graph . IDENT_1 . METHOD_1 , com . IDENT_0 . graph . IDENT_1 . METHOD_1 ) { java . util . List < com . IDENT_0 . graph . IDENT_1 . METHOD_1 > IDENT_7 = IDENT_8 . get ( IDENT_9 . getId ( ) ) ; for ( int i = 0 ; i < ( IDENT_7 . size ( ) ) ; i ++ ) { if ( IDENT_7 . get ( i ) . getValue ( ) . equals ( IDENT_10 . getValue ( ) ) ) { return true ; } } return false ; }
org . junit . Assert . assertTrue ( IDENT_5 ) 