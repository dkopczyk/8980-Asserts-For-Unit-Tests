METHOD_0 ( ) { int IDENT_0 = 1000 ; long IDENT_1 = 0 ; long IDENT_2 = 0 ; final java . util . IDENT_3 random = new java . util . METHOD_1 ( INT_0 ) ; for ( int IDENT_4 = 0 ; IDENT_4 < INT_1 ; IDENT_4 ++ ) { if ( ( IDENT_4 OP_0 10 ) == 0 ) { System . out . println ( ( ( ( ( ( STRING_0 + IDENT_4 ) + STRING_1 ) + IDENT_1 ) + STRING_2 ) + IDENT_2 ) ) ; } "<AssertPlaceHolder>" ; for ( int IDENT_5 = 0 ; IDENT_5 < 1000 ; IDENT_5 ++ ) { for ( int IDENT_6 = 0 ; IDENT_6 < 10 ; IDENT_6 ++ ) { java . lang . Long key = ( ( long ) ( random . METHOD_2 ( IDENT_0 ) ) ) ; java . lang . String value = index . get ( key ) ; if ( value == null ) { index . put ( key , "value" ) ; IDENT_1 ++ ; } else { index . remove ( key ) ; IDENT_2 ++ ; } } if ( ( IDENT_5 OP_0 100 ) == 0 ) { IDENT_7 . METHOD_3 ( ) ; } } METHOD_4 ( ) ; } int IDENT_8 = 0 ; } size ( ) { return root ( ) . size ( this ) ; }
org . junit . Assert . assertEquals ( ( IDENT_1 - IDENT_2 ) , index . size ( ) ) 