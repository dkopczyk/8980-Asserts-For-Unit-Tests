METHOD_0 ( ) { try { final java . util . concurrent . atomic . IDENT_0 IDENT_1 = new java . util . concurrent . atomic . METHOD_1 ( ) ; org . apache . solr . client . IDENT_2 . impl . IDENT_3 IDENT_4 = new org . apache . solr . client . IDENT_2 . impl . METHOD_2 ( ) { @ org . apache . solr . client . IDENT_2 . impl . Override MOD_0 void METHOD_3 ( org . apache . http . impl . client . IDENT_5 IDENT_6 , org . apache . solr . common . params . IDENT_7 config ) { super . METHOD_3 ( IDENT_6 , config ) ; IDENT_1 . set ( config . METHOD_4 ( STRING_0 , ( - 1 ) ) ) ; } } ; org . apache . solr . client . IDENT_2 . impl . IDENT_8 . METHOD_5 ( IDENT_4 ) ; org . apache . solr . common . params . IDENT_9 params = new org . apache . solr . common . params . METHOD_6 ( ) ; params . set ( STRING_0 , 5 ) ; org . apache . solr . client . IDENT_2 . impl . IDENT_8 . METHOD_7 ( params ) . METHOD_8 ( ) . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } finally { org . apache . solr . client . IDENT_2 . impl . IDENT_8 . METHOD_5 ( new org . apache . solr . client . IDENT_2 . impl . METHOD_2 ( ) ) ; } } get ( ) { try { METHOD_10 ( ) . add ( IDENT_10 . IDENT_11 , METHOD_11 ( ) . METHOD_12 ( ) ) ; } catch ( java . lang . Exception e ) { METHOD_10 ( ) . METHOD_13 ( e ) ; } METHOD_14 ( org . apache . solr . rest . schema . IDENT_12 . log ) ; return new org . apache . solr . rest . schema . METHOD_15 ( ) ; }
org . junit . Assert . assertEquals ( 5 , IDENT_1 . get ( ) ) 