METHOD_0 ( ) { int IDENT_0 = net . sourceforge . IDENT_1 . test . util . TestUtils . METHOD_1 ( net . sourceforge . IDENT_1 . IDENT_2 . IDENT_3 . dom , STRING_0 , STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( IDENT_4 . util . Node , java . lang . String , java . lang . String ) { int IDENT_5 = 0 ; for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_6 = dom . iterator ( ) ; IDENT_6 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_7 = IDENT_6 . next ( ) ; if ( STRING_2 . equals ( IDENT_7 . name ( ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_8 = IDENT_7 . iterator ( ) ; IDENT_8 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_9 = IDENT_8 . next ( ) ; if ( STRING_3 . equals ( IDENT_9 . name ( ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_10 = IDENT_9 . iterator ( ) ; IDENT_10 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_11 = IDENT_10 . next ( ) ; if ( STRING_4 . equals ( IDENT_11 . name ( ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_12 = IDENT_11 . iterator ( ) ; IDENT_12 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_13 = IDENT_12 . next ( ) ; if ( STRING_5 . equals ( IDENT_13 . name ( ) ) ) { if ( IDENT_14 . equals ( IDENT_13 . METHOD_2 ( "name" ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_15 = IDENT_13 . iterator ( ) ; IDENT_15 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_16 = IDENT_15 . next ( ) ; if ( STRING_6 . equals ( IDENT_16 . name ( ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_17 = IDENT_16 . iterator ( ) ; IDENT_17 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_18 = IDENT_17 . next ( ) ; if ( STRING_7 . equals ( IDENT_18 . name ( ) ) ) { if ( IDENT_19 . equals ( IDENT_18 . METHOD_2 ( "name" ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_20 = IDENT_18 . iterator ( ) ; IDENT_20 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_21 = IDENT_20 . next ( ) ; if ( STRING_8 . equals ( IDENT_21 . name ( ) ) ) { for ( net . sourceforge . IDENT_1 . test . util . Iterator < IDENT_4 . util . Node > IDENT_22 = IDENT_21 . iterator ( ) ; IDENT_22 . hasNext ( ) ; ) { IDENT_4 . util . Node IDENT_23 = IDENT_22 . next ( ) ; if ( STRING_9 . equals ( IDENT_23 . name ( ) ) ) { IDENT_5 += java . lang . Integer . valueOf ( ( ( java . lang . String ) ( IDENT_23 . METHOD_2 ( STRING_10 ) ) ) ) ; } } } } } } } } } } } } } } } } } } return IDENT_5 ; }
org . junit . Assert . assertEquals ( 4 , IDENT_0 ) 