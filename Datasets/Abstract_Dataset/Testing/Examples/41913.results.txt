METHOD_0 ( ) { final org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_2 driver = mock ( org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; final org . openqa . selenium . IDENT_3 IDENT_4 = mock ( org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_5 . class , STRING_0 ) ; final org . openqa . selenium . IDENT_3 IDENT_6 = mock ( org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_5 . class , STRING_1 ) ; final org . openqa . selenium . IDENT_3 IDENT_7 = mock ( org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_5 . class , STRING_2 ) ; final org . openqa . selenium . IDENT_3 IDENT_8 = mock ( org . openqa . selenium . support . IDENT_0 . IDENT_1 . IDENT_5 . class , STRING_3 ) ; final java . util . List < org . openqa . selenium . IDENT_3 > IDENT_9 = new java . util . ArrayList < org . openqa . selenium . IDENT_3 > ( ) ; IDENT_9 . add ( IDENT_4 ) ; IDENT_9 . add ( IDENT_6 ) ; final java . util . List < org . openqa . selenium . IDENT_3 > IDENT_10 = new java . util . ArrayList < org . openqa . selenium . IDENT_3 > ( ) ; IDENT_10 . add ( IDENT_7 ) ; IDENT_10 . add ( IDENT_8 ) ; final java . util . List < org . openqa . selenium . IDENT_3 > IDENT_11 = new java . util . ArrayList < org . openqa . selenium . IDENT_3 > ( ) ; IDENT_11 . addAll ( IDENT_9 ) ; IDENT_11 . addAll ( IDENT_10 ) ; when ( driver . METHOD_1 ( STRING_4 ) ) . thenReturn ( IDENT_9 ) ; when ( driver . METHOD_1 ( STRING_5 ) ) . thenReturn ( IDENT_10 ) ; org . openqa . selenium . support . IDENT_0 . IDENT_12 IDENT_13 = new org . openqa . selenium . support . IDENT_0 . METHOD_2 ( org . openqa . selenium . IDENT_14 . name ( STRING_4 ) , org . openqa . selenium . IDENT_14 . name ( STRING_5 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . openqa . selenium . IDENT_14 ) { return IDENT_13 . METHOD_3 ( this ) ; }
org . junit . Assert . assertThat ( IDENT_13 . METHOD_3 ( driver ) , org . hamcrest . Matchers . equalTo ( IDENT_11 ) ) 