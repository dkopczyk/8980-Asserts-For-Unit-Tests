METHOD_0 ( ) { final org . openqa . grid . internal . IDENT_0 registry = org . openqa . grid . internal . IDENT_0 . newInstance ( ) ; org . openqa . grid . internal . IDENT_1 IDENT_2 = new org . openqa . grid . internal . METHOD_1 ( org . openqa . grid . internal . IDENT_3 . req , registry ) ; try { registry . add ( IDENT_2 ) ; org . openqa . grid . internal . mock . IDENT_4 IDENT_5 = org . openqa . grid . internal . mock . IDENT_6 . METHOD_2 ( registry , org . openqa . grid . internal . IDENT_3 . IDENT_7 ) ; IDENT_5 . process ( ) ; org . openqa . grid . internal . IDENT_8 IDENT_9 = new org . openqa . grid . internal . METHOD_3 ( ) ; IDENT_9 . start ( new java . lang . METHOD_4 ( ) { public void run ( ) { org . openqa . grid . internal . mock . IDENT_4 IDENT_5 = org . openqa . grid . internal . mock . IDENT_6 . METHOD_2 ( registry , org . openqa . grid . internal . IDENT_3 . IDENT_7 ) ; IDENT_5 . process ( ) ; org . openqa . grid . internal . IDENT_3 . IDENT_10 = true ; } } ) ; IDENT_9 . METHOD_5 ( 1 ) ; "<AssertPlaceHolder>" ; } finally { registry . METHOD_6 ( ) ; } } METHOD_5 ( int ) { int i = 0 ; while ( ( IDENT_11 != ( IDENT_12 . get ( ) ) ) && ( ( i ++ ) < 20 ) ) { if ( i > 20 ) throw new java . lang . RuntimeException ( STRING_0 ) ; try { java . lang . Thread . sleep ( 50 ) ; } catch ( java . lang . IDENT_13 e ) { throw new java . lang . RuntimeException ( e ) ; } } }
org . junit . Assert . assertFalse ( org . openqa . grid . internal . IDENT_3 . IDENT_10 ) 