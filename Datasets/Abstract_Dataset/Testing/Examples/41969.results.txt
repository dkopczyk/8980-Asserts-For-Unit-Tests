METHOD_0 ( ) { final org . openqa . grid . internal . IDENT_0 registry = org . openqa . grid . internal . IDENT_0 . newInstance ( ) ; org . openqa . grid . internal . IDENT_1 IDENT_2 = new org . openqa . grid . internal . METHOD_1 ( org . openqa . grid . internal . IDENT_3 . req , registry ) ; try { registry . add ( IDENT_2 ) ; org . openqa . grid . internal . IDENT_4 IDENT_5 = new org . openqa . grid . internal . METHOD_2 ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { IDENT_5 . start ( new java . lang . METHOD_3 ( ) { public void run ( ) { org . openqa . grid . web . servlet . handler . IDENT_6 IDENT_7 = org . openqa . grid . internal . mock . IDENT_8 . METHOD_4 ( registry , org . openqa . grid . internal . IDENT_3 . IDENT_9 ) ; IDENT_7 . process ( ) ; } } ) ; } IDENT_5 . METHOD_5 ( 5 ) ; IDENT_5 . start ( new java . lang . METHOD_3 ( ) { public void run ( ) { org . openqa . grid . web . servlet . handler . IDENT_6 IDENT_7 = org . openqa . grid . internal . mock . IDENT_8 . METHOD_4 ( registry , org . openqa . grid . internal . IDENT_3 . IDENT_10 ) ; IDENT_7 . process ( ) ; org . openqa . grid . internal . IDENT_3 . IDENT_11 = true ; } } ) ; IDENT_5 . METHOD_6 ( 6 ) ; "<AssertPlaceHolder>" ; } finally { registry . METHOD_7 ( ) ; } } METHOD_6 ( int ) { int i = 0 ; while ( ( IDENT_12 != ( IDENT_13 . get ( ) ) ) && ( ( i ++ ) < 20 ) ) { if ( i > 20 ) throw new java . lang . RuntimeException ( STRING_0 ) ; try { java . lang . Thread . sleep ( 50 ) ; } catch ( java . lang . IDENT_14 e ) { throw new java . lang . RuntimeException ( e ) ; } } }
org . junit . Assert . assertFalse ( org . openqa . grid . internal . IDENT_3 . IDENT_11 ) 