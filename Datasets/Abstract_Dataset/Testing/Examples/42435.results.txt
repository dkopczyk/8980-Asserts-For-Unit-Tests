METHOD_0 ( ) { java . lang . String source = this . getClass ( ) . getResource ( STRING_0 ) . getPath ( ) ; adapter . init ( source , null ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > metrics = METHOD_1 ( adapter , STRING_1 ) ; "<AssertPlaceHolder>" ; for ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 : metrics ) { if ( ! ( IDENT_4 . getName ( ) . contains ( STRING_2 ) ) ) { continue ; } com . IDENT_0 . IDENT_1 . tools . IDENT_5 . IDENT_6 . IDENT_7 type = METHOD_2 ( IDENT_4 . getName ( ) ) ; METHOD_3 ( IDENT_4 , adapter . METHOD_4 ( ) , type . METHOD_5 ( STRING_3 ) , type . METHOD_6 ( STRING_4 ) , type . METHOD_7 ( STRING_5 ) , STRING_6 , type . METHOD_8 ( ) ) ; } } METHOD_1 ( com . IDENT_0 . IDENT_1 . tools . IDENT_5 . IDENT_8 , java . lang . String ) { for ( java . lang . String entity : adapter . METHOD_9 ( ) ) { if ( IDENT_9 . equals ( entity ) ) { return adapter . METHOD_10 ( entity ) ; } } throw new java . lang . IllegalArgumentException ( ( STRING_7 + IDENT_9 ) ) ; }
org . junit . Assert . assertEquals ( com . IDENT_0 . IDENT_1 . tools . IDENT_5 . IDENT_6 . IDENT_7 . values ( ) . length , metrics . size ( ) ) 