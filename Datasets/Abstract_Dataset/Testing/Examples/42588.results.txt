METHOD_0 ( ) { org . antlr . runtime . tree . IDENT_0 IDENT_1 = com . IDENT_2 . IDENT_3 . conf . IDENT_4 . METHOD_1 ( com . IDENT_2 . IDENT_3 . conf . IDENT_5 . simple ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_6 IDENT_7 = com . IDENT_2 . IDENT_3 . conf . IDENT_6 . METHOD_2 ( STRING_0 ) . child ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 . METHOD_2 ( STRING_1 ) . child ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 . METHOD_3 ( STRING_2 , com . IDENT_2 . IDENT_3 . conf . IDENT_6 . METHOD_2 ( STRING_3 ) ) ) ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > m = IDENT_7 . match ( IDENT_1 ) ; "<AssertPlaceHolder>" ; METHOD_4 ( m ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_5 . LOG . info ( m ) ; } match ( org . antlr . runtime . tree . IDENT_0 ) { switch ( IDENT_8 ) { case IDENT_9 : return new java . util . HashMap < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ( ) ; case IDENT_10 : { java . lang . String x = ( ( java . lang . String ) ( args [ 0 ] ) ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_6 IDENT_11 = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 1 ] ) ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > m = IDENT_11 . match ( IDENT_12 ) ; if ( m == null ) { return null ; } m . put ( x , IDENT_12 ) ; return m ; } case IDENT_13 : java . lang . String k = ( ( java . lang . String ) ( args [ 0 ] ) ) ; if ( ( IDENT_12 != null ) && ( k . equals ( IDENT_12 . getText ( ) ) ) ) { return new java . util . HashMap < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ( ) ; } return null ; case IDENT_14 : { com . IDENT_2 . IDENT_3 . conf . IDENT_6 parent = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 0 ] ) ) ; if ( IDENT_12 == null ) { return null ; } java . util . List < org . antlr . runtime . tree . IDENT_0 > ch = IDENT_12 . METHOD_5 ( ) ; if ( ch == null ) { return null ; } if ( ( ( ch . size ( ) ) + 1 ) != ( args . length ) ) { return null ; } java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > IDENT_15 = parent . match ( IDENT_12 ) ; if ( IDENT_15 == null ) return null ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ret = new java . util . HashMap < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ( ) ; for ( int i = ch . size ( ) ; i >= 1 ; i OP_0 ) { org . antlr . runtime . tree . IDENT_0 e = ch . get ( ( i - 1 ) ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_6 p = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ i ] ) ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > match = p . match ( e ) ; if ( match != null ) { ret . METHOD_6 ( match ) ; } else { return null ; } } ret . METHOD_6 ( IDENT_15 ) ; return ret ; } case IDENT_16 : { com . IDENT_2 . IDENT_3 . conf . IDENT_6 parent = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 0 ] ) ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_6 child = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 1 ] ) ) ; if ( IDENT_12 == null ) { return null ; } java . util . List < org . antlr . runtime . tree . IDENT_0 > ch = IDENT_12 . METHOD_5 ( ) ; if ( ch == null ) { return null ; } java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ret = parent . match ( IDENT_12 ) ; if ( ret == null ) return null ; for ( org . antlr . runtime . tree . IDENT_0 e : ch ) { java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > match = child . match ( e ) ; if ( match != null ) { match . METHOD_6 ( ret ) ; return match ; } } return null ; } case IDENT_17 : { com . IDENT_2 . IDENT_3 . conf . IDENT_6 parent = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 0 ] ) ) ; com . IDENT_2 . IDENT_3 . conf . IDENT_6 child = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 1 ] ) ) ; java . lang . Integer IDENT_18 = ( ( java . lang . Integer ) ( args [ 2 ] ) ) ; java . util . List < org . antlr . runtime . tree . IDENT_0 > ch = ( ( java . util . List < org . antlr . runtime . tree . IDENT_0 > ) ( IDENT_12 . METHOD_5 ( ) ) ) ; if ( ch == null ) { return null ; } java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > ret = parent . match ( IDENT_12 ) ; if ( ret == null ) return null ; org . antlr . runtime . tree . IDENT_0 IDENT_19 = ch . get ( IDENT_18 ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > match = child . match ( IDENT_19 ) ; if ( match != null ) { match . METHOD_6 ( ret ) ; return match ; } return null ; } case IDENT_20 : { com . IDENT_2 . IDENT_3 . conf . IDENT_6 IDENT_21 = ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 ) ( args [ 0 ] ) ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > IDENT_22 = IDENT_21 . match ( IDENT_12 ) ; if ( IDENT_22 != null ) { return IDENT_22 ; } if ( IDENT_12 == null ) { return null ; } java . util . List < org . antlr . runtime . tree . IDENT_0 > ch = ( ( java . util . List < org . antlr . runtime . tree . IDENT_0 > ) ( IDENT_12 . METHOD_5 ( ) ) ) ; if ( ch == null ) { return null ; } for ( org . antlr . runtime . tree . IDENT_0 e : ch ) { com . IDENT_2 . IDENT_3 . conf . IDENT_6 . LOG . debug ( e . METHOD_7 ( ) ) ; java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > match = this . match ( e ) ; if ( match != null ) { return match ; } } return null ; } case IDENT_23 : { for ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 p : ( ( com . IDENT_2 . IDENT_3 . conf . IDENT_6 [ ] ) ( args ) ) ) { java . util . Map < java . lang . String , org . antlr . runtime . tree . IDENT_0 > match = p . match ( IDENT_12 ) ; if ( match != null ) { return match ; } } return null ; } default : throw new java . lang . IllegalStateException ( ( STRING_4 + ( IDENT_8 ) ) ) ; } }
org . junit . Assert . assertNotNull ( m ) 