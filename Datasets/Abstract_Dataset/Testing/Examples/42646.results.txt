METHOD_0 ( ) { int IDENT_0 = 100 ; com . IDENT_1 . util . IDENT_2 . IDENT_3 < java . lang . String > hash = new com . IDENT_1 . util . IDENT_2 . IDENT_3 < java . lang . String > ( IDENT_0 , IDENT_4 ) ; java . util . List < java . lang . String > IDENT_5 = new java . util . ArrayList < java . lang . String > ( 20 ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( STRING_0 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { java . lang . String s = STRING_1 + i ; java . lang . String IDENT_6 = hash . METHOD_1 ( s ) ; sb . append ( ( IDENT_6 + STRING_2 ) ) ; IDENT_5 . add ( IDENT_6 ) ; } com . IDENT_1 . util . IDENT_2 . IDENT_7 . LOG . info ( sb . toString ( ) ) ; int IDENT_8 = 0 ; sb = new java . lang . StringBuilder ( ) ; sb . append ( STRING_3 ) ; hash . METHOD_2 ( STRING_4 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { java . lang . String s = STRING_1 + i ; java . lang . String IDENT_6 = hash . METHOD_1 ( s ) ; sb . append ( ( IDENT_6 + STRING_2 ) ) ; if ( ! ( IDENT_5 . get ( i ) . equals ( IDENT_6 ) ) ) { IDENT_8 ++ ; } } com . IDENT_1 . util . IDENT_2 . IDENT_7 . LOG . info ( sb . toString ( ) ) ; com . IDENT_1 . util . IDENT_2 . IDENT_7 . LOG . info ( ( ( STRING_5 + IDENT_8 ) + STRING_6 ) ) ; com . IDENT_1 . util . IDENT_2 . IDENT_7 . LOG . info ( STRING_3 ) ; hash . METHOD_3 ( STRING_4 ) ; sb = new java . lang . StringBuilder ( ) ; for ( int i = 0 ; i < 20 ; i ++ ) { java . lang . String s = STRING_1 + i ; java . lang . String IDENT_6 = hash . METHOD_1 ( s ) ; sb . append ( ( IDENT_6 + STRING_2 ) ) ; "<AssertPlaceHolder>" ; } com . IDENT_1 . util . IDENT_2 . IDENT_7 . LOG . info ( sb . toString ( ) ) ; } get ( T ) { assert val != null ; if ( IDENT_9 . containsKey ( val ) ) { return IDENT_9 . get ( val ) ; } return 0 ; }
org . junit . Assert . assertEquals ( IDENT_5 . get ( i ) , IDENT_6 ) 