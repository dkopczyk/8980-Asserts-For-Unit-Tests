METHOD_0 ( ) { final org . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . IDENT_4 fixture = new org . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; final java . util . Set < java . lang . String > IDENT_5 = new java . util . HashSet ( java . util . Arrays . asList ( STRING_0 ) ) ; final java . util . Set < java . lang . String > IDENT_6 = new java . util . HashSet ( ) ; final org . apache . commons . net . util . IDENT_7 . IDENT_8 IDENT_9 = new org . apache . commons . net . util . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; final java . util . regex . IDENT_10 regex = null ; final java . lang . String result = fixture . METHOD_4 ( IDENT_5 , IDENT_6 , IDENT_9 , regex ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . Set , java . util . Set , org . apache . commons . net . util . METHOD_2 . IDENT_8 , java . util . regex . IDENT_10 ) { if ( IDENT_9 != null ) { for ( final java . lang . String address : IDENT_5 ) { if ( IDENT_9 . METHOD_5 ( address ) ) { return address ; } } } if ( regex != null ) { for ( final java . lang . String address : IDENT_5 ) { if ( regex . matcher ( address ) . matches ( ) ) { return address ; } } } if ( IDENT_9 != null ) { for ( final java . lang . String address : IDENT_6 ) { if ( IDENT_9 . METHOD_5 ( address ) ) { return address ; } } } if ( regex != null ) { for ( final java . lang . String address : IDENT_6 ) { if ( regex . matcher ( address ) . matches ( ) ) { return address ; } } } if ( ( IDENT_5 . size ( ) ) > 0 ) { return IDENT_5 . iterator ( ) . next ( ) ; } return null ; }
org . junit . Assert . assertEquals ( STRING_0 , result ) 