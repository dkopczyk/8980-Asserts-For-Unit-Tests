METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_1 ( INT_0 ) ; double [ ] x = METHOD_2 ( 100 ) ; double [ ] y = METHOD_3 ( 100 ) ; x = METHOD_4 ( x ) ; y = METHOD_4 ( y ) ; double [ ] IDENT_3 = new double [ x . length ] ; for ( int i = 0 ; i < ( x . length ) ; i ++ ) IDENT_3 [ i ] = ( ( x [ i ] ) + ( y [ i ] ) ) / 2 ; x = METHOD_5 ( x ) ; y = METHOD_5 ( y ) ; IDENT_3 = METHOD_5 ( IDENT_3 ) ; IDENT_3 = METHOD_4 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( double [ ] ) { int n = x . length ; double IDENT_4 = 0.0 ; for ( int i = 0 ; i < n ; i ++ ) { double IDENT_5 = x [ i ] ; double IDENT_6 = java . lang . Math . log ( edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_7 ( 0 , 1 , IDENT_5 ) ) ; double IDENT_7 = x [ ( ( n - i ) - 1 ) ] ; double IDENT_8 = java . lang . Math . log ( ( 1.0 - ( edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_7 ( 0 , 1 , IDENT_7 ) ) ) ) ; double k = ( ( 2 * ( i + 1 ) ) - 1 ) * ( IDENT_6 + IDENT_8 ) ; IDENT_4 += k ; } IDENT_4 OP_0 ( ( double ) ( n ) ) ; return IDENT_4 ; }
org . junit . Assert . assertEquals ( ( - 100 ) , METHOD_6 ( IDENT_3 ) , 1.0 ) 