METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_1 ( INT_0 ) ; java . util . List < edu . IDENT_0 . IDENT_1 . test . Node > IDENT_3 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 3 ; i ++ ) { IDENT_3 . add ( new edu . IDENT_0 . IDENT_1 . data . METHOD_2 ( ( STRING_0 + ( i + 1 ) ) ) ) ; } edu . IDENT_0 . IDENT_1 . test . IDENT_4 IDENT_5 = new edu . IDENT_0 . IDENT_1 . test . METHOD_3 ( edu . IDENT_0 . IDENT_1 . test . IDENT_6 . METHOD_4 ( IDENT_3 , 0 , 3 , INT_1 , 15 , 15 , false ) ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_7 pattern = edu . IDENT_0 . IDENT_1 . search . IDENT_8 . METHOD_5 ( IDENT_5 ) ; java . util . List < edu . IDENT_0 . IDENT_1 . test . Node > nodes = pattern . METHOD_6 ( ) ; int IDENT_9 = 6 ; edu . IDENT_0 . IDENT_1 . data . IDENT_10 IDENT_11 = new edu . IDENT_0 . IDENT_1 . data . METHOD_7 ( ) ; for ( edu . IDENT_0 . IDENT_1 . test . Node node : nodes ) { int IDENT_12 = edu . IDENT_0 . IDENT_1 . util . IDENT_2 . getInstance ( ) . METHOD_8 ( IDENT_9 ) ; if ( IDENT_12 < 2 ) continue ; IDENT_11 . METHOD_9 ( IDENT_12 , node . getName ( ) ) ; } if ( ! ( IDENT_11 . METHOD_10 ( pattern ) ) ) { edu . IDENT_0 . IDENT_1 . search . IDENT_13 IDENT_14 = new edu . IDENT_0 . IDENT_1 . search . METHOD_11 ( pattern ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_7 IDENT_15 = null ; while ( IDENT_14 . hasNext ( ) ) { edu . IDENT_0 . IDENT_1 . test . IDENT_7 IDENT_16 = IDENT_14 . next ( ) ; if ( ! ( IDENT_11 . METHOD_10 ( IDENT_16 ) ) ) { IDENT_15 = IDENT_16 ; } } if ( IDENT_15 == null ) { org . junit . Assert . fail ( STRING_1 ) ; } } if ( ! ( IDENT_11 . METHOD_10 ( pattern ) ) ) { edu . IDENT_0 . IDENT_1 . search . METHOD_11 IDENT_17 = new edu . IDENT_0 . IDENT_1 . search . METHOD_11 ( pattern , IDENT_11 ) ; while ( IDENT_17 . hasNext ( ) ) { edu . IDENT_0 . IDENT_1 . test . IDENT_7 IDENT_16 = IDENT_17 . next ( ) ; if ( IDENT_11 . METHOD_10 ( IDENT_16 ) ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } } } edu . IDENT_0 . IDENT_1 . search . METHOD_11 IDENT_18 = new edu . IDENT_0 . IDENT_1 . search . METHOD_11 ( pattern ) ; int count = 0 ; while ( IDENT_18 . hasNext ( ) ) { IDENT_18 . next ( ) ; count ++ ; } "<AssertPlaceHolder>" ; } next ( ) { ++ ( index ) ; if ( ( index ) < ( IDENT_19 . size ( ) ) ) { return IDENT_19 . get ( index ) ; } else { return null ; } }
org . junit . Assert . assertEquals ( 6 , count ) 