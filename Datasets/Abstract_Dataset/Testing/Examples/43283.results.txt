METHOD_0 ( ) { int IDENT_0 = 10 ; double IDENT_1 = 1.0 ; java . util . List < edu . IDENT_2 . IDENT_3 . graph . Node > IDENT_4 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_4 . add ( new edu . IDENT_2 . IDENT_3 . data . METHOD_1 ( ( STRING_0 + i ) ) ) ; } edu . IDENT_2 . IDENT_3 . graph . IDENT_5 graph = edu . IDENT_2 . IDENT_3 . graph . IDENT_6 . METHOD_2 ( IDENT_4 , 0 , ( ( int ) ( IDENT_0 * IDENT_1 ) ) , INT_0 , 15 , 15 , false , true ) ; edu . IDENT_2 . IDENT_3 . test . IDENT_7 test = new edu . IDENT_2 . IDENT_3 . test . METHOD_3 ( graph ) ; edu . IDENT_2 . IDENT_3 . graph . IDENT_5 IDENT_8 = new edu . IDENT_2 . IDENT_3 . test . METHOD_4 ( test ) . search ( ) ; edu . IDENT_2 . IDENT_3 . graph . IDENT_5 IDENT_9 = new edu . IDENT_2 . IDENT_3 . test . METHOD_5 ( test ) . search ( ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( edu . IDENT_2 . IDENT_3 . graph . IDENT_5 ) { edu . IDENT_2 . IDENT_3 . graph . IDENT_5 IDENT_10 = new edu . IDENT_2 . IDENT_3 . graph . METHOD_7 ( graph . METHOD_8 ( ) ) ; for ( edu . IDENT_2 . IDENT_3 . graph . IDENT_11 IDENT_12 : graph . METHOD_9 ( ) ) { if ( ! ( IDENT_10 . METHOD_10 ( IDENT_12 . METHOD_11 ( ) , IDENT_12 . METHOD_12 ( ) ) ) ) { IDENT_10 . METHOD_13 ( IDENT_12 . METHOD_11 ( ) , IDENT_12 . METHOD_12 ( ) ) ; } } return IDENT_10 ; }
org . junit . Assert . assertEquals ( IDENT_8 , edu . IDENT_2 . IDENT_3 . graph . IDENT_6 . METHOD_6 ( IDENT_9 ) ) 