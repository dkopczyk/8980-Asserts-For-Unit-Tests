METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . test . Node IDENT_2 = new edu . IDENT_0 . IDENT_1 . test . METHOD_1 ( STRING_0 ) ; edu . IDENT_0 . IDENT_1 . test . Node IDENT_3 = new edu . IDENT_0 . IDENT_1 . test . METHOD_1 ( STRING_1 ) ; edu . IDENT_0 . IDENT_1 . test . Node IDENT_4 = new edu . IDENT_0 . IDENT_1 . test . METHOD_1 ( STRING_2 ) ; edu . IDENT_0 . IDENT_1 . test . Node IDENT_5 = new edu . IDENT_0 . IDENT_1 . test . METHOD_1 ( STRING_3 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_7 = new edu . IDENT_0 . IDENT_1 . test . METHOD_2 ( ) ; IDENT_7 . METHOD_3 ( IDENT_2 ) ; IDENT_7 . METHOD_3 ( IDENT_3 ) ; IDENT_7 . METHOD_3 ( IDENT_4 ) ; IDENT_7 . METHOD_3 ( IDENT_5 ) ; IDENT_7 . METHOD_4 ( IDENT_2 , IDENT_3 ) ; IDENT_7 . METHOD_4 ( IDENT_2 , IDENT_4 ) ; IDENT_7 . METHOD_4 ( IDENT_5 , IDENT_3 ) ; IDENT_7 . METHOD_4 ( IDENT_5 , IDENT_4 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_8 IDENT_9 = new edu . IDENT_0 . IDENT_1 . test . METHOD_5 ( IDENT_7 ) ; edu . IDENT_0 . IDENT_1 . search . IDENT_10 IDENT_11 = new edu . IDENT_0 . IDENT_1 . search . METHOD_6 ( IDENT_9 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_12 = IDENT_11 . search ( ) ; edu . IDENT_0 . IDENT_1 . test . Set < edu . IDENT_0 . IDENT_1 . test . Node > IDENT_13 = new edu . IDENT_0 . IDENT_1 . test . HashSet ( ) ; IDENT_13 . add ( IDENT_2 ) ; IDENT_13 . addAll ( IDENT_12 . METHOD_7 ( IDENT_2 ) ) ; for ( edu . IDENT_0 . IDENT_1 . test . Node child : IDENT_12 . METHOD_8 ( IDENT_2 ) ) { IDENT_13 . addAll ( IDENT_12 . METHOD_9 ( child ) ) ; } edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_14 = IDENT_12 . METHOD_10 ( new edu . IDENT_0 . IDENT_1 . test . ArrayList ( IDENT_13 ) ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_15 IDENT_16 = new edu . IDENT_0 . IDENT_1 . test . METHOD_11 ( IDENT_9 ) ; edu . IDENT_0 . IDENT_1 . test . IDENT_6 IDENT_17 = IDENT_16 . search ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } search ( edu . IDENT_0 . IDENT_1 . search . List ) { return null ; }
org . junit . Assert . assertEquals ( IDENT_14 , IDENT_17 ) 