METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . config . IDENT_2 expected = mock ( org . IDENT_0 . IDENT_1 . config . IDENT_2 . class ) ; when ( IDENT_3 . build ( ) ) . thenReturn ( expected ) ; org . IDENT_0 . IDENT_1 . config . IDENT_2 actual = IDENT_4 . METHOD_1 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . class ) ; "<AssertPlaceHolder>" ; verify ( IDENT_7 ) . METHOD_2 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . class . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_8 . class ) , IDENT_3 ) ; verify ( IDENT_9 ) . METHOD_2 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . class . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_10 . class ) , IDENT_3 ) ; verify ( IDENT_3 ) . METHOD_4 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 ) ; verify ( IDENT_12 ) . METHOD_5 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_13 . class ) , IDENT_14 ) ; verify ( IDENT_7 ) . METHOD_5 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_8 . class ) , IDENT_14 ) ; verify ( IDENT_15 ) . METHOD_5 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_16 . class ) , IDENT_14 ) ; verify ( IDENT_14 ) . METHOD_6 ( 0 ) ; verify ( IDENT_12 ) . METHOD_7 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . Type . class . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_13 . class ) , IDENT_17 ) ; verify ( IDENT_14 ) . METHOD_6 ( 1 ) ; verify ( IDENT_12 ) . METHOD_7 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . Type . class . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_13 . class ) , IDENT_18 ) ; verify ( IDENT_12 ) . METHOD_7 ( ( ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_13 ) ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 . METHOD_8 ( ) [ 1 ] [ 0 ] ) ) , IDENT_18 ) ; verify ( IDENT_7 ) . METHOD_7 ( ( ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_8 ) ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_11 . METHOD_8 ( ) [ 1 ] [ 1 ] ) ) , IDENT_18 ) ; verify ( IDENT_3 ) . METHOD_4 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_19 ) ; verify ( IDENT_9 ) . METHOD_5 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_6 . IDENT_19 . METHOD_3 ( org . IDENT_0 . IDENT_1 . config . IDENT_5 . IDENT_10 . class ) , IDENT_20 ) ; } METHOD_1 ( java . lang . Class ) { org . IDENT_0 . IDENT_1 . config . IDENT_21 config = IDENT_22 . newInstance ( IDENT_23 ) ; for ( java . lang . annotation . IDENT_24 annotation : IDENT_23 . METHOD_9 ( ) ) { IDENT_25 . get ( annotation . METHOD_10 ( ) ) . METHOD_2 ( annotation , config ) ; } for ( java . lang . reflect . Method IDENT_26 : IDENT_23 . METHOD_11 ( ) ) { org . IDENT_0 . IDENT_1 . config . IDENT_27 IDENT_28 = config . METHOD_4 ( IDENT_26 ) ; for ( java . lang . annotation . IDENT_24 IDENT_29 : IDENT_26 . METHOD_9 ( ) ) { IDENT_25 . get ( IDENT_29 . METHOD_10 ( ) ) . METHOD_5 ( IDENT_29 , IDENT_28 ) ; } org . IDENT_0 . IDENT_1 . config . Class < ? > [ ] IDENT_30 = IDENT_26 . METHOD_12 ( ) ; java . lang . reflect . Type [ ] IDENT_31 = IDENT_26 . METHOD_13 ( ) ; java . lang . annotation . IDENT_24 [ ] [ ] IDENT_32 = IDENT_26 . METHOD_8 ( ) ; for ( int i = 0 , max = IDENT_30 . length ; i < max ; i ++ ) { java . lang . reflect . Type IDENT_33 = IDENT_31 [ i ] ; java . lang . Class < ? > IDENT_34 = org . IDENT_0 . common . reflect . IDENT_35 . METHOD_14 ( IDENT_30 [ i ] , IDENT_33 ) ; java . lang . annotation . IDENT_24 [ ] IDENT_36 = METHOD_15 ( java . lang . annotation . IDENT_24 . class , IDENT_34 . METHOD_9 ( ) , IDENT_32 [ i ] ) ; org . IDENT_0 . IDENT_1 . config . IDENT_37 IDENT_38 = IDENT_28 . METHOD_6 ( i ) ; for ( java . lang . annotation . IDENT_24 IDENT_39 : IDENT_36 ) { IDENT_25 . get ( IDENT_39 . METHOD_10 ( ) ) . METHOD_7 ( IDENT_39 , IDENT_38 ) ; } } } return config . build ( ) ; }
org . junit . Assert . assertSame ( expected , actual ) 