METHOD_0 ( ) { java . io . InputStream stream = mock ( java . io . InputStream . class ) ; when ( IDENT_0 . METHOD_1 ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_0 . METHOD_2 ( ) ) . thenReturn ( ( ( java . lang . Class ) ( int . class ) ) ) ; when ( IDENT_0 . METHOD_3 ( ) ) . thenReturn ( int . class ) ; when ( IDENT_0 . METHOD_4 ( ) ) . thenReturn ( org . IDENT_1 . IDENT_2 . serializer . IDENT_3 ) ; when ( IDENT_0 . METHOD_5 ( ) ) . thenReturn ( stream ) ; when ( IDENT_4 . METHOD_6 ( int . class , int . class , stream , org . IDENT_1 . IDENT_2 . serializer . IDENT_3 ) ) . thenReturn ( INT_0 ) ; int actual = IDENT_5 . < java . lang . Integer > METHOD_6 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . Class , java . lang . reflect . Type , java . io . InputStream , java . nio . IDENT_6 . IDENT_7 ) { java . lang . String [ ] IDENT_8 = org . IDENT_1 . common . io . IDENT_9 . toString ( stream , IDENT_6 , true ) . split ( STRING_1 ) ; long [ ] IDENT_10 = new long [ IDENT_8 . length ] ; int i = 0 ; for ( java . lang . String in : IDENT_8 ) { IDENT_10 [ ( i ++ ) ] = java . lang . Long . METHOD_7 ( in ) ; } return ( ( T ) ( IDENT_10 ) ) ; }
org . junit . Assert . assertEquals ( INT_0 , actual ) 