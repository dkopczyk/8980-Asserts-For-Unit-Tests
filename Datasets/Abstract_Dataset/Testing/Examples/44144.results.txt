METHOD_0 ( ) { java . lang . Object instance = new java . lang . Object ( ) ; org . IDENT_0 . core . IDENT_1 IDENT_2 = mock ( org . IDENT_0 . core . IDENT_1 . class ) ; org . IDENT_0 . core . IDENT_3 IDENT_4 = new org . IDENT_0 . core . METHOD_1 ( IDENT_2 , instance ) ; java . lang . Object result = IDENT_4 . getInstance ( null ) ; "<AssertPlaceHolder>" ; } getInstance ( org . IDENT_0 . core . IDENT_5 ) { try { java . lang . Object object = IDENT_6 . get ( IDENT_7 ) ; if ( object != null ) { org . IDENT_0 . core . provider . IDENT_8 IDENT_9 = new org . IDENT_0 . core . impl . provider . METHOD_2 ( object ) ; java . util . List < org . IDENT_0 . core . IDENT_10 > IDENT_11 = model . METHOD_3 ( ) ; if ( ( IDENT_11 != null ) && ( ( IDENT_11 . size ( ) ) > 0 ) ) { IDENT_11 . stream ( ) . filter ( ( IDENT_12 ) -> ( IDENT_12 . METHOD_4 ( ) ) != null ) . METHOD_5 ( ( IDENT_12 ) -> IDENT_12 . METHOD_6 ( object , context ) ) ; } return new org . IDENT_0 . core . METHOD_1 ( IDENT_9 , object ) . getInstance ( context ) ; } else { org . IDENT_0 . core . provider . IDENT_8 IDENT_9 = new org . IDENT_0 . core . impl . provider . METHOD_2 ( IDENT_6 . getType ( ) ) ; return new org . IDENT_0 . core . METHOD_7 ( IDENT_9 ) . getInstance ( context ) ; } } catch ( java . lang . IllegalArgumentException e ) { org . IDENT_0 . IDENT_13 . IDENT_14 . LOG . error ( e . METHOD_8 ( ) , e ) ; throw new java . lang . RuntimeException ( e . METHOD_8 ( ) , e ) ; } catch ( java . lang . IDENT_15 e ) { org . IDENT_0 . IDENT_13 . IDENT_14 . LOG . error ( e . METHOD_8 ( ) , e ) ; throw new java . lang . RuntimeException ( e . METHOD_8 ( ) , e ) ; } }
org . junit . Assert . assertSame ( instance , result ) 