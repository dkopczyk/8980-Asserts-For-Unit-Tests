METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . core . impl . IDENT_2 expected = new org . IDENT_1 . core . impl . METHOD_1 ( ) ; expected . add ( STRING_1 , STRING_2 ) ; expected . addAll ( STRING_3 , "foo" , STRING_4 ) ; javax . ws . rs . core . IDENT_3 < java . lang . String , java . lang . String > result = org . IDENT_1 . core . impl . uri . IDENT_4 . METHOD_2 ( IDENT_0 , true ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , boolean ) { javax . ws . rs . core . IDENT_3 < java . lang . String , java . lang . String > result = new org . IDENT_1 . core . impl . METHOD_1 ( ) ; if ( ! ( ( IDENT_5 == null ) || ( IDENT_5 . isEmpty ( ) ) ) ) { int p = 0 ; int n = 0 ; while ( n < ( IDENT_5 . length ( ) ) ) { n = IDENT_5 . indexOf ( STRING_5 , p ) ; if ( n < 0 ) { n = IDENT_5 . length ( ) ; } java . lang . String IDENT_6 = IDENT_5 . substring ( p , n ) ; if ( ! ( IDENT_6 . isEmpty ( ) ) ) { java . lang . String name ; java . lang . String value ; int eq = IDENT_6 . indexOf ( STRING_6 ) ; if ( eq < 0 ) { name = IDENT_6 ; value = "" ; } else { name = IDENT_6 . substring ( 0 , eq ) ; value = IDENT_6 . substring ( ( eq + 1 ) ) ; } result . add ( ( decode ? org . IDENT_1 . core . impl . uri . IDENT_4 . decode ( name , org . IDENT_1 . core . impl . uri . IDENT_4 . IDENT_7 ) : name ) , ( decode ? org . IDENT_1 . core . impl . uri . IDENT_4 . decode ( value , org . IDENT_1 . core . impl . uri . IDENT_4 . IDENT_7 ) : value ) ) ; } p = n + 1 ; } } return result ; }
org . junit . Assert . assertEquals ( expected , result ) 