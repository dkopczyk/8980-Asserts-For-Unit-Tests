METHOD_0 ( ) { java . lang . String path = STRING_0 ; java . util . List < javax . ws . rs . core . IDENT_0 > expected = newArrayList ( org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( STRING_1 , false ) , org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( STRING_2 , false ) , org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( STRING_3 , false ) , org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( STRING_1 , false ) , org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( STRING_4 , false ) ) ; java . util . List < javax . ws . rs . core . IDENT_0 > result = org . IDENT_1 . core . impl . uri . IDENT_3 . METHOD_2 ( path , true ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , boolean ) { java . util . List < javax . ws . rs . core . IDENT_0 > result = new java . util . ArrayList ( ) ; if ( ! ( ( path == null ) || ( path . isEmpty ( ) ) ) ) { if ( ( path . charAt ( 0 ) ) == STRING_5 ) { path = path . substring ( 1 ) ; } int p = 0 ; int n = 0 ; while ( n < ( path . length ( ) ) ) { n = path . indexOf ( STRING_5 , p ) ; if ( n < 0 ) { n = path . length ( ) ; } result . add ( org . IDENT_1 . core . impl . uri . IDENT_2 . METHOD_1 ( path . substring ( p , n ) , decode ) ) ; p = n + 1 ; } } return result ; }
org . junit . Assert . assertEquals ( expected , result ) 