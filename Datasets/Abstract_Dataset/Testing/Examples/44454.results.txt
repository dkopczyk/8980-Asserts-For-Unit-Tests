METHOD_0 ( ) { when ( IDENT_0 . METHOD_1 ( tree , org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_6 , org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . IDENT_3 . IDENT_4 . IDENT_7 ) ) . thenReturn ( java . util . Collections . < org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . models . IDENT_8 > emptyList ( ) ) ; when ( filter . METHOD_2 ( ) ) . thenReturn ( true ) ; IDENT_9 . METHOD_3 ( ) ; METHOD_4 ( view , IDENT_10 , IDENT_11 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_10 ) . METHOD_5 ( true ) ; verify ( IDENT_10 ) . METHOD_6 ( METHOD_7 ( org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . models . IDENT_8 . class ) ) ; verify ( IDENT_11 ) . METHOD_8 ( METHOD_7 ( org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . models . IDENT_8 . class ) ) ; } METHOD_9 ( org . eclipse . IDENT_1 . api . project . shared . dto . IDENT_12 , org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . IDENT_3 . properties . IDENT_13 . common . IDENT_14 ) { org . eclipse . IDENT_1 . api . project . shared . dto . IDENT_15 IDENT_16 = METHOD_10 ( ) . METHOD_11 ( ) ; java . util . List < org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . models . IDENT_8 > list ; if ( org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . IDENT_3 . IDENT_4 . IDENT_7 . equals ( IDENT_17 ) ) { list = IDENT_18 ; this . tree = tree ; } else { list = IDENT_19 ; } java . util . List < org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . models . IDENT_8 > IDENT_20 = IDENT_0 . METHOD_1 ( tree , IDENT_16 . getType ( ) , IDENT_17 ) ; METHOD_9 ( list , IDENT_20 , IDENT_17 ) ; return IDENT_20 ; }
org . junit . Assert . assertThat ( IDENT_9 . METHOD_9 ( tree , org . eclipse . IDENT_1 . IDENT_2 . ext . runner . client . IDENT_3 . IDENT_4 . IDENT_7 ) . isEmpty ( ) , org . hamcrest . CoreMatchers . is ( true ) ) 