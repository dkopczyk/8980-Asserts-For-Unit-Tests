METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; ddf . catalog . IDENT_1 . IDENT_2 . LOGGER . debug ( ( ( STRING_1 + IDENT_0 ) + STRING_2 ) ) ; ddf . catalog . data . impl . IDENT_3 IDENT_4 = new ddf . catalog . data . impl . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( ddf . catalog . IDENT_1 . IDENT_5 . METHOD_3 ( ) ) ; ddf . catalog . IDENT_1 . IDENT_6 . IDENT_7 IDENT_8 = new ddf . catalog . IDENT_1 . IDENT_6 . METHOD_4 ( STRING_3 , STRING_4 ) ; java . util . HashMap < java . lang . String , java . lang . Object > properties = new java . util . HashMap ( ) ; properties . put ( IDENT_9 . IDENT_10 , STRING_5 ) ; properties . put ( IDENT_9 . IDENT_11 , null ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_12 = METHOD_5 ( IDENT_4 ) ; properties . put ( IDENT_9 . IDENT_13 , IDENT_12 ) ; org . osgi . service . event . IDENT_14 IDENT_15 = new org . osgi . service . event . METHOD_6 ( STRING_6 , properties ) ; "<AssertPlaceHolder>" ; ddf . catalog . IDENT_1 . IDENT_2 . LOGGER . debug ( ( ( STRING_7 + IDENT_0 ) + STRING_2 ) ) ; } matches ( org . osgi . service . event . METHOD_6 ) { java . lang . String IDENT_0 = STRING_8 2 ; ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_8 3 , IDENT_0 ) ; ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_8 0 , properties ) ; ddf . catalog . IDENT_1 . criteria . IDENT_17 . IDENT_18 IDENT_19 = null ; java . util . Map < java . lang . String , java . lang . Object > IDENT_12 = ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( properties . getProperty ( IDENT_9 . IDENT_13 ) ) ) ; if ( IDENT_12 == null ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_9 ) ; return false ; } java . lang . String operation = ( ( java . lang . String ) ( properties . getProperty ( IDENT_9 . IDENT_11 ) ) ) ; ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_10 , operation ) ; java . lang . String metadata = ( ( java . lang . String ) ( IDENT_12 . get ( STRING_8 1 ) ) ) ; ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_8 5 , metadata ) ; if ( ( operation . equals ( IDENT_9 . IDENT_20 ) ) && ( metadata . equals ( IDENT_9 . IDENT_21 ) ) ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_8 4 ) ; return true ; } if ( ( ( this . IDENT_22 ) != null ) && ( ! ( this . IDENT_22 . isEmpty ( ) ) ) ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_11 ) ; try { IDENT_19 = new ddf . catalog . IDENT_1 . criteria . IDENT_17 . METHOD_7 ( IDENT_23 , IDENT_24 , IDENT_25 , this . IDENT_22 . toArray ( new java . lang . String [ this . IDENT_22 . size ( ) ] ) , ( ( java . lang . String ) ( IDENT_12 . get ( STRING_8 1 ) ) ) ) ; } catch ( java . io . IOException e ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . error ( STRING_8 , e ) ; return false ; } } else { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_12 ) ; IDENT_19 = new ddf . catalog . IDENT_1 . criteria . IDENT_17 . METHOD_7 ( IDENT_23 , IDENT_24 , IDENT_25 , ( ( org . apache . lucene . store . IDENT_26 ) ( IDENT_12 . get ( STRING_13 ) ) ) ) ; } try { return ddf . catalog . IDENT_1 . criteria . IDENT_17 . IDENT_27 . evaluate ( IDENT_19 ) ; } catch ( java . io . IOException e ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . error ( STRING_14 , e ) ; } catch ( org . apache . lucene . IDENT_28 . IDENT_29 e ) { ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . error ( STRING_15 , e ) ; } ddf . catalog . IDENT_1 . IDENT_6 . IDENT_16 . LOGGER . debug ( STRING_16 , IDENT_0 ) ; return false ; }
org . junit . Assert . assertTrue ( IDENT_8 . matches ( IDENT_15 ) ) 