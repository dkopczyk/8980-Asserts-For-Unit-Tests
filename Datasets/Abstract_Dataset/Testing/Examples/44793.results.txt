METHOD_0 ( ) { for ( java . lang . String parent : new java . lang . String [ ] { STRING_0 , STRING_1 } ) { entry . METHOD_1 ( parent ) ; for ( java . lang . String child : new java . lang . String [ ] { STRING_2 , STRING_3 , "foo" } ) { "<AssertPlaceHolder>" ; } } } METHOD_2 ( java . lang . String , org . codice . ddf . catalog . content . monitor . IDENT_0 ) { java . lang . String location = IDENT_1 ; if ( ( parent != null ) && ( ! ( location . startsWith ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_2 ) ) ) ) { java . lang . String IDENT_3 = parent . METHOD_2 ( ) ; if ( ( IDENT_3 . METHOD_3 ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 ) ) && ( location . startsWith ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 ) ) ) { location = location . METHOD_4 ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 , "" ) ; } if ( ( ! ( IDENT_3 . METHOD_3 ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 ) ) ) && ( ! ( location . startsWith ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 ) ) ) ) { location = ( org . codice . ddf . catalog . content . monitor . IDENT_0 . IDENT_4 ) + location ; } location = IDENT_3 + location ; } try { java . net . URL url = new java . net . URL ( location ) ; java . net . URI uri = new java . net . URI ( url . METHOD_5 ( ) , url . METHOD_6 ( ) , url . METHOD_7 ( ) , url . METHOD_8 ( ) , url . getPath ( ) , url . METHOD_9 ( ) , url . METHOD_10 ( ) ) ; location = uri . METHOD_11 ( ) ; } catch ( java . net . IDENT_5 | java . net . IDENT_6 e ) { throw new java . lang . RuntimeException ( e ) ; } return location ; }
org . junit . Assert . assertThat ( org . codice . ddf . catalog . content . monitor . IDENT_0 . METHOD_2 ( child , entry ) , org . hamcrest . Matchers . is ( STRING_2 ) ) 