METHOD_0 ( ) { java . util . List < ddf . catalog . source . IDENT_0 > IDENT_1 = METHOD_1 ( true ) ; ddf . catalog . source . IDENT_0 IDENT_2 = new ddf . catalog . impl . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , null , true , new java . util . Date ( ) ) ; IDENT_1 . add ( IDENT_2 ) ; java . util . List < ddf . catalog . source . IDENT_0 > IDENT_3 = METHOD_1 ( true ) ; ddf . catalog . util . impl . IDENT_4 IDENT_5 = mock ( ddf . catalog . util . impl . IDENT_4 . class ) ; when ( IDENT_5 . METHOD_3 ( METHOD_4 ( ddf . catalog . source . IDENT_6 . class ) ) ) . thenReturn ( null ) ; ddf . catalog . impl . IDENT_7 IDENT_8 = new ddf . catalog . impl . METHOD_5 ( ) ; IDENT_8 . METHOD_6 ( IDENT_5 ) ; java . util . List < ddf . catalog . source . IDENT_0 > IDENT_9 = new java . util . ArrayList ( ) ; for ( ddf . catalog . source . IDENT_0 IDENT_10 : IDENT_3 ) { IDENT_9 . add ( IDENT_10 ) ; } IDENT_8 . METHOD_7 ( IDENT_9 ) ; ddf . catalog . impl . IDENT_11 framework = METHOD_8 ( IDENT_8 ) ; ddf . catalog . operation . IDENT_12 request = new ddf . catalog . operation . impl . METHOD_9 ( true ) ; ddf . catalog . operation . IDENT_13 response = null ; try { response = framework . METHOD_10 ( request ) ; } catch ( ddf . catalog . source . IDENT_14 e ) { ddf . catalog . impl . IDENT_15 . LOGGER . debug ( STRING_4 , e ) ; org . junit . Assert . fail ( ) ; } java . util . Set < ddf . catalog . source . IDENT_16 > IDENT_17 = response . METHOD_10 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { return map . size ( ) ; }
org . junit . Assert . assertEquals ( IDENT_3 . size ( ) , IDENT_17 . size ( ) ) 