METHOD_0 ( ) { final java . nio . file . IDENT_0 filter = org . mockito . Mockito . mock ( java . nio . file . IDENT_0 . class ) ; org . mockito . Mockito . when ( entry . METHOD_1 ( org . mockito . Mockito . eq ( true ) , org . mockito . Mockito . METHOD_2 ( filter ) ) ) . thenReturn ( false ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( entry ) . METHOD_1 ( org . mockito . Mockito . eq ( true ) , org . mockito . Mockito . METHOD_2 ( filter ) ) ; } METHOD_1 ( org . codice . ddf . util . function . IDENT_1 ) { org . apache . commons . lang . IDENT_2 . METHOD_3 ( consumer , STRING_0 ) ; if ( ( IDENT_3 ) == null ) { this . IDENT_3 = false ; java . util . Optional < java . io . InputStream > is = java . util . Optional . empty ( ) ; try { is = METHOD_4 ( true ) ; final java . util . Optional < java . io . InputStream > IDENT_4 = is ; this . IDENT_3 = METHOD_5 ( ) . METHOD_6 ( ( ) -> consumer . accept ( METHOD_5 ( ) , IDENT_4 ) ) ; } catch ( java . io . IOException e ) { METHOD_5 ( ) . record ( new org . codice . ddf . IDENT_5 . METHOD_7 ( IDENT_6 . IDENT_7 , path , context . METHOD_8 ( ) . METHOD_9 ( ) , e ) ) ; } finally { is . METHOD_10 ( org . apache . commons . io . IDENT_8 :: IDENT_9 ) ; } } return IDENT_3 ; }
org . junit . Assert . assertThat ( entry . METHOD_1 ( filter ) , org . hamcrest . Matchers . equalTo ( false ) ) 