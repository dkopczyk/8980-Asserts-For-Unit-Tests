METHOD_0 ( ) { java . nio . file . Path IDENT_0 = IDENT_1 . resolve ( METHOD_1 ( STRING_0 , path ) ) ; when ( IDENT_2 . METHOD_2 ( any ( java . nio . file . Path . class ) ) ) . thenReturn ( IDENT_0 ) ; entry = new org . codice . ddf . configuration . IDENT_3 . METHOD_3 ( IDENT_4 , org . codice . ddf . configuration . IDENT_3 . IDENT_5 . IDENT_6 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_2 ) . METHOD_4 ( any ( java . nio . file . Path . class ) ) ; METHOD_5 ( report , STRING_1 ) ; } METHOD_6 ( org . codice . ddf . util . function . IDENT_7 ) { org . apache . commons . lang . IDENT_8 . METHOD_7 ( consumer , STRING_2 ) ; if ( ( IDENT_9 ) == null ) { this . IDENT_9 = false ; java . util . Optional < java . io . InputStream > is = java . util . Optional . empty ( ) ; try { is = METHOD_8 ( true ) ; final java . util . Optional < java . io . InputStream > IDENT_10 = is ; this . IDENT_9 = METHOD_9 ( ) . METHOD_10 ( ( ) -> consumer . accept ( METHOD_9 ( ) , IDENT_10 ) ) ; } catch ( java . io . IOException e ) { METHOD_9 ( ) . record ( new org . codice . ddf . IDENT_3 . METHOD_11 ( IDENT_11 . IDENT_12 , path , context . METHOD_12 ( ) . METHOD_13 ( ) , e ) ) ; } finally { is . METHOD_14 ( org . apache . commons . io . IDENT_13 :: IDENT_14 ) ; } } return IDENT_9 ; }
org . junit . Assert . assertThat ( entry . METHOD_6 ( true ) , org . hamcrest . CoreMatchers . equalTo ( true ) ) 