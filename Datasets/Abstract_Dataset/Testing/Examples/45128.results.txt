METHOD_0 ( ) { final boolean IDENT_0 = true ; org . mockito . Mockito . when ( IDENT_1 . METHOD_1 ( IDENT_0 ) ) . thenReturn ( false ) ; org . mockito . Mockito . METHOD_2 ( ) . when ( entry ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_1 ) . METHOD_1 ( IDENT_0 ) ; org . mockito . Mockito . verify ( entry , org . mockito . Mockito . METHOD_4 ( ) ) . METHOD_3 ( ) ; } METHOD_1 ( org . codice . ddf . util . function . IDENT_2 ) { org . apache . commons . lang . IDENT_3 . METHOD_5 ( consumer , STRING_0 ) ; if ( ( IDENT_4 ) == null ) { this . IDENT_4 = false ; java . util . Optional < java . io . InputStream > is = java . util . Optional . empty ( ) ; try { is = METHOD_6 ( true ) ; final java . util . Optional < java . io . InputStream > IDENT_5 = is ; this . IDENT_4 = METHOD_7 ( ) . METHOD_8 ( ( ) -> consumer . accept ( METHOD_7 ( ) , IDENT_5 ) ) ; } catch ( java . io . IOException e ) { METHOD_7 ( ) . record ( new org . codice . ddf . IDENT_6 . METHOD_9 ( IDENT_7 . IDENT_8 , path , context . METHOD_10 ( ) . METHOD_11 ( ) , e ) ) ; } finally { is . METHOD_12 ( org . apache . commons . io . IDENT_9 :: IDENT_10 ) ; } } return IDENT_4 ; }
org . junit . Assert . assertThat ( entry . METHOD_1 ( IDENT_0 ) , org . hamcrest . Matchers . equalTo ( false ) ) 