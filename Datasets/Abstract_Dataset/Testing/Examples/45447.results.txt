METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . table . IDENT_2 table = new com . IDENT_0 . IDENT_1 . table . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } toString ( ) { com . IDENT_0 . IDENT_1 . table . IDENT_3 . IDENT_4 IDENT_5 = IDENT_6 . get ( IDENT_3 . IDENT_4 . class ) ; java . util . ArrayList < java . lang . Integer > IDENT_7 = new java . util . ArrayList ( ) ; for ( com . IDENT_0 . IDENT_1 . table . IDENT_8 row : this ) { int IDENT_9 = row . METHOD_2 ( ) ; while ( ( IDENT_7 . size ( ) ) < IDENT_9 ) { IDENT_7 . add ( 0 ) ; } int i = 0 ; for ( com . IDENT_0 . IDENT_1 . table . IDENT_3 IDENT_10 : row ) { int IDENT_11 = IDENT_7 . get ( i ) ; com . IDENT_0 . IDENT_1 . table . IDENT_3 . IDENT_12 METHOD_2 = IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_12 . class , row . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_12 . class , this . METHOD_3 ( ) . get ( IDENT_3 . IDENT_12 . class ) ) ) ; int IDENT_13 ; if ( METHOD_2 . METHOD_5 ( ) ) { IDENT_13 = IDENT_10 . METHOD_2 ( ) ; if ( IDENT_10 . METHOD_6 ( ) ) { com . IDENT_0 . IDENT_1 . table . IDENT_3 . IDENT_14 IDENT_15 = IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_14 . class , row . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_14 . class , this . METHOD_3 ( ) . get ( IDENT_3 . IDENT_14 . class ) ) ) ; IDENT_13 = java . lang . Math . max ( IDENT_13 , IDENT_15 . getValue ( ) . length ( ) ) ; } } else { IDENT_13 = METHOD_2 . METHOD_7 ( ) ; } if ( IDENT_13 > IDENT_11 ) { IDENT_7 . set ( i , IDENT_13 ) ; } i ++ ; } } com . IDENT_0 . IDENT_1 . table . IDENT_8 . IDENT_16 IDENT_17 = IDENT_6 . get ( IDENT_8 . IDENT_16 . class ) ; com . IDENT_0 . IDENT_1 . table . IDENT_8 [ ] IDENT_18 = new com . IDENT_0 . IDENT_1 . table . IDENT_8 [ IDENT_19 . size ( ) ] ; IDENT_19 . toArray ( IDENT_18 ) ; if ( IDENT_17 != null ) { java . util . Arrays . METHOD_8 ( IDENT_18 , IDENT_17 ) ; } java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; for ( int IDENT_20 = 0 ; IDENT_20 < ( IDENT_18 . length ) ; IDENT_20 ++ ) { com . IDENT_0 . IDENT_1 . table . IDENT_8 row = IDENT_18 [ IDENT_20 ] ; if ( IDENT_20 > 0 ) { builder . append ( "\n" ) ; } int line = 0 ; int IDENT_21 ; do { IDENT_21 = 0 ; int IDENT_9 = row . METHOD_2 ( ) ; for ( int IDENT_22 = 0 ; IDENT_22 < IDENT_9 ; IDENT_22 ++ ) { com . IDENT_0 . IDENT_1 . table . IDENT_3 IDENT_10 = row . METHOD_9 ( IDENT_22 ) ; com . IDENT_0 . IDENT_1 . table . IDENT_3 . IDENT_23 IDENT_24 = IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_23 . class , row . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_23 . class , this . METHOD_3 ( ) . get ( IDENT_3 . IDENT_23 . class ) ) ) ; int IDENT_25 = IDENT_10 . METHOD_10 ( ) ; IDENT_21 = ( IDENT_25 > IDENT_21 ) ? IDENT_25 : IDENT_21 ; java . lang . String IDENT_26 ; if ( ( IDENT_10 . isEmpty ( ) ) || ( line >= IDENT_25 ) ) { if ( IDENT_22 > 0 ) { builder . append ( " " ) ; builder . append ( IDENT_5 . METHOD_11 ( ) ) ; builder . append ( " " ) ; } IDENT_26 = IDENT_24 . format ( "" , IDENT_7 . get ( IDENT_22 ) ) ; } else { if ( IDENT_22 > 0 ) { builder . append ( " " ) ; builder . append ( IDENT_5 . METHOD_11 ( ) ) ; builder . append ( " " ) ; } java . lang . String content = IDENT_10 . METHOD_12 ( line ) ; if ( content == null ) { com . IDENT_0 . IDENT_1 . table . IDENT_3 . IDENT_14 IDENT_15 = IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_14 . class , row . METHOD_3 ( ) . METHOD_4 ( IDENT_3 . IDENT_14 . class , this . METHOD_3 ( ) . get ( IDENT_3 . IDENT_14 . class ) ) ) ; content = IDENT_15 . getValue ( ) ; } IDENT_26 = IDENT_24 . format ( content , IDENT_7 . get ( IDENT_22 ) ) ; } if ( IDENT_22 == ( IDENT_9 - 1 ) ) { IDENT_26 = METHOD_13 ( IDENT_26 ) ; } builder . append ( IDENT_26 ) ; } line ++ ; if ( line < IDENT_21 ) { builder . append ( "\n" ) ; } } while ( line < IDENT_21 ) ; } return builder . toString ( ) ; }
org . junit . Assert . assertThat ( table . toString ( ) , org . hamcrest . core . Is . is ( "" ) ) 