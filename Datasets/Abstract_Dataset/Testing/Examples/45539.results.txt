METHOD_0 ( ) { java . lang . String [ ] args = new java . lang . String [ ] { STRING_0 } ; com . github . IDENT_0 . IDENT_1 a = new com . github . IDENT_0 . METHOD_1 ( ) ; boolean b = a . parse ( args ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String [ ] ) { java . lang . String [ ] IDENT_2 = args ; try { org . apache . commons . cli . IDENT_3 IDENT_4 = new org . apache . commons . cli . METHOD_2 ( ) . parse ( options , IDENT_2 ) ; for ( com . github . IDENT_0 . IDENT_5 IDENT_6 : com . github . IDENT_0 . IDENT_5 . values ( ) ) { if ( IDENT_4 . METHOD_3 ( IDENT_6 . METHOD_4 ( ) ) ) { values . get ( IDENT_6 ) . METHOD_5 ( ) ; values . get ( IDENT_6 ) . setValue ( IDENT_4 . METHOD_6 ( IDENT_6 . METHOD_4 ( ) ) ) ; METHOD_7 ( IDENT_6 ) ; } } } catch ( org . apache . commons . cli . IDENT_7 e ) { System . out . println ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; return false ; } METHOD_8 ( ) ; return true ; }
org . junit . Assert . assertTrue ( b ) 