METHOD_0 ( ) { IDENT_0 . METHOD_1 ( ) ; org . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = IDENT_0 . METHOD_2 ( "test" ) ; org . IDENT_1 . IDENT_2 . IDENT_5 IDENT_6 = new org . IDENT_1 . IDENT_2 . METHOD_3 ( INT_0 ) ; final int IDENT_7 = INT_1 ; int [ ] keys = new int [ IDENT_7 ] ; for ( int i = 0 ; i < IDENT_7 ; i ++ ) { keys [ i ] = i ; } org . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_4 ( IDENT_6 , keys ) ; for ( int i = 0 ; i < IDENT_7 ; i ++ ) { int IDENT_9 = ( ( int ) ( java . lang . Math . METHOD_5 ( FLOAT_0 , ( ( IDENT_6 . METHOD_6 ( ) ) * 100 ) ) ) ) ; byte [ ] value = new byte [ IDENT_9 ] ; IDENT_6 . METHOD_7 ( value ) ; IDENT_4 . store ( null , org . IDENT_1 . IDENT_2 . IDENT_8 . key ( keys [ i ] ) , value ) ; } org . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_4 ( IDENT_6 , keys ) ; org . IDENT_1 . IDENT_2 . IDENT_10 [ ] IDENT_11 = new org . IDENT_1 . IDENT_2 . IDENT_10 [ IDENT_7 ] ; for ( int i = 0 ; i < IDENT_7 ; i ++ ) { int IDENT_9 = ( ( int ) ( java . lang . Math . METHOD_5 ( FLOAT_0 , IDENT_6 . METHOD_8 ( 100 ) ) ) ) ; byte [ ] value = new byte [ IDENT_9 ] ; IDENT_6 . METHOD_7 ( value ) ; org . IDENT_1 . IDENT_2 . IDENT_10 IDENT_12 = IDENT_4 . METHOD_9 ( IDENT_13 . IDENT_14 ) ; IDENT_4 . store ( IDENT_12 , org . IDENT_1 . IDENT_2 . IDENT_8 . key ( keys [ i ] ) , value ) ; IDENT_11 [ i ] = IDENT_12 ; } org . IDENT_1 . IDENT_2 . IDENT_8 . METHOD_4 ( IDENT_6 , keys ) ; for ( int i = 0 ; i < IDENT_7 ; i ++ ) { IDENT_11 [ i ] . METHOD_10 ( ) ; } "<AssertPlaceHolder>" ; } verify ( org . IDENT_1 . IDENT_2 . IDENT_15 ) { if ( IDENT_16 == null ) { IDENT_16 = new org . IDENT_1 . IDENT_2 . METHOD_11 ( ) ; } org . IDENT_1 . IDENT_2 . IDENT_3 view = METHOD_12 ( ) ; IDENT_16 . IDENT_17 = false ; METHOD_13 ( view , IDENT_16 ) ; boolean IDENT_18 = ! ( IDENT_16 . IDENT_17 ) ; IDENT_16 . METHOD_14 ( view , IDENT_18 , null ) ; return IDENT_18 ; }
org . junit . Assert . assertTrue ( IDENT_4 . verify ( new org . IDENT_1 . IDENT_2 . METHOD_11 ( ) ) ) 