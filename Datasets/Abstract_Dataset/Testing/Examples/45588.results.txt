METHOD_0 ( ) { try { com . IDENT_0 . IDENT_1 . common . persistence . IDENT_2 persistence = new com . IDENT_0 . IDENT_1 . common . persistence . METHOD_1 ( ) ; java . util . List < com . IDENT_0 . IDENT_1 . common . model . User > IDENT_3 = new java . util . IDENT_4 < com . IDENT_0 . IDENT_1 . common . model . User > ( ) ; com . IDENT_0 . IDENT_1 . common . model . User user = METHOD_2 ( persistence , STRING_0 , STRING_1 ) ; IDENT_3 . add ( user ) ; user = METHOD_2 ( persistence , STRING_2 , STRING_3 ) ; IDENT_3 . add ( user ) ; user = METHOD_2 ( persistence , STRING_4 , STRING_4 ) ; IDENT_3 . add ( user ) ; java . util . List < com . IDENT_0 . IDENT_1 . common . model . User > IDENT_5 = persistence . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; for ( com . IDENT_0 . IDENT_1 . common . model . User IDENT_6 : IDENT_3 ) { persistence . METHOD_4 ( IDENT_6 . METHOD_5 ( ) ) ; } IDENT_5 = persistence . METHOD_3 ( ) ; METHOD_6 ( IDENT_3 , persistence ) ; com . IDENT_0 . IDENT_1 . test . unit . IDENT_7 . logger . info ( STRING_5 ) ; } catch ( java . lang . Exception ex ) { com . IDENT_0 . IDENT_1 . test . unit . IDENT_7 . logger . error ( STRING_6 , ex ) ; org . junit . Assert . fail ( ( STRING_7 + ( ex . toString ( ) ) ) ) ; } } size ( ) { if ( ( IDENT_8 ) == null ) { return 0 ; } return IDENT_8 . length ( ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_5 != null ) && ( ( IDENT_5 . size ( ) ) >= 3 ) ) ) 