METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . apache . avro . IDENT_1 . IDENT_2 IDENT_3 = METHOD_1 ( ) ; java . lang . Object [ ] IDENT_4 = new java . lang . Object [ ] { IDENT_3 , true , INT_0 , INT_1 , FLOAT_0 , FLOAT_1 , STRING_1 , STRING_2 . getBytes ( ) } ; java . util . Properties IDENT_5 = METHOD_2 ( ) ; org . apache . kafka . IDENT_6 . IDENT_7 . IDENT_8 IDENT_7 = METHOD_3 ( IDENT_5 ) ; METHOD_4 ( IDENT_7 , IDENT_0 , IDENT_4 ) ; java . util . Properties IDENT_9 = METHOD_5 ( ) ; org . apache . kafka . IDENT_6 . consumer . IDENT_10 < java . lang . String , java . lang . Object > consumer = METHOD_6 ( IDENT_9 ) ; java . util . ArrayList < java . lang . Object > IDENT_11 = METHOD_7 ( consumer , IDENT_0 , IDENT_4 . length ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( org . apache . kafka . IDENT_6 . consumer . IDENT_10 , java . lang . String , int ) { java . util . ArrayList < java . lang . Object > IDENT_11 = new java . util . ArrayList < java . lang . Object > ( ) ; consumer . METHOD_8 ( java . util . Arrays . asList ( IDENT_0 ) ) ; int i = 0 ; while ( i < IDENT_12 ) { org . apache . kafka . IDENT_6 . consumer . IDENT_13 < java . lang . String , java . lang . Object > records = consumer . METHOD_9 ( 1000 ) ; for ( org . apache . kafka . IDENT_6 . consumer . IDENT_14 < java . lang . String , java . lang . Object > record : records ) { IDENT_11 . add ( record . value ( ) ) ; i ++ ; } } consumer . close ( ) ; return IDENT_11 ; }
org . junit . Assert . assertArrayEquals ( IDENT_4 , IDENT_11 . toArray ( ) ) 