METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_3 IDENT_4 = mock ( org . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_3 . class ) ; java . util . List < org . IDENT_0 . core . xml . IDENT_5 > IDENT_6 = new java . util . ArrayList ( ) ; org . IDENT_0 . core . xml . schema . impl . IDENT_7 IDENT_8 = mock ( org . IDENT_0 . core . xml . schema . impl . IDENT_7 . class ) ; when ( IDENT_8 . getValue ( ) ) . thenReturn ( STRING_0 ) ; IDENT_6 . add ( IDENT_8 ) ; when ( IDENT_4 . METHOD_1 ( ) ) . thenReturn ( IDENT_6 ) ; java . lang . String result = helper . METHOD_2 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . IDENT_0 . IDENT_1 . IDENT_2 . core . IDENT_3 ) { java . lang . StringBuilder IDENT_9 = new java . lang . StringBuilder ( ) ; if ( IDENT_4 != null ) { java . util . List < org . IDENT_0 . core . xml . IDENT_5 > IDENT_6 = IDENT_4 . METHOD_1 ( ) ; for ( java . lang . Object o : IDENT_6 ) { if ( o instanceof org . w3c . dom . Element ) { org . w3c . dom . Element IDENT_10 = ( ( org . w3c . dom . Element ) ( o ) ) ; IDENT_9 . append ( IDENT_10 . METHOD_3 ( ) ) ; break ; } else if ( o instanceof java . lang . String ) { IDENT_9 . append ( o ) . append ( " " ) ; } else if ( o instanceof org . IDENT_0 . core . xml . schema . impl . IDENT_7 ) { IDENT_9 . append ( ( ( org . IDENT_0 . core . xml . schema . impl . IDENT_7 ) ( o ) ) . getValue ( ) ) ; } else if ( o instanceof org . IDENT_0 . core . xml . schema . impl . IDENT_11 ) { IDENT_9 . append ( ( ( org . IDENT_0 . core . xml . schema . impl . IDENT_11 ) ( o ) ) . METHOD_3 ( ) ) ; } } } return IDENT_9 . toString ( ) . trim ( ) ; }
org . junit . Assert . assertEquals ( STRING_0 , result ) 