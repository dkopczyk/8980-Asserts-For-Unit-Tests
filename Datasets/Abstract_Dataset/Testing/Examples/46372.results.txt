METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = "" ; java . lang . String IDENT_2 = "" ; java . util . Date IDENT_3 = null ; java . util . Date IDENT_4 = null ; java . util . List result = IDENT_5 . METHOD_1 ( IDENT_0 , IDENT_1 , IDENT_3 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String , java . util . Date , java . util . Date ) { java . util . List < gov . hhs . fha . nhinc . IDENT_6 . hibernate . IDENT_7 > IDENT_8 = new java . util . ArrayList ( ) ; org . hibernate . IDENT_9 session = null ; if ( ( ( IDENT_0 == null ) && ( IDENT_1 == null ) ) && ( IDENT_3 == null ) ) { gov . hhs . fha . nhinc . IDENT_6 . hibernate . IDENT_10 . LOG . info ( STRING_1 ) ; return IDENT_8 ; } try { session = METHOD_2 ( ) ; gov . hhs . fha . nhinc . IDENT_6 . hibernate . IDENT_10 . LOG . info ( STRING_2 ) ; if ( session != null ) { final org . hibernate . IDENT_11 IDENT_12 = session . METHOD_3 ( gov . hhs . fha . nhinc . IDENT_6 . hibernate . IDENT_7 . class ) ; if ( ( IDENT_0 != null ) && ( ! ( IDENT_0 . isEmpty ( ) ) ) ) { IDENT_12 . add ( org . hibernate . IDENT_13 . IDENT_14 . eq ( STRING_3 , IDENT_0 ) ) ; } if ( ( IDENT_1 != null ) && ( ! ( IDENT_1 . isEmpty ( ) ) ) ) { IDENT_12 . add ( org . hibernate . IDENT_13 . IDENT_14 . eq ( STRING_4 , IDENT_1 ) ) ; } if ( ( IDENT_3 != null ) && ( IDENT_4 != null ) ) { IDENT_12 . add ( org . hibernate . IDENT_13 . IDENT_14 . METHOD_4 ( STRING_5 , new java . util . Date ( IDENT_3 . getTime ( ) ) , new java . util . Date ( IDENT_4 . getTime ( ) ) ) ) ; } else if ( IDENT_3 != null ) { IDENT_12 . add ( org . hibernate . IDENT_13 . IDENT_14 . METHOD_5 ( STRING_5 , new java . util . Date ( IDENT_3 . getTime ( ) ) ) ) ; } IDENT_8 = IDENT_12 . list ( ) ; } } catch ( final org . hibernate . IDENT_15 e ) { gov . hhs . fha . nhinc . IDENT_6 . hibernate . IDENT_10 . LOG . error ( STRING_6 , e . METHOD_6 ( ) , e ) ; } finally { METHOD_7 ( session ) ; } return IDENT_8 ; }
org . junit . Assert . assertNotNull ( result ) 