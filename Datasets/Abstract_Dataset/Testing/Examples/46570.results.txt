METHOD_0 ( ) { com . IDENT_0 . cassandra . IDENT_1 . resolver . IDENT_2 IDENT_3 = new com . IDENT_0 . cassandra . IDENT_1 . resolver . METHOD_1 ( ) { public java . util . List < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > METHOD_2 ( ) { java . util . List < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > IDENT_5 = new java . util . ArrayList < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > ( ) ; IDENT_5 . add ( METHOD_3 ( IDENT_6 . IDENT_7 , "1" , STRING_0 , STRING_1 , INT_0 ) ) ; IDENT_5 . add ( METHOD_3 ( IDENT_6 . IDENT_7 , "1" , STRING_0 , STRING_1 , INT_0 ) ) ; IDENT_5 . add ( METHOD_3 ( IDENT_6 . IDENT_8 , "2" , STRING_2 , STRING_3 , INT_1 ) ) ; return IDENT_5 ; } } ; java . util . Collection < com . IDENT_0 . cassandra . IDENT_1 . resolver . METHOD_1 > IDENT_9 = new java . util . ArrayList < com . IDENT_0 . cassandra . IDENT_1 . resolver . METHOD_1 > ( ) ; IDENT_9 . add ( IDENT_3 ) ; java . util . Collection < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > IDENT_5 = com . IDENT_0 . cassandra . IDENT_1 . resolver . IDENT_10 . METHOD_0 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( com . IDENT_0 . cassandra . IDENT_1 . resolver . Collection ) { com . IDENT_0 . cassandra . IDENT_1 . resolver . Set < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > IDENT_5 = new com . IDENT_0 . cassandra . IDENT_1 . resolver . HashSet < com . IDENT_0 . cassandra . IDENT_1 . info . IDENT_4 > ( ) ; for ( com . IDENT_0 . cassandra . IDENT_1 . resolver . METHOD_1 IDENT_3 : IDENT_9 ) { IDENT_5 . addAll ( IDENT_3 . METHOD_2 ( ) ) ; } return IDENT_5 ; }
org . junit . Assert . assertEquals ( 2 , IDENT_5 . size ( ) ) 