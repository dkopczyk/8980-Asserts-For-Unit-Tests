METHOD_0 ( ) { final int IDENT_0 = 10 ; final java . util . concurrent . IDENT_1 < java . lang . Integer > IDENT_2 = new com . IDENT_3 . util . concurrent . IDENT_4 < java . lang . Integer > ( IDENT_0 ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_2 . METHOD_1 ( java . lang . Integer . valueOf ( i ) ) ; } executor . execute ( ( ) -> { try { java . lang . Thread . sleep ( 1000 ) ; IDENT_2 . METHOD_2 ( ) ; } catch ( e ) { com . IDENT_3 . util . concurrent . e . printStackTrace ( ) ; } } ) ; IDENT_2 . put ( java . lang . Integer . valueOf ( IDENT_0 ) ) ; boolean IDENT_5 = false ; while ( ! ( IDENT_2 . isEmpty ( ) ) ) { if ( IDENT_2 . METHOD_2 ( ) . equals ( java . lang . Integer . valueOf ( IDENT_0 ) ) ) IDENT_5 = true ; } "<AssertPlaceHolder>" ; } METHOD_2 ( ) { final IDENT_6 e = super . METHOD_2 ( ) ; IDENT_7 . METHOD_3 ( ) ; return e ; }
org . junit . Assert . assertTrue ( IDENT_5 ) 