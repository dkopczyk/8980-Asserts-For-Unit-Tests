METHOD_0 ( ) { java . awt . image . IDENT_0 IDENT_1 = new java . awt . image . METHOD_1 ( 200 , 200 , java . awt . image . METHOD_1 . IDENT_2 ) ; final java . util . List < java . lang . Integer > order = new java . util . ArrayList < java . lang . Integer > ( ) ; net . IDENT_3 . IDENT_4 . filters . IDENT_5 IDENT_6 = new net . IDENT_3 . IDENT_4 . filters . METHOD_2 ( ) { public java . awt . image . METHOD_1 apply ( java . awt . image . METHOD_1 IDENT_1 ) { order . add ( 1 ) ; return IDENT_1 ; } } ; net . IDENT_3 . IDENT_4 . filters . METHOD_2 IDENT_7 = new net . IDENT_3 . IDENT_4 . filters . METHOD_2 ( ) { public java . awt . image . METHOD_1 apply ( java . awt . image . METHOD_1 IDENT_1 ) { order . add ( 2 ) ; return IDENT_1 ; } } ; net . IDENT_3 . IDENT_4 . filters . IDENT_8 pipeline = new net . IDENT_3 . IDENT_4 . filters . METHOD_3 ( ) ; pipeline . add ( IDENT_6 ) ; pipeline . METHOD_4 ( IDENT_7 ) ; pipeline . apply ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } apply ( java . awt . image . METHOD_1 ) { int IDENT_9 = IDENT_10 ; int IDENT_11 = IDENT_12 ; g . METHOD_5 ( IDENT_13 . IDENT_14 ) ; g . METHOD_6 ( 0 , 0 , IDENT_10 , IDENT_12 ) ; } else if ( ( IDENT_15 ) != null ) { g . METHOD_5 ( IDENT_15 ) ; g . METHOD_6 ( 0 , 0 , IDENT_9 , IDENT_11 ) ; } g . METHOD_7 ( IDENT_1 , p . x , p . y , null ) ; g . METHOD_8 ( ) ; return IDENT_16 ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( 2 , 1 ) , order ) 