METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . db . client . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( com . IDENT_0 . IDENT_1 . db . client . IDENT_2 . class ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_2 ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 . class , true ) ) . andReturn ( new java . util . ArrayList < java . net . URI > ( ) ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_3 ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 . class , new java . util . ArrayList < java . net . URI > ( ) ) ) . andReturn ( new java . util . ArrayList < com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 > ( ) ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_2 ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_5 . class , true ) ) . andReturn ( new java . util . ArrayList < java . net . URI > ( ) ) ; org . easymock . EasyMock . replay ( IDENT_3 ) ; com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . METHOD_4 ( IDENT_3 ) ; java . lang . String IDENT_7 = com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . METHOD_5 ( ) ; java . lang . String IDENT_8 = IDENT_9 . IDENT_10 ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { java . util . List < java . net . URI > IDENT_11 = com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . METHOD_6 ( ) ; java . util . List < java . net . URI > IDENT_12 = com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . IDENT_13 . METHOD_2 ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 . class , true ) ; java . util . List < com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 > IDENT_14 = com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . IDENT_13 . METHOD_3 ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 . class , IDENT_12 ) ; if ( ! ( com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . METHOD_7 ( IDENT_14 ) ) ) { com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . log . info ( STRING_0 ) ; return IDENT_9 . IDENT_10 ; } if ( com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . METHOD_8 ( IDENT_11 , IDENT_14 ) ) { com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . log . info ( STRING_1 ) ; return IDENT_9 . IDENT_10 ; } java . lang . String IDENT_15 = null ; for ( com . IDENT_0 . IDENT_1 . db . client . model . IDENT_4 IDENT_16 : IDENT_14 ) { if ( ( IDENT_15 == null ) || ( ( com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . IDENT_17 . compare ( IDENT_15 , IDENT_16 . METHOD_9 ( ) ) ) > 0 ) ) { IDENT_15 = IDENT_16 . METHOD_9 ( ) ; } } com . IDENT_0 . IDENT_1 . db . common . IDENT_6 . log . info ( STRING_2 , IDENT_15 ) ; return IDENT_15 ; }
org . junit . Assert . assertEquals ( IDENT_8 , IDENT_7 ) 