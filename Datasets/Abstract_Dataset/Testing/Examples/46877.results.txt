METHOD_0 ( ) { long result = com . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { java . lang . Long IDENT_5 = 0L ; try { if ( ( STRING_0 . equals ( IDENT_6 ) ) || ( com . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 . equals ( IDENT_6 ) ) ) { return IDENT_5 ; } java . lang . String [ ] IDENT_8 = IDENT_6 . split ( " " ) ; IDENT_5 = new java . math . BigDecimal ( IDENT_8 [ 0 ] ) . METHOD_2 ( ) ; if ( ( IDENT_8 . length ) > 1 ) { if ( STRING_1 . equals ( IDENT_8 [ 1 ] ) ) { IDENT_5 = IDENT_5 / ( com . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 ) ; } } } catch ( java . lang . Exception e ) { java . lang . String IDENT_10 = java . lang . String . format ( STRING_2 , IDENT_6 ) ; com . IDENT_0 . IDENT_1 . driver . IDENT_2 . IDENT_3 . IDENT_4 . LOG . warn ( IDENT_10 , e ) ; } return IDENT_5 ; }
org . junit . Assert . assertTrue ( ( result == 0 ) ) 