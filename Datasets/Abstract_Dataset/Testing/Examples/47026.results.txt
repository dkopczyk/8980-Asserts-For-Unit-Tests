METHOD_0 ( ) { java . util . List < com . couchbase . client . java . auth . IDENT_0 > IDENT_1 = new java . util . ArrayList < com . couchbase . client . java . auth . IDENT_0 > ( 2 ) ; IDENT_1 . add ( new com . couchbase . client . java . auth . METHOD_1 ( "foo" , "a" ) ) ; IDENT_1 . add ( new com . couchbase . client . java . auth . METHOD_1 ( "bar" , "b" ) ) ; com . couchbase . client . java . query . IDENT_2 source = com . couchbase . client . java . query . IDENT_2 . build ( ) . METHOD_2 ( IDENT_1 ) . METHOD_2 ( "bar" , STRING_0 ) ; com . couchbase . client . java . document . json . IDENT_3 expected = com . couchbase . client . java . document . json . IDENT_3 . create ( ) . put ( STRING_1 , com . couchbase . client . java . document . json . IDENT_4 . from ( com . couchbase . client . java . document . json . IDENT_3 . create ( ) . put ( STRING_2 , "foo" ) . put ( STRING_3 , "a" ) , com . couchbase . client . java . document . json . IDENT_3 . create ( ) . put ( STRING_2 , "bar" ) . put ( STRING_3 , STRING_0 ) ) ) ; com . couchbase . client . java . document . json . IDENT_3 actual = com . couchbase . client . java . document . json . IDENT_3 . empty ( ) ; source . METHOD_3 ( actual ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . couchbase . client . java . document . json . IDENT_3 ) { if ( ( this . IDENT_5 ) != null ) { IDENT_6 . put ( STRING_4 , this . IDENT_5 ) ; } if ( ( this . IDENT_7 ) != null ) { IDENT_6 . put ( STRING_5 , this . IDENT_7 ) ; } if ( IDENT_8 ) { IDENT_6 . put ( STRING_6 , true ) ; } if ( IDENT_9 ) { IDENT_6 . put ( STRING_7 , STRING_8 ) ; } if ( ( this . IDENT_10 ) != null ) { for ( Map . Entry < java . lang . String , java . lang . Object > entry : IDENT_10 . entrySet ( ) ) { IDENT_6 . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } }
org . junit . Assert . assertEquals ( expected , actual ) 