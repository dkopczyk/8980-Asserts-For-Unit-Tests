METHOD_0 ( ) { IDENT_0 . IDENT_1 . base . IDENT_2 format = new IDENT_0 . IDENT_1 . IDENT_3 . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( format ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { java . util . List < IDENT_0 . IDENT_1 . base . IDENT_2 > result = new java . util . ArrayList ( ) ; java . lang . String IDENT_5 = IDENT_0 . IDENT_1 . converter . IDENT_6 . models . IDENT_7 . IDENT_8 . get ( IDENT_0 . IDENT_1 . converter . IDENT_6 . models . IDENT_7 . IDENT_9 , "" ) ; for ( char c : IDENT_5 . METHOD_4 ( ) ) { java . lang . String IDENT_10 = IDENT_0 . IDENT_1 . converter . IDENT_6 . models . IDENT_7 . IDENT_8 . get ( ( ( IDENT_0 . IDENT_1 . converter . IDENT_6 . models . IDENT_7 . IDENT_11 ) + c ) , null ) ; if ( IDENT_10 != null ) { java . util . List < IDENT_0 . IDENT_1 . base . IDENT_2 > IDENT_12 = IDENT_13 . METHOD_5 ( ) ; for ( IDENT_0 . IDENT_1 . base . IDENT_2 format : IDENT_12 ) { if ( format . getClass ( ) . getName ( ) . equals ( IDENT_10 ) ) { result . add ( 0 , format ) ; break ; } } } } return result . METHOD_6 ( 0 , java . lang . Math . min ( result . size ( ) , METHOD_7 ( ) ) ) ; }
org . junit . Assert . assertEquals ( singletonList ( format ) , IDENT_4 . METHOD_3 ( ) ) 