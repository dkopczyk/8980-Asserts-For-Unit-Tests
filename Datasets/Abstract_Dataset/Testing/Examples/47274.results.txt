METHOD_0 ( ) { java . util . List < java . net . URL > expected = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) { java . io . File IDENT_0 = METHOD_1 ( ( ( STRING_0 + i ) + STRING_1 ) , STRING_2 ) ; IDENT_0 . METHOD_2 ( ) ; java . net . URL url = IDENT_0 . METHOD_3 ( ) . METHOD_4 ( ) ; model . METHOD_5 ( url ) ; expected . add ( 0 , url ) ; "<AssertPlaceHolder>" ; } } METHOD_6 ( ) { java . util . List < java . net . URL > result = new java . util . ArrayList ( ) ; java . lang . String IDENT_1 = IDENT_2 . get ( IDENT_3 . IDENT_4 . converter . IDENT_5 . models . IDENT_6 . IDENT_7 , "" ) ; for ( char c : IDENT_1 . METHOD_7 ( ) ) { java . lang . String IDENT_8 = IDENT_2 . get ( ( ( IDENT_3 . IDENT_4 . converter . IDENT_5 . models . IDENT_6 . IDENT_9 ) + c ) , null ) ; if ( IDENT_8 != null ) { try { java . net . URL url = new java . net . URL ( IDENT_8 ) ; java . io . File file = IDENT_3 . common . io . IDENT_10 . METHOD_8 ( url ) ; if ( ( file == null ) || ( file . exists ( ) ) ) result . add ( 0 , url ) ; } catch ( java . net . IDENT_11 e ) { IDENT_3 . IDENT_4 . converter . IDENT_5 . models . IDENT_6 . log . METHOD_9 ( ( ( ( STRING_3 + IDENT_8 ) + STRING_4 ) + e ) ) ; } } } return result . METHOD_10 ( 0 , java . lang . Math . min ( result . size ( ) , METHOD_11 ( ) ) ) ; }
org . junit . Assert . assertEquals ( expected , model . METHOD_6 ( ) ) 