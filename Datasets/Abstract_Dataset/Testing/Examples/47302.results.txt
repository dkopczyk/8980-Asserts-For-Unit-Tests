METHOD_0 ( ) { int IDENT_0 = 0 ; int IDENT_1 = 0 ; int IDENT_2 = 0 ; for ( int i = 0 ; i < ( IDENT_3 ) ; i ++ ) { java . util . Map IDENT_4 = IDENT_5 . METHOD_1 ( STRING_0 , new java . lang . Object [ ] { IDENT_6 } ) ; if ( time . equalsIgnoreCase ( java . lang . String . valueOf ( IDENT_4 . get ( STRING_1 ) ) ) ) { IDENT_0 ++ ; } else if ( IDENT_7 . equalsIgnoreCase ( java . lang . String . valueOf ( IDENT_4 . get ( STRING_1 ) ) ) ) { IDENT_1 ++ ; } else if ( IDENT_8 . equalsIgnoreCase ( java . lang . String . valueOf ( IDENT_4 . get ( STRING_1 ) ) ) ) { IDENT_2 ++ ; } else { org . junit . Assert . fail ( ( STRING_2 + ( java . lang . String . valueOf ( IDENT_4 . get ( STRING_1 ) ) ) ) ) ; } } System . err . println ( ( ( ( ( ( STRING_3 + IDENT_0 ) + STRING_4 ) + IDENT_1 ) + STRING_5 ) + IDENT_2 ) ) ; "<AssertPlaceHolder>" ; METHOD_2 ( IDENT_3 , IDENT_0 , ( 1.0 / 3 ) ) ; METHOD_2 ( IDENT_3 , IDENT_1 , ( 1.0 / 3 ) ) ; METHOD_2 ( IDENT_3 , IDENT_2 , ( 1.0 / 3 ) ) ; } get ( java . lang . String ) { return IDENT_9 . get ( IDENT_10 ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , ( ( IDENT_0 + IDENT_1 ) + IDENT_2 ) ) 