METHOD_0 ( ) { java . util . concurrent . IDENT_0 IDENT_1 = java . util . concurrent . IDENT_2 . METHOD_1 ( 100 ) ; final java . util . concurrent . IDENT_3 count = new java . util . concurrent . METHOD_2 ( 1 ) ; int times = 20 ; for ( int i = 0 ; i < times ; i ++ ) { IDENT_1 . execute ( new java . lang . METHOD_3 ( ) { public void run ( ) { try { count . METHOD_4 ( ) ; } catch ( java . lang . IDENT_4 e ) { } try { com . IDENT_5 . IDENT_6 . common . IDENT_7 . METHOD_5 ( 0 ) ; com . IDENT_5 . IDENT_6 . IDENT_8 . impl . IDENT_9 IDENT_10 = ( ( com . IDENT_5 . IDENT_6 . IDENT_8 . impl . IDENT_9 ) ( com . IDENT_5 . IDENT_6 . IDENT_11 . IDENT_8 . IDENT_12 . context . METHOD_6 ( STRING_0 ) ) ) ; com . IDENT_5 . IDENT_6 . IDENT_8 . impl . IDENT_13 IDENT_14 = new com . IDENT_5 . IDENT_6 . IDENT_8 . impl . METHOD_7 ( ) ; IDENT_14 . setName ( STRING_1 ) ; IDENT_14 . METHOD_8 ( IDENT_10 ) ; set . add ( IDENT_14 . METHOD_9 ( ) ) ; IDENT_15 . METHOD_10 ( ) ; } catch ( org . springframework . dao . IDENT_16 e ) { } catch ( com . IDENT_5 . IDENT_6 . IDENT_8 . exception . IDENT_17 e ) { e . printStackTrace ( ) ; } } } ) ; } count . METHOD_11 ( ) ; while ( ( IDENT_15 . get ( ) ) < times ) { TimeUnit . IDENT_18 . sleep ( 10 ) ; } "<AssertPlaceHolder>" ; } size ( ) { return param . size ( ) ; }
org . junit . Assert . assertEquals ( times , set . size ( ) ) 