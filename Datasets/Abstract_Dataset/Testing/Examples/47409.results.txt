METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . core . IDENT_2 IDENT_3 = new com . IDENT_0 . IDENT_1 . core . METHOD_1 ( java . util . Collections . METHOD_2 ( STRING_0 , java . util . Arrays . asList ( STRING_1 ) ) ) { } ; java . util . List < java . lang . String > list = IDENT_3 . METHOD_3 ( STRING_0 , java . lang . String . class ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Object , java . lang . Class ) { com . IDENT_0 . IDENT_1 . core . List list = get ( IDENT_4 , com . IDENT_0 . IDENT_1 . core . List . class ) ; if ( list == null ) { return null ; } com . IDENT_0 . IDENT_1 . core . List < T > IDENT_5 = new com . IDENT_0 . IDENT_1 . core . ArrayList ( ) ; for ( java . lang . Object item : list ) { if ( ( IDENT_6 . equals ( com . IDENT_0 . IDENT_1 . core . IDENT_7 . class ) ) || ( IDENT_6 . equals ( com . IDENT_0 . IDENT_1 . core . METHOD_1 . class ) ) ) { IDENT_5 . add ( ( ( T ) ( new com . IDENT_0 . IDENT_1 . core . METHOD_1 ( ( ( com . IDENT_0 . IDENT_1 . core . Map < java . lang . String , java . lang . Object > ) ( item ) ) ) ) ) ) ; } else { IDENT_5 . add ( ( ( T ) ( org . apache . commons . IDENT_8 . IDENT_9 . convert ( item , IDENT_6 ) ) ) ) ; } } return com . IDENT_0 . IDENT_1 . core . Collections . METHOD_4 ( IDENT_5 ) ; }
org . junit . Assert . assertEquals ( java . util . Arrays . asList ( STRING_1 ) , list ) 