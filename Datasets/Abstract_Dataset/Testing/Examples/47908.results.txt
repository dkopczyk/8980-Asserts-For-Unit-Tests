METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . redis . IDENT_2 . service . impl . List < com . IDENT_0 . IDENT_1 . tuple . IDENT_3 < java . lang . String , java . lang . Integer > > first = com . google . common . collect . Lists . newArrayList ( com . IDENT_0 . IDENT_1 . tuple . IDENT_3 . from ( STRING_0 , INT_0 ) , com . IDENT_0 . IDENT_1 . tuple . IDENT_3 . from ( STRING_0 , INT_1 ) , com . IDENT_0 . IDENT_1 . tuple . IDENT_3 . from ( STRING_0 , INT_2 ) ) ; com . IDENT_0 . IDENT_1 . redis . IDENT_2 . service . impl . List < com . IDENT_0 . IDENT_1 . redis . IDENT_2 . model . IDENT_4 > IDENT_5 = com . google . common . collect . Lists . newArrayList ( new com . IDENT_0 . IDENT_1 . redis . IDENT_2 . model . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( INT_0 ) , new com . IDENT_0 . IDENT_1 . redis . IDENT_2 . model . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( INT_1 ) , new com . IDENT_0 . IDENT_1 . redis . IDENT_2 . model . METHOD_1 ( ) . METHOD_2 ( STRING_0 ) . METHOD_3 ( INT_3 ) ) ; com . IDENT_0 . IDENT_1 . redis . IDENT_2 . service . impl . List < com . IDENT_0 . IDENT_1 . tuple . IDENT_3 < java . lang . String , java . lang . Integer > > IDENT_6 = IDENT_7 . METHOD_4 ( first , IDENT_5 ) ; "<AssertPlaceHolder>" ; } size ( ) { try { return METHOD_5 ( ) . size ( ) ; } catch ( java . io . IDENT_8 e ) { throw new com . IDENT_0 . IDENT_1 . exception . METHOD_6 ( java . lang . String . format ( STRING_1 , file ) , e ) ; } catch ( java . io . IOException e ) { logger . warn ( ( STRING_2 + ( file ) ) , e ) ; } if ( ! ( file . exists ( ) ) ) { throw new com . IDENT_0 . IDENT_1 . exception . METHOD_6 ( java . lang . String . format ( STRING_1 , file ) ) ; } return file . length ( ) ; }
org . junit . Assert . assertEquals ( 1 , METHOD_4 . size ( ) ) 