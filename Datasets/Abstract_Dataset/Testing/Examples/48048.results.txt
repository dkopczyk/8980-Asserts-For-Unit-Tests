METHOD_0 ( ) { IDENT_0 . IDENT_1 . IDENT_2 . ui . IDENT_3 . IDENT_4 . logger . info ( STRING_0 ) ; try { final IDENT_0 . IDENT_1 . IDENT_2 . ui . IDENT_3 . IDENT_5 IDENT_6 = new IDENT_0 . IDENT_1 . IDENT_2 . ui . IDENT_3 . METHOD_1 ( ) ; final java . util . List < java . awt . IDENT_7 > IDENT_8 = new java . util . ArrayList ( ) ; java . util . Set < java . awt . IDENT_7 > IDENT_9 = null ; final javax . IDENT_10 . IDENT_11 IDENT_12 = IDENT_6 . METHOD_2 ( ) ; METHOD_3 ( IDENT_12 ) ; METHOD_4 ( IDENT_12 , IDENT_8 ) ; IDENT_9 = new java . util . HashSet ( IDENT_8 ) ; "<AssertPlaceHolder>" ; } catch ( final IDENT_0 . IDENT_1 . IDENT_2 . ui . IDENT_3 . java . awt e ) { } } METHOD_4 ( javax . IDENT_10 . IDENT_11 , java . util . List ) { final java . awt . IDENT_7 [ ] components = IDENT_13 . METHOD_5 ( ) ; java . awt . IDENT_7 IDENT_14 = null ; for ( int i = 0 ; i < ( components . length ) ; i ++ ) { final java . awt . IDENT_7 component = IDENT_13 . METHOD_6 ( i ) ; if ( ! ( component instanceof javax . IDENT_10 . IDENT_11 ) ) { if ( component instanceof javax . IDENT_10 . IDENT_15 ) { final javax . IDENT_10 . IDENT_15 IDENT_16 = ( ( javax . IDENT_10 . IDENT_15 ) ( component ) ) ; IDENT_14 = IDENT_16 . METHOD_7 ( ) ; if ( IDENT_14 != null ) { IDENT_8 . add ( IDENT_14 ) ; } } } else { METHOD_4 ( ( ( javax . IDENT_10 . IDENT_11 ) ( component ) ) , IDENT_8 ) ; } }
org . junit . Assert . assertTrue ( ( ( IDENT_9 . size ( ) ) == ( IDENT_8 . size ( ) ) ) ) 