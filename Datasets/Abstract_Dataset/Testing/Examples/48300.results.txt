METHOD_0 ( ) { long IDENT_0 = Long . MAX_VALUE ; org . apache . IDENT_1 . IDENT_2 out = new org . apache . IDENT_1 . METHOD_1 ( ) ; out . METHOD_2 ( Integer . MAX_VALUE , IDENT_3 . IDENT_4 ) ; out . METHOD_3 ( IDENT_0 ) ; org . apache . IDENT_1 . IDENT_5 in = new org . apache . IDENT_1 . METHOD_4 ( new org . apache . IDENT_1 . METHOD_5 ( out . toByteArray ( ) ) ) ; in . METHOD_6 ( IDENT_3 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { if ( ( ( IDENT_6 ) - ( pos ) ) < 10 ) { int b = read ( ) ; long n = b & INT_0 ; for ( int IDENT_7 = 7 ; b > INT_0 ; IDENT_7 += 7 ) { b = read ( ) ; n OP_0 ( b & INT_1 ) << IDENT_7 ; } return ( n > > > 1 ) OP_1 ( - ( n & 1 ) ) ; } int b = ( buf [ ( ( pos ) ++ ) ] ) & 255 ; int n = b & INT_0 ; long l ; if ( b > INT_0 ) { b = ( buf [ ( ( pos ) ++ ) ] ) & 255 ; n OP_0 ( b & INT_0 ) << 7 ; if ( b > INT_0 ) { b = ( buf [ ( ( pos ) ++ ) ] ) & 255 ; n OP_0 ( b & INT_0 ) << INT_2 ; if ( b > INT_0 ) { b = ( buf [ ( ( pos ) ++ ) ] ) & 255 ; n OP_0 ( b & INT_0 ) << INT_3 ; if ( b > INT_0 ) { l = METHOD_8 ( ( ( long ) ( n ) ) ) ; } else { l = n ; } } else { l = n ; } } else { l = n ; } } else { l = n ; } if ( ( pos ) > ( IDENT_6 ) ) { throw new java . io . METHOD_9 ( ) ; } return ( l > > > 1 ) OP_1 ( - ( l & 1 ) ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , in . METHOD_7 ( ) ) 