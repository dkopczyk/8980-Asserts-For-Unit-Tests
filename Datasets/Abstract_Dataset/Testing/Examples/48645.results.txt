METHOD_0 ( ) { IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 m = new IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . IDENT_6 IDENT_7 = new IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 . METHOD_2 ( m ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 IDENT_9 = new IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_3 ( ) ; java . util . IDENT_10 < java . lang . Double > IDENT_11 = new java . util . IDENT_10 < java . lang . Double > ( java . util . Arrays . asList ( 1.0 , 2.0 ) ) ; java . util . IDENT_10 < java . lang . Double > IDENT_12 = new java . util . IDENT_10 < java . lang . Double > ( java . util . Arrays . asList ( 1.0 , 2.0 ) ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 IDENT_14 = IDENT_13 . IDENT_15 . parameter ( IDENT_9 , m . METHOD_4 ( IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_16 . create ( 2 , 1 ) ) ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 x = IDENT_13 . IDENT_15 . input ( IDENT_9 , IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_16 . create ( 2 , 1 ) , IDENT_11 ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 y = IDENT_13 . IDENT_15 . input ( IDENT_9 , IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_16 . create ( 2 , 1 ) , IDENT_12 ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 IDENT_17 = IDENT_13 . IDENT_15 . METHOD_5 ( x , IDENT_14 ) ; IDENT_0 . edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 IDENT_18 = IDENT_13 . IDENT_15 . METHOD_6 ( IDENT_17 , y ) ; IDENT_9 . METHOD_7 ( ) ; IDENT_9 . METHOD_8 ( ) ; IDENT_9 . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { for ( int i = 0 ; i < ( IDENT_19 . size ( ) ) ; ++ i ) { int j = IDENT_19 . get ( i ) ; if ( ( nodes . get ( j ) . getName ( ) ) == STRING_0 ) { METHOD_10 ( nodes . get ( j ) ) ; } else { METHOD_11 ( nodes . get ( j ) ) ; } } }
org . junit . Assert . assertEquals ( true , m . METHOD_7 ( ) ) 