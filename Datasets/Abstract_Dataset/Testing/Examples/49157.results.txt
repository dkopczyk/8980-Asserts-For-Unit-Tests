METHOD_0 ( ) { org . joda . time . IDENT_0 IDENT_1 = new org . joda . time . METHOD_1 ( java . lang . System . currentTimeMillis ( ) ) ; java . util . List < IDENT_2 . IDENT_3 . IDENT_4 . model . IDENT_5 > IDENT_6 = IDENT_2 . IDENT_3 . IDENT_4 . IDENT_7 . IDENT_8 . METHOD_2 ( IDENT_1 . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Date ) { if ( ! ( IDENT_9 ) ) { IDENT_9 = METHOD_4 ( STRING_0 , STRING_1 ) ; if ( ! ( IDENT_9 ) ) { throw new IDENT_2 . IDENT_3 . IDENT_4 . METHOD_5 ( STRING_2 ) ; } } java . text . IDENT_10 IDENT_11 = new java . text . METHOD_6 ( STRING_3 ) ; try { java . util . List < java . lang . String > IDENT_12 = METHOD_7 ( ( STRING_4 + ( IDENT_11 . format ( IDENT_13 ) ) ) ) ; java . util . List < IDENT_2 . IDENT_3 . IDENT_4 . model . IDENT_5 > IDENT_6 = new java . util . ArrayList < IDENT_2 . IDENT_3 . IDENT_4 . model . IDENT_5 > ( ) ; for ( java . lang . String IDENT_14 : IDENT_12 ) { IDENT_6 . addAll ( METHOD_8 ( IDENT_14 ) ) ; } return IDENT_6 ; } catch ( java . lang . Exception e ) { throw new IDENT_2 . IDENT_3 . IDENT_4 . METHOD_5 ( e ) ; } }
org . junit . Assert . assertEquals ( true , ( ( IDENT_6 . size ( ) ) > 0 ) ) 