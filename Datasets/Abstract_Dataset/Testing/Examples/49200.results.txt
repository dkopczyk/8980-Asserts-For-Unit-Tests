METHOD_0 ( ) { java . util . IDENT_0 IDENT_1 = new java . util . METHOD_1 ( INT_0 ) ; int [ ] data = new int [ 3 * ( IDENT_1 . METHOD_2 ( 1000 ) ) ] ; for ( int i = 0 ; i < ( data . length ) ; i ++ ) { data [ i ] = IDENT_1 . METHOD_2 ( ) ; } byte [ ] IDENT_2 = new byte [ 4 ] ; for ( int d : data ) { IDENT_3 . IDENT_4 . io . IDENT_5 . METHOD_3 ( d , IDENT_2 , 0 , 1 ) ; int val = IDENT_3 . IDENT_4 . io . IDENT_6 . METHOD_4 ( IDENT_2 , 0 , 1 ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( byte [ ] , int , int ) { byte IDENT_7 = data [ ( offset + ( 3 * IDENT_8 ) ) ] ; byte IDENT_9 = data [ ( offset + ( 2 * IDENT_8 ) ) ] ; byte IDENT_10 = data [ ( offset + ( 1 * IDENT_8 ) ) ] ; byte IDENT_11 = data [ offset ] ; int IDENT_12 = ( ( int ) ( IDENT_7 ) ) & 255 ; int IDENT_13 = ( ( int ) ( IDENT_9 ) ) & 255 ; int IDENT_14 = ( ( int ) ( IDENT_10 ) ) & 255 ; int IDENT_15 = ( ( int ) ( IDENT_11 ) ) & 255 ; return ( ( IDENT_12 | ( IDENT_13 << 8 ) ) | ( IDENT_14 << 16 ) ) | ( IDENT_15 << INT_1 ) ; }
org . junit . Assert . assertEquals ( val , d ) 