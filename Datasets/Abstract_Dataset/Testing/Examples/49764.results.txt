METHOD_0 ( ) { logger . info ( STRING_0 ) ; com . IDENT_0 . framework . common . IDENT_1 . IDENT_2 IDENT_3 = new com . IDENT_0 . framework . common . IDENT_1 . METHOD_1 ( ) ; IDENT_3 . put ( 0 , new com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 ( java . util . Arrays . asList ( new java . lang . Object [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 } ) ) ) ; IDENT_3 . put ( 1 , new com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 ( java . util . Arrays . asList ( new java . lang . Object [ ] { FLOAT_5 , FLOAT_6 , FLOAT_7 , FLOAT_8 , FLOAT_9 } ) ) ) ; IDENT_3 . put ( 2 , new com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 ( java . util . Arrays . asList ( new java . lang . Object [ ] { FLOAT_10 , FLOAT_11 , FLOAT_12 , FLOAT_13 } ) ) ) ; IDENT_3 . put ( 3 , new com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 ( java . util . Arrays . asList ( new java . lang . Object [ ] { FLOAT_14 , FLOAT_15 , FLOAT_16 , FLOAT_17 , FLOAT_18 } ) ) ) ; double IDENT_4 = FLOAT_19 ; boolean expResult = true ; boolean result = com . IDENT_0 . framework . core . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_3 ( IDENT_3 , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . IDENT_0 . framework . common . IDENT_1 . METHOD_1 , double ) { int n = 0 ; int k = IDENT_3 . size ( ) ; if ( k <= 1 ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . util . Map < java . lang . Object , java . lang . Integer > IDENT_9 = new java . util . HashMap ( ) ; java . util . Map < java . lang . Object , java . lang . Double > IDENT_10 = new java . util . HashMap ( ) ; for ( Map . Entry < java . lang . Object , com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 > entry : IDENT_3 . entrySet ( ) ) { java . lang . Object j = entry . getKey ( ) ; com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 IDENT_11 = entry . getValue ( ) ; int IDENT_12 = IDENT_11 . size ( ) ; if ( IDENT_12 == 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } IDENT_9 . put ( j , IDENT_12 ) ; n += IDENT_12 ; IDENT_10 . put ( j , ( ( com . IDENT_0 . framework . core . IDENT_5 . IDENT_13 . IDENT_14 . METHOD_4 ( IDENT_11 ) ) / IDENT_12 ) ) ; } double IDENT_15 = 0.0 ; java . util . Map < java . lang . Object , java . lang . Double > IDENT_16 = new java . util . HashMap ( ) ; java . util . Map < java . lang . Object , java . util . Map < java . lang . Object , java . lang . Double > > IDENT_17 = new java . util . HashMap ( ) ; for ( Map . Entry < java . lang . Object , com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 > entry : IDENT_3 . entrySet ( ) ) { java . lang . Object j = entry . getKey ( ) ; com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 IDENT_11 = entry . getValue ( ) ; IDENT_17 . put ( j , new java . util . HashMap ( ) ) ; double IDENT_18 = 0.0 ; int i = 0 ; java . util . Iterator < java . lang . Double > it = IDENT_11 . METHOD_5 ( ) ; while ( it . hasNext ( ) ) { java . lang . Double IDENT_19 = it . next ( ) ; double IDENT_12 = java . lang . Math . METHOD_6 ( ( IDENT_19 - ( IDENT_10 . get ( j ) ) ) ) ; IDENT_17 . get ( j ) . put ( i , IDENT_12 ) ; IDENT_15 += IDENT_12 ; IDENT_18 += IDENT_12 ; ++ i ; } IDENT_16 . put ( j , ( IDENT_18 / ( IDENT_9 . get ( j ) ) ) ) ; } IDENT_15 OP_0 n ; double IDENT_20 = 0 ; double IDENT_21 = 0 ; for ( Map . Entry < java . lang . Object , com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 > entry : IDENT_3 . entrySet ( ) ) { java . lang . Object j = entry . getKey ( ) ; com . IDENT_0 . framework . common . IDENT_1 . METHOD_2 IDENT_11 = entry . getValue ( ) ; IDENT_20 += ( IDENT_9 . get ( j ) ) * ( java . lang . Math . METHOD_7 ( ( ( IDENT_16 . get ( j ) ) - IDENT_15 ) , 2 ) ) ; int len = IDENT_11 . size ( ) ; for ( int i = 0 ; i < len ; i ++ ) { IDENT_21 += java . lang . Math . METHOD_7 ( ( ( IDENT_17 . get ( j ) . get ( i ) ) - ( IDENT_16 . get ( j ) ) ) , 2 ) ; } } if ( IDENT_21 == 0 ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } double IDENT_22 = ( ( n - k ) / ( k - 1.0 ) ) * ( IDENT_20 / IDENT_21 ) ; boolean IDENT_23 = com . IDENT_0 . framework . core . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_8 ( IDENT_22 , n , k , IDENT_4 ) ; return IDENT_23 ; }
org . junit . Assert . assertEquals ( expResult , result ) 