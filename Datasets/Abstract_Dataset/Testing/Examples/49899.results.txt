METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 error = new java . util . concurrent . atomic . METHOD_1 ( false ) ; final IDENT_1 . IDENT_2 < java . lang . Integer > IDENT_3 = new IDENT_1 . IDENT_2 < java . lang . Integer > ( ) { @ com . github . davidmoten . internal . IDENT_4 . Override public void METHOD_2 ( ) { } @ com . github . davidmoten . internal . IDENT_4 . Override public void METHOD_3 ( java . lang . Throwable e ) { error . set ( true ) ; } @ com . github . davidmoten . internal . IDENT_4 . Override public void METHOD_4 ( java . lang . Integer t ) { } } ; IDENT_1 . IDENT_5 . create ( new IDENT_1 . IDENT_5 . IDENT_6 < java . lang . Integer > ( ) { @ com . github . davidmoten . internal . IDENT_4 . Override public void call ( IDENT_1 . IDENT_2 < ? super java . lang . Integer > IDENT_7 ) { IDENT_7 . METHOD_4 ( 1 ) ; IDENT_3 . METHOD_5 ( ) ; IDENT_7 . METHOD_3 ( new java . lang . RuntimeException ( ) ) ; } } ) . METHOD_6 ( new com . github . davidmoten . IDENT_8 . internal . IDENT_4 . IDENT_9 < java . lang . Integer > ( 1 , com . github . davidmoten . internal . IDENT_4 . IDENT_10 . IDENT_11 ) ) . METHOD_7 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Throwable ) { if ( ! ( METHOD_8 ( ) ) ) child . METHOD_3 ( t ) ; }
org . junit . Assert . assertFalse ( error . get ( ) ) 