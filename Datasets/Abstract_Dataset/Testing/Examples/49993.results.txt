METHOD_0 ( ) { for ( int n = 1 ; n < 1000 ; n ++ ) { final int IDENT_0 = n ; io . IDENT_1 . IDENT_2 < java . lang . Integer > a = io . IDENT_1 . IDENT_2 . range ( 1 , n ) . map ( new io . IDENT_1 . IDENT_3 . IDENT_4 < java . lang . Integer , java . lang . Integer > ( ) { @ com . github . davidmoten . IDENT_5 . internal . IDENT_6 . Override public com . github . davidmoten . IDENT_5 . internal . IDENT_6 . Integer apply ( java . lang . Integer x ) { return ( IDENT_0 + 1 ) - x ; } } ) ; io . IDENT_1 . IDENT_2 < java . lang . Integer > b = io . IDENT_1 . IDENT_2 . range ( 1 , n ) ; boolean equals = io . IDENT_1 . IDENT_2 . METHOD_1 ( com . github . davidmoten . IDENT_5 . internal . IDENT_6 . IDENT_7 . METHOD_2 ( a , b ) . METHOD_3 ( ) , io . IDENT_1 . IDENT_2 . range ( 1 , n ) ) . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } } METHOD_2 ( io . IDENT_1 . IDENT_2 , io . IDENT_1 . IDENT_2 ) { return a . METHOD_5 ( com . github . davidmoten . IDENT_5 . IDENT_6 . IDENT_8 . METHOD_6 ( b , com . github . davidmoten . IDENT_5 . IDENT_9 . METHOD_7 ( ) , com . github . davidmoten . IDENT_5 . IDENT_9 . METHOD_7 ( ) , com . github . davidmoten . IDENT_5 . internal . IDENT_6 . IDENT_7 . IDENT_10 ) ) ; }
org . junit . Assert . assertTrue ( equals ) 