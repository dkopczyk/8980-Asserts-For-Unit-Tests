METHOD_0 ( ) { final java . io . InputStream is = com . github . davidmoten . IDENT_0 . IDENT_1 . METHOD_1 ( io . IDENT_2 . IDENT_3 . < java . lang . String > METHOD_2 ( ) , com . github . davidmoten . IDENT_0 . internal . IDENT_4 . IDENT_5 . IDENT_6 ) ; io . IDENT_2 . IDENT_7 . IDENT_8 . METHOD_3 ( ) . METHOD_4 ( new java . lang . METHOD_5 ( ) { @ com . github . davidmoten . IDENT_0 . internal . IDENT_4 . Override public void run ( ) { try { is . close ( ) ; } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } } , INT_0 , TimeUnit . IDENT_9 ) ; "<AssertPlaceHolder>" ; } read ( ) { for ( ; ; ) { byte [ ] a = METHOD_6 ( ) ; if ( a == null ) { java . lang . Throwable ex = error ; if ( ex != null ) { if ( ex instanceof com . github . davidmoten . IDENT_0 . internal . IDENT_4 . IOException ) { throw ( ( com . github . davidmoten . IDENT_0 . internal . IDENT_4 . IOException ) ( ex ) ) ; } throw new com . github . davidmoten . IDENT_0 . internal . IDENT_4 . IOException ( ex ) ; } return - 1 ; } int IDENT_10 = index ; if ( IDENT_10 == ( a . length ) ) { index = 0 ; bytes = null ; IDENT_11 . get ( ) . request ( 1 ) ; } else { int result = ( a [ IDENT_10 ] ) & 255 ; index = IDENT_10 + 1 ; return result ; } } }
org . junit . Assert . assertEquals ( ( - 1 ) , is . read ( ) ) 