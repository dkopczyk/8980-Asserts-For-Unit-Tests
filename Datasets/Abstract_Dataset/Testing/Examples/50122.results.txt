METHOD_0 ( ) { java . lang . reflect . Method IDENT_0 = clazz . METHOD_1 ( STRING_0 , int . class ) ; METHOD_2 ( 2 , 3 , IDENT_0 , clazz ) ; METHOD_2 ( 1 , 3 , IDENT_0 , clazz ) ; METHOD_2 ( ( - 1 ) , 0 , IDENT_0 , clazz ) ; METHOD_2 ( 3 , 0 , IDENT_0 , clazz ) ; java . util . List < de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . IDENT_5 > IDENT_6 = de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . persistence . IDENT_7 . METHOD_3 ( IDENT_8 , de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . IDENT_10 . IDENT_11 , INT_0 ) ; "<AssertPlaceHolder>" ; for ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . IDENT_5 m : IDENT_6 ) { java . lang . String IDENT_12 = m . METHOD_4 ( ) ; System . out . println ( IDENT_12 ) ; if ( IDENT_12 . equals ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . IDENT_10 . IDENT_13 ) ) { if ( ( m . METHOD_5 ( ) ) < 2 ) { METHOD_6 ( m , ( - 1 ) , 3 , IDENT_0 , clazz ) ; METHOD_6 ( m , 1 , 0 , IDENT_0 , clazz ) ; } else { METHOD_6 ( m , ( - 2 ) , 3 , IDENT_0 , clazz ) ; METHOD_6 ( m , 2 , 0 , IDENT_0 , clazz ) ; } } else if ( IDENT_12 . equals ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_9 . IDENT_10 . IDENT_14 ) ) { if ( ( m . METHOD_5 ( ) ) < 2 ) { METHOD_6 ( m , ( OP_0 1 ) , 3 , IDENT_0 , clazz ) ; METHOD_6 ( m , 1 , 0 , IDENT_0 , clazz ) ; } else { METHOD_6 ( m , ( OP_0 2 ) , 3 , IDENT_0 , clazz ) ; METHOD_6 ( m , 2 , 0 , IDENT_0 , clazz ) ; } } else { org . junit . Assert . fail ( ( STRING_1 + m ) ) ; } } } size ( ) { return IDENT_15 . size ( ) ; }
org . junit . Assert . assertEquals ( 8 , IDENT_6 . size ( ) ) 