METHOD_0 ( ) { java . lang . reflect . Method IDENT_0 = clazz . METHOD_1 ( STRING_0 , float . class , float . class ) ; java . util . List < de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . IDENT_5 > IDENT_6 = de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . persistence . IDENT_7 . METHOD_2 ( IDENT_8 , IDENT_9 . IDENT_10 , INT_0 ) ; "<AssertPlaceHolder>" ; for ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . results . IDENT_5 IDENT_4 : IDENT_6 ) { int IDENT_11 = java . lang . Integer . METHOD_3 ( IDENT_4 . METHOD_4 ( ) ) ; if ( IDENT_11 == ( org . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_0 , FLOAT_0 } ; METHOD_5 ( input , FLOAT_1 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_2 , IDENT_0 , clazz ) ; } else if ( IDENT_11 == ( org . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_17 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_3 , FLOAT_0 } ; METHOD_5 ( input , FLOAT_4 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_5 , IDENT_0 , clazz ) ; } else if ( IDENT_11 == ( org . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_18 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_0 , FLOAT_0 } ; METHOD_5 ( input , FLOAT_1 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_4 , IDENT_0 , clazz ) ; } else if ( IDENT_11 == ( org . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_19 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_2 , FLOAT_0 } ; METHOD_5 ( input , FLOAT_0 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_1 , IDENT_0 , clazz ) ; } else if ( IDENT_11 == ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_20 . IDENT_21 . IDENT_22 . IDENT_23 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_2 , FLOAT_3 } ; METHOD_5 ( input , FLOAT_4 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_3 , IDENT_0 , clazz ) ; } else if ( IDENT_11 == ( de . IDENT_1 . cs . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_20 . IDENT_21 . IDENT_22 . IDENT_24 ) ) { java . lang . IDENT_16 [ ] input = new java . lang . IDENT_16 [ ] { FLOAT_2 , FLOAT_3 } ; METHOD_5 ( input , FLOAT_4 , IDENT_0 , clazz ) ; METHOD_6 ( IDENT_4 , input , FLOAT_2 , IDENT_0 , clazz ) ; } else { org . junit . Assert . fail ( ( STRING_1 + IDENT_4 ) ) ; } } } size ( ) { return IDENT_25 . size ( ) ; }
org . junit . Assert . assertEquals ( 6 , IDENT_6 . size ( ) ) 