METHOD_0 ( ) { javax . security . auth . IDENT_0 IDENT_1 = new javax . security . auth . METHOD_1 ( ) ; IDENT_1 . METHOD_2 ( ) . add ( new org . dcache . auth . METHOD_3 ( STRING_0 ) ) ; org . dcache . auth . IDENT_2 IDENT_3 = new org . dcache . auth . METHOD_4 ( ) ; IDENT_3 . METHOD_5 ( ) . METHOD_2 ( ) . add ( new org . dcache . auth . METHOD_6 ( INT_0 ) ) ; IDENT_3 . METHOD_7 ( ) . add ( new org . dcache . auth . attributes . METHOD_8 ( STRING_1 ) ) ; when ( IDENT_4 . METHOD_9 ( any ( javax . security . auth . METHOD_1 . class ) ) ) . thenReturn ( IDENT_5 ) ; IDENT_6 . METHOD_9 ( IDENT_7 ) ; METHOD_10 ( IDENT_4 ) ; when ( IDENT_4 . METHOD_9 ( any ( javax . security . auth . METHOD_1 . class ) ) ) . thenReturn ( IDENT_3 ) ; org . dcache . auth . METHOD_4 IDENT_8 = IDENT_6 . METHOD_9 ( IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( javax . security . auth . METHOD_1 ) { org . dcache . IDENT_9 . monitor . IDENT_10 record = new org . dcache . IDENT_9 . monitor . METHOD_11 ( ) ; org . dcache . IDENT_9 . monitor . IDENT_11 IDENT_12 = org . dcache . IDENT_9 . monitor . IDENT_13 . of ( record , org . dcache . IDENT_9 . IDENT_14 . IDENT_15 ) ; try { org . dcache . IDENT_9 . METHOD_4 IDENT_8 = METHOD_9 ( subject , IDENT_12 ) ; IDENT_16 . remove ( subject ) ; return IDENT_8 ; } catch ( org . dcache . IDENT_9 . IDENT_17 e ) { if ( ! ( IDENT_16 . METHOD_12 ( subject ) ) ) { IDENT_16 . add ( subject ) ; org . dcache . IDENT_9 . monitor . IDENT_18 result = record . METHOD_13 ( ) ; if ( result . METHOD_14 ( ) ) { org . dcache . IDENT_9 . monitor . IDENT_19 IDENT_20 = new org . dcache . IDENT_9 . monitor . METHOD_15 ( result ) ; org . dcache . IDENT_9 . IDENT_14 . LOGGER . warn ( ( STRING_2 + STRING_3 ) , IDENT_20 . METHOD_16 ( ) ) ; } else { org . dcache . IDENT_9 . IDENT_14 . LOGGER . warn ( STRING_4 , e . getMessage ( ) ) ; } } throw e ; } }
org . junit . Assert . assertThat ( IDENT_8 , org . hamcrest . Matchers . is ( IDENT_3 ) ) 