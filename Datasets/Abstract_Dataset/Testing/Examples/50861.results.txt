METHOD_0 ( ) { org . dcache . IDENT_0 . v4 . IDENT_1 . IDENT_2 IDENT_3 = IDENT_2 . of ( 5 ) ; "<AssertPlaceHolder>" ; } iterator ( ) { return new java . util . Iterator < java . lang . Integer > ( ) { int IDENT_4 = - 1 ; @ org . dcache . IDENT_0 . v4 . IDENT_1 . Override public boolean hasNext ( ) { if ( ( ( value ) == null ) || ( ( IDENT_4 ) > ( ( value . length ) * ( Integer . IDENT_5 ) ) ) ) { return false ; } ( IDENT_4 ) ++ ; for ( ; ( IDENT_4 ) < ( ( value . length ) * ( Integer . IDENT_5 ) ) ; ( IDENT_4 ) ++ ) { int IDENT_6 = ( IDENT_4 ) / ( Integer . IDENT_5 ) ; int IDENT_7 = ( ( value [ IDENT_6 ] ) > > ( ( IDENT_4 ) OP_0 ( Integer . IDENT_5 ) ) ) & 1 ; if ( IDENT_7 != 0 ) { return true ; } } return false ; } @ org . dcache . IDENT_0 . v4 . IDENT_1 . Override public org . dcache . IDENT_0 . v4 . IDENT_1 . Integer next ( ) { METHOD_1 ( ) ; return IDENT_4 ; } @ org . dcache . IDENT_0 . v4 . IDENT_1 . Override public void remove ( ) { throw new java . lang . METHOD_2 ( ) ; } MOD_0 void METHOD_1 ( ) { if ( ( ( ( value ) == null ) || ( ( IDENT_4 ) < 0 ) ) || ( ( IDENT_4 ) > ( ( value . length ) * ( Integer . IDENT_5 ) ) ) ) { throw new java . util . METHOD_3 ( ) ; } } } ; }
org . junit . Assert . assertTrue ( IDENT_3 . iterator ( ) . hasNext ( ) ) 