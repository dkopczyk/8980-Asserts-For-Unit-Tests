METHOD_0 ( ) { java . util . concurrent . IDENT_0 IDENT_1 = new java . util . concurrent . METHOD_1 ( 1000 ) ; java . util . concurrent . atomic . IDENT_2 value = new java . util . concurrent . atomic . METHOD_2 ( ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { service . execute ( ( ) -> { int k = value . METHOD_3 ( ) ; client . put ( org . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_4 ( k , k ) ) . METHOD_5 ( ) . first ( ) ; IDENT_1 . METHOD_6 ( ) ; } ) ; } IDENT_1 . METHOD_7 ( ) ; java . lang . Integer count = client . METHOD_8 ( ) . count ( ) . METHOD_5 ( ) . first ( ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( ) { org . IDENT_3 . IDENT_4 . IDENT_6 METHOD_8 = new org . IDENT_3 . IDENT_4 . METHOD_9 ( ) ; return IDENT_7 . IDENT_8 . METHOD_10 ( IDENT_9 . METHOD_11 ( METHOD_8 ) ) . map ( ( payload ) -> { org . IDENT_3 . IDENT_4 . IDENT_10 METHOD_4 = org . IDENT_3 . IDENT_4 . IDENT_11 . METHOD_12 ( payload ) ; METHOD_8 . METHOD_13 ( ) ; return METHOD_4 ; } ) ; }
org . junit . Assert . assertThat ( count , org . hamcrest . core . Is . is ( 1000 ) ) 