METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 2 ) ; IDENT_0 . METHOD_2 ( 0 , INT_0 ) ; IDENT_0 . METHOD_2 ( 1 , 12 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 3 ) ; IDENT_1 . METHOD_2 ( 0 , 0 ) ; IDENT_1 . METHOD_2 ( 1 , 1 ) ; IDENT_1 . METHOD_2 ( 2 , 0 ) ; java . util . List < org . IDENT_2 . api . IDENT_3 . IDENT_4 > record = java . util . Arrays . asList ( ( ( org . IDENT_2 . api . IDENT_3 . IDENT_4 ) ( new org . IDENT_2 . api . IDENT_3 . METHOD_3 ( 1 ) ) ) , new org . IDENT_2 . api . IDENT_3 . METHOD_4 ( IDENT_0 ) , new org . IDENT_2 . api . IDENT_3 . METHOD_5 ( 2 ) , new org . IDENT_2 . api . IDENT_3 . METHOD_3 ( 3 ) , new org . IDENT_2 . api . IDENT_3 . METHOD_4 ( IDENT_1 ) , new org . IDENT_2 . api . IDENT_3 . METHOD_3 ( 1 ) ) ; java . io . File IDENT_5 = java . io . File . METHOD_6 ( STRING_0 , STRING_1 ) ; IDENT_5 . METHOD_7 ( true ) ; IDENT_5 . METHOD_8 ( ) ; if ( IDENT_5 . exists ( ) ) IDENT_5 . delete ( ) ; java . lang . String IDENT_6 = STRING_2 ; try ( org . IDENT_2 . api . records . writer . impl . IDENT_7 . IDENT_8 writer = new org . IDENT_2 . api . records . writer . impl . IDENT_7 . METHOD_9 ( ) ) { org . IDENT_2 . api . conf . Configuration IDENT_9 = new org . IDENT_2 . api . conf . Configuration ( ) ; IDENT_9 . METHOD_10 ( METHOD_9 . IDENT_10 , true ) ; IDENT_9 . METHOD_10 ( METHOD_9 . IDENT_11 , true ) ; IDENT_9 . METHOD_10 ( METHOD_9 . IDENT_12 , true ) ; IDENT_9 . METHOD_11 ( METHOD_9 . IDENT_13 , 0 ) ; IDENT_9 . METHOD_11 ( METHOD_9 . IDENT_14 , 3 ) ; org . IDENT_2 . api . split . IDENT_15 IDENT_16 = new org . IDENT_2 . api . split . METHOD_12 ( IDENT_5 ) ; writer . METHOD_13 ( IDENT_9 , IDENT_16 , new org . IDENT_2 . api . split . IDENT_17 . METHOD_14 ( ) ) ; writer . write ( record ) ; } java . lang . String IDENT_18 = org . apache . commons . io . IDENT_19 . METHOD_15 ( IDENT_5 ) . trim ( ) ; "<AssertPlaceHolder>" ; } write ( java . util . List ) { java . lang . StringBuilder result = new java . lang . StringBuilder ( ) ; int count = 0 ; for ( org . IDENT_2 . api . IDENT_3 . IDENT_4 IDENT_20 : record ) { if ( count > 0 ) { boolean IDENT_21 = false ; result . append ( ( IDENT_21 ? STRING_3 : " " ) ) ; } result . append ( IDENT_20 . toString ( ) ) ; count ++ ; } out . write ( result . toString ( ) . getBytes ( ) ) ; out . write ( org . IDENT_2 . api . records . writer . impl . IDENT_7 . IDENT_22 . getBytes ( ) ) ; return org . IDENT_2 . api . split . IDENT_17 . IDENT_23 . builder ( ) . METHOD_16 ( 1 ) . build ( ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_18 ) 