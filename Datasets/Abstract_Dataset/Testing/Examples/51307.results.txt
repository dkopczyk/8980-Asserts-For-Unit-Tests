METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 5 ) ; java . util . List < org . IDENT_0 . api . IDENT_1 . IDENT_2 > expected = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 5 ; i ++ ) expected . add ( new org . IDENT_0 . api . IDENT_1 . METHOD_2 ( i ) ) ; java . util . List < org . IDENT_0 . api . IDENT_1 . IDENT_2 > actual = new org . IDENT_0 . IDENT_3 . IDENT_4 . IDENT_5 . METHOD_3 ( ) . apply ( arr ) ; "<AssertPlaceHolder>" ; } apply ( org . nd4j . linalg . api . ndarray . INDArray ) { if ( ( arr . METHOD_4 ( ) ) != 1 ) throw new java . lang . METHOD_5 ( ( ( ( STRING_0 + STRING_1 ) + ( arr . METHOD_4 ( ) ) ) + STRING_2 ) ) ; java . util . List < org . IDENT_0 . api . IDENT_1 . IDENT_2 > record = new java . util . ArrayList ( ) ; if ( IDENT_6 ) { record . add ( new org . IDENT_0 . api . IDENT_1 . METHOD_6 ( arr ) ) ; } else { for ( int i = 0 ; i < ( arr . METHOD_7 ( ) ) ; i ++ ) record . add ( new org . IDENT_0 . api . IDENT_1 . METHOD_2 ( arr . METHOD_8 ( i ) ) ) ; } return record ; }
org . junit . Assert . assertEquals ( expected , actual ) 