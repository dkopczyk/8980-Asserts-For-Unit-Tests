METHOD_0 ( ) { org . IDENT_0 . api . transform . schema . Schema IDENT_1 = new org . IDENT_0 . api . transform . schema . Schema . Builder ( ) . METHOD_1 ( STRING_0 ) . METHOD_1 ( STRING_1 ) . METHOD_1 ( STRING_2 ) . build ( ) ; org . IDENT_0 . IDENT_2 . IDENT_3 . transform . List < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . List < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . IDENT_4 > > IDENT_5 = new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . ArrayList ( ) ; IDENT_5 . add ( org . IDENT_0 . IDENT_2 . IDENT_3 . transform . Arrays . < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . IDENT_4 > asList ( new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_2 ( 0 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( 1 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( FLOAT_0 ) ) ) ; IDENT_5 . add ( org . IDENT_0 . IDENT_2 . IDENT_3 . transform . Arrays . < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . IDENT_4 > asList ( new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_2 ( 1 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( 3 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( FLOAT_1 ) ) ) ; IDENT_5 . add ( org . IDENT_0 . IDENT_2 . IDENT_3 . transform . Arrays . < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . IDENT_4 > asList ( new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_2 ( 2 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( 3 ) , new org . IDENT_0 . IDENT_2 . IDENT_3 . transform . METHOD_3 ( FLOAT_2 ) ) ) ; org . IDENT_0 . api . transform . IDENT_6 IDENT_7 = new org . IDENT_0 . api . transform . IDENT_6 . Builder ( IDENT_1 ) . filter ( new org . IDENT_0 . api . transform . condition . column . METHOD_4 ( STRING_0 , org . IDENT_0 . api . transform . condition . IDENT_8 . IDENT_9 , 1 ) ) . build ( ) ; org . IDENT_0 . IDENT_2 . IDENT_3 . transform . List < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . List < org . IDENT_0 . IDENT_2 . IDENT_3 . transform . IDENT_4 > > execute = org . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_10 . execute ( IDENT_5 , IDENT_7 ) ; "<AssertPlaceHolder>" ; } size ( ) { return IDENT_11 . size ( ) ; }
org . junit . Assert . assertEquals ( 2 , execute . size ( ) ) 