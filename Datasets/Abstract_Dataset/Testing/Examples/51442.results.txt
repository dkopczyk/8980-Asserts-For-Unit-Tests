METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; org . IDENT_0 . IDENT_1 . conf . IDENT_2 conf = new org . IDENT_0 . IDENT_1 . conf . IDENT_3 . Builder ( ) . METHOD_3 ( INT_0 ) . METHOD_4 ( IDENT_4 . IDENT_5 ) . METHOD_5 ( new org . IDENT_0 . IDENT_1 . conf . IDENT_6 . METHOD_6 ( 0 , 1 ) ) . METHOD_7 ( new org . nd4j . linalg . IDENT_7 . config . METHOD_8 ( ) ) . METHOD_9 ( IDENT_8 . IDENT_9 ) . METHOD_10 ( ) . METHOD_11 ( STRING_0 , STRING_1 , STRING_2 ) . METHOD_12 ( STRING_2 1 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 2 ) . METHOD_14 ( 2 ) . build ( ) , STRING_0 ) . METHOD_12 ( STRING_2 0 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 2 ) . METHOD_14 ( 2 ) . build ( ) , STRING_1 ) . METHOD_12 ( STRING_2 3 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 2 ) . METHOD_14 ( 2 ) . build ( ) , STRING_2 ) . METHOD_15 ( STRING_3 , new org . IDENT_0 . IDENT_10 . METHOD_16 ( ) , STRING_2 1 , STRING_2 0 , STRING_2 3 ) . METHOD_12 ( STRING_4 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 6 ) . METHOD_14 ( 2 ) . build ( ) , STRING_3 ) . METHOD_12 ( STRING_5 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 6 ) . METHOD_14 ( 2 ) . build ( ) , STRING_3 ) . METHOD_12 ( STRING_6 , new org . IDENT_0 . IDENT_10 . IDENT_11 . Builder ( ) . METHOD_13 ( 6 ) . METHOD_14 ( 2 ) . build ( ) , STRING_3 ) . METHOD_12 ( STRING_7 , new org . IDENT_0 . IDENT_10 . IDENT_12 . Builder ( ) . METHOD_17 ( IDENT_13 . IDENT_14 . IDENT_15 ) . METHOD_13 ( 6 ) . METHOD_14 ( 2 ) . build ( ) , STRING_4 , STRING_5 , STRING_6 ) . METHOD_18 ( STRING_7 ) . build ( ) ; org . IDENT_0 . IDENT_1 . graph . IDENT_16 graph = new org . IDENT_0 . IDENT_1 . graph . METHOD_19 ( conf ) ; graph . init ( ) ; int [ ] IDENT_17 = new int [ ] { 1 , 3 } ; for ( int IDENT_18 : IDENT_17 ) { org . nd4j . linalg . api . ndarray . INDArray [ ] input = new org . nd4j . linalg . api . ndarray . INDArray [ 3 ] ; for ( int i = 0 ; i < 3 ; i ++ ) { input [ i ] = org . nd4j . linalg . factory . Nd4j . METHOD_20 ( IDENT_18 , 2 ) ; } org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . METHOD_20 ( IDENT_18 , 2 ) ; java . lang . String msg = STRING_2 2 + IDENT_18 ; if ( org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_20 ) { System . out . println ( msg ) ; for ( int j = 0 ; j < ( graph . METHOD_21 ( ) ) ; j ++ ) System . out . println ( ( ( ( STRING_8 + j ) + STRING_9 ) + ( graph . METHOD_22 ( j ) . METHOD_23 ( ) ) ) ) ; } boolean IDENT_21 = org . IDENT_0 . IDENT_10 . IDENT_22 . METHOD_24 ( graph , org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_23 , org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_24 , org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_25 , org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_20 , org . IDENT_0 . IDENT_10 . IDENT_19 . IDENT_26 , input , new org . nd4j . linalg . api . ndarray . INDArray [ ] { out } ) ; "<AssertPlaceHolder>" ; org . IDENT_0 . TestUtils . METHOD_25 ( graph ) ; } } METHOD_24 ( org . IDENT_0 . IDENT_1 . IDENT_27 . IDENT_28 , double , double , double , boolean , boolean , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray ) { return org . IDENT_0 . IDENT_10 . IDENT_22 . METHOD_24 ( IDENT_29 , IDENT_30 , IDENT_31 , IDENT_32 , IDENT_33 , IDENT_34 , input , IDENT_35 , null , null ) ; }
org . junit . Assert . assertTrue ( msg , IDENT_21 ) 