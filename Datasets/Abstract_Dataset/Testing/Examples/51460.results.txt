METHOD_0 ( ) { int IDENT_0 = 3 ; int IDENT_1 = 5 ; int IDENT_2 = 4 ; org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_6 . IDENT_7 [ ] IDENT_8 = new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_9 [ ] { IDENT_7 . IDENT_9 . IDENT_10 , IDENT_7 . IDENT_9 . IDENT_11 , IDENT_7 . IDENT_9 . IDENT_12 , IDENT_7 . IDENT_9 . IDENT_13 } ; java . util . IDENT_14 r = new java . util . METHOD_1 ( INT_0 ) ; for ( int IDENT_15 : new int [ ] { 1 , 3 } ) { for ( boolean IDENT_16 : new boolean [ ] { false , true } ) { for ( boolean simple : new boolean [ ] { false , true } ) { for ( boolean IDENT_17 : new boolean [ ] { true , false } ) { org . nd4j . linalg . api . ndarray . INDArray in = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( new int [ ] { IDENT_15 , IDENT_0 , IDENT_2 } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_18 = org . nd4j . linalg . factory . Nd4j . create ( IDENT_15 , IDENT_1 , IDENT_2 ) ; for ( int i = 0 ; i < IDENT_15 ; i ++ ) { for ( int j = 0 ; j < IDENT_2 ; j ++ ) { IDENT_18 . METHOD_3 ( i , r . METHOD_4 ( IDENT_1 ) , j , 1.0 ) ; } } java . lang . String IDENT_19 = ( IDENT_16 ) ? STRING_0 : STRING_1 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_20 = null ; if ( IDENT_16 ) { IDENT_20 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_15 , IDENT_2 ) ; for ( int i = 0 ; i < IDENT_15 ; i ++ ) { int IDENT_21 = ( IDENT_2 - 1 ) - i ; if ( IDENT_21 == 0 ) { IDENT_21 = IDENT_2 ; } for ( int j = IDENT_21 ; j < IDENT_2 ; j ++ ) { IDENT_20 . METHOD_3 ( i , j , 1.0 ) ; } } } for ( org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_9 m : IDENT_8 ) { java . lang . String name = ( ( ( ( ( ( ( ( STRING_2 + IDENT_15 ) + STRING_3 ) + IDENT_19 ) + STRING_4 ) + m ) + STRING_5 ) + IDENT_17 ) + STRING_6 ) + ( simple ? STRING_7 : STRING_8 ) ; System . out . println ( ( STRING_9 + name ) ) ; org . IDENT_3 . IDENT_4 . conf . IDENT_22 conf = new org . IDENT_3 . IDENT_4 . conf . IDENT_23 . Builder ( ) . METHOD_6 ( new org . nd4j . linalg . IDENT_24 . config . METHOD_7 ( ) ) . METHOD_8 ( IDENT_25 . IDENT_26 ) . list ( ) . METHOD_9 ( new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_27 . Builder ( ) . METHOD_10 ( METHOD_10 ) . METHOD_11 ( 3 ) . build ( ) ) . METHOD_9 ( new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_6 . METHOD_12 ( m , ( simple ? new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_6 . IDENT_28 . Builder ( ) . METHOD_10 ( 3 ) . METHOD_11 ( 3 ) . METHOD_13 ( METHOD_13 ) . build ( ) : new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_27 . Builder ( ) . METHOD_10 ( 3 ) . METHOD_11 ( 3 ) . build ( ) ) ) ) . METHOD_9 ( new org . IDENT_3 . IDENT_4 . conf . IDENT_5 . IDENT_29 . Builder ( ) . METHOD_11 ( METHOD_11 ) . METHOD_14 ( IDENT_30 . IDENT_31 ) . build ( ) ) . build ( ) ; org . IDENT_3 . IDENT_4 . IDENT_32 . IDENT_33 net = new org . IDENT_3 . IDENT_4 . IDENT_32 . METHOD_15 ( conf ) ; net . init ( ) ; boolean IDENT_34 = org . IDENT_3 . IDENT_35 . IDENT_36 . METHOD_16 ( net , org . IDENT_3 . IDENT_35 . IDENT_37 . IDENT_38 , org . IDENT_3 . IDENT_35 . IDENT_37 . IDENT_39 , org . IDENT_3 . IDENT_35 . IDENT_37 . IDENT_40 , org . IDENT_3 . IDENT_35 . IDENT_37 . IDENT_41 , org . IDENT_3 . IDENT_35 . IDENT_37 . IDENT_42 , in , IDENT_18 , IDENT_20 , null ) ; "<AssertPlaceHolder>" ; org . IDENT_3 . TestUtils . METHOD_17 ( net ) ; } } } } } } METHOD_16 ( org . IDENT_3 . IDENT_4 . IDENT_32 . METHOD_15 , double , double , double , boolean , boolean , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray , org . nd4j . linalg . api . ndarray . INDArray ) { return org . IDENT_3 . IDENT_35 . IDENT_36 . METHOD_16 ( IDENT_43 , IDENT_44 , IDENT_45 , IDENT_46 , IDENT_47 , IDENT_48 , input , IDENT_18 , IDENT_16 , IDENT_49 , false , ( - 1 ) ) ; }
org . junit . Assert . assertTrue ( IDENT_34 ) 