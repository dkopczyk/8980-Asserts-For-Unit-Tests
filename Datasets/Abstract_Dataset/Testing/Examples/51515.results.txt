METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_0 ) ; int m = 3 ; int IDENT_0 = 5 ; int IDENT_1 = 6 ; int IDENT_2 = 7 ; org . nd4j . linalg . api . ndarray . INDArray in = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( new int [ ] { m , IDENT_0 , IDENT_2 } ) ; org . IDENT_3 . IDENT_4 . conf . IDENT_5 conf = new org . IDENT_3 . IDENT_4 . conf . IDENT_6 . Builder ( ) . METHOD_4 ( new org . nd4j . linalg . IDENT_7 . config . METHOD_5 ( ) ) . METHOD_6 ( IDENT_8 . IDENT_9 ) . METHOD_7 ( IDENT_10 . IDENT_11 ) . list ( ) . METHOD_8 ( new org . IDENT_3 . IDENT_4 . conf . IDENT_12 . IDENT_13 . IDENT_14 . Builder ( ) . METHOD_9 ( METHOD_9 ) . METHOD_10 ( IDENT_1 ) . build ( ) ) . build ( ) ; org . IDENT_3 . IDENT_4 . IDENT_15 . IDENT_16 net = new org . IDENT_3 . IDENT_4 . IDENT_15 . METHOD_11 ( conf ) ; net . init ( ) ; org . nd4j . linalg . api . ndarray . INDArray out = net . output ( in ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_17 = net . METHOD_12 ( STRING_0 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_18 = net . METHOD_12 ( STRING_1 ) ; org . nd4j . linalg . api . ndarray . INDArray b = net . METHOD_12 ( STRING_2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_19 = null ; for ( int i = 0 ; i < IDENT_2 ; i ++ ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_20 = in . get ( METHOD_13 ( ) , METHOD_13 ( ) , METHOD_14 ( i ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_21 = IDENT_20 . METHOD_15 ( IDENT_17 ) ; if ( IDENT_19 != null ) { IDENT_21 . METHOD_16 ( IDENT_19 . METHOD_15 ( IDENT_18 ) ) ; } IDENT_21 . METHOD_17 ( b ) ; org . nd4j . linalg . IDENT_22 . IDENT_23 . IDENT_24 . METHOD_18 ( IDENT_21 , false ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_25 = out . get ( METHOD_13 ( ) , METHOD_13 ( ) , METHOD_14 ( i ) ) ; "<AssertPlaceHolder>" ; IDENT_19 = IDENT_21 ; } org . IDENT_3 . TestUtils . METHOD_19 ( net ) ; } METHOD_14 ( org . nd4j . linalg . api . ndarray . INDArray ) { java . util . List < org . IDENT_3 . IDENT_26 . IDENT_27 . IDENT_28 . IDENT_29 > ret = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_30 . length ( ) ) ; i ++ ) { double IDENT_31 = IDENT_30 . METHOD_20 ( i ) ; ret . add ( new org . IDENT_3 . IDENT_26 . IDENT_27 . IDENT_28 . METHOD_21 ( IDENT_31 , IDENT_31 ) ) ; } return ret ; }
org . junit . Assert . assertEquals ( java . lang . String . valueOf ( i ) , IDENT_21 , IDENT_25 ) 