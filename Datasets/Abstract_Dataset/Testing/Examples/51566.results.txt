METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 1 , 2 , 3 , 4 } , new double [ ] { 1 , 2 , 3 , 5 } , new double [ ] { 3 , 4 , 5 , 6 } } ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( arr , false ) ; org . IDENT_0 . IDENT_5 . model . IDENT_6 request = new org . IDENT_0 . IDENT_5 . model . METHOD_2 ( ) ; request . METHOD_3 ( 2 ) ; request . METHOD_4 ( 0 ) ; org . IDENT_0 . IDENT_5 . server . IDENT_7 IDENT_8 = org . IDENT_0 . IDENT_5 . server . IDENT_7 . builder ( ) . tree ( IDENT_4 ) . METHOD_5 ( arr ) . record ( request ) . build ( ) ; "<AssertPlaceHolder>" ; } search ( ) { org . nd4j . linalg . api . ndarray . INDArray input = METHOD_5 . METHOD_6 ( record . METHOD_7 ( ) ) ; java . util . List < org . IDENT_0 . IDENT_5 . model . IDENT_9 > results = new java . util . ArrayList ( ) ; if ( input . METHOD_8 ( ) ) { java . util . List < org . IDENT_0 . IDENT_1 . IDENT_10 . IDENT_11 > add = new java . util . ArrayList ( ) ; java . util . List < java . lang . Double > IDENT_12 = new java . util . ArrayList ( ) ; tree . search ( input , record . METHOD_9 ( ) , add , IDENT_12 ) ; if ( ( add . size ( ) ) != ( IDENT_12 . size ( ) ) ) { throw new java . lang . IllegalStateException ( java . lang . String . format ( STRING_0 , add . size ( ) , IDENT_12 . size ( ) ) ) ; } for ( int i = 0 ; i < ( add . size ( ) ) ; i ++ ) { results . add ( new org . IDENT_0 . IDENT_5 . model . METHOD_10 ( add . get ( i ) . METHOD_11 ( ) , IDENT_12 . get ( i ) ) ) ; } } return results ; }
org . junit . Assert . assertEquals ( 1 , IDENT_8 . search ( ) . get ( 0 ) . METHOD_11 ( ) ) 