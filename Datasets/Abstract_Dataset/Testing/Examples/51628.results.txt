METHOD_0 ( ) { org . IDENT_0 . spark . impl . common . IDENT_1 . IDENT_2 IDENT_3 = new org . IDENT_0 . spark . impl . common . IDENT_1 . METHOD_1 ( 10 , 10 , 0 ) ; int [ ] IDENT_4 = new int [ 10 ] ; for ( int i = 0 ; i < ( 10 * 10 ) ; i ++ ) { int p = IDENT_3 . METHOD_2 ( i ) ; IDENT_4 [ p ] += 1 ; } for ( int i = 0 ; i < 10 ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( java . lang . Object ) { METHOD_3 ( ( key instanceof IDENT_5 . IDENT_6 ) , STRING_0 ) ; IDENT_5 . IDENT_6 < java . lang . Long , java . lang . Integer > IDENT_7 = ( ( IDENT_5 . IDENT_6 < java . lang . Long , java . lang . Integer > ) ( key ) ) ; java . lang . Long IDENT_8 = IDENT_7 . METHOD_4 ( ) ; java . lang . Integer IDENT_9 = ( ( int ) ( IDENT_8 OP_0 ( IDENT_10 ) ) ) ; java . lang . Integer IDENT_11 = IDENT_7 . METHOD_5 ( ) ; java . lang . Double IDENT_12 = java . lang . Math . max ( ( 1.0 - ( 1.0 / ( IDENT_13 . get ( IDENT_11 ) . get ( IDENT_9 ) ) ) ) , 0.0 ) ; org . IDENT_0 . spark . impl . common . IDENT_1 . IDENT_14 . IDENT_15 IDENT_16 = new org . IDENT_0 . spark . impl . common . IDENT_1 . IDENT_14 . METHOD_6 ( IDENT_8 ) ; java . lang . Double IDENT_17 = IDENT_16 . METHOD_7 ( ) ; java . lang . Integer IDENT_18 = IDENT_9 ; if ( IDENT_17 < IDENT_12 ) { java . util . List < java . lang . Double > IDENT_19 = IDENT_20 . get ( IDENT_11 ) ; java . lang . Double IDENT_21 = IDENT_16 . METHOD_7 ( ) ; java . lang . Integer IDENT_22 = 0 ; while ( ( IDENT_19 . get ( IDENT_22 ) ) < IDENT_21 ) { IDENT_22 ++ ; } IDENT_18 = IDENT_22 ; } return IDENT_18 ; }
org . junit . Assert . assertEquals ( IDENT_4 [ i ] , 10 ) 