METHOD_0 ( ) { org . nd4j . IDENT_0 . METHOD_1 ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_2 ( ) . METHOD_3 ( INT_0 ) ; int [ ] [ ] IDENT_1 = new int [ ] [ ] { new int [ ] { 1 , 3 , 8 , 8 } , new int [ ] { 3 , 6 , 12 , 12 } } ; java . util . List < java . lang . String > IDENT_2 = new java . util . ArrayList ( ) ; for ( int [ ] IDENT_3 : IDENT_1 ) { org . nd4j . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = org . nd4j . IDENT_4 . IDENT_5 . IDENT_6 . create ( ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 in = null ; int [ ] IDENT_9 ; java . lang . String msg = STRING_0 + ( java . util . Arrays . toString ( IDENT_3 ) ) ; IDENT_9 = IDENT_3 ; in = IDENT_7 . METHOD_4 ( STRING_1 , IDENT_9 ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 out = IDENT_7 . METHOD_5 ( ) . METHOD_6 ( in , org . nd4j . IDENT_4 . IDENT_10 . IDENT_11 . builder ( ) . METHOD_7 ( 3 ) . METHOD_8 ( 1 ) . METHOD_9 ( 1 ) . METHOD_10 ( FLOAT_0 ) . build ( ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_12 = org . nd4j . linalg . factory . Nd4j . METHOD_11 ( IDENT_9 ) . METHOD_12 ( 10 ) ; in . METHOD_13 ( IDENT_12 ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 IDENT_13 = IDENT_7 . METHOD_14 ( STRING_2 , out , true ) ; log . info ( ( STRING_3 + msg ) ) ; org . nd4j . IDENT_4 . validation . IDENT_14 tc = new org . nd4j . IDENT_4 . validation . METHOD_15 ( IDENT_7 ) ; java . lang . String error = org . nd4j . IDENT_4 . validation . IDENT_15 . validate ( tc ) ; if ( error != null ) { IDENT_2 . add ( msg ) ; } } "<AssertPlaceHolder>" ; } toString ( ) { java . lang . StringBuilder IDENT_16 = new java . lang . StringBuilder ( STRING_4 ) ; int IDENT_17 = IDENT_18 . size ( ) ; int i ; for ( i = 0 ; i < IDENT_17 ; i ++ ) { java . lang . Object e = IDENT_18 . get ( i ) ; IDENT_16 . append ( e ) ; if ( i < ( IDENT_17 - 1 ) ) IDENT_16 . append ( STRING_5 ) ; } IDENT_16 . append ( "]" ) ; return IDENT_16 . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_2 . toString ( ) , 0 , IDENT_2 . size ( ) ) 