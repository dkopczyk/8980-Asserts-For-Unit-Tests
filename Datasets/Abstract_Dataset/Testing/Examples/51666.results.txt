METHOD_0 ( ) { org . nd4j . linalg . api . buffer . IDENT_0 IDENT_1 = org . nd4j . linalg . api . buffer . IDENT_0 . IDENT_2 ; for ( boolean IDENT_3 : new boolean [ ] { true , false } ) { org . nd4j . IDENT_4 . IDENT_5 . IDENT_6 IDENT_7 = org . nd4j . IDENT_4 . IDENT_5 . IDENT_6 . create ( ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 IDENT_9 = IDENT_7 . METHOD_1 ( STRING_0 , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 4 } ) . METHOD_2 ( IDENT_1 ) ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 IDENT_10 = IDENT_7 . METHOD_1 ( STRING_1 , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 2 , 2 , 4 } ) . METHOD_2 ( IDENT_1 ) ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 0 , 0 , 0 , 0 , 0 } , new double [ ] { 0 , 0 , 1 , 0 , 0 } , new double [ ] { 0 , 0 , 1 , 0 , 0 } , new double [ ] { 0 , 0 , 0 , 0 , 0 } , new double [ ] { 0 , 0 , 0 , 0 , 1 } } ) . METHOD_2 ( IDENT_0 . IDENT_11 ) ; org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 IDENT_12 ; if ( IDENT_3 ) { IDENT_12 = IDENT_7 . math ( ) . METHOD_3 ( IDENT_9 , IDENT_10 , 5 ) . METHOD_2 ( IDENT_0 . IDENT_11 ) ; } else { IDENT_12 = IDENT_7 . math ( ) . METHOD_3 ( STRING_2 , IDENT_9 , IDENT_10 , IDENT_0 . IDENT_11 ) ; } org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 IDENT_13 = IDENT_12 . METHOD_2 ( IDENT_0 . IDENT_2 ) . METHOD_4 ( true ) ; java . lang . String err = org . nd4j . IDENT_4 . validation . IDENT_14 . validate ( new org . nd4j . IDENT_4 . validation . METHOD_5 ( IDENT_7 ) . METHOD_6 ( false ) . expected ( IDENT_12 , exp ) ) ; "<AssertPlaceHolder>" ; } } expected ( org . nd4j . IDENT_4 . IDENT_5 . IDENT_8 , org . nd4j . linalg . api . ndarray . INDArray ) { return expected ( METHOD_1 . METHOD_7 ( ) , output ) ; }
org . junit . Assert . assertNull ( err ) 