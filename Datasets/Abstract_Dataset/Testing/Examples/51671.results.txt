METHOD_0 ( ) { for ( boolean IDENT_0 : new boolean [ ] { false , true } ) { long [ ] IDENT_1 = ( IDENT_0 ) ? new long [ ] { 1 , 4 } : new long [ ] { 4 } ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 12 , 12 ) . METHOD_2 ( 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 4 } , IDENT_1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( IDENT_2 . METHOD_4 ( ) ) ; for ( int i = 0 ; i < 3 ; i ++ ) { IDENT_4 . METHOD_5 ( i , IDENT_3 ) ; } org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 3 , 4 ) ; java . lang . String err = org . nd4j . IDENT_6 . validation . IDENT_7 . validate ( new org . nd4j . IDENT_6 . validation . METHOD_6 ( new org . nd4j . IDENT_6 . IDENT_8 . METHOD_7 ( IDENT_2 , IDENT_3 , IDENT_5 , IDENT_0 , 0 ) ) . METHOD_8 ( 0 , IDENT_4 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_8 ( int , org . nd4j . linalg . api . ndarray . INDArray ) { IDENT_9 . put ( IDENT_10 , new org . nd4j . IDENT_6 . validation . IDENT_11 . METHOD_9 ( expected ) ) ; IDENT_12 . put ( IDENT_10 , expected . METHOD_10 ( ) ) ; return this ; }
org . junit . Assert . assertNull ( err ) 