METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_1 . IDENT_2 , 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_1 . IDENT_2 , 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_1 . IDENT_2 , 3 , 4 ) ; IDENT_4 . METHOD_3 ( 1 ) . METHOD_4 ( 1.0 ) ; org . nd4j . linalg . api . ndarray . INDArray [ ] in = new org . nd4j . linalg . api . ndarray . INDArray [ ] { IDENT_0 , IDENT_3 , IDENT_4 } ; boolean [ ] IDENT_5 = new boolean [ ] { false , true , false } ; boolean [ ] IDENT_6 = new boolean [ ] { false , true , true } ; for ( int i = 0 ; i < 3 ; i ++ ) { org . nd4j . IDENT_7 . IDENT_8 . IDENT_9 IDENT_10 = org . nd4j . IDENT_7 . IDENT_8 . IDENT_9 . create ( ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_11 s = IDENT_10 . METHOD_5 ( STRING_0 , in [ i ] ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_11 IDENT_12 = IDENT_10 . f ( ) . METHOD_6 ( s ) ; org . nd4j . IDENT_7 . IDENT_8 . IDENT_11 any = IDENT_10 . f ( ) . any ( s ) ; java . lang . String err = org . nd4j . IDENT_7 . validation . IDENT_13 . validate ( new org . nd4j . IDENT_7 . validation . METHOD_7 ( IDENT_10 ) . METHOD_8 ( false ) . expected ( METHOD_6 , org . nd4j . linalg . factory . Nd4j . create ( new boolean [ ] { IDENT_5 [ i ] } ) ) . expected ( any , org . nd4j . linalg . factory . Nd4j . create ( new boolean [ ] { IDENT_6 [ i ] } ) ) ) ; "<AssertPlaceHolder>" ; } } create ( org . nd4j . linalg . api . IDENT_14 . IDENT_15 ) { return org . nd4j . linalg . factory . Nd4j . create ( IDENT_16 , true ) ; }
org . junit . Assert . assertNull ( err ) 