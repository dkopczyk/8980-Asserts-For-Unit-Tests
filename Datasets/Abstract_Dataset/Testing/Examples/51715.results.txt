METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . IDENT_5 . IDENT_6 . IDENT_7 . METHOD_1 ( org . nd4j . linalg . factory . Nd4j . METHOD_2 ( IDENT_8 . IDENT_9 , 1 , INT_0 , INT_0 ) ) . METHOD_3 ( 2 , 3 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_10 = org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 , 2 , 3 , 0 , 1 , 3 , 1 , 0 , 2 } , new long [ ] { 3 , 3 } ) . METHOD_4 ( IDENT_8 . IDENT_11 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 x = IDENT_3 . METHOD_5 ( STRING_0 , IDENT_4 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 IDENT_13 = IDENT_3 . METHOD_6 ( STRING_1 , IDENT_10 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 result = IDENT_3 . METHOD_7 ( x , IDENT_13 ) ; org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( 1 , 3 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_14 = IDENT_10 . get ( METHOD_9 ( i ) , org . nd4j . linalg . indexing . IDENT_15 . METHOD_10 ( ) ) ; expected . get ( org . nd4j . linalg . indexing . IDENT_15 . METHOD_9 ( 0 ) , METHOD_9 ( i ) ) . METHOD_11 ( IDENT_4 . get ( METHOD_9 ( IDENT_14 . METHOD_12 ( 0 ) ) , METHOD_9 ( IDENT_14 . METHOD_12 ( 1 ) ) , METHOD_9 ( IDENT_14 . METHOD_12 ( 2 ) ) ) ) ; } "<AssertPlaceHolder>" ; } METHOD_13 ( ) { IDENT_3 . exec ( null , METHOD_14 ( ) ) ; return METHOD_15 ( ) ; }
org . junit . Assert . assertEquals ( expected , result . METHOD_13 ( ) ) 