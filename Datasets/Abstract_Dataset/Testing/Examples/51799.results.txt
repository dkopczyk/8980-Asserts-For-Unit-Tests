METHOD_0 ( ) { org . nd4j . IDENT_0 . Map < java . lang . Integer , java . lang . String > m = new org . nd4j . IDENT_0 . HashMap ( ) ; m . put ( 0 , STRING_0 ) ; m . put ( 1 , STRING_1 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . nd4j . IDENT_0 . IDENT_1 . METHOD_1 ( m ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 0 } ) . METHOD_2 ( 1 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 1 } ) . METHOD_2 ( 1 , 2 ) ; IDENT_3 . METHOD_3 ( IDENT_4 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_4 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; java . lang . String IDENT_6 = IDENT_3 . METHOD_4 ( ) ; System . out . println ( IDENT_6 ) ; IDENT_3 . METHOD_5 ( ) ; IDENT_3 . METHOD_3 ( IDENT_4 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_4 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_4 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; IDENT_3 . METHOD_3 ( IDENT_5 , IDENT_5 ) ; java . lang . String IDENT_7 = IDENT_3 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( ! ( IDENT_8 ) ) { return STRING_2 ; } else { if ( ( IDENT_9 ) == null ) IDENT_9 = org . nd4j . IDENT_0 . IDENT_10 . IDENT_11 . METHOD_6 ( METHOD_7 ( ) ) ; int IDENT_12 = 0 ; for ( java . lang . String s : IDENT_9 ) IDENT_12 = java . lang . Math . max ( IDENT_12 , s . length ( ) ) ; int IDENT_13 = IDENT_12 + 5 ; long IDENT_14 = ( IDENT_15 ) + 10 ; java . lang . String IDENT_16 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_3 + IDENT_13 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ) + STRING_3 ) + IDENT_14 ) + STRING_4 ) + ( IDENT_15 ) ) + STRING_5 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; java . lang . String IDENT_17 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_3 + IDENT_13 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ) + STRING_3 ) + IDENT_14 ) + STRING_4 1 ; sb . append ( java . lang . String . format ( IDENT_17 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_10 , STRING_11 , STRING_4 2 ) ) ; sb . append ( STRING_4 0 ) ; for ( int i = 0 ; i < ( IDENT_9 . size ( ) ) ; i ++ ) { java . lang . String name = IDENT_9 . get ( i ) ; double IDENT_18 = METHOD_8 ( i ) ; double IDENT_19 = METHOD_9 ( i ) ; double IDENT_20 = METHOD_10 ( i ) ; double IDENT_21 = METHOD_11 ( i ) ; double IDENT_22 = METHOD_12 ( i ) ; double IDENT_23 = METHOD_13 ( i ) ; sb . append ( java . lang . String . format ( IDENT_16 , name , IDENT_18 , IDENT_19 , IDENT_20 , IDENT_21 , IDENT_22 , IDENT_23 ) ) ; sb . append ( STRING_4 0 ) ; } return sb . toString ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_7 ) 