METHOD_0 ( ) { int IDENT_0 = 4 ; int [ ] IDENT_1 = new int [ ] { INT_0 , IDENT_0 } ; int [ ] IDENT_2 = new int [ ] { 50 , IDENT_0 } ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( INT_1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( new org . nd4j . linalg . api . IDENT_4 . random . impl . METHOD_4 ( org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_1 ) , FLOAT_0 ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( new org . nd4j . linalg . api . IDENT_4 . random . impl . METHOD_4 ( org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_2 ) , FLOAT_0 ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_1 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_7 = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_2 ) ; org . nd4j . IDENT_8 . IDENT_9 . IDENT_10 IDENT_11 = new org . nd4j . IDENT_8 . IDENT_9 . METHOD_7 ( ) ; IDENT_11 . METHOD_8 ( IDENT_3 , IDENT_6 ) ; IDENT_11 . METHOD_8 ( IDENT_5 , IDENT_7 ) ; org . nd4j . IDENT_8 . IDENT_9 . METHOD_7 IDENT_12 = new org . nd4j . IDENT_8 . IDENT_9 . METHOD_7 ( ) ; IDENT_12 . METHOD_8 ( IDENT_3 , IDENT_6 ) ; org . nd4j . IDENT_8 . IDENT_9 . METHOD_7 IDENT_13 = new org . nd4j . IDENT_8 . IDENT_9 . METHOD_7 ( ) ; IDENT_13 . METHOD_8 ( IDENT_5 , IDENT_7 ) ; IDENT_12 . METHOD_9 ( IDENT_13 ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ) { if ( ! ( IDENT_14 ) ) { return STRING_0 ; } else { if ( ( IDENT_15 ) == null ) IDENT_15 = org . nd4j . IDENT_8 . IDENT_16 . IDENT_17 . METHOD_11 ( METHOD_12 ( ) ) ; int IDENT_18 = 0 ; for ( java . lang . String s : IDENT_15 ) IDENT_18 = java . lang . Math . max ( IDENT_18 , s . length ( ) ) ; int IDENT_19 = IDENT_18 + 5 ; long IDENT_20 = ( IDENT_21 ) + 10 ; java . lang . String IDENT_22 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + IDENT_19 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ) + STRING_1 ) + IDENT_20 ) + STRING_2 ) + ( IDENT_21 ) ) + STRING_3 ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; java . lang . String IDENT_23 = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( STRING_1 + IDENT_19 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ) + STRING_1 ) + IDENT_20 ) + STRING_2 1 ; sb . append ( java . lang . String . format ( IDENT_23 , STRING_4 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 , STRING_2 2 ) ) ; sb . append ( STRING_2 0 ) ; for ( int i = 0 ; i < ( IDENT_15 . size ( ) ) ; i ++ ) { java . lang . String name = IDENT_15 . get ( i ) ; double IDENT_24 = METHOD_13 ( i ) ; double IDENT_25 = METHOD_14 ( i ) ; double IDENT_26 = METHOD_15 ( i ) ; double IDENT_27 = METHOD_16 ( i ) ; double IDENT_28 = METHOD_17 ( i ) ; double IDENT_29 = METHOD_18 ( i ) ; sb . append ( java . lang . String . format ( IDENT_22 , name , IDENT_24 , IDENT_25 , IDENT_26 , IDENT_27 , IDENT_28 , IDENT_29 ) ) ; sb . append ( STRING_2 0 ) ; } return sb . toString ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_11 . METHOD_10 ( ) , IDENT_12 . METHOD_10 ( ) ) 