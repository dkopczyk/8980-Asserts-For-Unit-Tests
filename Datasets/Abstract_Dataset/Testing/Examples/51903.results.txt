METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1.0 , 2.0 , FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , - 1.0 , - 2.0 , - FLOAT_0 , - FLOAT_1 , - FLOAT_2 , - FLOAT_3 , - FLOAT_4 , - FLOAT_5 } ) . METHOD_1 ( 2 , 8 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1.0 , 2.0 , FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 } ) ; org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , - 2 , - 4 , - 6 , - 8 , - 10 , - 12 , - INT_0 , - 16 } , new long [ ] { 2 , 8 } ) ; org . nd4j . linalg . api . ndarray . INDArray actual = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( ) . exec ( new org . nd4j . linalg . METHOD_3 ( IDENT_0 , IDENT_1 , IDENT_0 . METHOD_4 ( ) , ( - 1 ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { return IDENT_2 . METHOD_5 ( this ) ; }
org . junit . Assert . assertEquals ( expected , actual ) 