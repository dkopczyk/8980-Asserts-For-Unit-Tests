METHOD_0 ( ) { IDENT_0 . val x = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_1 . IDENT_2 , 3 , 4 , 5 ) ; IDENT_0 . val y = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( IDENT_1 . IDENT_2 , 3 , 4 , 5 ) ; IDENT_0 . val IDENT_3 = new org . nd4j . linalg . METHOD_2 ( x , y , 0 ) ; IDENT_0 . val op = ( ( org . nd4j . linalg . api . IDENT_4 . IDENT_5 ) ( IDENT_3 ) ) ; IDENT_0 . val IDENT_6 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( IDENT_3 ) ; IDENT_0 . val IDENT_7 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . exec ( op ) ; "<AssertPlaceHolder>" ; } exec ( java . lang . String ) { code = org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_4 ( ( STRING_0 + ( java . lang . Thread . METHOD_5 ( ) . getId ( ) ) ) , code ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_6 ( ) ; log . info ( STRING_1 ) ; log . info ( code ) ; int result = METHOD_7 ( code , null ) ; if ( result != 0 ) { METHOD_8 ( ) ; throw new java . lang . RuntimeException ( STRING_2 ) ; } log . info ( STRING_3 ) ; org . IDENT_8 . IDENT_9 . IDENT_10 . METHOD_9 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_7 ) 