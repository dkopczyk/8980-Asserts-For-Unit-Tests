METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . create ( new boolean [ ] [ ] { new boolean [ ] { false , true , false } , new boolean [ ] { false , false , true } , new boolean [ ] { false , false , true } } ) ; org . nd4j . linalg . api . ndarray . INDArray [ ] exp = new org . nd4j . linalg . api . ndarray . INDArray [ ] { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new long [ ] { 0 , 1 , 2 } ) , org . nd4j . linalg . factory . Nd4j . METHOD_1 ( new long [ ] { 1 , 2 , 2 } ) } ; org . nd4j . linalg . api . ndarray . INDArray [ ] IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( arr , null , null ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . nd4j . linalg . factory . INDArray , org . nd4j . linalg . factory . INDArray , org . nd4j . linalg . factory . INDArray ) { org . nd4j . base . IDENT_1 . METHOD_3 ( ( ( ( x == null ) && ( y == null ) ) || ( ( x != null ) && ( y != null ) ) ) , ( STRING_0 + STRING_1 ) ) ; org . nd4j . linalg . factory . INDArray out ; org . nd4j . linalg . api . IDENT_2 . IDENT_3 . IDENT_4 op = org . nd4j . linalg . api . IDENT_2 . IDENT_3 . builder ( STRING_2 ) ; org . nd4j . linalg . factory . List < org . nd4j . linalg . api . IDENT_5 . IDENT_6 > IDENT_7 ; if ( x == null ) { op . METHOD_4 ( condition ) ; } else { if ( ( ! ( x . METHOD_5 ( y ) ) ) || ( ! ( x . METHOD_5 ( condition ) ) ) ) { org . nd4j . base . IDENT_1 . METHOD_6 ( STRING_3 , condition . METHOD_7 ( ) , x . METHOD_7 ( ) , y . METHOD_7 ( ) ) ; } op . METHOD_4 ( condition , x , y ) ; } org . nd4j . linalg . api . IDENT_2 . IDENT_3 o = op . build ( ) ; IDENT_7 = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( ) . METHOD_9 ( o ) ; org . nd4j . linalg . factory . INDArray [ ] IDENT_8 = new org . nd4j . linalg . factory . INDArray [ IDENT_7 . size ( ) ] ; if ( ( x == null ) && ( ( ( ( IDENT_7 . get ( 0 ) ) == null ) || ( ( IDENT_7 . get ( 0 ) . METHOD_10 ( ) . length ) == 0 ) ) || ( ( IDENT_7 . get ( 0 ) . METHOD_10 ( ) [ 0 ] ) == 0 ) ) ) { for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) { IDENT_8 [ i ] = org . nd4j . linalg . factory . Nd4j . empty ( ) ; } return IDENT_8 ; } for ( int i = 0 ; i < ( IDENT_8 . length ) ; i ++ ) { IDENT_8 [ i ] = org . nd4j . linalg . factory . Nd4j . create ( IDENT_7 . get ( i ) , false ) ; } op . METHOD_11 ( IDENT_8 ) ; org . nd4j . linalg . factory . Nd4j . METHOD_8 ( ) . METHOD_12 ( op . build ( ) ) ; return IDENT_8 ; }
org . junit . Assert . assertArrayEquals ( exp , IDENT_0 ) 