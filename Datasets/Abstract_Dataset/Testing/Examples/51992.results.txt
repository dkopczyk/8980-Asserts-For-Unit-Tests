METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray x = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 16 , 16 , IDENT_0 . IDENT_1 ) . METHOD_2 ( STRING_0 , 2 , 2 , 2 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 0 } , new double [ ] { 1 } } ) ; x . put ( IDENT_2 , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 5 , 5 } ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( new long [ ] { 2 , 2 , 2 , 2 } , 5 , IDENT_0 . IDENT_1 ) ; "<AssertPlaceHolder>" ; } create ( int [ ] , float [ ] [ ] ) { int IDENT_4 = IDENT_5 . length ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . create ( org . nd4j . linalg . util . IDENT_6 . METHOD_4 ( new int [ ] { IDENT_4 } , IDENT_7 ) ) ; for ( int i = 0 ; i < ( ret . METHOD_5 ( ) ) ; i ++ ) ret . METHOD_6 ( i , org . nd4j . linalg . factory . Nd4j . create ( IDENT_5 [ i ] ) . METHOD_2 ( org . nd4j . linalg . util . IDENT_6 . METHOD_7 ( IDENT_7 ) ) ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_3 , x ) 