METHOD_0 ( ) { java . util . List < java . util . List < java . lang . Integer > > IDENT_0 = new java . util . ArrayList ( ) ; IDENT_0 . add ( java . util . Arrays . asList ( 0 ) ) ; IDENT_0 . add ( java . util . Arrays . asList ( 0 , 1 ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 16 , 16 , IDENT_2 . IDENT_3 ) . METHOD_2 ( STRING_0 , 2 , 2 , 2 , 2 ) ; METHOD_1 . put ( IDENT_0 , org . nd4j . linalg . factory . Nd4j . METHOD_3 ( INT_0 ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . METHOD_4 ( new long [ ] { 2 , 2 } , FLOAT_0 , IDENT_2 . IDENT_3 ) ; for ( int i = 0 ; i < 2 ; i ++ ) "<AssertPlaceHolder>" ; } METHOD_5 ( long ) { org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . METHOD_7 ( this ) ; long IDENT_5 = METHOD_8 ( ) ; if ( METHOD_5 >= METHOD_8 ) throw new java . lang . IllegalArgumentException ( ( STRING_1 + METHOD_5 ) ) ; if ( ( IDENT_6 . IDENT_7 ) == 0 ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } if ( METHOD_5 < 0 ) METHOD_5 += METHOD_9 ( ) ; org . nd4j . linalg . api . ndarray . IDENT_8 [ ] IDENT_9 = new org . nd4j . linalg . api . ndarray . IDENT_8 [ METHOD_9 ( ) ] ; IDENT_9 [ 0 ] = org . nd4j . linalg . api . ndarray . IDENT_10 . METHOD_10 ( METHOD_5 ) ; for ( int i = 1 ; i < ( METHOD_9 ( ) ) ; i ++ ) { IDENT_9 [ i ] = org . nd4j . linalg . api . ndarray . IDENT_10 . METHOD_11 ( ) ; } return get ( IDENT_9 ) ; }
org . junit . Assert . assertEquals ( IDENT_4 , METHOD_1 . METHOD_5 ( 0 ) . METHOD_5 ( i ) ) 