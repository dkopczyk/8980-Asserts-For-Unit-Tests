METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray a = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 9 , 9 , IDENT_0 . IDENT_1 ) . METHOD_2 ( 3 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray b = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 5 , 5 , IDENT_0 . IDENT_1 ) . METHOD_2 ( 1 , ( - 1 ) ) ; System . out . println ( b ) ; org . nd4j . linalg . api . ndarray . INDArray view = a . get ( METHOD_3 ( ) , org . nd4j . linalg . indexing . IDENT_2 . METHOD_4 ( 0 , 1 ) ) ; org . nd4j . linalg . api . ndarray . INDArray c = view . METHOD_5 ( b ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = a . get ( METHOD_3 ( ) , org . nd4j . linalg . indexing . IDENT_2 . METHOD_4 ( 0 , 1 ) ) . METHOD_6 ( ) . METHOD_5 ( b ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . nd4j . linalg . api . ndarray . INDArray ) { long [ ] IDENT_4 = new long [ ] { METHOD_7 ( ) , other . METHOD_8 ( ) } ; org . nd4j . linalg . api . ndarray . INDArray result = METHOD_9 ( IDENT_4 , STRING_0 ) ; if ( result . METHOD_10 ( ) ) return org . nd4j . linalg . factory . Nd4j . METHOD_11 ( org . nd4j . linalg . factory . Nd4j . METHOD_12 ( ) . METHOD_13 ( this , other ) ) ; return METHOD_14 ( other , result ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , c ) 