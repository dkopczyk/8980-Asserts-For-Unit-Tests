METHOD_0 ( ) { org . nd4j . linalg . dataset . IDENT_0 original = new org . nd4j . linalg . dataset . METHOD_1 ( ) ; original . METHOD_2 ( java . util . Arrays . asList ( new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 } ) . METHOD_4 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_2 , FLOAT_3 } ) . METHOD_4 ( 1 , ( - 1 ) ) ) , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_4 , FLOAT_5 , FLOAT_6 } ) . METHOD_4 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_7 , FLOAT_8 , FLOAT_9 } ) . METHOD_4 ( 1 , ( - 1 ) ) ) ) ) ; original . METHOD_5 ( java . util . Arrays . asList ( new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 } ) . METHOD_4 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_2 , FLOAT_3 } ) . METHOD_4 ( 1 , ( - 1 ) ) ) , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_4 } ) . METHOD_4 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_7 } ) . METHOD_4 ( 1 , ( - 1 ) ) ) , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_4 , FLOAT_5 , FLOAT_6 } ) . METHOD_4 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_7 , FLOAT_8 , FLOAT_9 } ) . METHOD_4 ( 1 , ( - 1 ) ) ) ) ) ; original . METHOD_6 ( true ) ; IDENT_3 . write ( original , IDENT_4 ) ; org . nd4j . linalg . dataset . METHOD_1 IDENT_5 = IDENT_3 . METHOD_7 ( IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( org . nd4j . linalg . dataset . api . IDENT_1 . serializer . InputStream ) { org . nd4j . linalg . dataset . api . IDENT_1 . serializer . IDENT_6 IDENT_7 = new org . nd4j . linalg . dataset . api . IDENT_1 . serializer . METHOD_8 ( stream ) ; boolean IDENT_8 = IDENT_7 . METHOD_9 ( ) ; double IDENT_9 = IDENT_7 . METHOD_10 ( ) ; double IDENT_10 = IDENT_7 . METHOD_10 ( ) ; org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_11 result = new org . nd4j . linalg . dataset . api . IDENT_1 . METHOD_11 ( IDENT_9 , IDENT_10 ) ; result . METHOD_6 ( IDENT_8 ) ; result . METHOD_2 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_7 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_7 ) ) ; if ( IDENT_8 ) { result . METHOD_5 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_7 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_7 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( original , IDENT_5 ) 