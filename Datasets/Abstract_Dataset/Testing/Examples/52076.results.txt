METHOD_0 ( ) { org . nd4j . linalg . dataset . IDENT_0 original = new org . nd4j . linalg . dataset . METHOD_1 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; java . util . Map < java . lang . Integer , org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = new java . util . HashMap ( ) ; IDENT_4 . put ( 0 , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_4 ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 , 2 } ) . METHOD_5 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 3 , 4 } ) . METHOD_5 ( 1 , ( - 1 ) ) ) ) ; IDENT_4 . put ( 0 , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_4 ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 5 , 6 } ) . METHOD_5 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 7 , 8 } ) . METHOD_5 ( 1 , ( - 1 ) ) ) ) ; java . util . Map < java . lang . Integer , org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_5 = new java . util . HashMap ( ) ; IDENT_5 . put ( 0 , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_6 ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 9 , 10 } ) . METHOD_5 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { INT_0 , 12 } ) . METHOD_5 ( 1 , ( - 1 ) ) ) ) ; IDENT_5 . put ( 0 , new org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_2 . METHOD_6 ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { INT_1 , INT_2 } ) . METHOD_5 ( 1 , ( - 1 ) ) , org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 15 , 16 } ) . METHOD_5 ( 1 , ( - 1 ) ) ) ) ; original . METHOD_7 ( IDENT_4 ) ; original . METHOD_8 ( IDENT_5 ) ; IDENT_6 . write ( original , IDENT_7 ) ; org . nd4j . linalg . dataset . METHOD_1 IDENT_8 = IDENT_6 . METHOD_9 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_9 ( org . nd4j . linalg . dataset . api . IDENT_1 . serializer . InputStream ) { org . nd4j . linalg . dataset . api . IDENT_1 . serializer . IDENT_9 IDENT_10 = new org . nd4j . linalg . dataset . api . IDENT_1 . serializer . METHOD_10 ( stream ) ; boolean IDENT_11 = IDENT_10 . METHOD_11 ( ) ; double IDENT_12 = IDENT_10 . METHOD_12 ( ) ; double IDENT_13 = IDENT_10 . METHOD_12 ( ) ; org . nd4j . linalg . dataset . api . IDENT_1 . IDENT_14 result = new org . nd4j . linalg . dataset . api . IDENT_1 . METHOD_13 ( IDENT_12 , IDENT_13 ) ; result . METHOD_14 ( IDENT_11 ) ; result . METHOD_15 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_10 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_10 ) ) ; if ( IDENT_11 ) { result . METHOD_16 ( org . nd4j . linalg . factory . Nd4j . read ( IDENT_10 ) , org . nd4j . linalg . factory . Nd4j . read ( IDENT_10 ) ) ; } return result ; }
org . junit . Assert . assertEquals ( original , IDENT_8 ) 