METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( IDENT_0 . IDENT_1 . IDENT_2 ) ; org . nd4j . IDENT_3 . IDENT_4 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( true ) ; org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( 1 , 4 , 4 , org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) ) . METHOD_7 ( 2 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . indexing . IDENT_6 . METHOD_8 ( new org . nd4j . linalg . api . ndarray . INDArray [ ] { arr } , java . util . Arrays . asList ( FLOAT_0 ) , java . util . Collections . emptyList ( ) , new org . nd4j . linalg . indexing . IDENT_7 . METHOD_9 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( org . nd4j . linalg . api . ndarray . INDArray [ ] , java . util . List , java . util . List , org . nd4j . linalg . indexing . IDENT_7 . IDENT_8 ) { org . nd4j . linalg . api . IDENT_9 . impl . IDENT_10 . IDENT_11 . IDENT_12 IDENT_13 = new org . nd4j . linalg . api . IDENT_9 . impl . IDENT_10 . IDENT_11 . METHOD_10 ( input , IDENT_14 , IDENT_15 , condition ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_11 ( IDENT_13 ) ; int IDENT_16 = IDENT_13 . METHOD_12 ( 1 ) . METHOD_13 ( 0 ) ; if ( IDENT_16 < 1 ) { return null ; } org . nd4j . linalg . api . ndarray . INDArray ret = IDENT_13 . METHOD_12 ( 0 ) . get ( org . nd4j . linalg . indexing . IDENT_17 . METHOD_14 ( 0 , IDENT_16 ) ) ; ret = ret . METHOD_7 ( ret . length ( ) ) ; return ret ; }
org . junit . Assert . assertNull ( IDENT_5 ) 