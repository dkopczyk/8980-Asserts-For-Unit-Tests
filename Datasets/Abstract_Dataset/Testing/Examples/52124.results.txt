METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray a = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } , new int [ ] { 3 , 3 } , STRING_0 ) . METHOD_1 ( STRING_1 ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 , FLOAT_5 , FLOAT_6 , FLOAT_7 , 0.0 } , new int [ ] { 3 , 3 } , STRING_0 ) . METHOD_1 ( STRING_1 ) ; org . nd4j . linalg . api . ndarray . INDArray r = org . nd4j . linalg . factory . Nd4j . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( a ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . nd4j . linalg . api . ndarray . INDArray ) { if ( ( ( IDENT_0 . METHOD_5 ( ) ) > ( Integer . MAX_VALUE ) ) || ( ( IDENT_0 . METHOD_6 ( ) ) > ( Integer . MAX_VALUE ) ) ) throw new org . nd4j . linalg . exception . METHOD_7 ( ) ; int m = ( ( int ) ( IDENT_0 . METHOD_5 ( ) ) ) ; int n = ( ( int ) ( IDENT_0 . METHOD_6 ( ) ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ) . METHOD_10 ( 1 ) , org . nd4j . linalg . factory . Nd4j . METHOD_11 ( ) . METHOD_12 ( new long [ ] { 1 , 1 } , IDENT_0 . METHOD_13 ( ) ) . METHOD_14 ( ) ) ; int IDENT_2 = java . lang . Math . min ( m , n ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_8 ( org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ) . METHOD_10 ( IDENT_2 ) , org . nd4j . linalg . factory . Nd4j . METHOD_11 ( ) . METHOD_12 ( new long [ ] { 1 , IDENT_2 } , IDENT_0 . METHOD_13 ( ) ) . METHOD_14 ( ) ) ; if ( ( IDENT_0 . data ( ) . METHOD_13 ( ) ) == ( org . nd4j . linalg . api . buffer . IDENT_4 . IDENT_5 ) ) METHOD_15 ( m , n , IDENT_0 , IDENT_3 , IDENT_1 ) ; else if ( ( IDENT_0 . data ( ) . METHOD_13 ( ) ) == ( org . nd4j . linalg . api . buffer . IDENT_4 . IDENT_6 ) ) METHOD_16 ( m , n , IDENT_0 , IDENT_3 , IDENT_1 ) ; else throw new java . lang . METHOD_17 ( ) ; if ( ( IDENT_1 . METHOD_18 ( 0 ) ) < 0 ) { throw new java . lang . METHOD_19 ( ( ( STRING_2 + ( IDENT_1 . METHOD_18 ( 0 ) ) ) + STRING_3 ) ) ; } else if ( ( IDENT_1 . METHOD_18 ( 0 ) ) > 0 ) { log . warn ( ( STRING_4 + ( IDENT_1 . METHOD_18 ( 0 ) ) ) ) ; } return IDENT_3 ; }
org . junit . Assert . assertEquals ( exp , a ) 