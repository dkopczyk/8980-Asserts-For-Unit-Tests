METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 4 , 4 , IDENT_0 . IDENT_1 ) . METHOD_2 ( 2 , 2 ) ; arr . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 } ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 2 , 4 } , new double [ ] { 4 , 6 } } ) ; "<AssertPlaceHolder>" ; } create ( double [ ] , int [ ] , int [ ] , long ) { if ( ( IDENT_3 . length ) == 1 ) { if ( ( IDENT_3 [ 0 ] ) != ( data . length ) ) throw new org . nd4j . linalg . exception . METHOD_4 ( ( ( ( STRING_0 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_3 ) ) ) + STRING_1 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_5 ( data . length , IDENT_3 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , org . nd4j . linalg . util . IDENT_4 . METHOD_6 ( IDENT_3 ) , org . nd4j . linalg . util . IDENT_4 . METHOD_6 ( IDENT_5 ) , IDENT_0 . IDENT_1 , org . nd4j . linalg . factory . Nd4j . METHOD_7 ( ) . METHOD_8 ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_2 , arr ) 