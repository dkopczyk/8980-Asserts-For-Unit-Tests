METHOD_0 ( ) { System . out . println ( STRING_0 ) ; org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 0 , INT_0 , INT_1 ) . METHOD_2 ( 5 , 5 , 5 ) ; int IDENT_0 = 2 ; int IDENT_1 = 1 ; int IDENT_2 = 1 ; int IDENT_3 = 4 ; int IDENT_4 = 4 ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . create ( new int [ ] { 3 , 3 } ) ; for ( int i = IDENT_1 ; i < IDENT_3 ; i ++ ) { for ( int j = IDENT_2 ; j < IDENT_4 ; j ++ ) { double val = arr . METHOD_3 ( IDENT_0 , i , j ) ; int [ ] IDENT_6 = new int [ ] { i - IDENT_1 , j - IDENT_2 } ; IDENT_5 . METHOD_4 ( IDENT_6 , val ) ; } } org . nd4j . linalg . api . ndarray . INDArray IDENT_7 = org . nd4j . linalg . factory . Nd4j . create ( new int [ ] { 3 , 3 } ) ; org . nd4j . linalg . indexing . IDENT_8 IDENT_9 = org . nd4j . linalg . indexing . IDENT_10 . METHOD_5 ( IDENT_0 ) ; org . nd4j . linalg . indexing . IDENT_8 IDENT_11 = org . nd4j . linalg . indexing . IDENT_10 . METHOD_6 ( IDENT_2 , IDENT_4 ) ; org . nd4j . linalg . indexing . IDENT_8 IDENT_12 = org . nd4j . linalg . indexing . IDENT_10 . METHOD_6 ( IDENT_1 , IDENT_3 ) ; org . nd4j . linalg . indexing . IDENT_8 [ ] IDENT_13 = new org . nd4j . linalg . indexing . IDENT_8 [ ] { IDENT_9 , IDENT_12 , IDENT_11 } ; org . nd4j . linalg . api . ndarray . INDArray IDENT_14 = arr . get ( IDENT_13 ) ; System . out . println ( IDENT_14 ) ; org . nd4j . linalg . indexing . IDENT_8 [ ] IDENT_15 = new org . nd4j . linalg . indexing . IDENT_8 [ ] { org . nd4j . linalg . indexing . IDENT_10 . METHOD_7 ( ) , org . nd4j . linalg . indexing . IDENT_10 . METHOD_7 ( ) } ; IDENT_7 . put ( IDENT_15 , IDENT_14 ) ; "<AssertPlaceHolder>" ; System . out . println ( STRING_1 ) ; } put ( IDENT_16 , org . nd4j . linalg . io . List ) { return this . map . put ( key , value ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , IDENT_7 ) 