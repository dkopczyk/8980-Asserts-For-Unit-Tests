METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_4 . Node ( true ) ; IDENT_0 . val IDENT_5 = IDENT_1 . METHOD_1 ( new org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_4 . Node ( ) ) ; IDENT_0 . val IDENT_6 = IDENT_1 . METHOD_1 ( new org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_4 . Node ( ) ) ; IDENT_0 . val IDENT_7 = IDENT_1 . METHOD_1 ( new org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_4 . Node ( ) ) ; IDENT_0 . val IDENT_8 = IDENT_6 . METHOD_2 ( null ) ; "<AssertPlaceHolder>" ; IDENT_0 . val IDENT_9 = IDENT_8 . METHOD_1 ( new org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_4 . Node ( ) ) ; } METHOD_2 ( org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_10 ) { if ( ( IDENT_11 . size ( ) ) == 0 ) return this ; if ( node == null ) return IDENT_11 . get ( 0 ) ; boolean b = false ; for ( org . nd4j . IDENT_2 . IDENT_3 . v2 . util . val v : IDENT_11 ) { if ( b ) return v ; if ( org . nd4j . IDENT_2 . IDENT_3 . v2 . util . IDENT_12 . equals ( node , v ) ) b = true ; } return null ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_8 ) 