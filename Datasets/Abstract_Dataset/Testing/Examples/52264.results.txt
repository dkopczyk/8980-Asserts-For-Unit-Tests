METHOD_0 ( ) { int length = ( ( int ) ( FLOAT_0 ) ) ; org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( length ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 ; ctx = new io . IDENT_0 . IDENT_4 . Context ( ) . METHOD_2 ( ( - 1 ) ) . METHOD_3 ( IDENT_5 :: IDENT_6 ) . METHOD_4 ( IDENT_5 :: IDENT_7 ) . METHOD_5 ( IDENT_8 . METHOD_5 ( ) ) . METHOD_6 ( INT_0 ) . METHOD_7 ( ( err ) -> err . printStackTrace ( ) ) ; final java . util . concurrent . atomic . IDENT_9 IDENT_10 = new java . util . concurrent . atomic . METHOD_8 ( true ) ; io . IDENT_0 . IDENT_4 IDENT_0 = io . IDENT_0 . IDENT_4 . connect ( ctx ) ; int IDENT_11 = 1 ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 [ ] IDENT_13 = new org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 [ IDENT_11 ] ; for ( int i = 0 ; i < IDENT_11 ; i ++ ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 IDENT_14 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_12 . builder ( ) . METHOD_9 ( METHOD_9 ) . ctx ( METHOD_10 ( ) ) . channel ( channel ) . METHOD_11 ( METHOD_11 ) . METHOD_12 ( METHOD_12 ) . METHOD_13 ( new org . nd4j . METHOD_11 . IDENT_1 . METHOD_14 ( ) { @ org . nd4j . METHOD_11 . IDENT_1 . Override public void METHOD_15 ( org . nd4j . METHOD_11 . IDENT_1 . IDENT_15 message ) { METHOD_12 . set ( false ) ; } @ org . nd4j . METHOD_11 . IDENT_1 . Override public void METHOD_16 ( org . nd4j . linalg . api . ndarray . INDArray arr , long IDENT_16 , int OP_0 IDENT_17 ) { } @ org . nd4j . METHOD_11 . IDENT_1 . Override public void METHOD_17 ( org . nd4j . linalg . api . ndarray . INDArray arr ) { METHOD_12 . set ( false ) ; } } ) . build ( ) ; java . lang . Thread t = new java . lang . Thread ( ( ) -> { try { IDENT_14 . METHOD_18 ( ) ; } catch ( e ) { org . nd4j . METHOD_11 . IDENT_1 . e . printStackTrace ( ) ; } } ) ; t . start ( ) ; IDENT_13 [ i ] = IDENT_14 ; } java . lang . Thread . sleep ( INT_0 ) ; IDENT_3 = org . nd4j . METHOD_11 . IDENT_1 . IDENT_2 . builder ( ) . METHOD_19 ( INT_1 ) . METHOD_9 ( METHOD_9 ) . channel ( channel ) . METHOD_11 ( METHOD_11 ) . build ( ) ; for ( int i = 0 ; ( i < 1 ) && ( METHOD_12 . get ( ) ) ; i ++ ) { log . info ( STRING_0 ) ; IDENT_3 . METHOD_20 ( arr ) ; log . info ( STRING_1 ) ; } java . lang . Thread . sleep ( INT_2 ) ; for ( int i = 0 ; i < IDENT_11 ; i ++ ) org . IDENT_18 . IDENT_19 . close ( IDENT_13 [ i ] ) ; org . IDENT_18 . IDENT_19 . close ( METHOD_11 ) ; org . IDENT_18 . IDENT_19 . close ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } get ( ) { try { IDENT_20 . METHOD_21 ( ) . METHOD_22 ( ) ; return value ; } finally { METHOD_22 . METHOD_21 ( ) . METHOD_23 ( ) ; } }
org . junit . Assert . assertFalse ( METHOD_12 . get ( ) ) 