METHOD_0 ( ) { org . nd4j . linalg . api . IDENT_0 . IDENT_1 . IDENT_2 IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . METHOD_2 ( 3 , org . nd4j . linalg . factory . Nd4j . create ( 10 ) . METHOD_3 ( 1 , FLOAT_0 ) ) ; for ( int x = 0 ; x < INT_0 ; x ++ ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_3 = IDENT_1 . METHOD_4 ( new int [ ] { 1 , 10 } ) ; System . out . println ( ) ; org . nd4j . linalg . api . IDENT_4 . impl . IDENT_5 . IDENT_6 condition = new org . nd4j . linalg . api . IDENT_4 . impl . IDENT_5 . METHOD_5 ( IDENT_3 , org . nd4j . linalg . indexing . IDENT_7 . IDENT_8 . equals ( 0.0 ) ) ; int match = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( ) . exec ( condition , Integer . MAX_VALUE ) . METHOD_7 ( 0 ) ; "<AssertPlaceHolder>" ; } } length ( ) { return 0 ; }
org . junit . Assert . assertEquals ( IDENT_3 . length ( ) , match ) 