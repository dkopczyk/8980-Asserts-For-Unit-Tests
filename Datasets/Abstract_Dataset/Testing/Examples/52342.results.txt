METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_4 = org . nd4j . linalg . factory . Nd4j . create ( new long [ ] { 1 , 5 } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_5 = org . nd4j . linalg . factory . Nd4j . create ( new long [ ] { 1 , 5 } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_6 = org . nd4j . linalg . factory . Nd4j . create ( new long [ ] { 1 , 5 } ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 IDENT_8 = IDENT_3 . METHOD_1 ( STRING_0 , IDENT_5 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 IDENT_9 = IDENT_3 . METHOD_1 ( STRING_1 , IDENT_6 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 IDENT_10 = IDENT_3 . METHOD_1 ( STRING_2 , IDENT_4 ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_7 res = IDENT_3 . METHOD_2 ( IDENT_10 , IDENT_8 , IDENT_9 ) ; IDENT_3 . exec ( ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_11 = res . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { long [ ] IDENT_12 = IDENT_3 . METHOD_5 ( METHOD_6 ( ) ) ; if ( IDENT_12 == null ) { org . nd4j . IDENT_0 . IDENT_1 . val arr = METHOD_3 ( ) ; if ( arr != null ) return arr . METHOD_7 ( ) ; } return IDENT_12 ; }
org . junit . Assert . assertArrayEquals ( new long [ ] { 1 , 5 } , res . METHOD_4 ( ) ) 