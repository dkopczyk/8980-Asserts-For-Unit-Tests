METHOD_0 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . create ( ) ; org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 , 2 , 3 , 4 } , new long [ ] { 2 , 2 } ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 x = IDENT_3 . METHOD_1 ( STRING_0 , arr ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 result = IDENT_3 . METHOD_2 ( x , 1 , new int [ ] { 1 , 0 } ) ; org . nd4j . linalg . api . ndarray . INDArray expected = org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 2 , 1 , 4 , 3 } , new long [ ] { 2 , 2 } ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 exec = IDENT_3 . METHOD_4 ( ) ; exec . METHOD_5 ( STRING_1 , new org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 ( ) { @ org . nd4j . IDENT_0 . IDENT_1 . Override public org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] METHOD_7 ( org . nd4j . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 , java . util . Map < java . lang . String , org . nd4j . linalg . api . ndarray . INDArray > IDENT_5 , org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] IDENT_6 ) { return new org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 [ ] { org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 . this } ; } } ) ; org . nd4j . IDENT_0 . IDENT_1 . IDENT_4 output = exec . METHOD_8 ( STRING_1 , exec ) ; return output . METHOD_9 ( ) . METHOD_10 ( ) ; }
org . junit . Assert . assertEquals ( expected , result . METHOD_3 ( ) ) 