METHOD_0 ( ) { for ( int i : new int [ ] { 2 , 1 } ) { System . out . println ( ( STRING_0 + i ) ) ; org . nd4j . linalg . api . ndarray . INDArray first = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , ( 3 * i ) , ( 3 * i ) ) . METHOD_2 ( STRING_1 , i , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 4 , ( 4 + ( 4 * i ) ) , ( 4 * i ) ) . METHOD_2 ( STRING_1 , i , 4 ) ; System . out . println ( ( ( ( STRING_2 + ( org . nd4j . IDENT_1 . IDENT_2 . Arrays . toString ( first . METHOD_3 ( ) ) ) ) + STRING_3 ) + ( org . nd4j . IDENT_1 . IDENT_2 . Arrays . toString ( IDENT_0 . METHOD_3 ( ) ) ) ) ) ; org . nd4j . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = org . nd4j . IDENT_1 . IDENT_2 . IDENT_3 . create ( ) ; org . nd4j . IDENT_1 . IDENT_2 . IDENT_5 f = IDENT_4 . METHOD_4 ( STRING_4 , first ) ; org . nd4j . IDENT_1 . IDENT_2 . IDENT_5 s = IDENT_4 . METHOD_4 ( STRING_5 , IDENT_0 ) ; org . nd4j . linalg . api . IDENT_6 . params . IDENT_7 IDENT_8 = org . nd4j . linalg . api . IDENT_6 . params . IDENT_7 . builder ( ) . METHOD_5 ( true ) . METHOD_6 ( false ) . METHOD_7 ( false ) . a ( first ) . b ( IDENT_0 ) . build ( ) ; org . nd4j . IDENT_1 . IDENT_2 . IDENT_5 IDENT_9 = IDENT_4 . f ( ) . METHOD_8 ( f , s , IDENT_8 ) ; IDENT_4 . METHOD_9 ( METHOD_8 , STRING_6 ) ; org . nd4j . linalg . api . ndarray . INDArray out = IDENT_4 . METHOD_10 ( ) ; org . nd4j . linalg . api . ndarray . INDArray exp = first . METHOD_11 ( ) . METHOD_8 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; System . out . println ( ( ( STRING_7 + i ) + STRING_8 ) ) ; } } METHOD_8 ( org . nd4j . linalg . api . ndarray . INDArray ) { return ( ( org . nd4j . linalg . api . IDENT_10 . IDENT_11 ) ( super . METHOD_8 ( other ) ) ) ; }
org . junit . Assert . assertEquals ( exp , out ) 