METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; IDENT_0 . val IDENT_1 = org . nd4j . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . getInstance ( ) . METHOD_1 ( new org . nd4j . linalg . io . METHOD_2 ( STRING_0 ) . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; IDENT_0 . val IDENT_6 = org . nd4j . linalg . factory . Nd4j . create ( 2 , 5 , 4 ) . METHOD_4 ( 1.0 ) ; IDENT_0 . val IDENT_7 = org . nd4j . linalg . factory . Nd4j . create ( 2 , 3 , 5 , 4 ) . METHOD_4 ( 2.0 ) ; IDENT_0 . val IDENT_8 = org . nd4j . linalg . factory . Nd4j . create ( 3 , 1 , 5 , 4 ) . METHOD_4 ( FLOAT_0 ) ; IDENT_1 . METHOD_5 ( IDENT_6 , IDENT_1 . METHOD_6 ( STRING_1 ) ) ; IDENT_1 . METHOD_5 ( IDENT_7 , IDENT_1 . METHOD_6 ( STRING_2 ) ) ; IDENT_1 . METHOD_5 ( IDENT_8 , IDENT_1 . METHOD_6 ( STRING_3 ) ) ; IDENT_1 . METHOD_7 ( new java . io . File ( STRING_4 ) ) ; } METHOD_3 ( ) { java . net . URL url = this . METHOD_8 ( ) ; if ( METHOD_9 ( url ) ) { try { url = METHOD_10 ( url ) ; java . util . IDENT_9 . IDENT_10 IDENT_11 = new java . util . IDENT_9 . METHOD_11 ( url . METHOD_12 ( ) ) ; java . util . IDENT_9 . IDENT_12 entry = IDENT_11 . METHOD_13 ( this . IDENT_13 ) ; org . nd4j . linalg . util . InputStream stream = IDENT_11 . METHOD_3 ( entry ) ; return stream ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } else { org . nd4j . linalg . util . File IDENT_14 = this . METHOD_12 ( ) ; return new org . nd4j . linalg . util . METHOD_14 ( IDENT_14 ) ; } }
org . junit . Assert . assertNotNull ( IDENT_1 ) 