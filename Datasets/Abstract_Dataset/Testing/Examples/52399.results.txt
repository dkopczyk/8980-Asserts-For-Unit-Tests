METHOD_0 ( ) { org . nd4j . linalg . factory . Nd4j . create ( 1 ) ; IDENT_0 . val IDENT_1 = org . nd4j . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 . getInstance ( ) . METHOD_1 ( new org . nd4j . linalg . io . METHOD_2 ( STRING_0 ) . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; IDENT_0 . val IDENT_6 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , 1.0 , - FLOAT_3 , FLOAT_4 , - FLOAT_5 , FLOAT_6 , - FLOAT_7 , FLOAT_8 , - FLOAT_9 , FLOAT_10 , - FLOAT_11 , - FLOAT_12 , - FLOAT_13 , - FLOAT_14 , - FLOAT_15 , - FLOAT_16 , - FLOAT_17 , - 1.0 } , new int [ ] { 5 , 4 } ) ; IDENT_1 . METHOD_4 ( IDENT_6 , IDENT_1 . METHOD_5 ( STRING_1 ) ) ; IDENT_1 . METHOD_6 ( new java . io . File ( STRING_2 ) ) ; } METHOD_3 ( ) { java . net . URL url = this . METHOD_7 ( ) ; if ( METHOD_8 ( url ) ) { try { url = METHOD_9 ( url ) ; java . util . IDENT_7 . IDENT_8 IDENT_9 = new java . util . IDENT_7 . METHOD_10 ( url . METHOD_11 ( ) ) ; java . util . IDENT_7 . IDENT_10 entry = IDENT_9 . METHOD_12 ( this . IDENT_11 ) ; org . nd4j . linalg . util . InputStream stream = IDENT_9 . METHOD_3 ( entry ) ; return stream ; } catch ( java . lang . Exception e ) { throw new java . lang . RuntimeException ( e ) ; } } else { org . nd4j . linalg . util . File IDENT_12 = this . METHOD_11 ( ) ; return new org . nd4j . linalg . util . METHOD_13 ( IDENT_12 ) ; } }
org . junit . Assert . assertNotNull ( IDENT_1 ) 