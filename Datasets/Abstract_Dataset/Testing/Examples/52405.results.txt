METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 4 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray other = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 16 , 16 ) . METHOD_2 ( 4 , 4 ) ; org . nd4j . linalg . api . ndarray . INDArray result = METHOD_1 . METHOD_3 ( other ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 } ) ; "<AssertPlaceHolder>" ; } create ( double [ ] , int [ ] , int [ ] , long ) { IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_4 ( IDENT_2 ) ; if ( ( IDENT_2 . length ) == 1 ) { if ( ( IDENT_2 [ 0 ] ) == ( data . length ) ) { IDENT_2 = new int [ ] { 1 , data . length } ; } else throw new org . nd4j . linalg . exception . METHOD_5 ( ( ( ( STRING_0 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_2 ) ) ) + STRING_1 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_6 ( data . length , IDENT_2 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , IDENT_2 , IDENT_3 , offset ) ; org . nd4j . linalg . factory . Nd4j . METHOD_7 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_1 , result ) 