METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , 4 , 4 ) . METHOD_2 ( 2 , 2 ) ; org . nd4j . linalg . api . ndarray . INDArray put = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 5 , 6 } ) ; IDENT_0 . METHOD_3 ( 1 , put ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 1 , 3 } , new double [ ] { 2 , 4 } } ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 5 , 6 } ) ; IDENT_1 . METHOD_3 ( 1 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( long , org . nd4j . linalg . api . ndarray . INDArray ) { if ( ( METHOD_4 ( ) ) && ( IDENT_3 . METHOD_5 ( ) ) ) { return METHOD_6 ( IDENT_3 ) ; } return put ( new org . nd4j . linalg . api . ndarray . IDENT_4 [ ] { org . nd4j . linalg . api . ndarray . IDENT_5 . METHOD_7 ( row ) , org . nd4j . linalg . api . ndarray . IDENT_5 . METHOD_8 ( ) } , IDENT_3 ) ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 