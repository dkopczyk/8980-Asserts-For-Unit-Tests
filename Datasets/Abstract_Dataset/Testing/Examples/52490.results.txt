METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray arr = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ( - 1 ) , 1 , 10 ) ; double [ ] expected = new double [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { double in = arr . METHOD_2 ( i ) ; expected [ i ] = ( in <= 0.0 ) ? FLOAT_0 * in : in ; } org . nd4j . linalg . api . ndarray . INDArray out = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( ) . METHOD_4 ( new org . nd4j . linalg . METHOD_5 ( arr , FLOAT_0 ) ) ; System . out . println ( ( STRING_0 + ( org . nd4j . linalg . Arrays . toString ( expected ) ) ) ) ; System . out . println ( ( STRING_1 + ( org . nd4j . linalg . Arrays . toString ( out . data ( ) . METHOD_6 ( ) ) ) ) ) ; org . nd4j . linalg . api . ndarray . INDArray exp = org . nd4j . linalg . factory . Nd4j . create ( expected ) ; "<AssertPlaceHolder>" ; } create ( float [ ] ) { return org . nd4j . linalg . factory . Nd4j . create ( data , org . nd4j . linalg . factory . Nd4j . order ( ) ) ; }
org . junit . Assert . assertEquals ( exp , out ) 