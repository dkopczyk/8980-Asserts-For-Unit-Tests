METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . create ( 5 , 5 ) ; for ( int r = 0 ; r < ( IDENT_0 . METHOD_1 ( ) ) ; r ++ ) { IDENT_0 . METHOD_2 ( r ) . METHOD_3 ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , 2 , 1 } ) ) ; } org . nd4j . linalg . api . ndarray . INDArray row = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , - 4 , - 5 } ) ; org . nd4j . linalg . factory . Nd4j . METHOD_4 ( ) . exec ( new org . nd4j . linalg . METHOD_5 ( IDENT_0 , row , IDENT_0 , 1 ) ) ; for ( int r = 0 ; r < ( IDENT_0 . METHOD_1 ( ) ) ; r ++ ) { "<AssertPlaceHolder>" ; } } create ( double [ ] , long [ ] , long [ ] , long , char ) { IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_6 ( IDENT_1 ) ; if ( ( IDENT_1 . length ) == 1 ) { if ( ( IDENT_1 [ 0 ] ) == ( data . length ) ) { IDENT_1 = new long [ ] { 1 , data . length } ; } else throw new org . nd4j . linalg . exception . METHOD_7 ( ( ( ( STRING_0 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_1 ) ) ) + STRING_1 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_8 ( data . length , IDENT_1 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , IDENT_1 , IDENT_2 , offset , order ) ; org . nd4j . linalg . factory . Nd4j . METHOD_9 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( org . nd4j . linalg . factory . Nd4j . create ( new double [ ] { 1 , 2 , 3 , - 4 , - 5 } ) , IDENT_0 . METHOD_2 ( r ) ) 