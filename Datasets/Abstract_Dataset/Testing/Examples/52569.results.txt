METHOD_0 ( ) { org . nd4j . linalg . api . ndarray . INDArray IDENT_0 = org . nd4j . linalg . factory . Nd4j . METHOD_1 ( 1 , INT_0 , INT_0 ) . METHOD_2 ( 4 , 2 , 3 ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_1 = IDENT_0 . get ( METHOD_3 ( 1 , 3 ) , new org . nd4j . linalg . indexing . METHOD_4 ( new int [ ] { 0 } ) , new org . nd4j . linalg . indexing . METHOD_4 ( new int [ ] { 0 , 2 } ) ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_2 = org . nd4j . linalg . factory . Nd4j . create ( new double [ ] [ ] { new double [ ] { 7 , 9 } , new double [ ] { INT_1 , 15 } } ) ; "<AssertPlaceHolder>" ; } create ( double [ ] , int [ ] , int [ ] , long ) { IDENT_3 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_3 ) ; if ( ( IDENT_3 . length ) == 1 ) { if ( ( IDENT_3 [ 0 ] ) == ( data . length ) ) { IDENT_3 = new int [ ] { 1 , data . length } ; } else throw new org . nd4j . linalg . exception . METHOD_6 ( ( ( ( STRING_0 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_3 ) ) ) + STRING_1 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_7 ( data . length , IDENT_3 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , IDENT_3 , IDENT_4 , offset ) ; org . nd4j . linalg . factory . Nd4j . METHOD_8 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_1 ) 