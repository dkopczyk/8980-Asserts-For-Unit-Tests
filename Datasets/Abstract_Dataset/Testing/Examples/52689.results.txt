METHOD_0 ( ) { if ( org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . getClass ( ) . METHOD_2 ( ) . toLowerCase ( ) . contains ( STRING_0 ) ) return ; IDENT_0 . val IDENT_1 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 12 , 12 ) . METHOD_4 ( STRING_1 , 4 , 3 ) ; IDENT_0 . val IDENT_2 = org . nd4j . linalg . factory . Nd4j . METHOD_3 ( 1 , 12 , 12 ) . METHOD_4 ( STRING_1 , 3 , 4 ) . METHOD_5 ( STRING_2 ) ; IDENT_0 . val exp = IDENT_1 . METHOD_6 ( IDENT_2 ) ; IDENT_0 . val res = org . nd4j . linalg . factory . Nd4j . create ( new int [ ] { 4 , 4 } , STRING_1 ) ; IDENT_0 . val IDENT_3 = org . nd4j . linalg . api . IDENT_4 . IDENT_5 . builder ( STRING_3 ) . METHOD_7 ( IDENT_1 , IDENT_2 ) . METHOD_8 ( res ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . METHOD_1 ( ) . exec ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } exec ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_8 ) { METHOD_9 ( op ) ; if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_9 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_9 s = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_9 ) ( op ) ) ; exec ( s ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_10 ) { op . exec ( ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_11 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_11 t = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_11 ) ( op ) ) ; exec ( t ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_12 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_12 ac = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_12 ) ( op ) ) ; exec ( ac ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_13 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_13 IDENT_14 = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_13 ) ( op ) ) ; exec ( IDENT_14 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_15 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_15 IDENT_16 = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_15 ) ( op ) ) ; exec ( IDENT_16 , IDENT_16 . METHOD_10 ( ) ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_17 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_17 IDENT_18 = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_17 ) ( op ) ) ; exec ( IDENT_18 ) ; } else if ( op instanceof org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_19 ) { org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_19 IDENT_20 = ( ( org . nd4j . linalg . IDENT_6 . IDENT_7 . IDENT_4 . IDENT_19 ) ( op ) ) ; exec ( IDENT_20 , org . nd4j . linalg . factory . Nd4j . METHOD_11 ( ) ) ; } return op ; }
org . junit . Assert . assertEquals ( exp , res ) 