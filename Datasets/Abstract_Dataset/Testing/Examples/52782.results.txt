METHOD_0 ( ) { IDENT_0 . val IDENT_1 = new int [ ] { 1 , - 2 , 0 } ; IDENT_0 . val IDENT_2 = 2 ; IDENT_0 . val exp = new int [ ] { 0 , 1 } ; IDENT_0 . val IDENT_3 = org . nd4j . linalg . api . IDENT_4 . IDENT_5 . METHOD_1 ( IDENT_2 , IDENT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int , int [ ] ) { if ( ( IDENT_1 == null ) || ( ( IDENT_1 . length ) == 0 ) ) return new int [ ] { Integer . MAX_VALUE } ; int [ ] IDENT_6 = new int [ IDENT_1 . length ] ; int IDENT_7 = 0 ; for ( IDENT_0 . val v : IDENT_1 ) { IDENT_0 . val t = ( v < 0 ) ? v + IDENT_2 : v ; if ( ( ( t >= IDENT_2 ) && ( t != ( Integer . MAX_VALUE ) ) ) || ( t < 0 ) ) throw new org . nd4j . linalg . exception . METHOD_2 ( ( ( ( STRING_0 + ( org . nd4j . linalg . api . IDENT_4 . Arrays . toString ( IDENT_1 ) ) ) + STRING_1 ) + IDENT_2 ) ) ; IDENT_6 [ ( IDENT_7 ++ ) ] = t ; } org . nd4j . linalg . api . IDENT_4 . Arrays . METHOD_3 ( IDENT_6 ) ; return org . nd4j . linalg . api . IDENT_4 . IDENT_5 . METHOD_4 ( IDENT_6 ) ; }
org . junit . Assert . assertArrayEquals ( exp , IDENT_3 ) 