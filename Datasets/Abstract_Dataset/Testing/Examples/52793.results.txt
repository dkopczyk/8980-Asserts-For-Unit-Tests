METHOD_0 ( ) { com . IDENT_0 . v2 . IDENT_1 . IDENT_2 IDENT_3 = new com . IDENT_0 . v2 . IDENT_1 . METHOD_1 ( ) ; IDENT_3 . METHOD_2 ( STRING_0 ) ; org . nd4j . jdbc . IDENT_4 . IDENT_5 loader = new org . nd4j . jdbc . IDENT_4 . METHOD_3 ( IDENT_3 , STRING_0 , STRING_1 , STRING_2 ) ; loader . delete ( "1" ) ; org . nd4j . linalg . api . ndarray . INDArray load = loader . load ( loader . METHOD_4 ( "1" ) ) ; if ( load != null ) { loader . delete ( "1" ) ; } loader . save ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 , 2 , 3 } ) , "1" ) ; java . sql . IDENT_6 b = loader . METHOD_4 ( "1" ) ; org . nd4j . linalg . api . ndarray . INDArray IDENT_7 = loader . load ( b ) ; "<AssertPlaceHolder>" ; } create ( float [ ] , int [ ] , long ) { IDENT_8 = org . nd4j . linalg . factory . Nd4j . METHOD_5 ( IDENT_8 ) ; if ( ( IDENT_8 . length ) == 1 ) { if ( ( IDENT_8 [ 0 ] ) == ( data . length ) ) { IDENT_8 = new int [ ] { 1 , data . length } ; } else throw new org . nd4j . linalg . exception . METHOD_6 ( ( ( ( STRING_3 + ( org . nd4j . linalg . factory . Arrays . toString ( IDENT_8 ) ) ) + STRING_4 ) + ( data . length ) ) ) ; } org . nd4j . linalg . factory . Nd4j . METHOD_7 ( data . length , IDENT_8 ) ; org . nd4j . linalg . factory . INDArray ret = org . nd4j . linalg . factory . Nd4j . INSTANCE . create ( data , IDENT_8 , offset , org . nd4j . linalg . factory . Nd4j . order ( ) ) ; org . nd4j . linalg . factory . Nd4j . METHOD_8 ( ret ) ; return ret ; }
org . junit . Assert . assertEquals ( org . nd4j . linalg . factory . Nd4j . create ( new float [ ] { 1 , 2 , 3 } ) , IDENT_7 ) 