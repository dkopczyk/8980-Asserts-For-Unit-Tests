METHOD_0 ( ) { final org . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . String [ ] > factory = new org . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . String [ ] > ( java . lang . String [ ] . class ) ; org . easymock . EasyMock . expect ( mock . METHOD_1 ( 2 ) ) . andReturn ( 1 ) ; org . easymock . EasyMock . expect ( mock . METHOD_2 ( ) ) . andReturn ( STRING_0 ) ; org . easymock . EasyMock . expect ( mock . METHOD_2 ( ) ) . andReturn ( STRING_1 ) ; org . easymock . EasyMock . expect ( mock . METHOD_2 ( ) ) . andReturn ( "test" ) ; org . easymock . EasyMock . replay ( mock ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( mock ) ; } METHOD_3 ( org . IDENT_0 . IDENT_3 ) { return METHOD_3 ( null , new java . util . HashMap < java . lang . String , org . IDENT_0 . IDENT_4 < ? > > ( ) , IDENT_5 , new java . util . ArrayList < java . lang . Exception > ( ) ) ; }
org . junit . Assert . assertArrayEquals ( new java . lang . String [ ] { STRING_0 , STRING_1 , "test" } , factory . METHOD_3 ( new org . IDENT_0 . METHOD_4 ( ) ) ) 