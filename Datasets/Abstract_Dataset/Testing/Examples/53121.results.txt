METHOD_0 ( ) { nl . IDENT_0 . jenkins . auth . User IDENT_1 = new nl . IDENT_0 . jenkins . auth . METHOD_1 ( STRING_0 , STRING_1 ) ; boolean IDENT_2 = false ; try { job . METHOD_2 ( IDENT_1 ) ; } catch ( java . lang . IllegalArgumentException e ) { IDENT_2 = true ; } "<AssertPlaceHolder>" ; } METHOD_2 ( nl . IDENT_0 . jenkins . auth . User ) { nl . IDENT_0 . jenkins . IDENT_3 . IDENT_4 . LOG . trace ( STRING_2 , IDENT_1 ) ; METHOD_3 ( IDENT_1 , STRING_3 ) ; METHOD_4 ( org . apache . commons . lang3 . StringUtils . METHOD_5 ( IDENT_1 . METHOD_6 ( ) ) , STRING_4 ) ; METHOD_4 ( IDENT_1 . METHOD_6 ( ) . contains ( STRING_5 ) , STRING_6 ) ; final org . IDENT_5 . Element IDENT_6 = METHOD_7 ( document , nl . IDENT_0 . jenkins . IDENT_3 . IDENT_4 . IDENT_7 ) ; final int IDENT_8 = IDENT_6 . METHOD_8 ( ) ; if ( IDENT_8 == 0 ) { IDENT_6 . METHOD_9 ( new org . IDENT_5 . METHOD_10 ( IDENT_1 . METHOD_6 ( ) ) ) ; } else if ( IDENT_8 == 1 ) { final org . IDENT_5 . IDENT_9 content = IDENT_6 . METHOD_11 ( 0 ) ; final java . lang . String value = content . getValue ( ) ; IDENT_6 . METHOD_9 ( new org . IDENT_5 . METHOD_10 ( ( ( value + " " ) + ( IDENT_1 . METHOD_6 ( ) ) ) ) ) ; } else { throw new java . lang . RuntimeException ( ( ( STRING_7 + ( nl . IDENT_0 . jenkins . IDENT_3 . IDENT_4 . IDENT_7 ) ) + STRING_8 ) ) ; } }
org . junit . Assert . assertThat ( IDENT_2 , org . hamcrest . Matchers . is ( true ) ) 