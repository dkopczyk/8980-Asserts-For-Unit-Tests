METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = METHOD_1 ( STRING_0 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_5 = METHOD_1 ( STRING_1 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_6 = METHOD_1 ( STRING_2 ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_7 = METHOD_1 ( STRING_3 ) ; IDENT_8 . save ( IDENT_4 ) ; IDENT_8 . save ( IDENT_5 ) ; IDENT_8 . save ( IDENT_6 ) ; IDENT_8 . save ( IDENT_7 ) ; java . util . List < java . lang . String > IDENT_9 = java . util . Arrays . asList ( IDENT_4 . METHOD_2 ( ) , IDENT_6 . METHOD_2 ( ) , IDENT_5 . METHOD_2 ( ) , IDENT_7 . METHOD_2 ( ) ) ; java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > expected = new java . util . ArrayList ( java . util . Arrays . asList ( IDENT_4 , IDENT_6 , IDENT_5 , IDENT_7 ) ) ; java . util . List < org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > actual = new java . util . ArrayList ( IDENT_8 . METHOD_3 ( org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . class , IDENT_9 ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . Class , java . util . List ) { org . IDENT_0 . IDENT_1 . common . IDENT_10 < T > store = ( ( org . IDENT_0 . IDENT_1 . common . IDENT_10 < T > ) ( METHOD_4 ( clazz ) ) ) ; if ( store == null ) { return new java . util . ArrayList ( ) ; } java . util . List < T > list = new java . util . ArrayList ( ) ; if ( IDENT_9 != null ) { for ( java . lang . String IDENT_11 : IDENT_9 ) { T object = store . METHOD_5 ( IDENT_11 ) ; if ( object != null ) { list . add ( object ) ; } } } return list ; }
org . junit . Assert . assertEquals ( expected , actual ) 