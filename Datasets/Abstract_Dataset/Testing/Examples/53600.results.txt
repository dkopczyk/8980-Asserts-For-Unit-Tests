METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . core . IDENT_2 . algorithm . IDENT_3 . IDENT_4 mapper = new org . IDENT_0 . IDENT_1 . core . IDENT_2 . algorithm . IDENT_3 . METHOD_1 ( IDENT_5 , IDENT_6 ) ; org . IDENT_0 . IDENT_1 . core . io . mapping . IDENT_7 m = mapper . METHOD_2 ( IDENT_8 . METHOD_3 ( ) , IDENT_9 . METHOD_3 ( ) , STRING_0 , STRING_1 0 ) ; org . IDENT_0 . IDENT_1 . core . io . mapping . IDENT_7 IDENT_10 = org . IDENT_0 . IDENT_1 . core . io . mapping . IDENT_11 . METHOD_4 ( ) ; IDENT_10 . add ( STRING_2 , STRING_3 , FLOAT_0 ) ; IDENT_10 . add ( STRING_4 , STRING_1 1 , FLOAT_1 ) ; IDENT_10 . add ( STRING_5 , STRING_6 , FLOAT_2 ) ; IDENT_10 . add ( STRING_1 , STRING_7 , FLOAT_3 ) ; IDENT_10 . add ( STRING_8 , STRING_9 , FLOAT_4 ) ; "<AssertPlaceHolder>" ; } add ( java . lang . String , org . IDENT_0 . IDENT_1 . core . IDENT_12 . IDENT_13 , org . IDENT_0 . IDENT_1 . core . IDENT_12 . IDENT_13 ) { java . util . List < java . lang . Double > position = java . util . Arrays . asList ( new java . lang . Double [ ] { 0.0 , 0.0 } ) ; for ( int i = 0 ; i < ( p . IDENT_14 . size ( ) ) ; i ++ ) { position . set ( i , ( ( p . IDENT_14 . get ( i ) ) + ( q . IDENT_14 . get ( i ) ) ) ) ; } return new org . IDENT_0 . IDENT_1 . core . IDENT_12 . METHOD_5 ( IDENT_15 , position ) ; }
org . junit . Assert . assertEquals ( IDENT_10 , m ) 