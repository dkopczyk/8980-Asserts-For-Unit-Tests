METHOD_0 ( ) { uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_3 IDENT_1 = mock ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_3 . class ) ; uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_4 < java . io . InputStream > factory = mock ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_4 . class ) ; when ( factory . METHOD_1 ( any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . resource . IDENT_5 . class ) , any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_6 . class ) ) ) . thenReturn ( mock ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_7 . class ) ) ; uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_8 IDENT_9 = mock ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_8 . class ) ; when ( IDENT_9 . METHOD_2 ( any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_10 . class ) , any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_11 . class ) , METHOD_3 ( ) ) ) . thenReturn ( mock ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_11 . class ) ) ; com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 IDENT_17 = mock ( com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 . class ) ; uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_6 IDENT_18 = new uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . METHOD_4 ( new java . net . URI ( STRING_0 ) ) ; IDENT_18 . METHOD_5 ( INT_0 ) ; uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_19 . IDENT_20 IDENT_21 = new uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_19 . METHOD_6 ( IDENT_1 , factory , IDENT_9 , IDENT_17 , IDENT_18 ) ; com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 IDENT_23 = mock ( com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 . class ) ; when ( IDENT_23 . getPath ( ) ) . thenReturn ( "" ) ; when ( IDENT_23 . METHOD_7 ( ) ) . thenReturn ( true ) ; com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 IDENT_24 = mock ( com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 . class ) ; when ( IDENT_24 . getPath ( ) ) . thenReturn ( STRING_1 ) ; when ( IDENT_24 . METHOD_7 ( ) ) . thenReturn ( true ) ; com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 IDENT_25 = mock ( com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 . class ) ; when ( IDENT_25 . getName ( ) ) . thenReturn ( STRING_2 ) ; when ( IDENT_25 . getPath ( ) ) . thenReturn ( STRING_3 ) ; when ( IDENT_25 . METHOD_7 ( ) ) . thenReturn ( false ) ; java . util . List < com . github . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_22 > IDENT_26 = new java . util . ArrayList ( ) ; IDENT_26 . add ( IDENT_23 ) ; IDENT_26 . add ( IDENT_24 ) ; IDENT_26 . add ( IDENT_25 ) ; IDENT_21 . METHOD_8 ( IDENT_26 ) ; verify ( IDENT_9 , METHOD_9 ( ) ) . METHOD_2 ( any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_10 . class ) , any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_11 . class ) , METHOD_3 ( ) ) ; verify ( IDENT_1 , METHOD_9 ( ) ) . METHOD_10 ( any ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_2 . IDENT_7 . class ) ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_7 ) { IDENT_27 . METHOD_11 ( ) ; IDENT_28 . add ( request ) ; java . util . concurrent . IDENT_29 < uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_30 > IDENT_31 = new java . util . concurrent . IDENT_29 < uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_30 > ( ) { @ uk . gov . IDENT_0 . IDENT_1 . IDENT_32 . Override public uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_30 call ( ) throws java . io . IOException { IDENT_33 . METHOD_12 ( IDENT_34 ) ; uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_30 results = IDENT_33 . METHOD_13 ( request ) ; return results ; } } ; java . util . concurrent . IDENT_35 < uk . gov . IDENT_0 . IDENT_1 . core . interfaces . IDENT_30 > task = new uk . gov . IDENT_0 . IDENT_1 . IDENT_32 . IDENT_36 . METHOD_14 ( IDENT_31 , request ) ; IDENT_37 . METHOD_10 ( task ) ; return task ; }
org . junit . Assert . assertTrue ( true ) 