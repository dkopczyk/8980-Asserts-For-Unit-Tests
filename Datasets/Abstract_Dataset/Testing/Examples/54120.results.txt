METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = org . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_1 ( ) ; java . time . IDENT_5 start = org . IDENT_0 . IDENT_1 . IDENT_6 . create ( INT_0 , INT_1 , INT_2 , 10 , INT_3 , INT_4 , INT_5 ) ; org . IDENT_0 . util . time . IDENT_7 IDENT_8 = org . IDENT_0 . util . time . IDENT_7 . METHOD_2 ( start , start . METHOD_3 ( java . time . IDENT_9 . METHOD_4 ( 1 ) ) ) ; org . IDENT_0 . IDENT_1 . IDENT_10 IDENT_11 = IDENT_3 . METHOD_5 ( IDENT_8 , ( - 100 ) , ( - 10 ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( org . IDENT_0 . util . IDENT_12 . IDENT_13 , int , int ) { double IDENT_14 = range . METHOD_6 ( ) ; double IDENT_15 = range . METHOD_7 ( ) ; double IDENT_16 = Double . IDENT_17 ; double IDENT_18 = org . IDENT_0 . IDENT_1 . IDENT_19 . METHOD_8 ( IDENT_14 , IDENT_15 , IDENT_20 , IDENT_16 ) ; double [ ] IDENT_21 = org . IDENT_0 . IDENT_1 . IDENT_19 . METHOD_9 ( IDENT_14 , IDENT_15 , IDENT_18 ) ; if ( ( IDENT_21 . length ) < 2 ) { IDENT_21 = org . IDENT_0 . IDENT_1 . IDENT_19 . METHOD_10 ( IDENT_14 , IDENT_15 , IDENT_18 ) ; } int IDENT_22 = ( ( int ) ( org . IDENT_0 . IDENT_1 . IDENT_19 . METHOD_11 ( IDENT_14 , IDENT_15 ) ) ) ; int IDENT_23 = ( ( int ) ( org . IDENT_0 . IDENT_1 . IDENT_19 . METHOD_11 ( IDENT_18 ) ) ) ; int IDENT_24 = IDENT_22 - IDENT_23 ; java . text . IDENT_25 format = org . IDENT_0 . IDENT_1 . IDENT_19 . IDENT_26 ; double IDENT_27 = 1.0 ; java . lang . String IDENT_28 = null ; if ( ( IDENT_22 >= ( - 3 ) ) && ( IDENT_22 <= 3 ) ) { if ( IDENT_23 < 0 ) { format = org . IDENT_0 . util . text . IDENT_29 . format ( ( - IDENT_23 ) ) ; } else { format = org . IDENT_0 . util . text . IDENT_29 . format ( 0 ) ; } } else if ( IDENT_22 > 3 ) { format = org . IDENT_0 . util . text . IDENT_29 . format ( IDENT_24 ) ; IDENT_27 = java . lang . Math . METHOD_12 ( FLOAT_0 , IDENT_22 ) ; IDENT_28 = java . lang . Integer . toString ( IDENT_22 ) ; } else if ( IDENT_22 < ( - 3 ) ) { format = org . IDENT_0 . util . text . IDENT_29 . format ( IDENT_24 ) ; IDENT_27 = java . lang . Math . METHOD_12 ( FLOAT_0 , IDENT_22 ) ; IDENT_28 = java . lang . Integer . toString ( IDENT_22 ) ; } java . lang . String [ ] IDENT_30 = new java . lang . String [ IDENT_21 . length ] ; for ( int i = 0 ; i < ( IDENT_21 . length ) ; i ++ ) { double value = IDENT_21 [ i ] ; IDENT_30 [ i ] = org . IDENT_0 . IDENT_1 . IDENT_19 . format ( value , format , IDENT_28 , IDENT_27 ) ; } return new org . IDENT_0 . IDENT_1 . METHOD_13 ( IDENT_14 , IDENT_15 , IDENT_21 , IDENT_30 ) ; }
org . junit . Assert . assertTrue ( false ) 