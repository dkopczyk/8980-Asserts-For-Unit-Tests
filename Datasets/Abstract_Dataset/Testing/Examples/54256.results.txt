METHOD_0 ( ) { java . util . Set < java . lang . String > IDENT_0 = new java . util . HashSet < java . lang . String > ( ) ; java . util . Set < java . lang . String > IDENT_1 = new java . util . HashSet < java . lang . String > ( ) ; java . lang . String IDENT_2 = STRING_0 ; IDENT_1 . add ( STRING_1 ) ; IDENT_1 . add ( STRING_2 ) ; IDENT_1 . add ( STRING_3 ) ; IDENT_1 . add ( STRING_4 ) ; IDENT_0 . add ( STRING_1 ) ; IDENT_0 . add ( STRING_2 ) ; IDENT_0 . add ( STRING_3 ) ; IDENT_0 . add ( STRING_4 ) ; IDENT_0 . add ( STRING_5 ) ; eu . IDENT_3 . IDENT_4 . IDENT_5 . context . IDENT_6 . data . IDENT_7 IDENT_8 = new eu . IDENT_3 . IDENT_4 . IDENT_5 . context . IDENT_6 . data . METHOD_1 ( IDENT_1 , IDENT_2 ) ; eu . IDENT_3 . IDENT_4 . IDENT_5 . context . IDENT_6 . data . METHOD_1 IDENT_9 = new eu . IDENT_3 . IDENT_4 . IDENT_5 . context . IDENT_6 . data . METHOD_1 ( IDENT_0 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( o instanceof eu . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 ) { eu . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 p = ( ( eu . IDENT_3 . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 ) ( o ) ) ; return ( p . IDENT_12 . equalsIgnoreCase ( this . IDENT_12 ) ) && ( ( p . IDENT_13 . METHOD_2 ( ) ) == ( this . IDENT_13 . METHOD_2 ( ) ) ) ; } else return false ; }
org . junit . Assert . assertTrue ( IDENT_9 . equals ( IDENT_8 ) ) 