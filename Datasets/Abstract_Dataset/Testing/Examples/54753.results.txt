METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List ) { if ( IDENT_0 == null ) { return de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ; } de . IDENT_1 . IDENT_2 . IDENT_3 type = null ; for ( int i = 1 ; i < ( IDENT_0 . size ( ) ) ; i ++ ) { java . lang . String e = ( ( java . lang . String ) ( IDENT_0 . get ( i ) ) ) ; if ( e . equals ( STRING_0 1 ) ) { if ( ( i + 1 ) >= ( IDENT_0 . size ( ) ) ) { throw new java . lang . IllegalArgumentException ( STRING_1 ) ; } java . lang . String IDENT_5 = ( ( java . lang . String ) ( IDENT_0 . get ( ( i + 1 ) ) ) ) ; switch ( IDENT_5 ) { case STRING_2 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ; break ; case STRING_0 5 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_6 ; break ; case STRING_0 6 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_7 ; break ; case STRING_0 2 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_8 ; break ; case STRING_3 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 ; break ; case STRING_0 3 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_10 ; break ; case STRING_0 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_11 ; break ; case STRING_4 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_12 ; break ; case STRING_5 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_13 ; break ; case STRING_6 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_14 ; break ; case STRING_7 : type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_15 ; break ; default : throw new java . lang . IllegalArgumentException ( ( ( STRING_8 + IDENT_5 ) + STRING_9 ) ) ; } } } if ( type == null ) { type = de . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 ; } org . apache . commons . logging . IDENT_16 . METHOD_2 ( org . IDENT_17 . tc . IDENT_18 . IDENT_2 . IDENT_19 . class ) . debug ( ( ( STRING_0 4 + ( type . toString ( ) ) ) + STRING_0 0 ) ) ; return type ; }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_4 , org . IDENT_17 . tc . IDENT_18 . IDENT_2 . IDENT_19 . METHOD_1 ( null ) ) 