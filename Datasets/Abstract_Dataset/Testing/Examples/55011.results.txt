METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . util . Set < IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . model . IDENT_5 > IDENT_6 ; IDENT_6 = IDENT_7 . METHOD_1 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . Set < IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . model . IDENT_5 > result = new IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . HashSet < IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . model . IDENT_5 > ( ) ; if ( IDENT_0 != null ) { for ( char c : IDENT_0 . METHOD_2 ( ) ) { try { IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . model . IDENT_5 f = IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . model . IDENT_5 . valueOf ( ( "" + c ) ) ; result . add ( f ) ; } catch ( java . lang . IllegalArgumentException e ) { IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . plugin . plugins . IDENT_0 . IDENT_8 . logger . error ( ( STRING_1 + c ) ) ; } } } return result ; }
org . junit . Assert . assertEquals ( IDENT_6 . size ( ) , 5 ) 