METHOD_0 ( ) { com . github . IDENT_0 . core . vo . IDENT_1 IDENT_2 = new com . github . IDENT_0 . core . vo . METHOD_1 ( ) ; java . util . List < java . lang . Integer > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( new java . lang . Integer ( 2 ) ) ; IDENT_3 . add ( new java . lang . Integer ( 3 ) ) ; IDENT_3 . add ( new java . lang . Integer ( 8 ) ) ; IDENT_2 . METHOD_2 ( IDENT_3 ) ; com . github . IDENT_0 . core . vo . IDENT_4 IDENT_5 = mapper . map ( IDENT_2 , com . github . IDENT_0 . core . vo . IDENT_4 . class ) ; int [ ] IDENT_6 = IDENT_5 . METHOD_3 ( ) ; for ( int i = 0 ; i < ( IDENT_3 . size ( ) ) ; i ++ ) { java . lang . Integer IDENT_7 = new java . lang . Integer ( IDENT_3 . get ( i ) ) ; int IDENT_8 = IDENT_6 [ i ] ; "<AssertPlaceHolder>" ; } } get ( IDENT_9 ) { if ( key == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } com . github . IDENT_0 . core . cache . IDENT_10 < IDENT_9 , IDENT_11 > result = IDENT_12 . get ( key ) ; if ( result == null ) { return null ; } else { return result . getValue ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_7 , new java . lang . Integer ( IDENT_8 ) ) 