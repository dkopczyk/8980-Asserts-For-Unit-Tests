METHOD_0 ( ) { java . io . File IDENT_0 = new java . io . File ( IDENT_1 , STRING_0 ) ; org . IDENT_2 . resolver . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_5 , METHOD_1 ) ; java . lang . String [ ] IDENT_6 = resolver . METHOD_2 ( STRING_1 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { java . lang . String [ ] IDENT_7 ; org . IDENT_2 . resolver . IDENT_3 . IDENT_8 < java . lang . String [ ] > future ; org . IDENT_2 . resolver . IDENT_3 . IDENT_9 . IDENT_10 request = new org . IDENT_2 . resolver . IDENT_3 . IDENT_9 . METHOD_3 ( IDENT_11 ) ; MOD_0 ( IDENT_12 ) { future = IDENT_12 . get ( request ) ; if ( future == null ) { future = IDENT_13 . METHOD_4 ( new org . IDENT_2 . resolver . IDENT_3 . IDENT_9 . METHOD_5 ( request ) ) ; IDENT_12 . put ( request , future ) ; if ( org . IDENT_2 . resolver . IDENT_3 . IDENT_9 . logger . METHOD_6 ( ) ) { org . IDENT_2 . resolver . IDENT_3 . IDENT_9 . logger . debug ( java . lang . String . format ( STRING_2 , IDENT_11 ) ) ; } } else { request = METHOD_7 ( request ) ; } } request . METHOD_8 ( ) ; try { IDENT_7 = future . get ( ) ; } catch ( java . lang . IDENT_14 e ) { throw new org . IDENT_2 . resolver . IDENT_3 . METHOD_9 ( java . lang . String . format ( STRING_3 , IDENT_11 ) , e ) ; } catch ( org . IDENT_2 . resolver . IDENT_3 . IDENT_15 e ) { throw new org . IDENT_2 . resolver . IDENT_3 . METHOD_9 ( java . lang . String . format ( STRING_3 , IDENT_11 ) , e ) ; } finally { if ( ( request . METHOD_10 ( ) ) == 0 ) { IDENT_12 . remove ( request ) ; } } return IDENT_7 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_6 . length ) > 0 ) ) 