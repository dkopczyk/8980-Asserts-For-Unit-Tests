METHOD_0 ( ) { try ( org . apache . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . apache . IDENT_0 . IDENT_1 . METHOD_1 ( Integer . MAX_VALUE ) ; org . apache . IDENT_0 . IDENT_4 . IDENT_5 IDENT_6 = new org . apache . IDENT_0 . IDENT_4 . METHOD_2 ( STRING_0 , IDENT_3 ) ; org . apache . IDENT_0 . IDENT_4 . IDENT_7 bytes = new org . apache . IDENT_0 . IDENT_4 . METHOD_3 ( STRING_0 , IDENT_3 ) ) { int count = 100 ; for ( int i = 0 ; i < count ; i ++ ) { IDENT_6 . METHOD_4 ( i , ( i OP_0 2 ) ) ; } IDENT_6 . METHOD_5 ( count ) ; io . netty . buffer . IDENT_8 IDENT_9 = IDENT_6 . METHOD_6 ( ) ; IDENT_9 . METHOD_7 ( ) ; com . IDENT_10 . exec . IDENT_11 . IDENT_12 . IDENT_13 . Builder IDENT_14 = com . IDENT_10 . exec . expr . IDENT_15 . METHOD_8 ( IDENT_6 ) ; io . netty . buffer . IDENT_8 IDENT_16 = com . IDENT_10 . IDENT_17 . IDENT_18 . user . IDENT_19 . METHOD_9 ( IDENT_3 , IDENT_14 , IDENT_9 ) ; bytes . METHOD_5 ( count ) ; com . IDENT_10 . exec . IDENT_11 . IDENT_12 . IDENT_13 . Builder IDENT_20 = com . IDENT_10 . exec . expr . IDENT_15 . METHOD_8 ( bytes ) ; com . IDENT_10 . exec . expr . IDENT_15 . METHOD_10 ( bytes , IDENT_20 . build ( ) , IDENT_16 ) ; for ( int i = 0 ; i < count ; i ++ ) { "<AssertPlaceHolder>" ; } IDENT_16 . METHOD_11 ( ) ; } } get ( com . IDENT_10 . service . job . IDENT_11 . IDENT_21 ) { try { return IDENT_22 . get ( IDENT_23 ) ; } catch ( java . util . concurrent . IDENT_24 ex ) { throw com . google . common . base . IDENT_25 . METHOD_12 ( ex . METHOD_13 ( ) ) ; } }
org . junit . Assert . assertEquals ( ( i OP_0 2 ) , bytes . get ( i ) ) 