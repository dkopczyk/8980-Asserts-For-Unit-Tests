METHOD_0 ( ) { METHOD_1 ( ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_2 ( STRING_0 ) ) . andReturn ( false ) . times ( 1 ) ; IDENT_0 . close ( STRING_0 ) ; org . easymock . EasyMock . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( IDENT_0 . METHOD_4 ( STRING_1 ) ) . andReturn ( STRING_2 ) . times ( 1 ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; org . apache . druid . java . util . http . client . pool . IDENT_1 < java . lang . String > IDENT_2 = pool . METHOD_5 ( STRING_1 ) ; "<AssertPlaceHolder>" ; IDENT_2 . METHOD_6 ( ) ; org . easymock . EasyMock . verify ( IDENT_0 ) ; org . easymock . EasyMock . METHOD_7 ( IDENT_0 ) ; } get ( ) { if ( root . METHOD_8 ( ) ) { return IDENT_3 . METHOD_9 ( ) ; } else { return org . apache . druid . java . util . common . IDENT_4 . IDENT_5 . map ( IDENT_3 . METHOD_9 ( ) , new com . google . common . base . IDENT_6 < java . lang . Object [ ] , java . lang . Object [ ] > ( ) { @ org . apache . druid . sql . calcite . IDENT_7 . Override public java . lang . Object [ ] apply ( final java . lang . Object [ ] input ) { final java . lang . Object [ ] IDENT_8 = new java . lang . Object [ root . fields . size ( ) ] ; for ( int i = 0 ; i < ( root . fields . size ( ) ) ; i ++ ) { IDENT_8 [ i ] = input [ root . fields . get ( i ) . getKey ( ) ] ; } return IDENT_8 ; } } ) ; } }
org . junit . Assert . assertEquals ( STRING_2 , IDENT_2 . get ( ) ) 