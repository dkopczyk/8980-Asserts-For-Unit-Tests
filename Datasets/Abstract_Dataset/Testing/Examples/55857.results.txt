METHOD_0 ( ) { expect ( IDENT_0 . getStatus ( ) ) . andReturn ( IDENT_1 . IDENT_2 ) . times ( 3 ) . andReturn ( IDENT_1 . IDENT_3 ) ; expect ( IDENT_0 . METHOD_1 ( ) ) . andReturn ( response ) ; expect ( IDENT_0 . METHOD_2 ( ) ) . andReturn ( "" ) . andReturn ( STRING_0 ) ; expect ( response . headers ( ) ) . andReturn ( headers ) ; expect ( headers . get ( STRING_1 ) ) . andReturn ( STRING_2 ) ; expect ( IDENT_4 . METHOD_3 ( org . easymock . EasyMock . METHOD_4 ( org . apache . druid . java . util . http . client . IDENT_5 . class ) , org . easymock . EasyMock . METHOD_4 ( org . apache . druid . java . util . http . client . response . IDENT_6 . class ) , org . easymock . EasyMock . eq ( org . apache . druid . indexing . kafka . IDENT_7 . IDENT_8 ) ) ) . andReturn ( com . google . common . util . concurrent . IDENT_9 . METHOD_5 ( IDENT_0 ) ) . times ( 2 ) ; METHOD_6 ( ) ; java . util . Map < java . lang . Integer , java . lang . Long > results = client . METHOD_7 ( org . apache . druid . indexing . kafka . IDENT_7 . IDENT_10 , true ) ; METHOD_8 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { if ( ( size ) < 0 ) { size = 0 ; for ( int i = 0 ; i <= ( IDENT_11 ) ; i ++ ) { int IDENT_12 = IDENT_13 [ i ] ; if ( org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_9 ( IDENT_12 ) ) { size += org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_10 ( IDENT_12 ) ; } else { if ( org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_11 ( IDENT_12 ) ) { if ( ! ( org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_12 ( IDENT_12 ) ) ) { ( size ) ++ ; } } else { size += org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_13 ( ( ( org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_14 ( IDENT_12 ) ) + 1 ) ) ; if ( ! ( org . apache . druid . IDENT_14 . IDENT_15 . IDENT_16 . METHOD_12 ( IDENT_12 ) ) ) { ( size ) OP_0 ; } } } } } return size ; }
org . junit . Assert . assertEquals ( 0 , results . size ( ) ) 