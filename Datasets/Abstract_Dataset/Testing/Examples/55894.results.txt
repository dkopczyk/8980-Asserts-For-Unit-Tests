METHOD_0 ( ) { final org . apache . druid . java . util . http . client . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . apache . druid . java . util . http . client . IDENT_0 . class ) ; org . easymock . EasyMock . expect ( IDENT_1 . METHOD_2 ( org . easymock . EasyMock . METHOD_3 ( ) , org . easymock . EasyMock . METHOD_3 ( ) , org . easymock . EasyMock . METHOD_3 ( ) ) ) . andReturn ( com . google . common . util . concurrent . IDENT_2 . METHOD_4 ( new org . jboss . netty . channel . METHOD_5 ( STRING_0 ) ) ) . times ( 2 ) ; org . easymock . EasyMock . expect ( IDENT_1 . METHOD_2 ( org . easymock . EasyMock . METHOD_3 ( ) , org . easymock . EasyMock . METHOD_3 ( ) , org . easymock . EasyMock . METHOD_3 ( ) ) ) . andReturn ( com . google . common . util . concurrent . IDENT_2 . METHOD_6 ( new org . apache . druid . java . util . http . client . response . METHOD_7 ( org . jboss . netty . handler . codec . http . IDENT_3 . IDENT_4 , new org . jboss . netty . handler . codec . http . METHOD_8 ( org . jboss . netty . handler . codec . http . IDENT_5 . IDENT_6 , org . jboss . netty . handler . codec . http . IDENT_3 . IDENT_4 ) , new java . lang . StringBuilder ( ) ) ) ) . METHOD_9 ( ) ; org . easymock . EasyMock . replay ( IDENT_1 ) ; try ( org . apache . druid . indexing . common . IDENT_7 IDENT_8 = METHOD_10 ( IDENT_1 , ( id ) -> org . apache . druid . IDENT_9 . IDENT_10 . create ( id , INT_0 , ( - 1 ) ) ) ) { final org . apache . druid . java . util . http . client . response . METHOD_7 response = IDENT_8 . METHOD_11 ( STRING_1 , IDENT_11 . IDENT_12 , "test" , null , true ) ; "<AssertPlaceHolder>" ; } } getStatus ( ) { return status ; }
org . junit . Assert . assertEquals ( IDENT_3 . IDENT_4 , response . getStatus ( ) ) 