METHOD_0 ( ) { org . apache . druid . indexing . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . druid . indexing . IDENT_0 . METHOD_1 ( new org . apache . druid . indexing . IDENT_3 . METHOD_2 ( STRING_0 , STRING_1 , STRING_2 , 10 , STRING_3 ) , 2 , com . google . common . collect . IDENT_4 . of ( STRING_4 , STRING_5 ) , com . google . common . collect . IDENT_4 . of ( STRING_6 , STRING_7 ) , org . apache . druid . java . util . common . IDENT_5 . of ( STRING_8 ) ) ; com . fasterxml . jackson . databind . IDENT_6 mapper = new org . apache . druid . jackson . METHOD_3 ( ) ; final org . apache . druid . indexing . IDENT_0 . METHOD_1 IDENT_7 = mapper . METHOD_4 ( mapper . METHOD_5 ( IDENT_2 ) , org . apache . druid . indexing . IDENT_0 . METHOD_1 . class ) ; "<AssertPlaceHolder>" ; } of ( java . lang . String ) { try { return new org . joda . time . METHOD_6 ( IDENT_8 , org . joda . time . IDENT_9 . IDENT_10 . METHOD_7 ( ) ) ; } catch ( java . lang . IllegalArgumentException ex ) { try { return new org . joda . time . METHOD_6 ( java . lang . Long . valueOf ( IDENT_8 ) , org . joda . time . IDENT_9 . IDENT_10 . METHOD_7 ( ) ) ; } catch ( java . lang . IllegalArgumentException IDENT_11 ) { throw ex ; } } }
org . junit . Assert . assertEquals ( IDENT_2 , IDENT_7 ) 