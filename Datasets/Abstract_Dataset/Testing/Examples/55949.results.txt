METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; org . apache . druid . query . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 ; org . apache . druid . query . IDENT_1 . IDENT_5 IDENT_6 = new org . apache . druid . query . IDENT_1 . METHOD_1 ( ) ; IDENT_6 . METHOD_2 ( ) ; IDENT_6 . METHOD_2 ( ) ; IDENT_6 . METHOD_2 ( ) ; java . util . Map < java . lang . String , java . lang . Object > IDENT_7 = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; IDENT_7 . put ( IDENT_0 , IDENT_6 . get ( ) ) ; java . util . List < org . apache . druid . query . IDENT_1 . IDENT_8 > IDENT_9 = com . google . common . collect . Lists . newArrayList ( new org . apache . druid . query . IDENT_1 . IDENT_2 . METHOD_3 ( STRING_1 , FLOAT_0 ) , new org . apache . druid . query . IDENT_1 . IDENT_2 . METHOD_4 ( STRING_0 , IDENT_0 ) ) ; IDENT_4 = new org . apache . druid . query . IDENT_1 . IDENT_2 . METHOD_5 ( STRING_2 , IDENT_9 ) ; "<AssertPlaceHolder>" ; } valueOf ( int ) { if ( IDENT_10 <= STRING_3 ) { return IDENT_10 - STRING_4 ; } if ( IDENT_10 <= STRING_5 ) { return IDENT_10 - STRING_6 ; } if ( IDENT_10 <= STRING_7 ) { return IDENT_10 - STRING_8 ; } if ( IDENT_10 <= STRING_9 ) { return IDENT_10 - STRING_10 ; } if ( IDENT_10 <= STRING_11 ) { return IDENT_10 - STRING_12 ; } return IDENT_10 ; }
org . junit . Assert . assertEquals ( java . lang . Long . valueOf ( 6 ) , IDENT_4 . compute ( IDENT_7 ) ) 