METHOD_0 ( ) { final org . apache . druid . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . druid . IDENT_0 . METHOD_1 ( false ) ; final java . util . concurrent . atomic . IDENT_3 IDENT_4 = new java . util . concurrent . atomic . METHOD_2 ( false ) ; IDENT_2 . METHOD_3 ( new java . io . METHOD_4 ( ) { @ org . apache . druid . IDENT_0 . Override public void close ( ) { IDENT_4 . set ( true ) ; } } ) ; run ( IDENT_2 , com . google . common . util . concurrent . IDENT_5 . METHOD_5 ( ) ) ; "<AssertPlaceHolder>" ; } get ( ) { if ( root . METHOD_6 ( ) ) { return IDENT_6 . METHOD_7 ( ) ; } else { return org . apache . druid . java . util . common . IDENT_7 . IDENT_8 . map ( IDENT_6 . METHOD_7 ( ) , new com . google . common . base . IDENT_9 < java . lang . Object [ ] , java . lang . Object [ ] > ( ) { @ org . apache . druid . sql . calcite . IDENT_10 . Override public java . lang . Object [ ] apply ( final java . lang . Object [ ] input ) { final java . lang . Object [ ] IDENT_11 = new java . lang . Object [ root . fields . size ( ) ] ; for ( int i = 0 ; i < ( root . fields . size ( ) ) ; i ++ ) { IDENT_11 [ i ] = input [ root . fields . get ( i ) . getKey ( ) ] ; } return IDENT_11 ; } } ) ; } }
org . junit . Assert . assertTrue ( IDENT_4 . get ( ) ) 