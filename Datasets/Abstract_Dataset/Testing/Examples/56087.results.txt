METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > actual = resource . METHOD_1 ( IDENT_0 , STRING_0 , STRING_1 ) ; java . util . Map < java . lang . String , java . lang . Object > expected = com . google . common . collect . ImmutableMap . of ( STRING_2 , com . google . common . collect . ImmutableMap . of ( org . apache . druid . server . IDENT_1 . IDENT_2 , com . google . common . collect . IDENT_3 . of ( STRING_3 ) , org . apache . druid . server . IDENT_1 . IDENT_4 , com . google . common . collect . IDENT_3 . of ( STRING_4 ) ) , STRING_5 , com . google . common . collect . ImmutableMap . of ( org . apache . druid . server . IDENT_1 . IDENT_2 , com . google . common . collect . IDENT_3 . of ( STRING_3 , STRING_5 0 , STRING_6 ) , org . apache . druid . server . IDENT_1 . IDENT_4 , com . google . common . collect . IDENT_3 . of ( STRING_4 , STRING_7 , STRING_8 ) ) , STRING_9 , com . google . common . collect . ImmutableMap . of ( org . apache . druid . server . IDENT_1 . IDENT_2 , com . google . common . collect . IDENT_3 . of ( STRING_3 ) , org . apache . druid . server . IDENT_1 . IDENT_4 , com . google . common . collect . IDENT_3 . of ( STRING_4 ) ) ) ; org . easymock . EasyMock . verify ( IDENT_5 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } verify ( java . lang . IDENT_7 , java . lang . IDENT_7 ) { java . util . Iterator < org . apache . druid . query . Result < org . apache . druid . query . select . IDENT_8 > > IDENT_9 = IDENT_10 . iterator ( ) ; java . util . Iterator < org . apache . druid . query . Result < org . apache . druid . query . select . IDENT_8 > > IDENT_11 = IDENT_12 . iterator ( ) ; while ( IDENT_9 . hasNext ( ) ) { org . apache . druid . query . Result < org . apache . druid . query . select . IDENT_8 > expected = IDENT_9 . next ( ) ; org . apache . druid . query . Result < org . apache . druid . query . select . IDENT_8 > actual = IDENT_11 . next ( ) ; org . junit . Assert . assertEquals ( expected . METHOD_2 ( ) , actual . METHOD_2 ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . Integer > entry : expected . getValue ( ) . METHOD_3 ( ) . entrySet ( ) ) { org . junit . Assert . assertEquals ( entry . getValue ( ) , actual . getValue ( ) . METHOD_3 ( ) . get ( entry . getKey ( ) ) ) ; } org . junit . Assert . assertEquals ( expected . getValue ( ) . METHOD_4 ( ) , actual . getValue ( ) . METHOD_4 ( ) ) ; org . junit . Assert . assertEquals ( expected . getValue ( ) . METHOD_5 ( ) , actual . getValue ( ) . METHOD_5 ( ) ) ; java . util . Iterator < org . apache . druid . query . select . IDENT_13 > IDENT_14 = expected . getValue ( ) . METHOD_6 ( ) . iterator ( ) ; java . util . Iterator < org . apache . druid . query . select . IDENT_13 > IDENT_15 = actual . getValue ( ) . METHOD_6 ( ) . iterator ( ) ; while ( IDENT_14 . hasNext ( ) ) { org . apache . druid . query . select . IDENT_13 IDENT_16 = IDENT_14 . next ( ) ; org . apache . druid . query . select . IDENT_13 IDENT_17 = IDENT_15 . next ( ) ; org . junit . Assert . assertEquals ( IDENT_16 . METHOD_2 ( ) , IDENT_17 . METHOD_2 ( ) ) ; org . junit . Assert . assertEquals ( IDENT_16 . METHOD_7 ( ) , IDENT_17 . METHOD_7 ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . Object > ex : IDENT_16 . METHOD_8 ( ) . entrySet ( ) ) { java . lang . Object IDENT_18 = IDENT_17 . METHOD_8 ( ) . get ( ex . getKey ( ) ) ; if ( ( IDENT_17 . METHOD_8 ( ) . get ( ex . getKey ( ) ) ) instanceof java . lang . Double ) { IDENT_18 = ( ( java . lang . Double ) ( IDENT_18 ) ) . METHOD_9 ( ) ; } org . junit . Assert . assertEquals ( ( STRING_10 + ( ex . getKey ( ) ) ) , ex . getValue ( ) , IDENT_18 ) ; } } if ( IDENT_15 . hasNext ( ) ) { throw new org . apache . druid . java . util . common . METHOD_10 ( STRING_11 ) ; } } if ( IDENT_11 . hasNext ( ) ) { throw new org . apache . druid . java . util . common . METHOD_10 ( STRING_12 ) ; } }
org . junit . Assert . assertEquals ( expected , actual ) 