METHOD_0 ( ) { final java . lang . String IDENT_0 = org . IDENT_1 . persistence . service . IDENT_2 . METHOD_1 ( org . IDENT_1 . persistence . model . schema . Schema . class . METHOD_2 ( ) ) ; final org . IDENT_1 . converter . schema . IDENT_3 IDENT_4 = IDENT_5 . IDENT_6 . getInstance ( org . IDENT_1 . converter . schema . IDENT_3 . class ) ; final java . lang . String IDENT_7 = STRING_0 ; final java . lang . String IDENT_8 = STRING_1 ; final java . lang . String IDENT_9 = STRING_2 ; final java . util . Optional < org . IDENT_1 . persistence . model . schema . Schema > IDENT_10 = IDENT_4 . parse ( STRING_3 , IDENT_9 , IDENT_0 , IDENT_7 , IDENT_8 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String , java . lang . String , java . lang . String , java . lang . String , java . util . Optional ) { final java . util . Optional < org . w3c . dom . Document > IDENT_11 = METHOD_3 ( IDENT_12 ) ; if ( ! ( IDENT_11 . METHOD_4 ( ) ) ) { org . IDENT_1 . converter . schema . IDENT_13 . LOG . error ( STRING_4 , IDENT_12 ) ; return java . util . Optional . empty ( ) ; } final org . w3c . dom . Document document = IDENT_11 . get ( ) ; final java . util . Optional < org . w3c . dom . IDENT_14 > IDENT_15 = METHOD_5 ( document , IDENT_12 ) ; if ( ! ( IDENT_15 . METHOD_4 ( ) ) ) { org . IDENT_1 . converter . schema . IDENT_13 . LOG . error ( STRING_5 , IDENT_12 ) ; return java . util . Optional . empty ( ) ; } final org . IDENT_1 . persistence . model . schema . Schema schema = METHOD_6 ( IDENT_0 , IDENT_7 , IDENT_8 ) ; final java . lang . String IDENT_16 ; if ( ( IDENT_8 != null ) && ( ! ( IDENT_8 . trim ( ) . isEmpty ( ) ) ) ) { IDENT_16 = IDENT_8 ; } else { IDENT_16 = org . IDENT_1 . persistence . model . schema . utils . IDENT_17 . METHOD_7 ( schema . METHOD_8 ( ) ) ; } final org . w3c . dom . IDENT_14 fields = IDENT_15 . get ( ) ; final IDENT_18 . collection . List < IDENT_18 . IDENT_19 < org . IDENT_1 . persistence . model . schema . IDENT_20 , java . util . Optional < java . lang . Boolean > > > IDENT_21 = METHOD_9 ( fields , IDENT_16 ) ; if ( IDENT_21 . isEmpty ( ) ) { org . IDENT_1 . converter . schema . IDENT_13 . LOG . error ( STRING_6 , IDENT_12 ) ; return java . util . Optional . empty ( ) ; } final IDENT_18 . collection . List < IDENT_18 . IDENT_19 < org . IDENT_1 . persistence . model . schema . IDENT_22 , java . util . Optional < java . lang . Boolean > > > IDENT_23 = METHOD_10 ( IDENT_21 ) ; if ( IDENT_23 . isEmpty ( ) ) { org . IDENT_1 . converter . schema . IDENT_13 . LOG . error ( STRING_7 , IDENT_12 ) ; return java . util . Optional . empty ( ) ; } for ( final IDENT_18 . IDENT_19 < org . IDENT_1 . persistence . model . schema . IDENT_22 , java . util . Optional < java . lang . Boolean > > IDENT_24 : IDENT_23 ) { final org . IDENT_1 . persistence . model . schema . IDENT_25 IDENT_26 = METHOD_11 ( IDENT_24 , IDENT_27 ) ; schema . METHOD_12 ( IDENT_26 ) ; } final java . lang . String IDENT_28 = IDENT_16 + ( org . IDENT_1 . converter . schema . IDENT_13 . IDENT_29 ) ; org . IDENT_1 . persistence . model . schema . utils . IDENT_17 . METHOD_13 ( schema , IDENT_28 , IDENT_30 ) ; final java . util . Optional < org . IDENT_1 . persistence . model . schema . proxy . IDENT_31 > IDENT_32 = java . util . Optional . METHOD_14 ( IDENT_33 . get ( ) . METHOD_15 ( schema ) ) ; if ( ! ( IDENT_32 . METHOD_4 ( ) ) ) { return java . util . Optional . empty ( ) ; } return java . util . Optional . METHOD_14 ( IDENT_32 . get ( ) . METHOD_16 ( ) ) ; }
org . junit . Assert . assertTrue ( IDENT_10 . METHOD_4 ( ) ) 