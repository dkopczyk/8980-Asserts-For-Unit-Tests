METHOD_0 ( ) { final java . util . concurrent . atomic . IDENT_0 < java . lang . RuntimeException > exception = new java . util . concurrent . atomic . IDENT_0 < java . lang . RuntimeException > ( null ) ; final long time = IDENT_1 . METHOD_1 ( ) ; java . lang . Thread IDENT_2 = new java . lang . Thread ( ) { public void run ( ) { try { long t = IDENT_1 . METHOD_1 ( ) ; if ( time != t ) { throw new java . lang . RuntimeException ( ( ( ( STRING_0 + time ) + STRING_1 ) + t ) ) ; } } catch ( java . lang . RuntimeException e ) { e . printStackTrace ( ) ; exception . set ( e ) ; } } } ; IDENT_2 . start ( ) ; IDENT_2 . join ( ) ; "<AssertPlaceHolder>" ; } get ( ) { return object ; }
org . junit . Assert . assertSame ( null , exception . get ( ) ) 