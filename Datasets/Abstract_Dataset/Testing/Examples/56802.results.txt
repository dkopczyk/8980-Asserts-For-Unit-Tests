METHOD_0 ( ) { java . lang . RuntimeException expected = new java . lang . RuntimeException ( ) ; expect ( mock . METHOD_1 ( METHOD_2 ( ) ) ) . METHOD_3 ( expected ) ; replay ( mock ) ; try { mock . METHOD_1 ( STRING_0 ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . lang . RuntimeException IDENT_0 ) { "<AssertPlaceHolder>" ; } } replay ( java . lang . Object [ ] ) { for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { try { org . easymock . EasyMock . METHOD_4 ( IDENT_1 [ i ] ) . replay ( ) ; } catch ( java . lang . RuntimeException e ) { throw org . easymock . EasyMock . METHOD_5 ( IDENT_1 . length , i , e ) ; } catch ( java . lang . IDENT_2 e ) { throw org . easymock . EasyMock . METHOD_6 ( IDENT_1 . length , i , e ) ; } } }
org . junit . Assert . assertSame ( expected , IDENT_0 ) 