METHOD_0 ( ) { java . lang . Long value = 1L ; expect ( mock . METHOD_1 ( value ) ) . andReturn ( "test" ) ; replay ( mock ) ; "<AssertPlaceHolder>" ; verify ( mock ) ; } replay ( java . lang . Object [ ] ) { for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { try { org . easymock . EasyMock . METHOD_2 ( IDENT_0 [ i ] ) . replay ( ) ; } catch ( java . lang . RuntimeException e ) { throw org . easymock . EasyMock . METHOD_3 ( IDENT_0 . length , i , e ) ; } catch ( java . lang . IDENT_1 e ) { throw org . easymock . EasyMock . METHOD_4 ( IDENT_0 . length , i , e ) ; } } }
org . junit . Assert . assertEquals ( "test" , mock . METHOD_1 ( value ) ) 