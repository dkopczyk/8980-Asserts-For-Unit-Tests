METHOD_0 ( ) { java . util . List < java . lang . Integer > list = METHOD_1 ( java . util . ArrayList . class ) . METHOD_2 ( STRING_0 , java . lang . Object . class ) . METHOD_3 ( ) ; expect ( list . add ( 1 ) ) . andReturn ( true ) ; expect ( list . add ( 2 ) ) . andReturn ( true ) ; replay ( list ) ; "<AssertPlaceHolder>" ; try { list . add ( 2 ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IDENT_0 e ) { } } replay ( java . lang . Object [ ] ) { for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { try { org . easymock . EasyMock . METHOD_4 ( IDENT_1 [ i ] ) . replay ( ) ; } catch ( java . lang . RuntimeException e ) { throw org . easymock . EasyMock . METHOD_5 ( IDENT_1 . length , i , e ) ; } catch ( java . lang . IDENT_0 e ) { throw org . easymock . EasyMock . METHOD_6 ( IDENT_1 . length , i , e ) ; } } }
org . junit . Assert . assertTrue ( list . isEmpty ( ) ) 