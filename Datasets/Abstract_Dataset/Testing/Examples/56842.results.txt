METHOD_0 ( ) { org . easymock . IDENT_0 . IDENT_1 < java . lang . String > replay = ( ) -> { org . easymock . tests . IDENT_2 mock = METHOD_1 ( . class ) ; expect ( mock . METHOD_2 ( "test" ) ) . andReturn ( STRING_0 ) ; replay ( mock ) ; java . lang . String s = mock . METHOD_2 ( "test" ) ; verify ( mock ) ; return s ; } ; org . easymock . IDENT_0 . IDENT_3 service = org . easymock . IDENT_0 . IDENT_4 . METHOD_3 ( org . easymock . IDENT_0 . IDENT_5 . IDENT_6 ) ; java . util . List < org . easymock . IDENT_0 . IDENT_1 < java . lang . String > > IDENT_7 = java . util . Collections . METHOD_4 ( org . easymock . IDENT_0 . IDENT_5 . IDENT_6 , replay ) ; java . util . List < org . easymock . IDENT_0 . IDENT_8 < java . lang . String > > results = service . METHOD_5 ( IDENT_7 ) ; for ( org . easymock . IDENT_0 . IDENT_8 < java . lang . String > future : results ) { "<AssertPlaceHolder>" ; } } get ( ) { return i ; }
org . junit . Assert . assertEquals ( STRING_0 , future . get ( ) ) 