METHOD_0 ( ) { java . lang . IDENT_0 mock = METHOD_1 ( org . easymock . test . IDENT_0 . class ) ; expect ( mock . append ( "test" ) ) . andReturn ( mock ) ; replay ( mock ) ; "<AssertPlaceHolder>" ; verify ( mock ) ; } replay ( java . lang . Object [ ] ) { for ( int i = 0 ; i < ( IDENT_1 . length ) ; i ++ ) { try { org . easymock . EasyMock . METHOD_2 ( IDENT_1 [ i ] ) . replay ( ) ; } catch ( java . lang . RuntimeException e ) { throw org . easymock . EasyMock . METHOD_3 ( IDENT_1 . length , i , e ) ; } catch ( java . lang . IDENT_2 e ) { throw org . easymock . EasyMock . METHOD_4 ( IDENT_1 . length , i , e ) ; } } }
org . junit . Assert . assertSame ( mock , mock . append ( "test" ) ) 