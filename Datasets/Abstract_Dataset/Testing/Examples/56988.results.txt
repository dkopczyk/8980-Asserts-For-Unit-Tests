METHOD_0 ( ) { java . io . File IDENT_0 = METHOD_1 ( STRING_0 ) ; java . lang . String [ ] IDENT_1 = new java . lang . String [ ] { STRING_1 9 , STRING_2 2 , STRING_3 , ( IDENT_2 ) + STRING_1 5 , STRING_4 , STRING_1 2 , STRING_5 , STRING_1 , STRING_6 , STRING_1 3 , STRING_2 1 , STRING_1 0 , STRING_1 8 , STRING_7 , STRING_8 , IDENT_2 . getAbsolutePath ( ) , STRING_1 1 , IDENT_2 . getAbsolutePath ( ) , STRING_1 4 , STRING_2 , STRING_1 7 , STRING_9 } ; METHOD_2 ( IDENT_1 , IDENT_2 ) ; java . lang . String path = ( IDENT_2 ) + STRING_2 0 ; java . lang . String xml = METHOD_3 ( path ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { java . lang . StringBuffer IDENT_3 = new java . lang . StringBuffer ( 1000 ) ; java . io . IDENT_4 reader = new java . io . METHOD_4 ( new java . io . METHOD_5 ( IDENT_5 ) ) ; char [ ] buf = new char [ INT_0 ] ; int IDENT_6 = 0 ; while ( ( IDENT_6 = reader . read ( buf ) ) != ( - 1 ) ) { java . lang . String IDENT_7 = java . lang . String . valueOf ( buf , 0 , IDENT_6 ) ; IDENT_3 . append ( IDENT_7 ) ; buf = new char [ INT_0 ] ; } reader . close ( ) ; return IDENT_3 . toString ( ) ; }
org . junit . Assert . assertTrue ( xml . contains ( STRING_1 6 ) ) 