METHOD_0 ( ) { java . util . Map < java . lang . String , java . util . Set < java . lang . String > > IDENT_0 = new java . util . HashMap ( ) ; IDENT_0 . put ( STRING_0 , java . util . Collections . METHOD_1 ( STRING_1 ) ) ; IDENT_0 . put ( STRING_2 , java . util . Collections . METHOD_1 ( STRING_3 ) ) ; client . METHOD_2 ( IDENT_1 , tableName , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . nio . ByteBuffer , java . lang . String ) { try { java . util . Map < java . lang . String , java . util . Set < org . apache . hadoop . io . IDENT_2 > > IDENT_0 = METHOD_4 ( IDENT_3 ) . METHOD_5 ( ) . METHOD_3 ( tableName ) ; java . util . Map < java . lang . String , java . util . Set < java . lang . String > > ret = new java . util . HashMap ( ) ; for ( java . util . Map . Entry < java . lang . String , java . util . Set < org . apache . hadoop . io . IDENT_2 > > entry : IDENT_0 . entrySet ( ) ) { java . util . Set < java . lang . String > value = new java . util . HashSet ( ) ; ret . put ( entry . getKey ( ) , value ) ; for ( org . apache . hadoop . io . IDENT_2 val : entry . getValue ( ) ) { value . add ( val . toString ( ) ) ; } } return ret ; } catch ( java . lang . Exception e ) { METHOD_6 ( e ) ; return null ; } }
org . junit . Assert . assertEquals ( IDENT_0 , client . METHOD_3 ( IDENT_1 , tableName ) ) 