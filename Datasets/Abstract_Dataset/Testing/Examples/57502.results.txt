METHOD_0 ( ) { final java . util . Collection < uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . IDENT_4 > IDENT_5 = java . util . Arrays . asList ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 ( STRING_0 , 1 , 10 , 8 , 10 ) , new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 ( STRING_1 , 1 , 10 , 8 , 10 ) , new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 ( STRING_2 , 1 , 10 , 8 , 10 ) , new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 ( STRING_3 , 2 , INT_0 , INT_1 , INT_2 ) , new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 ( STRING_4 , 2 , INT_0 , INT_1 , INT_2 ) ) ; final java . util . Collection < uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 > IDENT_7 = java . util . Arrays . asList ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 . Builder ( STRING_5 ) . model ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( STRING_0 ) ) . model ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( STRING_1 ) ) . model ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( STRING_2 ) ) . build ( ) , new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 . Builder ( STRING_6 ) . model ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( STRING_3 ) ) . model ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( STRING_4 ) ) . build ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . util . Collection ) { java . util . Map < java . lang . String , uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 > map = new java . util . HashMap < java . lang . String , uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 > ( ) ; for ( uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 record : records ) { java . lang . String ac = uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 . METHOD_4 ( record ) ; uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . IDENT_6 IDENT_8 ; if ( map . containsKey ( ac ) ) { IDENT_8 = map . get ( ac ) ; } else { IDENT_8 = new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_5 ( ac ) ; map . put ( ac , IDENT_8 ) ; } IDENT_8 . METHOD_6 ( new uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . model . METHOD_2 ( record . METHOD_7 ( ) ) ) ; } return map . values ( ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , uk . ac . IDENT_0 . IDENT_1 . IDENT_2 . io . IDENT_3 . METHOD_1 . METHOD_3 ( IDENT_5 ) ) 