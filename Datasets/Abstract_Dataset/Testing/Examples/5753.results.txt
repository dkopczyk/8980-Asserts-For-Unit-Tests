METHOD_0 ( ) { org . apache . accumulo . test . IDENT_0 . log . info ( STRING_0 ) ; try ( org . apache . accumulo . core . client . IDENT_1 client = org . apache . accumulo . core . client . IDENT_2 . METHOD_1 ( ) . from ( METHOD_2 ( ) ) . build ( ) ) { METHOD_3 ( client , 15 , 1 ) ; java . lang . String tableName = new java . lang . String ( ) ; java . util . Iterator < java . lang . String > iterator = client . METHOD_4 ( ) . list ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { java . lang . String IDENT_3 = iterator . next ( ) ; if ( ! ( IDENT_3 . startsWith ( ( ( IDENT_4 . IDENT_5 . name ( ) ) + STRING_1 ) ) ) ) { tableName = IDENT_3 ; } } org . apache . accumulo . core . client . IDENT_6 IDENT_7 = client . METHOD_5 ( tableName , new org . apache . accumulo . core . client . METHOD_6 ( ) ) ; byte [ ] data = new byte [ 10 ] ; for ( int j = 15 ; j < INT_0 ; j += 1 ) { for ( int i = 0 ; i < ( ( data . length ) - 1 ) ; i ++ ) { data [ i ] = ( ( byte ) ( j ) ) ; } for ( int i = 0 ; i < INT_1 ; i ++ ) { data [ ( ( data . length ) - 1 ) ] = ( ( byte ) ( i ) ) ; org . apache . accumulo . core . data . IDENT_8 m = new org . apache . accumulo . core . data . METHOD_7 ( data ) ; m . put ( STRING_2 , STRING_3 , "value" ) ; IDENT_7 . METHOD_8 ( m ) ; } } IDENT_7 . close ( ) ; client . METHOD_4 ( ) . METHOD_9 ( tableName , new org . apache . hadoop . io . METHOD_10 ( ) , new org . apache . hadoop . io . METHOD_10 ( STRING_4 ) , true ) ; while ( ( client . METHOD_4 ( ) . METHOD_11 ( tableName ) . size ( ) ) == 0 ) { java . lang . Thread . sleep ( INT_2 ) ; } "<AssertPlaceHolder>" ; } } METHOD_4 ( ) { return context . METHOD_4 ( ) ; }
org . junit . Assert . assertTrue ( ( ( client . METHOD_4 ( ) . METHOD_11 ( tableName ) . size ( ) ) > 0 ) ) 