METHOD_0 ( ) { final java . lang . String [ ] res = org . eclipse . IDENT_0 . Utils . METHOD_1 ( "" , STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , char , int ) { if ( ( values == null ) || ( ( values . length ( ) ) == 0 ) ) { return org . eclipse . IDENT_0 . Utils . IDENT_1 ; } final java . util . List < java . lang . String > tokens = new java . util . ArrayList < java . lang . String > ( ( ( values . length ( ) ) / 10 ) ) ; final char [ ] IDENT_2 = values . METHOD_2 ( ) ; final int len = IDENT_2 . length ; int IDENT_3 = - 1 ; int IDENT_4 = 0 ; int IDENT_5 = 0 ; int matches = 0 ; while ( java . lang . IDENT_6 . METHOD_3 ( IDENT_2 [ IDENT_5 ] ) ) { IDENT_5 ++ ; } IDENT_4 = IDENT_5 ; do { if ( ( IDENT_2 [ IDENT_5 ] ) == STRING_1 ) { IDENT_5 += 2 ; continue ; } else if ( ( IDENT_2 [ IDENT_5 ] ) == STRING_2 ) { if ( IDENT_3 < 0 ) { IDENT_3 = IDENT_5 ; } else { IDENT_3 = - 1 ; } IDENT_5 ++ ; continue ; } else if ( ( ( IDENT_2 [ IDENT_5 ] ) == IDENT_7 ) && ( IDENT_3 < 0 ) ) { matches ++ ; if ( matches > IDENT_8 ) { break ; } int IDENT_9 = IDENT_5 - 1 ; while ( ( IDENT_9 > 0 ) && ( java . lang . IDENT_6 . METHOD_3 ( IDENT_2 [ IDENT_9 ] ) ) ) { IDENT_9 OP_0 ; } final int count = ( IDENT_9 - IDENT_4 ) + 1 ; if ( count > 0 ) { tokens . add ( new java . lang . String ( IDENT_2 , IDENT_4 , count ) ) ; } IDENT_5 ++ ; while ( ( IDENT_5 < len ) && ( java . lang . IDENT_6 . METHOD_3 ( IDENT_2 [ IDENT_5 ] ) ) ) { IDENT_5 ++ ; } IDENT_4 = IDENT_5 ; continue ; } IDENT_5 ++ ; } while ( IDENT_5 < len ) ; if ( IDENT_3 > ( - 1 ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_3 + IDENT_3 ) ) ; } int IDENT_9 = len - 1 ; while ( ( IDENT_9 > 0 ) && ( java . lang . IDENT_6 . METHOD_3 ( IDENT_2 [ IDENT_9 ] ) ) ) { IDENT_9 OP_0 ; } final int count = ( IDENT_9 - IDENT_4 ) + 1 ; if ( count > 0 ) { tokens . add ( new java . lang . String ( IDENT_2 , IDENT_4 , count ) ) ; } return tokens . toArray ( new java . lang . String [ tokens . size ( ) ] ) ; }
org . junit . Assert . assertEquals ( res . length , 0 ) 