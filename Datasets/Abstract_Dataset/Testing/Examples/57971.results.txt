METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . Object > expected = new java . util . HashMap ( ) ; expected . put ( "/" , new java . util . HashMap ( ) ) ; java . util . Map < ? , ? > actual = IDENT_0 . METHOD_1 ( org . eclipse . IDENT_1 . json . test . IDENT_2 . IDENT_3 , java . util . Map . class ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . Class ) { try { if ( ( IDENT_4 ) == null ) IDENT_4 = METHOD_2 ( ) ; if ( IDENT_5 != null ) { return IDENT_4 . METHOD_3 ( string , IDENT_5 ) ; } @ org . eclipse . IDENT_1 . json . METHOD_4 ( STRING_0 ) IDENT_6 result = ( ( IDENT_6 ) ( IDENT_4 . METHOD_3 ( string , java . lang . Object . class ) ) ) ; return result ; } catch ( com . fasterxml . jackson . databind . IDENT_7 | java . lang . IllegalArgumentException ex ) { if ( ( ( ex instanceof com . fasterxml . jackson . databind . IDENT_7 ) && ( ex . getMessage ( ) . contains ( org . eclipse . IDENT_1 . json . IDENT_8 . IDENT_9 ) ) ) || ( ( ex instanceof java . lang . IllegalArgumentException ) && ( ( ex . METHOD_5 ( ) ) instanceof java . lang . IDENT_10 ) ) ) { try { if ( ( IDENT_11 ) == null ) IDENT_11 = METHOD_6 ( ) ; return IDENT_11 . METHOD_3 ( string , IDENT_5 ) ; } catch ( java . lang . Exception IDENT_12 ) { throw ex ; } } throw ex ; } }
org . junit . Assert . assertEquals ( expected , actual ) 