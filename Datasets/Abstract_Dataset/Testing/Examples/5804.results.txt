METHOD_0 ( ) { org . apache . activemq . artemis . utils . collections . IDENT_0 < org . apache . activemq . artemis . utils . collections . IDENT_1 . IDENT_2 > set = new org . apache . activemq . artemis . utils . collections . METHOD_1 ( IDENT_3 :: new ) ; java . util . concurrent . IDENT_4 executor = java . util . concurrent . IDENT_5 . METHOD_2 ( ) ; final int IDENT_6 = 16 ; final int IDENT_7 = 1000 ; java . util . List < java . util . concurrent . IDENT_8 < ? > > IDENT_9 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < IDENT_6 ; i ++ ) { final int IDENT_10 = i ; IDENT_9 . add ( executor . METHOD_3 ( ( ) -> { java . util . IDENT_11 random = new java . util . METHOD_4 ( ) ; for ( int j = 0 ; j < IDENT_7 ; j ++ ) { long key = java . lang . Math . METHOD_5 ( random . METHOD_6 ( ) ) ; key OP_0 key OP_1 ( IDENT_10 + 1 ) ; set . add ( new org . apache . activemq . artemis . utils . collections . METHOD_7 ( key ) ) ; } } ) ) ; IDENT_9 . add ( executor . METHOD_3 ( ( ) -> { Iterator < org . apache . activemq . artemis . utils . collections . METHOD_7 > iterator = set . METHOD_8 ( ) ; while ( iterator . hasNext ( ) ) { iterator . next ( ) ; } } ) ) ; } for ( java . util . concurrent . IDENT_8 < ? > future : IDENT_9 ) { future . get ( ) ; } "<AssertPlaceHolder>" ; executor . METHOD_9 ( ) ; } size ( ) { return IDENT_12 . size ( ) ; }
org . junit . Assert . assertEquals ( set . size ( ) , ( IDENT_7 * IDENT_6 ) ) 