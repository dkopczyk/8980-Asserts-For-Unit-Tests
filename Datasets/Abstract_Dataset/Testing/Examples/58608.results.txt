METHOD_0 ( ) { monitor . METHOD_1 ( true ) ; org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 result = handler . METHOD_2 ( false , monitor ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( boolean , org . eclipse . core . runtime . IDENT_3 ) { try { if ( monitor . METHOD_3 ( ) ) { return org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 . IDENT_4 ; } IDENT_5 . METHOD_4 ( IDENT_5 . METHOD_5 ( ) ) ; org . eclipse . core . resources . IDENT_6 [ ] IDENT_7 = org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_8 . METHOD_6 ( ) ; for ( org . eclipse . core . resources . IDENT_6 project : IDENT_7 ) { if ( ! ( project . equals ( IDENT_5 . METHOD_5 ( ) ) ) ) { java . lang . String uri = org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_9 . METHOD_7 ( project ) ; connection . METHOD_8 ( new org . eclipse . IDENT_10 . METHOD_9 ( org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_11 . METHOD_10 ( uri ) , java . util . Collections . emptyList ( ) ) ) ; } } if ( IDENT_12 ) { org . eclipse . core . resources . IDENT_13 . METHOD_11 ( ) . build ( org . eclipse . core . resources . IDENT_14 . IDENT_15 , monitor ) ; org . eclipse . core . resources . IDENT_13 . METHOD_11 ( ) . build ( org . eclipse . core . resources . IDENT_14 . IDENT_16 , monitor ) ; } else { org . eclipse . core . resources . IDENT_13 . METHOD_11 ( ) . build ( org . eclipse . core . resources . IDENT_14 . IDENT_17 , monitor ) ; } java . util . List < org . eclipse . core . resources . IDENT_18 > IDENT_19 = new java . util . ArrayList ( ) ; for ( org . eclipse . core . resources . IDENT_6 project : IDENT_7 ) { if ( ! ( project . equals ( IDENT_5 . METHOD_5 ( ) ) ) ) { java . util . List < org . eclipse . core . resources . IDENT_18 > IDENT_20 = org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_11 . METHOD_12 ( project ) ; if ( IDENT_20 != null ) { IDENT_19 . addAll ( IDENT_20 ) ; } } } java . util . List < java . lang . String > errors = IDENT_19 . stream ( ) . filter ( ( m ) -> ( m . METHOD_13 ( IDENT_18 . IDENT_21 , 0 ) ) == IDENT_18 . IDENT_22 ) . map ( ( e ) -> METHOD_14 ( e ) ) . collect ( java . util . stream . IDENT_23 . toList ( ) ) ; if ( errors . isEmpty ( ) ) { return org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 . IDENT_24 ; } else { java . lang . String IDENT_25 = java . lang . System . getProperty ( STRING_0 ) ; org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_26 . METHOD_15 ( ( ( STRING_1 + IDENT_25 ) + ( java . lang . String . join ( IDENT_25 , errors ) ) ) ) ; return org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 . IDENT_27 ; } } catch ( org . eclipse . core . runtime . IDENT_28 e ) { org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_26 . METHOD_16 ( STRING_2 , e ) ; return org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 . IDENT_29 ; } catch ( org . eclipse . core . runtime . IDENT_30 e ) { return org . eclipse . IDENT_0 . IDENT_1 . core . internal . IDENT_2 . IDENT_4 ; } }
org . junit . Assert . assertEquals ( result , IDENT_2 . IDENT_4 ) 