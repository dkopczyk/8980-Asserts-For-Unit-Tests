METHOD_0 ( ) { org . junit . IDENT_0 . METHOD_1 ( ( ! ( IDENT_1 ) ) ) ; java . util . concurrent . atomic . IDENT_2 IDENT_3 = new java . util . concurrent . atomic . METHOD_2 ( false ) ; IDENT_4 . METHOD_3 ( ( event ) -> { IDENT_4 . evaluate ( STRING_0 ) ; IDENT_3 . set ( true ) ; event . IDENT_5 = true ; } ) ; shell . METHOD_4 ( ) ; IDENT_4 . evaluate ( STRING_1 ) ; boolean IDENT_6 = METHOD_5 ( IDENT_3 :: get ) ; boolean IDENT_7 = false ; try { IDENT_7 = ( ( java . lang . Boolean ) ( IDENT_4 . evaluate ( STRING_2 ) ) ) ; } catch ( org . eclipse . swt . IDENT_8 e ) { } boolean IDENT_9 = IDENT_6 && IDENT_7 ; java . lang . String IDENT_10 = ( ( STRING_3 + IDENT_6 ) + STRING_4 ) + IDENT_7 ; "<AssertPlaceHolder>" ; } evaluate ( java . lang . String ) { if ( "" . equals ( script ) ) { return null ; } if ( IDENT_11 ) { if ( ! ( METHOD_6 ( ) ) ) { return null ; } return org . eclipse . swt . IDENT_4 . IDENT_12 . IDENT_13 . evaluate ( script , this . IDENT_4 , IDENT_14 ) ; } else { return super . evaluate ( script ) ; } }
org . junit . Assert . assertTrue ( IDENT_10 , IDENT_9 ) 