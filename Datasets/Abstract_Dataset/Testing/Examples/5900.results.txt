METHOD_0 ( ) { for ( int IDENT_0 = 0 ; IDENT_0 < 10 ; IDENT_0 ++ ) { java . lang . StringBuffer buffer = new java . lang . StringBuffer ( ) ; for ( int i = 0 ; i < 100 ; i ++ ) { buffer . append ( ( STRING_0 + i ) ) ; } java . lang . String IDENT_1 = buffer . toString ( ) ; final int IDENT_2 = new org . apache . activemq . artemis . api . core . METHOD_1 ( IDENT_1 ) . hashCode ( ) ; final org . apache . activemq . artemis . api . core . METHOD_1 value = new org . apache . activemq . artemis . api . core . METHOD_1 ( IDENT_1 ) ; int IDENT_3 = 100 ; final java . util . concurrent . IDENT_4 IDENT_5 = new java . util . concurrent . METHOD_2 ( IDENT_3 ) ; final java . util . concurrent . METHOD_2 start = new java . util . concurrent . METHOD_2 ( 1 ) ; class T extends java . lang . Thread { boolean IDENT_6 = false ; @ org . apache . activemq . artemis . tests . util . Override public void run ( ) { try { IDENT_5 . METHOD_3 ( ) ; start . METHOD_4 ( ) ; int IDENT_7 = value . hashCode ( ) ; if ( IDENT_7 != IDENT_2 ) { IDENT_6 = true ; } } catch ( java . lang . Exception e ) { e . printStackTrace ( ) ; IDENT_6 = true ; } } } T [ ] x = new T [ IDENT_3 ] ; for ( int i = 0 ; i < IDENT_3 ; i ++ ) { x [ i ] = new T ( ) ; x [ i ] . start ( ) ; } org . apache . activemq . artemis . tests . util . IDENT_8 . METHOD_5 ( IDENT_5 ) ; start . METHOD_3 ( ) ; for ( T t : x ) { t . join ( ) ; } for ( T t : x ) { "<AssertPlaceHolder>" ; } } } METHOD_3 ( ) { control . METHOD_6 ( 1 ) ; }
org . junit . Assert . assertFalse ( t . IDENT_6 ) 