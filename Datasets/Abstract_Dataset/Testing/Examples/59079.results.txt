METHOD_0 ( ) { org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_2 cc = new org . eclipse . IDENT_0 . geometry . IDENT_1 . METHOD_1 ( FLOAT_0 , FLOAT_1 , 200 , INT_0 , INT_1 , INT_0 , FLOAT_2 , FLOAT_1 ) ; org . eclipse . IDENT_0 . geometry . IDENT_1 . METHOD_1 c = new org . eclipse . IDENT_0 . geometry . IDENT_1 . METHOD_1 ( FLOAT_3 , FLOAT_4 , FLOAT_3 , FLOAT_5 , FLOAT_6 , FLOAT_7 , FLOAT_8 , FLOAT_7 ) ; org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_3 [ ] IDENT_4 = c . METHOD_2 ( cc ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_5 ) { if ( equals ( IDENT_6 ) ) { return new org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_3 [ ] { } ; } java . util . HashSet < org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_3 > IDENT_7 = new java . util . HashSet ( ) ; for ( org . eclipse . IDENT_0 . geometry . IDENT_1 . METHOD_1 IDENT_8 : METHOD_3 ( ) ) { IDENT_7 . addAll ( java . util . Arrays . asList ( IDENT_6 . METHOD_2 ( IDENT_8 ) ) ) ; } return IDENT_7 . toArray ( new org . eclipse . IDENT_0 . geometry . IDENT_1 . IDENT_3 [ ] { } ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_4 . length ) 