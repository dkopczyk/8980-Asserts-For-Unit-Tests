METHOD_0 ( ) { org . eclipse . IDENT_0 . dataset . IDENT_1 IDENT_2 = org . eclipse . IDENT_0 . dataset . IDENT_3 . METHOD_1 ( new java . lang . Double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 } ) ; org . eclipse . IDENT_0 . dataset . IDENT_1 IDENT_4 = org . eclipse . IDENT_0 . dataset . IDENT_3 . METHOD_1 ( new java . lang . Double [ ] { 1.0 , 2.0 , FLOAT_4 , FLOAT_5 } ) ; java . util . List < java . lang . Double > expected = new java . util . ArrayList < java . lang . Double > ( ) ; expected . add ( FLOAT_6 ) ; java . util . List < java . lang . Double > actual = org . eclipse . IDENT_0 . dataset . IDENT_5 . METHOD_2 ( IDENT_4 , IDENT_2 , 1 , FLOAT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . eclipse . IDENT_0 . dataset . IDENT_1 , org . eclipse . IDENT_0 . dataset . IDENT_1 , double , double ) { java . util . List < java . lang . Double > IDENT_6 = org . eclipse . IDENT_0 . dataset . IDENT_5 . METHOD_2 ( IDENT_4 , IDENT_2 , IDENT_7 ) ; double error = IDENT_8 * ( IDENT_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ; int i = 0 ; while ( i <= ( ( IDENT_6 . size ( ) ) - 3 ) ) { double v1 = java . lang . Math . METHOD_5 ( ( ( IDENT_6 . get ( i ) ) - ( IDENT_6 . get ( ( i + 2 ) ) ) ) ) ; if ( v1 < error ) { IDENT_6 . set ( ( i + 2 ) , ( ( ( ( IDENT_6 . get ( i ) ) + ( IDENT_6 . get ( ( i + 1 ) ) ) ) + ( IDENT_6 . get ( ( i + 2 ) ) ) ) / FLOAT_4 ) ) ; IDENT_6 . remove ( i ) ; IDENT_6 . remove ( i ) ; } else { i ++ ; } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( expected , actual ) 