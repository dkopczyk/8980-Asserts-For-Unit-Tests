METHOD_0 ( ) { org . eclipse . swt . IDENT_0 . IDENT_1 IDENT_2 = new org . eclipse . swt . IDENT_0 . METHOD_1 ( IDENT_3 , STRING_0 , INT_0 , org . eclipse . swt . IDENT_4 . IDENT_5 ) ; org . eclipse . swt . IDENT_0 . IDENT_6 IDENT_7 = org . eclipse . rap . rwt . internal . IDENT_8 . IDENT_9 . METHOD_2 ( IDENT_2 , STRING_1 , 100 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( org . eclipse . swt . IDENT_0 . METHOD_1 , java . lang . String , int ) { int IDENT_10 = 0 ; int IDENT_11 = 0 ; for ( java . lang . String line : METHOD_3 ( string ) ) { IDENT_10 ++ ; int IDENT_12 = org . eclipse . rap . rwt . internal . IDENT_8 . IDENT_9 . METHOD_4 ( line , IDENT_2 ) ; if ( IDENT_13 > 0 ) { boolean IDENT_14 = false ; while ( ! IDENT_14 ) { int index = org . eclipse . rap . rwt . internal . IDENT_8 . IDENT_9 . METHOD_5 ( line , IDENT_13 , IDENT_2 ) ; if ( ( index == 0 ) || ( index == ( line . length ( ) ) ) ) { IDENT_14 = true ; } else { java . lang . String IDENT_15 = line . substring ( 0 , index ) ; IDENT_12 = org . eclipse . rap . rwt . internal . IDENT_8 . IDENT_9 . METHOD_4 ( IDENT_15 , IDENT_2 ) ; IDENT_11 = java . lang . Math . max ( IDENT_11 , IDENT_12 ) ; line = line . substring ( index , line . length ( ) ) ; IDENT_10 ++ ; } } } IDENT_11 = java . lang . Math . max ( IDENT_11 , IDENT_12 ) ; } int IDENT_16 = java . lang . Math . METHOD_6 ( ( ( ( org . eclipse . rap . rwt . internal . IDENT_8 . IDENT_9 . METHOD_7 ( IDENT_2 ) ) * FLOAT_0 ) * IDENT_10 ) ) ; return new org . eclipse . swt . IDENT_0 . METHOD_8 ( IDENT_11 , IDENT_16 ) ; }
org . junit . Assert . assertEquals ( 100 , IDENT_7 . x ) 