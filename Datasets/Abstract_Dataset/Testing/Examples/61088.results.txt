METHOD_0 ( ) { org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = new org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 ( org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 , STRING_0 , STRING_1 ) ; org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 IDENT_6 = new org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 ( org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_7 , STRING_2 ) ; org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 IDENT_8 = new org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 ( org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_9 ) ; org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 [ ] values = new org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . METHOD_1 [ ] { IDENT_3 , IDENT_6 , IDENT_8 } ; org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_10 IDENT_11 = org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_10 . IDENT_12 ; "<AssertPlaceHolder>" ; } select ( int , int ) { METHOD_2 ( ) ; if ( ( IDENT_13 ) && ( ! ( ( ( IDENT_14 ) == ( org . eclipse . swt . IDENT_15 . IDENT_16 ) ) && ( start != end ) ) ) ) { if ( ( ! ( IDENT_17 ) ) && ( ( IDENT_14 ) == ( org . eclipse . swt . IDENT_15 . IDENT_16 ) ) ) { IDENT_18 . METHOD_3 ( ) ; } for ( int index = java . lang . Math . max ( 0 , start ) ; index <= ( java . lang . Math . min ( ( ( IDENT_19 . size ( ) ) - 1 ) , end ) ) ; index ++ ) { METHOD_4 ( index ) ; } } }
org . junit . Assert . assertEquals ( org . eclipse . rap . rwt . internal . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_9 , IDENT_11 . select ( null , values ) ) 