METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; byte [ ] input = IDENT_0 . getBytes ( IDENT_1 . UTF_8 ) ; java . io . ByteArrayInputStream IDENT_2 = new java . io . ByteArrayInputStream ( input ) ; java . util . concurrent . atomic . IDENT_3 IDENT_4 = new java . util . concurrent . atomic . METHOD_1 ( 0 ) ; java . util . ArrayList < java . lang . Integer > IDENT_5 = new java . util . ArrayList ( ) ; try ( org . apache . activemq . artemis . utils . IDENT_6 reader = new org . apache . activemq . artemis . utils . METHOD_2 ( IDENT_2 , IDENT_4 ) ) { int b = reader . read ( ) ; while ( b != ( - 1 ) ) { IDENT_5 . add ( b ) ; b = reader . read ( ) ; } } "<AssertPlaceHolder>" ; byte [ ] IDENT_7 = new byte [ IDENT_5 . size ( ) ] ; for ( int i = 0 ; i < ( IDENT_7 . length ) ; i ++ ) { IDENT_7 [ i ] = ( ( byte ) ( IDENT_5 . get ( i ) . METHOD_3 ( ) ) ) ; } byte [ ] output = new byte [ INT_0 ] ; java . util . IDENT_8 . IDENT_9 IDENT_10 = new java . util . IDENT_8 . METHOD_4 ( ) ; IDENT_10 . METHOD_5 ( input ) ; IDENT_10 . METHOD_6 ( ) ; int IDENT_11 = IDENT_10 . METHOD_7 ( output ) ; METHOD_8 ( IDENT_7 , output , IDENT_11 ) ; } get ( ) { return buffer . METHOD_9 ( ) ; }
org . junit . Assert . assertEquals ( input . length , IDENT_4 . get ( ) ) 