METHOD_0 ( ) { final int IDENT_0 = INT_0 ; int IDENT_1 = 0 ; for ( int i = 1 ; i <= ( IDENT_0 * 2 ) ; i += 2 ) { if ( ( METHOD_1 ( i ) ) != null ) { IDENT_1 ++ ; } } "<AssertPlaceHolder>" ; } METHOD_1 ( int ) { java . lang . String message = null ; org . junit . Assert . assertEquals ( STRING_0 , 0 , IDENT_2 . METHOD_2 ( ) . METHOD_3 ( ) . length ) ; org . apache . activemq . transport . IDENT_3 . IDENT_4 IDENT_5 = METHOD_4 ( ) ; org . apache . activemq . transport . IDENT_3 . IDENT_4 consumer = METHOD_4 ( "test" ) ; METHOD_5 ( consumer , java . lang . Integer . toString ( index ) , true ) ; METHOD_6 ( IDENT_5 , index ) ; try { org . apache . activemq . transport . IDENT_3 . IDENT_6 IDENT_7 = consumer . METHOD_7 ( ) ; org . apache . activemq . transport . IDENT_3 . IDENT_8 . LOG . debug ( ( STRING_1 + message ) ) ; org . junit . Assert . assertEquals ( index , ( ( int ) ( java . lang . Integer . valueOf ( IDENT_7 . METHOD_8 ( ) ) ) ) ) ; message = IDENT_7 . METHOD_8 ( ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( ( ( STRING_2 + index ) + STRING_3 ) + ( e . getMessage ( ) ) ) ) ; } METHOD_9 ( consumer , java . lang . Integer . toString ( index ) ) ; METHOD_10 ( consumer ) ; METHOD_10 ( IDENT_5 ) ; return message ; }
org . junit . Assert . assertEquals ( IDENT_0 , IDENT_1 ) 