METHOD_0 ( ) { com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_2 rule = mock ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_2 . class ) ; com . eclipsesource . IDENT_0 . IDENT_1 . internal . IDENT_3 IDENT_4 = new com . eclipsesource . IDENT_0 . IDENT_1 . internal . METHOD_1 ( METHOD_2 ( ) ) ; com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_5 condition = mock ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_5 . class ) ; doReturn ( Boolean . IDENT_6 ) . when ( condition ) . METHOD_3 ( any ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_7 . class ) ) ; java . util . List < com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_8 = new java . util . ArrayList < com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_5 > ( ) ; IDENT_8 . add ( new com . eclipsesource . IDENT_0 . IDENT_1 . internal . condition . METHOD_4 ( ) ) ; IDENT_8 . add ( condition ) ; when ( rule . METHOD_5 ( ) ) . thenReturn ( IDENT_8 ) ; boolean IDENT_9 = IDENT_4 . METHOD_6 ( rule ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( com . eclipsesource . IDENT_0 . IDENT_1 . IDENT_2 ) { com . eclipsesource . IDENT_0 . IDENT_1 . internal . IDENT_10 . METHOD_7 ( rule ) . METHOD_8 ( STRING_0 ) ; return METHOD_3 ( rule . METHOD_5 ( ) ) ; }
org . junit . Assert . assertFalse ( METHOD_6 ) 