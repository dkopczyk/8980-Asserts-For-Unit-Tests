METHOD_0 ( ) { org . apache . ambari . server . api . IDENT_0 filter = new org . apache . ambari . server . api . METHOD_1 ( ) ; com . sun . jersey . spi . container . IDENT_1 IDENT_2 = METHOD_2 ( com . sun . jersey . spi . container . IDENT_1 . class ) ; com . sun . jersey . core . header . IDENT_3 headers = new com . sun . jersey . core . header . METHOD_3 ( ) ; headers . add ( STRING_0 , STRING_1 ) ; expect ( IDENT_2 . METHOD_4 ( ) ) . andReturn ( STRING_2 ) ; expect ( IDENT_2 . METHOD_5 ( ) ) . andReturn ( headers ) ; replay ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } filter ( com . sun . jersey . spi . container . IDENT_1 ) { if ( ( ! ( org . apache . ambari . server . api . METHOD_1 . IDENT_4 . contains ( IDENT_2 . METHOD_4 ( ) ) ) ) && ( ! ( IDENT_2 . METHOD_5 ( ) . containsKey ( org . apache . ambari . server . api . METHOD_1 . IDENT_5 ) ) ) ) { throw new javax . ws . rs . METHOD_6 ( javax . ws . rs . core . Response . status ( Response . Status . IDENT_6 ) . entity ( org . apache . ambari . server . api . METHOD_1 . IDENT_7 . METHOD_7 ( new org . apache . ambari . server . api . services . METHOD_8 ( METHOD_8 . IDENT_8 . IDENT_6 , org . apache . ambari . server . api . METHOD_1 . IDENT_9 ) ) ) . type ( IDENT_10 . IDENT_11 ) . build ( ) ) ; } return IDENT_2 ; }
org . junit . Assert . assertEquals ( IDENT_2 , filter . filter ( IDENT_2 ) ) 