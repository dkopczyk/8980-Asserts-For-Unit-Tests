METHOD_0 ( ) { java . io . File file = new java . io . File ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( io . vertx . core . impl . IDENT_0 . File ) { if ( ( file == null ) || ( ! ( file . exists ( ) ) ) ) { return - 1 ; } final io . vertx . core . impl . IDENT_0 . IDENT_1 stream = new io . vertx . core . impl . IDENT_0 . METHOD_2 ( file ) ; final io . vertx . core . impl . IDENT_0 . IDENT_2 IDENT_3 = new io . vertx . core . impl . IDENT_0 . METHOD_3 ( stream , io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_5 ) ; try ( io . vertx . core . impl . IDENT_0 . IDENT_6 reader = new io . vertx . core . impl . IDENT_0 . METHOD_4 ( IDENT_3 ) ) { java . lang . String line ; while ( ( line = reader . METHOD_5 ( ) ) != null ) { if ( line . startsWith ( io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_7 ) ) { int count = 0 ; int start = io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_7 . length ( ) ; for ( int i = start ; i < ( line . length ( ) ) ; i ++ ) { char ch = line . charAt ( i ) ; if ( ( ch >= STRING_1 ) && ( ch <= STRING_2 ) ) { count += io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_8 [ ( ch - STRING_1 ) ] ; } else if ( ( ch >= STRING_3 ) && ( ch <= STRING_4 ) ) { count += io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_8 [ ( ( ch - STRING_3 ) + 10 ) ] ; } else if ( ( ch >= STRING_5 ) && ( ch <= STRING_6 ) ) { count += io . vertx . core . impl . IDENT_0 . IDENT_4 . IDENT_8 [ ( ( ch - STRING_5 ) + 10 ) ] ; } } return count ; } } } return - 1 ; }
org . junit . Assert . assertThat ( io . vertx . core . impl . IDENT_0 . IDENT_4 . METHOD_1 ( file ) , org . hamcrest . core . Is . is ( 2 ) ) 