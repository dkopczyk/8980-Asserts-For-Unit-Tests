METHOD_0 ( ) { try { org . eclipse . IDENT_0 . lib . IDENT_1 _builder = new org . eclipse . IDENT_0 . lib . METHOD_1 ( ) ; _builder . append ( STRING_0 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_1 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_2 ) ; _builder . append ( STRING_3 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_4 ) ; _builder . METHOD_2 ( ) ; final org . eclipse . xtext . util . IDENT_2 < org . eclipse . xtext . IDENT_3 . testing . IDENT_4 . Result > IDENT_5 = ( org . eclipse . xtext . IDENT_3 . testing . IDENT_4 . Result it ) -> { try { final java . lang . reflect . Method IDENT_6 = it . METHOD_3 ( ) . METHOD_4 ( STRING_5 , . class ) ; java . lang . reflect . Field IDENT_7 = it . METHOD_3 ( ) . METHOD_5 ( "foo" ) ; final IDENT_8 < java . lang . reflect . Field > IDENT_9 = ( java . lang . reflect . Field IDENT_10 ) -> { IDENT_10 . METHOD_6 ( true ) ; } ; final java . lang . reflect . Field IDENT_11 = org . eclipse . xtext . IDENT_3 . lib . IDENT_12 . < java . lang . reflect . Field > METHOD_7 ( IDENT_7 , IDENT_9 ) ; IDENT_6 . invoke ( null , java . lang . Integer . valueOf ( 1 ) ) ; "<AssertPlaceHolder>" ; } catch ( IDENT_13 ) { throw org . eclipse . xtext . IDENT_3 . lib . IDENT_14 . METHOD_8 ( org . eclipse . IDENT_15 . core . tests . compiler . IDENT_13 ) ; } } ; this . IDENT_16 . METHOD_9 ( _builder , IDENT_5 ) ; } catch ( java . lang . Throwable IDENT_13 ) { throw org . eclipse . xtext . IDENT_3 . lib . IDENT_14 . METHOD_8 ( IDENT_13 ) ; } } get ( org . eclipse . IDENT_17 . IDENT_18 . resource . IDENT_19 ) { for ( org . eclipse . IDENT_17 . common . IDENT_20 . IDENT_21 a : rs . METHOD_10 ( ) ) if ( a instanceof org . eclipse . IDENT_15 . maven . IDENT_22 ) return ( ( org . eclipse . IDENT_15 . maven . IDENT_22 ) ( a ) ) . project ; throw new java . lang . RuntimeException ( STRING_6 ) ; }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( 1 ) , IDENT_11 . get ( null ) ) 