METHOD_0 ( ) { try { org . eclipse . IDENT_0 . lib . IDENT_1 _builder = new org . eclipse . IDENT_0 . lib . METHOD_1 ( ) ; _builder . append ( STRING_0 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_1 ) ; _builder . append ( STRING_2 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_1 ) ; _builder . append ( STRING_3 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_4 ) ; _builder . append ( STRING_5 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_1 ) ; _builder . append ( STRING_6 ) ; _builder . METHOD_2 ( ) ; _builder . append ( STRING_6 ) ; _builder . METHOD_2 ( ) ; final org . eclipse . xtext . util . IDENT_2 < org . eclipse . xtext . IDENT_3 . testing . IDENT_4 . Result > IDENT_5 = ( org . eclipse . xtext . IDENT_3 . testing . IDENT_4 . Result it ) -> { try { final java . lang . Object instance = it . METHOD_3 ( ) . newInstance ( ) ; final java . lang . reflect . Method IDENT_6 = it . METHOD_3 ( ) . METHOD_4 ( STRING_7 , . class ) ; IDENT_6 . invoke ( instance , java . lang . Integer . valueOf ( 1 ) ) ; final java . lang . reflect . Method IDENT_7 = it . METHOD_3 ( ) . METHOD_4 ( STRING_8 ) ; "<AssertPlaceHolder>" ; } catch ( IDENT_8 ) { throw org . eclipse . xtext . IDENT_3 . lib . IDENT_9 . METHOD_5 ( org . eclipse . IDENT_10 . core . tests . compiler . IDENT_8 ) ; } } ; this . IDENT_11 . METHOD_6 ( _builder , IDENT_5 ) ; } catch ( java . lang . Throwable IDENT_8 ) { throw org . eclipse . xtext . IDENT_3 . lib . IDENT_9 . METHOD_5 ( IDENT_8 ) ; } } invoke ( org . eclipse . IDENT_12 . IDENT_13 . runtime . IDENT_14 . IDENT_15 ) { try { java . io . File directory = new java . io . File ( path ) ; if ( ! ( directory . exists ( ) ) ) throw new java . lang . RuntimeException ( path ) ; java . io . IDENT_16 writer = null ; try { java . io . File list = new java . io . File ( directory , IDENT_17 ) ; if ( ! ( list . exists ( ) ) ) list . METHOD_7 ( ) ; writer = new java . io . METHOD_8 ( new java . io . METHOD_9 ( list ) ) ; for ( java . io . File IDENT_18 : directory . METHOD_10 ( ) ) { if ( IDENT_18 . METHOD_11 ( ) ) { METHOD_12 ( IDENT_18 , writer , directory . METHOD_13 ( ) ) ; } } } finally { if ( writer != null ) writer . close ( ) ; } } catch ( java . io . IOException IDENT_19 ) { throw new java . lang . RuntimeException ( IDENT_19 ) ; } }
org . junit . Assert . assertEquals ( java . lang . Integer . valueOf ( 5 ) , IDENT_7 . invoke ( instance ) ) 