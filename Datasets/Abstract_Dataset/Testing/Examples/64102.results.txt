METHOD_0 ( ) { final java . util . List < ch . IDENT_0 . IDENT_1 . IDENT_2 . framework . IDENT_3 > expressions = generator . parse ( STRING_0 ) ; final java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; expressions . get ( 0 ) . METHOD_1 ( builder ) ; "<AssertPlaceHolder>" ; System . out . println ( ( STRING_1 + builder ) ) ; } toString ( ) { java . lang . StringBuilder r = new java . lang . StringBuilder ( this . getClass ( ) . getName ( ) ) ; r . append ( STRING_2 ) ; r . append ( METHOD_2 ( ) ) ; r . append ( STRING_3 ) ; if ( ( IDENT_4 ) != null ) { r . append ( java . lang . System . getProperty ( STRING_4 ) ) ; r . append ( STRING_5 ) ; r . append ( IDENT_4 ) ; } r . append ( java . lang . System . getProperty ( STRING_4 ) ) ; if ( ( ( IDENT_5 ) != null ) && ( ! ( IDENT_5 . isEmpty ( ) ) ) ) { r . append ( STRING_6 ) ; r . append ( java . lang . System . getProperty ( STRING_4 ) ) ; for ( java . util . Iterator < ch . IDENT_0 . IDENT_1 . IDENT_2 . framework . IDENT_6 . IDENT_7 > IDENT_8 = IDENT_5 . iterator ( ) ; IDENT_8 . hasNext ( ) ; ) { r . append ( STRING_7 ) ; r . append ( IDENT_8 . next ( ) . toString ( ) ) ; if ( IDENT_8 . hasNext ( ) ) { r . append ( java . lang . System . getProperty ( STRING_4 ) ) ; } } } else { r . append ( STRING_8 ) ; } return r . toString ( ) ; }
org . junit . Assert . assertTrue ( ( ( builder . toString ( ) . length ( ) ) == 1 ) ) 