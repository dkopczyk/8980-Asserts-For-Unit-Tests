METHOD_0 ( ) { System . out . println ( STRING_0 ) ; for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 method : IDENT_3 . IDENT_4 . values ( ) ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 instance = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( new IDENT_0 . linear . IDENT_5 . METHOD_2 ( ) , 5 ) ; instance . METHOD_3 ( 20 ) ; instance . METHOD_4 ( method ) ; for ( int IDENT_6 = 0 ; IDENT_6 < ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ; IDENT_6 ++ ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 IDENT_10 = IDENT_0 . IDENT_11 . METHOD_5 ( 1000 , 1.0 , FLOAT_0 , FLOAT_1 ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_9 test = IDENT_0 . IDENT_11 . METHOD_5 ( 100 , 1.0 , FLOAT_0 , FLOAT_1 ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_12 IDENT_13 = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_6 ( instance , IDENT_10 , true ) ; IDENT_13 . METHOD_7 ( test ) ; if ( ( ( IDENT_13 . METHOD_8 ( ) ) > FLOAT_2 ) && ( IDENT_6 == ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_7 . IDENT_8 ) ) ) "<AssertPlaceHolder>" ; else break ; } } } METHOD_8 ( ) { return 1.0 - ( ( METHOD_9 ( ) ) / ( IDENT_14 ) ) ; }
org . junit . Assert . assertEquals ( IDENT_13 . METHOD_8 ( ) , 0.0 , FLOAT_2 ) 