METHOD_0 ( ) { System . out . println ( STRING_0 ) ; for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 : IDENT_3 . IDENT_4 . values ( ) ) for ( IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 IDENT_8 : IDENT_6 . IDENT_7 . values ( ) ) for ( boolean IDENT_9 : new boolean [ ] { true , false } ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_10 instance = new IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; instance . METHOD_2 ( IDENT_8 ) ; instance . METHOD_3 ( FLOAT_0 ) ; instance . METHOD_4 ( IDENT_5 ) ; int IDENT_11 = 3 ; do { IDENT_0 . IDENT_1 . IDENT_12 IDENT_13 = IDENT_0 . IDENT_14 . METHOD_5 ( INT_0 , 1.0 , FLOAT_1 , FLOAT_2 ) ; IDENT_0 . IDENT_1 . IDENT_12 test = IDENT_0 . IDENT_14 . METHOD_5 ( 200 , 1.0 , FLOAT_1 , FLOAT_2 ) ; IDENT_0 . IDENT_1 . IDENT_15 IDENT_16 = new IDENT_0 . IDENT_1 . METHOD_6 ( instance , IDENT_13 ) ; if ( IDENT_9 ) IDENT_16 . METHOD_7 ( new IDENT_0 . IDENT_17 . METHOD_8 ( new IDENT_0 . IDENT_17 . METHOD_9 ( 50 ) ) ) ; IDENT_16 . METHOD_10 ( test ) ; if ( ( IDENT_16 . METHOD_11 ( ) ) < FLOAT_3 ) break ; } while ( ( IDENT_11 OP_0 ) > 0 ) ; "<AssertPlaceHolder>" ; } } METHOD_11 ( ) { return 1.0 - ( ( METHOD_12 ( ) ) / ( IDENT_18 ) ) ; }
org . junit . Assert . assertTrue ( ( IDENT_11 > 0 ) ) 