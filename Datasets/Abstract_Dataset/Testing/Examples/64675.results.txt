METHOD_0 ( ) { ch . IDENT_0 . data . IDENT_1 IDENT_2 = new ch . IDENT_0 . data . METHOD_1 ( STRING_0 , 20 ) ; ch . IDENT_0 . data . IDENT_3 IDENT_4 = new ch . IDENT_0 . data . METHOD_2 ( STRING_1 , STRING_2 ) ; ch . IDENT_0 . data . METHOD_2 IDENT_5 = new ch . IDENT_0 . data . METHOD_2 ( STRING_3 , STRING_2 ) ; ch . IDENT_0 . data . METHOD_2 IDENT_6 = new ch . IDENT_0 . data . METHOD_2 ( STRING_4 , STRING_2 ) ; ch . IDENT_0 . core . model . IDENT_7 IDENT_8 = ch . IDENT_0 . core . data . IDENT_9 . IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_2 , IDENT_4 . METHOD_5 ( ) ) ; IDENT_8 . METHOD_6 ( 12 ) ; IDENT_8 . METHOD_7 ( 10 ) ; IDENT_8 . METHOD_8 ( 5 ) ; IDENT_8 = ch . IDENT_0 . core . data . IDENT_9 . IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_2 , IDENT_5 . METHOD_5 ( ) ) ; IDENT_8 . METHOD_6 ( 12 ) ; IDENT_8 . METHOD_7 ( 12 ) ; IDENT_8 . METHOD_8 ( 5 ) ; IDENT_8 = ch . IDENT_0 . core . data . IDENT_9 . IDENT_10 . METHOD_3 ( ) . METHOD_4 ( IDENT_2 , IDENT_6 . METHOD_5 ( ) ) ; IDENT_8 . METHOD_6 ( 4 ) ; IDENT_8 . METHOD_7 ( 12 ) ; IDENT_8 . METHOD_8 ( 5 ) ; ch . IDENT_0 . data . Query < ch . IDENT_0 . data . IDENT_11 > IDENT_12 = new ch . IDENT_0 . data . Query < ch . IDENT_0 . data . IDENT_11 > ( ch . IDENT_0 . data . IDENT_11 . class ) ; IDENT_12 . add ( IDENT_11 . IDENT_13 , Query . IDENT_14 , IDENT_2 . getId ( ) ) ; IDENT_12 . add ( IDENT_11 . IDENT_15 , Query . IDENT_16 , IDENT_11 . IDENT_17 ) ; java . util . List < ch . IDENT_0 . data . IDENT_11 > execute = IDENT_12 . execute ( ) ; "<AssertPlaceHolder>" ; IDENT_2 . METHOD_9 ( ) ; } size ( ) { try { ch . IDENT_18 . tools . IDENT_19 . IDENT_20 IDENT_21 = ch . IDENT_0 . data . IDENT_22 . METHOD_10 ( ) . METHOD_11 ( ) ; java . lang . String res = IDENT_21 . METHOD_12 ( ( STRING_5 + ( template . METHOD_13 ( ) ) ) ) ; ch . IDENT_0 . data . IDENT_22 . METHOD_10 ( ) . METHOD_14 ( IDENT_21 ) ; return java . lang . Integer . METHOD_15 ( res ) ; } catch ( java . lang . Exception ex ) { ch . IDENT_18 . tools . IDENT_23 . METHOD_16 ( ex ) ; return INT_0 ; } }
org . junit . Assert . assertEquals ( 1 , execute . size ( ) ) 