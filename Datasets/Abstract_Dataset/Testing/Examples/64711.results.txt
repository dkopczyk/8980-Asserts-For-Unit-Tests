METHOD_0 ( ) { java . util . HashSet < IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . Node , java . lang . Double > > IDENT_8 = new java . util . HashSet < IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . Node , java . lang . Double > > ( ) ; IDENT_8 . addAll ( IDENT_9 ) ; java . util . HashSet < IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . Node , java . lang . Double > > IDENT_10 = new java . util . HashSet < IDENT_0 . IDENT_1 . IDENT_2 . utils . IDENT_3 < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . Node , java . lang . Double > > ( ) ; IDENT_10 . addAll ( IDENT_11 ) ; java . util . HashMap < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . IDENT_12 , IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_13 > IDENT_14 = new java . util . HashMap < IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . IDENT_12 , IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_13 > ( ) ; IDENT_14 . METHOD_1 ( IDENT_15 ) ; IDENT_14 . METHOD_1 ( IDENT_16 ) ; IDENT_14 . put ( new IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . METHOD_2 ( 0 , ( - 2 ) ) , IDENT_13 . IDENT_17 ) ; IDENT_14 . put ( new IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . METHOD_2 ( 0 , 2 ) , IDENT_13 . IDENT_17 ) ; IDENT_14 . put ( new IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . METHOD_2 ( ( - 2 ) , 0 ) , IDENT_13 . IDENT_17 ) ; IDENT_14 . put ( new IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . model . METHOD_2 ( 2 , 0 ) , IDENT_13 . IDENT_17 ) ; try { IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . IDENT_18 gs = new IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . IDENT_5 . IDENT_6 . METHOD_3 ( IDENT_8 , IDENT_10 , IDENT_14 , IDENT_19 ) ; gs . value ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . exceptions . IDENT_20 | IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . exceptions . IDENT_21 e ) { "<AssertPlaceHolder>" ; } catch ( IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . exceptions . IDENT_22 | IDENT_0 . IDENT_1 . IDENT_2 . layout . IDENT_4 . exceptions . IDENT_23 e ) { org . junit . Assert . fail ( ( STRING_1 + ( e . getMessage ( ) ) ) ) ; } } value ( ) { return IDENT_24 ; }
org . junit . Assert . assertTrue ( true ) 