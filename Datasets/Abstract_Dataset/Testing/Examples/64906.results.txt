METHOD_0 ( ) { java . lang . Object [ ] expected = new java . lang . Object [ ] { STRING_0 } ; java . util . Set < java . lang . Object > set = new com . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Object > ( new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) { @ com . IDENT_0 . IDENT_1 . Override public boolean METHOD_2 ( java . lang . Object IDENT_3 , java . lang . Object IDENT_4 ) { return IDENT_3 . toString ( ) . equalsIgnoreCase ( IDENT_4 . toString ( ) ) ; } } ) ; set . add ( STRING_0 ) ; set . add ( "a" ) ; set . add ( "a" ) ; "<AssertPlaceHolder>" ; } add ( java . lang . Object ) { if ( ( ! ( e instanceof com . IDENT_0 . IDENT_5 . IDENT_6 ) ) && ( e instanceof org . IDENT_7 . plugin . IDENT_8 ) ) { try { return super . add ( com . IDENT_0 . IDENT_5 . IDENT_6 . METHOD_3 ( ( ( org . IDENT_7 . plugin . IDENT_8 ) ( e ) ) ) ) ; } catch ( java . lang . IDENT_9 | java . lang . IllegalArgumentException | java . lang . IDENT_10 ex ) { java . util . logging . IDENT_11 . METHOD_4 ( com . IDENT_0 . IDENT_5 . IDENT_6 . class . getName ( ) ) . log ( IDENT_12 . IDENT_13 , null , ex ) ; } } else { return super . add ( e ) ; } return false ; }
org . junit . Assert . assertArrayEquals ( expected , set . toArray ( ) ) 