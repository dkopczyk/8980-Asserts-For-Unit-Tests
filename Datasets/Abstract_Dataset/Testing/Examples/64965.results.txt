METHOD_0 ( ) { when ( this . IDENT_0 . METHOD_1 ( ) ) . thenReturn ( IDENT_1 ) ; org . mockito . Mockito . when ( IDENT_1 . next ( ) ) . thenReturn ( false ) ; org . springframework . security . IDENT_2 . common . IDENT_3 IDENT_4 = this . IDENT_5 . METHOD_2 ( STRING_0 ) ; "<AssertPlaceHolder>" ; org . mockito . Mockito . verify ( IDENT_0 , org . mockito . Mockito . times ( 1 ) ) . METHOD_3 ( org . mockito . Mockito . METHOD_4 ( ) , org . mockito . Mockito . anyString ( ) ) ; org . mockito . Mockito . verify ( IDENT_1 , org . mockito . Mockito . times ( 0 ) ) . getString ( org . mockito . Mockito . anyString ( ) ) ; this . METHOD_5 ( true ) ; org . mockito . Mockito . verify ( conn , org . mockito . Mockito . times ( 1 ) ) . close ( ) ; } METHOD_2 ( java . lang . String ) { com . IDENT_6 . IDENT_7 . IDENT_8 . common . IDENT_9 filter = new com . IDENT_6 . IDENT_7 . IDENT_8 . common . METHOD_6 ( STRING_1 , IDENT_10 , true ) ; com . IDENT_6 . IDENT_7 . IDENT_8 . common . METHOD_6 [ ] filters = new com . IDENT_6 . IDENT_7 . IDENT_8 . common . METHOD_6 [ ] { filter } ; java . util . List < java . lang . String > IDENT_11 = super . METHOD_7 ( filters ) ; if ( ( null != IDENT_11 ) && ( ( IDENT_11 . size ( ) ) > 0 ) ) { return new org . springframework . security . IDENT_2 . common . METHOD_8 ( IDENT_10 ) ; } return null ; }
org . junit . Assert . assertNull ( IDENT_4 ) 