METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . IDENT_3 IDENT_4 = new com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . METHOD_1 ( ) ; IDENT_4 . METHOD_2 ( ( ( int ) ( 8 ) ) ) ; com . github . IDENT_0 . IDENT_1 . IDENT_5 mapper = new com . github . IDENT_0 . IDENT_1 . METHOD_3 ( ) . METHOD_4 ( com . github . IDENT_0 . IDENT_1 . commons . IDENT_6 . get ( ) ) . METHOD_5 ( com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . METHOD_1 . class , com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . IDENT_7 . class , ( config , source , IDENT_8 ) -> config . METHOD_6 ( source :: IDENT_9 , IDENT_8 :: METHOD_2 , . class ) ) . METHOD_7 ( ) ; com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . IDENT_7 result = mapper . map ( IDENT_4 , com . github . IDENT_0 . IDENT_1 . commons . IDENT_2 . IDENT_7 . class ) ; "<AssertPlaceHolder>" ; } map ( IDENT_10 , java . lang . Class ) { org . apache . commons . lang3 . IDENT_11 . METHOD_8 ( source , STRING_0 ) ; org . apache . commons . lang3 . IDENT_11 . METHOD_8 ( IDENT_12 , STRING_1 ) ; java . util . Optional < IDENT_13 > result = METHOD_9 ( source , IDENT_12 ) ; if ( ( result . METHOD_10 ( ) ) == false ) { throw new com . github . IDENT_0 . IDENT_1 . METHOD_11 ( java . lang . String . format ( STRING_2 , source . getClass ( ) , IDENT_12 ) ) ; } else { return result . get ( ) ; } }
org . junit . Assert . assertEquals ( ( ( int ) ( 8 ) ) , result . METHOD_12 ( ) ) 