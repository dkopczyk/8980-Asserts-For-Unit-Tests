METHOD_0 ( ) { final java . lang . String IDENT_0 = null ; final org . IDENT_1 . util . IDENT_2 . IDENT_3 [ ] result = org . IDENT_1 . util . IDENT_2 . IDENT_3 . parse ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } parse ( java . lang . String ) { if ( IDENT_4 == null ) { return null ; } org . IDENT_1 . util . IDENT_2 . IDENT_3 [ ] result ; if ( org . IDENT_1 . util . IDENT_2 . IDENT_3 . IDENT_5 ) { result = org . IDENT_1 . util . IDENT_2 . IDENT_3 . IDENT_6 . get ( IDENT_4 ) ; if ( result != null ) { return result ; } } java . lang . String IDENT_7 = IDENT_4 ; final java . util . List < org . IDENT_1 . util . IDENT_2 . IDENT_3 > type = new java . util . ArrayList ( ) ; while ( ! ( IDENT_7 . isEmpty ( ) ) ) { final org . IDENT_1 . util . IDENT_2 . IDENT_3 . IDENT_8 e = org . IDENT_1 . util . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_7 ) ; type . add ( e . IDENT_7 ) ; IDENT_7 = e . rest ; } result = type . toArray ( new org . IDENT_1 . util . IDENT_2 . IDENT_3 [ type . size ( ) ] ) ; if ( org . IDENT_1 . util . IDENT_2 . IDENT_3 . IDENT_5 ) { org . IDENT_1 . util . IDENT_2 . IDENT_3 . IDENT_6 . put ( IDENT_4 , result ) ; } return result ; }
org . junit . Assert . assertTrue ( ( result == null ) ) 