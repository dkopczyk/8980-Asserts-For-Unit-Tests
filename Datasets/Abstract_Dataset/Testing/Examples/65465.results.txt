METHOD_0 ( ) { debug ( STRING_0 ) ; short [ ] IDENT_0 = new short [ ] { - 1 , 0 , 1 , IDENT_1 . IDENT_2 , IDENT_1 . MAX_VALUE } ; for ( int i = 0 ; i < ( IDENT_0 . length ) ; i ++ ) { byte [ ] bytes = org . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_1 ( IDENT_0 [ i ] ) ; short n = org . IDENT_3 . IDENT_4 . util . IDENT_5 . METHOD_2 ( bytes ) ; debug ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( IDENT_0 [ i ] ) ) ) ; debug ( ( STRING_3 + ( org . IDENT_3 . IDENT_4 . IDENT_6 . IDENT_7 . METHOD_3 ( bytes , true ) ) ) ) ; debug ( ( ( ( STRING_4 + i ) + STRING_5 ) + ( java . lang . Integer . METHOD_4 ( IDENT_0 [ i ] ) ) ) ) ; debug ( ( ( ( STRING_6 + ( java . lang . Integer . METHOD_4 ( n ) ) ) + ( org . IDENT_3 . IDENT_4 . util . IDENT_8 . IDENT_9 ) ) + STRING_7 ) ) ; "<AssertPlaceHolder>" ; } } METHOD_4 ( long ) { java . lang . String IDENT_10 ; java . lang . StringBuffer sb ; IDENT_10 = java . lang . Long . METHOD_4 ( l ) ; if ( ( IDENT_10 . length ( ) ) == 16 ) return IDENT_10 ; sb = new java . lang . StringBuffer ( 16 ) ; sb . append ( IDENT_10 ) ; while ( ( sb . length ( ) ) < 16 ) sb . insert ( 0 , STRING_8 ) ; return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( IDENT_0 [ i ] , n ) 