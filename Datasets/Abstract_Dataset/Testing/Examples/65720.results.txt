METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . IDENT_2 . IDENT_3 repository = new org . IDENT_1 . db . METHOD_1 ( ) ; byte [ ] code ; try { code = repository . getCode ( org . IDENT_4 . util . IDENT_5 . IDENT_6 . decode ( IDENT_0 ) ) ; "<AssertPlaceHolder>" ; } finally { repository . close ( ) ; } } decode ( byte [ ] ) { org . IDENT_1 . util . IDENT_7 data = org . IDENT_1 . util . IDENT_8 . METHOD_2 ( IDENT_9 ) ; org . IDENT_1 . util . IDENT_7 IDENT_10 = ( ( org . IDENT_1 . util . IDENT_7 ) ( data . get ( 0 ) ) ) ; org . IDENT_1 . util . IDENT_7 keys = ( ( org . IDENT_1 . util . IDENT_7 ) ( IDENT_10 . get ( 0 ) ) ) ; org . IDENT_1 . util . IDENT_7 values = ( ( org . IDENT_1 . util . IDENT_7 ) ( IDENT_10 . get ( 1 ) ) ) ; org . IDENT_1 . util . IDENT_11 code = ( ( org . IDENT_1 . util . IDENT_11 ) ( IDENT_10 . get ( 2 ) ) ) ; if ( ( keys . size ( ) ) > 0 ) { IDENT_12 = new java . util . ArrayList ( ) ; IDENT_13 = new java . util . ArrayList ( ) ; } for ( int i = 0 ; i < ( keys . size ( ) ) ; ++ i ) { org . IDENT_1 . util . IDENT_14 IDENT_15 = ( ( org . IDENT_1 . util . IDENT_14 ) ( keys . get ( i ) ) ) ; IDENT_12 . add ( new org . IDENT_1 . IDENT_16 . METHOD_3 ( IDENT_15 . METHOD_4 ( ) ) ) ; } for ( int i = 0 ; i < ( values . size ( ) ) ; ++ i ) { org . IDENT_1 . util . IDENT_14 IDENT_15 = ( ( org . IDENT_1 . util . IDENT_14 ) ( values . get ( i ) ) ) ; IDENT_13 . add ( new org . IDENT_1 . IDENT_16 . METHOD_3 ( IDENT_15 . METHOD_4 ( ) ) ) ; } for ( int i = 0 ; i < ( keys . size ( ) ) ; ++ i ) { org . IDENT_1 . IDENT_16 . METHOD_3 key = IDENT_12 . get ( i ) ; org . IDENT_1 . IDENT_16 . METHOD_3 value = IDENT_13 . get ( i ) ; IDENT_17 . update ( key . METHOD_5 ( ) , org . IDENT_1 . util . IDENT_8 . METHOD_6 ( value . METHOD_7 ( ) ) ) ; } this . code = code . METHOD_4 ( ) ; this . IDENT_18 = IDENT_9 ; }
org . junit . Assert . assertTrue ( ( code == null ) ) 