METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . util . List < java . lang . String > > args = new com . IDENT_0 . IDENT_1 . util . HashMap ( ) ; args . put ( STRING_0 , com . IDENT_0 . IDENT_1 . util . Arrays . asList ( STRING_1 , STRING_2 ) ) ; com . IDENT_0 . IDENT_1 . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . util . List < java . lang . String > > result = com . IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_1 ( args , IDENT_3 , null , IDENT_4 ) ; com . IDENT_0 . IDENT_1 . util . Map < java . lang . String , com . IDENT_0 . IDENT_1 . util . List < java . lang . String > > expected = new com . IDENT_0 . IDENT_1 . util . HashMap ( ) ; expected . put ( STRING_0 , com . IDENT_0 . IDENT_1 . util . Arrays . asList ( "value" , STRING_2 ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . Map , java . util . Map , java . util . Map , java . util . Map ) { if ( ( IDENT_3 == null ) || ( input == null ) ) { return input ; } final java . util . Map < java . lang . String , java . lang . String > IDENT_5 = com . IDENT_0 . IDENT_1 . util . IDENT_2 . METHOD_2 ( IDENT_3 , IDENT_6 ) ; return com . google . common . collect . IDENT_7 . METHOD_3 ( input , new com . google . common . base . IDENT_8 < java . util . List < java . lang . String > , java . util . List < java . lang . String > > ( ) { @ com . IDENT_0 . IDENT_1 . util . Override public java . util . List < java . lang . String > apply ( java . util . List < java . lang . String > input ) { java . util . List < java . lang . String > result = new java . util . ArrayList ( input . size ( ) ) ; for ( java . lang . String s : input ) { java . lang . String IDENT_9 = org . apache . commons . lang3 . text . IDENT_10 . replace ( s , IDENT_5 , com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_11 , com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_12 ) ; java . lang . String IDENT_13 = IDENT_9 . replace ( com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_11 , "" ) . replace ( com . IDENT_0 . IDENT_1 . util . IDENT_2 . IDENT_12 , "" ) ; if ( ( IDENT_4 != null ) && ( IDENT_4 . containsKey ( IDENT_13 ) ) ) { result . addAll ( IDENT_4 . get ( IDENT_13 ) ) ; IDENT_4 . remove ( IDENT_13 ) ; } else { result . add ( IDENT_9 ) ; } } return result ; } } ) ; }
org . junit . Assert . assertEquals ( expected , result ) 