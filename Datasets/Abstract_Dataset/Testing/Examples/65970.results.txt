METHOD_0 ( ) { com . baeldung . IDENT_0 . Person person = new com . baeldung . IDENT_0 . Person ( STRING_0 , INT_0 ) ; person . METHOD_1 ( STRING_1 ) ; java . util . Optional < com . baeldung . IDENT_0 . Person > IDENT_1 = java . util . Optional . of ( person ) ; java . lang . String IDENT_2 = IDENT_1 . METHOD_2 ( Person :: IDENT_3 ) . filter ( ( IDENT_4 ) -> IDENT_4 . equals ( STRING_1 ) ) . METHOD_3 ( IllegalArgumentException :: new ) ; "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ! ( obj instanceof com . baeldung . jackson . entities . IDENT_5 ) ) { return false ; } com . baeldung . jackson . entities . IDENT_5 other = ( ( com . baeldung . jackson . entities . IDENT_5 ) ( obj ) ) ; if ( ( first ) == null ) { if ( ( other . first ) != null ) { return false ; } } else if ( ! ( first . equals ( other . first ) ) ) { return false ; } if ( ( IDENT_6 ) == null ) { if ( ( other . IDENT_6 ) != null ) { return false ; } } else if ( ! ( IDENT_6 . equals ( other . IDENT_6 ) ) ) { return false ; } return true ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_2 ) 