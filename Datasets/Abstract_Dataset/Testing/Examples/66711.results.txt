METHOD_0 ( ) { java . sql . IDENT_0 IDENT_1 = IDENT_2 . METHOD_1 ( ) ; java . sql . ResultSet IDENT_3 = IDENT_1 . METHOD_2 ( null , null , STRING_0 , null ) ; while ( IDENT_3 . next ( ) ) { com . baeldung . jdbc . IDENT_4 . LOG . info ( IDENT_3 . getString ( STRING_1 ) ) ; } java . lang . String IDENT_5 = STRING_2 ; java . sql . IDENT_6 stmt = IDENT_2 . METHOD_3 ( ) ; java . sql . ResultSet IDENT_7 = stmt . METHOD_4 ( IDENT_5 ) ; java . sql . IDENT_8 IDENT_9 = IDENT_7 . METHOD_1 ( ) ; int IDENT_10 = IDENT_9 . METHOD_5 ( ) ; "<AssertPlaceHolder>" ; java . util . stream . IDENT_11 . range ( 1 , IDENT_10 ) . METHOD_6 ( ( i ) -> { try { com . baeldung . jdbc . IDENT_4 . LOG . info ( IDENT_9 . METHOD_7 ( i ) ) ; } catch ( e ) { com . baeldung . jdbc . e . printStackTrace ( ) ; } } ) ; } METHOD_4 ( java . lang . String ) { try ( java . sql . IDENT_6 statement = connection . METHOD_3 ( ) ) { java . sql . ResultSet IDENT_7 = statement . METHOD_4 ( query ) ; return METHOD_8 ( IDENT_7 ) ; } catch ( java . sql . IDENT_12 e ) { e . printStackTrace ( ) ; } return null ; }
org . junit . Assert . assertEquals ( IDENT_10 , 4 ) 