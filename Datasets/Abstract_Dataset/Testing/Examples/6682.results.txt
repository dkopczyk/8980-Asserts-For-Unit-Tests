METHOD_0 ( ) { org . apache . ambari . server . state . cluster . IDENT_0 cluster = mock ( org . apache . ambari . server . state . cluster . IDENT_0 . class ) ; when ( cluster . METHOD_1 ( ) ) . thenReturn ( new org . apache . ambari . server . state . METHOD_2 ( STRING_0 7 ) ) ; org . apache . ambari . server . metadata . IDENT_1 IDENT_2 = IDENT_3 . METHOD_3 ( cluster ) ; org . apache . ambari . server . IDENT_4 . IDENT_5 IDENT_6 = IDENT_7 . METHOD_4 ( IDENT_2 ) ; IDENT_6 . METHOD_5 ( IDENT_8 . IDENT_9 ) ; long now = java . lang . System . currentTimeMillis ( ) ; org . apache . ambari . server . IDENT_10 . IDENT_11 IDENT_12 = org . apache . ambari . server . utils . IDENT_13 . METHOD_6 ( 1 , 1 , STRING_0 4 , STRING_1 0 , STRING_1 0 ) ; IDENT_12 . METHOD_7 ( STRING_1 1 , IDENT_14 . IDENT_15 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_2 , STRING_1 1 , now ) , STRING_0 1 , STRING_0 5 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_3 , IDENT_14 . IDENT_19 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_0 6 , STRING_3 , now ) , STRING_0 1 , STRING_0 8 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 6 , IDENT_14 . IDENT_20 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_4 , STRING_1 6 , now ) , STRING_0 1 , STRING_1 2 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 7 , IDENT_14 . IDENT_21 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_0 , STRING_1 7 , now ) , STRING_0 1 , STRING_0 5 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 7 , IDENT_14 . IDENT_22 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_5 , STRING_1 7 , now ) , STRING_0 1 , STRING_0 8 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 7 , IDENT_14 . IDENT_23 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_6 , STRING_1 7 , now ) , STRING_0 1 , STRING_1 3 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_0 2 , IDENT_14 . IDENT_24 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_1 , STRING_0 2 , now ) , STRING_0 1 , STRING_1 3 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_0 0 , IDENT_14 . IDENT_25 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_1 4 , STRING_0 0 , now ) , STRING_0 1 , STRING_0 9 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 8 , IDENT_14 . IDENT_26 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_7 , STRING_1 8 , now ) , STRING_0 1 , STRING_1 5 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_1 7 , IDENT_14 . IDENT_27 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_1 9 , STRING_1 7 , now ) , STRING_0 1 , STRING_8 , false , false ) ; IDENT_12 . METHOD_7 ( STRING_9 , IDENT_14 . IDENT_28 , IDENT_16 . IDENT_17 , new org . apache . ambari . server . state . IDENT_18 . METHOD_8 ( STRING_0 3 , STRING_9 , now ) , STRING_0 1 , STRING_8 , false , false ) ; org . apache . ambari . server . IDENT_4 . IDENT_29 . log . info ( IDENT_12 . toString ( ) ) ; IDENT_6 . build ( IDENT_12 ) ; org . apache . ambari . server . IDENT_4 . IDENT_29 . log . info ( IDENT_6 . METHOD_9 ( ) ) ; java . util . List < org . apache . ambari . server . IDENT_10 . IDENT_11 > IDENT_30 = IDENT_6 . METHOD_10 ( ) ; for ( org . apache . ambari . server . IDENT_10 . IDENT_11 s : IDENT_30 ) { org . apache . ambari . server . IDENT_4 . IDENT_29 . log . info ( s . toString ( ) ) ; } "<AssertPlaceHolder>" ; } size ( ) { java . util . Set < java . lang . String > nodes = new java . util . HashSet < java . lang . String > ( ) ; for ( org . apache . ambari . IDENT_31 . model . IDENT_32 . IDENT_33 entry : IDENT_34 ) { nodes . add ( entry . METHOD_11 ( ) ) ; nodes . addAll ( entry . METHOD_12 ( ) ) ; } return nodes . size ( ) ; }
org . junit . Assert . assertEquals ( 1 , IDENT_30 . size ( ) ) 