METHOD_0 ( ) { org . apache . ambari . server . state . services . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . ambari . server . state . services . IDENT_0 . METHOD_1 ( ) ; java . util . List < org . apache . ambari . server . IDENT_3 . entities . IDENT_4 > IDENT_5 = METHOD_2 ( STRING_0 ) ; org . apache . ambari . server . IDENT_3 . entities . IDENT_4 IDENT_6 = IDENT_5 . get ( 0 ) ; org . apache . ambari . server . IDENT_3 . entities . IDENT_4 IDENT_7 = IDENT_5 . get ( 1 ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_3 ( ) ) . andReturn ( IDENT_5 ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_5 ( IDENT_6 ) ) . andReturn ( IDENT_6 ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_8 . METHOD_5 ( IDENT_7 ) ) . andReturn ( IDENT_7 ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_9 . METHOD_6 ( STRING_0 ) ) . andReturn ( IDENT_2 ) . METHOD_7 ( ) ; org . easymock . EasyMock . replay ( IDENT_8 , IDENT_9 ) ; org . apache . ambari . server . state . services . IDENT_10 service = IDENT_11 . getInstance ( org . apache . ambari . server . state . services . IDENT_10 . class ) ; service . METHOD_8 ( ) ; service . METHOD_9 ( new org . apache . ambari . server . state . services . IDENT_0 . METHOD_10 ( ) ) ; service . METHOD_11 ( ) ; org . easymock . EasyMock . verify ( IDENT_8 , IDENT_9 ) ; java . util . List < org . apache . ambari . server . IDENT_12 . IDENT_13 > IDENT_12 = IDENT_2 . METHOD_12 ( ) ; "<AssertPlaceHolder>" ; } size ( ) { java . util . Set < java . lang . String > nodes = new java . util . HashSet < java . lang . String > ( ) ; for ( org . apache . ambari . IDENT_14 . model . IDENT_15 . IDENT_16 entry : IDENT_17 ) { nodes . add ( entry . METHOD_13 ( ) ) ; nodes . addAll ( entry . METHOD_14 ( ) ) ; } return nodes . size ( ) ; }
org . junit . Assert . assertEquals ( 2 , IDENT_12 . size ( ) ) 