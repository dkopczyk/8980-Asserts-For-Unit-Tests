METHOD_0 ( ) { org . apache . ambari . server . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . ambari . server . IDENT_0 . METHOD_1 ( "test" , IDENT_3 , IDENT_4 , configuration , null , IDENT_5 ) ; java . util . HashMap < java . lang . String , java . lang . String > IDENT_6 = new java . util . HashMap ( ) ; IDENT_6 . put ( IDENT_7 . IDENT_8 , STRING_0 ) ; expect ( IDENT_5 . METHOD_2 ( IDENT_7 . IDENT_9 ) ) . andReturn ( java . util . Collections . METHOD_3 ( IDENT_6 ) ) ; replay ( IDENT_4 , IDENT_5 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_4 , IDENT_5 ) ; } METHOD_4 ( ) { if ( ( IDENT_5 ) == null ) { return false ; } java . util . Set < java . util . HashMap < java . lang . String , java . lang . String > > IDENT_10 = IDENT_5 . METHOD_2 ( IDENT_7 . IDENT_9 ) ; for ( java . util . Map < java . lang . String , java . lang . String > IDENT_5 : IDENT_10 ) { if ( IDENT_5 . containsKey ( IDENT_7 . IDENT_8 ) ) { return IDENT_5 . get ( IDENT_7 . IDENT_8 ) . equalsIgnoreCase ( STRING_0 ) ; } } return false ; }
org . junit . Assert . assertTrue ( IDENT_2 . METHOD_4 ( ) ) 