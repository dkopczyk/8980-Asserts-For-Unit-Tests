METHOD_0 ( ) { org . apache . ambari . server . view . IDENT_0 IDENT_1 = new org . apache . ambari . server . view . METHOD_1 ( ) ; expect ( org . apache . ambari . server . view . IDENT_2 . configuration . METHOD_2 ( ) ) . andReturn ( IDENT_3 ) . METHOD_3 ( ) ; IDENT_1 . configuration = org . apache . ambari . server . view . IDENT_2 . configuration ; IDENT_1 . IDENT_4 = org . apache . ambari . server . view . IDENT_2 . IDENT_4 ; replay ( org . apache . ambari . server . view . IDENT_2 . configuration ) ; final java . util . concurrent . IDENT_5 IDENT_6 = new java . util . concurrent . METHOD_4 ( 1 ) ; IDENT_1 . METHOD_5 ( new com . google . common . base . IDENT_7 < java . nio . file . Path , java . lang . Boolean > ( ) { @ javax . annotation . IDENT_8 @ org . apache . ambari . server . view . Override public org . apache . ambari . server . view . Boolean apply ( @ javax . annotation . IDENT_8 java . nio . file . Path path ) { IDENT_6 . METHOD_6 ( ) ; return true ; } } ) ; IDENT_1 . start ( ) ; IDENT_6 . METHOD_7 ( 1 , org . apache . ambari . server . view . IDENT_9 ) ; "<AssertPlaceHolder>" ; verify ( org . apache . ambari . server . view . IDENT_2 . configuration ) ; } METHOD_8 ( ) { if ( ( IDENT_10 ) != null ) return ! ( IDENT_10 . METHOD_9 ( ) ) ; return false ; }
org . junit . Assert . assertTrue ( IDENT_1 . METHOD_8 ( ) ) 