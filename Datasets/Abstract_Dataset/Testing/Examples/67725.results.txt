METHOD_0 ( ) { IDENT_0 . template . IDENT_1 template = IDENT_2 . METHOD_1 ( METHOD_2 ( STRING_0 ) ) ; java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ; params . put ( IDENT_3 . IDENT_4 . toString ( ) , java . lang . Integer . valueOf ( 10 ) ) ; params . put ( IDENT_3 . IDENT_5 . toString ( ) , java . lang . Integer . valueOf ( 20 ) ) ; com . IDENT_6 . IDENT_7 . uri . IDENT_8 rule = mock ( com . IDENT_6 . IDENT_7 . uri . IDENT_8 . class ) ; when ( rule . METHOD_3 ( ) ) . thenReturn ( "" ) ; params . put ( IDENT_3 . IDENT_9 . toString ( ) , rule ) ; java . lang . String value = this . process ( template , params ) ; value = org . apache . commons . lang . StringUtils . METHOD_4 ( value ) ; java . lang . String expected = STRING_1 ; "<AssertPlaceHolder>" ; } process ( org . apache . http . IDENT_10 , org . apache . http . protocol . IDENT_11 ) { org . apache . http . IDENT_12 entity = response . METHOD_5 ( ) ; org . apache . http . IDENT_13 IDENT_14 = entity . METHOD_6 ( ) ; if ( IDENT_14 != null ) { org . apache . http . IDENT_15 [ ] IDENT_16 = IDENT_14 . METHOD_7 ( ) ; for ( org . apache . http . IDENT_15 codec : IDENT_16 ) { if ( codec . getName ( ) . equalsIgnoreCase ( STRING_2 ) ) { response . METHOD_8 ( new com . IDENT_6 . plugin . IDENT_17 . IDENT_18 . IDENT_19 . IDENT_20 . METHOD_9 ( response . METHOD_5 ( ) ) ) ; return ; } } } }
org . junit . Assert . assertEquals ( expected , value ) 