METHOD_0 ( ) { org . exist . storage . IDENT_0 IDENT_1 = org . easymock . EasyMock . METHOD_1 ( org . exist . storage . IDENT_0 . class ) ; org . exist . IDENT_2 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( org . exist . IDENT_2 . class ) ; org . exist . storage . IDENT_4 IDENT_5 = org . easymock . EasyMock . METHOD_1 ( org . exist . storage . IDENT_4 . class ) ; org . exist . dom . IDENT_6 . IDENT_7 IDENT_8 = org . easymock . EasyMock . METHOD_1 ( org . exist . dom . IDENT_6 . IDENT_7 . class ) ; org . exist . dom . IDENT_6 . IDENT_9 IDENT_10 = org . easymock . EasyMock . METHOD_1 ( org . exist . dom . IDENT_6 . IDENT_9 . class ) ; org . exist . security . IDENT_11 IDENT_12 = org . easymock . EasyMock . METHOD_1 ( org . exist . security . IDENT_11 . class ) ; final org . exist . dom . IDENT_6 . IDENT_13 . IDENT_14 IDENT_15 = new org . exist . dom . IDENT_6 . IDENT_13 . METHOD_2 ( ) ; final org . exist . dom . IDENT_6 . IDENT_16 IDENT_17 = new org . exist . dom . IDENT_6 . METHOD_3 ( ) ; expect ( IDENT_1 . METHOD_4 ( ) ) . andReturn ( IDENT_12 ) . times ( 2 ) ; expect ( IDENT_12 . METHOD_5 ( ) ) . andReturn ( IDENT_3 ) . times ( 2 ) ; expect ( IDENT_3 . METHOD_6 ( ) ) . andReturn ( IDENT_5 ) . times ( 2 ) ; expect ( IDENT_5 . METHOD_7 ( ) ) . andReturn ( IDENT_8 ) . times ( 2 ) ; expect ( IDENT_8 . METHOD_8 ( ) ) . andReturn ( IDENT_18 . IDENT_19 ) . times ( 2 ) ; expect ( IDENT_8 . getId ( ) ) . andReturn ( IDENT_20 . IDENT_21 ) . times ( 2 ) ; expect ( IDENT_8 . METHOD_9 ( ) ) . andReturn ( IDENT_10 ) . times ( 2 ) ; expect ( IDENT_10 . getId ( ) ) . andReturn ( IDENT_20 . IDENT_22 ) . times ( 2 ) ; replay ( IDENT_1 , IDENT_3 , IDENT_5 , IDENT_8 , IDENT_10 , IDENT_12 ) ; org . exist . dom . IDENT_6 . IDENT_23 doc = new org . exist . dom . IDENT_6 . METHOD_10 ( IDENT_1 ) ; doc . METHOD_11 ( IDENT_15 ) ; org . exist . dom . IDENT_6 . METHOD_10 other = new org . exist . dom . IDENT_6 . METHOD_10 ( IDENT_1 ) ; other . METHOD_11 ( IDENT_17 ) ; doc . METHOD_12 ( IDENT_5 , other , ( ( org . exist . dom . IDENT_6 . METHOD_10 ) ( null ) ) ) ; verify ( IDENT_1 , IDENT_3 , IDENT_5 , IDENT_8 , IDENT_10 , IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_13 ( ) { return IDENT_24 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_15 . METHOD_13 ( ) ) 