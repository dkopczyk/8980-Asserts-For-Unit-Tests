METHOD_0 ( ) { final int IDENT_0 = org . exist . storage . IDENT_1 . IDENT_2 . IDENT_3 ; final org . exist . IDENT_4 . IDENT_5 IDENT_6 = org . exist . IDENT_4 . IDENT_5 . create ( STRING_0 ) ; final org . exist . storage . IDENT_1 . IDENT_7 IDENT_8 = new org . exist . storage . IDENT_1 . METHOD_1 ( org . exist . storage . IDENT_1 . IDENT_2 . IDENT_3 ) ; final org . exist . storage . IDENT_1 . IDENT_9 IDENT_10 = new org . exist . storage . IDENT_1 . METHOD_2 ( IDENT_0 ) ; final java . util . function . IDENT_11 < org . exist . storage . IDENT_1 . IDENT_12 < java . lang . IDENT_13 > > IDENT_14 = ( ) -> ( ) -> { try ( final org . exist . storage . IDENT_1 . IDENT_15 IDENT_16 = IDENT_8 . METHOD_3 ( IDENT_6 ) ) { IDENT_10 . METHOD_4 ( ) ; IDENT_10 . METHOD_5 ( ) ; } return null ; } ; final java . util . List < org . exist . storage . IDENT_1 . IDENT_12 < java . lang . IDENT_13 > > IDENT_17 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { IDENT_17 . add ( IDENT_14 . get ( ) ) ; } final org . exist . storage . IDENT_1 . IDENT_18 IDENT_19 = org . exist . storage . IDENT_1 . IDENT_20 . METHOD_6 ( IDENT_0 ) ; final java . util . List < org . exist . storage . IDENT_1 . IDENT_21 < java . lang . IDENT_13 > > IDENT_22 = IDENT_19 . METHOD_7 ( IDENT_17 , org . exist . storage . IDENT_1 . IDENT_2 . IDENT_23 , TimeUnit . IDENT_24 ) ; for ( final org . exist . storage . IDENT_1 . IDENT_21 < java . lang . IDENT_13 > future : IDENT_22 ) { if ( future . METHOD_8 ( ) ) { org . junit . Assert . fail ( STRING_1 ) ; } } IDENT_19 . METHOD_9 ( ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( ) { return count ; }
org . junit . Assert . assertEquals ( 0 , IDENT_10 . METHOD_10 ( ) ) 