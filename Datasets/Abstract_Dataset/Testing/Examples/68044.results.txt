METHOD_0 ( ) { final org . exist . storage . IDENT_0 pool = org . exist . indexing . IDENT_1 . IDENT_2 . server . METHOD_1 ( ) ; try ( final org . exist . storage . IDENT_3 IDENT_4 = pool . get ( java . util . Optional . of ( pool . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; final org . exist . storage . IDENT_5 . IDENT_6 transaction = pool . METHOD_4 ( ) . METHOD_5 ( ) ; final org . exist . collections . Collection IDENT_7 = IDENT_4 . METHOD_6 ( org . exist . indexing . IDENT_1 . IDENT_2 . IDENT_8 , IDENT_9 . IDENT_10 . IDENT_11 ) ) { org . exist . indexing . IDENT_1 . IDENT_12 IDENT_13 = ( ( org . exist . indexing . IDENT_1 . IDENT_12 ) ( IDENT_4 . METHOD_7 ( ) . METHOD_8 ( IDENT_14 . IDENT_15 ) ) ) ; if ( IDENT_13 != null ) { java . sql . IDENT_16 conn = null ; try { conn = IDENT_13 . METHOD_9 ( ) ; for ( int i = 0 ; i < ( org . exist . indexing . IDENT_1 . IDENT_2 . IDENT_17 . length ) ; i ++ ) { try ( final org . exist . dom . IDENT_18 . IDENT_19 IDENT_20 = IDENT_4 . METHOD_10 ( org . exist . indexing . IDENT_1 . IDENT_2 . IDENT_8 . append ( org . exist . indexing . IDENT_1 . IDENT_2 . IDENT_17 [ i ] ) , IDENT_9 . IDENT_10 . IDENT_11 ) ) { final org . exist . dom . IDENT_18 . IDENT_21 doc = IDENT_20 . METHOD_11 ( ) ; java . sql . IDENT_22 IDENT_23 = conn . METHOD_12 ( ( ( STRING_0 + ( IDENT_24 . IDENT_25 ) ) + STRING_1 ) ) ; IDENT_23 . METHOD_13 ( 1 , IDENT_7 . METHOD_14 ( ) . append ( doc . METHOD_14 ( ) ) . METHOD_15 ( ) ) ; java . sql . ResultSet rs = IDENT_23 . METHOD_16 ( ) ; while ( rs . next ( ) ) { } int count = rs . METHOD_17 ( ) ; IDENT_23 . close ( ) ; "<AssertPlaceHolder>" ; } } } finally { IDENT_13 . METHOD_18 ( conn ) ; } } transaction . commit ( ) ; } } close ( ) { java . util . Iterator < org . exist . indexing . IDENT_1 . IDENT_26 > i = IDENT_27 . values ( ) . iterator ( ) ; while ( i . hasNext ( ) ) { org . exist . indexing . IDENT_1 . IDENT_26 IDENT_28 = i . next ( ) ; IDENT_28 . METHOD_19 ( ) ; IDENT_28 . METHOD_20 ( null , IDENT_29 . IDENT_30 ) ; } METHOD_21 ( ) ; }
org . junit . Assert . assertEquals ( 0 , count ) 