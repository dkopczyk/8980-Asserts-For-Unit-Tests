METHOD_0 ( ) { org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . IDENT_4 [ ] data = new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . IDENT_4 [ ] { new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . impl . METHOD_1 ( 0 , 10 ) , new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . impl . METHOD_1 ( ( - 5 ) , ( - 1 ) ) , new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . impl . METHOD_1 ( 12 , 12 ) , new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . impl . METHOD_1 ( 15 , INT_0 ) , new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . impl . METHOD_1 ( ( - 10 ) , ( - 6 ) ) } ; for ( org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . IDENT_4 range : data ) { IDENT_5 . add ( range ) ; } java . util . Arrays . METHOD_2 ( data , new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . METHOD_3 ( ) ) ; IDENT_5 . METHOD_2 ( new org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . METHOD_3 ( ) ) ; int index = 0 ; for ( org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_2 . IDENT_3 . IDENT_4 IDENT_6 : IDENT_5 . METHOD_4 ( ) ) { "<AssertPlaceHolder>" ; } } METHOD_4 ( ) { return data ; }
org . junit . Assert . assertEquals ( data [ ( index ++ ) ] , IDENT_6 ) 