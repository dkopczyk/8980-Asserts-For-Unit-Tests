METHOD_0 ( ) { java . nio . file . Path root = java . nio . file . IDENT_0 . get ( STRING_0 ) ; com . google . common . collect . ImmutableMap < java . lang . String , com . facebook . buck . IDENT_1 . IDENT_2 . IDENT_3 > expected = com . google . common . collect . ImmutableMap . of ( STRING_1 , com . facebook . buck . IDENT_1 . IDENT_2 . IDENT_3 . builder ( ) . METHOD_1 ( STRING_1 ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( root . resolve ( STRING_3 ) ) . build ( ) , STRING_4 , com . facebook . buck . IDENT_1 . IDENT_2 . IDENT_3 . builder ( ) . METHOD_1 ( STRING_4 ) . METHOD_3 ( root . resolve ( STRING_5 ) ) . build ( ) , STRING_6 , com . facebook . buck . IDENT_1 . IDENT_2 . IDENT_3 . builder ( ) . METHOD_1 ( STRING_6 ) . METHOD_2 ( STRING_2 ) . METHOD_3 ( root . resolve ( STRING_7 ) ) . build ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . util . Optional , com . google . common . collect . ImmutableList ) { ImmutableMap . Builder < java . lang . String , com . facebook . buck . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = com . google . common . collect . ImmutableMap . builder ( ) ; java . util . HashSet < java . nio . file . Path > IDENT_5 = new java . util . HashSet < java . nio . file . Path > ( IDENT_6 ) ; if ( IDENT_7 . METHOD_5 ( ) ) { java . nio . file . Path IDENT_8 = IDENT_7 . get ( ) . resolve ( STRING_8 ) ; com . facebook . buck . IDENT_1 . IDENT_2 . impl . IDENT_9 . LOG . debug ( STRING_9 , IDENT_8 ) ; IDENT_5 . add ( IDENT_8 ) ; } for ( java . nio . file . Path IDENT_10 : IDENT_5 ) { if ( ! ( java . nio . file . IDENT_11 . exists ( IDENT_10 ) ) ) { com . facebook . buck . IDENT_1 . IDENT_2 . impl . IDENT_9 . LOG . debug ( STRING_10 , IDENT_10 ) ; continue ; } com . facebook . buck . IDENT_1 . IDENT_2 . impl . IDENT_9 . LOG . debug ( STRING_11 , IDENT_10 ) ; try ( java . nio . file . IDENT_12 < java . nio . file . Path > IDENT_13 = java . nio . file . IDENT_11 . METHOD_6 ( IDENT_10 , STRING_12 ) ) { for ( java . nio . file . Path IDENT_14 : com . google . common . collect . IDENT_15 . METHOD_7 ( IDENT_13 ) ) { com . facebook . buck . IDENT_1 . IDENT_2 . impl . IDENT_9 . LOG . debug ( STRING_13 , IDENT_14 ) ; METHOD_8 ( IDENT_14 , IDENT_4 ) ; } } } return IDENT_4 . build ( ) ; }
org . junit . Assert . assertThat ( com . facebook . buck . IDENT_1 . IDENT_2 . impl . IDENT_9 . METHOD_4 ( java . util . Optional . of ( root ) , com . google . common . collect . ImmutableList . of ( ) ) , org . hamcrest . Matchers . equalTo ( expected ) ) 