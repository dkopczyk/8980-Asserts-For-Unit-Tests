METHOD_0 ( ) { com . facebook . buck . IDENT_0 . IDENT_1 IDENT_2 = org . easymock . EasyMock . METHOD_1 ( com . facebook . buck . IDENT_0 . IDENT_1 . class ) ; java . io . IOException exception = new java . io . IOException ( STRING_0 ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_2 ( org . easymock . EasyMock . METHOD_3 ( ) ) ) . andReturn ( com . google . common . util . concurrent . IDENT_3 . METHOD_4 ( exception ) ) . METHOD_5 ( ) ; org . easymock . EasyMock . replay ( IDENT_2 ) ; com . facebook . buck . core . build . engine . cache . manager . IDENT_4 service = com . facebook . buck . core . build . engine . cache . manager . IDENT_5 . METHOD_6 ( IDENT_2 ) ; java . nio . file . Path IDENT_6 = METHOD_7 ( ) . METHOD_8 ( ) ; java . nio . file . IDENT_7 . write ( IDENT_6 , com . facebook . buck . core . build . engine . cache . manager . IDENT_8 . IDENT_9 ) ; try { service . METHOD_9 ( com . facebook . buck . core . build . engine . cache . manager . IDENT_8 . IDENT_10 , IDENT_6 , com . facebook . buck . core . build . engine . cache . manager . IDENT_8 . IDENT_11 ) . get ( ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( java . util . concurrent . IDENT_12 e ) { "<AssertPlaceHolder>" ; } org . easymock . EasyMock . verify ( IDENT_2 ) ; } getMessage ( ) { return this . message ; }
org . junit . Assert . assertTrue ( e . getMessage ( ) . contains ( exception . getMessage ( ) ) ) 