METHOD_0 ( ) { com . facebook . buck . core . IDENT_0 . IDENT_1 key = new com . facebook . buck . core . IDENT_0 . METHOD_1 ( STRING_0 ) ; com . facebook . buck . core . IDENT_2 . IDENT_3 input = com . facebook . buck . core . IDENT_2 . IDENT_4 . of ( STRING_1 ) ; com . facebook . buck . core . build . engine . IDENT_5 . IDENT_6 IDENT_5 = com . facebook . buck . core . build . engine . IDENT_5 . IDENT_7 . METHOD_2 ( new com . facebook . buck . core . IDENT_0 . METHOD_1 ( STRING_2 ) , com . google . common . collect . ImmutableMap . of ( key , com . google . common . collect . ImmutableMap . of ( com . facebook . buck . core . build . engine . IDENT_5 . IDENT_8 . IDENT_9 . METHOD_3 ( input ) . toString ( ) , com . google . common . hash . IDENT_10 . METHOD_4 ( 1 ) ) ) ) ; com . facebook . buck . util . cache . IDENT_11 IDENT_12 = new com . facebook . buck . IDENT_13 . METHOD_5 ( com . google . common . collect . ImmutableMap . of ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( com . facebook . buck . util . IDENT_14 . IDENT_15 , com . facebook . buck . core . IDENT_2 . resolver . IDENT_16 , com . google . common . collect . IDENT_17 ) { com . google . common . collect . IDENT_17 . Builder < java . lang . String > IDENT_18 = new com . google . common . collect . IDENT_17 . Builder < > ( ) ; for ( com . facebook . buck . util . types . IDENT_19 < ? , int [ ] > entry : IDENT_20 ) { for ( int IDENT_21 : entry . METHOD_7 ( ) ) { IDENT_18 . add ( IDENT_22 . get ( IDENT_23 . get ( IDENT_21 ) . METHOD_8 ( ) ) ) ; } } com . google . common . collect . IDENT_17 < java . lang . String > IDENT_24 = IDENT_18 . build ( ) ; com . google . common . collect . IDENT_25 < java . lang . String , com . facebook . buck . core . IDENT_2 . IDENT_3 > IDENT_26 = com . facebook . buck . core . build . engine . IDENT_5 . IDENT_6 . index ( IDENT_27 , ( path ) -> METHOD_9 ( path , resolver ) , IDENT_24 :: contains ) ; for ( com . facebook . buck . util . types . IDENT_19 < com . facebook . buck . core . IDENT_0 . METHOD_1 , int [ ] > entry : IDENT_20 ) { if ( METHOD_10 ( IDENT_28 , resolver , IDENT_26 , entry . METHOD_7 ( ) ) ) { return java . util . Optional . of ( entry . METHOD_8 ( ) ) ; } } return java . util . Optional . empty ( ) ; }
org . junit . Assert . assertThat ( IDENT_5 . METHOD_6 ( IDENT_12 , com . facebook . buck . core . build . engine . IDENT_5 . IDENT_8 . IDENT_9 , com . google . common . collect . IDENT_17 . of ( input ) ) , org . hamcrest . Matchers . equalTo ( java . util . Optional . empty ( ) ) ) 