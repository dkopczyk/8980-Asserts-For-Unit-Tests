METHOD_0 ( ) { com . facebook . buck . io . IDENT_0 . impl . IDENT_1 IDENT_0 = new com . facebook . buck . io . IDENT_0 . impl . METHOD_1 ( ) ; com . facebook . buck . IDENT_2 . IDENT_3 service = org . easymock . EasyMock . METHOD_2 ( com . facebook . buck . IDENT_2 . IDENT_3 . class ) ; java . nio . file . Path IDENT_4 = IDENT_0 . METHOD_3 ( ) ; com . facebook . buck . IDENT_2 . IDENT_5 . IDENT_6 IDENT_7 = new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_4 ( ) ; IDENT_7 . METHOD_5 ( new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_6 ( ) . setId ( STRING_0 ) ) ; IDENT_7 . METHOD_7 ( STRING_1 . getBytes ( ) ) ; com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_4 IDENT_8 = new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_4 ( ) ; IDENT_8 . METHOD_5 ( new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_6 ( ) . setId ( STRING_2 ) ) ; IDENT_8 . METHOD_7 ( STRING_3 . getBytes ( ) ) ; com . facebook . buck . IDENT_2 . IDENT_5 . IDENT_9 IDENT_10 = new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_8 ( ) ; IDENT_10 . METHOD_9 ( IDENT_7 ) ; IDENT_10 . METHOD_9 ( IDENT_8 ) ; com . facebook . buck . IDENT_2 . IDENT_5 . IDENT_11 IDENT_12 = new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_10 ( ) . setId ( STRING_4 ) ; java . util . List < com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_6 > IDENT_13 = com . google . common . collect . Lists . newArrayList ( ) ; org . easymock . EasyMock . expect ( service . METHOD_11 ( org . easymock . EasyMock . eq ( IDENT_12 ) , org . easymock . EasyMock . eq ( IDENT_13 ) ) ) . andReturn ( IDENT_10 ) . METHOD_12 ( ) ; org . easymock . EasyMock . replay ( service ) ; com . facebook . buck . IDENT_2 . IDENT_14 . IDENT_15 IDENT_16 = new com . facebook . buck . IDENT_2 . IDENT_14 . METHOD_13 ( service , IDENT_0 , IDENT_4 ) ; IDENT_13 . add ( new com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_6 ( ) . setId ( STRING_5 ) ) ; java . util . List < com . facebook . buck . IDENT_2 . IDENT_5 . METHOD_4 > result = IDENT_16 . METHOD_14 ( IDENT_12 , IDENT_13 ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( service ) ; } size ( ) { return IDENT_17 . size ( ) ; }
org . junit . Assert . assertEquals ( 2 , result . size ( ) ) 