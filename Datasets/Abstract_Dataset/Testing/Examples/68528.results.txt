METHOD_0 ( ) { com . facebook . buck . util . IDENT_0 IDENT_1 = com . facebook . buck . util . IDENT_0 . IDENT_2 ; com . facebook . buck . command . IDENT_3 IDENT_4 = org . easymock . EasyMock . METHOD_1 ( com . facebook . buck . command . IDENT_3 . class ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_2 ( org . easymock . EasyMock . METHOD_3 ( ) , org . easymock . EasyMock . METHOD_3 ( ) ) ) . andReturn ( IDENT_1 ) . METHOD_4 ( ) ; com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_7 . IDENT_8 IDENT_9 = org . easymock . EasyMock . METHOD_1 ( IDENT_7 . IDENT_8 . class ) ; IDENT_9 . METHOD_5 ( org . easymock . EasyMock . eq ( IDENT_1 . getCode ( ) ) ) ; org . easymock . EasyMock . METHOD_6 ( ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_4 , IDENT_9 ) ; com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_7 runner = new com . facebook . buck . IDENT_5 . IDENT_6 . METHOD_7 ( com . google . common . util . concurrent . IDENT_10 . METHOD_8 ( IDENT_4 ) , com . google . common . collect . Lists . newArrayList ( ) , IDENT_9 , com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_11 . IDENT_12 , com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_11 . IDENT_13 ) ; com . facebook . buck . util . IDENT_0 IDENT_14 = runner . METHOD_9 ( com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_11 . IDENT_15 ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_4 , IDENT_9 ) ; } METHOD_9 ( com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_16 ) { try ( com . google . common . io . IDENT_17 IDENT_18 = com . google . common . io . IDENT_17 . create ( ) ) { IDENT_18 . METHOD_10 ( IDENT_19 . METHOD_11 ( STRING_0 , com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_20 . METHOD_12 ( IDENT_21 , IDENT_22 ) ) ) ; try { java . util . List < com . facebook . buck . util . types . IDENT_23 < com . facebook . buck . core . rules . IDENT_24 , com . facebook . buck . core . IDENT_25 . IDENT_26 > > IDENT_27 = com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_20 . METHOD_13 ( com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_20 . METHOD_14 ( state , IDENT_28 , IDENT_29 ) , IDENT_30 , IDENT_31 , IDENT_32 , IDENT_33 , IDENT_34 ) ; java . util . List < com . facebook . buck . IDENT_5 . IDENT_35 . IDENT_36 > IDENT_37 = IDENT_27 . stream ( ) . map ( ( IDENT_38 ) -> { com . facebook . buck . IDENT_5 . IDENT_35 . IDENT_39 event = new com . facebook . buck . IDENT_5 . IDENT_35 . METHOD_15 ( ) ; event . METHOD_16 ( IDENT_38 . METHOD_17 ( ) . METHOD_18 ( ) ) ; event . METHOD_19 ( IDENT_38 . METHOD_20 ( ) . METHOD_21 ( ) . toString ( ) ) ; com . facebook . buck . IDENT_5 . IDENT_35 . IDENT_36 IDENT_40 = new com . facebook . buck . IDENT_5 . IDENT_35 . METHOD_22 ( ) ; IDENT_40 . METHOD_23 ( IDENT_41 . IDENT_42 ) ; IDENT_40 . METHOD_24 ( event ) ; return IDENT_40 ; } ) . collect ( java . util . stream . IDENT_43 . toList ( ) ) ; java . util . List < java . util . List < com . facebook . buck . IDENT_5 . IDENT_35 . METHOD_22 > > IDENT_44 = com . google . common . collect . Lists . METHOD_25 ( IDENT_37 , com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_20 . IDENT_45 ) ; for ( java . util . List < com . facebook . buck . IDENT_5 . IDENT_35 . METHOD_22 > IDENT_46 : IDENT_44 ) { IDENT_22 . METHOD_26 ( IDENT_21 , IDENT_47 , IDENT_46 ) ; } IDENT_22 . METHOD_27 ( IDENT_21 , IDENT_47 , IDENT_48 . currentTimeMillis ( ) ) ; IDENT_22 . METHOD_5 ( IDENT_21 , IDENT_49 . IDENT_50 , STRING_1 ) ; return com . facebook . buck . util . IDENT_0 . IDENT_51 ; } catch ( java . util . concurrent . IDENT_52 | java . io . IOException e ) { com . facebook . buck . IDENT_5 . IDENT_6 . IDENT_20 . LOG . error ( e , STRING_2 ) ; IDENT_22 . METHOD_5 ( IDENT_21 , IDENT_49 . IDENT_53 , STRING_3 ) ; return com . facebook . buck . util . IDENT_0 . IDENT_54 ; } } }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_14 ) 