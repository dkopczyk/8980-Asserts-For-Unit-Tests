METHOD_0 ( ) { com . facebook . buck . core . IDENT_0 . IDENT_1 IDENT_2 = METHOD_1 ( com . google . common . collect . ImmutableList . of ( STRING_0 ) , STRING_1 , true , STRING_2 ) ; for ( int i = 0 ; i < 20 ; i ++ ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( com . google . common . collect . ImmutableList , java . lang . String , boolean , java . lang . String ) { com . facebook . buck . core . model . IDENT_3 target = com . facebook . buck . core . model . IDENT_4 . newInstance ( STRING_3 ) ; com . facebook . buck . core . rules . IDENT_5 params = new com . facebook . buck . core . rules . METHOD_2 ( IDENT_6 :: of , IDENT_6 :: of , com . google . common . collect . IDENT_6 . of ( ) ) ; com . facebook . buck . file . IDENT_7 IDENT_8 = new com . facebook . buck . file . METHOD_3 ( target , IDENT_9 , params , ( IDENT_10 , path , output ) -> false , IDENT_11 . stream ( ) . map ( URI :: create ) . collect ( com . google . common . collect . ImmutableList . METHOD_4 ( ) ) , com . google . common . hash . IDENT_12 . METHOD_5 ( IDENT_13 ) , out , IDENT_14 ) ; com . facebook . buck . core . rules . IDENT_15 IDENT_16 = new com . facebook . buck . core . rules . METHOD_6 ( new com . facebook . buck . core . rules . resolver . impl . METHOD_7 ( ) ) ; com . facebook . buck . core . IDENT_17 . resolver . IDENT_18 IDENT_19 = com . facebook . buck . core . IDENT_17 . resolver . impl . IDENT_20 . from ( IDENT_16 ) ; com . facebook . buck . IDENT_21 . IDENT_22 IDENT_23 = com . facebook . buck . IDENT_21 . IDENT_22 . METHOD_8 ( com . google . common . collect . ImmutableMap . of ( ) ) ; return new com . facebook . buck . rules . keys . METHOD_9 ( IDENT_23 , IDENT_19 , IDENT_16 ) . build ( IDENT_8 ) ; }
org . junit . Assert . assertEquals ( IDENT_2 , METHOD_1 ( com . google . common . collect . ImmutableList . of ( STRING_0 ) , STRING_1 , true , STRING_2 ) ) 