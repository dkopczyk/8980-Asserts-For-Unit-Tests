METHOD_0 ( ) { com . facebook . buck . file . IDENT_0 . IDENT_1 IDENT_2 = org . easymock . EasyMock . METHOD_1 ( STRING_0 , com . facebook . buck . file . IDENT_0 . IDENT_1 . class ) ; com . facebook . buck . file . IDENT_0 . IDENT_1 IDENT_3 = org . easymock . EasyMock . METHOD_1 ( STRING_1 , com . facebook . buck . file . IDENT_0 . IDENT_1 . class ) ; com . facebook . buck . file . IDENT_0 . IDENT_1 IDENT_4 = org . easymock . EasyMock . METHOD_1 ( STRING_2 , com . facebook . buck . file . IDENT_0 . IDENT_1 . class ) ; com . facebook . buck . file . IDENT_0 . IDENT_1 IDENT_5 = org . easymock . EasyMock . METHOD_2 ( STRING_3 , com . facebook . buck . file . IDENT_0 . IDENT_1 . class ) ; com . facebook . buck . event . IDENT_6 IDENT_7 = com . facebook . buck . event . IDENT_8 . newInstance ( ) ; java . net . URI uri = new java . net . URI ( STRING_4 ) ; java . nio . file . Path output = java . nio . file . IDENT_9 . get ( STRING_5 ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_3 ( IDENT_7 , uri , output ) ) . andReturn ( false ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_3 ( IDENT_7 , uri , output ) ) . METHOD_4 ( new java . io . IOException ( "" ) ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_3 ( IDENT_7 , uri , output ) ) . andReturn ( true ) ; org . easymock . EasyMock . replay ( IDENT_2 , IDENT_3 , IDENT_4 , IDENT_5 ) ; com . facebook . buck . file . IDENT_0 . impl . IDENT_10 IDENT_0 = new com . facebook . buck . file . IDENT_0 . impl . METHOD_5 ( com . google . common . collect . ImmutableList . of ( IDENT_2 , IDENT_3 , IDENT_4 , IDENT_5 ) ) ; boolean result = IDENT_0 . METHOD_3 ( IDENT_7 , uri , output ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_2 , IDENT_3 , IDENT_4 , IDENT_5 ) ; } METHOD_3 ( com . facebook . buck . event . IDENT_6 , java . net . URI , java . nio . file . Path ) { if ( ! ( STRING_6 . equals ( uri . METHOD_6 ( ) ) ) ) { return false ; } uri = com . facebook . buck . file . IDENT_0 . impl . IDENT_11 . METHOD_7 ( com . facebook . buck . file . IDENT_0 . impl . IDENT_12 . IDENT_13 , uri ) ; java . nio . file . Path target = root . resolve ( uri . getPath ( ) . substring ( 1 ) ) ; if ( ! ( java . nio . file . IDENT_14 . exists ( target ) ) ) { throw new java . io . IOException ( java . lang . String . format ( STRING_7 , target , uri ) ) ; } com . facebook . buck . file . IDENT_0 . impl . IDENT_15 . IDENT_16 IDENT_17 = com . facebook . buck . file . IDENT_0 . impl . IDENT_15 . METHOD_8 ( target . METHOD_9 ( ) ) ; IDENT_7 . METHOD_10 ( METHOD_8 ) ; try ( java . io . InputStream is = new java . io . METHOD_11 ( java . nio . file . IDENT_14 . METHOD_12 ( target ) ) ) { java . nio . file . IDENT_14 . METHOD_13 ( is , output ) ; } finally { IDENT_7 . METHOD_10 ( com . facebook . buck . file . IDENT_0 . impl . IDENT_15 . METHOD_14 ( METHOD_8 ) ) ; } return true ; }
org . junit . Assert . assertTrue ( result ) 