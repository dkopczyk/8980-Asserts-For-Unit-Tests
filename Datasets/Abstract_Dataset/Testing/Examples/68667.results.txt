METHOD_0 ( ) { METHOD_1 ( STRING_0 ) ; com . google . common . collect . ImmutableList < java . lang . String > args = com . google . common . collect . ImmutableList . of ( STRING_1 , STRING_2 , STRING_3 ) ; java . lang . String expected = com . google . common . base . IDENT_0 . METHOD_2 ( "\n" ) . join ( args ) ; java . nio . file . Path IDENT_1 = IDENT_2 . METHOD_3 ( STRING_4 ) ; com . facebook . buck . util . IDENT_3 . Result result = IDENT_2 . METHOD_4 ( IDENT_1 , args ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( ) { com . google . IDENT_4 . IDENT_5 IDENT_6 = IDENT_7 . METHOD_6 ( ) ; if ( ( IDENT_6 == null ) || ( ( IDENT_6 . isEmpty ( ) ) && ( ( IDENT_7 . METHOD_7 ( ) . METHOD_8 ( ) ) > 0 ) ) ) { com . facebook . buck . IDENT_8 . grpc . IDENT_9 . LOG . debug ( STRING_5 ) ; return java . util . Optional . of ( METHOD_9 ( new com . facebook . buck . IDENT_8 . grpc . IDENT_10 . METHOD_10 ( IDENT_7 . METHOD_7 ( ) ) ) ) ; } else { com . facebook . buck . IDENT_8 . grpc . IDENT_9 . LOG . debug ( ( STRING_6 + ( IDENT_6 . METHOD_11 ( ) ) ) ) ; return java . util . Optional . of ( IDENT_6 . METHOD_11 ( ) ) ; } }
org . junit . Assert . assertEquals ( expected , result . METHOD_5 ( ) . get ( ) . trim ( ) ) 