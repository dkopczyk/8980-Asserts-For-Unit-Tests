METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( ) ) . andReturn ( com . google . common . util . concurrent . IDENT_1 . METHOD_2 ( java . util . Optional . of ( com . facebook . buck . rules . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_3 ( STRING_0 ) ) ) ) . times ( 2 ) ; com . facebook . buck . core . build . engine . IDENT_5 IDENT_6 = com . facebook . buck . rules . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_3 ( STRING_1 ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_4 ( ) ) . andReturn ( com . google . common . util . concurrent . IDENT_1 . METHOD_2 ( java . util . Optional . of ( IDENT_6 ) ) ) . METHOD_5 ( ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_6 ( ) ) . andReturn ( IDENT_8 ) . METHOD_5 ( ) ; org . easymock . EasyMock . replay ( IDENT_0 , IDENT_7 ) ; com . facebook . buck . rules . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 IDENT_11 = new com . facebook . buck . rules . IDENT_2 . IDENT_3 . IDENT_9 . METHOD_7 ( com . facebook . buck . rules . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_12 , IDENT_0 , IDENT_7 , IDENT_13 ) ; "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_0 , IDENT_7 ) ; } METHOD_1 ( ) { return job . future ; }
org . junit . Assert . assertEquals ( IDENT_6 , IDENT_11 . METHOD_1 ( ) . get ( ) . get ( ) ) 