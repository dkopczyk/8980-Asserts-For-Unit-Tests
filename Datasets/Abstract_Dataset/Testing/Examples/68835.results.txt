METHOD_0 ( ) { java . nio . file . Path IDENT_0 = IDENT_1 . resolve ( STRING_0 ) . resolve ( STRING_1 ) ; java . nio . file . IDENT_2 . METHOD_1 ( IDENT_0 . METHOD_2 ( ) ) ; java . nio . file . IDENT_2 . write ( IDENT_0 , java . util . Collections . singletonList ( STRING_2 ) ) ; java . util . Map < java . lang . String , java . lang . Object > rule = METHOD_3 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } get ( com . facebook . buck . core . rules . IDENT_3 ) { com . facebook . buck . rules . keys . IDENT_4 < IDENT_5 > result = results . get ( rule ) ; if ( result != null ) { return result . result ; } return null ; }
org . junit . Assert . assertThat ( rule . get ( "name" ) , org . hamcrest . Matchers . equalTo ( STRING_0 ) ) 