METHOD_0 ( ) { java . io . ByteArrayOutputStream IDENT_0 = new java . io . ByteArrayOutputStream ( ) ; try ( java . util . IDENT_1 . IDENT_2 out = new java . util . IDENT_1 . METHOD_1 ( IDENT_0 ) ) { java . util . IDENT_1 . IDENT_3 entry = new java . util . IDENT_1 . METHOD_2 ( STRING_0 ) ; byte [ ] data = STRING_1 . getBytes ( IDENT_4 . UTF_8 ) ; entry . METHOD_3 ( data . length ) ; out . METHOD_4 ( entry ) ; out . write ( data ) ; out . METHOD_5 ( ) ; entry = new java . util . IDENT_1 . METHOD_2 ( STRING_2 ) ; data = STRING_3 . getBytes ( IDENT_4 . UTF_8 ) ; entry . METHOD_3 ( data . length ) ; out . METHOD_4 ( entry ) ; out . write ( data ) ; out . METHOD_5 ( ) ; } byte [ ] bytes = IDENT_0 . toByteArray ( ) ; com . facebook . buck . util . IDENT_1 . IDENT_5 . METHOD_6 ( bytes . length , java . nio . ByteBuffer . METHOD_7 ( bytes ) ) ; java . util . Date IDENT_6 = new java . util . Date ( org . apache . commons . IDENT_7 . IDENT_8 . IDENT_1 . IDENT_9 . METHOD_8 ( IDENT_10 . IDENT_11 ) ) ; try ( java . util . IDENT_1 . IDENT_12 is = new java . util . IDENT_1 . METHOD_9 ( new java . io . ByteArrayInputStream ( bytes ) ) ) { for ( java . util . IDENT_1 . METHOD_2 entry = is . METHOD_10 ( ) ; entry != null ; entry = is . METHOD_10 ( ) ) { "<AssertPlaceHolder>" ; } } } getName ( ) { return name ; }
org . junit . Assert . assertThat ( entry . getName ( ) , new java . util . Date ( entry . getTime ( ) ) , org . hamcrest . Matchers . equalTo ( IDENT_6 ) ) 