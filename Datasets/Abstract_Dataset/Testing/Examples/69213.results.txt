METHOD_0 ( ) { expect ( IDENT_0 . METHOD_1 ( ) ) . andReturn ( IDENT_1 ) . times ( 3 ) ; expect ( IDENT_0 . METHOD_2 ( ) ) . andReturn ( false ) . times ( 2 ) ; expect ( IDENT_0 . METHOD_3 ( ) ) . andReturn ( IDENT_2 ) . times ( 2 ) ; expect ( IDENT_1 . getId ( ) ) . andReturn ( de . IDENT_3 . IDENT_4 . hdfs . IDENT_5 . IDENT_6 ) . times ( 2 ) ; byte [ ] buf = new byte [ INT_0 ] ; new java . util . METHOD_4 ( ) . METHOD_5 ( buf ) ; expect ( IDENT_2 . METHOD_6 ( ( ( org . apache . hadoop . fs . Path ) ( METHOD_7 ( ) ) ) ) ) . andReturn ( new org . apache . hadoop . fs . METHOD_8 ( new de . IDENT_3 . IDENT_4 . hdfs . IDENT_5 . METHOD_9 ( buf ) ) ) ; replay ( IDENT_0 , IDENT_2 , IDENT_1 ) ; de . IDENT_3 . IDENT_4 . hdfs . IDENT_7 b = new de . IDENT_3 . IDENT_4 . hdfs . METHOD_10 ( de . IDENT_3 . IDENT_4 . hdfs . IDENT_5 . IDENT_8 , IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( ) { if ( this . conn . METHOD_2 ( ) ) { throw new java . lang . IllegalStateException ( STRING_0 ) ; } try { return this . conn . METHOD_3 ( ) . METHOD_6 ( path ) ; } catch ( java . io . IDENT_9 e ) { throw new org . IDENT_10 . METHOD_12 ( uri , e . METHOD_13 ( ) ) ; } }
org . junit . Assert . assertNotNull ( b . METHOD_11 ( ) ) 