METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . function . IDENT_2 IDENT_3 = new net . IDENT_0 . IDENT_1 . function . METHOD_1 ( STRING_0 , 2 ) { @ net . IDENT_0 . IDENT_1 . Override public double apply ( double OP_0 values ) { return ( values [ 0 ] ) < ( values [ 1 ] ) ? values [ 1 ] : values [ 0 ] ; } } ; net . IDENT_0 . IDENT_1 . IDENT_4 e = new net . IDENT_0 . IDENT_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( STRING_2 , STRING_3 ) . function ( IDENT_3 ) . build ( ) . METHOD_4 ( STRING_2 , 1.0 ) . METHOD_4 ( STRING_3 , 2.0 ) ; "<AssertPlaceHolder>" ; } evaluate ( ) { final net . IDENT_0 . IDENT_1 . IDENT_5 output = new net . IDENT_0 . IDENT_1 . METHOD_5 ( ) ; for ( int i = 0 ; i < ( tokens . length ) ; i ++ ) { net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 t = tokens [ i ] ; else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_8 ) ) { final java . lang . String name = ( ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_9 ) ( t ) ) . getName ( ) ; final java . lang . Double value = this . METHOD_3 . get ( name ) ; if ( value == null ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_4 + name ) + STRING_5 ) ) ; } output . METHOD_6 ( value ) ; } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_10 ) ) { net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_11 op = ( ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_11 ) ( t ) ) ; if ( ( output . size ( ) ) < ( op . METHOD_7 ( ) . METHOD_8 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_6 + ( op . METHOD_7 ( ) . METHOD_9 ( ) ) ) + STRING_7 ) ) ; } if ( ( op . METHOD_7 ( ) . METHOD_8 ( ) ) == 2 ) { double IDENT_12 = output . METHOD_10 ( ) ; double IDENT_13 = output . METHOD_10 ( ) ; output . METHOD_6 ( op . METHOD_7 ( ) . apply ( IDENT_13 , IDENT_12 ) ) ; } else if ( ( op . METHOD_7 ( ) . METHOD_8 ( ) ) == 1 ) { double IDENT_14 = output . METHOD_10 ( ) ; output . METHOD_6 ( op . METHOD_7 ( ) . apply ( IDENT_14 ) ) ; } } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . IDENT_15 ) ) { net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_16 IDENT_17 = ( ( net . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_16 ) ( t ) ) ; final int IDENT_18 = IDENT_17 . METHOD_11 ( ) . METHOD_12 ( ) ; if ( ( output . size ( ) ) < IDENT_18 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_8 + ( IDENT_17 . METHOD_11 ( ) . getName ( ) ) ) + STRING_9 ) ) ; } double [ ] args = new double [ IDENT_18 ] ; for ( int j = IDENT_18 - 1 ; j >= 0 ; j OP_1 ) { args [ j ] = output . METHOD_10 ( ) ; } output . METHOD_6 ( IDENT_17 . METHOD_11 ( ) . apply ( args ) ) ; } } if ( ( output . size ( ) ) > 1 ) { throw new java . lang . IllegalArgumentException ( STRING_10 ) ; } return output . METHOD_10 ( ) ; }
org . junit . Assert . assertTrue ( ( 2 == ( e . evaluate ( ) ) ) ) 