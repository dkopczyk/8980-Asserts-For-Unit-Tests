METHOD_0 ( ) { java . lang . String expr = STRING_0 ; double x = FLOAT_0 ; double expected = ( ( ( - 2 ) * FLOAT_1 ) / ( java . lang . Math . Math . METHOD_1 ( java . lang . Math . Math . log ( x ) , ( - 2 ) ) ) ) + ( INT_0 * 6 ) ; net . IDENT_0 . IDENT_1 . IDENT_2 e = new net . IDENT_0 . IDENT_1 . METHOD_2 ( expr ) . METHOD_3 ( STRING_1 ) . build ( ) . METHOD_4 ( STRING_1 , x ) ; "<AssertPlaceHolder>" ; } evaluate ( ) { final net . IDENT_0 . IDENT_1 . IDENT_3 output = new net . IDENT_0 . IDENT_1 . METHOD_5 ( ) ; for ( int i = 0 ; i < ( tokens . length ) ; i ++ ) { net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 t = tokens [ i ] ; else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_6 ) ) { final java . lang . String name = ( ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_7 ) ( t ) ) . getName ( ) ; final java . lang . Double value = this . METHOD_3 . get ( name ) ; if ( value == null ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_2 + name ) + STRING_3 ) ) ; } output . METHOD_6 ( value ) ; } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_8 ) ) { net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_9 op = ( ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_9 ) ( t ) ) ; if ( ( output . size ( ) ) < ( op . METHOD_7 ( ) . METHOD_8 ( ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_4 + ( op . METHOD_7 ( ) . METHOD_9 ( ) ) ) + STRING_5 ) ) ; } if ( ( op . METHOD_7 ( ) . METHOD_8 ( ) ) == 2 ) { double IDENT_10 = output . METHOD_10 ( ) ; double IDENT_11 = output . METHOD_10 ( ) ; output . METHOD_6 ( op . METHOD_7 ( ) . apply ( IDENT_11 , IDENT_10 ) ) ; } else if ( ( op . METHOD_7 ( ) . METHOD_8 ( ) ) == 1 ) { double IDENT_12 = output . METHOD_10 ( ) ; output . METHOD_6 ( op . METHOD_7 ( ) . apply ( IDENT_12 ) ) ; } } else if ( ( t . getType ( ) ) == ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . IDENT_13 ) ) { net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_14 IDENT_15 = ( ( net . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_14 ) ( t ) ) ; final int IDENT_16 = IDENT_15 . METHOD_11 ( ) . METHOD_12 ( ) ; if ( ( output . size ( ) ) < IDENT_16 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_6 + ( IDENT_15 . METHOD_11 ( ) . getName ( ) ) ) + STRING_7 ) ) ; } double [ ] args = new double [ IDENT_16 ] ; for ( int j = IDENT_16 - 1 ; j >= 0 ; j OP_0 ) { args [ j ] = output . METHOD_10 ( ) ; } output . METHOD_6 ( IDENT_15 . METHOD_11 ( ) . apply ( args ) ) ; } } if ( ( output . size ( ) ) > 1 ) { throw new java . lang . IllegalArgumentException ( STRING_8 ) ; } return output . METHOD_10 ( ) ; }
org . junit . Assert . assertTrue ( ( expected == ( e . evaluate ( ) ) ) ) 