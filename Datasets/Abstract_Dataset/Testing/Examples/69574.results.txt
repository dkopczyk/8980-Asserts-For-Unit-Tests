METHOD_0 ( ) { IDENT_0 . METHOD_1 ( new java . lang . Object ( ) { @ com . IDENT_1 . METHOD_2 ( com . IDENT_1 . IDENT_2 . IDENT_3 ) public int METHOD_3 ( com . fasterxml . jackson . databind . IDENT_4 args ) { System . out . println ( args ) ; return args . size ( ) ; } } ) ; com . fasterxml . jackson . databind . IDENT_4 args = METHOD_4 ( ( ( java . lang . Object ) ( new java . lang . Object [ ] { STRING_0 , new java . lang . Object [ ] { new byte [ ] { STRING_1 } } } ) ) ) ; java . lang . Object result = IDENT_0 . METHOD_5 ( com . IDENT_1 . IDENT_2 . IDENT_3 , args ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . String , com . fasterxml . jackson . databind . IDENT_4 ) { com . IDENT_1 . IDENT_5 . IDENT_6 method = IDENT_7 . get ( name ) ; if ( method == null ) { com . IDENT_1 . IDENT_5 . log . warn ( STRING_2 , name , object ) ; return new com . IDENT_1 . IDENT_8 . METHOD_6 ( 0 , ( STRING_3 + name ) ) ; } try { return method . invoke ( object ) ; } catch ( java . lang . Exception e ) { com . IDENT_1 . IDENT_5 . log . error ( STRING_4 , e . getMessage ( ) , e ) ; return new com . IDENT_1 . IDENT_8 . METHOD_6 ( 0 , METHOD_7 ( e ) . getMessage ( ) ) ; } }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . is ( 1 ) ) 