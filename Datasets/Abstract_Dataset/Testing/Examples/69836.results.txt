METHOD_0 ( ) { org . joda . time . IDENT_0 original = new org . joda . time . METHOD_1 ( org . joda . time . IDENT_1 . METHOD_2 ( ) , 10 ) . with ( org . joda . time . IDENT_1 . METHOD_3 ( ) , 0 ) ; com . google . gson . IDENT_2 element = IDENT_3 . IDENT_4 . IDENT_5 . util . IDENT_6 . METHOD_4 ( original ) ; System . out . println ( ( STRING_0 + ( element . toString ( ) ) ) ) ; org . joda . time . METHOD_1 other = IDENT_3 . IDENT_4 . IDENT_5 . util . IDENT_6 . METHOD_5 ( element ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( com . google . gson . IDENT_2 ) { if ( value . METHOD_6 ( ) ) { return null ; } java . util . Set < java . util . Map . Entry < java . lang . String , com . google . gson . IDENT_2 > > IDENT_7 = value . METHOD_7 ( ) . entrySet ( ) ; org . joda . time . IDENT_1 [ ] types = new org . joda . time . IDENT_1 [ IDENT_7 . size ( ) ] ; int [ ] values = new int [ IDENT_7 . size ( ) ] ; int i = 0 ; for ( java . util . Map . Entry < java . lang . String , com . google . gson . IDENT_2 > entry : IDENT_7 ) { types [ i ] = IDENT_3 . IDENT_4 . IDENT_5 . util . IDENT_6 . METHOD_8 ( entry . getKey ( ) ) ; values [ i ] = entry . getValue ( ) . METHOD_9 ( ) ; i ++ ; } return new org . joda . time . METHOD_1 ( types , values ) ; }
org . junit . Assert . assertEquals ( original , other ) 