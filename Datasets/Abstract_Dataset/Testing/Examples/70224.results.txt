METHOD_0 ( ) { java . util . Date date = new java . util . Date ( ) ; java . lang . String IDENT_0 = STRING_0 2 ; java . lang . String IDENT_1 = STRING_0 0 ; java . util . Map < java . lang . String , byte [ ] > IDENT_2 = new java . util . HashMap < java . lang . String , byte [ ] > ( ) ; IDENT_2 . put ( STRING_0 , STRING_1 . getBytes ( IDENT_0 ) ) ; IDENT_2 . put ( STRING_2 , STRING_3 . getBytes ( IDENT_0 ) ) ; java . lang . String IDENT_3 = ( ( ( ( ( ( ( ( STRING_0 1 + ( IDENT_4 . IDENT_5 ) ) + STRING_4 ) + ( IDENT_4 . IDENT_6 ) ) + STRING_5 ) + ( com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_11 ) ) + STRING_6 ) + ( IDENT_4 . IDENT_12 ) ) + STRING_5 ) + ( java . net . IDENT_13 . encode ( doc . METHOD_1 ( ) . METHOD_2 ( ) , STRING_0 2 ) ) ; METHOD_3 ( get ( METHOD_4 ( IDENT_3 ) ) . METHOD_5 ( METHOD_6 ( ) . METHOD_7 ( STRING_7 ) ) ) ; java . util . List < com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > > expected = new java . util . ArrayList < com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > > ( ) ; for ( Map . Entry < java . lang . String , byte [ ] > IDENT_16 : IDENT_2 . entrySet ( ) ) { final java . lang . String IDENT_17 = IDENT_16 . getKey ( ) ; final byte [ ] content = IDENT_16 . getValue ( ) ; METHOD_8 ( IDENT_17 , doc . METHOD_1 ( ) , content , date , IDENT_0 , IDENT_1 ) ; com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > IDENT_18 = new com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > ( doc . METHOD_1 ( ) , IDENT_17 , new java . io . ByteArrayInputStream ( content ) , com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_10 . IDENT_11 , date ) ; IDENT_18 . METHOD_9 ( IDENT_0 ) ; IDENT_18 . METHOD_10 ( IDENT_1 ) ; expected . add ( IDENT_18 ) ; } java . util . List < com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > > actual = IDENT_19 . METHOD_11 ( doc . METHOD_1 ( ) ) ; "<AssertPlaceHolder>" ; for ( com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > IDENT_20 : expected ) { com . IDENT_7 . IDENT_8 . IDENT_14 < com . IDENT_7 . IDENT_8 . IDENT_9 . IDENT_15 > IDENT_21 = actual . get ( actual . indexOf ( IDENT_20 ) ) ; METHOD_12 ( IDENT_20 , IDENT_21 ) ; } } size ( ) { return count ; }
org . junit . Assert . assertEquals ( expected . size ( ) , actual . size ( ) ) 