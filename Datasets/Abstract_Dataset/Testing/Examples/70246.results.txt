METHOD_0 ( ) { System . out . println ( STRING_0 ) ; java . text . IDENT_0 IDENT_1 = new java . text . METHOD_1 ( STRING_1 ) ; java . text . IDENT_0 IDENT_2 = new java . text . METHOD_1 ( STRING_2 ) ; java . text . IDENT_0 IDENT_3 = new java . text . METHOD_1 ( STRING_3 ) ; net . IDENT_4 . time . IDENT_5 IDENT_6 = IDENT_7 . METHOD_2 ( ) ; for ( int IDENT_8 = ( IDENT_6 . METHOD_3 ( ) ) - 20 ; IDENT_8 < ( ( IDENT_6 . METHOD_3 ( ) ) - 1 ) ; IDENT_8 ++ ) { double IDENT_9 = IDENT_6 . getTime ( IDENT_8 ) ; double IDENT_10 = IDENT_6 . getTime ( ( IDENT_8 + 1 ) ) ; IDENT_9 += ( ( IDENT_6 . getTime ( 4 ) ) - ( IDENT_6 . getTime ( 3 ) ) ) / 3 ; double IDENT_11 = IDENT_10 - IDENT_9 ; net . IDENT_4 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . IDENT_16 index = new net . IDENT_4 . IDENT_12 . IDENT_13 . IDENT_14 . IDENT_15 . METHOD_4 ( 0.0 , IDENT_11 ) ; net . IDENT_4 . IDENT_12 . IDENT_13 . IDENT_14 . components . IDENT_17 IDENT_18 = new net . IDENT_4 . IDENT_12 . IDENT_13 . IDENT_14 . components . METHOD_5 ( IDENT_9 , IDENT_10 , IDENT_9 , IDENT_10 , new net . IDENT_4 . IDENT_12 . IDENT_13 . IDENT_14 . components . METHOD_6 ( 1.0 ) , index , IDENT_11 , true , false , false ) ; double value = IDENT_18 . getValue ( IDENT_7 ) ; double IDENT_19 = ( ( IDENT_7 . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( IDENT_7 . METHOD_7 ( ) . METHOD_10 ( ) , IDENT_9 , ( IDENT_10 - IDENT_9 ) ) ) * ( IDENT_7 . METHOD_7 ( ) . METHOD_11 ( ) . METHOD_12 ( IDENT_10 ) ) ) * IDENT_11 ; final double IDENT_20 = ( 1.0 / FLOAT_0 ) / FLOAT_0 ; double IDENT_21 = ( ( IDENT_20 * ( IDENT_22 ) ) / ( java . lang . Math . METHOD_13 ( ( ( IDENT_7 . METHOD_14 ( ) ) / FLOAT_1 ) ) ) ) + FLOAT_2 ; System . out . println ( ( ( ( ( ( ( ( IDENT_1 . format ( IDENT_9 ) ) + STRING_4 ) + ( IDENT_1 . format ( IDENT_10 ) ) ) + STRING_4 ) + ( IDENT_2 . format ( ( value - IDENT_19 ) ) ) ) + STRING_5 ) + ( IDENT_2 . format ( IDENT_21 ) ) ) ) ; "<AssertPlaceHolder>" ; } System . out . println ( ) ; } METHOD_14 ( ) { return IDENT_23 . METHOD_14 ( ) ; }
org . junit . Assert . assertEquals ( IDENT_19 , value , IDENT_21 ) 