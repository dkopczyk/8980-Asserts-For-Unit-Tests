METHOD_0 ( ) { org . finra . herd . model . api . xml . IDENT_0 IDENT_1 = new org . finra . herd . model . api . xml . METHOD_1 ( new org . finra . herd . model . api . xml . METHOD_2 ( IDENT_2 ) , IDENT_3 ) ; org . finra . herd . model . api . xml . IDENT_4 IDENT_5 = new org . finra . herd . model . api . xml . METHOD_3 ( new org . finra . herd . model . api . xml . METHOD_2 ( IDENT_2 ) , IDENT_6 , false , false , false ) ; when ( IDENT_7 . METHOD_4 ( IDENT_1 ) ) . thenReturn ( IDENT_5 ) ; org . finra . herd . model . api . xml . METHOD_3 response = IDENT_8 . METHOD_4 ( IDENT_1 ) ; verify ( IDENT_7 , times ( 1 ) ) . METHOD_4 ( IDENT_1 ) ; response . METHOD_5 ( org . finra . herd . rest . IDENT_6 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( org . finra . herd . model . api . xml . METHOD_1 ) { METHOD_6 ( request ) ; org . finra . herd . model . jpa . IDENT_9 IDENT_10 = IDENT_11 . METHOD_7 ( request . METHOD_8 ( ) ) ; java . lang . String IDENT_12 = IDENT_10 . getType ( ) . getCode ( ) ; java . lang . String IDENT_13 = request . METHOD_8 ( ) . METHOD_9 ( ) ; boolean IDENT_14 = false ; boolean IDENT_15 = false ; boolean IDENT_16 = false ; if ( IDENT_17 . IDENT_18 . IDENT_19 . name ( ) . equalsIgnoreCase ( IDENT_12 ) ) { if ( org . apache . commons . lang . IDENT_20 . METHOD_10 ( request . METHOD_11 ( ) ) ) { IDENT_21 . METHOD_12 ( IDENT_13 ) ; } IDENT_14 = IDENT_21 . METHOD_13 ( IDENT_13 ) ; IDENT_15 = IDENT_21 . METHOD_14 ( IDENT_13 ) ; IDENT_16 = IDENT_21 . METHOD_15 ( IDENT_13 ) ; } else if ( IDENT_17 . IDENT_18 . IDENT_22 . name ( ) . equalsIgnoreCase ( IDENT_12 ) ) { if ( org . apache . commons . lang . IDENT_20 . METHOD_10 ( request . METHOD_11 ( ) ) ) { IDENT_23 . METHOD_16 ( IDENT_13 ) ; } IDENT_14 = IDENT_23 . METHOD_17 ( IDENT_13 ) ; IDENT_15 = IDENT_23 . METHOD_18 ( IDENT_13 ) ; IDENT_16 = IDENT_23 . METHOD_19 ( IDENT_13 ) ; } return new org . finra . herd . model . api . xml . METHOD_3 ( request . METHOD_8 ( ) , METHOD_20 ( new java . util . Date ( ) ) , IDENT_14 , IDENT_15 , IDENT_16 ) ; }
org . junit . Assert . assertEquals ( IDENT_5 , response ) 