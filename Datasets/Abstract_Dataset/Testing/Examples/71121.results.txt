METHOD_0 ( ) { org . finra . herd . dao . helper . IDENT_0 IDENT_1 = mock ( org . finra . herd . dao . helper . IDENT_0 . class ) ; org . finra . herd . dao . helper . IDENT_0 IDENT_2 = ( ( org . finra . herd . dao . helper . IDENT_0 ) ( org . springframework . test . util . IDENT_3 . METHOD_1 ( IDENT_4 , STRING_0 ) ) ) ; org . springframework . test . util . IDENT_3 . METHOD_2 ( IDENT_4 , STRING_0 , IDENT_1 ) ; org . finra . herd . dao . IDENT_5 IDENT_6 = mock ( org . finra . herd . dao . IDENT_5 . class ) ; org . finra . herd . dao . IDENT_5 IDENT_7 = ( ( org . finra . herd . dao . IDENT_5 ) ( org . springframework . test . util . IDENT_3 . METHOD_1 ( IDENT_4 , STRING_1 ) ) ) ; org . springframework . test . util . IDENT_3 . METHOD_2 ( IDENT_4 , STRING_1 , IDENT_6 ) ; try { org . apache . http . impl . client . IDENT_8 IDENT_9 = mock ( org . apache . http . impl . client . IDENT_8 . class ) ; when ( IDENT_1 . METHOD_3 ( any ( ) , any ( ) ) ) . thenReturn ( IDENT_9 ) ; METHOD_4 ( java . io . IOException . class ) . when ( IDENT_9 ) . close ( ) ; org . apache . http . client . methods . IDENT_10 IDENT_11 = mock ( org . apache . http . client . methods . IDENT_10 . class ) ; when ( IDENT_6 . execute ( any ( ) , any ( ) ) ) . thenReturn ( IDENT_11 ) ; when ( IDENT_11 . METHOD_5 ( ) ) . thenReturn ( new org . apache . http . message . METHOD_6 ( org . apache . http . IDENT_12 . IDENT_13 , 200 , STRING_2 ) ) ; when ( IDENT_11 . METHOD_7 ( ) ) . thenReturn ( new org . apache . http . entity . METHOD_8 ( IDENT_14 . METHOD_9 ( new org . finra . herd . model . api . xml . METHOD_10 ( ) ) ) ) ; org . finra . herd . model . dto . IDENT_15 IDENT_16 = new org . finra . herd . model . dto . METHOD_11 ( ) ; java . lang . String IDENT_17 = STRING_3 ; try { IDENT_4 . METHOD_12 ( IDENT_16 , IDENT_17 ) ; verify ( IDENT_9 ) . close ( ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . Exception e ) { "<AssertPlaceHolder>" ; } } finally { org . springframework . test . util . IDENT_3 . METHOD_2 ( IDENT_4 , STRING_0 , IDENT_2 ) ; org . springframework . test . util . IDENT_3 . METHOD_2 ( IDENT_4 , STRING_1 , IDENT_7 ) ; } } close ( ) { if ( IDENT_18 ) { throw new java . io . IOException ( STRING_4 ) ; } }
org . junit . Assert . assertEquals ( java . io . IOException . class , e . getClass ( ) ) 