METHOD_0 ( ) { try { java . lang . String [ ] line = new java . lang . String [ ] { IDENT_0 , IDENT_1 , IDENT_2 , IDENT_3 , IDENT_4 , IDENT_5 , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 0 ) , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 1 ) , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 2 ) , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_8 . get ( 3 ) , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_9 . toString ( ) , IDENT_10 , IDENT_11 } ; IDENT_12 . METHOD_1 ( line , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_13 , new java . io . File ( IDENT_14 ) ) ; org . junit . Assert . fail ( ) ; } catch ( java . lang . IllegalArgumentException e ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . String [ ] , int , java . io . File ) { if ( ( line . length ) != ( org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_15 . IDENT_16 . length ) ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_0 , IDENT_17 , IDENT_18 . toString ( ) ) ) ; } java . lang . Integer IDENT_19 ; java . lang . Integer IDENT_20 ; try { IDENT_19 = java . lang . Integer . valueOf ( line [ 4 ] ) ; } catch ( java . lang . IDENT_21 e ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_1 , IDENT_17 , IDENT_18 . toString ( ) ) , e ) ; } try { IDENT_20 = java . lang . Integer . valueOf ( line [ 10 ] ) ; } catch ( java . lang . IDENT_21 e ) { throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_2 , IDENT_17 , IDENT_18 . toString ( ) ) , e ) ; } java . util . List < java . lang . String > IDENT_22 = new java . util . ArrayList ( ) ; for ( java . lang . String IDENT_23 : java . util . Arrays . asList ( line [ 6 ] , line [ 7 ] , line [ 8 ] , line [ 9 ] ) ) { if ( org . apache . commons . lang3 . StringUtils . METHOD_2 ( IDENT_23 ) ) { IDENT_22 . add ( IDENT_23 ) ; } else { break ; } } return new org . finra . herd . model . api . xml . METHOD_3 ( line [ 0 ] , line [ 1 ] , line [ 2 ] , line [ 3 ] , IDENT_19 , line [ 5 ] , IDENT_22 , IDENT_20 ) ; }
org . junit . Assert . assertEquals ( java . lang . String . format ( STRING_1 , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_13 , org . finra . herd . tools . IDENT_6 . IDENT_7 . IDENT_14 ) , e . getMessage ( ) ) 