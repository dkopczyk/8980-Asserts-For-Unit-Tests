METHOD_0 ( ) { java . util . Set < java . lang . String > IDENT_0 = new java . util . HashSet < java . lang . String > ( ( ( IDENT_1 ) * ( count ) ) ) ; java . util . List < java . util . Set < java . lang . String > > list = new java . util . ArrayList < java . util . Set < java . lang . String > > ( ) ; for ( int i = 0 ; i < ( IDENT_1 ) ; i ++ ) { java . lang . Thread IDENT_2 = new java . lang . Thread ( new java . lang . METHOD_1 ( ) { @ org . IDENT_3 . util . Override public void run ( ) { try { java . util . Set < java . lang . String > set = METHOD_2 ( ) ; MOD_0 ( list ) { list . add ( set ) ; } } catch ( java . lang . Throwable t ) { t . printStackTrace ( ) ; error = true ; } } } ) ; IDENT_2 . start ( ) ; } System . err . println ( "" ) ; while ( ( ( list . size ( ) ) != ( IDENT_1 ) ) && ( ! ( error ) ) ) { try { java . lang . Thread . sleep ( 1000 ) ; } catch ( java . lang . IDENT_4 e ) { e . printStackTrace ( ) ; } } System . err . println ( list . size ( ) ) ; for ( int i = 0 ; i < ( IDENT_1 ) ; i ++ ) { IDENT_0 . addAll ( list . get ( 0 ) ) ; list . get ( 0 ) . METHOD_3 ( ) ; list . remove ( 0 ) ; } "<AssertPlaceHolder>" ; } get ( java . net . URL ) { if ( null == url ) { throw new java . lang . METHOD_4 ( STRING_0 ) ; } IDENT_5 . IDENT_6 client = org . IDENT_3 . http . IDENT_7 . IDENT_8 . get ( ) ; if ( null == client ) { client = org . IDENT_3 . http . IDENT_7 . IDENT_9 ; } IDENT_5 . IDENT_10 request = new IDENT_5 . IDENT_10 . Builder ( ) . url ( url ) . get ( ) . build ( ) ; IDENT_5 . Response response = client . METHOD_5 ( request ) . execute ( ) ; if ( ! ( response . METHOD_6 ( ) ) ) throw new java . lang . IllegalStateException ( ( STRING_1 + response ) ) ; java . lang . String IDENT_11 = response . body ( ) . string ( ) ; response . close ( ) ; return IDENT_11 ; }
org . junit . Assert . assertTrue ( ( ( IDENT_0 . size ( ) ) == ( ( IDENT_1 ) * ( count ) ) ) ) 