METHOD_0 ( ) { org . apache . spark . api . java . IDENT_0 < org . apache . spark . sql . IDENT_1 > IDENT_2 = IDENT_3 . METHOD_1 ( java . util . Arrays . asList ( org . apache . spark . sql . IDENT_4 . create ( 0.0 , 0.0 , new org . apache . spark . IDENT_5 . linalg . METHOD_2 ( new double [ ] { FLOAT_0 , FLOAT_1 , 0.0 } ) ) , org . apache . spark . sql . IDENT_4 . create ( 1.0 , 1.0 , new org . apache . spark . IDENT_5 . linalg . METHOD_2 ( new double [ ] { 0.0 , FLOAT_2 , FLOAT_3 } ) ) , org . apache . spark . sql . IDENT_4 . create ( 2.0 , 1.0 , new org . apache . spark . IDENT_5 . linalg . METHOD_2 ( new double [ ] { 0.0 , FLOAT_2 , FLOAT_0 } ) ) , org . apache . spark . sql . IDENT_4 . create ( FLOAT_4 , 2.0 , new org . apache . spark . IDENT_5 . linalg . METHOD_2 ( new double [ ] { FLOAT_0 , FLOAT_2 , FLOAT_5 } ) ) ) ) ; double [ ] IDENT_6 = new double [ ] { 0.0 , FLOAT_3 , FLOAT_0 , FLOAT_5 } ; org . apache . spark . sql . types . IDENT_7 schema = new org . apache . spark . sql . types . METHOD_3 ( new org . apache . spark . sql . types . IDENT_8 [ ] { new org . apache . spark . sql . types . METHOD_4 ( STRING_0 , org . apache . spark . sql . types . IDENT_9 . IDENT_10 , false , org . apache . spark . sql . types . IDENT_11 . empty ( ) ) , new org . apache . spark . sql . types . METHOD_4 ( STRING_1 , org . apache . spark . sql . types . IDENT_9 . IDENT_10 , false , org . apache . spark . sql . types . IDENT_11 . empty ( ) ) , new org . apache . spark . sql . types . METHOD_4 ( STRING_2 , new org . apache . spark . IDENT_5 . linalg . METHOD_5 ( ) , false , org . apache . spark . sql . types . IDENT_11 . empty ( ) ) } ) ; org . apache . spark . sql . IDENT_12 IDENT_13 = IDENT_14 . METHOD_6 ( IDENT_2 , schema ) ; org . apache . spark . IDENT_15 . feature . IDENT_16 IDENT_17 = new org . apache . spark . IDENT_15 . feature . METHOD_7 ( ) ; IDENT_17 . METHOD_8 ( 1 ) ; IDENT_17 . METHOD_9 ( STRING_2 ) ; IDENT_17 . METHOD_10 ( STRING_1 ) ; IDENT_17 . METHOD_11 ( STRING_3 ) ; org . apache . spark . IDENT_15 . feature . IDENT_18 IDENT_19 = IDENT_17 . METHOD_12 ( IDENT_13 ) ; byte [ ] IDENT_20 = com . IDENT_21 . IDENT_22 . IDENT_15 . IDENT_23 . IDENT_24 . METHOD_13 ( IDENT_19 , null ) ; java . lang . String IDENT_25 = new java . lang . String ( IDENT_20 ) ; com . IDENT_21 . IDENT_22 . IDENT_15 . IDENT_26 . IDENT_27 IDENT_26 = com . IDENT_21 . IDENT_22 . IDENT_15 . IDENT_28 . IDENT_29 . METHOD_14 ( IDENT_20 ) ; org . apache . spark . sql . IDENT_1 [ ] IDENT_30 = IDENT_19 . transform ( IDENT_13 ) . METHOD_15 ( STRING_0 ) . select ( STRING_0 , STRING_1 , STRING_2 , STRING_3 ) . collect ( ) ; for ( org . apache . spark . sql . IDENT_1 row : IDENT_30 ) { java . util . Map < java . lang . String , java . lang . Object > data = new java . util . HashMap ( ) ; data . put ( IDENT_19 . METHOD_16 ( ) , ( ( org . apache . spark . IDENT_5 . linalg . METHOD_2 ) ( row . get ( 2 ) ) ) . toArray ( ) ) ; IDENT_26 . transform ( data ) ; double [ ] output = ( ( double [ ] ) ( data . get ( IDENT_19 . METHOD_17 ( ) ) ) ) ; System . out . println ( java . util . Arrays . toString ( output ) ) ; "<AssertPlaceHolder>" ; } } transform ( com . IDENT_21 . IDENT_22 . IDENT_15 . IDENT_26 . Map ) { java . lang . String IDENT_31 = ( ( java . lang . String ) ( input . get ( IDENT_32 . METHOD_18 ( ) . iterator ( ) . next ( ) ) ) ) ; input . put ( IDENT_32 . METHOD_19 ( ) . iterator ( ) . next ( ) , METHOD_20 ( IDENT_31 ) ) ; }
org . junit . Assert . assertArrayEquals ( output , ( ( org . apache . spark . IDENT_5 . linalg . METHOD_2 ) ( row . get ( 3 ) ) ) . toArray ( ) , 0.0 ) 