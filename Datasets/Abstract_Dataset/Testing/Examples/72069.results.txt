METHOD_0 ( ) { byte [ ] expected = new byte [ ] { ( ( byte ) ( INT_0 ) ) , 0 , 0 , ( ( byte ) ( INT_0 ) ) , ( ( byte ) ( INT_1 ) ) , INT_2 , INT_3 , ( ( byte ) ( INT_4 ) ) , 10 , INT_5 , 1 , 7 , INT_2 } ; net . IDENT_0 . packet . IDENT_1 packet = new net . IDENT_0 . packet . METHOD_1 ( ) . METHOD_2 ( - INT_6 ) . METHOD_3 ( METHOD_1 . IDENT_2 ) . METHOD_4 ( false ) . METHOD_5 ( false ) . METHOD_6 ( ( ( byte ) ( 0 ) ) ) ; byte [ ] actual = packet . serialize ( ) ; "<AssertPlaceHolder>" ; } serialize ( ) { byte [ ] IDENT_3 = null ; if ( ( payload ) != null ) { payload . METHOD_7 ( this ) ; IDENT_3 = payload . serialize ( ) ; } int length = ( net . IDENT_0 . packet . METHOD_1 . IDENT_4 ) + ( IDENT_3 == null ? 0 : IDENT_3 . length ) ; byte [ ] data = new byte [ length ] ; java . nio . ByteBuffer IDENT_5 = java . nio . ByteBuffer . METHOD_8 ( data ) ; IDENT_5 . put ( net . IDENT_0 . packet . METHOD_1 . IDENT_6 ) ; IDENT_5 . METHOD_9 ( IDENT_7 ) ; byte IDENT_8 = ( ( byte ) ( ( IDENT_9 ) ? 1 : 0 ) ) ; byte IDENT_10 = ( ( byte ) ( ( IDENT_11 ) ? 1 : 0 ) ) ; byte IDENT_12 = ( ( byte ) ( ( ( ( ( ( command ) & 3 ) << 6 ) | ( ( IDENT_8 & 1 ) << 5 ) ) | ( ( IDENT_10 & 1 ) << 4 ) ) | ( ( IDENT_13 ) & 15 ) ) ) ; IDENT_5 . put ( IDENT_12 ) ; if ( IDENT_3 != null ) { IDENT_5 . put ( IDENT_3 ) ; } return data ; }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( expected , actual ) ) 