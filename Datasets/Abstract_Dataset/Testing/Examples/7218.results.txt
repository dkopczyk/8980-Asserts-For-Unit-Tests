METHOD_0 ( ) { if ( org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . METHOD_1 ( ) ) { org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . LOGGER . info ( STRING_0 ) ; } int IDENT_3 = 3 ; org . apache . IDENT_0 . api . IDENT_4 . value . IDENT_5 [ ] IDENT_6 = new org . apache . IDENT_0 . api . IDENT_4 . value . IDENT_5 [ ] { new org . apache . IDENT_0 . IDENT_4 . common . data . IDENT_7 . METHOD_2 ( ) , new org . apache . IDENT_0 . IDENT_4 . common . data . IDENT_7 . METHOD_2 ( ) , new org . apache . IDENT_0 . IDENT_4 . common . data . IDENT_7 . METHOD_2 ( ) } ; org . apache . IDENT_0 . IDENT_4 . common . IDENT_8 . io . IDENT_9 IDENT_10 = new org . apache . IDENT_0 . IDENT_4 . common . IDENT_8 . io . METHOD_3 ( IDENT_3 ) ; org . apache . IDENT_0 . IDENT_4 . common . IDENT_8 . io . IDENT_11 tuple = new org . apache . IDENT_0 . IDENT_4 . common . IDENT_8 . io . METHOD_4 ( ) ; java . lang . String IDENT_12 = METHOD_5 ( INT_0 , IDENT_13 ) ; java . lang . String IDENT_14 = METHOD_5 ( INT_1 , IDENT_13 ) ; java . lang . String IDENT_15 = METHOD_5 ( 20 , IDENT_13 ) ; org . apache . IDENT_0 . IDENT_4 . common . utils . IDENT_16 . METHOD_6 ( IDENT_10 , tuple , IDENT_6 , IDENT_12 , IDENT_14 , IDENT_15 ) ; int [ ] IDENT_17 = new int [ ] { 2 , 0 , 1 } ; int length = METHOD_7 ( tuple , IDENT_17 ) ; long [ ] IDENT_18 = new long [ org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_19 . IDENT_20 ] ; org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_8 ( tuple , IDENT_17 , 0L , IDENT_18 ) ; byte [ ] array = new byte [ length ] ; java . nio . ByteBuffer buffer ; METHOD_9 ( array , IDENT_17 , tuple , length ) ; buffer = java . nio . ByteBuffer . METHOD_10 ( array ) ; long [ ] IDENT_23 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_19 . METHOD_8 ( buffer , 0 , length , 0L ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . nio . ByteBuffer , int , int , long ) { final int IDENT_24 = length > > 4 ; long IDENT_25 = IDENT_26 ; long IDENT_27 = IDENT_26 ; long IDENT_28 = - INT_2 ; long IDENT_29 = INT_3 ; for ( int i = 0 ; i < IDENT_24 ; i ++ ) { long IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_19 . METHOD_11 ( key , offset , ( ( i * 2 ) + 0 ) ) ; long IDENT_31 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_19 . METHOD_11 ( key , offset , ( ( i * 2 ) + 1 ) ) ; IDENT_30 OP_0 IDENT_28 ; IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_30 , INT_4 ) ; IDENT_30 OP_0 IDENT_29 ; IDENT_25 OP_1 IDENT_30 ; IDENT_25 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_25 , INT_5 ) ; IDENT_25 += IDENT_27 ; IDENT_25 = ( IDENT_25 * 5 ) + INT_6 ; IDENT_31 OP_0 IDENT_29 ; IDENT_31 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_31 , INT_7 ) ; IDENT_31 OP_0 IDENT_28 ; IDENT_27 OP_1 IDENT_31 ; IDENT_27 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_27 , INT_4 ) ; IDENT_27 += IDENT_25 ; IDENT_27 = ( IDENT_27 * 5 ) + INT_8 ; } offset += IDENT_24 * 16 ; long IDENT_30 = 0 ; long IDENT_31 = 0 ; switch ( length & 15 ) { case 15 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + INT_9 ) ) ) ) << INT_10 ; case INT_9 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + INT_11 ) ) ) ) << INT_0 ; case INT_11 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + 12 ) ) ) ) << INT_12 ; case 12 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + INT_13 ) ) ) ) << INT_14 ; case INT_13 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + 10 ) ) ) ) << 16 ; case 10 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + 9 ) ) ) ) << 8 ; case 9 : IDENT_31 OP_1 ( ( long ) ( key . get ( ( offset + 8 ) ) ) ) << 0 ; IDENT_31 OP_0 IDENT_29 ; IDENT_31 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_31 , INT_7 ) ; IDENT_31 OP_0 IDENT_28 ; IDENT_27 OP_1 IDENT_31 ; case 8 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 7 ) ) ) ) << INT_15 ; case 7 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 6 ) ) ) ) << INT_10 ; case 6 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 5 ) ) ) ) << INT_0 ; case 5 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 4 ) ) ) ) << INT_12 ; case 4 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 3 ) ) ) ) << INT_14 ; case 3 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 2 ) ) ) ) << 16 ; case 2 : IDENT_30 OP_1 ( ( long ) ( key . get ( ( offset + 1 ) ) ) ) << 8 ; case 1 : IDENT_30 OP_1 ( ( long ) ( key . get ( offset ) ) ) ; IDENT_30 OP_0 IDENT_28 ; IDENT_30 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_12 ( IDENT_30 , INT_4 ) ; IDENT_30 OP_0 IDENT_29 ; IDENT_25 OP_1 IDENT_30 ; } IDENT_25 OP_1 length ; IDENT_27 OP_1 length ; IDENT_25 += IDENT_27 ; IDENT_27 += IDENT_25 ; IDENT_25 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_13 ( IDENT_25 ) ; IDENT_27 = org . apache . IDENT_0 . storage . IDENT_1 . IDENT_2 . IDENT_21 . IDENT_22 . METHOD_13 ( IDENT_27 ) ; IDENT_25 += IDENT_27 ; IDENT_27 += IDENT_25 ; return new long [ ] { IDENT_25 , IDENT_27 } ; }
org . junit . Assert . assertArrayEquals ( IDENT_23 , IDENT_18 ) 