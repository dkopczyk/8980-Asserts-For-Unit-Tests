METHOD_0 ( ) { org . apache . IDENT_0 . test . support . IDENT_1 . init ( org . apache . IDENT_0 . storage . common . IDENT_2 . IDENT_3 , 200 , org . apache . IDENT_0 . storage . common . IDENT_2 . IDENT_4 ) ; org . apache . IDENT_0 . storage . common . IDENT_5 . IDENT_6 IDENT_7 = org . apache . IDENT_0 . test . support . IDENT_1 . METHOD_1 ( ctx . METHOD_2 ( ) . METHOD_3 ( ) ) ; org . apache . IDENT_0 . api . io . IDENT_8 IDENT_9 = org . apache . IDENT_0 . test . support . IDENT_1 . METHOD_4 ( ) ; org . apache . IDENT_0 . api . io . IDENT_10 file = METHOD_5 ( IDENT_9 ) ; int IDENT_11 = IDENT_7 . METHOD_6 ( file ) ; int IDENT_12 = 0 ; IDENT_7 . METHOD_7 ( IDENT_11 ) ; IDENT_7 . METHOD_8 ( IDENT_11 ) . METHOD_9 ( ) ; final int IDENT_13 = 100 ; final java . util . concurrent . atomic . IDENT_14 IDENT_15 = new java . util . concurrent . atomic . METHOD_10 ( 0 ) ; java . lang . Thread IDENT_16 = new java . lang . Thread ( ( ) -> { java . lang . Thread IDENT_17 = null ; try { for ( int i = 0 ; i < IDENT_13 ; i ++ ) { org . apache . IDENT_0 . storage . common . IDENT_5 . IDENT_18 IDENT_19 = IDENT_7 . METHOD_11 ( org . apache . IDENT_0 . storage . common . file . IDENT_20 . METHOD_12 ( IDENT_11 , IDENT_12 ) , false ) ; IDENT_7 . METHOD_13 ( IDENT_19 ) ; ( ( org . apache . IDENT_0 . storage . common . IDENT_5 . IDENT_21 ) ( IDENT_19 ) ) . METHOD_14 ( ) ; IDENT_15 . METHOD_15 ( ) ; if ( ( i OP_0 10 ) == 0 ) { IDENT_17 = new java . lang . Thread ( ( ) -> { try { java . lang . Thread . METHOD_16 ( ) . METHOD_17 ( ) ; IDENT_7 . METHOD_11 ( org . apache . IDENT_0 . storage . common . file . IDENT_20 . METHOD_12 ( IDENT_11 , ( IDENT_12 + 1 ) ) , false ) ; } catch ( e ) { org . apache . IDENT_0 . storage . common . e . printStackTrace ( ) ; } } ) ; IDENT_17 . start ( ) ; } } if ( IDENT_17 != null ) { IDENT_17 . join ( ) ; } } catch ( e ) { org . apache . IDENT_0 . storage . common . e . printStackTrace ( ) ; } } ) ; IDENT_16 . start ( ) ; IDENT_16 . join ( ) ; "<AssertPlaceHolder>" ; IDENT_7 . METHOD_18 ( IDENT_11 ) ; } get ( ) { return IDENT_22 ; }
org . junit . Assert . assertEquals ( IDENT_15 . get ( ) , IDENT_13 ) 