METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( IDENT_0 == null ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } java . lang . StringBuilder sb = new java . lang . StringBuilder ( IDENT_0 . length ( ) ) ; for ( int i = 0 ; i < ( IDENT_0 . length ( ) ) ; i ++ ) { char c = IDENT_0 . charAt ( i ) ; if ( ( c == STRING_1 ) && ( ( i == 0 ) || ( i == ( ( IDENT_0 . length ( ) ) - 1 ) ) ) ) { continue ; } if ( ( c == STRING_1 ) || ( java . lang . IDENT_1 . METHOD_2 ( c ) ) ) { sb . append ( c ) ; } } java . lang . String IDENT_2 = sb . toString ( ) ; java . lang . StringBuilder result = new java . lang . StringBuilder ( ) ; java . lang . String [ ] tokens = IDENT_2 . split ( STRING_2 ) ; for ( java . lang . String token : tokens ) { if ( ( ( result . length ( ) ) > 0 ) && ( ( result . charAt ( ( ( result . length ( ) ) - 1 ) ) ) != STRING_1 ) ) { result . append ( STRING_1 ) ; } if ( org . jboss . IDENT_3 . IDENT_4 . parser . java . utils . IDENT_5 . METHOD_3 ( token ) ) { result . append ( token ) . append ( STRING_3 ) ; } else if ( org . jboss . IDENT_3 . IDENT_4 . parser . java . utils . IDENT_6 . METHOD_4 ( token ) ) { if ( ( result . length ( ) ) > 0 ) result . METHOD_5 ( ( ( result . length ( ) ) - 1 ) ) ; } else { result . append ( token ) ; } } return result . toString ( ) ; }
org . junit . Assert . assertEquals ( "" , org . jboss . IDENT_3 . IDENT_4 . parser . java . utils . IDENT_6 . METHOD_1 ( "" ) ) 