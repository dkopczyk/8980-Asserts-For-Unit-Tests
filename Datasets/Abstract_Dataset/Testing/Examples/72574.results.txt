METHOD_0 ( ) { gov . IDENT_0 . IDENT_1 . util . Map < java . lang . String , java . lang . String > IDENT_2 = new gov . IDENT_0 . IDENT_1 . util . IDENT_3 < java . lang . String , java . lang . String > ( gov . IDENT_0 . IDENT_1 . util . IDENT_4 . IDENT_5 ) ; for ( Map . Entry < java . lang . String , java . lang . String > s : gov . IDENT_0 . IDENT_1 . util . IDENT_4 . IDENT_6 . entrySet ( ) ) IDENT_2 . put ( s . getKey ( ) , s . getValue ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > s : gov . IDENT_0 . IDENT_1 . util . IDENT_4 . IDENT_6 . entrySet ( ) ) "<AssertPlaceHolder>" ; for ( Map . Entry < java . lang . String , java . lang . String > s : gov . IDENT_0 . IDENT_1 . util . IDENT_4 . IDENT_5 . entrySet ( ) ) IDENT_2 . put ( s . getKey ( ) , s . getValue ( ) ) ; } put ( IDENT_7 , IDENT_8 ) { if ( IDENT_9 . containsKey ( key ) ) throw new java . lang . IllegalArgumentException ( STRING_0 ) ; return IDENT_2 . put ( key , value ) ; }
org . junit . Assert . assertNotNull ( IDENT_2 . put ( s . getKey ( ) , s . getValue ( ) ) ) 