METHOD_0 ( ) { edu . IDENT_0 . IDENT_1 . util . Set < java . lang . Integer > IDENT_2 = new edu . IDENT_0 . IDENT_1 . util . HashSet < java . lang . Integer > ( ) ; edu . IDENT_0 . IDENT_1 . util . Set < java . lang . Integer > IDENT_3 = new edu . IDENT_0 . IDENT_1 . util . HashSet < java . lang . Integer > ( ) ; for ( int i = 0 ; i < 5 ; ++ i ) { IDENT_2 . add ( i ) ; IDENT_3 . add ( ( i + 5 ) ) ; } edu . IDENT_0 . IDENT_1 . util . List < edu . IDENT_0 . IDENT_1 . util . Set < java . lang . Integer > > IDENT_4 = new edu . IDENT_0 . IDENT_1 . util . ArrayList < edu . IDENT_0 . IDENT_1 . util . Set < java . lang . Integer > > ( ) ; IDENT_4 . add ( IDENT_2 ) ; IDENT_4 . add ( IDENT_3 ) ; edu . IDENT_0 . IDENT_1 . util . Set < java . lang . Integer > IDENT_5 = new edu . IDENT_0 . IDENT_1 . util . IDENT_6 < java . lang . Integer > ( IDENT_4 ) ; for ( int i = 0 ; i < 10 ; ++ i ) "<AssertPlaceHolder>" ; } contains ( java . lang . Object ) { if ( ! ( o instanceof edu . IDENT_0 . IDENT_1 . graph . IDENT_7 ) ) return false ; @ edu . IDENT_0 . IDENT_1 . graph . METHOD_1 ( STRING_0 ) edu . IDENT_0 . IDENT_1 . graph . IDENT_7 < T > e = ( ( edu . IDENT_0 . IDENT_1 . graph . IDENT_7 < T > ) ( o ) ) ; if ( ( e . from ( ) ) == ( IDENT_8 ) ) { java . util . Set < edu . IDENT_0 . IDENT_1 . graph . IDENT_7 < T > > IDENT_9 = IDENT_10 . get ( e . to ( ) ) ; return IDENT_9 . contains ( e ) ; } else if ( ( e . to ( ) ) == ( IDENT_8 ) ) { java . util . Set < edu . IDENT_0 . IDENT_1 . graph . IDENT_7 < T > > IDENT_9 = IDENT_11 . get ( e . from ( ) ) ; return IDENT_9 . contains ( e ) ; } return false ; }
org . junit . Assert . assertTrue ( IDENT_5 . contains ( i ) ) 