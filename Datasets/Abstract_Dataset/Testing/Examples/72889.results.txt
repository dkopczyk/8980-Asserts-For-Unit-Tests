METHOD_0 ( ) { METHOD_1 ( new com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_2 ( ) { @ com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . Override public void run ( ) throws com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_5 , java . io . IOException { java . lang . String IDENT_6 = IDENT_7 . METHOD_3 ( ) . METHOD_4 ( ) . get ( IDENT_8 ) . METHOD_5 ( ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 IDENT_11 = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . METHOD_6 ( new java . io . ByteArrayInputStream ( IDENT_12 ) , ( ( IDENT_13 . METHOD_7 ( ) ) * ( IDENT_14 ) ) , ( ( ( IDENT_13 . METHOD_7 ( ) ) * ( IDENT_14 ) ) + ( IDENT_13 . METHOD_7 ( ) ) ) ) ; if ( ( IDENT_14 ) == ( ( IDENT_15 ) / 2 ) ) { IDENT_13 . METHOD_8 ( java . util . Arrays . asList ( new java . util . UUID [ ] { IDENT_8 } ) ) ; long length = new java . io . File ( IDENT_6 ) . length ( ) ; try { java . lang . Thread . sleep ( 100 ) ; } catch ( java . lang . IDENT_5 e ) { throw new java . lang . RuntimeException ( e ) ; } METHOD_9 ( IDENT_8 , IDENT_11 ) ; "<AssertPlaceHolder>" ; IDENT_13 . METHOD_10 ( IDENT_8 ) ; } METHOD_9 ( IDENT_8 , IDENT_11 ) ; } } ) ; } METHOD_8 ( java . util . List ) { for ( java . util . UUID IDENT_16 : IDENT_17 ) { METHOD_11 ( IDENT_16 ) ; IDENT_18 . METHOD_12 ( ) . METHOD_13 ( IDENT_19 . METHOD_14 ( ) , IDENT_16 ) ; } }
org . junit . Assert . assertThat ( new java . io . File ( IDENT_6 ) . length ( ) , org . hamcrest . CoreMatchers . is ( length ) ) 