METHOD_0 ( ) { IDENT_0 . IDENT_1 = STRING_0 ; IDENT_0 . IDENT_2 = STRING_1 ; org . IDENT_3 . api . server . rule . IDENT_4 . IDENT_5 IDENT_6 = mock ( org . IDENT_3 . api . server . rule . IDENT_4 . IDENT_5 . class ) ; org . IDENT_3 . api . server . IDENT_7 . IDENT_8 function = mock ( org . IDENT_3 . api . server . IDENT_7 . IDENT_8 . class ) ; when ( IDENT_6 . METHOD_1 ( eq ( IDENT_0 . IDENT_2 ) ) ) . thenReturn ( function ) ; when ( function . METHOD_2 ( ) ) . thenReturn ( STRING_2 ) ; IDENT_0 . METHOD_3 ( IDENT_6 ) ; verify ( IDENT_6 ) . METHOD_1 ( STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( org . IDENT_3 . api . server . rule . IDENT_4 . IDENT_5 ) { if ( IDENT_1 . startsWith ( STRING_3 ) ) { return IDENT_7 . METHOD_1 ( IDENT_2 . replace ( STRING_4 , STRING_5 ) ) ; } if ( STRING_6 . equals ( IDENT_1 ) ) { return IDENT_7 . linear ( IDENT_9 . replace ( STRING_4 , STRING_5 ) ) ; } return IDENT_7 . METHOD_4 ( IDENT_9 . replace ( STRING_4 , STRING_5 ) , IDENT_10 . replace ( STRING_4 , STRING_5 ) ) ; }
org . junit . Assert . assertEquals ( STRING_2 , function . METHOD_2 ( ) ) 