METHOD_0 ( ) { java . lang . String sql = STRING_0 ; java . lang . String IDENT_0 = STRING_1 ; IDENT_1 . co . future . IDENT_2 . parser . IDENT_3 parser = new IDENT_1 . co . future . IDENT_2 . parser . METHOD_1 ( sql ) ; IDENT_1 . co . future . IDENT_2 . context . IDENT_4 ctx = IDENT_5 . METHOD_2 ( ) ; ctx . param ( STRING_2 , STRING_3 ) ; IDENT_1 . co . future . IDENT_2 . parser . IDENT_6 IDENT_7 = parser . parse ( ) ; IDENT_7 . transform ( ctx ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( ) { if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_8 ) ) { if ( ( IDENT_9 . length ( ) ) > 0 ) { IDENT_8 = IDENT_9 . toString ( ) ; if ( IDENT_8 . METHOD_4 ( ) . contains ( STRING_4 ) ) { java . lang . StringBuffer IDENT_10 = new java . lang . StringBuffer ( ) ; java . util . regex . IDENT_11 matcher = IDENT_1 . co . future . IDENT_2 . context . IDENT_12 . IDENT_13 . matcher ( IDENT_8 ) ; while ( matcher . find ( ) ) { java . lang . String IDENT_14 = matcher . group ( 1 ) ; matcher . METHOD_5 ( IDENT_10 , IDENT_14 ) ; } matcher . METHOD_6 ( IDENT_10 ) ; IDENT_8 = IDENT_10 . toString ( ) ; } java . lang . StringBuffer IDENT_10 = new java . lang . StringBuffer ( ) ; java . util . regex . IDENT_11 IDENT_15 = IDENT_1 . co . future . IDENT_2 . context . IDENT_12 . IDENT_16 . matcher ( IDENT_8 ) ; while ( IDENT_15 . find ( ) ) { java . lang . String IDENT_17 = IDENT_15 . group ( 1 ) ; IDENT_15 . METHOD_5 ( IDENT_10 , IDENT_17 ) ; } IDENT_15 . METHOD_6 ( IDENT_10 ) ; IDENT_8 = IDENT_10 . toString ( ) ; IDENT_8 = IDENT_1 . co . future . IDENT_2 . context . IDENT_12 . IDENT_18 . matcher ( IDENT_8 ) . replaceAll ( "" ) ; } } return IDENT_8 ; }
org . junit . Assert . assertEquals ( "1" , IDENT_0 , ctx . METHOD_3 ( ) ) 