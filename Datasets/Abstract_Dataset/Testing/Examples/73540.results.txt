METHOD_0 ( ) { java . lang . String sql = new java . lang . String ( java . nio . file . IDENT_0 . METHOD_1 ( java . nio . file . IDENT_1 . get ( STRING_0 ) ) , java . nio . IDENT_2 . IDENT_3 . UTF_8 ) ; IDENT_4 . co . future . IDENT_5 . parser . IDENT_6 parser = new IDENT_4 . co . future . IDENT_5 . parser . METHOD_2 ( sql ) ; IDENT_4 . co . future . IDENT_5 . context . IDENT_7 ctx = IDENT_8 . METHOD_3 ( ) ; ctx . param ( STRING_1 , "2" ) ; IDENT_4 . co . future . IDENT_5 . parser . IDENT_9 IDENT_10 = parser . parse ( ) ; IDENT_10 . transform ( ctx ) ; java . lang . String IDENT_11 = new java . lang . String ( java . nio . file . IDENT_0 . METHOD_1 ( java . nio . file . IDENT_1 . get ( STRING_2 ) ) , java . nio . IDENT_2 . IDENT_3 . UTF_8 ) ; java . lang . String IDENT_12 = ctx . METHOD_4 ( ) ; System . out . println ( IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { if ( org . apache . commons . lang3 . StringUtils . isEmpty ( IDENT_13 ) ) { if ( ( IDENT_14 . length ( ) ) > 0 ) { IDENT_13 = IDENT_14 . toString ( ) ; if ( IDENT_13 . METHOD_5 ( ) . contains ( STRING_3 ) ) { java . lang . StringBuffer IDENT_15 = new java . lang . StringBuffer ( ) ; java . util . regex . IDENT_16 matcher = IDENT_4 . co . future . IDENT_5 . context . IDENT_17 . IDENT_18 . matcher ( IDENT_13 ) ; while ( matcher . find ( ) ) { java . lang . String IDENT_19 = matcher . group ( 1 ) ; matcher . METHOD_6 ( IDENT_15 , IDENT_19 ) ; } matcher . METHOD_7 ( IDENT_15 ) ; IDENT_13 = IDENT_15 . toString ( ) ; } java . lang . StringBuffer IDENT_15 = new java . lang . StringBuffer ( ) ; java . util . regex . IDENT_16 IDENT_20 = IDENT_4 . co . future . IDENT_5 . context . IDENT_17 . IDENT_21 . matcher ( IDENT_13 ) ; while ( IDENT_20 . find ( ) ) { java . lang . String IDENT_22 = IDENT_20 . group ( 1 ) ; IDENT_20 . METHOD_6 ( IDENT_15 , IDENT_22 ) ; } IDENT_20 . METHOD_7 ( IDENT_15 ) ; IDENT_13 = IDENT_15 . toString ( ) ; IDENT_13 = IDENT_4 . co . future . IDENT_5 . context . IDENT_17 . IDENT_23 . matcher ( IDENT_13 ) . replaceAll ( "" ) ; } } return IDENT_13 ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_12 ) 