METHOD_0 ( ) { double a = this . random . METHOD_1 ( ) ; double b = this . random . METHOD_1 ( ) ; double c = this . random . METHOD_1 ( ) ; double d = this . random . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . math . geometry . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new org . IDENT_0 . IDENT_1 . math . geometry . IDENT_2 . IDENT_3 . METHOD_2 ( a , b , c , d ) ; org . IDENT_0 . IDENT_1 . math . geometry . IDENT_2 . IDENT_3 . METHOD_2 IDENT_6 = IDENT_5 . METHOD_3 ( ) ; IDENT_6 . METHOD_4 ( ) ; double IDENT_7 = ( ( ( ( IDENT_6 . METHOD_5 ( ) ) * ( IDENT_6 . METHOD_5 ( ) ) ) + ( ( IDENT_6 . METHOD_6 ( ) ) * ( IDENT_6 . METHOD_6 ( ) ) ) ) + ( ( IDENT_6 . METHOD_7 ( ) ) * ( IDENT_6 . METHOD_7 ( ) ) ) ) + ( ( IDENT_6 . METHOD_8 ( ) ) * ( IDENT_6 . METHOD_8 ( ) ) ) ; IDENT_6 . METHOD_9 ( ( ( IDENT_6 . METHOD_5 ( ) ) / IDENT_7 ) ) ; IDENT_6 . METHOD_10 ( ( ( IDENT_6 . METHOD_6 ( ) ) / IDENT_7 ) ) ; IDENT_6 . METHOD_11 ( ( ( IDENT_6 . METHOD_7 ( ) ) / IDENT_7 ) ) ; IDENT_6 . METHOD_12 ( ( ( IDENT_6 . METHOD_8 ( ) ) / IDENT_7 ) ) ; IDENT_5 . METHOD_0 ( ) ; "<AssertPlaceHolder>" ; } equals ( java . lang . Object ) { if ( ! ( object instanceof org . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 ) ) { return false ; } final byte [ ] IDENT_10 = ( ( org . IDENT_0 . IDENT_1 . IDENT_8 . IDENT_9 ) ( object ) ) . bytes ; if ( ( IDENT_10 . length ) != ( this . bytes . length ) ) { return false ; } for ( int i = 0 ; i < ( IDENT_10 . length ) ; ++ i ) { if ( ( IDENT_10 [ i ] ) != ( this . bytes [ i ] ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( IDENT_5 . equals ( IDENT_6 ) ) 