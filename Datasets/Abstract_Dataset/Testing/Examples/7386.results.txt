METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; org . apache . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . server . IDENT_5 service = METHOD_1 ( null ) ; org . apache . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . server . IDENT_6 port = METHOD_2 ( service ) ; java . util . concurrent . IDENT_7 ex = null ; java . util . concurrent . IDENT_8 executor = service . METHOD_3 ( ) ; if ( ( executor != null ) && ( executor instanceof java . util . concurrent . IDENT_7 ) ) { ex = ( ( java . util . concurrent . IDENT_7 ) ( executor ) ) ; } else { IDENT_9 . logger . debug ( STRING_1 6 ) ; return ; } org . apache . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . common . IDENT_10 < org . test . IDENT_4 . IDENT_11 > IDENT_12 = new org . apache . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . common . IDENT_10 < org . test . IDENT_4 . IDENT_11 > ( ) ; java . lang . String IDENT_13 = STRING_2 ; IDENT_9 . logger . debug ( ( ( STRING_3 2 + IDENT_13 ) + STRING_1 4 ) ) ; java . util . concurrent . IDENT_14 < ? > IDENT_15 = port . METHOD_4 ( IDENT_13 , IDENT_12 ) ; IDENT_9 . logger . debug ( ( ( STRING_3 2 + IDENT_13 ) + STRING_3 ) ) ; java . lang . Thread . sleep ( 1000 ) ; IDENT_9 . logger . debug ( ( ( STRING_1 + ( ex . getClass ( ) . getName ( ) ) ) + STRING_1 9 ) ) ; ex . METHOD_5 ( ) ; IDENT_9 . logger . debug ( ( ( STRING_4 + IDENT_13 ) + STRING_5 ) ) ; java . lang . String IDENT_16 = port . METHOD_6 ( IDENT_13 ) ; IDENT_9 . logger . debug ( ( ( ( ( STRING_4 + IDENT_13 ) + STRING_1 3 ) + IDENT_16 ) + STRING_1 9 ) ) ; IDENT_9 . logger . debug ( STRING_3 3 ) ; java . lang . String IDENT_17 = port . METHOD_7 ( IDENT_13 ) ; IDENT_9 . logger . debug ( ( ( ( ( STRING_3 0 + IDENT_13 ) + STRING_1 3 ) + IDENT_17 ) + STRING_1 9 ) ) ; METHOD_8 ( IDENT_15 ) ; boolean IDENT_18 = false ; try { org . test . IDENT_4 . IDENT_11 IDENT_19 = IDENT_12 . get ( ) ; if ( IDENT_19 != null ) { IDENT_9 . logger . debug ( ( ( STRING_3 1 + IDENT_13 ) + STRING_1 2 ) ) ; java . lang . String IDENT_20 = IDENT_19 . getMessage ( ) ; IDENT_9 . logger . debug ( ( ( ( ( STRING_3 1 + IDENT_13 ) + STRING_1 0 ) + IDENT_20 ) + STRING_6 ) ) ; } else { IDENT_9 . logger . debug ( ( ( STRING_3 1 + IDENT_13 ) + STRING_1 5 ) ) ; IDENT_9 . logger . debug ( ( ( STRING_3 1 + IDENT_13 ) + STRING_7 ) ) ; java . lang . Object IDENT_21 = IDENT_15 . get ( ) ; IDENT_9 . logger . debug ( ( ( ( ( STRING_3 1 + IDENT_13 ) + STRING_1 1 ) + IDENT_21 ) + STRING_1 8 ) ) ; } } catch ( java . lang . Exception IDENT_22 ) { IDENT_9 . logger . debug ( ( ( ( ( ( ( STRING_3 1 + IDENT_13 ) + STRING_8 ) + ( IDENT_22 . getClass ( ) . getName ( ) ) ) + STRING_9 ) + ( IDENT_22 . getMessage ( ) ) ) + STRING_6 ) ) ; IDENT_18 = true ; } "<AssertPlaceHolder>" ; } getMessage ( ) { return IDENT_23 ; }
org . junit . Assert . assertTrue ( STRING_1 7 , IDENT_18 ) 