METHOD_0 ( ) { final uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Integer > queue = new uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 . METHOD_1 ( 5 ) ; final java . util . Iterator < java . lang . Integer > iterator = queue . iterator ( ) ; "<AssertPlaceHolder>" ; } hasNext ( ) { if ( null != ( queue ) ) { if ( queue . isEmpty ( ) ) { boolean IDENT_3 = IDENT_4 . isEmpty ( ) ; while ( ( ! IDENT_3 ) && ( queue . isEmpty ( ) ) ) { try { IDENT_3 = METHOD_2 ( ) ; if ( ! IDENT_3 ) { METHOD_3 ( INT_0 ) ; } } catch ( final java . lang . Exception e ) { uk . gov . gchq . gaffer . IDENT_5 . operation . handler . IDENT_6 . IDENT_7 . LOGGER . error ( e . getMessage ( ) , e ) ; IDENT_3 = true ; } } return ! ( queue . isEmpty ( ) ) ; } else { return true ; } } else { return false ; } }
org . junit . Assert . assertFalse ( iterator . hasNext ( ) ) 