METHOD_0 ( ) { final uk . gov . gchq . gaffer . data . element . IDENT_0 IDENT_1 = new uk . gov . gchq . gaffer . data . element . IDENT_0 . Builder ( ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . IDENT_2 IDENT_3 = mock ( uk . gov . gchq . gaffer . data . element . IDENT_2 . class ) ; final uk . gov . gchq . gaffer . data . element . IDENT_4 IDENT_5 = new uk . gov . gchq . gaffer . data . element . METHOD_1 ( IDENT_1 , IDENT_3 ) ; final java . lang . String IDENT_6 = STRING_0 ; final java . lang . String IDENT_7 = STRING_1 ; METHOD_2 ( IDENT_3 . getProperty ( IDENT_6 , IDENT_5 . METHOD_3 ( ) ) ) . METHOD_4 ( IDENT_7 ) ; java . lang . Object IDENT_8 = IDENT_5 . getProperty ( IDENT_6 ) ; "<AssertPlaceHolder>" ; } getProperty ( java . lang . String ) { final boolean IDENT_9 = uk . gov . gchq . gaffer . rest . service . v2 . IDENT_10 . IDENT_11 . containsKey ( IDENT_6 ) ; boolean IDENT_12 = IDENT_9 ; if ( ! IDENT_12 ) { final java . lang . String IDENT_13 = java . lang . System . getProperty ( uk . gov . gchq . gaffer . rest . service . v2 . IDENT_10 . IDENT_14 ) ; if ( null != IDENT_13 ) { final java . lang . String [ ] props = IDENT_13 . split ( STRING_2 ) ; IDENT_12 = org . apache . commons . lang3 . IDENT_15 . contains ( props , IDENT_6 ) ; } } java . lang . String IDENT_16 ; if ( IDENT_12 ) { IDENT_16 = java . lang . System . getProperty ( IDENT_6 ) ; if ( ( null == IDENT_16 ) && IDENT_9 ) { IDENT_16 = uk . gov . gchq . gaffer . rest . service . v2 . IDENT_10 . IDENT_11 . get ( IDENT_6 ) ; } } else { IDENT_16 = null ; } final javax . ws . rs . core . Response . IDENT_17 builder = ( null == IDENT_16 ) ? javax . ws . rs . core . Response . status ( INT_0 ) . entity ( new uk . gov . gchq . gaffer . core . exception . IDENT_18 . METHOD_5 ( ) . status ( Status . IDENT_19 ) . METHOD_6 ( INT_0 ) . METHOD_7 ( ( ( STRING_3 + IDENT_6 ) + STRING_4 ) ) . build ( ) ) . type ( IDENT_20 . IDENT_21 ) : javax . ws . rs . core . Response . METHOD_8 ( IDENT_16 ) . type ( IDENT_20 . IDENT_22 ) ; return builder . header ( IDENT_23 . IDENT_24 , IDENT_23 . IDENT_25 ) . build ( ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_8 ) 