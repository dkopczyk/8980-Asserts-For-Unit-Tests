METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final java . lang . String IDENT_1 = STRING_1 ; final java . util . function . IDENT_2 IDENT_3 = new uk . gov . gchq . gaffer . function . METHOD_1 ( ) ; final uk . gov . gchq . gaffer . data . element . function . IDENT_4 IDENT_5 = new uk . gov . gchq . gaffer . data . element . function . IDENT_4 . Builder ( ) . select ( IDENT_0 , IDENT_1 ) . execute ( IDENT_3 ) . build ( ) ; final uk . gov . gchq . gaffer . data . element . Properties IDENT_6 = new uk . gov . gchq . gaffer . data . element . Properties ( ) ; IDENT_6 . put ( IDENT_0 , 1 ) ; IDENT_6 . put ( IDENT_1 , STRING_2 ) ; final uk . gov . gchq . gaffer . data . element . Properties IDENT_7 = new uk . gov . gchq . gaffer . data . element . Properties ( ) ; IDENT_7 . put ( IDENT_0 , 10 ) ; IDENT_7 . put ( IDENT_1 , STRING_3 ) ; final uk . gov . gchq . gaffer . data . element . Properties IDENT_8 = new uk . gov . gchq . gaffer . data . element . Properties ( ) ; IDENT_8 . put ( IDENT_0 , 5 ) ; IDENT_8 . put ( IDENT_1 , STRING_4 ) ; uk . gov . gchq . gaffer . data . element . Properties state = IDENT_6 ; state = IDENT_5 . apply ( state , IDENT_7 ) ; state = IDENT_5 . apply ( state , IDENT_8 ) ; "<AssertPlaceHolder>" ; } apply ( uk . gov . gchq . gaffer . data . element . Properties , uk . gov . gchq . gaffer . data . element . Properties ) { if ( null == state ) { return properties ; } IDENT_9 . METHOD_2 ( properties ) ; IDENT_10 . METHOD_2 ( state ) ; apply ( IDENT_10 , IDENT_9 ) ; return state ; }
org . junit . Assert . assertEquals ( IDENT_7 , state ) 