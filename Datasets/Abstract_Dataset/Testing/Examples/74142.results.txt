METHOD_0 ( ) { final uk . gov . gchq . gaffer . graph . IDENT_0 . IDENT_1 IDENT_0 = METHOD_1 ( uk . gov . gchq . gaffer . graph . IDENT_0 . IDENT_2 . IDENT_3 ) ; final uk . gov . gchq . gaffer . operation . IDENT_4 IDENT_5 = new uk . gov . gchq . gaffer . operation . IDENT_4 . Builder ( ) . first ( new uk . gov . gchq . gaffer . operation . impl . get . METHOD_2 ( ) ) . METHOD_3 ( new uk . gov . gchq . gaffer . operation . impl . IDENT_6 . METHOD_4 ( ) ) . METHOD_3 ( new uk . gov . gchq . gaffer . operation . impl . METHOD_5 ( ) ) . METHOD_3 ( new uk . gov . gchq . gaffer . operation . METHOD_6 ( uk . gov . gchq . gaffer . graph . IDENT_0 . Collections . singletonList ( new uk . gov . gchq . gaffer . operation . impl . get . METHOD_7 ( ) ) ) ) . build ( ) ; final uk . gov . gchq . gaffer . user . User user = new uk . gov . gchq . gaffer . user . User . Builder ( ) . METHOD_8 ( STRING_0 , STRING_1 , STRING_2 ) . build ( ) ; try { IDENT_0 . METHOD_9 ( IDENT_5 , new uk . gov . gchq . gaffer . store . Context ( user ) ) ; org . junit . Assert . fail ( STRING_3 ) ; } catch ( final uk . gov . gchq . gaffer . IDENT_7 . exception . IDENT_8 e ) { "<AssertPlaceHolder>" ; } } getMessage ( ) { return ( ( ( ( super . getMessage ( ) ) + STRING_4 ) + ( this . IDENT_9 ) ) + STRING_5 ) + ( super . METHOD_10 ( ) ) ; }
org . junit . Assert . assertNotNull ( e . getMessage ( ) ) 