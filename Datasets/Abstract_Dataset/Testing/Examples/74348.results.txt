METHOD_0 ( ) { final uk . gov . gchq . gaffer . store . operation . handler . IDENT_0 handler = new uk . gov . gchq . gaffer . store . operation . handler . METHOD_1 ( ) ; final java . util . Map < java . lang . Class < ? extends uk . gov . gchq . gaffer . operation . Operation > , uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 > IDENT_2 = new java . util . HashMap ( ) ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 IDENT_3 = mock ( uk . gov . gchq . gaffer . store . operation . resolver . IDENT_4 . IDENT_5 . class ) ; final uk . gov . gchq . gaffer . store . Context context = mock ( uk . gov . gchq . gaffer . store . Context . class ) ; final uk . gov . gchq . gaffer . store . IDENT_6 store = mock ( uk . gov . gchq . gaffer . store . IDENT_6 . class ) ; final uk . gov . gchq . gaffer . user . User user = mock ( uk . gov . gchq . gaffer . user . User . class ) ; final uk . gov . gchq . gaffer . operation . impl . IDENT_7 IDENT_8 = mock ( uk . gov . gchq . gaffer . operation . impl . IDENT_7 . class ) ; final uk . gov . gchq . gaffer . store . IDENT_9 IDENT_10 = new uk . gov . gchq . gaffer . store . METHOD_2 ( ) ; final uk . gov . gchq . gaffer . operation . impl . get . IDENT_11 IDENT_12 = mock ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_11 . class ) ; final uk . gov . gchq . gaffer . operation . impl . get . IDENT_13 IDENT_14 = mock ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_13 . class ) ; final uk . gov . gchq . gaffer . operation . impl . IDENT_15 IDENT_16 = mock ( uk . gov . gchq . gaffer . operation . impl . IDENT_15 . class ) ; final java . util . Map < java . lang . Class < ? extends uk . gov . gchq . gaffer . operation . Operation > , java . lang . Integer > IDENT_17 = new java . util . METHOD_3 ( ) ; IDENT_17 . put ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_11 . class , 3 ) ; IDENT_17 . put ( uk . gov . gchq . gaffer . operation . impl . get . IDENT_13 . class , 2 ) ; IDENT_17 . put ( uk . gov . gchq . gaffer . operation . impl . IDENT_15 . class , 1 ) ; handler . METHOD_4 ( IDENT_17 ) ; final java . lang . String IDENT_18 = STRING_0 ; final uk . gov . gchq . gaffer . IDENT_4 . operation . IDENT_19 < java . lang . IDENT_20 < ? extends uk . gov . gchq . gaffer . data . element . Element > , java . lang . IDENT_20 < ? extends uk . gov . gchq . gaffer . data . element . Element > > IDENT_21 = mock ( uk . gov . gchq . gaffer . IDENT_4 . operation . IDENT_19 . class ) ; IDENT_21 . METHOD_5 ( IDENT_18 ) ; IDENT_2 . put ( IDENT_21 . getClass ( ) , IDENT_3 ) ; handler . METHOD_6 ( IDENT_2 ) ; METHOD_7 ( IDENT_3 . METHOD_8 ( eq ( IDENT_21 ) , any ( ) ) ) . METHOD_9 ( null ) ; final uk . gov . gchq . gaffer . operation . IDENT_22 IDENT_23 = new uk . gov . gchq . gaffer . operation . METHOD_10 ( java . util . Arrays . asList ( IDENT_12 , IDENT_14 , IDENT_16 , IDENT_21 ) ) ; METHOD_7 ( context . METHOD_11 ( ) ) . METHOD_9 ( user ) ; java . util . Set < java . lang . String > IDENT_24 = new java . util . HashSet ( ) ; IDENT_24 . add ( STRING_1 ) ; METHOD_7 ( user . METHOD_12 ( ) ) . METHOD_9 ( IDENT_24 ) ; METHOD_7 ( IDENT_8 . METHOD_13 ( ) ) . METHOD_9 ( IDENT_23 ) ; METHOD_7 ( store . METHOD_14 ( ) ) . METHOD_9 ( IDENT_10 ) ; final java . lang . Object result = handler . METHOD_15 ( new uk . gov . gchq . gaffer . operation . impl . IDENT_7 . Builder ( ) . METHOD_16 ( IDENT_23 ) . build ( ) , context , store ) ; "<AssertPlaceHolder>" ; } build ( ) { return new uk . gov . gchq . gaffer . user . User ( IDENT_25 , IDENT_26 , IDENT_24 ) ; }
org . junit . Assert . assertEquals ( 7 , result ) 