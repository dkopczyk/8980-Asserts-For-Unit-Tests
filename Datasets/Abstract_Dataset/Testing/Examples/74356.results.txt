METHOD_0 ( ) { final uk . gov . gchq . gaffer . store . operation . handler . IDENT_0 handler = new uk . gov . gchq . gaffer . store . operation . handler . METHOD_1 ( ) ; final uk . gov . gchq . gaffer . store . IDENT_1 store = mock ( uk . gov . gchq . gaffer . store . IDENT_1 . class ) ; final uk . gov . gchq . gaffer . operation . impl . IDENT_2 validate = mock ( uk . gov . gchq . gaffer . operation . impl . IDENT_2 . class ) ; METHOD_2 ( validate . METHOD_3 ( ) ) . METHOD_4 ( null ) ; final uk . gov . gchq . gaffer . store . Context context = new uk . gov . gchq . gaffer . store . Context ( ) ; final java . lang . IDENT_3 < ? extends uk . gov . gchq . gaffer . data . element . Element > result = handler . METHOD_5 ( validate , context , store ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( uk . gov . gchq . gaffer . operation . impl . IDENT_4 , uk . gov . gchq . gaffer . store . Context , uk . gov . gchq . gaffer . store . IDENT_1 ) { if ( null == ( IDENT_5 . METHOD_6 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_7 ( STRING_0 ) ; } if ( null == ( IDENT_5 . METHOD_3 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_7 ( STRING_1 ) ; } final java . util . List < IDENT_6 > results = new java . util . ArrayList ( ) ; for ( final IDENT_7 input : IDENT_5 . METHOD_3 ( ) ) { final uk . gov . gchq . gaffer . operation . Operation IDENT_8 = IDENT_5 . METHOD_6 ( ) . METHOD_8 ( ) ; uk . gov . gchq . gaffer . store . operation . handler . util . IDENT_9 . METHOD_9 ( IDENT_8 , input ) ; results . add ( METHOD_10 ( IDENT_8 , context , store ) ) ; } return results ; }
org . junit . Assert . assertNull ( result ) 