METHOD_0 ( ) { final java . util . List < java . lang . Integer > IDENT_0 = java . util . Arrays . asList ( 1 , 2 , 3 ) ; final java . lang . IDENT_1 IDENT_2 = new uk . gov . gchq . gaffer . IDENT_3 . IDENT_4 . METHOD_1 ( IDENT_0 ) ; final uk . gov . gchq . gaffer . store . operation . handler . output . IDENT_5 handler = new uk . gov . gchq . gaffer . store . operation . handler . output . METHOD_2 ( ) ; final uk . gov . gchq . gaffer . operation . impl . output . IDENT_6 < java . lang . Integer > operation = mock ( uk . gov . gchq . gaffer . operation . impl . output . IDENT_6 . class ) ; METHOD_3 ( operation . METHOD_4 ( ) ) . METHOD_5 ( IDENT_2 ) ; final java . lang . IDENT_1 < java . lang . Integer > results = handler . METHOD_6 ( operation , new uk . gov . gchq . gaffer . store . Context ( ) , null ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( uk . gov . gchq . gaffer . operation . impl . IDENT_7 , uk . gov . gchq . gaffer . store . Context , uk . gov . gchq . gaffer . store . IDENT_8 ) { if ( null == ( IDENT_9 . METHOD_7 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_8 ( STRING_0 ) ; } if ( null == ( IDENT_9 . METHOD_4 ( ) ) ) { throw new uk . gov . gchq . gaffer . operation . METHOD_8 ( STRING_1 ) ; } final java . util . List < IDENT_10 > results = new java . util . ArrayList ( ) ; for ( final IDENT_11 input : IDENT_9 . METHOD_4 ( ) ) { final uk . gov . gchq . gaffer . operation . Operation IDENT_12 = IDENT_9 . METHOD_7 ( ) . METHOD_9 ( ) ; uk . gov . gchq . gaffer . store . operation . handler . util . IDENT_13 . METHOD_10 ( IDENT_12 , input ) ; results . add ( METHOD_11 ( IDENT_12 , context , store ) ) ; } return results ; }
org . junit . Assert . assertEquals ( IDENT_0 , results ) 