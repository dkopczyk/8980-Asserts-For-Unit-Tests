METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 . Map IDENT_2 = new uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 . HashMap ( ) ; final java . lang . Integer IDENT_3 = 7 ; final uk . gov . gchq . gaffer . IDENT_1 . operation . IDENT_4 < uk . gov . gchq . gaffer . data . element . Element , java . lang . IDENT_5 < ? extends uk . gov . gchq . gaffer . data . element . Element > > IDENT_6 = mock ( uk . gov . gchq . gaffer . IDENT_1 . operation . IDENT_4 . class ) ; final uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . cache . IDENT_7 cache = mock ( uk . gov . gchq . gaffer . store . operation . handler . IDENT_1 . cache . IDENT_7 . class ) ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_8 IDENT_9 = mock ( uk . gov . gchq . gaffer . store . operation . resolver . IDENT_10 . class ) ; final uk . gov . gchq . gaffer . IDENT_1 . operation . IDENT_11 IDENT_12 = mock ( uk . gov . gchq . gaffer . IDENT_1 . operation . IDENT_11 . class ) ; final uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 . IDENT_13 resolver = new uk . gov . gchq . gaffer . store . operation . resolver . IDENT_1 . METHOD_1 ( cache ) ; final uk . gov . gchq . gaffer . operation . IDENT_14 IDENT_15 = new uk . gov . gchq . gaffer . operation . METHOD_2 ( ) ; IDENT_6 . METHOD_3 ( IDENT_0 ) ; IDENT_6 . METHOD_4 ( IDENT_2 ) ; METHOD_5 ( IDENT_12 . METHOD_6 ( IDENT_2 ) ) . METHOD_7 ( IDENT_15 ) ; METHOD_5 ( IDENT_12 . METHOD_8 ( ) ) . METHOD_7 ( null ) ; METHOD_5 ( cache . METHOD_9 ( IDENT_12 . METHOD_10 ( ) ) ) . METHOD_7 ( IDENT_12 ) ; METHOD_5 ( IDENT_9 . METHOD_8 ( IDENT_15 ) ) . METHOD_7 ( 7 ) ; final java . lang . Integer result = resolver . METHOD_8 ( IDENT_6 , IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( uk . gov . gchq . gaffer . operation . Operation , uk . gov . gchq . gaffer . store . operation . resolver . IDENT_8 ) { return IDENT_9 . METHOD_8 ( operation ) ; }
org . junit . Assert . assertEquals ( IDENT_3 , result ) 