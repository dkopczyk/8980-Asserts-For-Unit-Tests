METHOD_0 ( ) { final uk . gov . gchq . gaffer . data . element . id . IDENT_0 IDENT_1 = new uk . gov . gchq . gaffer . operation . data . METHOD_1 ( STRING_0 ) ; final byte [ ] IDENT_2 = IDENT_3 . METHOD_2 ( IDENT_1 ) ; final uk . gov . gchq . gaffer . data . element . id . IDENT_0 IDENT_4 = IDENT_3 . METHOD_3 ( IDENT_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( byte [ ] ) { final int [ ] IDENT_5 = new int [ ] { 0 } ; final java . lang . String group = uk . gov . gchq . gaffer . IDENT_6 . util . IDENT_7 . METHOD_3 ( IDENT_8 , bytes , IDENT_5 ) ; if ( group . isEmpty ( ) ) { throw new java . lang . IllegalArgumentException ( ( STRING_1 + ( uk . gov . gchq . gaffer . data . element . IDENT_9 . class . METHOD_4 ( ) ) ) ) ; } final uk . gov . gchq . gaffer . store . schema . IDENT_10 IDENT_11 = schema . METHOD_5 ( group ) ; if ( null == IDENT_11 ) { throw new uk . gov . gchq . gaffer . exception . METHOD_6 ( ( ( STRING_2 + group ) + STRING_3 ) ) ; } final uk . gov . gchq . gaffer . data . element . IDENT_9 properties = new uk . gov . gchq . gaffer . data . element . METHOD_7 ( group ) ; METHOD_8 ( bytes , properties , IDENT_11 , IDENT_5 ) ; return properties ; }
org . junit . Assert . assertEquals ( IDENT_1 , IDENT_4 ) 