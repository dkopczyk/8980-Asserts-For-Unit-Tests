METHOD_0 ( ) { final java . lang . String group = uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 . IDENT_2 ; final org . apache . accumulo . core . data . IDENT_3 key = mock ( org . apache . accumulo . core . data . IDENT_3 . class ) ; final org . apache . accumulo . core . data . IDENT_4 value = mock ( org . apache . accumulo . core . data . IDENT_4 . class ) ; final uk . gov . gchq . gaffer . IDENT_5 . key . IDENT_6 converter = mock ( uk . gov . gchq . gaffer . IDENT_5 . key . IDENT_6 . class ) ; final uk . gov . gchq . gaffer . store . schema . Schema schema = METHOD_1 ( ) ; final uk . gov . gchq . gaffer . IDENT_5 . data . element . IDENT_7 loader = new uk . gov . gchq . gaffer . IDENT_5 . data . element . METHOD_2 ( group , key , value , converter , schema , false ) ; final uk . gov . gchq . gaffer . data . element . IDENT_8 IDENT_9 = mock ( uk . gov . gchq . gaffer . data . element . IDENT_8 . class ) ; final uk . gov . gchq . gaffer . data . element . Properties properties = mock ( uk . gov . gchq . gaffer . data . element . Properties . class ) ; final org . apache . accumulo . core . data . IDENT_10 IDENT_11 = mock ( org . apache . accumulo . core . data . IDENT_10 . class ) ; METHOD_3 ( key . METHOD_4 ( ) ) . METHOD_5 ( IDENT_11 ) ; final byte [ ] IDENT_12 = new byte [ ] { 0 , 1 , 2 , 3 , 4 } ; METHOD_3 ( IDENT_11 . METHOD_6 ( ) ) . METHOD_5 ( IDENT_12 ) ; METHOD_3 ( converter . METHOD_7 ( group , IDENT_12 ) ) . METHOD_5 ( properties ) ; METHOD_3 ( properties . get ( IDENT_13 . IDENT_14 ) ) . METHOD_5 ( STRING_0 ) ; final java . lang . Object property = loader . getProperty ( IDENT_13 . IDENT_14 , IDENT_9 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_9 ) . METHOD_8 ( properties ) ; verify ( converter , METHOD_9 ( ) ) . METHOD_10 ( key , false ) ; verify ( converter , METHOD_9 ( ) ) . METHOD_11 ( org . mockito . Mockito . eq ( group ) , org . mockito . Mockito . any ( byte [ ] . class ) ) ; verify ( converter , METHOD_9 ( ) ) . METHOD_12 ( org . mockito . Mockito . eq ( group ) , org . mockito . Mockito . METHOD_13 ( ) ) ; verify ( converter , METHOD_9 ( ) ) . METHOD_14 ( org . mockito . Mockito . eq ( group ) , org . mockito . Mockito . any ( org . apache . accumulo . core . data . IDENT_4 . class ) ) ; } getProperty ( java . lang . String , uk . gov . gchq . gaffer . data . element . Properties ) { if ( null == ( IDENT_15 ) ) { IDENT_15 = schema . METHOD_15 ( group ) ; if ( null == ( IDENT_15 ) ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_1 + ( group ) ) + STRING_2 ) ) ; } } final uk . gov . gchq . gaffer . data . element . Properties props ; if ( IDENT_15 . METHOD_16 ( ) . contains ( name ) ) { props = IDENT_16 . METHOD_7 ( group , key . METHOD_4 ( ) . METHOD_6 ( ) ) ; } else if ( name . equals ( schema . METHOD_17 ( ) ) ) { props = IDENT_16 . METHOD_11 ( group , key . METHOD_18 ( ) . METHOD_6 ( ) ) ; } else if ( name . equals ( IDENT_17 ) ) { props = IDENT_16 . METHOD_12 ( group , key . METHOD_19 ( ) ) ; } else { props = IDENT_16 . METHOD_14 ( group , value ) ; } IDENT_9 . METHOD_8 ( props ) ; return props . get ( name ) ; }
org . junit . Assert . assertEquals ( STRING_0 , property ) 