METHOD_0 ( ) { final uk . gov . gchq . gaffer . store . schema . Schema schema = new uk . gov . gchq . gaffer . store . schema . Schema . Builder ( ) . json ( uk . gov . gchq . gaffer . IDENT_0 . IDENT_1 . METHOD_1 ( uk . gov . gchq . gaffer . IDENT_2 . key . IDENT_3 . getClass ( ) ) ) . build ( ) ; converter = METHOD_2 ( new uk . gov . gchq . gaffer . store . schema . Schema . Builder ( schema ) . type ( STRING_0 , uk . gov . gchq . gaffer . IDENT_2 . key . Long . class ) . METHOD_3 ( IDENT_4 . IDENT_5 , new uk . gov . gchq . gaffer . store . schema . IDENT_6 . Builder ( ) . property ( IDENT_7 . IDENT_8 , STRING_0 ) . build ( ) ) . config ( IDENT_9 . IDENT_10 , IDENT_11 . IDENT_8 ) . build ( ) ) ; final long IDENT_12 = INT_0 ; final uk . gov . gchq . gaffer . data . element . Properties properties = new uk . gov . gchq . gaffer . data . element . Properties ( ) ; properties . put ( IDENT_7 . IDENT_13 , 1 ) ; properties . put ( IDENT_7 . IDENT_14 , 2 ) ; properties . put ( IDENT_7 . IDENT_8 , IDENT_12 ) ; final long IDENT_15 = converter . METHOD_4 ( IDENT_4 . IDENT_5 , properties ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String , uk . gov . gchq . gaffer . data . element . Properties ) { java . lang . Long IDENT_15 = null ; if ( null != ( IDENT_16 ) ) { IDENT_15 = ( ( java . lang . Long ) ( properties . get ( IDENT_16 ) ) ) ; } if ( null == IDENT_15 ) { if ( IDENT_17 . contains ( group ) ) { IDENT_15 = uk . gov . gchq . gaffer . IDENT_2 . utils . IDENT_9 . IDENT_18 ; } else { IDENT_15 = uk . gov . gchq . gaffer . IDENT_0 . IDENT_19 . METHOD_5 ( ) ; } } return IDENT_15 ; }
org . junit . Assert . assertEquals ( IDENT_12 , IDENT_15 ) 