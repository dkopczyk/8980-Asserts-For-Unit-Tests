METHOD_0 ( ) { final uk . gov . gchq . gaffer . graph . IDENT_0 graph = uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_2 . METHOD_1 ( ) ; final uk . gov . gchq . gaffer . operation . impl . add . IDENT_3 IDENT_4 = new uk . gov . gchq . gaffer . operation . impl . add . IDENT_3 . Builder ( ) . input ( uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_5 . METHOD_2 ( ) ) . build ( ) ; graph . execute ( IDENT_4 , new uk . gov . gchq . gaffer . user . User ( ) ) ; final uk . gov . gchq . gaffer . operation . impl . get . IDENT_6 METHOD_2 = new uk . gov . gchq . gaffer . operation . impl . get . IDENT_6 . Builder ( ) . input ( new uk . gov . gchq . gaffer . operation . data . METHOD_3 ( STRING_0 ) ) . view ( new uk . gov . gchq . gaffer . data . IDENT_7 . view . IDENT_8 . Builder ( ) . METHOD_4 ( IDENT_2 . IDENT_9 , new uk . gov . gchq . gaffer . data . IDENT_7 . view . IDENT_10 . Builder ( ) . METHOD_5 ( new uk . gov . gchq . gaffer . data . element . function . IDENT_11 . Builder ( ) . select ( IDENT_2 . IDENT_12 ) . execute ( new uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_5 . METHOD_6 ( ) ) . project ( IDENT_2 . IDENT_12 ) . build ( ) ) . build ( ) ) . build ( ) ) . build ( ) ; final uk . gov . gchq . gaffer . IDENT_13 . IDENT_14 . IDENT_15 < ? extends uk . gov . gchq . gaffer . data . element . Element > results = graph . execute ( METHOD_2 , new uk . gov . gchq . gaffer . user . User ( ) ) ; final java . util . Set < uk . gov . gchq . gaffer . data . element . Element > IDENT_16 = new java . util . HashSet ( ) ; uk . gov . gchq . gaffer . IDENT_13 . stream . IDENT_17 . METHOD_7 ( results ) . METHOD_8 ( IDENT_16 :: add ) ; final java . util . Set < uk . gov . gchq . gaffer . data . element . Element > IDENT_18 = new java . util . HashSet ( ) ; uk . gov . gchq . gaffer . IDENT_1 . impl . IDENT_5 . METHOD_2 ( ) . stream ( ) . filter ( ( element ) -> { if ( element instanceof uk . gov . gchq . gaffer . data . element . Entity ) { return ( ( uk . gov . gchq . gaffer . data . element . Entity ) ( element ) ) . METHOD_9 ( ) . equals ( STRING_0 ) ; } else { final uk . gov . gchq . gaffer . data . element . IDENT_19 METHOD_4 = ( ( uk . gov . gchq . gaffer . data . element . IDENT_19 ) ( element ) ) ; return ( METHOD_4 . METHOD_10 ( ) . equals ( STRING_0 ) ) || ( METHOD_4 . METHOD_11 ( ) . equals ( STRING_0 ) ) ; } } ) . filter ( ( e ) -> e . METHOD_12 ( ) . equals ( IDENT_2 . IDENT_9 ) ) . map ( ( element ) -> { element . METHOD_13 ( IDENT_2 . IDENT_12 , ( ( ( java . lang . Integer ) ( element . getProperty ( IDENT_2 . IDENT_12 ) ) ) + METHOD_6 . IDENT_20 ) ) ; return element ; } ) . METHOD_8 ( IDENT_18 :: add ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( java . util . function . IDENT_21 ) { IDENT_22 . METHOD_8 ( action ) ; }
org . junit . Assert . assertEquals ( IDENT_18 , IDENT_16 ) 