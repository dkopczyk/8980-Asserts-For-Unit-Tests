METHOD_0 ( ) { final uk . gov . gchq . gaffer . data . element . Properties properties = new uk . gov . gchq . gaffer . data . element . Properties ( ) { { put ( IDENT_0 . IDENT_1 , 1 ) ; put ( IDENT_0 . IDENT_2 , 2 ) ; put ( IDENT_0 . IDENT_3 , 3 ) ; put ( IDENT_0 . IDENT_4 , 4 ) ; } } ; final byte [ ] bytes = converter . METHOD_1 ( IDENT_5 . IDENT_6 , properties ) ; final uk . gov . gchq . gaffer . IDENT_7 . utils . IDENT_8 br = converter . METHOD_2 ( IDENT_5 . IDENT_6 , bytes , 2 ) ; final uk . gov . gchq . gaffer . data . element . Properties IDENT_9 = new uk . gov . gchq . gaffer . data . element . Properties ( ) { { put ( IDENT_0 . IDENT_1 , 1 ) ; put ( IDENT_0 . IDENT_2 , 2 ) ; } } ; byte [ ] IDENT_10 = new byte [ br . METHOD_3 ( ) ] ; java . lang . System . METHOD_4 ( bytes , br . METHOD_5 ( ) , IDENT_10 , 0 , br . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . lang . String , byte [ ] ) { final uk . gov . gchq . gaffer . store . schema . IDENT_11 IDENT_12 = schema . METHOD_7 ( group ) ; if ( null == IDENT_12 ) { throw new uk . gov . gchq . gaffer . exception . METHOD_8 ( ( ( STRING_0 + group ) + STRING_1 ) ) ; } final uk . gov . gchq . gaffer . data . element . Properties properties = new uk . gov . gchq . gaffer . data . element . Properties ( ) ; if ( ( null == bytes ) || ( ( bytes . length ) == 0 ) ) { return properties ; } int IDENT_13 = ( uk . gov . gchq . gaffer . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 . METHOD_9 ( bytes [ 0 ] ) ) + ( org . apache . hadoop . hbase . util . IDENT_18 . METHOD_10 ( group ) . length ) ; final int IDENT_19 = bytes . length ; final java . util . Iterator < java . lang . String > IDENT_20 = IDENT_12 . METHOD_11 ( ) . iterator ( ) ; while ( ( IDENT_20 . hasNext ( ) ) && ( IDENT_13 < IDENT_19 ) ) { final java . lang . String IDENT_21 = IDENT_20 . next ( ) ; final uk . gov . gchq . gaffer . store . schema . IDENT_22 IDENT_23 = IDENT_12 . METHOD_12 ( IDENT_21 ) ; final uk . gov . gchq . gaffer . IDENT_14 . IDENT_24 IDENT_25 = ( null != IDENT_23 ) ? ( ( uk . gov . gchq . gaffer . IDENT_14 . IDENT_24 ) ( IDENT_23 . METHOD_13 ( ) ) ) : null ; if ( null != IDENT_25 ) { final int IDENT_26 = uk . gov . gchq . gaffer . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 . METHOD_9 ( bytes [ IDENT_13 ] ) ; int IDENT_27 ; try { IDENT_27 = ( ( int ) ( uk . gov . gchq . gaffer . IDENT_14 . IDENT_15 . IDENT_16 . IDENT_17 . METHOD_14 ( bytes , IDENT_13 ) ) ) ; } catch ( final uk . gov . gchq . gaffer . exception . METHOD_8 e ) { throw new uk . gov . gchq . gaffer . exception . METHOD_8 ( STRING_2 ) ; } IDENT_13 += IDENT_26 ; if ( IDENT_27 > 0 ) { try { properties . put ( IDENT_21 , IDENT_25 . METHOD_15 ( bytes , IDENT_13 , IDENT_27 ) ) ; IDENT_13 += IDENT_27 ; } catch ( final uk . gov . gchq . gaffer . exception . METHOD_8 e ) { throw new uk . gov . gchq . gaffer . exception . METHOD_8 ( ( STRING_3 + IDENT_21 ) , e ) ; } } else { try { properties . put ( IDENT_21 , IDENT_25 . METHOD_16 ( ) ) ; } catch ( final uk . gov . gchq . gaffer . exception . METHOD_8 e ) { throw new uk . gov . gchq . gaffer . exception . METHOD_8 ( ( STRING_3 + IDENT_21 ) , e ) ; } } } } return properties ; }
org . junit . Assert . assertEquals ( IDENT_9 , converter . METHOD_6 ( IDENT_5 . IDENT_6 , IDENT_10 ) ) 