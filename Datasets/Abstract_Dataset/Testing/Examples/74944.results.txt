METHOD_0 ( ) { double [ ] data = new double [ ] { FLOAT_0 , FLOAT_1 , FLOAT_2 , FLOAT_3 , FLOAT_4 } ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( data ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_6 = org . IDENT_7 . engine . IDENT_8 . IDENT_9 . METHOD_2 ( 10 , IDENT_5 ) ; "<AssertPlaceHolder>" ; System . out . println ( IDENT_6 ) ; } METHOD_2 ( int , IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ) { IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_10 = IDENT_11 . METHOD_3 ( ) ; org . IDENT_7 . engine . core . IDENT_12 . METHOD_4 ( IDENT_10 ) ; IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_13 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_11 . size ( ) ) ; for ( int i = 0 ; i < ( IDENT_10 . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . METHOD_5 ( IDENT_10 . get ( i ) ) ) ) - 1 ; IDENT_13 . set ( p , IDENT_11 . get ( i ) ) ; } IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_6 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_11 . size ( ) ) ; double IDENT_14 = Double . MAX_VALUE ; for ( int i = ( IDENT_10 . size ( ) ) - 1 ; i >= 0 ; i OP_0 ) { double p = IDENT_13 . get ( i ) ; int m = i + 1 ; IDENT_14 = java . lang . Math . min ( IDENT_14 , ( ( IDENT_15 * p ) / m ) ) ; IDENT_6 . set ( i , IDENT_14 ) ; } IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 IDENT_16 = new IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_1 ( IDENT_11 . size ( ) ) ; for ( int i = 0 ; i < ( IDENT_16 . size ( ) ) ; i ++ ) { int p = ( ( int ) ( java . lang . Math . METHOD_5 ( IDENT_10 . get ( i ) ) ) ) - 1 ; IDENT_16 . set ( i , IDENT_6 . get ( p ) ) ; } return IDENT_16 ; }
org . junit . Assert . assertNotNull ( IDENT_6 ) 