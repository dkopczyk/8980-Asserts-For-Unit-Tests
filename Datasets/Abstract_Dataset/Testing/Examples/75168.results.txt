METHOD_0 ( ) { 1 2 3 4 5 6 1 2 3 4 java . util . ArrayList < java . lang . Double > input = new java . util . ArrayList < java . lang . Double > ( java . util . Arrays . asList ( FLOAT_0 , FLOAT_1 , 0.0 , FLOAT_2 , FLOAT_3 , FLOAT_4 ) ) ; java . lang . Integer [ ] IDENT_0 = new java . lang . Integer [ ] { 2 , 4 } ; java . lang . Integer [ ] IDENT_1 = new java . lang . Integer [ ] { 4 } ; java . util . ArrayList < java . lang . Integer > IDENT_2 = new java . util . ArrayList < java . lang . Integer > ( java . util . Arrays . asList ( 4 , 3 , 5 ) ) ; org . IDENT_3 . common . IDENT_4 . IDENT_5 < java . lang . Double > IDENT_6 = new org . IDENT_3 . common . IDENT_4 . IDENT_5 < java . lang . Double > ( IDENT_0 ) ; org . IDENT_3 . common . IDENT_4 . IDENT_7 < java . lang . Double > IDENT_8 = new org . IDENT_3 . common . IDENT_4 . IDENT_7 < java . lang . Double > ( IDENT_6 ) ; org . IDENT_3 . common . IDENT_4 . IDENT_5 < java . lang . String > IDENT_9 = new org . IDENT_3 . common . IDENT_4 . IDENT_5 < java . lang . String > ( IDENT_1 ) ; org . IDENT_3 . common . IDENT_4 . IDENT_7 < java . lang . String > IDENT_10 = new org . IDENT_3 . common . IDENT_4 . IDENT_7 < java . lang . String > ( IDENT_9 ) ; org . IDENT_3 . common . IDENT_4 . IDENT_11 < java . lang . Double , java . lang . Integer > IDENT_12 = org . IDENT_3 . common . IDENT_4 . IDENT_13 . < java . lang . Double , java . lang . Integer > METHOD_1 ( ) . add ( IDENT_8 ) . add ( IDENT_14 ) . add ( IDENT_10 ) . add ( IDENT_15 ) . METHOD_2 ( IDENT_16 ) ; IDENT_12 . METHOD_3 ( input ) ; int count = 0 ; for ( java . lang . Integer i : IDENT_12 . output ( ) ) { "<AssertPlaceHolder>" ; count ++ ; } } output ( ) { if ( ( ( IDENT_17 ) == null ) && ( ( IDENT_18 ) == null ) ) return null ; if ( ( IDENT_18 ) != null ) return IDENT_18 ; IDENT_18 = new IDENT_19 < IDENT_20 > ( IDENT_17 . iterator ( ) ) ; IDENT_17 = null ; return IDENT_18 ; }
org . junit . Assert . assertEquals ( IDENT_2 . get ( count ) , i ) 