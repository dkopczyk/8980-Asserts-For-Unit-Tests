METHOD_0 ( ) { au . gov . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 map = au . gov . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_4 . METHOD_1 ( ) . METHOD_2 ( IDENT_5 . IDENT_6 ) . METHOD_3 ( 0.0 , IDENT_7 . IDENT_8 ) . METHOD_3 ( 1.0 , IDENT_7 . IDENT_9 ) . build ( ) ; IDENT_10 . write ( map , out ) ; java . lang . String expected = ( ( ( ( map . getName ( ) ) + STRING_0 ) + ( IDENT_7 . IDENT_8 . METHOD_4 ( ) ) ) + STRING_1 ) + ( IDENT_7 . IDENT_9 . METHOD_4 ( ) ) ; "<AssertPlaceHolder>" ; } toString ( ) { java . lang . String string = ( getName ( ) ) + STRING_2 ; string += ( STRING_3 + ( ( type ) != ( org . eclipse . swt . IDENT_11 . IDENT_12 ) ? STRING_4 3 : STRING_4 6 ) ) + " " ; if ( ( IDENT_13 ) != 0 ) { string += ( STRING_4 + ( IDENT_13 ) ) + " " ; } if ( ( IDENT_14 ) != 0 ) { string += ( STRING_5 + ( IDENT_14 ) ) + " " ; } if ( ( IDENT_15 ) != 0 ) { string += ( STRING_6 + ( IDENT_15 ) ) + " " ; } if ( ( IDENT_16 ) != 0 ) { string += ( STRING_7 + ( IDENT_16 ) ) + " " ; } if ( ( IDENT_17 ) != 0 ) { string += ( STRING_8 + ( IDENT_17 ) ) + " " ; } if ( ( IDENT_18 ) != 0 ) { string += ( STRING_4 5 + ( IDENT_18 ) ) + " " ; } if ( ( IDENT_19 ) != 0 ) { string += ( STRING_9 + ( IDENT_19 ) ) + " " ; } string += ( STRING_10 + ( IDENT_20 ) ) + " " ; string += ( STRING_4 0 + ( IDENT_21 ) ) + " " ; string += ( STRING_4 4 + ( IDENT_22 ) ) + " " ; string += ( STRING_4 1 + ( IDENT_23 ) ) + " " ; string = string . trim ( ) ; string += STRING_4 2 ; return string ; }
org . junit . Assert . assertEquals ( expected , out . toString ( ) ) 