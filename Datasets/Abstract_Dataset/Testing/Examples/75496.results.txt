METHOD_0 ( ) { gov . IDENT_0 . IDENT_1 . geom . IDENT_2 source = new gov . IDENT_0 . IDENT_1 . geom . METHOD_1 ( gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . METHOD_2 ( ( - FLOAT_0 ) ) , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . METHOD_2 ( FLOAT_1 ) , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . METHOD_2 ( FLOAT_2 ) , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . METHOD_2 ( FLOAT_3 ) ) ; gov . IDENT_0 . IDENT_1 . geom . METHOD_1 IDENT_4 = new gov . IDENT_0 . IDENT_1 . geom . METHOD_1 ( gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . IDENT_5 , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . IDENT_6 , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . IDENT_5 , gov . IDENT_0 . IDENT_1 . geom . IDENT_3 . IDENT_6 ) ; gov . IDENT_0 . IDENT_1 . geom . METHOD_1 result = au . gov . IDENT_7 . IDENT_1 . common . util . IDENT_8 . METHOD_3 ( source , IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( gov . IDENT_0 . IDENT_1 . geom . METHOD_1 , gov . IDENT_0 . IDENT_1 . geom . METHOD_1 ) { if ( ( source == null ) || ( IDENT_4 == null ) ) { return source ; } double IDENT_9 = au . gov . IDENT_7 . IDENT_1 . common . util . IDENT_8 . METHOD_4 ( source . METHOD_5 ( ) . IDENT_10 , IDENT_4 . METHOD_5 ( ) . IDENT_10 , IDENT_4 . METHOD_6 ( ) . IDENT_10 ) ; double IDENT_11 = au . gov . IDENT_7 . IDENT_1 . common . util . IDENT_8 . METHOD_4 ( source . METHOD_6 ( ) . IDENT_10 , IDENT_4 . METHOD_5 ( ) . IDENT_10 , IDENT_4 . METHOD_6 ( ) . IDENT_10 ) ; double IDENT_12 = au . gov . IDENT_7 . IDENT_1 . common . util . IDENT_8 . METHOD_4 ( source . METHOD_7 ( ) . IDENT_10 , IDENT_4 . METHOD_7 ( ) . IDENT_10 , IDENT_4 . METHOD_8 ( ) . IDENT_10 ) ; double IDENT_13 = au . gov . IDENT_7 . IDENT_1 . common . util . IDENT_8 . METHOD_4 ( source . METHOD_8 ( ) . IDENT_10 , IDENT_4 . METHOD_7 ( ) . IDENT_10 , IDENT_4 . METHOD_8 ( ) . IDENT_10 ) ; return gov . IDENT_0 . IDENT_1 . geom . METHOD_1 . METHOD_2 ( IDENT_9 , IDENT_11 , IDENT_12 , IDENT_13 ) ; }
org . junit . Assert . assertEquals ( source , result ) 