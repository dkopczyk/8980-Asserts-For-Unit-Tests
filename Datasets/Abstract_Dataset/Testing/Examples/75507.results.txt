METHOD_0 ( ) { gov . IDENT_0 . IDENT_1 . geom . IDENT_2 result = au . gov . IDENT_3 . IDENT_1 . common . util . IDENT_4 . METHOD_1 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , gov . IDENT_0 . IDENT_1 . IDENT_5 . IDENT_6 ) { if ( au . gov . IDENT_3 . IDENT_1 . common . util . IDENT_4 . METHOD_2 ( IDENT_7 ) ) { return null ; } gov . IDENT_0 . IDENT_1 . geom . IDENT_8 IDENT_9 = null ; gov . IDENT_0 . IDENT_1 . geom . IDENT_8 IDENT_10 = null ; IDENT_7 = IDENT_7 . trim ( ) ; java . lang . String regex ; java . lang . String IDENT_11 = STRING_1 ; java . util . regex . IDENT_12 pattern ; java . util . regex . IDENT_13 matcher ; if ( IDENT_14 != null ) { regex = STRING_2 ; if ( IDENT_7 . matches ( regex ) ) { try { gov . IDENT_0 . IDENT_1 . geom . IDENT_15 . IDENT_16 IDENT_17 = gov . IDENT_0 . IDENT_1 . geom . IDENT_15 . IDENT_16 . METHOD_3 ( IDENT_7 , IDENT_14 ) ; if ( ( ( IDENT_17 . METHOD_4 ( ) . IDENT_18 ) != 0 ) || ( ( IDENT_17 . METHOD_4 ( ) . IDENT_18 ) != 0 ) ) { IDENT_9 = IDENT_17 . METHOD_4 ( ) ; IDENT_10 = IDENT_17 . METHOD_5 ( ) ; } else { return null ; } } catch ( java . lang . IllegalArgumentException e ) { return null ; } } } if ( ( IDENT_9 == null ) || ( IDENT_10 == null ) ) { regex = STRING_3 ; regex += IDENT_11 ; regex += STRING_4 ; pattern = java . util . regex . IDENT_12 . METHOD_6 ( regex ) ; matcher = pattern . matcher ( IDENT_7 ) ; if ( matcher . matches ( ) ) { java . lang . String IDENT_19 = matcher . group ( 1 ) . trim ( ) ; int IDENT_20 = 1 ; char IDENT_21 = IDENT_19 . METHOD_7 ( ) . charAt ( ( ( IDENT_19 . length ( ) ) - 1 ) ) ; if ( ! ( java . lang . IDENT_22 . METHOD_8 ( IDENT_21 ) ) ) { IDENT_20 = ( IDENT_21 == STRING_5 ) ? 1 : - 1 ; IDENT_19 = IDENT_19 . substring ( 0 , ( ( IDENT_19 . length ( ) ) - 1 ) ) ; IDENT_19 = IDENT_19 . trim ( ) ; } java . lang . String IDENT_23 = matcher . group ( 4 ) . trim ( ) ; int IDENT_24 = 1 ; IDENT_21 = IDENT_23 . METHOD_7 ( ) . charAt ( ( ( IDENT_23 . length ( ) ) - 1 ) ) ; if ( ! ( java . lang . IDENT_22 . METHOD_8 ( IDENT_21 ) ) ) { IDENT_24 = ( IDENT_21 == STRING_6 ) ? 1 : - 1 ; IDENT_23 = IDENT_23 . substring ( 0 , ( ( IDENT_23 . length ( ) ) - 1 ) ) ; IDENT_23 = IDENT_23 . trim ( ) ; } IDENT_9 = gov . IDENT_0 . IDENT_1 . geom . IDENT_8 . METHOD_9 ( ( ( java . lang . Double . METHOD_10 ( IDENT_19 ) ) * IDENT_20 ) ) ; IDENT_10 = gov . IDENT_0 . IDENT_1 . geom . IDENT_8 . METHOD_9 ( ( ( java . lang . Double . METHOD_10 ( IDENT_23 ) ) * IDENT_24 ) ) ; } } if ( ( IDENT_9 == null ) || ( IDENT_10 == null ) ) { regex = STRING_7 ; regex += IDENT_11 ; regex += STRING_8 ; pattern = java . util . regex . IDENT_12 . METHOD_6 ( regex ) ; matcher = pattern . matcher ( IDENT_7 ) ; if ( matcher . matches ( ) ) { IDENT_9 = au . gov . IDENT_3 . IDENT_1 . common . util . IDENT_4 . METHOD_11 ( matcher . group ( 1 ) ) ; IDENT_10 = au . gov . IDENT_3 . IDENT_1 . common . util . IDENT_4 . METHOD_11 ( matcher . group ( 5 ) ) ; } } if ( ( IDENT_9 == null ) || ( IDENT_10 == null ) ) { return null ; } if ( ( ( ( ( IDENT_9 . IDENT_18 ) >= ( - INT_0 ) ) && ( ( IDENT_9 . IDENT_18 ) <= INT_0 ) ) && ( ( IDENT_10 . IDENT_18 ) >= ( - INT_1 ) ) ) && ( ( IDENT_10 . IDENT_18 ) <= INT_1 ) ) { return new gov . IDENT_0 . IDENT_1 . geom . METHOD_12 ( IDENT_9 , IDENT_10 ) ; } return null ; }
org . junit . Assert . assertNull ( result ) 