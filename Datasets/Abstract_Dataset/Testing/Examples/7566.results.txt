METHOD_0 ( ) { java . util . List < org . apache . beam . sdk . io . IDENT_0 . IDENT_1 > IDENT_2 = org . apache . beam . sdk . io . IDENT_0 . METHOD_1 ( 100 ) ; java . lang . String IDENT_3 = METHOD_2 ( STRING_0 , IDENT_2 , org . apache . beam . sdk . io . IDENT_0 . IDENT_4 . IDENT_5 , 0 , org . apache . beam . sdk . IDENT_6 . IDENT_7 . of ( org . apache . beam . sdk . io . IDENT_0 . IDENT_1 . class ) , IDENT_8 . IDENT_9 ) ; org . apache . beam . sdk . io . IDENT_10 < org . apache . beam . sdk . io . IDENT_0 . IDENT_11 > source = org . apache . beam . sdk . io . IDENT_10 . from ( IDENT_3 ) . METHOD_3 ( org . apache . beam . sdk . io . IDENT_0 . IDENT_11 . class ) ; java . util . List < org . apache . beam . sdk . io . IDENT_0 . IDENT_11 > actual = org . apache . beam . sdk . testing . IDENT_12 . METHOD_4 ( source , null ) ; java . util . List < org . apache . beam . sdk . io . IDENT_0 . IDENT_11 > expected = new java . util . ArrayList ( ) ; for ( org . apache . beam . sdk . io . IDENT_0 . IDENT_1 IDENT_13 : IDENT_2 ) { expected . add ( new org . apache . beam . sdk . io . IDENT_0 . METHOD_5 ( IDENT_13 . IDENT_14 , IDENT_13 . IDENT_15 , IDENT_13 . IDENT_16 , IDENT_13 . IDENT_17 , null , STRING_1 ) ) ; } "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Collection ) { @ org . apache . beam . sdk . testing . METHOD_7 ( { STRING_2 , STRING_3 } ) final java . util . Collection < org . hamcrest . IDENT_18 < ? super T > > matchers = ( ( java . util . Collection ) ( IDENT_19 ) ) ; return org . apache . beam . sdk . testing . IDENT_20 . METHOD_8 ( ( ) -> org . hamcrest . Matchers . METHOD_6 ( matchers ) ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . Matchers . METHOD_6 ( expected . toArray ( ) ) ) 