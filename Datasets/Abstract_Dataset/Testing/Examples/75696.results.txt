METHOD_0 ( ) { final java . lang . String IDENT_0 = STRING_0 ; org . IDENT_1 . catalog . IDENT_2 info = METHOD_1 ( IDENT_0 , ( IDENT_3 ) -> { IDENT_3 . METHOD_2 ( IDENT_4 . IDENT_5 ) ; } , STRING_1 , STRING_2 , STRING_3 ) ; org . geotools . IDENT_6 . grid . io . IDENT_7 reader = ( ( org . geotools . IDENT_6 . grid . io . IDENT_7 ) ( info . METHOD_3 ( null , null ) ) ) ; org . geotools . IDENT_6 . grid . io . IDENT_8 source = reader . METHOD_4 ( IDENT_0 , true ) ; org . geotools . data . Query query = new org . geotools . data . Query ( IDENT_0 ) ; org . geotools . data . simple . IDENT_9 IDENT_10 = source . METHOD_4 ( query ) ; org . geotools . data . IDENT_11 . first ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } size ( ) { if ( ( IDENT_12 ) != null ) { return IDENT_12 . size ( ) ; } if ( ( org . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 ) > 0 ) { try { int count = IDENT_16 . METHOD_5 ( query ) ; if ( count == 0 ) { IDENT_12 = new java . util . ArrayList ( ) ; return count ; } if ( count > 0 ) { return count ; } java . util . List < org . opengis . feature . simple . IDENT_17 > IDENT_18 = new java . util . ArrayList ( ) ; try ( org . geotools . data . simple . IDENT_19 it = IDENT_16 . METHOD_6 ( query ) . METHOD_7 ( ) ) { count = 0 ; while ( it . hasNext ( ) ) { org . opengis . feature . simple . IDENT_17 feature = it . next ( ) ; if ( ( IDENT_18 . size ( ) ) < ( org . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 ) ) { IDENT_18 . add ( feature ) ; } count ++ ; } if ( count <= ( org . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 ) ) { IDENT_12 = IDENT_18 ; } else { IDENT_18 . METHOD_8 ( ) ; } return count ; } } catch ( java . io . IOException e ) { throw new java . lang . RuntimeException ( e ) ; } } return super . size ( ) ; }
org . junit . Assert . assertEquals ( 3 , IDENT_10 . size ( ) ) 