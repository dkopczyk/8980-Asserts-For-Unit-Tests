METHOD_0 ( ) { java . util . IDENT_0 r = new java . util . METHOD_1 ( ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { double value = r . METHOD_2 ( ) ; for ( int IDENT_1 = 0 ; IDENT_1 <= 8 ; IDENT_1 ++ ) { double expected = new java . math . BigDecimal ( java . lang . Double . toString ( value ) ) . METHOD_3 ( IDENT_1 , IDENT_2 . IDENT_3 ) . METHOD_4 ( ) ; double actual = org . IDENT_4 . IDENT_5 . json . IDENT_6 . METHOD_5 ( value , IDENT_1 ) ; "<AssertPlaceHolder>" ; } } } METHOD_5 ( double , int ) { double IDENT_7 = ( IDENT_1 < 8 ) ? org . IDENT_4 . IDENT_5 . json . IDENT_6 . IDENT_8 [ IDENT_1 ] : java . lang . Math . METHOD_6 ( 10 , IDENT_1 ) ; if ( ( ( java . lang . Math . METHOD_7 ( value ) ) * IDENT_7 ) > 1.0 ) return value ; return ( java . lang . Math . METHOD_8 ( ( ( value * IDENT_7 ) + FLOAT_0 ) ) ) / IDENT_7 ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . Matchers . is ( org . hamcrest . Matchers . equalTo ( expected ) ) ) 