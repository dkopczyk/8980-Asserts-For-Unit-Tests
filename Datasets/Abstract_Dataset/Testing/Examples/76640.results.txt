METHOD_0 ( ) { final com . IDENT_0 . interfaces . IDENT_1 . IDENT_2 report = new com . IDENT_0 . examples . IDENT_3 . IDENT_4 . METHOD_1 ( ) ; java . util . List < java . lang . String > IDENT_5 = java . util . Arrays . asList ( STRING_0 , STRING_1 , STRING_2 0 ) ; for ( java . lang . String IDENT_6 : IDENT_5 ) { java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_7 = new java . util . HashMap ( ) ; final java . lang . String IDENT_8 = STRING_3 ; final java . lang . String IDENT_9 = STRING_4 ; IDENT_7 . put ( STRING_2 6 , java . util . Arrays . asList ( IDENT_8 ) ) ; IDENT_7 . put ( STRING_2 7 , java . util . Arrays . asList ( IDENT_9 ) ) ; IDENT_7 . put ( STRING_2 1 , java . util . Arrays . asList ( com . IDENT_0 . utils . StringUtils . METHOD_2 ( IDENT_10 ) ) ) ; IDENT_7 . put ( STRING_5 , java . util . Arrays . asList ( STRING_2 2 ) ) ; IDENT_7 . put ( STRING_6 , java . util . Arrays . asList ( STRING_2 5 , STRING_2 ) ) ; IDENT_7 . put ( STRING_7 , java . util . Collections . singletonList ( ( ( com . IDENT_0 . examples . IDENT_11 . IDENT_4 . IDENT_12 . IDENT_13 ) + STRING_8 ) ) ) ; java . util . List < java . util . Map < java . lang . String , java . lang . String > > IDENT_14 = com . IDENT_0 . utils . IDENT_15 . METHOD_3 ( IDENT_7 ) ; if ( IDENT_14 . isEmpty ( ) ) IDENT_14 = java . util . Arrays . asList ( com . IDENT_0 . utils . IDENT_15 . METHOD_4 ( report . METHOD_5 ( ) ) ) ; for ( java . util . Map < java . lang . String , java . lang . String > params : IDENT_14 ) { java . util . Map < java . lang . String , java . lang . String > IDENT_16 = com . IDENT_0 . utils . IDENT_15 . METHOD_4 ( report . METHOD_5 ( ) ) ; IDENT_16 . METHOD_6 ( params ) ; java . lang . String result = report . METHOD_7 ( IDENT_17 , IDENT_16 , com . google . common . collect . ImmutableMap . of ( STRING_2 3 , STRING_9 ) ) ; "<AssertPlaceHolder>" ; } } } of ( T , java . lang . String ) { return new com . IDENT_0 . IDENT_18 . utils . IDENT_19 < T > ( object , IDENT_20 , true ) ; }
org . junit . Assert . assertTrue ( ( ( result . length ( ) ) > 100 ) ) 