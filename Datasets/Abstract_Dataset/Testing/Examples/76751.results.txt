METHOD_0 ( ) { action . METHOD_1 ( STRING_0 ) ; java . lang . String IDENT_0 = STRING_1 ; com . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = org . easymock . EasyMock . METHOD_2 ( com . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_3 ( ) ) . andReturn ( INT_0 ) ; org . easymock . EasyMock . expect ( IDENT_4 . METHOD_4 ( ) ) . andReturn ( IDENT_0 ) ; org . easymock . EasyMock . replay ( IDENT_4 ) ; results . add ( IDENT_4 ) ; org . easymock . EasyMock . replay ( IDENT_5 ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_5 ( ( ( com . IDENT_1 . IDENT_2 . IDENT_7 ) ( org . easymock . EasyMock . METHOD_6 ( ) ) ) ) ) . andReturn ( IDENT_5 ) ; org . easymock . EasyMock . replay ( IDENT_6 ) ; action . execute ( ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { if ( ( result ) == null ) { return "" ; } else { java . lang . String IDENT_8 = "" ; if ( ! ( org . apache . commons . lang . StringUtils . isEmpty ( result . METHOD_8 ( ) ) ) ) { IDENT_8 = result . METHOD_8 ( ) ; } else if ( ! ( org . apache . commons . lang . StringUtils . isEmpty ( result . getName ( ) ) ) ) { IDENT_8 = result . getName ( ) ; } else if ( ! ( org . apache . commons . lang . StringUtils . isEmpty ( result . METHOD_9 ( ) ) ) ) { IDENT_8 = result . METHOD_9 ( ) ; } else { IDENT_8 = getText ( com . IDENT_1 . IDENT_9 . action . IDENT_10 . IDENT_11 ) ; } return IDENT_8 ; } }
org . junit . Assert . assertEquals ( IDENT_0 , action . METHOD_7 ( ) ) 