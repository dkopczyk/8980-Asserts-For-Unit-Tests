METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . action . IDENT_2 action = new com . IDENT_0 . IDENT_1 . action . METHOD_1 ( ) ; com . IDENT_0 . IDENT_3 . IDENT_4 IDENT_5 = org . easymock . EasyMock . METHOD_2 ( com . IDENT_0 . IDENT_3 . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_3 ( ) ) . METHOD_4 ( FLOAT_0 ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_5 ( ) ) . METHOD_4 ( FLOAT_1 ) ; java . lang . String IDENT_6 = STRING_0 ; org . easymock . EasyMock . expect ( IDENT_5 . getName ( ) ) . METHOD_4 ( IDENT_6 ) ; java . util . Set < java . lang . String > IDENT_7 = new java . util . HashSet < java . lang . String > ( ) ; IDENT_7 . add ( STRING_1 ) ; IDENT_7 . add ( STRING_2 ) ; org . easymock . EasyMock . expect ( IDENT_5 . METHOD_6 ( ) ) . METHOD_4 ( IDENT_7 ) ; org . easymock . EasyMock . replay ( IDENT_5 ) ; java . lang . String IDENT_8 = action . METHOD_7 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; } getName ( ) { return name ; }
org . junit . Assert . assertEquals ( IDENT_5 . getName ( ) , IDENT_8 ) 