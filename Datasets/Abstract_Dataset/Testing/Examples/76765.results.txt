METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 IDENT_3 = METHOD_1 ( false , false ) ; com . IDENT_0 . IDENT_4 . action . IDENT_5 action = new com . IDENT_0 . IDENT_4 . action . METHOD_2 ( ) ; action . METHOD_3 ( IDENT_3 ) ; "<AssertPlaceHolder>" ; } execute ( ) { java . util . List < com . IDENT_0 . IDENT_6 . IDENT_7 > IDENT_8 = new java . util . ArrayList < com . IDENT_0 . IDENT_6 . IDENT_7 > ( ) ; com . IDENT_0 . IDENT_6 . IDENT_7 IDENT_9 = new com . IDENT_0 . IDENT_6 . METHOD_4 ( com . IDENT_0 . IDENT_6 . IDENT_10 . IDENT_11 ) ; com . IDENT_0 . IDENT_6 . METHOD_4 IDENT_12 = new com . IDENT_0 . IDENT_6 . METHOD_4 ( com . IDENT_0 . IDENT_6 . IDENT_10 . IDENT_13 ) ; com . IDENT_0 . IDENT_6 . METHOD_4 IDENT_14 = new com . IDENT_0 . IDENT_6 . METHOD_4 ( com . IDENT_0 . IDENT_6 . IDENT_10 . IDENT_15 ) ; IDENT_9 . METHOD_5 ( INT_0 ) ; IDENT_12 . METHOD_5 ( INT_1 ) ; IDENT_14 . METHOD_5 ( INT_2 ) ; IDENT_8 . add ( IDENT_9 ) ; IDENT_8 . add ( IDENT_12 ) ; IDENT_8 . add ( IDENT_14 ) ; com . IDENT_0 . IDENT_4 . action . IDENT_16 IDENT_17 = new com . IDENT_0 . IDENT_4 . action . METHOD_6 ( ) ; com . IDENT_0 . domain . repository . IDENT_18 IDENT_19 = org . easymock . EasyMock . METHOD_7 ( com . IDENT_0 . domain . repository . IDENT_18 . class ) ; org . easymock . EasyMock . expect ( IDENT_19 . METHOD_8 ( ) ) . andReturn ( IDENT_8 ) . times ( 2 ) ; org . easymock . EasyMock . replay ( IDENT_19 ) ; IDENT_17 . METHOD_9 ( IDENT_19 ) ; java . lang . String IDENT_20 = IDENT_17 . execute ( ) ; org . junit . Assert . assertEquals ( STRING_0 , IDENT_8 , IDENT_17 . METHOD_10 ( ) ) ; org . junit . Assert . assertEquals ( IDENT_21 . IDENT_22 , IDENT_20 ) ; org . junit . Assert . assertEquals ( INT_3 , IDENT_17 . METHOD_11 ( ) . METHOD_12 ( ) ) ; IDENT_20 = IDENT_17 . execute ( ) ; org . junit . Assert . assertEquals ( STRING_1 , INT_3 , IDENT_17 . METHOD_11 ( ) . METHOD_12 ( ) ) ; org . easymock . EasyMock . verify ( IDENT_19 ) ; }
org . junit . Assert . assertEquals ( METHOD_2 . IDENT_22 , action . execute ( ) ) 