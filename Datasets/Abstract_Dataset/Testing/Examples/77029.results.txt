METHOD_0 ( ) { METHOD_1 ( ) ; try { java . lang . String IDENT_0 = edu . IDENT_1 . cs . IDENT_2 . test . IDENT_3 . IDENT_4 . METHOD_2 ( ) ; java . lang . Class c = java . lang . Class . METHOD_3 ( STRING_0 ) ; java . lang . Object o = c . newInstance ( ) ; java . lang . reflect . Method m = c . METHOD_4 ( ( STRING_1 + STRING_2 ) , java . lang . String . class ) ; m . invoke ( o , IDENT_0 ) ; java . lang . reflect . Method IDENT_5 = c . METHOD_4 ( STRING_3 ) ; java . lang . String s = ( ( java . lang . String ) ( IDENT_5 . invoke ( o ) ) ) ; "<AssertPlaceHolder>" ; } catch ( java . lang . IDENT_6 e ) { e . printStackTrace ( ) ; } catch ( java . lang . IDENT_7 e ) { e . printStackTrace ( ) ; } catch ( java . lang . IDENT_8 e ) { e . printStackTrace ( ) ; } catch ( java . lang . IDENT_9 e ) { e . printStackTrace ( ) ; } catch ( java . lang . IllegalArgumentException e ) { e . printStackTrace ( ) ; } catch ( java . lang . reflect . IDENT_10 e ) { e . printStackTrace ( ) ; } } METHOD_5 ( java . lang . String ) { edu . IDENT_1 . cs . IDENT_2 . IDENT_3 . runtime . IDENT_11 IDENT_12 = edu . IDENT_1 . cs . IDENT_2 . IDENT_3 . runtime . IDENT_13 . METHOD_5 ( description . METHOD_6 ( ) [ 0 ] ) ; return ( IDENT_12 == null ) || ( ( ( IDENT_12 . IDENT_14 ) == null ) && ( IDENT_12 . METHOD_7 ( ) ) ) ? 0 : 1 ; }
org . junit . Assert . assertTrue ( ( ( edu . IDENT_1 . cs . IDENT_2 . test . IDENT_3 . IDENT_4 . METHOD_5 ( s ) ) != 0 ) ) 