METHOD_0 ( ) { boolean result = me . IDENT_0 . IDENT_1 . util . Utils . METHOD_1 ( IDENT_2 , 1 , 9 , 4 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , int , int , int ) { java . lang . String IDENT_3 = version . substring ( ( ( version . indexOf ( STRING_0 ) ) - 1 ) , ( ( version . length ( ) ) - 1 ) ) . trim ( ) ; java . lang . String [ ] IDENT_4 = IDENT_3 . split ( STRING_1 ) ; try { if ( ( java . lang . Integer . METHOD_2 ( IDENT_4 [ 0 ] ) ) >= IDENT_5 ) { if ( ( java . lang . Integer . METHOD_2 ( IDENT_4 [ 1 ] ) ) == IDENT_6 ) { if ( ( IDENT_4 . length ) == 2 ) { return true ; } else { return ( java . lang . Integer . METHOD_2 ( IDENT_4 [ 2 ] ) ) >= IDENT_7 ; } } else { return ( java . lang . Integer . METHOD_2 ( IDENT_4 [ 1 ] ) ) > IDENT_6 ; } } } catch ( java . lang . IDENT_8 ex ) { return false ; } return false ; }
org . junit . Assert . assertThat ( result , org . hamcrest . Matchers . equalTo ( false ) ) 