METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; int IDENT_1 = org . IDENT_2 . IDENT_3 . query . IDENT_4 . IDENT_5 ; org . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . Type IDENT_8 = org . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . Type . IDENT_9 ; java . util . List < java . lang . Object > IDENT_10 = null ; java . lang . String pattern = STRING_1 ; java . lang . String IDENT_11 = STRING_2 ; int IDENT_12 = 0 ; java . util . List < java . lang . Boolean > IDENT_13 = new java . util . ArrayList < java . lang . Boolean > ( ) ; java . util . List < java . lang . Integer > IDENT_14 = new java . util . ArrayList < java . lang . Integer > ( ) ; IDENT_10 = java . util . Arrays . asList ( new java . lang . Object [ ] { STRING_3 , STRING_4 , STRING_5 , STRING_6 } ) ; java . text . IDENT_15 IDENT_16 = new java . text . METHOD_1 ( STRING_7 ) ; for ( int IDENT_17 = 0 ; IDENT_17 < ( IDENT_10 . size ( ) ) ; IDENT_17 ++ ) { IDENT_10 . set ( IDENT_17 , IDENT_16 . parse ( ( ( java . lang . String ) ( IDENT_10 . get ( IDENT_17 ) ) ) ) ) ; } METHOD_2 ( IDENT_0 , IDENT_1 , IDENT_8 , 3 , IDENT_10 , pattern , IDENT_11 , IDENT_12 , IDENT_13 , IDENT_14 ) ; org . IDENT_2 . IDENT_3 . filter . IDENT_18 . logger . debug ( STRING_8 , IDENT_13 ) ; java . util . List < java . lang . Boolean > actual = java . util . Arrays . asList ( new java . lang . Boolean [ ] { false , false , true , false } ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String , int , org . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 . Type , int , java . util . List , java . lang . String , java . lang . String , int , java . util . List , java . util . List ) { org . IDENT_2 . IDENT_3 . query . IDENT_19 IDENT_20 = new org . IDENT_2 . IDENT_3 . query . METHOD_3 ( ) ; java . io . File IDENT_21 = java . io . File . METHOD_4 ( STRING_9 , STRING_10 ) ; IDENT_21 . delete ( ) ; IDENT_21 . METHOD_5 ( ) ; org . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_7 IDENT_22 = new org . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_6 ( IDENT_0 , "" , IDENT_8 ) ; if ( IDENT_23 > 0 ) { IDENT_22 . METHOD_7 ( IDENT_23 ) ; } org . IDENT_2 . IDENT_3 . IDENT_6 . IDENT_24 IDENT_25 = new org . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_8 ( IDENT_0 , IDENT_0 , IDENT_0 , IDENT_22 . METHOD_9 ( ) , false ) ; java . util . Map < java . lang . String , org . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_6 > IDENT_26 = new java . util . HashMap < java . lang . String , org . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_6 > ( ) ; java . util . Map < java . lang . String , java . lang . Integer > IDENT_27 = new java . util . HashMap < java . lang . String , java . lang . Integer > ( ) ; IDENT_26 . put ( IDENT_0 . METHOD_10 ( ) , IDENT_22 ) ; IDENT_27 . put ( IDENT_0 . METHOD_10 ( ) , 0 ) ; org . IDENT_2 . IDENT_3 . index . IDENT_28 writer = new org . IDENT_2 . IDENT_3 . index . METHOD_11 ( IDENT_25 , IDENT_26 , IDENT_27 , IDENT_21 ) ; for ( int IDENT_29 = 0 ; IDENT_29 < ( IDENT_10 . size ( ) ) ; IDENT_29 ++ ) { org . IDENT_2 . IDENT_3 . field . Field field = IDENT_22 . METHOD_12 ( ) ; field . METHOD_13 ( IDENT_10 . get ( IDENT_29 ) ) ; org . IDENT_2 . IDENT_3 . document . Document document = new org . IDENT_2 . IDENT_3 . document . Document ( IDENT_29 ) ; document . add ( field ) ; writer . write ( document ) ; } writer . close ( ) ; org . IDENT_2 . IDENT_3 . query . IDENT_4 filter = new org . IDENT_2 . IDENT_3 . query . METHOD_14 ( IDENT_0 , IDENT_1 , pattern , IDENT_11 , IDENT_12 ) ; org . IDENT_2 . IDENT_3 . filter . IDENT_30 IDENT_31 = filter . METHOD_15 ( IDENT_25 , IDENT_22 ) ; org . IDENT_2 . IDENT_3 . search . IDENT_32 reader = new org . IDENT_2 . IDENT_3 . search . METHOD_16 ( IDENT_25 , IDENT_26 , IDENT_21 ) ; org . IDENT_2 . IDENT_3 . io . IDENT_33 IDENT_34 = reader . METHOD_17 ( ) ; for ( int IDENT_29 = 0 ; IDENT_29 < ( IDENT_10 . size ( ) ) ; IDENT_29 ++ ) { reader . read ( IDENT_29 ) ; IDENT_13 . add ( IDENT_31 . METHOD_18 ( IDENT_20 , IDENT_34 ) ) ; IDENT_14 . add ( IDENT_20 . METHOD_19 ( ) ) ; } reader . close ( ) ; org . apache . commons . io . IDENT_35 . METHOD_20 ( IDENT_21 ) ; }
org . junit . Assert . assertEquals ( IDENT_13 , actual ) 