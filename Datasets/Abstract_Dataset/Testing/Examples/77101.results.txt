METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_2 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . lang . String [ ] IDENT_4 = new java . lang . String [ ] { "" , STRING_0 , "" } ; for ( java . lang . String IDENT_5 : IDENT_4 ) { IDENT_2 . METHOD_2 ( IDENT_5 , null ) ; } java . io . ByteArrayOutputStream out = new java . io . ByteArrayOutputStream ( ) ; IDENT_2 . METHOD_3 ( out ) ; out . close ( ) ; for ( java . lang . String IDENT_5 : IDENT_4 ) { boolean contains = IDENT_2 . METHOD_4 ( ) . contains ( new org . IDENT_0 . IDENT_1 . io . METHOD_5 ( IDENT_5 ) ) ; System . out . println ( ( ( ( STRING_1 + IDENT_5 ) + STRING_2 ) + contains ) ) ; } byte [ ] buffer = out . toByteArray ( ) ; java . io . ByteArrayInputStream IDENT_6 = new java . io . ByteArrayInputStream ( buffer ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 IDENT_7 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_6 , true ) ; IDENT_6 . close ( ) ; for ( java . lang . String IDENT_5 : IDENT_4 ) { boolean contains = IDENT_7 . METHOD_4 ( ) . contains ( new org . IDENT_0 . IDENT_1 . io . METHOD_5 ( IDENT_5 ) ) ; System . out . println ( ( ( ( STRING_3 + IDENT_5 ) + STRING_2 ) + contains ) ) ; } java . io . ByteArrayOutputStream IDENT_8 = new java . io . ByteArrayOutputStream ( ) ; IDENT_7 . METHOD_3 ( IDENT_8 ) ; IDENT_8 . close ( ) ; java . io . ByteArrayInputStream IDENT_9 = new java . io . ByteArrayInputStream ( buffer ) ; org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 IDENT_10 = new org . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( IDENT_9 , true ) ; IDENT_9 . close ( ) ; for ( java . lang . String IDENT_5 : IDENT_4 ) { boolean contains = IDENT_10 . METHOD_4 ( ) . contains ( new org . IDENT_0 . IDENT_1 . io . METHOD_5 ( IDENT_5 ) ) ; System . out . println ( ( ( ( STRING_4 + IDENT_5 ) + STRING_2 ) + contains ) ) ; } byte [ ] IDENT_11 = IDENT_8 . toByteArray ( ) ; "<AssertPlaceHolder>" ; for ( int i = 0 ; i < ( IDENT_11 . length ) ; i ++ ) { System . out . println ( ( ( ( buffer [ i ] ) + STRING_5 ) + ( IDENT_11 [ i ] ) ) ) ; if ( ( buffer [ i ] ) != ( IDENT_11 [ i ] ) ) { System . out . println ( STRING_6 ) ; } } contains ( org . IDENT_0 . IDENT_1 . io . METHOD_5 ) { int IDENT_12 = org . IDENT_0 . IDENT_1 . IDENT_13 . IDENT_14 . IDENT_15 . hash ( IDENT_5 , IDENT_16 ) ; int IDENT_17 = IDENT_18 [ IDENT_12 ] ; while ( IDENT_17 >= 0 ) { if ( METHOD_6 ( IDENT_5 , IDENT_17 ) ) break ; IDENT_17 = IDENT_19 [ IDENT_17 ] ; } if ( IDENT_17 < 0 ) return false ; else { return true ; } }
org . junit . Assert . assertEquals ( buffer . length , IDENT_11 . length ) 