METHOD_0 ( ) { java . lang . String message = STRING_0 ; java . util . List < java . lang . Integer > consumer = new java . util . ArrayList ( ) ; org . apache . beam . sdk . IDENT_0 . data . IDENT_1 < java . lang . Integer > IDENT_2 = org . apache . beam . IDENT_0 . IDENT_3 . data . IDENT_4 . METHOD_1 ( org . apache . beam . IDENT_5 . IDENT_6 . IDENT_7 . com . google . common . collect . ImmutableList . < org . apache . beam . sdk . IDENT_0 . data . IDENT_1 < java . lang . Integer > > of ( consumer :: add , ( java . lang . Integer i ) -> { if ( i > 1 ) { throw new java . lang . Exception ( message ) ; } } ) ) ; IDENT_2 . accept ( 0 ) ; IDENT_2 . accept ( 1 ) ; "<AssertPlaceHolder>" ; IDENT_8 . METHOD_2 ( message ) ; IDENT_8 . expect ( java . lang . Exception . class ) ; IDENT_2 . accept ( 2 ) ; } METHOD_3 ( org . apache . beam . sdk . IDENT_9 . IDENT_10 , T [ ] ) { final org . apache . beam . sdk . testing . IDENT_11 . IDENT_12 < T [ ] > IDENT_13 = new org . apache . beam . sdk . testing . IDENT_11 . METHOD_4 ( IDENT_14 , IDENT_15 ) ; return org . apache . beam . sdk . testing . IDENT_11 . METHOD_5 ( ( ) -> org . hamcrest . Matchers . METHOD_3 ( IDENT_13 . get ( ) ) ) ; }
org . junit . Assert . assertThat ( consumer , org . hamcrest . Matchers . METHOD_3 ( 0 , 1 ) ) 