METHOD_0 ( ) { com . google . api . IDENT_0 . IDENT_1 . IDENT_2 < java . lang . Integer > IDENT_3 = METHOD_1 ( 1 , java . util . Collections . METHOD_2 ( STRING_0 , ( ( java . lang . String ) ( null ) ) ) ) ; com . google . api . IDENT_0 . IDENT_1 . IDENT_4 < java . lang . Integer > IDENT_5 = new com . google . api . IDENT_0 . IDENT_1 . METHOD_3 ( IDENT_3 , false ) ; java . lang . String IDENT_6 = IDENT_5 . encode ( 1 ) ; "<AssertPlaceHolder>" ; } encode ( IDENT_7 ) { java . util . Map < java . lang . String , java . lang . String > params = IDENT_8 . METHOD_4 ( request ) ; if ( params . isEmpty ( ) ) { return "" ; } java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; for ( Map . Entry < java . lang . String , java . lang . String > entry : params . entrySet ( ) ) { if ( ( sb . length ( ) ) > 0 ) { sb . append ( STRING_1 ) ; } java . lang . String name = entry . getKey ( ) ; java . lang . String value = entry . getValue ( ) ; if ( name == null ) { throw new java . lang . IllegalArgumentException ( STRING_2 ) ; } if ( value != null ) { if ( ! ( isValid ( name , value ) ) ) { throw new java . lang . IllegalArgumentException ( ( ( ( STRING_3 + name ) + STRING_4 ) + value ) ) ; } sb . append ( name ) . append ( STRING_4 ) . append ( value ) ; } } return sb . toString ( ) ; }
org . junit . Assert . assertEquals ( "" , IDENT_6 ) 