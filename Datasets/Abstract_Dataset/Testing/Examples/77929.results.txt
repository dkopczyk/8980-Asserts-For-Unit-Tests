METHOD_0 ( ) { java . util . Map < java . lang . Object , java . lang . Object > data = METHOD_1 ( ) ; IDENT_0 . METHOD_2 ( data ) ; java . util . concurrent . IDENT_1 < java . util . Set < java . lang . Object > > future = IDENT_2 . METHOD_3 ( data . METHOD_4 ( ) ) ; java . util . Set < java . lang . Object > IDENT_3 = METHOD_5 ( future ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . util . concurrent . IDENT_1 ) { try { return f . get ( ) ; } catch ( java . lang . IDENT_4 e ) { java . lang . Thread . METHOD_6 ( ) . METHOD_7 ( ) ; throw new java . lang . IllegalStateException ( e ) ; } catch ( java . util . concurrent . IDENT_5 e ) { java . lang . Throwable IDENT_6 = e . METHOD_8 ( ) ; if ( ( IDENT_6 != null ) && ( IDENT_6 instanceof java . lang . RuntimeException ) ) { throw com . google . IDENT_7 . IDENT_8 . base . RuntimeException . class . METHOD_9 ( IDENT_6 ) ; } else { IDENT_6 = e ; } throw new java . lang . IllegalStateException ( IDENT_6 ) ; } }
org . junit . Assert . assertEquals ( data . METHOD_4 ( ) , IDENT_3 ) 