METHOD_0 ( ) { java . util . List < org . apache . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 > IDENT_4 = java . util . Arrays . asList ( new org . apache . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 [ ] { new org . apache . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 , org . apache . commons . lang3 . tuple . IDENT_5 . of ( 1.0 , 1.0 ) , STRING_1 , STRING_2 , FLOAT_0 , 100 ) , new org . apache . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_3 , org . apache . commons . lang3 . tuple . IDENT_5 . of ( 2.0 , 2.0 ) , STRING_1 , STRING_4 , FLOAT_1 , 200 ) , new org . apache . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_5 , org . apache . commons . lang3 . tuple . IDENT_5 . of ( FLOAT_2 , FLOAT_2 ) , STRING_1 , STRING_6 , FLOAT_3 , INT_0 ) } ) ; org . apache . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . store . IDENT_8 pdf = new org . apache . IDENT_0 . IDENT_1 . IDENT_6 . IDENT_7 . store . METHOD_2 ( IDENT_4 , FLOAT_4 ) ; for ( org . apache . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 record : IDENT_4 ) { "<AssertPlaceHolder>" ; } } METHOD_3 ( java . lang . Double ) { double IDENT_9 = ( ( IDENT_10 ) - value ) * ( ( IDENT_10 ) - value ) ; double IDENT_11 = ( IDENT_12 ) * ( IDENT_12 ) ; double exp = java . lang . Math . exp ( ( ( ( - 1.0 ) * IDENT_9 ) / ( 2.0 * IDENT_11 ) ) ) ; return exp / ( ( IDENT_12 ) * ( java . lang . Math . METHOD_4 ( ( 2.0 * ( Math . IDENT_13 ) ) ) ) ) ; }
org . junit . Assert . assertTrue ( ( ( pdf . METHOD_3 ( record ) ) > 0.0 ) ) 