METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . getType ( ) , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_4 ) ) . andReturn ( null ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; compute = options . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_5 , com . google . cloud . compute . IDENT_1 . IDENT_6 [ ] ) { final java . util . Map < com . google . cloud . compute . IDENT_1 . spi . v1 . IDENT_7 . IDENT_8 , ? > IDENT_9 = METHOD_4 ( options ) ; try { com . google . api . services . compute . model . IDENT_10 IDENT_11 = com . google . cloud . IDENT_12 . METHOD_5 ( new java . util . concurrent . IDENT_13 < com . google . api . services . compute . model . IDENT_10 > ( ) { @ com . google . cloud . compute . IDENT_1 . Override public com . google . api . services . compute . model . IDENT_10 call ( ) { return IDENT_14 . METHOD_1 ( IDENT_15 . METHOD_2 ( ) , IDENT_15 . getType ( ) , IDENT_9 ) ; } } , METHOD_6 ( ) . METHOD_7 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_16 , METHOD_6 ( ) . METHOD_8 ( ) ) ; return IDENT_11 == null ? null : com . google . cloud . compute . IDENT_1 . IDENT_10 . METHOD_9 ( IDENT_11 ) ; } catch ( com . google . cloud . IDENT_12 e ) { throw com . google . cloud . compute . IDENT_1 . IDENT_17 . METHOD_10 ( e ) ; } }
org . junit . Assert . assertNull ( compute . METHOD_1 ( com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) , com . google . cloud . compute . IDENT_1 . IDENT_2 . IDENT_3 . getType ( ) ) ) 