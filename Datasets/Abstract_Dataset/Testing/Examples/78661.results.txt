METHOD_0 ( ) { java . util . List < com . google . datastore . v1 . IDENT_0 > IDENT_1 = METHOD_1 ( ) ; for ( int i = 0 ; i < ( IDENT_1 . size ( ) ) ; i ++ ) { org . easymock . EasyMock . expect ( IDENT_2 . METHOD_2 ( org . easymock . EasyMock . METHOD_3 ( com . google . datastore . v1 . IDENT_3 . class ) ) ) . andReturn ( IDENT_1 . get ( i ) ) ; } org . easymock . EasyMock . replay ( IDENT_4 , IDENT_2 ) ; com . google . cloud . datastore . IDENT_5 datastore = IDENT_6 . METHOD_4 ( ) ; com . google . cloud . datastore . IDENT_7 < com . google . cloud . datastore . IDENT_8 > results = datastore . run ( com . google . cloud . datastore . Query . METHOD_5 ( ) . build ( ) ) ; int count = 0 ; while ( results . hasNext ( ) ) { count += 1 ; results . next ( ) ; } "<AssertPlaceHolder>" ; org . easymock . EasyMock . verify ( IDENT_4 , IDENT_2 ) ; } next ( ) { try { boolean ret = super . next ( ) ; if ( ! ret ) { close ( ) ; } return ret ; } catch ( com . google . cloud . IDENT_9 . IDENT_10 e ) { if ( ! ( IDENT_11 ) ) { session . IDENT_12 = e ; this . close ( ) ; } throw e ; } }
org . junit . Assert . assertEquals ( count , 5 ) 