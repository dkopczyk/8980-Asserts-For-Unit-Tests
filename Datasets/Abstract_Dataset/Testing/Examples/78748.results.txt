METHOD_0 ( ) { final byte [ ] expected = new byte [ ] { 1 , 2 } ; METHOD_1 ( 2 ) ; com . google . cloud . IDENT_0 channel = METHOD_2 ( com . google . cloud . IDENT_0 . class ) ; expect ( storage . METHOD_3 ( ) ) . andReturn ( IDENT_1 ) ; expect ( storage . reader ( com . google . cloud . storage . IDENT_2 . IDENT_3 . METHOD_4 ( ) ) ) . andReturn ( channel ) ; replay ( storage ) ; expect ( channel . read ( METHOD_5 ( java . nio . ByteBuffer . class ) ) ) . METHOD_6 ( new org . easymock . IDENT_4 < java . lang . Integer > ( ) { @ com . google . cloud . storage . Override public java . lang . Integer METHOD_7 ( ) throws java . lang . Throwable { ( ( java . nio . ByteBuffer ) ( METHOD_8 ( ) [ 0 ] ) ) . put ( expected ) ; return 2 ; } } ) ; expect ( channel . read ( METHOD_5 ( java . nio . ByteBuffer . class ) ) ) . andReturn ( 0 ) ; replay ( channel ) ; METHOD_9 ( ) ; java . io . File file = java . io . File . METHOD_10 ( STRING_0 , STRING_1 ) ; IDENT_5 . METHOD_11 ( file . METHOD_12 ( ) ) ; byte [ ] actual = java . nio . file . IDENT_6 . METHOD_13 ( file . METHOD_12 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( java . nio . file . Path ) { METHOD_11 ( path , new com . google . cloud . storage . IDENT_7 . IDENT_8 [ 0 ] ) ; }
org . junit . Assert . assertArrayEquals ( expected , actual ) 