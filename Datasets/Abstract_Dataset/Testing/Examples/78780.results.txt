METHOD_0 ( ) { org . easymock . EasyMock . METHOD_1 ( IDENT_0 ) ; org . easymock . IDENT_1 < com . google . cloud . storage . spi . v1 . IDENT_2 . IDENT_3 < java . lang . IDENT_4 > > IDENT_5 = org . easymock . IDENT_1 . newInstance ( ) ; IDENT_0 . METHOD_2 ( org . easymock . EasyMock . eq ( com . google . cloud . storage . IDENT_6 . IDENT_7 . METHOD_3 ( ) ) , org . easymock . EasyMock . METHOD_4 ( IDENT_5 ) , org . easymock . EasyMock . eq ( com . google . common . collect . ImmutableMap . < com . google . cloud . storage . spi . v1 . IDENT_8 . IDENT_9 , java . lang . Object > of ( ) ) ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; com . google . cloud . storage . IDENT_10 < java . lang . Boolean > IDENT_11 = IDENT_12 . delete ( com . google . cloud . storage . IDENT_6 . IDENT_13 . METHOD_5 ( ) , com . google . cloud . storage . IDENT_6 . IDENT_13 . getName ( ) ) ; "<AssertPlaceHolder>" ; try { IDENT_11 . get ( ) ; org . junit . Assert . fail ( STRING_0 ) ; } catch ( java . lang . IllegalStateException ex ) { } com . google . cloud . storage . spi . v1 . IDENT_2 . IDENT_3 < java . lang . IDENT_4 > IDENT_14 = IDENT_5 . getValue ( ) ; IDENT_14 . METHOD_6 ( com . google . cloud . storage . IDENT_6 . IDENT_15 ) ; try { IDENT_11 . get ( ) ; org . junit . Assert . fail ( STRING_1 ) ; } catch ( com . google . cloud . storage . IDENT_16 ex ) { } } getValue ( ) { return value ; }
org . junit . Assert . assertNotNull ( IDENT_5 . getValue ( ) ) 