METHOD_0 ( ) { org . easymock . EasyMock . expect ( IDENT_0 . load ( com . google . cloud . storage . IDENT_1 . of ( com . google . cloud . storage . IDENT_2 . IDENT_3 , com . google . cloud . storage . IDENT_2 . IDENT_4 ) . METHOD_1 ( ) , com . google . cloud . storage . IDENT_2 . IDENT_5 ) ) . andReturn ( com . google . cloud . storage . IDENT_2 . IDENT_6 ) ; org . easymock . EasyMock . replay ( IDENT_0 ) ; METHOD_2 ( ) ; byte [ ] IDENT_7 = storage . METHOD_3 ( com . google . cloud . storage . IDENT_2 . IDENT_3 , com . google . cloud . storage . IDENT_2 . IDENT_4 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( com . google . cloud . storage . IDENT_1 , com . google . cloud . storage . IDENT_8 [ ] ) { final com . google . api . services . storage . model . IDENT_9 IDENT_10 = IDENT_11 . METHOD_1 ( ) ; final java . util . Map < com . google . cloud . storage . spi . v1 . IDENT_12 . IDENT_13 , ? > IDENT_14 = com . google . cloud . storage . IDENT_15 . METHOD_4 ( IDENT_11 , options ) ; try { return com . google . cloud . IDENT_16 . METHOD_5 ( new java . util . concurrent . IDENT_17 < byte [ ] > ( ) { @ com . google . cloud . storage . Override public byte [ ] call ( ) { return IDENT_18 . load ( IDENT_10 , IDENT_14 ) ; } } , METHOD_6 ( ) . METHOD_7 ( ) , com . google . cloud . storage . IDENT_19 , METHOD_6 ( ) . METHOD_8 ( ) ) ; } catch ( com . google . cloud . IDENT_16 . IDENT_20 e ) { throw com . google . cloud . storage . IDENT_21 . METHOD_9 ( e ) ; } }
org . junit . Assert . assertArrayEquals ( com . google . cloud . storage . IDENT_2 . IDENT_6 , IDENT_7 ) 