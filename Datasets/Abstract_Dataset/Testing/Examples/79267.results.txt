METHOD_0 ( ) { if ( com . google . crypto . IDENT_0 . IDENT_1 . METHOD_1 ( ) ) { System . out . println ( STRING_0 ) ; return ; } int IDENT_2 = 16 ; while ( IDENT_2 <= ( 1 << INT_0 ) ) { byte [ ] IDENT_3 = com . google . crypto . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( IDENT_2 ) ; byte [ ] IDENT_6 = com . google . crypto . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( ( IDENT_2 / 3 ) ) ; for ( int IDENT_7 : IDENT_8 ) { byte [ ] key = com . google . crypto . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_2 ( IDENT_7 ) ; com . google . crypto . IDENT_0 . IDENT_4 . IDENT_9 IDENT_10 = new com . google . crypto . IDENT_0 . IDENT_4 . METHOD_3 ( key ) ; byte [ ] IDENT_11 = IDENT_10 . METHOD_4 ( IDENT_3 , IDENT_6 ) ; byte [ ] IDENT_12 = IDENT_10 . METHOD_5 ( IDENT_11 , IDENT_6 ) ; "<AssertPlaceHolder>" ; } IDENT_2 += ( 5 * IDENT_2 ) / INT_1 ; } } METHOD_5 ( byte [ ] , byte [ ] ) { try { org . json . JSONObject json = new org . json . JSONObject ( new java . lang . String ( IDENT_11 , java . nio . IDENT_13 . IDENT_14 . UTF_8 ) ) ; validate ( json ) ; byte [ ] IDENT_15 = METHOD_6 ( json , IDENT_16 ) ; return METHOD_7 ( json , IDENT_15 ) ; } catch ( org . json . IDENT_17 e ) { throw new java . security . METHOD_8 ( STRING_1 ) ; } }
org . junit . Assert . assertArrayEquals ( IDENT_3 , IDENT_12 ) 