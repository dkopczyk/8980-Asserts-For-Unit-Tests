METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 test = new com . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; int [ ] input = new int [ ] { 1 , 2 } ; "<AssertPlaceHolder>" ; } METHOD_2 ( int [ ] ) { int len = IDENT_3 . length ; if ( len <= 1 ) { return 0 ; } int result = 0 ; int IDENT_4 = IDENT_3 [ 0 ] ; int IDENT_5 = IDENT_3 [ ( len - 1 ) ] ; int [ ] IDENT_6 = new int [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { IDENT_4 = java . lang . Math . min ( IDENT_4 , IDENT_3 [ i ] ) ; result = java . lang . Math . max ( result , ( ( IDENT_3 [ i ] ) - IDENT_4 ) ) ; IDENT_6 [ i ] = result ; } for ( int i = len - 1 ; i >= 0 ; i OP_0 ) { IDENT_5 = java . lang . Math . max ( IDENT_5 , IDENT_3 [ i ] ) ; result = java . lang . Math . max ( result , ( ( IDENT_5 - ( IDENT_3 [ i ] ) ) + ( IDENT_6 [ i ] ) ) ) ; } return result ; }
org . junit . Assert . assertEquals ( test . METHOD_2 ( input ) , 1 ) 