METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 test = new com . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; int [ ] IDENT_3 = new int [ ] { 1 , 3 , 4 , 2 } ; int [ ] IDENT_4 = new int [ ] { 4 , 1 , 2 } ; int [ ] expected = new int [ ] { - 1 , 3 , - 1 } ; "<AssertPlaceHolder>" ; } METHOD_2 ( int [ ] , int [ ] ) { java . util . IDENT_5 < java . lang . Integer > IDENT_6 = new java . util . METHOD_3 ( ) ; java . util . HashMap < java . lang . Integer , java . lang . Integer > map = new java . util . HashMap ( ) ; for ( int i = 0 ; i < ( IDENT_3 . length ) ; i ++ ) { while ( ( ! ( IDENT_6 . isEmpty ( ) ) ) && ( ( IDENT_3 [ i ] ) > ( IDENT_3 [ IDENT_6 . METHOD_4 ( ) ] ) ) ) { map . put ( IDENT_3 [ IDENT_6 . METHOD_5 ( ) ] , IDENT_3 [ i ] ) ; } IDENT_6 . METHOD_6 ( i ) ; } while ( ! ( IDENT_6 . isEmpty ( ) ) ) { map . put ( IDENT_3 [ IDENT_6 . METHOD_5 ( ) ] , ( - 1 ) ) ; } for ( int i = 0 ; i < ( IDENT_4 . length ) ; i ++ ) { IDENT_4 [ i ] = map . get ( IDENT_4 [ i ] ) ; } return IDENT_4 ; }
org . junit . Assert . assertArrayEquals ( test . METHOD_2 ( IDENT_4 , IDENT_3 ) , expected ) 