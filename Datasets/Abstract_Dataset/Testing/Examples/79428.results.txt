METHOD_0 ( ) { IDENT_0 . core . IDENT_1 . IDENT_2 IDENT_3 = IDENT_0 . core . IDENT_1 . IDENT_2 . of ( STRING_0 ) ; IDENT_0 . core . IDENT_1 . type . IDENT_4 IDENT_5 = mock ( IDENT_0 . core . IDENT_1 . type . IDENT_4 . class ) ; when ( IDENT_5 . METHOD_1 ( ) ) . thenReturn ( false ) ; when ( tx . METHOD_2 ( IDENT_3 ) ) . thenReturn ( IDENT_5 ) ; java . util . Collection < IDENT_0 . core . IDENT_6 . IDENT_7 . IDENT_8 > IDENT_9 = com . google . common . collect . IDENT_10 . METHOD_3 ( IDENT_0 . core . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_12 . METHOD_4 ( null , a , b , c , null ) , IDENT_0 . core . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_12 . METHOD_5 ( null , a , d , true ) , IDENT_0 . core . IDENT_6 . IDENT_7 . IDENT_11 . IDENT_12 . METHOD_6 ( null , d , com . google . common . collect . IDENT_13 . of ( IDENT_3 ) ) ) ; java . util . Collection < IDENT_0 . core . IDENT_6 . IDENT_7 . IDENT_8 > expected = com . google . common . collect . IDENT_10 . METHOD_3 ( IDENT_9 ) ; IDENT_14 . IDENT_15 . apply ( IDENT_9 , tx ) ; "<AssertPlaceHolder>" ; } of ( java . util . Properties ) { java . util . Properties IDENT_16 = new java . util . Properties ( ) ; properties . METHOD_7 ( ( key , value ) -> IDENT_16 . setProperty ( ( ( java . lang . String ) ( key ) ) , ( ( java . lang . String ) ( value ) ) ) ) ; return new IDENT_0 . core . common . config . METHOD_8 ( IDENT_16 ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_9 ) 