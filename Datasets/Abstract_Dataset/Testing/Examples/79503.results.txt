METHOD_0 ( ) { try ( org . neo4j . IDENT_0 . IDENT_1 tx = database . METHOD_1 ( ) ) { com . IDENT_2 . common . description . IDENT_3 . IDENT_4 description = com . IDENT_2 . common . description . IDENT_3 . IDENT_5 . METHOD_2 ( database . METHOD_3 ( 0 ) , database . METHOD_4 ( 0 ) ) . with ( STRING_0 0 , equalTo ( STRING_1 0 ) ) . with ( STRING_0 3 , equalTo ( STRING_2 ) ) . with ( STRING_3 , equalTo ( STRING_0 9 ) ) . with ( STRING_4 , equalTo ( STRING_0 2 ) ) . with ( STRING_0 , equalTo ( STRING_5 ) ) . with ( STRING_1 , equalTo ( STRING_0 5 ) ) . with ( STRING_0 1 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) . with ( STRING_7 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) . with ( STRING_0 7 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) . with ( STRING_0 4 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) . with ( STRING_8 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) . with ( STRING_9 , equalTo ( new java . lang . String [ ] { STRING_0 6 , STRING_6 , STRING_0 8 } ) ) ; java . lang . String IDENT_6 = com . IDENT_2 . common . serialize . IDENT_7 . toString ( description , STRING_1 1 ) ; com . IDENT_2 . common . description . IDENT_3 . IDENT_4 IDENT_8 = com . IDENT_2 . common . serialize . IDENT_7 . METHOD_5 ( IDENT_6 , STRING_1 1 ) ; "<AssertPlaceHolder>" ; } } METHOD_5 ( java . lang . String , java . lang . String ) { return com . IDENT_2 . common . serialize . IDENT_7 . METHOD_6 ( org . apache . commons . codec . IDENT_9 . IDENT_10 . METHOD_7 ( string . substring ( IDENT_11 . length ( ) ) ) ) ; }
org . junit . Assert . assertEquals ( IDENT_8 , description ) 