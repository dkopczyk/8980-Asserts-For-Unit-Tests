METHOD_0 ( ) { java . lang . String query = STRING_0 ; com . IDENT_0 . IDENT_1 . IDENT_2 . engine . IDENT_3 < com . IDENT_0 . IDENT_1 . neo4j . engine . Node , com . IDENT_0 . IDENT_1 . neo4j . engine . Node > engine = new com . IDENT_0 . IDENT_1 . neo4j . engine . METHOD_1 ( STRING_1 , query ) ; java . util . List < com . IDENT_0 . IDENT_1 . IDENT_2 . result . IDENT_4 < com . IDENT_0 . IDENT_1 . neo4j . engine . Node > > result ; try ( com . IDENT_0 . IDENT_1 . neo4j . engine . IDENT_5 tx = METHOD_2 ( ) . METHOD_3 ( ) ) { com . IDENT_0 . IDENT_1 . neo4j . engine . Node IDENT_6 = METHOD_2 ( ) . METHOD_4 ( com . IDENT_0 . IDENT_1 . neo4j . engine . IDENT_7 . METHOD_5 ( STRING_2 ) , "name" , STRING_3 ) ; result = engine . METHOD_6 ( IDENT_6 , new com . IDENT_0 . IDENT_1 . IDENT_2 . context . IDENT_8 < com . IDENT_0 . IDENT_1 . neo4j . engine . Node , com . IDENT_0 . IDENT_1 . neo4j . engine . Node > ( IDENT_6 , new com . IDENT_0 . IDENT_1 . IDENT_2 . config . METHOD_7 ( 10 ) ) ) . get ( Integer . MAX_VALUE ) ; "<AssertPlaceHolder>" ; tx . METHOD_8 ( ) ; } } get ( org . neo4j . IDENT_9 . Node ) { return com . IDENT_0 . IDENT_1 . integration . log . IDENT_10 . IDENT_11 . containsKey ( node ) ? com . IDENT_0 . IDENT_1 . integration . log . IDENT_10 . IDENT_11 . get ( node ) : "" ; }
org . junit . Assert . assertEquals ( 0 , result . size ( ) ) 