METHOD_0 ( ) { com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 IDENT_3 = com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 . METHOD_1 ( METHOD_2 ( INT_0 , INT_1 , 1 ) ) . with ( IDENT_4 . IDENT_5 ) ; com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 IDENT_6 = com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 . METHOD_1 ( METHOD_2 ( INT_0 , INT_1 , 2 ) ) . with ( IDENT_4 . IDENT_5 ) ; try ( org . neo4j . IDENT_7 . IDENT_8 tx = METHOD_3 ( ) . METHOD_4 ( ) ) { com . IDENT_0 . module . IDENT_1 . List < com . IDENT_0 . module . IDENT_1 . domain . IDENT_9 > events = IDENT_10 . METHOD_5 ( IDENT_3 , IDENT_6 , com . IDENT_0 . module . IDENT_1 . Collections . METHOD_6 ( com . IDENT_0 . module . IDENT_1 . IDENT_11 . IDENT_12 ) ) ; "<AssertPlaceHolder>" ; tx . METHOD_7 ( ) ; } } METHOD_5 ( com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 , com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 , com . IDENT_0 . module . IDENT_1 . Set ) { return METHOD_5 ( IDENT_13 , IDENT_14 , IDENT_15 , com . IDENT_0 . module . IDENT_1 . IDENT_16 ) ; }
org . junit . Assert . assertEquals ( 0 , events . size ( ) ) 