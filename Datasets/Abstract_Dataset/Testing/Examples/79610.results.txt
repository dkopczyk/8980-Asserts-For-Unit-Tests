METHOD_0 ( ) { com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 IDENT_3 = com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 . METHOD_1 ( METHOD_2 ( INT_0 , INT_1 , 2 ) ) . with ( IDENT_4 . IDENT_5 ) ; com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 IDENT_6 = com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 . METHOD_1 ( 0L ) . with ( IDENT_4 . IDENT_5 ) ; com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 IDENT_7 = com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 . METHOD_1 ( METHOD_2 ( INT_0 , INT_1 , 1 ) ) . with ( IDENT_4 . IDENT_5 ) ; org . neo4j . IDENT_8 . Node IDENT_9 ; try ( org . neo4j . IDENT_8 . IDENT_10 tx = METHOD_3 ( ) . METHOD_4 ( ) ) { IDENT_9 = METHOD_3 ( ) . METHOD_5 ( ) ; IDENT_9 . setProperty ( "name" , STRING_0 ) ; tx . METHOD_6 ( ) ; } try ( org . neo4j . IDENT_8 . IDENT_10 tx = METHOD_3 ( ) . METHOD_4 ( ) ) { IDENT_11 . METHOD_7 ( IDENT_9 , com . IDENT_0 . module . IDENT_1 . IDENT_12 . IDENT_13 , IDENT_3 ) ; tx . METHOD_6 ( ) ; } try ( org . neo4j . IDENT_8 . IDENT_10 tx = METHOD_3 ( ) . METHOD_4 ( ) ) { com . IDENT_0 . module . IDENT_1 . List < com . IDENT_0 . module . IDENT_1 . domain . IDENT_14 > events = IDENT_11 . METHOD_8 ( IDENT_6 , IDENT_7 ) ; "<AssertPlaceHolder>" ; tx . METHOD_6 ( ) ; } } METHOD_8 ( com . IDENT_0 . module . IDENT_1 . domain . IDENT_2 , com . IDENT_0 . module . IDENT_1 . Set ) { return METHOD_8 ( IDENT_15 , types , com . IDENT_0 . module . IDENT_1 . IDENT_16 ) ; }
org . junit . Assert . assertEquals ( 0 , events . size ( ) ) 