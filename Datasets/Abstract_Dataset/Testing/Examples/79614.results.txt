METHOD_0 ( ) { long t = METHOD_1 ( INT_0 , 1 , 1 , 1 ) ; for ( int i = 0 ; i < 10 ; ++ i ) { METHOD_2 ( ( t + ( i * INT_1 ) ) ) ; } java . util . Map < java . lang . String , java . lang . Object > map = new java . util . HashMap ( ) ; java . util . Map < java . lang . String , java . lang . Object > params = new java . util . HashMap ( ) ; params . put ( STRING_0 , t ) ; params . put ( STRING_1 , ( t + INT_2 ) ) ; map . put ( STRING_2 , params ) ; int i = 0 ; try ( com . IDENT_0 . module . IDENT_1 . IDENT_2 . IDENT_3 tx = METHOD_3 ( ) . METHOD_4 ( ) ) { com . IDENT_0 . module . IDENT_1 . IDENT_2 . Result rs = METHOD_3 ( ) . execute ( ( STRING_3 + STRING_4 ) , map ) ; while ( rs . hasNext ( ) ) { java . util . Map < java . lang . String , java . lang . Object > record = rs . next ( ) ; ++ i ; } tx . METHOD_5 ( ) ; } "<AssertPlaceHolder>" ; } next ( ) { org . joda . time . IDENT_4 time = new org . joda . time . METHOD_6 ( getTime ( ) ) ; time . add ( METHOD_7 ( ) . METHOD_8 ( ) . METHOD_9 ( ) , 1 ) ; return new com . IDENT_0 . module . IDENT_1 . domain . METHOD_10 ( time . METHOD_11 ( ) , METHOD_12 ( ) , METHOD_7 ( ) ) ; }
org . junit . Assert . assertEquals ( 10 , i ) 