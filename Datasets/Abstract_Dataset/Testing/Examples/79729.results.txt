METHOD_0 ( ) { com . graphhopper . jsprit . core . algorithm . IDENT_0 . IDENT_1 IDENT_2 = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_0 . IDENT_1 . class ) ; com . graphhopper . jsprit . core . algorithm . IDENT_3 . IDENT_4 IDENT_5 = mock ( com . graphhopper . jsprit . core . algorithm . IDENT_3 . IDENT_4 . class ) ; com . graphhopper . jsprit . core . algorithm . module . IDENT_6 module = new com . graphhopper . jsprit . core . algorithm . module . METHOD_1 ( "name" , IDENT_2 , IDENT_5 ) ; java . util . Collection < com . graphhopper . jsprit . core . problem . solution . route . IDENT_7 > IDENT_8 = new java . util . ArrayList ( ) ; java . util . List < com . graphhopper . jsprit . core . problem . job . IDENT_9 > IDENT_10 = new java . util . ArrayList ( ) ; for ( int i = 0 ; i < 20 ; i ++ ) { IDENT_10 . add ( mock ( com . graphhopper . jsprit . core . problem . job . IDENT_9 . class ) ) ; } com . graphhopper . jsprit . core . problem . solution . IDENT_11 IDENT_12 = new com . graphhopper . jsprit . core . problem . solution . METHOD_2 ( IDENT_8 , IDENT_10 , 0 ) ; com . graphhopper . jsprit . core . problem . solution . METHOD_2 IDENT_13 = module . METHOD_3 ( IDENT_12 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { return IDENT_14 ; }
org . junit . Assert . assertEquals ( 0 , IDENT_13 . METHOD_4 ( ) . size ( ) ) 