METHOD_0 ( ) { com . graphhopper . jsprit . core . problem . job . IDENT_0 IDENT_1 = IDENT_0 . Builder . newInstance ( STRING_0 ) . METHOD_1 ( IDENT_2 . Builder . newInstance ( ) . METHOD_2 ( com . graphhopper . jsprit . core . util . IDENT_3 . newInstance ( 1 , 1 ) ) . build ( ) ) . build ( ) ; com . graphhopper . jsprit . core . problem . job . IDENT_0 IDENT_4 = IDENT_0 . Builder . newInstance ( STRING_1 ) . METHOD_1 ( IDENT_2 . Builder . newInstance ( ) . METHOD_2 ( com . graphhopper . jsprit . core . util . IDENT_3 . newInstance ( 3 , 1 ) ) . build ( ) ) . build ( ) ; com . graphhopper . jsprit . core . problem . job . IDENT_0 IDENT_5 = IDENT_0 . Builder . newInstance ( STRING_2 ) . METHOD_1 ( IDENT_2 . Builder . newInstance ( ) . METHOD_2 ( com . graphhopper . jsprit . core . util . IDENT_3 . newInstance ( 10 , 10 ) ) . build ( ) ) . build ( ) ; com . graphhopper . jsprit . core . problem . IDENT_6 . IDENT_7 v = IDENT_7 . Builder . newInstance ( STRING_3 ) . METHOD_3 ( IDENT_2 . Builder . newInstance ( ) . METHOD_2 ( com . graphhopper . jsprit . core . util . IDENT_3 . newInstance ( 0 , 0 ) ) . build ( ) ) . build ( ) ; com . graphhopper . jsprit . core . problem . IDENT_8 IDENT_9 = IDENT_8 . Builder . newInstance ( ) . METHOD_4 ( IDENT_1 ) . METHOD_4 ( IDENT_4 ) . METHOD_4 ( IDENT_5 ) . METHOD_5 ( v ) . build ( ) ; com . graphhopper . jsprit . core . algorithm . IDENT_10 . IDENT_11 IDENT_12 = new com . graphhopper . jsprit . core . algorithm . IDENT_10 . METHOD_6 ( IDENT_9 , 1 ) ; com . graphhopper . jsprit . core . problem . solution . route . IDENT_13 route = IDENT_13 . Builder . newInstance ( v ) . METHOD_7 ( IDENT_1 ) . METHOD_7 ( IDENT_4 ) . METHOD_7 ( IDENT_5 ) . METHOD_8 ( IDENT_9 . METHOD_9 ( ) ) . build ( ) ; java . util . Collection < com . graphhopper . jsprit . core . problem . job . IDENT_14 > IDENT_15 = IDENT_12 . METHOD_10 ( java . util . Arrays . asList ( route ) ) ; "<AssertPlaceHolder>" ; } METHOD_10 ( com . graphhopper . jsprit . core . algorithm . IDENT_10 . Collection ) { if ( ( IDENT_16 . isEmpty ( ) ) || ( IDENT_9 . METHOD_11 ( ) . isEmpty ( ) ) ) { return com . graphhopper . jsprit . core . algorithm . IDENT_10 . Collections . emptyList ( ) ; } int IDENT_17 ; if ( ( IDENT_18 ) == ( IDENT_19 ) ) IDENT_17 = IDENT_19 ; else IDENT_17 = ( IDENT_18 ) + ( random . METHOD_12 ( ( ( IDENT_19 ) - ( IDENT_18 ) ) ) ) ; IDENT_17 = java . lang . Math . min ( IDENT_17 , IDENT_16 . size ( ) ) ; com . graphhopper . jsprit . core . algorithm . IDENT_10 . Set < com . graphhopper . jsprit . core . problem . job . IDENT_14 > IDENT_20 = new com . graphhopper . jsprit . core . algorithm . IDENT_10 . HashSet ( ) ; com . graphhopper . jsprit . core . algorithm . IDENT_10 . Set < com . graphhopper . jsprit . core . problem . solution . route . IDENT_13 > IDENT_21 = new com . graphhopper . jsprit . core . algorithm . IDENT_10 . HashSet ( ) ; com . graphhopper . jsprit . core . problem . job . IDENT_14 IDENT_22 = com . graphhopper . jsprit . core . util . IDENT_23 . METHOD_13 ( IDENT_9 . METHOD_11 ( ) . values ( ) , random ) ; com . graphhopper . jsprit . core . algorithm . IDENT_10 . Iterator < com . graphhopper . jsprit . core . problem . job . IDENT_14 > IDENT_24 = IDENT_25 . METHOD_14 ( ( ( IDENT_19 ) * ( IDENT_26 ) ) , IDENT_22 ) ; while ( ( IDENT_24 . hasNext ( ) ) && ( ( IDENT_21 . size ( ) ) <= IDENT_17 ) ) { if ( ! ( IDENT_20 . contains ( IDENT_22 ) ) ) { com . graphhopper . jsprit . core . problem . solution . route . IDENT_13 route = METHOD_15 ( IDENT_22 , IDENT_16 ) ; if ( ( route != null ) && ( ! ( IDENT_21 . contains ( route ) ) ) ) { if ( ( random . METHOD_16 ( ) ) < FLOAT_0 ) { METHOD_17 ( route , IDENT_22 , IDENT_20 ) ; } else { METHOD_18 ( route , IDENT_22 , IDENT_20 ) ; } IDENT_21 . add ( route ) ; } } IDENT_22 = IDENT_24 . next ( ) ; } return IDENT_20 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_15 . size ( ) ) 