METHOD_0 ( ) { com . graphhopper . jsprit . core . problem . IDENT_0 . IDENT_1 IDENT_0 = IDENT_1 . Builder . newInstance ( STRING_0 ) . METHOD_1 ( com . graphhopper . jsprit . core . algorithm . state . IDENT_2 . newInstance ( STRING_1 ) ) . build ( ) ; com . graphhopper . jsprit . core . algorithm . state . IDENT_3 IDENT_4 = IDENT_3 . Builder . newInstance ( ) . METHOD_2 ( IDENT_0 ) . build ( ) ; com . graphhopper . jsprit . core . problem . solution . route . IDENT_5 route = METHOD_3 ( IDENT_0 ) ; com . graphhopper . jsprit . core . algorithm . state . IDENT_6 IDENT_7 = new com . graphhopper . jsprit . core . algorithm . state . METHOD_4 ( IDENT_8 ) ; com . graphhopper . jsprit . core . algorithm . state . IDENT_9 id = IDENT_10 . IDENT_11 ; java . lang . Double IDENT_12 = IDENT_7 . METHOD_5 ( route , IDENT_0 , id , com . graphhopper . jsprit . core . algorithm . state . Double . class ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( com . graphhopper . jsprit . core . problem . solution . route . IDENT_5 , com . graphhopper . jsprit . core . problem . IDENT_0 . IDENT_13 , com . graphhopper . jsprit . core . algorithm . state . IDENT_9 , java . lang . Class ) { T state = null ; if ( IDENT_14 ) { try { state = type . METHOD_6 ( IDENT_15 [ route . METHOD_7 ( ) . METHOD_8 ( ) ] [ IDENT_0 . METHOD_9 ( ) . METHOD_8 ( ) ] [ IDENT_16 . METHOD_8 ( ) ] ) ; } catch ( java . lang . IDENT_17 e ) { throw METHOD_10 ( e , IDENT_16 , type . toString ( ) , IDENT_15 [ route . METHOD_7 ( ) . METHOD_8 ( ) ] [ IDENT_0 . METHOD_9 ( ) . METHOD_8 ( ) ] [ IDENT_16 . METHOD_8 ( ) ] . getClass ( ) . toString ( ) ) ; } } else { try { if ( IDENT_18 . containsKey ( route ) ) { state = type . METHOD_6 ( IDENT_18 . get ( route ) [ IDENT_0 . METHOD_9 ( ) . METHOD_8 ( ) ] [ IDENT_16 . METHOD_8 ( ) ] ) ; } } catch ( java . lang . IDENT_17 e ) { throw METHOD_10 ( e , IDENT_16 , type . toString ( ) , IDENT_18 . get ( route ) [ IDENT_0 . METHOD_9 ( ) . METHOD_8 ( ) ] [ IDENT_16 . METHOD_8 ( ) ] . getClass ( ) . toString ( ) ) ; } } return state ; }
org . junit . Assert . assertTrue ( ( IDENT_12 == null ) ) 