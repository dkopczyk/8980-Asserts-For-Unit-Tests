METHOD_0 ( ) { com . graphhopper . jsprit . core . analysis . IDENT_0 IDENT_1 = new com . graphhopper . jsprit . core . analysis . METHOD_1 ( IDENT_2 , solution , IDENT_2 . METHOD_2 ( ) ) ; com . graphhopper . jsprit . core . problem . solution . route . IDENT_3 route = solution . METHOD_3 ( ) . iterator ( ) . next ( ) ; com . graphhopper . jsprit . core . problem . solution . route . IDENT_4 . IDENT_5 IDENT_6 = route . METHOD_4 ( ) . get ( 1 ) ; com . graphhopper . jsprit . core . problem . IDENT_7 IDENT_8 = IDENT_1 . METHOD_5 ( IDENT_6 , route ) ; for ( int i = 0 ; i < ( IDENT_8 . METHOD_6 ( ) ) ; i ++ ) { "<AssertPlaceHolder>" ; } } get ( com . graphhopper . jsprit . core . problem . solution . route . IDENT_3 ) { return com . graphhopper . jsprit . core . algorithm . state . Arrays . asList ( route . METHOD_7 ( ) ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_8 . get ( i ) ) == 0 ) ) 