METHOD_0 ( ) { io . IDENT_0 . IDENT_1 . security . core . IDENT_2 IDENT_3 = mock ( io . IDENT_0 . IDENT_1 . security . core . IDENT_2 . class ) ; when ( IDENT_3 . name ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_3 . METHOD_1 ( IDENT_4 ) ) . thenReturn ( java . util . Collections . emptyList ( ) ) ; io . IDENT_0 . IDENT_1 . security . core . IDENT_5 policy = mock ( io . IDENT_0 . IDENT_1 . security . core . IDENT_5 . class ) ; when ( IDENT_6 . create ( IDENT_7 . IDENT_8 , STRING_1 , null ) ) . thenReturn ( policy ) ; when ( IDENT_9 . resolve ( request ) ) . thenReturn ( IDENT_3 ) ; io . IDENT_0 . IDENT_1 . policy . impl . IDENT_10 IDENT_11 = IDENT_12 . resolve ( IDENT_7 . IDENT_8 , request , response , IDENT_4 ) ; "<AssertPlaceHolder>" ; } resolve ( io . IDENT_0 . IDENT_1 . security . core . IDENT_7 , io . IDENT_0 . IDENT_1 . api . IDENT_13 , io . IDENT_0 . IDENT_1 . api . Response , io . IDENT_0 . IDENT_1 . api . IDENT_14 ) { if ( IDENT_15 == ( IDENT_7 . IDENT_8 ) ) { final io . IDENT_0 . IDENT_1 . security . core . IDENT_2 IDENT_3 = IDENT_9 . resolve ( request ) ; if ( IDENT_3 != null ) { logger . debug ( STRING_2 , IDENT_3 . name ( ) , request . id ( ) ) ; java . util . List < io . IDENT_0 . IDENT_1 . security . core . IDENT_16 > IDENT_17 = IDENT_3 . METHOD_1 ( IDENT_4 ) ; return io . IDENT_0 . IDENT_1 . policy . impl . IDENT_18 . create ( METHOD_2 ( IDENT_17 ) , IDENT_4 ) ; } logger . debug ( STRING_3 , request . id ( ) ) ; return new io . IDENT_0 . IDENT_1 . security . core . METHOD_3 ( io . IDENT_0 . policy . api . IDENT_19 . METHOD_4 ( IDENT_20 . IDENT_21 , STRING_4 ) , IDENT_4 ) ; } else { return new io . IDENT_0 . IDENT_1 . security . core . METHOD_5 ( IDENT_4 ) ; } }
org . junit . Assert . assertEquals ( io . IDENT_0 . IDENT_1 . policy . impl . IDENT_18 . class , IDENT_11 . getClass ( ) ) 