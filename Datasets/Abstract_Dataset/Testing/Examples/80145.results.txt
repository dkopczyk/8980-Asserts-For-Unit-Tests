METHOD_0 ( ) { io . IDENT_0 . management . model . IDENT_1 IDENT_2 = mock ( io . IDENT_0 . management . model . IDENT_1 . class ) ; when ( IDENT_2 . getId ( ) ) . thenReturn ( STRING_0 ) ; when ( IDENT_3 . METHOD_1 ( STRING_0 ) ) . thenReturn ( java . util . Optional . empty ( ) ) ; java . util . List < io . IDENT_0 . management . model . IDENT_4 > list = IDENT_5 . update ( singletonList ( IDENT_2 ) ) ; "<AssertPlaceHolder>" ; verify ( IDENT_3 , times ( 1 ) ) . METHOD_1 ( any ( ) ) ; verify ( IDENT_3 , METHOD_2 ( ) ) . update ( any ( ) ) ; verify ( IDENT_6 , METHOD_2 ( ) ) . METHOD_3 ( any ( ) , eq ( io . IDENT_0 . management . service . IDENT_7 ) , any ( ) , any ( ) , any ( ) ) ; } update ( io . IDENT_0 . management . services . IDENT_8 . Collection ) { io . IDENT_0 . management . model . api . IDENT_9 IDENT_10 = IDENT_11 . METHOD_1 ( api . getId ( ) ) ; io . IDENT_0 . management . services . IDENT_8 . List < io . IDENT_0 . IDENT_12 . model . IDENT_13 > properties = ( ( IDENT_10 . METHOD_4 ( ) ) != null ) ? IDENT_10 . METHOD_4 ( ) . METHOD_4 ( ) : io . IDENT_0 . management . services . IDENT_8 . Collections . emptyList ( ) ; io . IDENT_0 . management . services . IDENT_8 . List < io . IDENT_0 . IDENT_12 . model . IDENT_13 > IDENT_14 = properties . stream ( ) . filter ( ( property ) -> ! ( property . METHOD_5 ( ) ) ) . collect ( java . util . stream . IDENT_15 . toList ( ) ) ; io . IDENT_0 . management . services . IDENT_8 . Map < java . lang . String , io . IDENT_0 . IDENT_12 . model . IDENT_13 > IDENT_16 = properties . stream ( ) . collect ( java . util . stream . IDENT_15 . METHOD_6 ( IDENT_13 :: getKey , ( property ) -> property ) ) ; io . IDENT_0 . management . services . IDENT_8 . List < io . IDENT_0 . IDENT_12 . model . IDENT_13 > IDENT_17 = new io . IDENT_0 . management . services . IDENT_8 . ArrayList ( ) ; boolean IDENT_18 = false ; for ( io . IDENT_0 . management . services . IDENT_8 . model . IDENT_19 IDENT_20 : IDENT_21 ) { io . IDENT_0 . IDENT_12 . model . IDENT_13 property = IDENT_16 . get ( IDENT_20 . getKey ( ) ) ; if ( ( property == null ) || ( property . METHOD_5 ( ) ) ) { IDENT_17 . add ( IDENT_20 ) ; } if ( ( property == null ) || ( ( property . METHOD_5 ( ) ) && ( ! ( property . getValue ( ) . equals ( IDENT_20 . getValue ( ) ) ) ) ) ) { IDENT_18 = true ; } } if ( IDENT_18 ) { IDENT_17 . addAll ( IDENT_14 ) ; io . IDENT_0 . management . services . IDENT_8 . List < io . IDENT_0 . IDENT_12 . model . IDENT_13 > IDENT_22 = IDENT_17 . stream ( ) . METHOD_7 ( io . IDENT_0 . management . services . IDENT_8 . IDENT_23 . METHOD_8 ( IDENT_13 :: getKey ) ) . collect ( java . util . stream . IDENT_15 . toList ( ) ) ; io . IDENT_0 . IDENT_12 . model . Properties IDENT_24 = new io . IDENT_0 . IDENT_12 . model . Properties ( ) ; try { IDENT_24 . METHOD_9 ( IDENT_22 ) ; } catch ( java . lang . RuntimeException e ) { logger . error ( e . getMessage ( ) , e ) ; } IDENT_10 . METHOD_9 ( IDENT_24 ) ; boolean IDENT_25 = IDENT_11 . METHOD_10 ( api . getId ( ) ) ; IDENT_11 . update ( IDENT_10 . getId ( ) , io . IDENT_0 . management . service . IDENT_26 . convert ( IDENT_10 ) ) ; if ( IDENT_25 ) { if ( ( ! ( IDENT_17 . METHOD_11 ( properties ) ) ) || ( ! ( properties . METHOD_11 ( IDENT_17 ) ) ) ) { IDENT_11 . METHOD_12 ( IDENT_10 . getId ( ) , STRING_1 , IDENT_27 . IDENT_28 ) ; } } } }
org . junit . Assert . assertTrue ( list . isEmpty ( ) ) 