METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 IDENT_2 = new org . apache . IDENT_0 . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( conf ) ; IDENT_2 . METHOD_3 ( ( INT_0 * INT_0 ) ) ; org . apache . IDENT_0 . IDENT_3 IDENT_4 = METHOD_4 ( IDENT_2 , STRING_0 ) ; org . apache . IDENT_0 . api . IDENT_5 out = org . apache . IDENT_0 . util . Utils . METHOD_5 ( IDENT_4 . METHOD_6 ( ) ) ; boolean IDENT_6 = false ; byte [ ] IDENT_7 = new byte [ ( ( IDENT_8 . IDENT_9 ) / 2 ) + 2 ] ; org . apache . IDENT_0 . IDENT_10 . IDENT_11 . METHOD_7 ( IDENT_7 ) ; try { org . apache . IDENT_0 . IDENT_8 op = new org . apache . IDENT_0 . METHOD_8 ( 1L , IDENT_7 ) ; java . util . concurrent . IDENT_12 < org . apache . IDENT_0 . IDENT_13 > IDENT_14 = out . write ( op ) ; op = new org . apache . IDENT_0 . METHOD_8 ( INT_1 , IDENT_7 ) ; out . write ( op ) ; org . apache . IDENT_0 . util . Utils . METHOD_5 ( IDENT_14 ) ; } catch ( org . apache . IDENT_0 . exceptions . IDENT_15 IDENT_16 ) { IDENT_6 = true ; } finally { org . apache . IDENT_0 . util . Utils . METHOD_5 ( out . METHOD_9 ( ) ) ; } "<AssertPlaceHolder>" ; org . apache . IDENT_0 . io . IDENT_17 . METHOD_10 ( out ) ; IDENT_4 . close ( ) ; } METHOD_9 ( ) { org . apache . IDENT_0 . IDENT_18 . IDENT_19 IDENT_20 ; MOD_0 ( this ) { if ( ( null != ( IDENT_21 ) ) && ( ! ( IDENT_21 . METHOD_11 ( ) ) ) ) { IDENT_21 . METHOD_12 ( true ) ; } IDENT_20 = IDENT_22 ; } return org . apache . IDENT_0 . util . Utils . METHOD_13 ( IDENT_23 , IDENT_20 ) . METHOD_14 ( ( value ) -> { org . apache . IDENT_0 . IDENT_24 . METHOD_15 ( org . apache . IDENT_0 . IDENT_25 . METHOD_16 ( ) , this ) ; return null ; } ) ; }
org . junit . Assert . assertFalse ( IDENT_6 ) 