METHOD_0 ( ) { final java . lang . IDENT_0 [ ] IDENT_1 = net . IDENT_2 . IDENT_3 . utils . IDENT_4 . METHOD_1 ( null ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . util . List ) { final java . util . List < java . lang . IDENT_0 > IDENT_1 = new java . util . IDENT_5 < java . lang . IDENT_0 > ( ) ; if ( IDENT_6 != null ) { final java . util . IDENT_7 < java . lang . String > IDENT_8 = IDENT_6 . METHOD_2 ( IDENT_6 . size ( ) ) ; while ( IDENT_8 . METHOD_3 ( ) ) { final java . lang . String IDENT_9 = IDENT_8 . METHOD_4 ( ) ; if ( IDENT_9 . startsWith ( net . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_10 ) ) { IDENT_8 . remove ( ) ; final java . lang . String [ ] IDENT_11 = net . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_12 . split ( IDENT_9 . substring ( net . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_10 . length ( ) ) ) ; if ( ( ( IDENT_11 . length ) < 2 ) || ( ( IDENT_11 . length ) > 3 ) ) { throw new java . text . METHOD_5 ( ( STRING_0 + IDENT_9 ) , 0 ) ; } final int IDENT_13 = IDENT_11 [ 0 ] . METHOD_6 ( STRING_1 ) ; final java . lang . String IDENT_14 = IDENT_11 [ 0 ] . substring ( 0 , IDENT_13 ) ; final java . lang . String IDENT_15 = IDENT_11 [ 0 ] . substring ( ( IDENT_13 + 1 ) ) ; final java . lang . String IDENT_16 ; final int IDENT_17 ; if ( net . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_18 . equals ( IDENT_11 [ 1 ] ) ) { IDENT_16 = null ; IDENT_17 = - 1 ; } else if ( net . IDENT_2 . IDENT_3 . utils . IDENT_4 . IDENT_19 . equals ( IDENT_11 [ 1 ] ) ) { IDENT_16 = null ; IDENT_17 = - 2 ; } else { IDENT_16 = IDENT_11 [ 1 ] ; IDENT_17 = ( ( IDENT_11 . length ) == 3 ) ? java . lang . Integer . METHOD_7 ( IDENT_11 [ 2 ] ) : - 1 ; } IDENT_1 . add ( 0 , new java . lang . METHOD_8 ( IDENT_14 , IDENT_15 , IDENT_16 , IDENT_17 ) ) ; } else { break ; } } } return IDENT_1 . toArray ( new java . lang . METHOD_8 [ IDENT_1 . size ( ) ] ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_1 . length ) 