METHOD_0 ( ) { org . IDENT_0 . plugins . IDENT_1 . antlr . nodes . matchers . IDENT_2 matcher = new org . IDENT_0 . plugins . IDENT_1 . antlr . nodes . matchers . METHOD_1 ( ) ; org . IDENT_0 . plugins . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_5 rule = new org . IDENT_0 . plugins . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_2 ( ) ; rule . METHOD_3 ( IDENT_6 . IDENT_7 ) ; rule . METHOD_4 ( ) . METHOD_5 ( ) . add ( STRING_0 ) ; org . IDENT_0 . plugins . IDENT_1 . helpers . IDENT_8 parent = new org . IDENT_0 . plugins . IDENT_1 . helpers . METHOD_6 ( STRING_1 , STRING_2 , 3 ) ; IDENT_9 . METHOD_7 ( parent ) ; IDENT_10 . METHOD_7 ( parent ) ; "<AssertPlaceHolder>" ; } match ( org . IDENT_0 . plugins . IDENT_1 . IDENT_3 . IDENT_4 . METHOD_2 , org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_11 , org . IDENT_0 . plugins . IDENT_1 . antlr . IDENT_11 ) { for ( final org . IDENT_0 . plugins . IDENT_1 . antlr . nodes . matchers . IDENT_12 matcher : this . matchers ) { if ( ! ( matcher . match ( rule , node ) ) ) { return false ; } } final org . IDENT_0 . plugins . IDENT_1 . IDENT_3 . IDENT_4 . IDENT_6 type = rule . METHOD_8 ( ) ; boolean IDENT_13 = IDENT_14 . match ( rule , node ) ; boolean IDENT_15 = IDENT_16 . match ( rule , node ) ; switch ( type ) { case IDENT_17 : case IDENT_18 : return IDENT_13 ; case IDENT_19 : return IDENT_13 && IDENT_15 ; case IDENT_20 : return IDENT_15 ; case IDENT_21 : if ( parent == null ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } boolean IDENT_22 = IDENT_23 . METHOD_9 ( rule , parent , node ) ; return ( IDENT_15 && IDENT_13 ) && IDENT_22 ; case IDENT_7 : if ( parent == null ) { throw new java . lang . IllegalArgumentException ( STRING_4 ) ; } return ( ( IDENT_15 && IDENT_13 ) && ( IDENT_23 . METHOD_9 ( rule , parent , node ) ) ) && ( IDENT_24 . METHOD_9 ( rule , node , parent ) ) ; default : break ; } return false ; }
org . junit . Assert . assertFalse ( matcher . match ( rule , IDENT_10 , IDENT_9 ) ) 