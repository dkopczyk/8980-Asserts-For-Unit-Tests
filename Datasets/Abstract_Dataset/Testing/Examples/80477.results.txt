METHOD_0 ( ) { org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . IDENT_5 [ ] results = IDENT_4 . METHOD_2 ( null , java . nio . IDENT_6 . IDENT_7 . METHOD_3 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . io . InputStream , java . nio . IDENT_6 . IDENT_7 ) { if ( IDENT_8 == null ) { return new org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . IDENT_5 [ 0 ] ; } final java . util . List < org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . IDENT_5 > IDENT_9 = new java . util . ArrayList ( ) ; try ( final java . io . IDENT_10 IDENT_11 = new java . io . METHOD_4 ( new java . io . METHOD_5 ( new org . apache . commons . io . input . METHOD_6 ( IDENT_8 , false ) , IDENT_6 ) ) ) { int IDENT_12 = 1 ; int IDENT_13 = 0 ; int count = 0 ; int IDENT_14 ; while ( ( IDENT_14 = IDENT_11 . read ( ) ) != ( - 1 ) ) { IDENT_13 ++ ; count ++ ; if ( IDENT_14 == 10 ) { IDENT_9 . add ( new org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . METHOD_7 ( IDENT_12 , count , ( IDENT_13 - count ) , IDENT_13 ) ) ; IDENT_12 ++ ; count = 0 ; } } IDENT_9 . add ( new org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . METHOD_7 ( IDENT_12 , count , ( IDENT_13 - count ) , IDENT_13 ) ) ; } catch ( final java . lang . Throwable e ) { org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . METHOD_1 . LOGGER . warn ( STRING_0 , e ) ; } return IDENT_9 . toArray ( new org . IDENT_0 . plugins . IDENT_1 . IDENT_2 . METHOD_7 [ 0 ] ) ; }
org . junit . Assert . assertEquals ( 0 , results . length ) 