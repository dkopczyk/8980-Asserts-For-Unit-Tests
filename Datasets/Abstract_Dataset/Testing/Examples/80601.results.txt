METHOD_0 ( ) { java . util . List < java . lang . String > IDENT_0 = org . IDENT_1 . IDENT_2 . test . maven . IDENT_3 . METHOD_1 ( STRING_0 , STRING_1 ) ; System . out . println ( ( STRING_2 + IDENT_0 ) ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , java . lang . String ) { java . io . File IDENT_4 = org . IDENT_1 . IDENT_2 . test . maven . IDENT_3 . METHOD_2 ( ) ; if ( IDENT_4 == null ) { throw new java . lang . IllegalArgumentException ( STRING_3 ) ; } java . lang . String [ ] IDENT_5 = IDENT_6 . split ( STRING_4 ) ; java . io . File path = IDENT_4 ; for ( java . lang . String p : IDENT_5 ) { path = new java . io . File ( path , p ) ; } path = new java . io . File ( path , IDENT_7 ) ; java . util . List < java . lang . String > version = new java . util . ArrayList < java . lang . String > ( ) ; for ( java . io . File c : path . METHOD_3 ( ) ) { if ( c . METHOD_4 ( ) ) { if ( ( org . IDENT_1 . IDENT_2 . test . maven . IDENT_3 . METHOD_5 ( c , IDENT_7 ) ) != null ) { version . add ( c . getName ( ) ) ; } } } java . util . Collections . METHOD_6 ( version ) ; return version ; }
org . junit . Assert . assertTrue ( ( ! ( IDENT_0 . isEmpty ( ) ) ) ) 