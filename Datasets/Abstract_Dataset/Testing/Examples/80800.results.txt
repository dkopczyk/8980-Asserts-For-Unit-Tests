METHOD_0 ( ) { final java . util . List < com . IDENT_0 . IDENT_1 . metrics . IDENT_2 . IDENT_3 > IDENT_4 = METHOD_1 ( 4 ) . collect ( java . util . stream . IDENT_5 . toList ( ) ) ; final java . util . Set < com . IDENT_0 . IDENT_1 . metrics . IDENT_2 . IDENT_3 > result = new java . util . HashSet ( ) ; final com . IDENT_0 . IDENT_1 . metrics . IDENT_6 . IDENT_7 impl = new com . IDENT_0 . IDENT_1 . metrics . IDENT_6 . IDENT_8 . IDENT_9 . METHOD_2 ( ) { @ com . IDENT_0 . IDENT_1 . metrics . IDENT_6 . IDENT_8 . Override public boolean add ( com . IDENT_0 . IDENT_1 . metrics . IDENT_2 . IDENT_3 IDENT_10 ) { return result . add ( IDENT_10 ) ; } } ; "<AssertPlaceHolder>" ; } addAll ( java . util . Collection ) { if ( e . isEmpty ( ) ) return false ; final java . util . concurrent . IDENT_11 . IDENT_12 . IDENT_13 IDENT_14 = IDENT_15 . METHOD_3 ( ) ; IDENT_14 . METHOD_4 ( ) ; try { org . joda . time . IDENT_16 IDENT_10 = e . iterator ( ) . next ( ) . METHOD_5 ( ) ; return METHOD_6 ( IDENT_10 ) . METHOD_7 ( ) . addAll ( e ) ; } catch ( java . io . IOException ex ) { throw new java . lang . RuntimeException ( ex ) ; } finally { METHOD_4 . METHOD_8 ( ) ; } }
org . junit . Assert . assertTrue ( impl . addAll ( IDENT_4 ) ) 