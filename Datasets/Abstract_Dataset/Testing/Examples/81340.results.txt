METHOD_0 ( ) { org . jboss . IDENT_0 . IDENT_1 . IDENT_2 input = new org . jboss . IDENT_0 . IDENT_1 . METHOD_1 ( ) . add ( STRING_0 , STRING_1 ) . add ( STRING_2 , STRING_3 ) . add ( STRING_4 , STRING_1 ) ; org . jboss . IDENT_0 . IDENT_1 . METHOD_1 expected = new org . jboss . IDENT_0 . IDENT_1 . METHOD_1 ( ) . add ( STRING_0 , STRING_1 ) . add ( STRING_2 , STRING_1 ) . add ( STRING_4 , STRING_1 ) ; org . jboss . IDENT_0 . IDENT_1 . METHOD_1 result = processor . apply ( input ) ; "<AssertPlaceHolder>" ; } apply ( org . jboss . IDENT_0 . meta . IDENT_3 ) { org . jboss . IDENT_0 . meta . IDENT_3 IDENT_4 = org . jboss . IDENT_0 . meta . IDENT_3 . IDENT_5 ; if ( ( template != null ) && ( ! ( IDENT_3 . IDENT_5 . equals ( template ) ) ) ) { java . util . List < java . lang . String [ ] > IDENT_6 = stream ( template . METHOD_2 ( ) , false ) . map ( ( IDENT_7 ) -> { if ( IDENT_7 . contains ( STRING_5 ) ) { return com . google . common . base . IDENT_8 . METHOD_3 ( STRING_6 ) . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( 2 ) . METHOD_7 ( IDENT_7 ) . toArray ( new java . lang . String [ 2 ] ) ; } return new java . lang . String [ ] { IDENT_7 , null } ; } ) . collect ( toList ( ) ) ; java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; org . jboss . IDENT_0 . meta . description . IDENT_9 . process ( IDENT_6 , ( IDENT_7 ) -> { builder . append ( "/" ) . append ( IDENT_7 [ 0 ] ) ; if ( ( IDENT_7 [ 1 ] ) != null ) { builder . append ( STRING_5 ) . append ( IDENT_7 [ 1 ] ) ; } } ) ; IDENT_4 = org . jboss . IDENT_0 . meta . IDENT_3 . of ( builder . toString ( ) ) ; } org . jboss . IDENT_0 . meta . description . IDENT_10 . logger . debug ( STRING_7 , template , IDENT_4 ) ; return IDENT_4 ; }
org . junit . Assert . assertEquals ( expected , result ) 