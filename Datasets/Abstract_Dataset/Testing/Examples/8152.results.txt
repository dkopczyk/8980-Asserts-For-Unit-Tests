METHOD_0 ( ) { final org . apache . calcite . tools . IDENT_0 builder = org . apache . calcite . tools . IDENT_0 . create ( org . apache . calcite . test . IDENT_1 . config ( ) . build ( ) ) ; final org . apache . calcite . util . IDENT_2 < org . apache . calcite . IDENT_3 . IDENT_4 > v = org . apache . calcite . util . IDENT_2 . of ( null ) ; org . apache . calcite . IDENT_5 . IDENT_6 root = builder . METHOD_1 ( STRING_0 ) . METHOD_2 ( v ) . METHOD_1 ( STRING_1 ) . filter ( builder . equals ( builder . field ( 0 ) , builder . field ( v . get ( ) , STRING_2 ) ) ) . join ( IDENT_7 . IDENT_8 , builder . equals ( builder . field ( 2 , 0 , STRING_3 ) , builder . METHOD_3 ( 1000 ) ) , com . google . common . collect . IDENT_9 . of ( v . get ( ) . id ) ) . build ( ) ; final java . lang . String expected = "" + ( ( ( ( STRING_4 + STRING_5 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { return org . apache . calcite . test . Matchers . METHOD_5 ( org . hamcrest . core . Is . is ( value ) , ( input ) -> { return org . apache . calcite . util . IDENT_10 . METHOD_6 ( org . apache . calcite . plan . IDENT_11 . toString ( input ) ) ; } ) ; }
org . junit . Assert . assertThat ( root , org . apache . calcite . test . Matchers . METHOD_4 ( expected ) ) 