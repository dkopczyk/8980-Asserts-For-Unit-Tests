METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . util . IDENT_2 reader = METHOD_1 ( ) ; com . IDENT_0 . IDENT_1 . util . IDENT_3 . IDENT_4 data = METHOD_2 ( ) . get ( 0 ) ; reader . METHOD_3 ( data . METHOD_4 ( ) ) ; com . IDENT_0 . IDENT_1 . util . IDENT_5 param = reader . METHOD_5 ( ) ; com . IDENT_0 . IDENT_1 . util . IDENT_6 type = reader . METHOD_6 ( 0 ) ; if ( type != null ) { java . awt . image . IDENT_7 IDENT_8 = type . METHOD_7 ( reader . METHOD_8 ( 0 ) , reader . METHOD_9 ( 0 ) ) ; param . METHOD_10 ( IDENT_8 ) ; java . awt . image . IDENT_7 result = null ; try { result = reader . read ( 0 , param ) ; } catch ( java . lang . Exception e ) { com . IDENT_0 . IDENT_1 . util . IDENT_3 . METHOD_11 ( STRING_0 , e ) ; } "<AssertPlaceHolder>" ; } else { System . err . println ( STRING_1 ) ; } reader . METHOD_12 ( ) ; } read ( int , javax . IDENT_1 . IDENT_5 ) { java . util . Iterator < javax . IDENT_1 . IDENT_6 > IDENT_9 = METHOD_13 ( IDENT_10 ) ; javax . IDENT_1 . IDENT_6 IDENT_11 = METHOD_6 ( IDENT_10 ) ; if ( ( header . METHOD_14 ( ) ) != ( IDENT_12 . IDENT_13 ) ) { METHOD_15 ( java . lang . String . format ( STRING_2 , header . METHOD_14 ( ) ) ) ; } int IDENT_14 = METHOD_8 ( IDENT_10 ) ; int IDENT_15 = METHOD_9 ( IDENT_10 ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_7 IDENT_8 = METHOD_16 ( param , IDENT_9 , IDENT_14 , IDENT_15 ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_17 IDENT_18 = new com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . METHOD_17 ( ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . METHOD_17 IDENT_19 = new com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . METHOD_17 ( ) ; METHOD_18 ( param , IDENT_14 , IDENT_15 , IDENT_8 , IDENT_18 , IDENT_19 ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_20 IDENT_21 = METHOD_19 ( IDENT_8 . METHOD_20 ( ) , IDENT_19 , ( param != null ? param . METHOD_21 ( ) : null ) ) ; METHOD_22 ( param , IDENT_11 . METHOD_23 ( ) , IDENT_21 . METHOD_23 ( ) ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_20 IDENT_22 = IDENT_11 . METHOD_7 ( IDENT_14 , 1 ) . METHOD_20 ( ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_23 IDENT_24 = METHOD_24 ( IDENT_22 , IDENT_18 , ( param != null ? param . METHOD_25 ( ) : null ) , ( param != null ? param . METHOD_26 ( ) : 1 ) ) ; int [ ] IDENT_25 ; int [ ] IDENT_26 ; int IDENT_27 = header . METHOD_27 ( ) ; if ( IDENT_27 == ( IDENT_12 . IDENT_28 ) ) { IDENT_25 = new int [ IDENT_15 * ( header . METHOD_28 ( ) ) ] ; IDENT_26 = new int [ IDENT_15 * ( header . METHOD_28 ( ) ) ] ; IDENT_29 . METHOD_29 ( IDENT_25 , 0 , IDENT_25 . length ) ; IDENT_29 . METHOD_29 ( IDENT_26 , 0 , IDENT_26 . length ) ; } else { IDENT_25 = null ; IDENT_26 = null ; } int IDENT_30 = ( param != null ) ? param . METHOD_26 ( ) : 1 ; int IDENT_31 = ( param != null ) ? param . METHOD_30 ( ) : 1 ; METHOD_31 ( IDENT_10 ) ; for ( int c = 0 ; c < ( header . METHOD_28 ( ) ) ; c ++ ) { com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_20 IDENT_32 = IDENT_21 . METHOD_32 ( IDENT_21 . METHOD_33 ( ) , IDENT_21 . METHOD_34 ( ) , IDENT_21 . METHOD_8 ( ) , IDENT_21 . METHOD_9 ( ) , 0 , 0 , new int [ ] { c } ) ; com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_23 IDENT_33 = IDENT_24 . METHOD_35 ( IDENT_24 . METHOD_33 ( ) , 0 , IDENT_24 . METHOD_8 ( ) , 1 , 0 , 0 , new int [ ] { c } ) ; for ( int y = 0 ; y < IDENT_15 ; y ++ ) { switch ( header . METHOD_36 ( ) ) { case 1 : byte [ ] IDENT_34 = ( ( com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_35 ) ( IDENT_22 . METHOD_37 ( ) ) ) . METHOD_38 ( c ) ; METHOD_39 ( IDENT_15 , IDENT_18 , IDENT_25 , IDENT_26 , IDENT_27 , IDENT_30 , IDENT_31 , c , IDENT_34 , IDENT_32 , IDENT_33 , y ) ; break ; case 2 : short [ ] IDENT_36 = ( ( com . IDENT_0 . IDENT_1 . plugins . IDENT_16 . IDENT_37 ) ( IDENT_22 . METHOD_37 ( ) ) ) . METHOD_38 ( c ) ; METHOD_40 ( IDENT_15 , IDENT_18 , IDENT_25 , IDENT_26 , IDENT_27 , IDENT_30 , IDENT_31 , c , IDENT_36 , IDENT_32 , IDENT_33 , y ) ; break ; default : throw new java . lang . METHOD_41 ( ) ; } METHOD_42 ( ( ( ( ( FLOAT_0 * y ) / IDENT_15 ) * c ) / ( header . METHOD_28 ( ) ) ) ) ; if ( ( ( IDENT_15 - 1 ) - y ) < ( IDENT_18 . y ) ) { break ; } if ( METHOD_43 ( ) ) { break ; } } if ( METHOD_43 ( ) ) { METHOD_44 ( ) ; break ; } } METHOD_45 ( ) ; return IDENT_8 ; }
org . junit . Assert . assertSame ( IDENT_8 , result ) 