METHOD_0 ( ) { final com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_1 ( 1 , 1000 , 0 , 0 , IDENT_7 . IDENT_8 ) ; final com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 IDENT_9 = com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_1 ( INT_0 , INT_1 , 0 , 0 , IDENT_7 . IDENT_8 ) ; final com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 IDENT_10 = com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_1 ( INT_2 , INT_3 , 0 , 0 , IDENT_7 . IDENT_8 ) ; final com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 IDENT_11 = com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_1 ( INT_4 , INT_5 , 0 , 0 , IDENT_7 . IDENT_8 ) ; IDENT_11 . METHOD_2 ( IDENT_12 . IDENT_13 , 2 ) ; final com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_14 IDENT_15 = new com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . METHOD_3 ( com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_16 . IDENT_17 . IDENT_18 ) ; java . util . List < com . IDENT_0 . IDENT_1 . common . IDENT_2 . IDENT_3 . IDENT_4 > result = IDENT_15 . METHOD_4 ( com . google . common . collect . Lists . newArrayList ( IDENT_5 , IDENT_9 , IDENT_10 , IDENT_11 ) ) ; "<AssertPlaceHolder>" ; } size ( ) { return ( IDENT_19 . size ( ) ) + ( IDENT_20 . size ( ) ) ; }
org . junit . Assert . assertEquals ( 2 , result . size ( ) ) 