METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; java . lang . String ref = STRING_2 ; "<AssertPlaceHolder>" ; } METHOD_1 ( int , java . lang . String , java . lang . String ) { if ( ( IDENT_2 . length ( ) ) < ( position + ( ref . length ( ) ) ) ) { com . IDENT_3 . IDENT_4 . common . IDENT_5 . IDENT_6 . LOGGER . warn ( STRING_3 ) ; return org . apache . logging . log4j . util . IDENT_7 . IDENT_8 ; } java . lang . String result = com . IDENT_3 . IDENT_4 . common . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_2 . substring ( ( position + 1 ) ) , IDENT_2 . substring ( ( ( ( position + 1 ) + ( ref . length ( ) ) ) - 1 ) ) , ( ( ref . length ( ) ) - 1 ) ) ; for ( int i = position ; i >= 0 ; i OP_0 ) { final java . lang . String IDENT_9 = com . IDENT_3 . IDENT_4 . common . IDENT_5 . IDENT_6 . METHOD_2 ( IDENT_2 . substring ( i ) , IDENT_2 . substring ( ( ( i + ( ref . length ( ) ) ) - 1 ) ) , ( ( ref . length ( ) ) - 1 ) ) ; if ( ( IDENT_9 . length ( ) ) > ( result . length ( ) ) ) { result = IDENT_9 ; } else { return result ; } } return result ; }
org . junit . Assert . assertEquals ( IDENT_0 , com . IDENT_3 . IDENT_4 . common . IDENT_5 . IDENT_6 . METHOD_1 ( 0 , IDENT_1 , ref ) ) 