METHOD_0 ( ) { java . util . List < org . IDENT_0 . model . core . IDENT_1 < java . lang . Integer , java . lang . Integer > > IDENT_2 = new java . util . ArrayList < org . IDENT_0 . model . core . IDENT_1 < java . lang . Integer , java . lang . Integer > > ( ) ; java . util . List < org . IDENT_0 . model . core . IDENT_1 < java . lang . Integer , java . lang . Integer > > IDENT_3 = new java . util . ArrayList < org . IDENT_0 . model . core . IDENT_1 < java . lang . Integer , java . lang . Integer > > ( ) ; java . util . List < org . IDENT_0 . model . core . IDENT_4 < java . lang . Integer , java . lang . Integer > > IDENT_5 = new java . util . ArrayList < org . IDENT_0 . model . core . IDENT_4 < java . lang . Integer , java . lang . Integer > > ( ) ; IDENT_2 . add ( IDENT_6 ) ; IDENT_2 . add ( IDENT_7 ) ; IDENT_2 . add ( IDENT_8 ) ; IDENT_2 . add ( IDENT_9 ) ; IDENT_2 . add ( IDENT_10 ) ; IDENT_5 . add ( IDENT_11 ) ; IDENT_5 . add ( IDENT_12 ) ; IDENT_3 . add ( IDENT_7 ) ; IDENT_3 . add ( IDENT_9 ) ; IDENT_3 . add ( IDENT_10 ) ; org . IDENT_0 . util . core . IDENT_13 . METHOD_1 ( IDENT_2 , IDENT_5 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( int [ ] ) { for ( int i = array . length ; ( i OP_0 ) > 0 ; ) { if ( ! ( contains ( array [ i ] ) ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( IDENT_3 . METHOD_2 ( IDENT_2 ) ) 