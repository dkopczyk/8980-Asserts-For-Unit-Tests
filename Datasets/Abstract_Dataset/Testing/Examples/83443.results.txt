METHOD_0 ( ) { "<AssertPlaceHolder>" ; } METHOD_1 ( double ) { double ret ; if ( ( java . lang . Double . METHOD_2 ( x ) ) || ( x <= 0.0 ) ) { ret = Double . IDENT_0 ; } else if ( x < FLOAT_0 ) { return ( org . hipparchus . IDENT_1 . IDENT_2 . METHOD_3 ( x ) ) - ( org . hipparchus . util . IDENT_3 . log ( x ) ) ; } else if ( x <= FLOAT_1 ) { return org . hipparchus . IDENT_1 . IDENT_2 . METHOD_3 ( ( ( x - FLOAT_0 ) - FLOAT_0 ) ) ; } else if ( x <= FLOAT_2 ) { final int n = ( ( int ) ( org . hipparchus . util . IDENT_3 . METHOD_4 ( ( x - FLOAT_3 ) ) ) ) ; double IDENT_4 = 1.0 ; for ( int i = 1 ; i <= n ; i ++ ) { IDENT_4 OP_0 x - i ; } return ( org . hipparchus . IDENT_1 . IDENT_2 . METHOD_3 ( ( x - ( n + 1 ) ) ) ) + ( org . hipparchus . util . IDENT_3 . log ( IDENT_4 ) ) ; } else { double IDENT_5 = org . hipparchus . IDENT_1 . IDENT_2 . METHOD_5 ( x ) ; double IDENT_6 = ( x + ( org . hipparchus . IDENT_1 . IDENT_2 . IDENT_7 ) ) + FLOAT_0 ; ret = ( ( ( ( x + FLOAT_0 ) * ( org . hipparchus . util . IDENT_3 . log ( IDENT_6 ) ) ) - IDENT_6 ) + ( org . hipparchus . IDENT_1 . IDENT_2 . IDENT_8 ) ) + ( org . hipparchus . util . IDENT_3 . log ( ( IDENT_5 / x ) ) ) ; } return ret ; }
org . junit . Assert . assertTrue ( java . lang . Double . METHOD_2 ( org . hipparchus . IDENT_1 . IDENT_2 . METHOD_1 ( 0.0 ) ) ) 