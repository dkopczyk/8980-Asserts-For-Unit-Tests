METHOD_0 ( ) { org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_2 [ ] l = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_2 [ ] { new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_1 ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( 0.0 , FLOAT_0 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( 1.0 , FLOAT_0 ) , FLOAT_1 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_1 ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( ( - FLOAT_2 ) , 0.0 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( ( - FLOAT_2 ) , 1.0 ) , FLOAT_1 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_1 ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( ( - FLOAT_3 ) , FLOAT_4 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( ( - FLOAT_5 ) , ( - FLOAT_6 ) ) , FLOAT_1 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_1 ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( 0.0 , 2.0 ) , new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 ( 1.0 , 2.0 ) , FLOAT_1 ) } ; org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_6 = new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_3 ( l [ 0 ] , new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_4 ( METHOD_5 ( l [ 0 ] , l [ 1 ] ) , METHOD_5 ( l [ 0 ] , l [ 2 ] ) , FLOAT_1 ) ) , new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( Boolean . IDENT_8 ) , new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( Boolean . IDENT_9 ) , null ) ; org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_10 = new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_3 ( l [ 1 ] , new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_4 ( METHOD_5 ( l [ 1 ] , l [ 2 ] ) , METHOD_5 ( l [ 1 ] , l [ 3 ] ) , FLOAT_1 ) ) , IDENT_6 , new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( Boolean . IDENT_9 ) , null ) ; org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_11 = new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_3 ( l [ 2 ] , new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_4 ( METHOD_5 ( l [ 2 ] , l [ 3 ] ) , Double . IDENT_12 , FLOAT_1 ) ) , IDENT_10 , new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( Boolean . IDENT_9 ) , null ) ; org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > IDENT_13 = new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( l [ 3 ] . METHOD_6 ( ) , IDENT_11 , new org . hipparchus . geometry . IDENT_3 . IDENT_4 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ( Boolean . IDENT_9 ) , null ) ; org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_14 set = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_7 ( IDENT_13 , FLOAT_1 ) ; "<AssertPlaceHolder>" ; } METHOD_8 ( ) { if ( ( IDENT_15 ) == null ) { if ( ( METHOD_9 ( false ) . METHOD_10 ( ) ) == null ) { IDENT_15 = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ 0 ] [ ] ; } else { final org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_7 . IDENT_16 IDENT_17 = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_7 . METHOD_11 ( METHOD_12 ( ) ) ; METHOD_9 ( true ) . METHOD_13 ( IDENT_17 ) ; final java . util . List < org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_7 . IDENT_18 > IDENT_19 = IDENT_17 . METHOD_14 ( ) ; int IDENT_20 = IDENT_19 . size ( ) ; IDENT_20 OP_0 METHOD_15 ( IDENT_19 ) ; if ( IDENT_20 > 0 ) { IDENT_20 OP_0 METHOD_16 ( IDENT_19 ) ; } if ( IDENT_20 > 0 ) { IDENT_20 OP_0 METHOD_17 ( IDENT_19 ) ; } final java . util . ArrayList < java . util . List < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 > > IDENT_22 = new java . util . ArrayList < java . util . List < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 > > ( ) ; for ( org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_7 . IDENT_18 s = METHOD_18 ( IDENT_19 ) ; s != null ; s = METHOD_18 ( IDENT_19 ) ) { final java . util . List < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 > IDENT_23 = METHOD_19 ( s ) ; if ( IDENT_23 != null ) { if ( ( IDENT_23 . get ( 0 ) . METHOD_20 ( ) ) == null ) { IDENT_22 . add ( 0 , IDENT_23 ) ; } else { IDENT_22 . add ( IDENT_23 ) ; } } } IDENT_15 = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ IDENT_22 . size ( ) ] [ ] ; int i = 0 ; for ( final java . util . List < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 > IDENT_23 : IDENT_22 ) { if ( ( ( IDENT_23 . size ( ) ) < 2 ) || ( ( ( ( IDENT_23 . size ( ) ) == 2 ) && ( ( IDENT_23 . get ( 0 ) . METHOD_20 ( ) ) == null ) ) && ( ( IDENT_23 . get ( 1 ) . METHOD_21 ( ) ) == null ) ) ) { final org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_1 line = IDENT_23 . get ( 0 ) . METHOD_22 ( ) ; IDENT_15 [ ( i ++ ) ] = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ ] { null , line . METHOD_23 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_7 . IDENT_25 > ) ( new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_24 ( ( - ( IDENT_26 . MAX_VALUE ) ) ) ) ) ) , line . METHOD_23 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_7 . IDENT_25 > ) ( new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_24 ( ( + ( IDENT_26 . MAX_VALUE ) ) ) ) ) ) } ; } else if ( ( IDENT_23 . get ( 0 ) . METHOD_20 ( ) ) == null ) { final org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ ] array = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ ( IDENT_23 . size ( ) ) + 2 ] ; int j = 0 ; for ( org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 IDENT_27 : IDENT_23 ) { if ( j == 0 ) { double x = IDENT_27 . METHOD_22 ( ) . METHOD_25 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ) ( IDENT_27 . METHOD_21 ( ) ) ) ) . METHOD_26 ( ) ; x OP_0 org . hipparchus . util . IDENT_28 . max ( 1.0 , org . hipparchus . util . IDENT_28 . METHOD_27 ( ( x / 2 ) ) ) ; array [ ( j ++ ) ] = null ; array [ ( j ++ ) ] = IDENT_27 . METHOD_22 ( ) . METHOD_23 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_7 . IDENT_25 > ) ( new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_24 ( x ) ) ) ) ; } if ( j < ( ( array . length ) - 1 ) ) { array [ ( j ++ ) ] = IDENT_27 . METHOD_21 ( ) ; } if ( j == ( ( array . length ) - 1 ) ) { double x = IDENT_27 . METHOD_22 ( ) . METHOD_25 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_5 > ) ( IDENT_27 . METHOD_20 ( ) ) ) ) . METHOD_26 ( ) ; x += org . hipparchus . util . IDENT_28 . max ( 1.0 , org . hipparchus . util . IDENT_28 . METHOD_27 ( ( x / 2 ) ) ) ; array [ ( j ++ ) ] = IDENT_27 . METHOD_22 ( ) . METHOD_23 ( ( ( org . hipparchus . geometry . IDENT_24 < org . hipparchus . geometry . IDENT_0 . IDENT_7 . IDENT_25 > ) ( new org . hipparchus . geometry . IDENT_0 . IDENT_7 . METHOD_24 ( x ) ) ) ) ; } } IDENT_15 [ ( i ++ ) ] = array ; } else { final org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ ] array = new org . hipparchus . geometry . IDENT_0 . IDENT_1 . METHOD_2 [ IDENT_23 . size ( ) ] ; int j = 0 ; for ( org . hipparchus . geometry . IDENT_0 . IDENT_1 . IDENT_21 IDENT_27 : IDENT_23 ) { array [ ( j ++ ) ] = IDENT_27 . METHOD_20 ( ) ; } IDENT_15 [ ( i ++ ) ] = array ; } } } } return IDENT_15 . METHOD_28 ( ) ; }
org . junit . Assert . assertEquals ( 0 , set . METHOD_8 ( ) . length ) 