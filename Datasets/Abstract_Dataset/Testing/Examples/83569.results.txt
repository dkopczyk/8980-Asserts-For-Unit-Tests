METHOD_0 ( ) { org . hipparchus . analysis . IDENT_0 f = new org . hipparchus . analysis . METHOD_1 ( ) { public double value ( double x ) { if ( x < 0 ) { throw new org . hipparchus . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 ( ) ; } return 0 ; } } ; org . hipparchus . IDENT_1 . IDENT_2 . IDENT_4 IDENT_5 = new org . hipparchus . IDENT_1 . IDENT_2 . METHOD_3 ( FLOAT_0 , FLOAT_1 ) ; org . hipparchus . random . IDENT_6 g = new org . hipparchus . random . METHOD_4 ( ) ; g . METHOD_5 ( INT_0 ) ; org . hipparchus . IDENT_1 . IDENT_2 . IDENT_7 IDENT_8 = new org . hipparchus . IDENT_1 . IDENT_2 . METHOD_6 ( IDENT_5 , 5 , g ) ; try { IDENT_8 . METHOD_7 ( new org . hipparchus . IDENT_1 . METHOD_8 ( INT_1 ) , new org . hipparchus . IDENT_1 . IDENT_2 . METHOD_9 ( f ) , IDENT_9 . IDENT_10 , new org . hipparchus . IDENT_1 . IDENT_2 . METHOD_10 ( ( - FLOAT_2 ) , ( - FLOAT_3 ) ) ) ; org . junit . Assert . fail ( ) ; } catch ( org . hipparchus . IDENT_1 . IDENT_2 . IDENT_3 . METHOD_2 e ) { } "<AssertPlaceHolder>" ; } METHOD_11 ( ) { java . util . Collections . METHOD_12 ( IDENT_11 , METHOD_13 ( ) ) ; return IDENT_11 . toArray ( new org . hipparchus . IDENT_1 . IDENT_12 [ 0 ] ) ; }
org . junit . Assert . assertTrue ( ( ( IDENT_8 . METHOD_11 ( ) [ 0 ] ) == null ) ) 