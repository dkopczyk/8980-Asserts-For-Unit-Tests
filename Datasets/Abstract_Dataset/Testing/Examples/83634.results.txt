METHOD_0 ( ) { java . util . List < com . IDENT_0 . sdk . group . IDENT_1 > IDENT_2 = new java . util . IDENT_3 < com . IDENT_0 . sdk . group . IDENT_1 > ( ) ; com . IDENT_4 . IDENT_5 . plugin . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 IDENT_10 = new com . IDENT_4 . IDENT_5 . plugin . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_1 ( IDENT_2 ) ; when ( IDENT_11 . iterator ( ) ) . thenReturn ( IDENT_10 ) ; when ( IDENT_12 . METHOD_2 ( ) ) . thenReturn ( IDENT_11 ) ; com . IDENT_4 . IDENT_5 . plugin . IDENT_6 . IDENT_7 . IDENT_8 . IDENT_13 IDENT_14 = new com . IDENT_4 . IDENT_5 . plugin . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_3 ( app , IDENT_12 ) ; java . util . List < com . IDENT_4 . IDENT_5 . spi . IDENT_15 . IDENT_16 > IDENT_17 = IDENT_14 . METHOD_4 ( IDENT_18 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . IDENT_4 . IDENT_5 . spi . security . IDENT_19 ) { com . IDENT_0 . sdk . IDENT_12 . IDENT_20 IDENT_12 = METHOD_5 ( IDENT_18 ) ; final java . util . List < com . IDENT_4 . IDENT_5 . spi . IDENT_15 . IDENT_16 > IDENT_21 = new java . util . ArrayList < com . IDENT_4 . IDENT_5 . spi . IDENT_15 . IDENT_16 > ( ) ; if ( IDENT_12 != null ) { for ( com . IDENT_0 . sdk . group . IDENT_1 group : IDENT_12 . METHOD_2 ( ) ) { IDENT_21 . add ( new com . IDENT_4 . IDENT_5 . spi . IDENT_15 . METHOD_6 ( group . getName ( ) ) ) ; } } return IDENT_21 ; }
org . junit . Assert . assertTrue ( IDENT_17 . isEmpty ( ) ) 