METHOD_0 ( ) { java . util . ArrayList < java . lang . Thread > IDENT_0 = new java . util . ArrayList < java . lang . Thread > ( ) ; final java . util . concurrent . atomic . IDENT_1 < java . lang . String > IDENT_2 = new java . util . concurrent . atomic . IDENT_1 < java . lang . String > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { java . lang . Thread t = new java . lang . Thread ( ) { public void run ( ) { try { java . io . File d = new java . io . File ( IDENT_3 . IDENT_4 , ( STRING_0 + ( getId ( ) ) ) ) ; IDENT_3 . METHOD_1 ( ( STRING_1 + ( d . getAbsolutePath ( ) ) ) ) ; for ( int j = 0 ; j < 10 ; j ++ ) { java . io . File f = new java . io . File ( d , ( STRING_2 + j ) ) ; final java . lang . String IDENT_5 = ( ( STRING_3 + ( getId ( ) ) ) + " " ) + j ; IDENT_3 . METHOD_2 ( f , IDENT_5 ) ; } for ( int j = 0 ; j < 10 ; j ++ ) { java . io . File f = new java . io . File ( d , ( STRING_2 + j ) ) ; IDENT_3 . METHOD_1 ( ( STRING_4 + ( f . getAbsolutePath ( ) ) ) ) ; IDENT_3 . METHOD_1 ( ( STRING_5 + ( f . getAbsolutePath ( ) ) ) ) ; } IDENT_3 . METHOD_1 ( ( STRING_6 + ( d . getAbsolutePath ( ) ) ) ) ; } catch ( java . io . IOException IDENT_6 ) { IDENT_2 . set ( java . lang . String . format ( STRING_7 , org . apache . hadoop . util . StringUtils . METHOD_3 ( IDENT_6 ) ) ) ; } } } ; t . start ( ) ; IDENT_0 . add ( t ) ; } for ( java . lang . Thread t : IDENT_0 ) { try { t . join ( ) ; } catch ( java . lang . IDENT_7 IDENT_6 ) { org . junit . Assert . fail ( ( STRING_8 + ( IDENT_6 . getMessage ( ) ) ) ) ; } } "<AssertPlaceHolder>" ; } get ( ) { return count ; }
org . junit . Assert . assertNull ( IDENT_2 . get ( ) , IDENT_2 . get ( ) ) 