METHOD_0 ( ) { java . lang . String IDENT_0 = IDENT_1 ; IDENT_2 = true ; long IDENT_3 = 0 ; int IDENT_4 = METHOD_1 ( IDENT_0 , org . apache . hadoop . hdfs . IDENT_5 . IDENT_6 , org . apache . hadoop . hdfs . IDENT_5 . IDENT_7 , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , int , int , long ) { int IDENT_8 = 0 ; long IDENT_9 = 0 ; org . apache . hadoop . fs . IDENT_10 out = null ; byte [ ] IDENT_11 = new byte [ org . apache . hadoop . hdfs . IDENT_5 . IDENT_12 ] ; byte [ ] IDENT_13 = new byte [ org . apache . hadoop . hdfs . IDENT_5 . IDENT_12 ] ; for ( int i = 0 ; i < ( org . apache . hadoop . hdfs . IDENT_5 . IDENT_12 ) ; i ++ ) { IDENT_11 [ i ] = ( ( byte ) ( i & 255 ) ) ; } try { org . apache . hadoop . fs . Path path = METHOD_2 ( IDENT_0 ) ; long IDENT_14 = 0 ; if ( METHOD_3 ( path ) ) { if ( IDENT_15 ) { out = ( IDENT_16 ) ? IDENT_17 . create ( path , java . util . IDENT_18 . of ( IDENT_19 . IDENT_20 ) ) : IDENT_21 . create ( path , IDENT_15 ) ; org . apache . hadoop . hdfs . IDENT_5 . LOG . info ( ( STRING_0 7 + path ) ) ; } else { out = ( IDENT_16 ) ? IDENT_17 . create ( path , java . util . IDENT_18 . of ( IDENT_19 . IDENT_22 ) ) : IDENT_21 . append ( path ) ; IDENT_14 = METHOD_4 ( path ) ; org . apache . hadoop . hdfs . IDENT_5 . LOG . info ( ( ( ( STRING_0 5 + IDENT_14 ) + STRING_1 ) + path ) ) ; } } else { out = ( IDENT_16 ) ? IDENT_17 . create ( path , java . util . IDENT_18 . of ( IDENT_19 . IDENT_23 ) ) : IDENT_21 . create ( path ) ; } long IDENT_24 = IDENT_14 ; long IDENT_25 = IDENT_14 ; long IDENT_26 = 0 ; boolean IDENT_27 ; for ( int i = 0 ; i < IDENT_28 ; i ++ ) { IDENT_27 = ( i OP_0 2 ) == 0 ; METHOD_5 ( out , IDENT_11 , IDENT_29 ) ; IDENT_24 += IDENT_29 ; if ( IDENT_27 ) { out . METHOD_6 ( ) ; IDENT_25 += IDENT_29 + IDENT_26 ; IDENT_26 = 0 ; } else { IDENT_26 += IDENT_29 ; } if ( IDENT_30 ) { org . apache . hadoop . hdfs . IDENT_5 . LOG . info ( ( ( ( ( ( ( ( STRING_0 2 + IDENT_29 ) + STRING_2 ) + IDENT_24 ) + STRING_3 ) + IDENT_25 ) + STRING_0 0 ) + IDENT_0 ) ) ; } IDENT_9 = METHOD_7 ( IDENT_0 , IDENT_13 , IDENT_25 , IDENT_31 ) ; java . lang . String IDENT_32 = ( ( ( ( ( ( STRING_0 3 + IDENT_24 ) + STRING_0 6 ) + IDENT_25 ) + STRING_4 ) + IDENT_9 ) + STRING_0 9 ) + IDENT_0 ; if ( ( IDENT_9 >= IDENT_25 ) && ( IDENT_9 <= IDENT_24 ) ) { IDENT_32 = ( STRING_0 8 + IDENT_32 ) + STRING_0 4 ; } else { IDENT_8 ++ ; IDENT_32 = ( STRING_5 + IDENT_32 ) + STRING_6 ; if ( IDENT_33 ) { throw new java . io . IOException ( IDENT_32 ) ; } } org . apache . hadoop . hdfs . IDENT_5 . LOG . info ( IDENT_32 ) ; } METHOD_5 ( out , IDENT_11 , IDENT_29 ) ; IDENT_24 += IDENT_29 ; IDENT_25 += IDENT_29 + IDENT_26 ; IDENT_26 += 0 ; out . close ( ) ; IDENT_9 = METHOD_7 ( IDENT_0 , IDENT_13 , IDENT_25 , IDENT_31 ) ; java . lang . String IDENT_34 = ( ( ( ( ( ( STRING_0 3 + IDENT_24 ) + STRING_0 6 ) + IDENT_25 ) + STRING_4 ) + IDENT_9 ) + STRING_0 9 ) + IDENT_0 ; java . lang . String IDENT_32 ; if ( ( IDENT_9 >= IDENT_25 ) && ( IDENT_9 <= IDENT_24 ) ) { IDENT_32 = ( STRING_7 + IDENT_34 ) + STRING_0 4 ; } else { IDENT_8 ++ ; IDENT_32 = ( STRING_8 + IDENT_34 ) + STRING_6 ; org . apache . hadoop . hdfs . IDENT_5 . LOG . info ( IDENT_32 ) ; if ( IDENT_33 ) { throw new java . io . IOException ( IDENT_32 ) ; } } long IDENT_35 = METHOD_4 ( path ) ; if ( IDENT_35 != IDENT_9 ) { IDENT_32 = ( STRING_0 1 + IDENT_34 ) + STRING_6 ; throw new java . io . IOException ( IDENT_32 ) ; } } catch ( java . io . IOException e ) { throw new java . io . IOException ( ( ( STRING_0 + STRING_9 ) + IDENT_9 ) , e ) ; } finally { if ( out != null ) { out . close ( ) ; } } return - IDENT_8 ; }
org . junit . Assert . assertEquals ( 0 , IDENT_4 ) 