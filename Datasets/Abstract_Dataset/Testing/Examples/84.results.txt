METHOD_0 ( ) { java . util . Map < java . lang . String , java . lang . String > IDENT_0 = new java . util . IDENT_1 < java . lang . String , java . lang . String > ( ) ; IDENT_0 . put ( org . springframework . data . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 , ( ( org . springframework . data . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_6 ) + STRING_0 ) ) ; java . util . Map < java . lang . String , java . util . List < java . lang . String > > IDENT_7 = org . springframework . data . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_1 ( IDENT_0 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_9 = org . springframework . data . IDENT_2 . IDENT_3 . IDENT_8 . METHOD_2 ( IDENT_7 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . Map ) { final java . util . Map < java . lang . String , java . lang . String > attributes = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; for ( Map . Entry < java . lang . String , java . util . List < java . lang . String > > entry : IDENT_10 . entrySet ( ) ) { java . util . List < java . lang . String > values = entry . getValue ( ) ; if ( ( values . size ( ) ) == 1 ) { attributes . put ( entry . getKey ( ) , values . get ( 0 ) ) ; } else { java . util . Collections . METHOD_3 ( values , org . springframework . data . IDENT_2 . IDENT_3 . IDENT_8 . IDENT_11 ) ; java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; for ( java . lang . String IDENT_12 : values ) { java . util . regex . IDENT_13 m = org . springframework . data . IDENT_2 . IDENT_3 . IDENT_8 . IDENT_14 . matcher ( IDENT_12 ) ; if ( m . find ( ) ) { builder . append ( m . group ( 1 ) ) ; } else { throw new org . springframework . dao . METHOD_4 ( STRING_1 ) ; } } attributes . put ( entry . getKey ( ) , builder . toString ( ) ) ; } } return attributes ; }
org . junit . Assert . assertEquals ( IDENT_9 . size ( ) , IDENT_0 . size ( ) ) 