METHOD_0 ( ) { org . apache . hadoop . yarn . client . api . IDENT_0 client = mock ( org . apache . hadoop . yarn . client . api . IDENT_0 . class ) ; when ( client . METHOD_1 ( ) ) . thenReturn ( java . util . Arrays . asList ( org . apache . hadoop . yarn . api . records . IDENT_1 . newInstance ( STRING_0 ) , org . apache . hadoop . yarn . api . records . IDENT_1 . newInstance ( STRING_1 ) ) ) ; org . apache . hadoop . yarn . client . cli . IDENT_2 cli = new org . apache . hadoop . yarn . client . cli . METHOD_2 ( ) ; cli . METHOD_3 ( client ) ; cli . METHOD_4 ( IDENT_3 ) ; cli . METHOD_5 ( IDENT_4 ) ; METHOD_2 . IDENT_5 = mock ( org . apache . hadoop . yarn . IDENT_6 . IDENT_7 . class ) ; when ( METHOD_2 . IDENT_5 . METHOD_1 ( ) ) . thenReturn ( java . util . Arrays . asList ( org . apache . hadoop . yarn . api . records . IDENT_1 . newInstance ( STRING_2 ) , org . apache . hadoop . yarn . api . records . IDENT_1 . newInstance ( STRING_3 ) ) ) ; int IDENT_8 = cli . run ( new java . lang . String [ ] { METHOD_2 . IDENT_9 , STRING_4 + ( METHOD_2 . IDENT_10 ) , STRING_4 + ( METHOD_2 . IDENT_11 ) } ) ; "<AssertPlaceHolder>" ; java . io . ByteArrayOutputStream IDENT_12 = new java . io . ByteArrayOutputStream ( ) ; java . io . IDENT_13 IDENT_14 = new java . io . METHOD_6 ( IDENT_12 ) ; IDENT_14 . METHOD_7 ( STRING_5 ) ; IDENT_14 . close ( ) ; verify ( IDENT_3 ) . println ( IDENT_12 . toString ( STRING_6 ) ) ; } run ( java . util . Collection , org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_16 , org . apache . hadoop . conf . Configuration ) { final long IDENT_17 = ( ( conf . METHOD_8 ( IDENT_18 . IDENT_19 , IDENT_18 . IDENT_20 ) ) * INT_0 ) + ( ( conf . METHOD_8 ( IDENT_18 . IDENT_21 , IDENT_18 . IDENT_22 ) ) * 1000 ) ; org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_23 . LOG . info ( ( STRING_7 + IDENT_24 ) ) ; org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_23 . LOG . info ( ( STRING_8 + p ) ) ; System . out . println ( STRING_9 ) ; java . util . List < org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_25 > IDENT_26 = java . util . Collections . emptyList ( ) ; try { IDENT_26 = org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_25 . METHOD_9 ( IDENT_24 , org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_23 . class . METHOD_10 ( ) , org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_23 . IDENT_27 , conf , p . IDENT_28 ) ; boolean IDENT_29 = false ; for ( int IDENT_30 = 0 ; ! IDENT_29 ; IDENT_30 ++ ) { IDENT_29 = true ; java . util . Collections . METHOD_11 ( IDENT_26 ) ; for ( org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_25 IDENT_31 : IDENT_26 ) { final org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_23 b = new org . apache . hadoop . hdfs . server . IDENT_15 . METHOD_12 ( IDENT_31 , p , conf ) ; final org . apache . hadoop . hdfs . server . IDENT_15 . METHOD_12 . Result r = b . METHOD_13 ( ) ; r . METHOD_7 ( IDENT_30 , System . out ) ; b . METHOD_14 ( conf ) ; if ( ( r . IDENT_32 ) == ( IDENT_33 . IDENT_34 ) ) { IDENT_29 = false ; } else if ( ( r . IDENT_32 ) != ( IDENT_33 . IDENT_35 ) ) { return r . IDENT_32 . METHOD_15 ( ) ; } } if ( ! IDENT_29 ) { java . lang . Thread . sleep ( IDENT_17 ) ; } } } finally { for ( org . apache . hadoop . hdfs . server . IDENT_15 . IDENT_25 IDENT_31 : IDENT_26 ) { org . apache . hadoop . io . IDENT_36 . METHOD_16 ( org . apache . hadoop . hdfs . server . IDENT_15 . METHOD_12 . LOG , IDENT_31 ) ; } } return IDENT_33 . IDENT_35 . METHOD_15 ( ) ; }
org . junit . Assert . assertEquals ( 0 , IDENT_8 ) 