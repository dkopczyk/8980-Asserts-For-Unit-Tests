METHOD_0 ( ) { java . util . List < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > IDENT_4 = com . IDENT_0 . IDENT_1 . streams . IDENT_2 . util . IDENT_5 . METHOD_1 ( 10 ) ; for ( com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 IDENT_2 : IDENT_4 ) { IDENT_6 . store ( IDENT_2 ) ; } java . util . Collections . METHOD_2 ( IDENT_4 , new java . util . IDENT_7 < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > ( ) { @ com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . hbase . Override public int compare ( com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 IDENT_8 , com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 IDENT_9 ) { return java . lang . Long . valueOf ( ( ( IDENT_8 . METHOD_3 ( ) ) - ( IDENT_9 . METHOD_3 ( ) ) ) ) . METHOD_4 ( ) ; } } ) ; com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . IDENT_10 < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > criteria = new com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . METHOD_5 ( com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 . class ) ; criteria . METHOD_6 ( IDENT_4 . get ( 2 ) . METHOD_3 ( ) ) ; criteria . METHOD_7 ( IDENT_4 . get ( 6 ) . METHOD_3 ( ) ) ; criteria . METHOD_8 ( 3 ) ; criteria . METHOD_9 ( true ) ; java . util . List < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > IDENT_11 = IDENT_4 . METHOD_10 ( 3 , 6 ) ; java . util . Collections . METHOD_2 ( IDENT_11 , new java . util . IDENT_7 < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > ( ) { @ com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . hbase . Override public int compare ( com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 IDENT_8 , com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 IDENT_9 ) { return java . lang . Long . valueOf ( ( ( IDENT_9 . METHOD_3 ( ) ) - ( IDENT_8 . METHOD_3 ( ) ) ) ) . METHOD_4 ( ) ; } } ) ; java . util . List < com . IDENT_0 . IDENT_1 . streams . IDENT_2 . IDENT_3 > IDENT_12 = IDENT_6 . METHOD_11 ( criteria ) ; "<AssertPlaceHolder>" ; } METHOD_11 ( com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . IDENT_13 ) { java . util . List < T > entities = new java . util . ArrayList ( ) ; com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . hbase . IDENT_14 . LOG . debug ( STRING_0 , criteria ) ; try { com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . hbase . IDENT_15 < T > IDENT_16 = IDENT_17 . METHOD_12 ( criteria ) ; com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . hbase . IDENT_14 . LOG . debug ( STRING_1 , IDENT_16 ) ; if ( IDENT_16 != null ) { byte [ ] IDENT_18 = IDENT_16 . METHOD_13 ( ) ; byte [ ] IDENT_19 = IDENT_16 . METHOD_14 ( ) ; org . apache . hadoop . hbase . client . IDENT_20 IDENT_21 ; if ( criteria . METHOD_15 ( ) ) { IDENT_21 = new org . apache . hadoop . hbase . client . METHOD_16 ( IDENT_19 , IDENT_18 ) ; IDENT_21 . METHOD_17 ( true ) ; } else { IDENT_21 = new org . apache . hadoop . hbase . client . METHOD_16 ( IDENT_18 , IDENT_19 ) ; } IDENT_21 . METHOD_18 ( IDENT_16 . METHOD_19 ( ) ) ; org . apache . hadoop . hbase . client . IDENT_22 IDENT_23 = IDENT_24 . get ( IDENT_16 . METHOD_20 ( ) . METHOD_21 ( ) ) . get ( ) . METHOD_22 ( IDENT_21 ) ; for ( org . apache . hadoop . hbase . client . Result result : IDENT_23 ) { entities . add ( IDENT_16 . METHOD_20 ( ) . entity ( result ) ) ; } } } catch ( java . io . IOException ex ) { throw new com . IDENT_0 . IDENT_1 . streams . IDENT_2 . store . METHOD_23 ( STRING_2 , ex ) ; } return entities ; }
org . junit . Assert . assertEquals ( IDENT_11 , IDENT_12 ) 