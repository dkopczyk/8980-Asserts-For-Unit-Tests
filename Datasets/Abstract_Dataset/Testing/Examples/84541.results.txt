METHOD_0 ( ) { java . util . List < org . apache . hadoop . fs . Path > IDENT_0 = com . google . common . collect . Lists . newArrayList ( path , IDENT_1 ) ; when ( IDENT_2 . METHOD_1 ( ) ) . thenReturn ( IDENT_0 ) ; java . util . List < org . apache . hadoop . fs . Path > IDENT_3 = IDENT_4 . METHOD_1 ( ) ; java . util . List < org . apache . hadoop . fs . Path > expected = com . google . common . collect . Lists . newArrayList ( path ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( ) { java . util . List < org . apache . hadoop . fs . Path > result = new java . util . ArrayList ( ) ; java . util . List < org . apache . hadoop . fs . Path > IDENT_0 = IDENT_2 . METHOD_1 ( ) ; org . apache . hadoop . fs . IDENT_5 IDENT_6 = null ; for ( org . apache . hadoop . fs . Path path : IDENT_0 ) { try { if ( IDENT_6 == null ) { IDENT_6 = path . METHOD_2 ( IDENT_7 ) ; } if ( IDENT_6 . exists ( path ) ) { result . add ( path ) ; } else { com . IDENT_8 . IDENT_9 . IDENT_10 . core . source . IDENT_11 . LOG . warn ( ( STRING_0 + ( STRING_1 + STRING_2 ) ) , path ) ; } } catch ( java . io . IOException e ) { com . IDENT_8 . IDENT_9 . IDENT_10 . core . source . IDENT_11 . LOG . warn ( STRING_3 , path , e ) ; } } return result ; }
org . junit . Assert . assertThat ( IDENT_3 , org . hamcrest . CoreMatchers . is ( expected ) ) 