METHOD_0 ( ) { java . lang . String pattern = STRING_0 ; when ( IDENT_0 . METHOD_1 ( pattern ) ) . thenReturn ( com . google . common . collect . Lists . newArrayList ( STRING_1 ) ) ; when ( IDENT_1 . METHOD_1 ( pattern ) ) . thenReturn ( com . google . common . collect . Lists . newArrayList ( STRING_2 , STRING_3 ) ) ; com . IDENT_2 . IDENT_3 . IDENT_4 . mapping . service . IDENT_5 handler = service . METHOD_2 ( ) ; java . util . List < java . lang . String > IDENT_6 = com . google . common . collect . Lists . newArrayList ( STRING_1 , STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( java . lang . String ) { java . util . function . IDENT_7 < java . lang . String , com . IDENT_2 . IDENT_3 . IDENT_4 . mapping . model . IDENT_8 , java . lang . Boolean > filter = ( database , mapping ) -> { boolean IDENT_9 = mapping . equals ( IDENT_10 ) ; boolean IDENT_11 = IDENT_12 . METHOD_4 ( ) . contains ( database ) ; return IDENT_9 || IDENT_11 ; } ; java . util . Map < com . IDENT_2 . IDENT_3 . IDENT_4 . mapping . model . IDENT_8 , java . lang . String > IDENT_13 = new java . util . METHOD_5 ( ) ; for ( com . IDENT_2 . IDENT_3 . IDENT_4 . mapping . model . IDENT_8 mapping : METHOD_6 ( ) ) { IDENT_13 . put ( mapping , pattern ) ; } return super . METHOD_3 ( IDENT_13 , filter ) ; }
org . junit . Assert . assertThat ( handler . METHOD_3 ( pattern ) , org . hamcrest . CoreMatchers . is ( IDENT_6 ) ) 