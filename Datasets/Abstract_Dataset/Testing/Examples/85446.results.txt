METHOD_0 ( ) { java . lang . String IDENT_0 = STRING_0 ; java . lang . String IDENT_1 = STRING_1 ; org . apache . hadoop . hbase . filter . IDENT_2 IDENT_3 = new org . apache . hadoop . hbase . filter . METHOD_1 ( STRING_2 ) ; IDENT_3 . METHOD_2 ( new org . apache . hadoop . hbase . filter . METHOD_3 ( IDENT_0 ) ) ; IDENT_3 . METHOD_2 ( new org . apache . hadoop . hbase . filter . METHOD_3 ( IDENT_1 ) ) ; org . apache . hadoop . hbase . filter . IDENT_4 info = new org . apache . hadoop . hbase . filter . METHOD_4 ( IDENT_3 . getName ( ) , null , null , false ) ; org . apache . hadoop . hbase . IDENT_5 . IDENT_6 IDENT_7 = org . apache . hadoop . hbase . IDENT_5 . IDENT_6 . METHOD_5 ( info , org . apache . hadoop . hbase . filter . IDENT_8 . IDENT_9 . METHOD_6 ( ) , org . apache . hadoop . hbase . filter . IDENT_8 . IDENT_9 . METHOD_7 ( ) , IDENT_3 ) ; java . util . List < java . lang . String > IDENT_10 = METHOD_8 ( 100 , STRING_3 ) ; java . util . List < java . lang . String > IDENT_11 = METHOD_8 ( INT_0 , STRING_4 ) ; long IDENT_12 = 3 ; java . util . List < org . apache . hadoop . hbase . filter . IDENT_13 > IDENT_14 = new java . util . ArrayList < org . apache . hadoop . hbase . filter . IDENT_13 > ( ) ; java . util . Map < java . lang . String , java . util . List < org . apache . hadoop . hbase . filter . IDENT_13 > > IDENT_15 = new java . util . HashMap < java . lang . String , java . util . List < org . apache . hadoop . hbase . filter . IDENT_13 > > ( ) ; IDENT_15 . put ( STRING_5 , new java . util . ArrayList < org . apache . hadoop . hbase . filter . IDENT_13 > ( ) ) ; IDENT_15 . put ( STRING_6 , new java . util . ArrayList < org . apache . hadoop . hbase . filter . IDENT_13 > ( ) ) ; IDENT_15 . put ( STRING_7 , new java . util . ArrayList < org . apache . hadoop . hbase . filter . IDENT_13 > ( ) ) ; java . lang . String IDENT_16 = STRING_8 ; for ( java . lang . String row : IDENT_10 ) { org . apache . hadoop . hbase . client . IDENT_17 p = new org . apache . hadoop . hbase . client . METHOD_9 ( org . apache . hadoop . hbase . util . IDENT_18 . METHOD_10 ( row ) ) ; p . METHOD_11 ( false ) ; for ( java . lang . String column : IDENT_11 ) { for ( long IDENT_19 = 1 ; IDENT_19 <= IDENT_12 ; IDENT_19 ++ ) { double IDENT_20 = java . lang . Math . random ( ) ; org . apache . hadoop . hbase . filter . IDENT_13 IDENT_21 ; if ( IDENT_20 < FLOAT_0 ) IDENT_21 = org . apache . hadoop . hbase . filter . IDENT_22 . create ( row , IDENT_0 , column , IDENT_19 , IDENT_16 ) ; else IDENT_21 = org . apache . hadoop . hbase . filter . IDENT_22 . create ( row , IDENT_1 , column , IDENT_19 , IDENT_16 ) ; p . add ( IDENT_21 ) ; IDENT_14 . add ( IDENT_21 ) ; for ( java . lang . String s : IDENT_15 . METHOD_12 ( ) ) { if ( column . startsWith ( s ) ) { IDENT_15 . get ( s ) . add ( IDENT_21 ) ; } } } } IDENT_7 . put ( p ) ; } org . apache . hadoop . hbase . filter . IDENT_23 filter ; org . apache . hadoop . hbase . client . IDENT_24 IDENT_25 = new org . apache . hadoop . hbase . client . METHOD_13 ( ) ; IDENT_25 . METHOD_14 ( ) ; byte [ ] [ ] IDENT_26 = new byte [ 2 ] [ ] ; IDENT_26 [ 0 ] = new byte [ ] { STRING_9 } ; IDENT_26 [ 1 ] = new byte [ ] { STRING_10 } ; filter = new org . apache . hadoop . hbase . filter . METHOD_15 ( IDENT_26 ) ; IDENT_25 . METHOD_16 ( filter ) ; java . util . List < org . apache . hadoop . hbase . filter . IDENT_13 > results = new java . util . ArrayList < org . apache . hadoop . hbase . filter . IDENT_13 > ( ) ; org . apache . hadoop . hbase . IDENT_5 . IDENT_27 IDENT_28 = IDENT_7 . METHOD_17 ( IDENT_25 ) ; while ( IDENT_28 . next ( results ) ) ; "<AssertPlaceHolder>" ; IDENT_7 . close ( ) ; IDENT_7 . METHOD_18 ( ) . METHOD_19 ( ) ; } get ( java . util . List ) { byte [ ] [ ] IDENT_10 = new byte [ IDENT_29 . size ( ) ] [ ] ; int IDENT_30 = 1 ; int count = 0 ; for ( org . apache . hadoop . hbase . client . IDENT_31 g : IDENT_29 ) { if ( count == 0 ) { IDENT_30 = g . METHOD_20 ( ) ; } else if ( ( g . METHOD_20 ( ) ) != IDENT_30 ) { org . apache . hadoop . hbase . rest . client . IDENT_32 . LOG . warn ( ( ( STRING_11 + IDENT_30 ) + STRING_12 ) ) ; } if ( ( g . METHOD_21 ( ) ) != null ) { org . apache . hadoop . hbase . rest . client . IDENT_32 . LOG . warn ( STRING_13 ) ; } IDENT_10 [ count ] = g . METHOD_22 ( ) ; count ++ ; } java . lang . String spec = METHOD_23 ( IDENT_10 , IDENT_30 ) ; return METHOD_24 ( spec ) ; }
org . junit . Assert . assertEquals ( ( ( IDENT_15 . get ( STRING_5 ) . size ( ) ) + ( IDENT_15 . get ( STRING_6 ) . size ( ) ) ) , results . size ( ) ) 