METHOD_0 ( ) { int count = METHOD_1 ( null , false ) ; System . out . println ( count ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String , boolean ) { if ( IDENT_0 == null ) { url = url . METHOD_2 ( Constants . IDENT_1 , java . lang . String . valueOf ( IDENT_2 ) ) ; } else { url = url . METHOD_2 ( ( ( IDENT_0 + STRING_0 ) + ( com . alibaba . dubbo . common . Constants . IDENT_1 ) ) , java . lang . String . valueOf ( IDENT_2 ) ) ; } org . easymock . EasyMock . METHOD_3 ( IDENT_3 ) ; org . easymock . EasyMock . expect ( IDENT_3 . invoke ( IDENT_4 ) ) . andReturn ( result ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_5 ( ) ) . andReturn ( true ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_6 ( ) ) . andReturn ( url ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_3 . METHOD_7 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_5 . cluster . IDENT_6 . class ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_3 ) ; org . easymock . EasyMock . METHOD_3 ( IDENT_7 ) ; org . easymock . EasyMock . expect ( IDENT_7 . invoke ( IDENT_4 ) ) . andReturn ( result ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_5 ( ) ) . andReturn ( true ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_6 ( ) ) . andReturn ( url ) . METHOD_4 ( ) ; org . easymock . EasyMock . expect ( IDENT_7 . METHOD_7 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_5 . cluster . IDENT_6 . class ) . METHOD_4 ( ) ; org . easymock . EasyMock . replay ( IDENT_7 ) ; IDENT_4 . METHOD_8 ( IDENT_0 ) ; int count = 0 ; for ( int i = 0 ; i < ( IDENT_8 ) ; i ++ ) { org . junit . Assert . assertEquals ( null , IDENT_9 . invoke ( IDENT_4 ) ) ; if ( ( IDENT_3 ) == ( IDENT_9 . METHOD_9 ( ) ) ) { count ++ ; } } return count ; }
org . junit . Assert . assertTrue ( ( ( count > 0 ) && ( count <= ( IDENT_8 ) ) ) ) 