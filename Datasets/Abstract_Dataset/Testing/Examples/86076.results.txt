METHOD_0 ( ) { com . alibaba . dubbo . IDENT_0 . IDENT_1 IDENT_2 = org . easymock . EasyMock . METHOD_1 ( com . alibaba . dubbo . IDENT_0 . IDENT_1 . class ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_2 ( ) ) . andReturn ( STRING_0 ) . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_4 ( ) ) . andReturn ( new java . lang . Class < ? > [ ] { com . alibaba . dubbo . IDENT_0 . filter . IDENT_3 . class } ) . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_5 ( ) ) . andReturn ( new java . lang . Object [ ] { STRING_1 } ) . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( IDENT_2 . METHOD_6 ( ) ) . andReturn ( null ) . METHOD_3 ( ) ; org . easymock . EasyMock . replay ( IDENT_2 ) ; com . alibaba . dubbo . IDENT_0 . IDENT_4 < com . alibaba . dubbo . IDENT_0 . support . IDENT_5 > IDENT_6 = org . easymock . EasyMock . METHOD_1 ( com . alibaba . dubbo . IDENT_0 . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_7 ( ) ) . andReturn ( true ) . METHOD_3 ( ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_8 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_0 . support . IDENT_5 . class ) . METHOD_3 ( ) ; com . alibaba . dubbo . IDENT_0 . IDENT_7 result = new com . alibaba . dubbo . IDENT_0 . METHOD_9 ( ) ; result . setValue ( STRING_2 ) ; org . easymock . EasyMock . expect ( IDENT_6 . invoke ( IDENT_2 ) ) . andReturn ( result ) . METHOD_3 ( ) ; com . alibaba . dubbo . common . URL url = com . alibaba . dubbo . common . URL . valueOf ( STRING_3 ) ; org . easymock . EasyMock . expect ( IDENT_6 . METHOD_10 ( ) ) . andReturn ( url ) . METHOD_3 ( ) ; org . easymock . EasyMock . replay ( IDENT_6 ) ; com . alibaba . dubbo . IDENT_0 . Result IDENT_8 = IDENT_9 . invoke ( IDENT_6 , IDENT_2 ) ; "<AssertPlaceHolder>" ; } getValue ( ) { return value ; }
org . junit . Assert . assertEquals ( STRING_1 , IDENT_8 . getValue ( ) ) 