METHOD_0 ( ) { com . alibaba . dubbo . common . logger . IDENT_0 logger = org . easymock . EasyMock . METHOD_1 ( com . alibaba . dubbo . common . logger . IDENT_0 . class ) ; com . alibaba . dubbo . IDENT_1 . IDENT_2 . METHOD_2 ( ) . METHOD_3 ( STRING_0 , INT_0 ) ; com . alibaba . dubbo . IDENT_1 . IDENT_3 exception = new com . alibaba . dubbo . IDENT_1 . METHOD_4 ( STRING_1 ) ; logger . error ( org . easymock . EasyMock . eq ( ( ( ( ( STRING_2 + ( com . alibaba . dubbo . IDENT_1 . support . IDENT_4 . class . getName ( ) ) ) + STRING_3 ) + ( com . alibaba . dubbo . IDENT_1 . METHOD_4 . class . getName ( ) ) ) + STRING_4 ) ) , org . easymock . EasyMock . eq ( exception ) ) ; com . alibaba . dubbo . IDENT_1 . filter . IDENT_5 IDENT_6 = new com . alibaba . dubbo . IDENT_1 . filter . METHOD_5 ( logger ) ; com . alibaba . dubbo . IDENT_1 . IDENT_7 IDENT_8 = new com . alibaba . dubbo . IDENT_1 . METHOD_6 ( STRING_5 , new java . lang . Class < ? > [ ] { java . lang . String . class } , new java . lang . Object [ ] { STRING_6 } ) ; com . alibaba . dubbo . IDENT_1 . IDENT_9 < com . alibaba . dubbo . IDENT_1 . support . IDENT_4 > IDENT_10 = org . easymock . EasyMock . METHOD_1 ( com . alibaba . dubbo . IDENT_1 . IDENT_9 . class ) ; org . easymock . EasyMock . expect ( IDENT_10 . METHOD_7 ( ) ) . andReturn ( com . alibaba . dubbo . IDENT_1 . support . IDENT_4 . class ) ; org . easymock . EasyMock . expect ( IDENT_10 . invoke ( org . easymock . EasyMock . eq ( IDENT_8 ) ) ) . METHOD_8 ( exception ) ; org . easymock . EasyMock . replay ( logger , IDENT_10 ) ; try { IDENT_6 . invoke ( IDENT_10 , IDENT_8 ) ; } catch ( com . alibaba . dubbo . IDENT_1 . METHOD_4 e ) { "<AssertPlaceHolder>" ; } org . easymock . EasyMock . verify ( logger , IDENT_10 ) ; com . alibaba . dubbo . IDENT_1 . IDENT_2 . METHOD_9 ( ) ; } getMessage ( ) { return message ; }
org . junit . Assert . assertEquals ( STRING_1 , e . getMessage ( ) ) 