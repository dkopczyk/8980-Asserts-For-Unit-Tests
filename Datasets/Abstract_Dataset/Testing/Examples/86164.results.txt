test ( ) { int times = 10 ; java . util . concurrent . IDENT_0 IDENT_1 = new java . util . concurrent . METHOD_0 ( times ) ; com . IDENT_2 . server . IDENT_3 . IDENT_4 server = IDENT_5 . METHOD_1 ( ) ; server . METHOD_2 ( ) . METHOD_3 ( STRING_0 ) . handler ( ( ctx ) -> { System . out . println ( ( ( ( ( ( STRING_1 + ( ctx . METHOD_4 ( ) . METHOD_5 ( ) ) ) + STRING_2 ) + ( ctx . METHOD_6 ( ) ) ) + ( ctx . METHOD_7 ( ) ) ) + STRING_3 ) ) ; ctx . end ( STRING_4 ) ; } ) . METHOD_8 ( host , port ) ; com . IDENT_2 . client . IDENT_3 . IDENT_6 client = IDENT_5 . METHOD_9 ( ) ; for ( int i = 0 ; i < times ; i ++ ) { client . METHOD_3 ( ( ( uri ) + STRING_0 ) ) . body ( STRING_5 ) . METHOD_10 ( ) . METHOD_11 ( ( res ) -> { System . out . println ( ( ( ( ( ( ( ( STRING_6 + ( res . getStatus ( ) ) ) + " " ) + ( res . METHOD_4 ( ) . METHOD_5 ( ) ) ) + STRING_2 ) + ( res . METHOD_6 ( ) ) ) + ( res . METHOD_7 ( ) ) ) + STRING_3 ) ) ; "<AssertPlaceHolder>" ; IDENT_1 . METHOD_12 ( ) ; System . out . println ( ( STRING_7 + ( IDENT_1 . METHOD_13 ( ) ) ) ) ; } ) ; } IDENT_1 . METHOD_14 ( ) ; System . out . println ( STRING_8 ) ; server . METHOD_15 ( ) ; client . METHOD_15 ( ) ; } METHOD_7 ( ) { return METHOD_7 ( STRING_9 ) ; }
org . junit . Assert . assertThat ( res . METHOD_7 ( ) , is ( STRING_4 ) ) 