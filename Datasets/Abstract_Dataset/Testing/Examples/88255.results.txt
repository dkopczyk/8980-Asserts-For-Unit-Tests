METHOD_0 ( ) { final java . lang . String node = STRING_0 ; final java . lang . String result = org . IDENT_0 . packet . IDENT_1 . METHOD_1 ( node ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( node == null ) { return null ; } final org . IDENT_0 . util . IDENT_2 < java . lang . String > IDENT_3 = org . IDENT_0 . packet . IDENT_1 . IDENT_4 . get ( node ) ; final java . lang . String IDENT_5 ; if ( IDENT_3 == null ) { try { IDENT_5 = IDENT_6 . IDENT_7 . IDENT_8 . IDENT_9 . METHOD_1 ( node ) ; if ( ( IDENT_5 != null ) && ( ( IDENT_5 . getBytes ( IDENT_10 . UTF_8 ) . length ) > INT_0 ) ) { throw new java . lang . IllegalArgumentException ( ( ( ( ( ( STRING_1 + STRING_2 ) + ( IDENT_5 . getBytes ( IDENT_10 . UTF_8 ) . length ) ) + STRING_3 ) + node ) + STRING_4 ) ) ; } } catch ( java . lang . Exception ex ) { org . IDENT_0 . packet . IDENT_1 . IDENT_4 . put ( node , new org . IDENT_0 . util . METHOD_2 ( org . IDENT_0 . util . METHOD_2 . IDENT_11 . IDENT_12 ) ) ; throw new java . lang . IllegalArgumentException ( ( STRING_5 + node ) , ex ) ; } org . IDENT_0 . packet . IDENT_1 . IDENT_4 . put ( IDENT_5 , new org . IDENT_0 . util . METHOD_2 ( org . IDENT_0 . util . METHOD_2 . IDENT_11 . IDENT_13 ) ) ; if ( ! ( node . equals ( IDENT_5 ) ) ) { org . IDENT_0 . packet . IDENT_1 . IDENT_4 . put ( node , new org . IDENT_0 . util . METHOD_2 ( IDENT_5 ) ) ; } } else { switch ( IDENT_3 . METHOD_3 ( ) ) { case IDENT_13 : IDENT_5 = node ; break ; case IDENT_14 : IDENT_5 = IDENT_3 . getValue ( ) ; break ; case IDENT_12 : throw new java . lang . IllegalArgumentException ( ( STRING_5 + node ) ) ; default : throw new java . lang . IllegalStateException ( STRING_6 ) ; } } return IDENT_5 ; }
org . junit . Assert . assertEquals ( node , result ) 