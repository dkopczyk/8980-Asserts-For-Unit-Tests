METHOD_0 ( ) { org . IDENT_0 . error . IDENT_1 . model . IDENT_2 IDENT_3 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_1 ( STRING_0 , STRING_1 , STRING_2 , STRING_3 , exception . getMessage ( ) , exception . getClass ( ) . getName ( ) , org . IDENT_0 . spec . error . IDENT_1 . IDENT_4 . IDENT_5 ) ; IDENT_3 . METHOD_2 ( STRING_4 ) ; IDENT_6 . save ( IDENT_3 ) ; IDENT_3 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_1 ( STRING_0 , STRING_5 , STRING_6 , STRING_3 , exception . getMessage ( ) , exception . getClass ( ) . getName ( ) , org . IDENT_0 . spec . error . IDENT_1 . IDENT_4 . IDENT_5 ) ; IDENT_3 . METHOD_2 ( STRING_4 ) ; IDENT_6 . save ( IDENT_3 ) ; org . IDENT_0 . error . IDENT_1 . model . IDENT_7 IDENT_8 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_3 ( org . IDENT_0 . error . IDENT_1 . model . METHOD_3 . IDENT_9 , STRING_7 ) ; this . IDENT_10 . save ( IDENT_8 ) ; org . IDENT_0 . error . IDENT_1 . model . METHOD_3 IDENT_11 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_3 ( org . IDENT_0 . error . IDENT_1 . model . METHOD_3 . IDENT_12 , STRING_8 ) ; this . IDENT_10 . save ( IDENT_11 ) ; org . IDENT_0 . error . IDENT_1 . model . IDENT_13 IDENT_14 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_4 ( STRING_0 , STRING_1 , STRING_2 , STRING_4 , "" ) ; IDENT_14 . METHOD_5 ( IDENT_11 ) ; this . IDENT_10 . save ( IDENT_14 ) ; IDENT_14 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_4 ( STRING_0 , "" , "" , STRING_4 , "" ) ; IDENT_14 . METHOD_5 ( IDENT_8 ) ; this . IDENT_10 . save ( IDENT_14 ) ; IDENT_14 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_4 ( STRING_0 , STRING_1 , "" , STRING_4 , "" ) ; IDENT_14 . METHOD_5 ( IDENT_8 ) ; this . IDENT_10 . save ( IDENT_14 ) ; IDENT_14 = new org . IDENT_0 . error . IDENT_1 . model . METHOD_4 ( "" , "" , "" , STRING_4 , "" ) ; IDENT_14 . METHOD_5 ( IDENT_11 ) ; this . IDENT_10 . save ( IDENT_14 ) ; java . util . ArrayList < java . lang . String > IDENT_15 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_15 . add ( STRING_0 ) ; java . util . ArrayList < java . lang . String > IDENT_16 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_16 . add ( STRING_1 ) ; java . util . ArrayList < java . lang . String > IDENT_17 = new java . util . ArrayList < java . lang . String > ( ) ; IDENT_17 . add ( STRING_2 ) ; java . lang . Long count = this . IDENT_10 . METHOD_6 ( IDENT_15 , IDENT_16 , IDENT_17 , new java . util . Date ( 0 ) , new java . util . Date ( java . lang . System . currentTimeMillis ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . List , java . util . List , java . util . Date , java . util . Date , java . lang . String ) { return ( ( java . lang . Long ) ( METHOD_7 ( ) . execute ( new org . springframework . IDENT_18 . IDENT_19 . METHOD_8 ( ) { public java . lang . Object METHOD_9 ( org . hibernate . IDENT_20 session ) throws org . hibernate . IDENT_21 { org . hibernate . IDENT_22 criteria = session . METHOD_10 ( org . IDENT_0 . IDENT_23 . model . IDENT_24 . class ) ; if ( ( IDENT_25 != null ) && ( ( IDENT_25 . size ( ) ) > 0 ) ) { criteria . add ( org . hibernate . IDENT_26 . IDENT_27 . in ( STRING_0 , IDENT_25 ) ) ; } if ( ( IDENT_28 != null ) && ( ( IDENT_28 . size ( ) ) > 0 ) ) { criteria . add ( org . hibernate . IDENT_26 . IDENT_27 . in ( STRING_1 , IDENT_28 ) ) ; } if ( ( IDENT_29 != null ) && ( ( IDENT_29 . length ( ) ) > 0 ) ) { criteria . add ( org . hibernate . IDENT_26 . IDENT_27 . eq ( STRING_9 , IDENT_29 ) ) ; } if ( IDENT_30 != null ) { criteria . add ( org . hibernate . IDENT_26 . IDENT_27 . METHOD_11 ( STRING_10 , IDENT_30 . getTime ( ) ) ) ; } if ( IDENT_31 != null ) { criteria . add ( org . hibernate . IDENT_26 . IDENT_27 . METHOD_12 ( STRING_10 , IDENT_31 . getTime ( ) ) ) ; } criteria . METHOD_13 ( org . hibernate . IDENT_26 . IDENT_32 . METHOD_6 ( ) ) ; java . lang . Long METHOD_6 = new java . lang . Long ( 0 ) ; java . util . List < java . lang . Long > IDENT_33 = criteria . list ( ) ; if ( ! ( IDENT_33 . isEmpty ( ) ) ) { METHOD_6 = IDENT_33 . get ( 0 ) ; } return METHOD_6 ; } } ) ) ) ; }
org . junit . Assert . assertTrue ( ( count == 3 ) ) 