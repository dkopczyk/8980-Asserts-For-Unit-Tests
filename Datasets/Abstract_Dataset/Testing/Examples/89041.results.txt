METHOD_0 ( ) { @ net . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( STRING_0 ) net . IDENT_3 . IDENT_4 < net . IDENT_3 . type . IDENT_5 . IDENT_6 . IDENT_7 > output = ( ( net . IDENT_3 . IDENT_4 < net . IDENT_3 . type . IDENT_5 . IDENT_6 . IDENT_7 > ) ( IDENT_1 . run ( net . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_8 . class , input ) ) ) ; net . IDENT_3 . IDENT_9 < net . IDENT_3 . type . IDENT_5 . IDENT_6 . IDENT_7 > IDENT_10 = input . METHOD_2 ( ) ; net . IDENT_3 . IDENT_11 < net . IDENT_3 . type . IDENT_5 . IDENT_6 . IDENT_7 > IDENT_12 = output . METHOD_3 ( ) ; while ( IDENT_10 . hasNext ( ) ) { IDENT_10 . METHOD_4 ( ) ; IDENT_12 . METHOD_5 ( IDENT_10 ) ; "<AssertPlaceHolder>" ; } } get ( ) { for ( int d = 0 ; d < ( position . length ) ; d ++ ) { IDENT_13 [ d ] = ( position [ d ] ) / ( IDENT_14 [ d ] ) ; IDENT_15 [ d ] = ( position [ d ] ) OP_0 ( IDENT_14 [ d ] ) ; } final int IDENT_16 = net . IDENT_3 . util . IDENT_17 . METHOD_6 ( IDENT_13 , IDENT_18 ) ; final int IDENT_19 = IDENT_20 [ IDENT_16 ] ; net . IDENT_3 . util . IDENT_17 . METHOD_7 ( IDENT_19 , IDENT_18 , IDENT_21 ) ; for ( int d = 0 ; d < ( position . length ) ; d ++ ) { final long IDENT_22 = ( ( IDENT_21 [ d ] ) * ( IDENT_14 [ d ] ) ) + ( IDENT_15 [ d ] ) ; IDENT_23 . METHOD_5 ( IDENT_22 , d ) ; } return IDENT_23 . get ( ) ; }
org . junit . Assert . assertEquals ( IDENT_10 . get ( ) . get ( ) , IDENT_12 . get ( ) . get ( ) , 0.0 ) 