METHOD_0 ( ) { final net . IDENT_0 . type . IDENT_1 . IDENT_2 . IDENT_3 in = new net . IDENT_0 . type . IDENT_1 . IDENT_2 . METHOD_1 ( INT_0 ) ; final net . IDENT_0 . type . IDENT_1 . IDENT_2 . METHOD_1 out = ( ( net . IDENT_0 . type . IDENT_1 . IDENT_2 . METHOD_1 ) ( IDENT_4 . run ( net . IDENT_5 . IDENT_4 . math . IDENT_6 . IDENT_7 . class , in . METHOD_2 ( ) , in ) ) ) ; "<AssertPlaceHolder>" ; } get ( ) { for ( int d = 0 ; d < ( position . length ) ; d ++ ) { IDENT_8 [ d ] = ( position [ d ] ) / ( IDENT_9 [ d ] ) ; IDENT_10 [ d ] = ( position [ d ] ) OP_0 ( IDENT_9 [ d ] ) ; } final int IDENT_11 = net . IDENT_0 . util . IDENT_12 . METHOD_3 ( IDENT_8 , IDENT_13 ) ; final int IDENT_14 = IDENT_15 [ IDENT_11 ] ; net . IDENT_0 . util . IDENT_12 . METHOD_4 ( IDENT_14 , IDENT_13 , IDENT_16 ) ; for ( int d = 0 ; d < ( position . length ) ; d ++ ) { final long IDENT_17 = ( ( IDENT_16 [ d ] ) * ( IDENT_9 [ d ] ) ) + ( IDENT_10 [ d ] ) ; IDENT_18 . METHOD_5 ( IDENT_17 , d ) ; } return IDENT_18 . get ( ) ; }
org . junit . Assert . assertEquals ( out . get ( ) , ( ( INT_0 * INT_0 ) - 1 ) ) 