METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . IDENT_2 < net . IDENT_0 . type . IDENT_3 . IDENT_4 > result = IDENT_5 . create ( ) . METHOD_1 ( IDENT_6 ) ; net . IDENT_0 . METHOD_1 . IDENT_2 < net . IDENT_0 . type . IDENT_3 . IDENT_4 > IDENT_7 = IDENT_5 . create ( ) . METHOD_1 ( IDENT_6 ) ; IDENT_5 . image ( ) . METHOD_2 ( IDENT_7 , IDENT_8 ) ; IDENT_5 . METHOD_3 ( ) . METHOD_4 ( result , IDENT_7 , new net . IDENT_0 . algorithm . IDENT_9 . METHOD_5 ( 1 ) ) ; net . IDENT_0 . IDENT_10 < net . IDENT_0 . type . IDENT_3 . IDENT_4 > IDENT_11 = result . METHOD_6 ( ) ; net . IDENT_0 . IDENT_12 < net . IDENT_0 . type . IDENT_3 . IDENT_4 > IDENT_13 = IDENT_6 . METHOD_7 ( ) ; while ( IDENT_11 . hasNext ( ) ) { boolean r = IDENT_11 . next ( ) . get ( ) ; IDENT_13 . METHOD_8 ( IDENT_11 ) ; "<AssertPlaceHolder>" ; } } get ( ) { for ( int d = 0 ; d < ( position . length ) ; d ++ ) { IDENT_14 [ d ] = ( position [ d ] ) / ( IDENT_15 [ d ] ) ; IDENT_16 [ d ] = ( position [ d ] ) OP_0 ( IDENT_15 [ d ] ) ; } final int IDENT_17 = net . IDENT_0 . util . IDENT_18 . METHOD_9 ( IDENT_14 , IDENT_19 ) ; final int IDENT_20 = IDENT_21 [ IDENT_17 ] ; net . IDENT_0 . util . IDENT_18 . METHOD_10 ( IDENT_20 , IDENT_19 , IDENT_22 ) ; for ( int d = 0 ; d < ( position . length ) ; d ++ ) { final long IDENT_23 = ( ( IDENT_22 [ d ] ) * ( IDENT_15 [ d ] ) ) + ( IDENT_16 [ d ] ) ; IDENT_24 . METHOD_8 ( IDENT_23 , d ) ; } return IDENT_24 . get ( ) ; }
org . junit . Assert . assertEquals ( IDENT_13 . get ( ) . get ( ) , r ) 