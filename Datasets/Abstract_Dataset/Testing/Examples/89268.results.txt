METHOD_0 ( ) { final net . IDENT_0 . transform . IDENT_1 . IDENT_2 transform = net . IDENT_0 . view . IDENT_3 . METHOD_1 ( 3 , 0 , 2 ) ; final long [ ] result = apply ( transform , new long [ ] { 3 , 2 , 1 } ) ; "<AssertPlaceHolder>" ; } METHOD_1 ( int , int , int ) { if ( IDENT_4 == IDENT_5 ) return new net . IDENT_0 . transform . IDENT_1 . METHOD_2 ( IDENT_6 , IDENT_6 ) ; final int [ ] component = new int [ IDENT_6 ] ; for ( int e = 0 ; e < IDENT_6 ; ++ e ) component [ e ] = e ; component [ IDENT_4 ] = IDENT_5 ; component [ IDENT_5 ] = IDENT_4 ; final net . IDENT_0 . transform . IDENT_1 . METHOD_2 t = new net . IDENT_0 . transform . IDENT_1 . METHOD_2 ( IDENT_6 , IDENT_6 ) ; t . METHOD_3 ( component ) ; return t ; }
org . junit . Assert . assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result ) 