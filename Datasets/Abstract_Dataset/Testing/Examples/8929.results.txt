METHOD_0 ( ) { org . apache . IDENT_0 . crypto . IDENT_1 . bytes . IDENT_2 IDENT_3 = new org . apache . IDENT_0 . crypto . IDENT_1 . bytes . METHOD_1 ( IDENT_4 ) ; byte [ ] IDENT_5 = new byte [ ] { INT_0 , 20 , INT_1 , INT_2 , INT_3 , 16 , 15 , INT_4 , INT_5 , 12 , INT_6 , 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 } ; byte [ ] IDENT_6 = org . apache . IDENT_0 . crypto . unit . IDENT_7 . METHOD_2 ( STRING_0 ) ; javax . crypto . IDENT_8 IDENT_9 = javax . crypto . IDENT_8 . getInstance ( STRING_1 ) ; IDENT_9 . init ( IDENT_8 . IDENT_10 , key , new javax . crypto . spec . METHOD_3 ( IDENT_6 ) ) ; byte [ ] IDENT_11 = IDENT_9 . METHOD_4 ( IDENT_5 ) ; byte [ ] IDENT_12 = new byte [ ( IDENT_11 . length ) + ( IDENT_6 . length ) ] ; java . lang . System . METHOD_5 ( IDENT_6 , 0 , IDENT_12 , 0 , IDENT_6 . length ) ; java . lang . System . METHOD_5 ( IDENT_11 , 0 , IDENT_12 , IDENT_6 . length , IDENT_11 . length ) ; byte [ ] IDENT_13 = IDENT_3 . METHOD_6 ( IDENT_12 , 0 , key ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( byte [ ] , int , java . security . IDENT_14 ) { org . apache . IDENT_0 . crypto . IDENT_1 . bytes . IDENT_15 header = org . apache . IDENT_0 . crypto . IDENT_1 . bytes . IDENT_15 . create ( input , IDENT_16 ) ; java . security . IDENT_14 IDENT_17 = IDENT_18 . getKey ( header . METHOD_7 ( ) ) ; org . apache . IDENT_0 . crypto . IDENT_1 . bytes . IDENT_19 IDENT_20 = ( header . METHOD_8 ( ) ) ? IDENT_21 : delegate ; if ( header . METHOD_9 ( ) ) { IDENT_20 = new org . apache . IDENT_0 . crypto . IDENT_1 . bytes . METHOD_10 ( IDENT_20 , header , IDENT_17 ) ; } return IDENT_20 . METHOD_6 ( input , ( IDENT_16 + ( header . size ( ) ) ) , IDENT_17 ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_5 , IDENT_13 ) 