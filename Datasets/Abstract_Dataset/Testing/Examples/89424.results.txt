METHOD_0 ( ) { org . apache . IDENT_0 . IDENT_1 . IDENT_2 tomcat = METHOD_1 ( ) ; java . io . File IDENT_3 = new java . io . File ( java . lang . System . getProperty ( STRING_0 ) ) ; org . apache . IDENT_0 . Context ctx = tomcat . METHOD_2 ( "" , IDENT_3 . getAbsolutePath ( ) ) ; org . apache . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_3 ( ctx , STRING_1 , new org . apache . IDENT_0 . IDENT_4 . IDENT_5 . METHOD_4 ( ) ) ; ctx . METHOD_5 ( "/" , STRING_1 ) ; tomcat . start ( ) ; java . util . Map < java . lang . String , java . util . List < java . lang . String > > headers = new java . util . HashMap < java . lang . String , java . util . List < java . lang . String > > ( ) ; METHOD_6 ( ( ( STRING_2 + ( METHOD_7 ( ) ) ) + "/" ) , new org . apache . tomcat . util . buf . METHOD_8 ( ) , headers ) ; for ( Map . Entry < java . lang . String , java . util . List < java . lang . String > > header : headers . entrySet ( ) ) { if ( ( header . getKey ( ) ) == null ) { java . util . List < java . lang . String > values = header . getValue ( ) ; if ( ( ( values . size ( ) ) == 1 ) && ( values . get ( 0 ) . startsWith ( STRING_3 ) ) ) { continue ; } org . junit . Assert . fail ( ( STRING_4 + values ) ) ; } } int count = 0 ; for ( java . lang . String IDENT_6 : headers . METHOD_9 ( ) ) { if ( STRING_5 . equals ( IDENT_6 ) ) { count ++ ; } } "<AssertPlaceHolder>" ; } size ( ) { return IDENT_7 . size ( ) ; }
org . junit . Assert . assertEquals ( 1 , count ) 