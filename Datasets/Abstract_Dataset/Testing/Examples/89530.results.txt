METHOD_0 ( ) { METHOD_1 ( STRING_0 , null , null ) ; org . slc . sli . api . security . context . IDENT_0 < org . slc . sli . domain . Entity > repository = org . mockito . Mockito . mock ( org . slc . sli . api . security . context . IDENT_0 . class ) ; org . slc . sli . domain . IDENT_1 IDENT_2 = new org . slc . sli . domain . METHOD_2 ( ) ; org . slc . sli . domain . METHOD_2 query = new org . slc . sli . domain . METHOD_2 ( ) ; query . METHOD_3 ( IDENT_2 ) ; java . util . List < java . lang . String > result = METHOD_4 ( ) ; org . mockito . Mockito . when ( repository . METHOD_5 ( org . slc . sli . api . security . context . resolver . IDENT_3 . IDENT_4 , query ) ) . thenReturn ( result ) ; resolver . METHOD_6 ( repository ) ; org . slc . sli . domain . Entity entity = null ; java . util . List < java . lang . String > IDENT_5 = resolver . METHOD_7 ( entity ) ; org . mockito . Mockito . verify ( repository , times ( 1 ) ) . METHOD_5 ( any ( java . lang . String . class ) , any ( org . slc . sli . domain . METHOD_2 . class ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . String , org . slc . sli . api . service . METHOD_2 ) { org . slc . sli . api . service . ArrayList < java . lang . String > IDENT_6 = new org . slc . sli . api . service . ArrayList < java . lang . String > ( ) ; for ( org . slc . sli . api . service . Entity e : this . METHOD_8 ( IDENT_7 , IDENT_8 ) ) { IDENT_6 . add ( e . METHOD_9 ( ) ) ; } return IDENT_6 ; }
org . junit . Assert . assertEquals ( result , IDENT_5 ) 