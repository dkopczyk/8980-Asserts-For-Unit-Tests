METHOD_0 ( ) { org . slc . sli . domain . Entity IDENT_0 = METHOD_1 ( ) ; try { "<AssertPlaceHolder>" ; } catch ( org . slc . sli . validation . IDENT_1 ex ) { for ( org . slc . sli . validation . IDENT_2 err : ex . METHOD_2 ( ) ) { System . err . println ( err ) ; } throw ex ; } } validate ( org . slc . sli . domain . Entity ) { org . slc . sli . validation . schema . IDENT_3 schema = IDENT_4 . METHOD_3 ( entity . getType ( ) ) ; if ( schema == null ) { org . slc . sli . validation . schema . IDENT_5 . LOG . warn ( STRING_0 , entity . getType ( ) ) ; return true ; } java . util . List < org . slc . sli . validation . IDENT_2 > errors = new java . util . IDENT_6 < org . slc . sli . validation . IDENT_2 > ( ) ; boolean IDENT_7 = schema . validate ( "" , entity . METHOD_4 ( ) , errors , IDENT_8 ) ; if ( ! IDENT_7 ) { org . slc . sli . validation . schema . IDENT_5 . LOG . debug ( STRING_1 , new java . lang . Object [ ] { entity . METHOD_5 ( ) , errors } ) ; throw new org . slc . sli . validation . METHOD_6 ( entity . METHOD_5 ( ) , entity . getType ( ) , errors ) ; } IDENT_7 = IDENT_9 . validate ( entity , errors ) ; if ( ! IDENT_7 ) { org . slc . sli . validation . schema . IDENT_5 . LOG . debug ( STRING_1 , new java . lang . Object [ ] { entity . METHOD_5 ( ) , errors } ) ; throw new org . slc . sli . validation . METHOD_6 ( entity . METHOD_5 ( ) , entity . getType ( ) , errors ) ; } return true ; }
org . junit . Assert . assertTrue ( validator . validate ( METHOD_1 ) ) 