METHOD_0 ( ) { java . lang . String IDENT_0 = METHOD_1 ( ) ; java . lang . String entry = METHOD_2 ( METHOD_1 , com . google . common . collect . IDENT_1 . class ) ; "<AssertPlaceHolder>" . contains ( STRING_0 ) . contains ( STRING_1 ) ; } METHOD_2 ( java . lang . String , java . lang . Class ) { java . lang . String IDENT_2 = org . IDENT_3 . util . IDENT_4 . METHOD_3 ( clazz ) ; org . IDENT_3 . util . List < java . lang . String > IDENT_5 = asList ( METHOD_1 . split ( IDENT_6 ) ) ; for ( java . lang . String IDENT_7 : IDENT_5 ) { if ( org . IDENT_3 . util . IDENT_4 . METHOD_4 ( IDENT_7 ) ) { if ( org . IDENT_3 . util . IDENT_4 . METHOD_5 ( ( ( IDENT_7 + ( IDENT_8 ) ) + IDENT_2 ) ) ) { return org . IDENT_3 . util . IDENT_4 . METHOD_6 ( IDENT_7 ) ; } } else { org . IDENT_3 . util . IDENT_9 IDENT_10 = null ; try { IDENT_10 = new org . IDENT_3 . util . METHOD_7 ( IDENT_7 ) ; if ( ( IDENT_10 . METHOD_8 ( IDENT_2 ) ) != null ) { return org . IDENT_3 . util . IDENT_4 . METHOD_6 ( IDENT_7 ) ; } } catch ( org . IDENT_3 . util . IOException e ) { org . IDENT_3 . util . IDENT_4 . log ( org . IDENT_3 . util . IDENT_11 , ( ( ( STRING_2 + IDENT_7 ) + STRING_3 ) + ( e . getMessage ( ) ) ) ) ; } finally { if ( IDENT_10 != null ) { try { IDENT_10 . close ( ) ; } catch ( org . IDENT_3 . util . IOException e ) { } } } } } return null ; }
org . junit . Assert . assertThat ( entry ) 