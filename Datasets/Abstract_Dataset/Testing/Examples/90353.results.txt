METHOD_0 ( ) { java . lang . String [ ] IDENT_0 = new java . lang . String [ ] { STRING_0 9 , STRING_1 0 , STRING_1 1 , STRING_0 1 , STRING_0 5 , STRING_2 , STRING_3 , STRING_4 , STRING_0 , STRING_0 2 , STRING_5 , STRING_0 6 , STRING_0 7 , STRING_1 3 , STRING_6 , STRING_0 8 , STRING_7 , STRING_8 , STRING_0 4 , STRING_9 , STRING_1 , STRING_0 3 , STRING_0 0 , STRING_1 2 } ; for ( java . lang . String IDENT_1 : IDENT_0 ) { "<AssertPlaceHolder>" ; } } METHOD_1 ( java . lang . String ) { try { br . com . IDENT_2 . IDENT_3 . IDENT_4 IDENT_5 = br . com . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( s ) ; return new br . com . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_5 ) ; } catch ( java . lang . IllegalArgumentException ex ) { } try { br . com . IDENT_2 . IDENT_3 . IDENT_6 IDENT_7 = br . com . IDENT_2 . IDENT_3 . IDENT_6 . METHOD_1 ( s ) ; return new br . com . IDENT_2 . IDENT_3 . METHOD_2 ( IDENT_7 ) ; } catch ( java . lang . IllegalArgumentException ex ) { } throw new java . lang . IllegalArgumentException ( java . lang . String . format ( STRING_10 , s ) ) ; }
org . junit . Assert . assertNotNull ( br . com . IDENT_2 . IDENT_3 . METHOD_2 . METHOD_1 ( IDENT_1 ) ) 