METHOD_0 ( ) { long value = INT_0 ; int size = 50 ; byte [ ] IDENT_0 = new byte [ size ] ; com . IDENT_1 . IDENT_2 . utils . IDENT_3 . METHOD_1 ( value , IDENT_0 , 0 , IDENT_0 . length ) ; java . math . BigInteger IDENT_4 = com . IDENT_1 . IDENT_2 . crypto . IDENT_5 . METHOD_2 ( IDENT_0 , 0 , IDENT_0 . length ) ; byte [ ] IDENT_6 = new byte [ size ] ; com . IDENT_1 . IDENT_2 . crypto . IDENT_5 . METHOD_0 ( IDENT_4 , IDENT_6 , 0 , size ) ; "<AssertPlaceHolder>" ; } METHOD_0 ( java . math . BigInteger , byte [ ] , int , int ) { if ( ( ( IDENT_7 . length ) - offset ) < size ) { throw new java . lang . IllegalArgumentException ( STRING_0 ) ; } final int IDENT_8 = value . METHOD_3 ( ) ; if ( METHOD_3 == 0 ) { java . util . Arrays . METHOD_4 ( IDENT_7 , offset , size , ( ( byte ) ( 0 ) ) ) ; return ; } java . math . BigInteger IDENT_9 = value . METHOD_5 ( ) ; for ( int i = 0 ; i < size ; i ++ ) { java . math . BigInteger [ ] IDENT_10 = IDENT_9 . METHOD_6 ( com . IDENT_1 . IDENT_2 . crypto . IDENT_5 . IDENT_11 ) ; IDENT_9 = IDENT_10 [ 0 ] ; byte IDENT_12 = IDENT_10 [ 1 ] . METHOD_7 ( ) ; if ( IDENT_12 > ( com . IDENT_1 . IDENT_2 . utils . IDENT_3 . IDENT_13 ) ) { IDENT_12 = com . IDENT_1 . IDENT_2 . utils . IDENT_3 . IDENT_14 ; IDENT_9 = IDENT_9 . add ( BigInteger . IDENT_15 ) ; } IDENT_7 [ ( offset + i ) ] = ( METHOD_3 < 0 ) ? ( ( byte ) ( - IDENT_12 ) ) : IDENT_12 ; } }
org . junit . Assert . assertTrue ( java . util . Arrays . equals ( IDENT_0 , IDENT_6 ) ) 