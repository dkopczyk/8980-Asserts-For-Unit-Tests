METHOD_0 ( ) { System . out . println ( STRING_0 ) ; int expResult = 0 ; java . lang . String [ ] args = new java . lang . String [ 2 ] ; args [ 0 ] = STRING_1 ; args [ 1 ] = STRING_2 ; IDENT_0 = IDENT_1 . IDENT_1 . METHOD_1 ( ) ; int status = IDENT_0 . METHOD_2 ( args ) ; "<AssertPlaceHolder>" ; java . lang . Thread IDENT_2 = new java . lang . Thread ( IDENT_0 ) ; IDENT_2 . start ( ) ; System . out . println ( STRING_3 ) ; while ( ! ( IDENT_0 . METHOD_3 ( ) ) ) { try { java . lang . Thread . sleep ( 100 ) ; } catch ( java . lang . IDENT_3 ex ) { } } System . out . println ( STRING_4 ) ; while ( ! ( IDENT_0 . METHOD_3 ( ) ) ) { try { java . lang . Thread . sleep ( 100 ) ; } catch ( java . lang . IDENT_3 ex ) { java . util . logging . IDENT_4 . METHOD_4 ( IDENT_1 . IDENT_5 . class . getName ( ) ) . log ( IDENT_6 . IDENT_7 , null , ex ) ; } } IDENT_0 . METHOD_5 ( STRING_5 , false , STRING_6 ) ; System . out . println ( STRING_7 ) ; while ( IDENT_0 . METHOD_3 ( ) ) { try { java . lang . Thread . sleep ( 1000 ) ; } catch ( java . lang . IDENT_3 ex ) { } } IDENT_0 . METHOD_6 ( ) ; } METHOD_2 ( java . lang . String [ ] ) { int status ; java . util . ArrayList < java . lang . String > IDENT_8 ; java . lang . String IDENT_9 ; boolean IDENT_10 = false ; IDENT_1 . IDENT_1 . IDENT_11 = METHOD_7 ( ) ; status = METHOD_8 ( args ) ; if ( status != 0 ) { return status ; } java . net . URL IDENT_12 = METHOD_9 ( args ) ; if ( IDENT_12 == null ) { return status ; } try { IDENT_1 . utils . IDENT_13 . METHOD_10 ( ) . METHOD_11 ( IDENT_12 , STRING_8 ) ; } catch ( IDENT_1 . exception . IDENT_14 ex ) { System . err . println ( ( ( STRING_9 + IDENT_12 ) + STRING_10 ) ) ; return IDENT_1 . IDENT_1 . IDENT_15 ; } METHOD_12 ( ) ; System . out . println ( "" ) ; System . out . println ( " " 1 ) ; System . out . println ( ( " " + ( IDENT_1 . IDENT_1 . METHOD_13 ( ) ) ) ) ; System . out . println ( " " 0 ) ; System . out . println ( " " 1 ) ; if ( ( METHOD_14 ( ) ) == true ) { IDENT_8 = IDENT_1 . utils . IDENT_13 . METHOD_10 ( ) . METHOD_15 ( STRING_11 ) ; java . util . Iterator < java . lang . String > IDENT_16 = IDENT_8 . iterator ( ) ; while ( IDENT_16 . hasNext ( ) ) { IDENT_9 = IDENT_16 . next ( ) ; System . out . println ( ( ( STRING_12 + IDENT_9 ) + STRING_13 ) ) ; if ( ( METHOD_16 ( IDENT_9 ) ) == false ) { IDENT_10 = true ; break ; } } if ( IDENT_10 == false ) { IDENT_1 . IDENT_1 . IDENT_0 . METHOD_17 ( ) ; System . out . println ( STRING_14 ) ; } else { System . err . println ( STRING_15 ) ; status = IDENT_1 . IDENT_1 . IDENT_17 ; } } else { METHOD_18 ( ) ; System . err . println ( STRING_15 ) ; status = IDENT_1 . IDENT_1 . IDENT_17 ; } return status ; }
org . junit . Assert . assertEquals ( expResult , status ) 