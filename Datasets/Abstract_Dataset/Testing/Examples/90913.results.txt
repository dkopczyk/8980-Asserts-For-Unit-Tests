METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 < ch . cyberduck . core . IDENT_1 . IDENT_2 > c = new ch . cyberduck . core . IDENT_3 < ch . cyberduck . core . IDENT_1 . IDENT_2 > ( new ch . cyberduck . core . METHOD_1 ( 1 ) , 1 ) ; final ch . cyberduck . core . IDENT_4 < ch . cyberduck . core . IDENT_1 . IDENT_2 > list = new ch . cyberduck . core . METHOD_2 ( ) ; list . add ( new ch . cyberduck . core . IDENT_1 . METHOD_3 ( new ch . cyberduck . core . Path ( STRING_0 , java . util . IDENT_5 . of ( Path . Type . file ) ) , new ch . cyberduck . core . METHOD_4 ( STRING_1 ) ) ) ; c . put ( new ch . cyberduck . core . IDENT_1 . METHOD_3 ( new ch . cyberduck . core . Path ( STRING_2 , java . util . IDENT_5 . of ( Path . Type . directory ) ) , new ch . cyberduck . core . METHOD_4 ( STRING_3 ) ) , list ) ; final ch . cyberduck . core . IDENT_6 reference = new ch . cyberduck . core . METHOD_5 ( ch . cyberduck . core . METHOD_5 . get ( new ch . cyberduck . core . Path ( STRING_0 , java . util . IDENT_5 . of ( Path . Type . file ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( ch . cyberduck . core . IDENT_7 ) { return delegate . METHOD_6 ( reference ) ; }
org . junit . Assert . assertNotNull ( c . METHOD_6 ( reference ) ) 