METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 . IDENT_1 p = new ch . cyberduck . core . IDENT_0 . METHOD_1 ( Integer . MAX_VALUE ) ; final java . util . List < java . util . concurrent . IDENT_2 < java . lang . Integer > > IDENT_3 = new java . util . ArrayList < java . util . concurrent . IDENT_2 < java . lang . Integer > > ( ) ; final java . util . concurrent . atomic . IDENT_4 IDENT_5 = new java . util . concurrent . atomic . METHOD_2 ( 0 ) ; for ( int i = 0 ; i < 1000 ; i ++ ) { IDENT_3 . add ( p . execute ( new java . util . concurrent . IDENT_6 < java . lang . Integer > ( ) { @ ch . cyberduck . core . IDENT_0 . Override public ch . cyberduck . core . IDENT_0 . Integer call ( ) { return IDENT_5 . METHOD_3 ( ) ; } } ) ) ; } p . METHOD_4 ( true ) ; "<AssertPlaceHolder>" ; } get ( ) { try { final ch . cyberduck . core . Path IDENT_7 = new ch . cyberduck . core . shared . METHOD_5 ( session ) . find ( ) ; if ( ! ( IDENT_7 . METHOD_6 ( ) ) ) { final ch . cyberduck . core . IDENT_8 . io . IDENT_9 . client . model . Node node = new ch . cyberduck . core . IDENT_8 . io . IDENT_9 . client . api . METHOD_7 ( session . METHOD_8 ( ) ) . METHOD_9 ( java . lang . Long . METHOD_10 ( IDENT_10 . METHOD_11 ( IDENT_7 , new ch . cyberduck . core . METHOD_12 ( ) ) ) , org . apache . commons . lang3 . StringUtils . IDENT_11 , null ) ; if ( null == ( node . METHOD_13 ( ) ) ) { ch . cyberduck . core . IDENT_8 . IDENT_12 . log . warn ( java . lang . String . format ( STRING_0 , IDENT_7 ) ) ; } else { return new ch . cyberduck . core . IDENT_8 . METHOD_14 ( node . METHOD_15 ( ) , ( ( node . METHOD_13 ( ) ) - ( node . METHOD_15 ( ) ) ) ) ; } } final ch . cyberduck . core . IDENT_8 . io . IDENT_9 . client . model . IDENT_13 info = new ch . cyberduck . core . IDENT_8 . io . IDENT_9 . client . api . METHOD_16 ( session . METHOD_8 ( ) ) . METHOD_17 ( org . apache . commons . lang3 . StringUtils . IDENT_11 , null ) ; return new ch . cyberduck . core . IDENT_8 . METHOD_14 ( info . METHOD_18 ( ) , ( ( info . METHOD_19 ( ) ) - ( info . METHOD_18 ( ) ) ) ) ; } catch ( ch . cyberduck . core . IDENT_8 . io . IDENT_9 . client . IDENT_14 e ) { throw new ch . cyberduck . core . IDENT_8 . METHOD_20 ( ) . map ( STRING_1 , e , new ch . cyberduck . core . Path ( java . lang . String . valueOf ( Path . IDENT_15 ) , java . util . IDENT_16 . of ( Path . Type . IDENT_17 , Path . Type . directory ) ) ) ; } }
org . junit . Assert . assertEquals ( 1000 , IDENT_5 . get ( ) ) 