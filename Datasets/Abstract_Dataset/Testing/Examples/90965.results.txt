METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 . IDENT_1 host = new ch . cyberduck . core . IDENT_0 . METHOD_1 ( new ch . cyberduck . core . IDENT_0 . METHOD_2 ( ) ) ; final ch . cyberduck . core . IDENT_0 . IDENT_2 < ? > session = new ch . cyberduck . core . IDENT_0 . METHOD_3 ( host ) ; final ch . cyberduck . core . IDENT_0 . Path test = new ch . cyberduck . core . IDENT_0 . Path ( STRING_0 , java . util . IDENT_3 . of ( Path . Type . file ) ) ; test . attributes ( ) . METHOD_4 ( INT_0 ) ; final ch . cyberduck . core . IDENT_0 . IDENT_4 IDENT_5 = new ch . cyberduck . core . IDENT_0 . METHOD_5 ( ( ( ( java . lang . System . getProperty ( STRING_1 ) ) + STRING_2 ) + ( java . util . UUID . METHOD_6 ( ) . toString ( ) ) ) ) ; ch . cyberduck . core . IDENT_5 . IDENT_6 . get ( ) . METHOD_7 ( IDENT_5 ) ; final java . io . IDENT_7 out = IDENT_5 . METHOD_8 ( false ) ; org . apache . commons . io . IDENT_8 . write ( "test" , out , java . nio . IDENT_9 . IDENT_10 . METHOD_9 ( ) ) ; out . close ( ) ; final ch . cyberduck . core . IDENT_0 . IDENT_11 IDENT_0 = new ch . cyberduck . core . IDENT_0 . METHOD_10 ( host , test , IDENT_5 ) { @ ch . cyberduck . core . IDENT_0 . Override public ch . cyberduck . core . IDENT_0 . IDENT_12 . IDENT_13 filter ( final ch . cyberduck . core . IDENT_0 . IDENT_2 < ? > source , final ch . cyberduck . core . IDENT_0 . IDENT_2 < ? > d , final ch . cyberduck . core . IDENT_0 . IDENT_14 action , final ch . cyberduck . core . IDENT_0 . IDENT_15 listener ) { return new ch . cyberduck . core . IDENT_0 . IDENT_12 . METHOD_11 ( new ch . cyberduck . core . IDENT_0 . IDENT_16 . METHOD_12 ( java . util . Collections . singletonList ( new ch . cyberduck . core . IDENT_0 . METHOD_13 ( test ) ) ) , new ch . cyberduck . core . IDENT_0 . METHOD_3 ( new ch . cyberduck . core . IDENT_0 . METHOD_1 ( new ch . cyberduck . core . IDENT_0 . METHOD_2 ( ) ) ) , new ch . cyberduck . core . IDENT_0 . IDENT_12 . METHOD_14 ( ) , new ch . cyberduck . core . shared . METHOD_15 ( source . METHOD_16 ( ch . cyberduck . core . IDENT_17 . IDENT_18 . class ) ) { @ ch . cyberduck . core . IDENT_0 . Override public boolean offset ( final ch . cyberduck . core . IDENT_0 . Path file ) { return true ; } } ) ; } } ; final ch . cyberduck . core . IDENT_19 . IDENT_20 IDENT_19 = new ch . cyberduck . core . IDENT_19 . METHOD_17 ( session , null , IDENT_0 , new ch . cyberduck . core . IDENT_0 . METHOD_18 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_19 ( IDENT_0 ) , new ch . cyberduck . core . IDENT_0 . METHOD_20 ( ) { @ ch . cyberduck . core . IDENT_0 . Override public ch . cyberduck . core . IDENT_0 . IDENT_14 METHOD_21 ( final ch . cyberduck . core . IDENT_0 . METHOD_13 file ) { org . junit . Assert . fail ( ) ; return null ; } } , new ch . cyberduck . core . IDENT_0 . METHOD_22 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_23 ( ) , new ch . cyberduck . core . io . METHOD_24 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_25 ( ) , new ch . cyberduck . core . IDENT_0 . METHOD_26 ( ) , new ch . cyberduck . core . IDENT_21 . METHOD_27 ( ) ) ; IDENT_19 . METHOD_28 ( test , IDENT_5 , new ch . cyberduck . core . IDENT_0 . METHOD_29 ( ) . exists ( true ) , IDENT_14 . IDENT_22 ) ; final ch . cyberduck . core . IDENT_0 . METHOD_29 status = new ch . cyberduck . core . IDENT_0 . METHOD_29 ( ) ; status . METHOD_30 ( true ) ; final ch . cyberduck . core . IDENT_0 . METHOD_29 expected = new ch . cyberduck . core . IDENT_0 . METHOD_29 ( ) ; expected . METHOD_31 ( true ) ; expected . METHOD_30 ( true ) ; expected . METHOD_32 ( "test" . getBytes ( ) . length ) ; expected . METHOD_33 ( ( INT_0 - ( "test" . getBytes ( ) . length ) ) ) ; "<AssertPlaceHolder>" ; IDENT_5 . delete ( ) ; } getStatus ( ) { return proxy . getStatus ( ) ; }
org . junit . Assert . assertEquals ( expected , IDENT_19 . getStatus ( ) . get ( new ch . cyberduck . core . IDENT_0 . METHOD_13 ( test , IDENT_5 ) ) ) 