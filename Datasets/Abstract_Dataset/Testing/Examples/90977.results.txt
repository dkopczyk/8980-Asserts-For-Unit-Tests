METHOD_0 ( ) { ch . cyberduck . core . IDENT_0 . IDENT_1 . IDENT_2 IDENT_1 = new ch . cyberduck . core . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; final java . util . HashMap < ch . cyberduck . core . Path , ch . cyberduck . core . Path > IDENT_3 = new java . util . HashMap < ch . cyberduck . core . Path , ch . cyberduck . core . Path > ( ) ; IDENT_3 . put ( new ch . cyberduck . core . Path ( STRING_0 , java . util . IDENT_4 . of ( Path . Type . directory ) ) , new ch . cyberduck . core . Path ( STRING_1 , java . util . IDENT_4 . of ( Path . Type . directory ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . util . List ) { final java . util . List < ch . cyberduck . core . IDENT_0 . IDENT_5 > IDENT_6 = new java . util . ArrayList < ch . cyberduck . core . IDENT_0 . IDENT_5 > ( ) ; for ( ch . cyberduck . core . IDENT_0 . IDENT_5 IDENT_7 : IDENT_8 ) { boolean IDENT_9 = false ; for ( java . util . Iterator < ch . cyberduck . core . IDENT_0 . IDENT_5 > IDENT_10 = IDENT_6 . iterator ( ) ; IDENT_10 . hasNext ( ) ; ) { ch . cyberduck . core . IDENT_0 . IDENT_5 n = IDENT_10 . next ( ) ; if ( IDENT_7 . IDENT_11 . METHOD_3 ( n . IDENT_11 ) ) { IDENT_9 = true ; break ; } if ( n . IDENT_11 . METHOD_3 ( IDENT_7 . IDENT_11 ) ) { IDENT_10 . remove ( ) ; } if ( IDENT_7 . remote . equals ( n . remote ) ) { final ch . cyberduck . core . Path parent = IDENT_7 . remote . METHOD_4 ( ) ; final java . lang . String IDENT_12 = IDENT_7 . remote . getName ( ) ; java . lang . String IDENT_13 ; int IDENT_14 = 0 ; int index = IDENT_12 . METHOD_5 ( STRING_2 ) ; ch . cyberduck . core . Path remote ; do { if ( ( index != ( - 1 ) ) && ( index != 0 ) ) { IDENT_13 = java . lang . String . format ( STRING_3 , IDENT_12 . substring ( 0 , index ) , ( ++ IDENT_14 ) , IDENT_12 . substring ( index ) ) ; } else { IDENT_13 = java . lang . String . format ( STRING_4 , IDENT_12 , ( ++ IDENT_14 ) ) ; } remote = new ch . cyberduck . core . Path ( parent , IDENT_13 , IDENT_7 . remote . getType ( ) ) ; } while ( false ) ; if ( ch . cyberduck . core . IDENT_0 . IDENT_1 . IDENT_15 . log . METHOD_6 ( ) ) { ch . cyberduck . core . IDENT_0 . IDENT_1 . IDENT_15 . log . info ( java . lang . String . format ( STRING_5 , IDENT_12 , remote . getName ( ) ) ) ; } IDENT_7 . remote = remote ; } } if ( ! IDENT_9 ) { IDENT_6 . add ( new ch . cyberduck . core . IDENT_0 . METHOD_7 ( IDENT_7 . remote , IDENT_7 . IDENT_11 ) ) ; } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_1 . METHOD_2 ( IDENT_3 ) ) 