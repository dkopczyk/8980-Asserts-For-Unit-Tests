METHOD_0 ( ) { final ch . cyberduck . core . Path IDENT_0 = new ch . cyberduck . core . shared . METHOD_1 ( session ) . find ( ) ; final ch . cyberduck . core . Path test = new ch . cyberduck . core . Path ( IDENT_0 , new ch . cyberduck . core . METHOD_2 ( ) . random ( ) , java . util . IDENT_1 . of ( Path . Type . file ) ) ; new ch . cyberduck . core . IDENT_2 . IDENT_3 . METHOD_3 ( session ) . METHOD_4 ( test , new ch . cyberduck . core . IDENT_4 . METHOD_5 ( ) ) ; final ch . cyberduck . core . IDENT_2 . IDENT_3 . IDENT_5 read = new ch . cyberduck . core . IDENT_2 . IDENT_3 . METHOD_6 ( session ) ; final java . io . InputStream in = read . read ( test , new ch . cyberduck . core . IDENT_4 . METHOD_5 ( ) . METHOD_7 ( 1 ) . append ( true ) , new ch . cyberduck . core . METHOD_8 ( ) ) ; "<AssertPlaceHolder>" ; } append ( org . apache . log4j . spi . IDENT_6 ) { final java . lang . StringBuilder buffer = new java . lang . StringBuilder ( ) ; buffer . append ( layout . format ( event ) ) ; if ( layout . METHOD_9 ( ) ) { final java . lang . String [ ] trace = event . METHOD_10 ( ) ; if ( trace != null ) { buffer . append ( org . apache . log4j . IDENT_7 . IDENT_8 ) ; for ( final java . lang . String t : trace ) { buffer . append ( t ) . append ( org . apache . log4j . IDENT_7 . IDENT_8 ) ; } } } ch . cyberduck . binding . IDENT_9 . IDENT_10 . METHOD_11 ( STRING_0 , buffer . toString ( ) ) ; }
org . junit . Assert . assertNull ( in ) 