METHOD_0 ( ) { final ch . cyberduck . core . IDENT_0 host = new ch . cyberduck . core . METHOD_1 ( new ch . cyberduck . core . IDENT_1 . METHOD_2 ( ) { @ ch . cyberduck . core . IDENT_1 . Override public ch . cyberduck . core . IDENT_2 METHOD_3 ( ) { return ch . cyberduck . core . IDENT_2 . http ; } } , java . lang . System . METHOD_4 ( ) . getProperty ( STRING_0 ) , java . lang . Integer . valueOf ( java . lang . System . METHOD_4 ( ) . getProperty ( STRING_1 ) ) , new ch . cyberduck . core . METHOD_5 ( java . lang . System . METHOD_4 ( ) . getProperty ( STRING_2 ) , java . lang . System . METHOD_4 ( ) . getProperty ( STRING_3 ) ) ) ; final ch . cyberduck . core . IDENT_1 . IDENT_3 session = new ch . cyberduck . core . IDENT_1 . METHOD_6 ( host , new ch . cyberduck . core . IDENT_4 . METHOD_7 ( ) , new ch . cyberduck . core . IDENT_4 . METHOD_8 ( ) ) ; session . METHOD_9 ( IDENT_5 . IDENT_6 , new ch . cyberduck . core . METHOD_10 ( ) , new ch . cyberduck . core . METHOD_11 ( ) ) ; session . METHOD_12 ( IDENT_5 . IDENT_6 , new ch . cyberduck . core . METHOD_11 ( ) , new ch . cyberduck . core . METHOD_13 ( ) ) ; final ch . cyberduck . core . Path container = new ch . cyberduck . core . Path ( STRING_4 , java . util . IDENT_7 . of ( Path . Type . directory , Path . Type . IDENT_8 ) ) ; final ch . cyberduck . core . Path test = new ch . cyberduck . core . Path ( container , java . util . UUID . METHOD_14 ( ) . toString ( ) , java . util . IDENT_7 . of ( Path . Type . file ) ) ; new ch . cyberduck . core . IDENT_1 . METHOD_15 ( session ) . METHOD_16 ( test , new ch . cyberduck . core . IDENT_9 . METHOD_17 ( ) ) ; final byte [ ] content = new org . apache . commons . text . IDENT_10 . Builder ( ) . build ( ) . METHOD_18 ( 1000 ) . getBytes ( ) ; final ch . cyberduck . core . IDENT_9 . METHOD_17 status = new ch . cyberduck . core . IDENT_9 . METHOD_17 ( ) . length ( content . length ) ; status . METHOD_19 ( new ch . cyberduck . core . io . METHOD_20 ( ) . compute ( new java . io . ByteArrayInputStream ( content ) , status ) ) ; final ch . cyberduck . core . IDENT_1 . IDENT_11 IDENT_12 = new ch . cyberduck . core . IDENT_1 . METHOD_21 ( session ) ; IDENT_12 . METHOD_22 ( IDENT_13 . Type . IDENT_14 , java . util . Collections . METHOD_23 ( new ch . cyberduck . core . IDENT_9 . METHOD_24 ( test ) , status . exists ( true ) ) , new ch . cyberduck . core . METHOD_25 ( ) ) ; final java . io . IDENT_15 out = new ch . cyberduck . core . IDENT_1 . METHOD_26 ( session ) . write ( test , status , new ch . cyberduck . core . METHOD_25 ( ) ) ; "<AssertPlaceHolder>" ; new ch . cyberduck . core . io . METHOD_27 ( new ch . cyberduck . core . IDENT_9 . METHOD_17 ( ) , new ch . cyberduck . core . IDENT_9 . METHOD_17 ( ) ) . METHOD_28 ( new java . io . ByteArrayInputStream ( content ) , out ) ; out . close ( ) ; new ch . cyberduck . core . IDENT_1 . METHOD_29 ( session ) . delete ( java . util . Collections . singletonList ( test ) , new ch . cyberduck . core . METHOD_11 ( ) , new ch . cyberduck . core . IDENT_16 . IDENT_17 . METHOD_30 ( ) ) ; session . close ( ) ; } write ( byte [ ] , int , int ) { try { for ( int IDENT_18 = IDENT_19 ; IDENT_18 < len ; IDENT_18 += IDENT_20 ) { int IDENT_21 = java . lang . Math . min ( IDENT_20 , ( len - IDENT_18 ) ) ; final java . nio . ByteBuffer IDENT_22 = IDENT_23 . METHOD_31 ( ) . METHOD_32 ( java . nio . ByteBuffer . METHOD_33 ( java . util . Arrays . METHOD_34 ( b , IDENT_18 , ( IDENT_18 + IDENT_21 ) ) ) , ( ( IDENT_24 ) ++ ) , header , IDENT_25 . next ( ) ) ; super . write ( IDENT_22 . array ( ) ) ; } } catch ( org . IDENT_26 . IDENT_27 . api . IDENT_28 e ) { throw new java . io . IOException ( e . getMessage ( ) , new ch . cyberduck . core . IDENT_26 . METHOD_35 ( e . getMessage ( ) , e ) ) ; } }
org . junit . Assert . assertNotNull ( out ) 