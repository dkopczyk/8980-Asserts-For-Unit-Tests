METHOD_0 ( ) { com . itextpdf . IDENT_0 . IDENT_1 IDENT_2 = new com . itextpdf . IDENT_0 . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( INT_0 ) ; IDENT_2 . METHOD_3 ( INT_0 ) ; byte [ ] str = STRING_0 . getBytes ( ) ; int result = IDENT_2 . METHOD_4 ( str , str . length , 0 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( byte [ ] , int , int ) { if ( IDENT_3 < 0 ) { throw new java . lang . METHOD_5 ( ( "" + IDENT_3 ) ) ; } if ( ( ( IDENT_3 + IDENT_4 ) > ( text . length ) ) || ( IDENT_4 < 0 ) ) { throw new java . lang . METHOD_5 ( ( "" + IDENT_4 ) ) ; } int IDENT_5 ; int e ; int k ; int IDENT_6 ; com . itextpdf . IDENT_0 . IDENT_7 . IDENT_8 IDENT_9 ; com . itextpdf . IDENT_0 . IDENT_7 . IDENT_8 IDENT_10 ; byte [ ] data = new byte [ INT_1 ] ; IDENT_11 = 0 ; IDENT_5 = METHOD_6 ( text , IDENT_3 , IDENT_4 , data ) ; if ( IDENT_5 < 0 ) { return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_12 ; } e = - 1 ; f = new int [ 6 ] [ IDENT_4 - ( IDENT_11 ) ] ; IDENT_13 = new int [ 6 ] [ IDENT_4 - ( IDENT_11 ) ] ; if ( ( ( IDENT_14 ) == 0 ) || ( ( IDENT_15 ) == 0 ) ) { IDENT_10 = com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ ( ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 . length ) - 1 ) ] ; e = METHOD_7 ( text , ( IDENT_3 + ( IDENT_11 ) ) , ( IDENT_4 - ( IDENT_11 ) ) , data , IDENT_5 , ( ( IDENT_10 . IDENT_17 ) - IDENT_5 ) , options , false ) ; if ( e < 0 ) { return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_18 ; } e += IDENT_5 ; for ( k = 0 ; k < ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 . length ) ; ++ k ) { if ( ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ k ] . IDENT_17 ) >= e ) break ; } IDENT_9 = com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ k ] ; IDENT_14 = IDENT_9 . IDENT_14 ; IDENT_15 = IDENT_9 . IDENT_15 ; } else { for ( k = 0 ; k < ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 . length ) ; ++ k ) { if ( ( ( IDENT_14 ) == ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ k ] . IDENT_14 ) ) && ( ( IDENT_15 ) == ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ k ] . IDENT_15 ) ) ) break ; } if ( k == ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 . length ) ) { return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_19 ; } IDENT_9 = com . itextpdf . IDENT_0 . METHOD_1 . IDENT_16 [ k ] ; e = METHOD_7 ( text , ( IDENT_3 + ( IDENT_11 ) ) , ( IDENT_4 - ( IDENT_11 ) ) , data , IDENT_5 , ( ( IDENT_9 . IDENT_17 ) - IDENT_5 ) , options , true ) ; if ( e < 0 ) { return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_18 ; } e += IDENT_5 ; } if ( ( ( options ) & ( com . itextpdf . IDENT_0 . METHOD_1 . IDENT_20 ) ) != 0 ) { return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_21 ; } image = new byte [ ( ( ( ( IDENT_9 . IDENT_15 ) + ( 2 * ( ws ) ) ) + 7 ) / 8 ) * ( ( IDENT_9 . IDENT_14 ) + ( 2 * ( ws ) ) ) ] ; com . itextpdf . IDENT_0 . METHOD_1 . METHOD_8 ( data , e , ( ( IDENT_9 . IDENT_17 ) - e ) ) ; IDENT_22 = com . itextpdf . IDENT_0 . IDENT_7 . IDENT_23 . METHOD_9 ( ( ( IDENT_9 . IDENT_14 ) - ( ( ( IDENT_9 . IDENT_14 ) / ( IDENT_9 . IDENT_24 ) ) * 2 ) ) , ( ( IDENT_9 . IDENT_15 ) - ( ( ( IDENT_9 . IDENT_15 ) / ( IDENT_9 . IDENT_25 ) ) * 2 ) ) ) ; IDENT_6 = ( IDENT_9 . IDENT_17 ) + ( ( ( ( IDENT_9 . IDENT_17 ) + 2 ) / ( IDENT_9 . IDENT_26 ) ) * ( IDENT_9 . IDENT_27 ) ) ; com . itextpdf . IDENT_0 . IDENT_7 . IDENT_28 . METHOD_10 ( data , IDENT_9 . IDENT_17 , IDENT_9 . IDENT_26 , IDENT_9 . IDENT_27 ) ; METHOD_11 ( data , IDENT_6 , IDENT_9 ) ; return com . itextpdf . IDENT_0 . METHOD_1 . IDENT_21 ; }
org . junit . Assert . assertEquals ( METHOD_1 . IDENT_21 , result ) 