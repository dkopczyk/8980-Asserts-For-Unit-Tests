METHOD_0 ( ) { float [ ] IDENT_0 = new float [ ] { 0 , 0 , 2 , 1 , 1 , 2 , - 2 , 1 , 0 , - 1 , 2 , 0 , 1 , 1 , - 2 , 0 , 1 } ; com . itextpdf . kernel . pdf . IDENT_1 IDENT_2 = new com . itextpdf . kernel . pdf . METHOD_1 ( IDENT_0 ) ; boolean exception = false ; try { com . itextpdf . kernel . geom . IDENT_3 . METHOD_2 ( IDENT_2 ) ; } catch ( com . itextpdf . kernel . IDENT_4 e ) { exception = true ; } "<AssertPlaceHolder>" ; } METHOD_2 ( com . itextpdf . kernel . pdf . METHOD_1 ) { java . util . List < com . itextpdf . kernel . geom . IDENT_3 > IDENT_5 = new java . util . ArrayList ( ) ; if ( ( ( IDENT_6 . size ( ) ) OP_0 8 ) != 0 ) { throw new com . itextpdf . kernel . METHOD_3 ( com . itextpdf . kernel . METHOD_3 . IDENT_7 ) ; } for ( int i = 0 ; i < ( IDENT_6 . size ( ) ) ; i += 8 ) { float [ ] IDENT_8 = java . util . Arrays . METHOD_4 ( IDENT_6 . METHOD_5 ( ) , i , ( i + 8 ) ) ; com . itextpdf . kernel . pdf . METHOD_1 IDENT_9 = new com . itextpdf . kernel . pdf . METHOD_1 ( IDENT_8 ) ; IDENT_5 . add ( com . itextpdf . kernel . geom . IDENT_3 . METHOD_6 ( IDENT_9 ) ) ; } return IDENT_5 ; }
org . junit . Assert . assertTrue ( exception ) 