METHOD_0 ( ) { com . itextpdf . kernel . geom . IDENT_0 expected = new com . itextpdf . kernel . geom . METHOD_1 ( 1.0 , 0.0 , 0.0 , 1.0 , FLOAT_0 , FLOAT_1 ) ; com . itextpdf . kernel . geom . METHOD_1 actual = com . itextpdf . IDENT_1 . utils . IDENT_2 . METHOD_2 ( STRING_0 ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . String ) { if ( transform == null ) { throw new com . itextpdf . IDENT_1 . exceptions . METHOD_3 ( com . itextpdf . IDENT_1 . exceptions . IDENT_3 . IDENT_4 ) ; } if ( transform . isEmpty ( ) ) { throw new com . itextpdf . IDENT_1 . exceptions . METHOD_3 ( com . itextpdf . IDENT_1 . exceptions . IDENT_3 . IDENT_5 ) ; } com . itextpdf . kernel . geom . METHOD_1 IDENT_6 = new com . itextpdf . kernel . geom . METHOD_1 ( ) ; java . util . List < java . lang . String > IDENT_7 = com . itextpdf . IDENT_1 . utils . IDENT_2 . METHOD_4 ( transform ) ; for ( java . lang . String IDENT_8 : IDENT_7 ) { com . itextpdf . kernel . geom . METHOD_1 IDENT_9 = com . itextpdf . IDENT_1 . utils . IDENT_2 . METHOD_5 ( IDENT_8 ) ; if ( IDENT_9 != null ) { IDENT_6 . METHOD_6 ( IDENT_9 ) ; } } return IDENT_6 ; }
org . junit . Assert . assertEquals ( expected , actual ) 