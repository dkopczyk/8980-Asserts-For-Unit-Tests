METHOD_0 ( ) { io . IDENT_0 . IDENT_1 s = io . IDENT_0 . IDENT_2 . IDENT_3 . io ( ) ; io . IDENT_0 . IDENT_1 . IDENT_4 IDENT_5 = io . IDENT_0 . IDENT_2 . IDENT_3 . io ( ) . METHOD_1 ( ) ; try { for ( int i = 0 ; i < INT_0 ; i ++ ) { if ( ( i OP_0 1000 ) == 0 ) { System . out . println ( i ) ; } final com . IDENT_6 . IDENT_7 . IDENT_8 < java . lang . Object > rs = com . IDENT_6 . IDENT_7 . IDENT_8 . METHOD_2 ( 2 ) ; final java . util . concurrent . IDENT_9 IDENT_10 = new java . util . concurrent . METHOD_3 ( 1 ) ; final java . util . concurrent . METHOD_3 start = new java . util . concurrent . METHOD_3 ( 1 ) ; IDENT_5 . METHOD_4 ( new java . lang . METHOD_5 ( ) { @ com . IDENT_6 . IDENT_7 . Override public void run ( ) { try { start . METHOD_6 ( ) ; } catch ( java . lang . Exception IDENT_11 ) { IDENT_11 . printStackTrace ( ) ; } rs . accept ( 1 ) ; } } ) ; final java . util . concurrent . atomic . IDENT_12 < java . lang . Object > o = new java . util . concurrent . atomic . IDENT_12 < java . lang . Object > ( ) ; rs . METHOD_7 ( s ) . METHOD_8 ( io . IDENT_0 . IDENT_2 . IDENT_3 . io ( ) ) . METHOD_9 ( new io . IDENT_0 . IDENT_13 . IDENT_14 < java . lang . Object > ( ) { @ com . IDENT_6 . IDENT_7 . Override MOD_0 void METHOD_10 ( ) { super . METHOD_10 ( ) ; } @ com . IDENT_6 . IDENT_7 . Override public void METHOD_11 ( ) { o . set ( ( - 1 ) ) ; IDENT_10 . METHOD_12 ( ) ; } @ com . IDENT_6 . IDENT_7 . Override public void METHOD_13 ( java . lang . Throwable e ) { o . set ( e ) ; IDENT_10 . METHOD_12 ( ) ; } @ com . IDENT_6 . IDENT_7 . Override public void METHOD_14 ( java . lang . Object t ) { o . set ( t ) ; IDENT_10 . METHOD_12 ( ) ; } } ) ; start . METHOD_12 ( ) ; if ( ! ( IDENT_10 . METHOD_6 ( 5 , TimeUnit . IDENT_15 ) ) ) { System . out . println ( o . get ( ) ) ; System . out . println ( rs . METHOD_15 ( ) ) ; org . junit . Assert . fail ( ( STRING_0 + i ) ) ; break ; } else { "<AssertPlaceHolder>" ; } } } finally { IDENT_5 . METHOD_16 ( ) ; } } METHOD_15 ( ) { return ( IDENT_16 . get ( ) . length ) != 0 ; }
org . junit . Assert . assertEquals ( 1 , o . get ( ) ) 