METHOD_0 ( ) { ca . uhn . fhir . jpa . provider . IDENT_0 . IDENT_1 IDENT_2 = new ca . uhn . fhir . jpa . provider . IDENT_0 . METHOD_1 ( ) ; IDENT_2 . METHOD_2 ( STRING_0 ) ; IDENT_2 . METHOD_3 ( "foo" ) ; IDENT_2 . METHOD_4 ( org . IDENT_3 . fhir . IDENT_0 . model . IDENT_4 . IDENT_5 . IDENT_6 ) ; IDENT_2 . METHOD_5 ( STRING_1 ) ; IDENT_2 . METHOD_6 ( STRING_2 ) ; IDENT_2 . METHOD_7 ( org . IDENT_3 . fhir . IDENT_0 . model . METHOD_1 . IDENT_7 . IDENT_8 ) ; IDENT_2 . METHOD_8 ( org . IDENT_3 . fhir . IDENT_0 . model . IDENT_4 . IDENT_9 . IDENT_10 ) ; IDENT_11 . create ( IDENT_2 , IDENT_12 ) ; IDENT_13 . METHOD_9 ( ) ; ca . uhn . fhir . jpa . provider . IDENT_0 . IDENT_14 IDENT_15 = new ca . uhn . fhir . jpa . provider . IDENT_0 . METHOD_10 ( ) ; IDENT_15 . METHOD_11 ( IDENT_16 . IDENT_17 ) ; org . IDENT_3 . fhir . instance . model . api . IDENT_18 IDENT_19 = IDENT_20 . create ( IDENT_15 , IDENT_12 ) . getId ( ) . METHOD_12 ( ) ; ca . uhn . fhir . jpa . provider . IDENT_0 . METHOD_10 IDENT_21 = new ca . uhn . fhir . jpa . provider . IDENT_0 . METHOD_10 ( ) ; IDENT_21 . METHOD_11 ( IDENT_16 . IDENT_22 ) ; org . IDENT_3 . fhir . instance . model . api . IDENT_18 IDENT_23 = IDENT_20 . create ( IDENT_21 , IDENT_12 ) . getId ( ) . METHOD_12 ( ) ; ca . uhn . fhir . jpa . IDENT_24 . IDENT_25 map ; ca . uhn . fhir . rest . api . server . IDENT_26 results ; java . util . List < java . lang . String > IDENT_27 ; ca . uhn . fhir . jpa . provider . IDENT_0 . IDENT_28 result ; result = IDENT_29 . search ( ) . METHOD_13 ( ca . uhn . fhir . jpa . provider . IDENT_0 . METHOD_10 . class ) . METHOD_14 ( new ca . uhn . fhir . rest . IDENT_30 . METHOD_15 ( "foo" ) . METHOD_16 ( ) . code ( STRING_3 ) ) . METHOD_17 ( ca . uhn . fhir . jpa . provider . IDENT_0 . IDENT_28 . class ) . execute ( ) ; IDENT_27 = METHOD_18 ( result ) ; "<AssertPlaceHolder>" ; } contains ( java . lang . Object ) { return IDENT_31 . contains ( IDENT_32 ) ; }
org . junit . Assert . assertThat ( IDENT_27 , org . hamcrest . Matchers . contains ( IDENT_19 . getValue ( ) ) ) 