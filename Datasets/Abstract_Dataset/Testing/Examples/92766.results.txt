METHOD_0 ( ) { matcher . METHOD_1 ( "foo" , STRING_0 ) ; org . mockserver . matchers . IDENT_0 IDENT_1 = new org . mockserver . matchers . METHOD_2 ( new org . mockserver . logging . METHOD_3 ( ) , matcher ) ; IDENT_2 . METHOD_1 ( "foo" , "bar" , STRING_1 ) ; "<AssertPlaceHolder>" ; } matches ( org . mockserver . model . IDENT_3 , java . lang . String ) { boolean result = false ; if ( ( IDENT_4 ) == null ) { IDENT_5 . trace ( context , ( ( ( STRING_2 + IDENT_2 ) + "]" ) + ( new java . lang . RuntimeException ( ( ( STRING_2 + IDENT_2 ) + "]" ) ) ) ) ) ; } else if ( matcher . equals ( IDENT_2 ) ) { result = true ; } else if ( IDENT_2 != null ) { try { result = ( ( java . lang . Boolean ) ( IDENT_4 . evaluate ( IDENT_6 . METHOD_4 ( IDENT_2 , new org . mockserver . matchers . IDENT_7 . METHOD_5 ( ) { @ org . mockserver . matchers . Override public void METHOD_6 ( final java . lang . String IDENT_2 , final java . lang . Exception exception ) { IDENT_5 . warn ( context , ( ( ( ( STRING_3 + ( matcher ) ) + STRING_4 ) + IDENT_2 ) + "]" ) , exception ) ; } } ) , IDENT_8 . IDENT_9 ) ) ) ; } catch ( java . lang . Exception e ) { IDENT_5 . trace ( context , ( ( ( ( ( STRING_5 + ( matcher ) ) + STRING_6 ) + IDENT_2 ) + STRING_7 ) + ( e . getMessage ( ) ) ) ) ; } } if ( ! result ) { IDENT_5 . trace ( STRING_8 , IDENT_2 , matcher ) ; } return ( IDENT_10 ) != result ; }
org . junit . Assert . assertTrue ( IDENT_1 . matches ( null , IDENT_2 ) ) 