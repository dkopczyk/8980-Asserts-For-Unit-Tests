METHOD_0 ( ) { java . lang . String input = STRING_0 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { try { byte [ ] IDENT_0 = java . net . IDENT_1 . decode ( input , IDENT_2 . UTF_8 . name ( ) ) . getBytes ( IDENT_2 . UTF_8 ) ; java . io . ByteArrayOutputStream IDENT_3 = new java . io . ByteArrayOutputStream ( IDENT_0 . length ) ; for ( byte IDENT_4 : IDENT_0 ) { int b = IDENT_4 ; if ( b < 0 ) { b += INT_0 ; } if ( ( ( ( ( b >= STRING_1 ) && ( b <= STRING_2 ) ) || ( ( b >= STRING_3 ) && ( b <= STRING_4 ) ) ) || ( ( b >= STRING_5 ) && ( b <= STRING_6 ) ) ) || ( ( java . util . Arrays . METHOD_2 ( org . mockserver . url . IDENT_5 . IDENT_6 , b ) ) >= 0 ) ) { IDENT_3 . write ( b ) ; } else { IDENT_3 . write ( STRING_7 ) ; char IDENT_7 = java . lang . IDENT_8 . METHOD_3 ( java . lang . IDENT_8 . METHOD_4 ( ( ( b > > 4 ) & 15 ) , 16 ) ) ; char IDENT_9 = java . lang . IDENT_8 . METHOD_3 ( java . lang . IDENT_8 . METHOD_4 ( ( b & 15 ) , 16 ) ) ; IDENT_3 . write ( IDENT_7 ) ; IDENT_3 . write ( IDENT_9 ) ; } } return new java . lang . String ( IDENT_3 . toByteArray ( ) , java . nio . IDENT_10 . IDENT_2 . UTF_8 ) ; } catch ( java . lang . Exception e ) { org . mockserver . url . IDENT_5 . IDENT_11 . trace ( ( ( STRING_8 + input ) + "]" ) , e ) ; return input ; } }
org . junit . Assert . assertEquals ( input , org . mockserver . url . IDENT_5 . METHOD_1 ( input ) ) 