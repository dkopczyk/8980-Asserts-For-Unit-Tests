METHOD_0 ( ) { java . util . Date IDENT_0 = java . util . Date . from ( java . time . IDENT_1 . METHOD_1 ( java . time . IDENT_2 . of ( INT_0 , 9 , INT_1 ) . METHOD_2 ( ) , java . time . IDENT_3 . METHOD_3 ( ) , null ) . METHOD_4 ( ) ) ; de . IDENT_4 . IDENT_5 . util . IDENT_6 IDENT_7 = new de . IDENT_4 . IDENT_5 . util . METHOD_5 ( ) ; IDENT_7 . IDENT_8 = 6 ; IDENT_7 . IDENT_9 = de . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 . IDENT_12 ; IDENT_7 . IDENT_13 = 3 ; IDENT_7 . IDENT_14 = de . IDENT_4 . IDENT_5 . IDENT_10 . IDENT_11 . IDENT_12 ; java . util . Date actual = de . IDENT_4 . IDENT_5 . util . IDENT_15 . METHOD_6 ( now , IDENT_0 , false , IDENT_7 ) ; java . util . Date expected = java . util . Date . from ( java . time . IDENT_1 . METHOD_1 ( java . time . IDENT_2 . of ( INT_2 , 3 , INT_1 ) . METHOD_2 ( ) , java . time . IDENT_3 . METHOD_3 ( ) , null ) . METHOD_4 ( ) ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Date , java . util . Date , boolean , de . IDENT_4 . IDENT_5 . util . METHOD_5 ) { if ( IDENT_16 == null ) { return null ; } if ( IDENT_0 == null ) { return null ; } if ( IDENT_7 == null ) { return null ; } java . util . Calendar IDENT_17 = java . util . Calendar . getInstance ( ) ; IDENT_17 . METHOD_7 ( de . IDENT_18 . IDENT_19 . util . IDENT_20 . METHOD_8 ( IDENT_16 ) ) ; java . util . Calendar IDENT_21 = java . util . Calendar . getInstance ( ) ; IDENT_21 . METHOD_7 ( IDENT_0 ) ; if ( IDENT_7 . IDENT_22 ) { switch ( IDENT_7 . IDENT_9 ) { case IDENT_23 : IDENT_21 . set ( Calendar . IDENT_24 , Calendar . IDENT_25 ) ; IDENT_21 . add ( Calendar . IDENT_26 , 1 ) ; break ; case IDENT_12 : IDENT_21 . set ( Calendar . IDENT_27 , 1 ) ; IDENT_21 . add ( Calendar . IDENT_28 , 1 ) ; break ; case IDENT_29 : IDENT_21 . set ( Calendar . IDENT_30 , 1 ) ; IDENT_21 . add ( Calendar . IDENT_31 , 1 ) ; break ; default : } } boolean first = true ; boolean IDENT_32 = true ; while ( IDENT_32 && ( ( ! ( IDENT_21 . METHOD_9 ( IDENT_17 ) ) ) || ( first && IDENT_33 ) ) ) { if ( first ) { IDENT_32 = de . IDENT_4 . IDENT_5 . util . IDENT_15 . METHOD_10 ( IDENT_21 , IDENT_7 . IDENT_9 , IDENT_7 . IDENT_8 ) ; first = false ; } else { IDENT_32 = de . IDENT_4 . IDENT_5 . util . IDENT_15 . METHOD_10 ( IDENT_21 , IDENT_7 . IDENT_14 , IDENT_7 . IDENT_13 ) ; } } return IDENT_32 ? IDENT_21 . getTime ( ) : null ; }
org . junit . Assert . assertEquals ( expected , actual ) 