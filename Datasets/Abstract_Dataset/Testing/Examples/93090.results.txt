METHOD_0 ( ) { java . util . List < IDENT_0 . util . IDENT_1 > IDENT_2 = document . select ( STRING_0 ) ; java . util . Map < java . lang . Integer , java . lang . Integer > METHOD_0 = new java . util . HashMap ( ) ; for ( IDENT_0 . util . IDENT_1 IDENT_3 : IDENT_2 ) { int IDENT_4 = java . lang . Integer . METHOD_1 ( IDENT_3 . METHOD_2 ( STRING_1 ) ) ; int IDENT_5 = java . lang . Integer . METHOD_1 ( IDENT_3 . METHOD_2 ( STRING_2 ) ) ; if ( IDENT_5 <= 0 ) { org . junit . Assert . fail ( ( STRING_3 + IDENT_5 ) ) ; } METHOD_0 . put ( IDENT_4 , IDENT_5 ) ; } int IDENT_6 = 0 ; for ( int i = 1 ; true ; i ++ ) { java . lang . Integer page = METHOD_0 . get ( i ) ; if ( page == null ) { break ; } "<AssertPlaceHolder>" ; IDENT_6 = page ; } } get ( java . lang . String ) { org . apache . http . client . methods . IDENT_7 request = new org . apache . http . client . methods . METHOD_3 ( url ) ; try ( org . apache . http . impl . client . IDENT_8 client = org . apache . http . impl . client . IDENT_9 . create ( ) . build ( ) ) { org . apache . http . IDENT_10 response = client . execute ( request ) ; return org . apache . http . util . IDENT_11 . toString ( response . METHOD_4 ( ) ) ; } }
org . junit . Assert . assertTrue ( ( page > IDENT_6 ) ) 