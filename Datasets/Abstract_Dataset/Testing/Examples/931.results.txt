METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . data . filter . value . IDENT_2 IDENT_3 = METHOD_1 ( com . IDENT_0 . IDENT_1 . data . filter . value . IDENT_4 . class , STRING_0 ) ; com . IDENT_0 . IDENT_5 . core . IDENT_6 IDENT_5 = com . IDENT_0 . IDENT_5 . core . IDENT_7 . decode ( STRING_1 ) ; com . IDENT_0 . IDENT_5 . value . IDENT_8 arr = com . IDENT_0 . IDENT_5 . value . IDENT_9 . METHOD_2 ( STRING_2 ) . METHOD_3 ( ) ; "<AssertPlaceHolder>" ; } filter ( com . IDENT_0 . IDENT_5 . value . IDENT_10 , com . IDENT_0 . IDENT_5 . core . IDENT_6 ) { if ( ( value != null ) && ( ( value . METHOD_4 ( ) ) == ( IDENT_10 . IDENT_11 . IDENT_12 ) ) ) { com . IDENT_0 . IDENT_5 . value . IDENT_8 in = value . METHOD_3 ( ) ; com . IDENT_0 . IDENT_5 . value . IDENT_8 out = null ; for ( com . IDENT_0 . IDENT_5 . value . IDENT_10 vo : in ) { com . IDENT_0 . IDENT_5 . value . IDENT_10 val = this . IDENT_13 . filter ( vo , context ) ; if ( val != null ) { if ( out == null ) { out = com . IDENT_0 . IDENT_5 . value . IDENT_9 . METHOD_5 ( in . size ( ) ) ; } out . add ( val ) ; } } return out ; } return null ; }
org . junit . Assert . assertEquals ( IDENT_3 . filter ( arr , IDENT_5 ) , arr . get ( 2 ) ) 