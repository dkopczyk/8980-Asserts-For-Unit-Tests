METHOD_0 ( ) { org . apache . IDENT_0 . channel . file . TestUtils . TestUtils . METHOD_1 ( STRING_0 0 , new java . io . File ( IDENT_1 , STRING_0 1 ) ) ; for ( int i = 0 ; i < ( IDENT_2 . length ) ; i ++ ) { int IDENT_3 = i + 1 ; org . apache . IDENT_0 . channel . file . TestUtils . TestUtils . METHOD_1 ( ( ( STRING_1 + IDENT_3 ) + STRING_0 2 ) , new java . io . File ( IDENT_2 [ i ] , ( STRING_2 + IDENT_3 ) ) ) ; } java . util . Map < java . lang . String , java . lang . String > IDENT_4 = com . google . common . collect . IDENT_5 . METHOD_2 ( ) ; IDENT_4 . put ( IDENT_6 . IDENT_7 , java . lang . String . valueOf ( 10 ) ) ; IDENT_4 . put ( IDENT_6 . IDENT_8 , java . lang . String . valueOf ( 10 ) ) ; channel = METHOD_3 ( IDENT_4 ) ; channel . start ( ) ; "<AssertPlaceHolder>" ; java . util . Set < java . lang . String > events = METHOD_4 ( channel , 1 ) ; java . util . Set < java . lang . String > expected = new java . util . HashSet < java . lang . String > ( ) ; expected . addAll ( java . util . Arrays . asList ( new java . lang . String [ ] { STRING_3 , STRING_4 , STRING_0 , STRING_5 , STRING_6 , STRING_7 , STRING_8 , STRING_9 } ) ) ; METHOD_5 ( expected , events ) ; } METHOD_6 ( ) { return IDENT_9 ; }
org . junit . Assert . assertTrue ( channel . METHOD_6 ( ) ) 