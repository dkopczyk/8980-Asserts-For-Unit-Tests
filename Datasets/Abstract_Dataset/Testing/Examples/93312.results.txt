METHOD_0 ( ) { org . glassfish . IDENT_0 . IDENT_1 . LOGGER . log ( IDENT_2 . IDENT_3 , STRING_0 , transport . getName ( ) ) ; final int IDENT_4 = 10 ; final int IDENT_5 = ( org . glassfish . IDENT_0 . IDENT_1 . IDENT_6 ) + INT_0 ; final org . glassfish . IDENT_0 . IDENT_7 IDENT_8 = new org . glassfish . IDENT_0 . METHOD_1 ( IDENT_5 , ( ( IDENT_5 + IDENT_4 ) - 1 ) ) ; org . glassfish . IDENT_0 . IDENT_9 connection ; transport . METHOD_2 ( false ) ; try { for ( int i = 0 ; i < IDENT_4 ; i ++ ) { transport . METHOD_3 ( STRING_1 , IDENT_8 , INT_1 ) ; } try { transport . METHOD_3 ( STRING_1 , IDENT_8 , INT_1 ) ; org . junit . Assert . fail ( STRING_2 ) ; } catch ( java . io . IOException e ) { } transport . start ( ) ; for ( int i = 0 ; i < IDENT_4 ; i ++ ) { java . util . concurrent . IDENT_10 < org . glassfish . IDENT_0 . IDENT_9 > future = transport . connect ( STRING_1 , ( IDENT_5 + i ) ) ; connection = future . get ( 10 , TimeUnit . IDENT_11 ) ; "<AssertPlaceHolder>" ; connection . METHOD_4 ( ) ; } } finally { transport . METHOD_5 ( ) ; } } get ( org . glassfish . IDENT_0 . IDENT_12 . IDENT_13 . Operation , int ) { final int IDENT_14 = operation . METHOD_6 ( ) ; final org . glassfish . IDENT_0 . IDENT_12 . IDENT_15 . IDENT_16 IDENT_17 = state [ IDENT_14 ] [ IDENT_18 ] ; if ( ( IDENT_17 != null ) && ( IDENT_17 . isValid ) ) { return IDENT_17 ; } return null ; }
org . junit . Assert . assertTrue ( ( connection != null ) ) 