METHOD_0 ( ) { org . glassfish . IDENT_0 . api . IDENT_1 IDENT_2 = org . glassfish . IDENT_0 . IDENT_3 . test . IDENT_4 . IDENT_5 . METHOD_1 ( ) ; org . glassfish . IDENT_0 . xml . api . IDENT_6 IDENT_7 = IDENT_2 . METHOD_2 ( org . glassfish . IDENT_0 . xml . api . IDENT_6 . class , IDENT_8 . IDENT_9 ) ; "<AssertPlaceHolder>" ; java . io . ByteArrayOutputStream IDENT_10 = new java . io . ByteArrayOutputStream ( ) ; try { for ( int IDENT_11 = 0 ; IDENT_11 < ( org . glassfish . IDENT_0 . IDENT_3 . test . IDENT_12 . IDENT_13 . IDENT_14 ) ; IDENT_11 ++ ) { org . glassfish . IDENT_0 . xml . api . IDENT_15 < org . glassfish . IDENT_0 . IDENT_3 . test . beans . IDENT_16 > IDENT_17 = org . glassfish . IDENT_0 . IDENT_3 . test . IDENT_12 . IDENT_13 . METHOD_3 ( IDENT_7 ) ; IDENT_17 . METHOD_4 ( ) . METHOD_5 ( ( ( long ) ( IDENT_11 ) ) ) ; IDENT_17 . METHOD_6 ( IDENT_10 ) ; } } finally { IDENT_10 . close ( ) ; } byte [ ] output = IDENT_10 . toByteArray ( ) ; java . io . ByteArrayInputStream IDENT_18 = new java . io . ByteArrayInputStream ( output ) ; try { for ( int IDENT_11 = 0 ; IDENT_11 < ( org . glassfish . IDENT_0 . IDENT_3 . test . IDENT_12 . IDENT_13 . IDENT_14 ) ; IDENT_11 ++ ) { org . glassfish . IDENT_0 . xml . api . IDENT_15 < org . glassfish . IDENT_0 . IDENT_3 . test . beans . IDENT_16 > IDENT_19 = IDENT_7 . METHOD_7 ( IDENT_18 , org . glassfish . IDENT_0 . IDENT_3 . test . beans . IDENT_16 . class ) ; org . glassfish . IDENT_0 . IDENT_3 . test . IDENT_12 . IDENT_13 . METHOD_8 ( IDENT_19 , IDENT_11 ) ; } } finally { IDENT_18 . close ( ) ; } } METHOD_2 ( java . lang . reflect . Type , java . lang . annotation . IDENT_20 [ ] ) { return METHOD_9 ( IDENT_21 , null , null , IDENT_22 ) ; }
org . junit . Assert . assertNotNull ( IDENT_7 ) 