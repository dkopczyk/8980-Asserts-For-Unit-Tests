METHOD_0 ( ) { java . lang . String json = STRING_0 ; "<AssertPlaceHolder>" ; } METHOD_1 ( java . lang . String ) { if ( com . google . common . base . IDENT_0 . METHOD_2 ( IDENT_1 ) ) { return IDENT_2 . IDENT_3 . IDENT_4 ; } final com . fasterxml . jackson . databind . IDENT_5 mapper = new com . fasterxml . jackson . databind . METHOD_3 ( ) ; try { java . util . Map < java . lang . String , java . lang . Object > IDENT_6 = mapper . METHOD_4 ( IDENT_1 , java . util . Map . class ) ; if ( ( ( IDENT_6 != null ) && ( IDENT_6 . containsKey ( STRING_1 ) ) ) && ( ( ( java . util . Map < java . lang . String , java . lang . Object > ) ( IDENT_6 . get ( STRING_1 ) ) ) . containsKey ( STRING_2 ) ) ) { java . util . Map < java . lang . String , java . lang . String > IDENT_7 = ( ( java . util . Map < java . lang . String , java . util . List < java . util . Map < java . lang . String , java . lang . String > > > ) ( IDENT_6 . get ( STRING_1 ) ) ) . get ( STRING_2 ) . get ( 0 ) ; if ( ( IDENT_7 != null ) && ( IDENT_7 . containsKey ( STRING_3 ) ) ) { if ( STRING_4 . equals ( IDENT_7 . get ( STRING_3 ) ) ) { return IDENT_2 . IDENT_3 . IDENT_8 ; } else if ( STRING_5 . equals ( IDENT_7 . get ( STRING_3 ) ) ) { return IDENT_2 . IDENT_3 . IDENT_9 ; } } } } catch ( java . io . IOException e ) { org . apache . IDENT_10 . IDENT_11 . driver . IDENT_12 . IDENT_13 . LOG . warn ( ( ( STRING_6 + IDENT_1 ) + STRING_7 ) , e ) ; } return IDENT_2 . IDENT_3 . IDENT_4 ; }
org . junit . Assert . assertEquals ( driver . METHOD_1 ( json ) , IDENT_2 . IDENT_3 . IDENT_8 ) 