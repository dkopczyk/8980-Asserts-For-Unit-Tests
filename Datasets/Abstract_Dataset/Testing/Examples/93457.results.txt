METHOD_0 ( ) { com . sun . mail . util . logging . IDENT_0 f = new com . sun . mail . util . logging . METHOD_1 ( STRING_0 , ( ( java . util . logging . IDENT_1 ) ( null ) ) , ( ( com . sun . mail . util . logging . IDENT_2 < com . sun . mail . util . logging . IDENT_3 > ) ( null ) ) ) ; com . sun . mail . util . logging . IDENT_3 r = new com . sun . mail . util . logging . METHOD_2 ( IDENT_4 . IDENT_5 , STRING_1 ) ; r . METHOD_3 ( new java . lang . Object [ ] { 1 } ) ; f . format ( r ) ; java . lang . String output = f . METHOD_4 ( ( ( com . sun . mail . util . logging . IDENT_6 ) ( null ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_5 ( java . lang . Throwable ) { java . lang . String r ; if ( t != null ) { final java . lang . Throwable apply = apply ( t ) ; final java . lang . String m = apply . METHOD_6 ( ) ; final java . lang . String s = apply . toString ( ) ; final java . lang . String IDENT_7 = com . sun . mail . util . logging . IDENT_8 . METHOD_7 ( apply . getClass ( ) ) ; if ( ! ( com . sun . mail . util . logging . IDENT_8 . METHOD_8 ( m ) ) ) { if ( s . contains ( m ) ) { if ( ( s . startsWith ( apply . getClass ( ) . getName ( ) ) ) || ( s . startsWith ( IDENT_7 ) ) ) { r = com . sun . mail . util . logging . IDENT_8 . METHOD_9 ( m , t ) ; } else { r = com . sun . mail . util . logging . IDENT_8 . METHOD_9 ( com . sun . mail . util . logging . IDENT_8 . METHOD_7 ( s ) , t ) ; } } else { r = com . sun . mail . util . logging . IDENT_8 . METHOD_9 ( ( ( ( com . sun . mail . util . logging . IDENT_8 . METHOD_7 ( s ) ) + STRING_2 ) + m ) , t ) ; } } else { r = com . sun . mail . util . logging . IDENT_8 . METHOD_9 ( com . sun . mail . util . logging . IDENT_8 . METHOD_7 ( s ) , t ) ; } if ( ! ( r . contains ( IDENT_7 ) ) ) { r = ( IDENT_7 + STRING_2 ) + r ; } } else { r = "" ; } return r ; }
org . junit . Assert . assertEquals ( f . METHOD_5 ( r ) , output ) 