METHOD_0 ( ) { java . io . File IDENT_0 = new java . io . File ( IDENT_1 . METHOD_1 ( ) . METHOD_2 ( ) , STRING_0 ) ; org . apache . commons . io . IDENT_2 . METHOD_3 ( new java . io . File ( STRING_1 ) , IDENT_0 ) ; java . util . List < io . IDENT_3 . IDENT_4 . management . IDENT_5 > IDENT_6 = new java . util . METHOD_4 ( ) ; IDENT_6 . add ( io . IDENT_3 . IDENT_4 . management . IDENT_5 . from ( STRING_2 ) . to ( STRING_3 ) ) ; IDENT_6 . add ( io . IDENT_3 . IDENT_4 . management . IDENT_5 . from ( STRING_4 ) . to ( STRING_5 ) ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_7 = io . IDENT_3 . IDENT_4 . management . Utils . METHOD_5 ( IDENT_6 ) ; new io . IDENT_3 . IDENT_4 . management . impl . METHOD_6 ( context ) . METHOD_7 ( IDENT_1 , STRING_0 , STRING_6 , IDENT_7 , false ) ; java . lang . String expected = org . apache . commons . io . IDENT_2 . METHOD_8 ( new java . io . File ( STRING_7 ) ) ; java . lang . String IDENT_8 = org . apache . commons . io . IDENT_2 . METHOD_8 ( IDENT_0 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( org . eclipse . jgit . api . IDENT_9 , java . lang . String , java . lang . String , java . util . Map , boolean ) { java . io . File IDENT_10 = new java . io . File ( IDENT_11 . METHOD_1 ( ) . METHOD_2 ( ) , file ) ; if ( ! ( IDENT_10 . METHOD_9 ( ) ) ) { return ; } java . io . IDENT_12 reader = null ; java . io . StringWriter IDENT_13 = new java . io . StringWriter ( ) ; try { io . IDENT_3 . IDENT_4 . management . impl . IDENT_14 . METHOD_10 ( org . osgi . service . log . IDENT_15 . IDENT_16 , ( ( STRING_8 + file ) + STRING_9 ) ) ; reader = new java . io . METHOD_11 ( new java . io . METHOD_12 ( IDENT_10 ) ) ; java . lang . String line = null ; while ( ( line = reader . METHOD_13 ( ) ) != null ) { for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_17 . entrySet ( ) ) { java . lang . String pattern = IDENT_18 + ( entry . getKey ( ) ) ; java . lang . String IDENT_19 = IDENT_18 + ( entry . getValue ( ) ) ; if ( IDENT_20 ) { pattern = pattern . replaceAll ( "/" , STRING_10 ) ; IDENT_19 = IDENT_19 . replaceAll ( "/" , STRING_10 ) ; } if ( line . contains ( pattern ) ) { line = line . replace ( pattern , IDENT_19 ) ; } } IDENT_13 . append ( line ) ; if ( IDENT_20 ) { IDENT_13 . append ( STRING_11 ) ; } IDENT_13 . append ( "\n" ) ; } org . apache . commons . io . IDENT_21 . METHOD_14 ( reader ) ; org . apache . commons . io . IDENT_2 . write ( IDENT_10 , IDENT_13 . toString ( ) ) ; } catch ( java . lang . Exception e ) { io . IDENT_3 . IDENT_4 . management . impl . IDENT_14 . log ( org . osgi . service . log . IDENT_15 . IDENT_22 , null , e . getMessage ( ) , e , true ) ; } finally { org . apache . commons . io . IDENT_21 . METHOD_14 ( reader ) ; } }
org . junit . Assert . assertThat ( IDENT_8 , org . hamcrest . CoreMatchers . equalTo ( expected ) ) 