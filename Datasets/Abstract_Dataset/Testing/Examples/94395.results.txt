test ( ) { com . IDENT_0 . IDENT_1 . internal . IDENT_2 . transaction . IDENT_3 . IDENT_4 IDENT_5 = new com . IDENT_0 . IDENT_1 . internal . IDENT_2 . transaction . IDENT_3 . METHOD_0 ( ) ; javax . transaction . IDENT_6 tx = com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_1 ( ) ; java . util . List < java . lang . Thread > IDENT_7 = new java . util . ArrayList ( ) ; java . util . Set < java . lang . Exception > IDENT_8 = new java . util . HashSet ( ) ; for ( int i = 0 ; i < ( 4 * ( com . IDENT_9 . IDENT_10 . IDENT_11 . jdbc . IDENT_12 . IDENT_13 . IDENT_14 ) ) ; i ++ ) { java . lang . Thread IDENT_15 = new java . lang . Thread ( ( ) -> { try { tx . METHOD_2 ( ) ; IDENT_5 . METHOD_3 ( new javax . transaction . METHOD_4 ( ) { MOD_0 java . sql . IDENT_16 conn ; @ java . lang . Override public void METHOD_5 ( ) { try { conn = java . sql . IDENT_17 . METHOD_6 ( url , IDENT_18 ) ; conn . METHOD_7 ( ) . execute ( ( ( STRING_0 + ( java . lang . Thread . METHOD_8 ( ) . getId ( ) ) ) + STRING_1 ) ) ; } catch ( e ) { IDENT_8 . add ( com . IDENT_9 . IDENT_10 . IDENT_11 . jdbc . IDENT_12 . e ) ; } } @ java . lang . Override public void METHOD_9 ( int status ) { try { conn . close ( ) ; } catch ( e ) { IDENT_8 . add ( com . IDENT_9 . IDENT_10 . IDENT_11 . jdbc . IDENT_12 . e ) ; } } } ) ; tx . commit ( ) ; } catch ( e ) { IDENT_8 . add ( com . IDENT_9 . IDENT_10 . IDENT_11 . jdbc . IDENT_12 . e ) ; } } ) ; IDENT_7 . add ( IDENT_15 ) ; "<AssertPlaceHolder>" ; } for ( java . lang . Thread IDENT_15 : IDENT_7 ) { IDENT_15 . start ( ) ; } for ( java . lang . Thread IDENT_15 : IDENT_7 ) { IDENT_15 . join ( ) ; } } size ( ) { return length ( ) ; }
org . junit . Assert . assertEquals ( IDENT_8 . size ( ) , 0 ) 