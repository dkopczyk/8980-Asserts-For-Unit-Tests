METHOD_0 ( ) { build = mock ( hudson . IDENT_0 . IDENT_1 . class ) ; org . IDENT_2 . plugins . IDENT_3 . IDENT_4 IDENT_5 = new org . IDENT_2 . plugins . IDENT_3 . METHOD_1 ( build , org . IDENT_2 . plugins . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_8 ) ; when ( build . METHOD_2 ( org . IDENT_2 . plugins . IDENT_3 . METHOD_1 . class ) ) . thenReturn ( IDENT_5 ) ; when ( build . METHOD_3 ( ) ) . thenReturn ( org . IDENT_2 . plugins . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_9 ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_10 = org . IDENT_2 . plugins . IDENT_3 . util . IDENT_11 . METHOD_4 ( build , mock ( org . IDENT_2 . lib . IDENT_3 . IDENT_12 . class ) ) ; java . util . Map < java . lang . String , java . lang . String > IDENT_13 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; IDENT_13 . METHOD_5 ( org . IDENT_2 . plugins . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_8 ) ; IDENT_13 . METHOD_5 ( org . IDENT_2 . plugins . IDENT_3 . IDENT_6 . IDENT_7 . IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_6 ( java . util . Map , java . util . Map ) { if ( ( IDENT_14 == null ) && ( IDENT_15 == null ) ) { return true ; } if ( IDENT_14 == null ) { return false ; } if ( IDENT_15 == null ) { return false ; } if ( ( IDENT_14 . size ( ) ) != ( IDENT_15 . size ( ) ) ) { return false ; } for ( Map . Entry < java . lang . String , java . lang . String > entry : IDENT_15 . entrySet ( ) ) { java . lang . String IDENT_16 = IDENT_14 . get ( entry . getKey ( ) ) ; java . lang . String IDENT_17 = IDENT_15 . get ( entry . getKey ( ) ) ; if ( ( IDENT_16 == null ) && ( IDENT_17 == null ) ) { return true ; } if ( IDENT_16 == null ) { return false ; } if ( ! ( IDENT_16 . equals ( IDENT_17 ) ) ) { return false ; } } return true ; }
org . junit . Assert . assertTrue ( METHOD_6 ( IDENT_13 , IDENT_10 ) ) 