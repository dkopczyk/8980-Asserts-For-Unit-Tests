METHOD_0 ( ) { hudson . model . IDENT_0 IDENT_1 = r . METHOD_1 ( ) ; hudson . plugins . IDENT_2 . test . IDENT_3 builder = new hudson . plugins . IDENT_2 . test . METHOD_2 ( ) ; IDENT_1 . METHOD_3 ( ) . add ( builder ) ; hudson . model . IDENT_4 IDENT_5 = r . METHOD_1 ( ) ; IDENT_5 . METHOD_3 ( ) . add ( METHOD_4 ( IDENT_1 , IDENT_6 . IDENT_7 ) ) ; IDENT_5 . METHOD_5 ( 0 ) . get ( ) ; r . METHOD_6 ( ) ; java . util . List < hudson . model . IDENT_8 > IDENT_9 = IDENT_1 . METHOD_7 ( ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( ) { java . util . List < hudson . model . IDENT_10 < ? , ? > > IDENT_9 = new java . util . ArrayList < hudson . model . IDENT_10 < ? , ? > > ( ) ; jenkins . model . IDENT_11 j = jenkins . model . IDENT_11 . getInstance ( ) ; for ( Map . Entry < java . lang . String , java . lang . Integer > entry : IDENT_12 . entrySet ( ) ) { hudson . model . IDENT_13 < ? , ? > job = j . METHOD_8 ( entry . getKey ( ) , hudson . model . IDENT_13 . class ) ; if ( ( null != job ) && ( job instanceof hudson . model . IDENT_14 ) ) { hudson . model . IDENT_14 project = ( ( hudson . model . IDENT_14 ) ( job ) ) ; hudson . model . IDENT_10 build = project . METHOD_9 ( entry . getValue ( ) ) ; if ( null != build ) { IDENT_9 . add ( build ) ; } } } return IDENT_9 ; }
org . junit . Assert . assertEquals ( 1 , IDENT_9 . size ( ) ) 