METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_3 IDENT_4 = new com . IDENT_0 . IDENT_1 . IDENT_2 . METHOD_1 ( ) ; java . security . IDENT_5 factory = java . security . IDENT_5 . getInstance ( STRING_0 ) ; java . security . interfaces . IDENT_6 IDENT_7 = ( ( java . security . interfaces . IDENT_6 ) ( factory . METHOD_2 ( ) . METHOD_3 ( ) ) ) ; byte [ ] IDENT_2 = IDENT_4 . METHOD_4 ( STRING_1 . getBytes ( IDENT_8 . UTF_8 ) , IDENT_7 , new java . security . METHOD_5 ( ) ) ; byte [ ] IDENT_9 = IDENT_4 . METHOD_6 ( IDENT_2 ) ; byte [ ] IDENT_10 = IDENT_4 . METHOD_7 ( IDENT_9 ) ; "<AssertPlaceHolder>" ; } METHOD_7 ( byte [ ] ) { com . IDENT_0 . IDENT_1 . IDENT_11 . IDENT_12 IDENT_13 = new com . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_8 ( IDENT_14 ) ; java . lang . String IDENT_15 = IDENT_13 . METHOD_9 ( ) ; if ( ! ( IDENT_15 . equals ( METHOD_10 ( ) ) ) ) { throw new java . io . IOException ( ( STRING_2 + IDENT_15 ) ) ; } byte [ ] IDENT_16 = IDENT_13 . METHOD_11 ( ) ; if ( ( IDENT_13 . METHOD_12 ( ) ) != 0 ) { throw new java . io . IOException ( STRING_3 ) ; } com . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_8 IDENT_17 = new com . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_8 ( IDENT_16 ) ; byte [ ] r = IDENT_17 . METHOD_13 ( ) . toByteArray ( ) ; byte [ ] s = IDENT_17 . METHOD_13 ( ) . toByteArray ( ) ; int IDENT_18 = r . length ; int IDENT_19 = s . length ; if ( ( ( r [ 0 ] ) & INT_0 ) != 0 ) { IDENT_18 ++ ; } if ( ( ( s [ 0 ] ) & INT_0 ) != 0 ) { IDENT_19 ++ ; } int IDENT_20 = ( 6 + IDENT_18 ) + IDENT_19 ; java . io . ByteArrayOutputStream IDENT_21 = new java . io . ByteArrayOutputStream ( IDENT_20 ) ; IDENT_21 . write ( INT_1 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . METHOD_14 ( ( IDENT_20 - 2 ) , IDENT_21 ) ; IDENT_21 . write ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . IDENT_23 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . METHOD_14 ( IDENT_18 , IDENT_21 ) ; if ( IDENT_18 != ( r . length ) ) { IDENT_21 . write ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . IDENT_24 ) ; } IDENT_21 . write ( r ) ; IDENT_21 . write ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . IDENT_23 ) ; com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . METHOD_14 ( IDENT_19 , IDENT_21 ) ; if ( IDENT_19 != ( s . length ) ) { IDENT_21 . write ( com . IDENT_0 . IDENT_1 . IDENT_2 . IDENT_22 . IDENT_24 ) ; } IDENT_21 . write ( s ) ; return IDENT_21 . toByteArray ( ) ; }
org . junit . Assert . assertArrayEquals ( IDENT_2 , IDENT_10 ) 