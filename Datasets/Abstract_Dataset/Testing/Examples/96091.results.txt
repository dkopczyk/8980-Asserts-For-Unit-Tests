METHOD_0 ( ) { IDENT_0 . IDENT_1 . geometry . IDENT_2 r = new IDENT_0 . IDENT_1 . geometry . METHOD_1 ( 0 , 0 , 10 , 10 ) ; java . util . ArrayList < IDENT_0 . IDENT_1 . geometry . METHOD_1 > IDENT_3 = new java . util . ArrayList ( ) ; IDENT_3 . add ( new IDENT_0 . IDENT_1 . geometry . METHOD_1 ( ( - 100 ) , 10 , INT_0 , 100 ) ) ; IDENT_0 . IDENT_1 . geometry . METHOD_1 pos = new IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . algorithm . geom . METHOD_2 ( ) . METHOD_3 ( r , IDENT_3 ) ; "<AssertPlaceHolder>" ; } METHOD_3 ( IDENT_0 . IDENT_1 . geometry . METHOD_1 , java . util . List ) { java . util . List < IDENT_0 . IDENT_1 . geometry . IDENT_6 > IDENT_7 = new java . util . ArrayList ( ) ; java . util . List < IDENT_0 . IDENT_1 . geometry . IDENT_6 > IDENT_8 = new java . util . ArrayList ( ) ; for ( IDENT_0 . IDENT_1 . geometry . METHOD_1 o : IDENT_9 ) { if ( o . METHOD_4 ( IDENT_10 ) ) { IDENT_7 . add ( new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( o . IDENT_11 . x , o . IDENT_11 . add ( o . IDENT_12 ) . x ) ) ; IDENT_8 . add ( new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( o . IDENT_11 . y , o . IDENT_11 . add ( o . IDENT_12 ) . y ) ) ; } } if ( ( IDENT_7 . size ( ) ) == 0 ) { return IDENT_10 ; } IDENT_0 . IDENT_1 . geometry . METHOD_5 min = new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( ( ( Integer . IDENT_13 ) / 2 ) , ( ( Integer . IDENT_13 ) / 2 ) ) ; IDENT_0 . IDENT_1 . geometry . METHOD_5 max = new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( ( ( Integer . MAX_VALUE ) / 2 ) , ( ( Integer . MAX_VALUE ) / 2 ) ) ; IDENT_7 . add ( min ) ; IDENT_7 . add ( max ) ; IDENT_8 . add ( min ) ; IDENT_8 . add ( max ) ; java . util . IDENT_14 < IDENT_0 . IDENT_1 . geometry . METHOD_5 > IDENT_15 = new java . util . IDENT_14 < IDENT_0 . IDENT_1 . geometry . METHOD_5 > ( ) { @ IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 . algorithm . geom . Override public int compare ( IDENT_0 . IDENT_1 . geometry . METHOD_5 v1 , IDENT_0 . IDENT_1 . geometry . METHOD_5 v2 ) { if ( ( v1 . x ) < ( v2 . x ) ) return - 1 ; if ( ( v1 . x ) > ( v2 . x ) ) return 1 ; return 0 ; } } ; java . util . Collections . METHOD_6 ( IDENT_7 , IDENT_15 ) ; int IDENT_16 = METHOD_7 ( new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( IDENT_10 . IDENT_11 . x , ( ( IDENT_10 . IDENT_11 . x ) + ( IDENT_10 . IDENT_12 . x ) ) ) , IDENT_7 ) ; int IDENT_17 = METHOD_7 ( new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( IDENT_10 . IDENT_11 . y , ( ( IDENT_10 . IDENT_11 . y ) + ( IDENT_10 . IDENT_12 . y ) ) ) , IDENT_8 ) ; IDENT_0 . IDENT_1 . geometry . METHOD_5 IDENT_18 ; if ( ( java . lang . Math . METHOD_8 ( IDENT_16 ) ) < ( java . lang . Math . METHOD_8 ( IDENT_17 ) ) ) { IDENT_18 = new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( IDENT_16 , 0 ) ; } else { IDENT_18 = new IDENT_0 . IDENT_1 . geometry . METHOD_5 ( 0 , IDENT_17 ) ; } return IDENT_10 . add ( IDENT_18 ) ; }
org . junit . Assert . assertEquals ( r , pos ) 