METHOD_0 ( ) { IDENT_0 . remove ( ) ; METHOD_1 ( IDENT_1 . IDENT_2 . base . IDENT_3 . METHOD_2 ( 1 ) , IDENT_1 . IDENT_2 . base . IDENT_3 . < java . lang . String > METHOD_3 ( new java . lang . Throwable ( ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( IDENT_4 ) { return new IDENT_1 . IDENT_2 . base . IDENT_5 < IDENT_4 > ( ) { @ IDENT_1 . IDENT_2 . base . Override public IDENT_1 . IDENT_2 . base . IDENT_6 METHOD_4 ( IDENT_1 . IDENT_2 . base . function . IDENT_7 < ? super IDENT_4 > IDENT_8 ) { IDENT_8 . accept ( val ) ; return IDENT_6 . IDENT_9 ; } @ IDENT_1 . IDENT_2 . base . Override public IDENT_1 . IDENT_2 . base . IDENT_6 METHOD_5 ( IDENT_1 . IDENT_2 . base . function . IDENT_7 < ? super IDENT_4 > IDENT_8 , IDENT_1 . IDENT_2 . base . function . IDENT_7 < java . lang . Throwable > IDENT_10 ) { return METHOD_4 ( IDENT_8 ) ; } @ IDENT_1 . IDENT_2 . base . Override public IDENT_1 . IDENT_2 . base . IDENT_6 METHOD_6 ( IDENT_1 . IDENT_2 . base . function . IDENT_7 < java . lang . Throwable > IDENT_10 ) { return IDENT_6 . IDENT_9 ; } @ IDENT_1 . IDENT_2 . base . Override public < IDENT_11 > IDENT_1 . IDENT_2 . base . IDENT_5 < IDENT_11 > map ( IDENT_1 . IDENT_2 . base . function . IDENT_12 < ? super IDENT_4 , ? extends IDENT_11 > IDENT_13 ) { IDENT_11 result ; try { result = IDENT_13 . apply ( val ) ; } catch ( java . lang . Throwable t ) { return IDENT_1 . IDENT_2 . base . IDENT_3 . METHOD_3 ( t ) ; } return IDENT_1 . IDENT_2 . base . IDENT_3 . METHOD_2 ( result ) ; } @ IDENT_1 . IDENT_2 . base . Override public < IDENT_11 > IDENT_1 . IDENT_2 . base . IDENT_5 < IDENT_11 > METHOD_7 ( IDENT_1 . IDENT_2 . base . function . IDENT_12 < ? super IDENT_4 , IDENT_1 . IDENT_2 . base . IDENT_5 < IDENT_11 > > IDENT_13 ) { IDENT_1 . IDENT_2 . base . IDENT_5 < IDENT_11 > result ; try { result = IDENT_13 . apply ( val ) ; } catch ( java . lang . Throwable t ) { return IDENT_1 . IDENT_2 . base . IDENT_3 . METHOD_3 ( t ) ; } return result == null ? IDENT_1 . IDENT_2 . base . IDENT_3 . < IDENT_11 > METHOD_2 ( null ) : result ; } } ; }
org . junit . Assert . assertNotNull ( error ) 