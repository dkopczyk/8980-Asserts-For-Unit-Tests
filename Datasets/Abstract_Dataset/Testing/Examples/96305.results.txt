METHOD_0 ( ) { final java . lang . String [ ] params = new java . lang . String [ ] { STRING_0 } ; final int IDENT_0 = 1 ; final org . IDENT_1 . IDENT_2 . IDENT_3 statement = METHOD_1 ( org . IDENT_1 . IDENT_2 . IDENT_3 . class ) ; expect ( statement . METHOD_2 ( params [ 0 ] ) ) . andReturn ( IDENT_0 ) ; statement . close ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; final org . IDENT_1 . IDENT_2 . IDENT_4 IDENT_5 = METHOD_1 ( org . IDENT_1 . IDENT_2 . IDENT_4 . class ) ; expect ( IDENT_5 . METHOD_5 ( ) ) . andReturn ( statement ) ; replay ( IDENT_5 , statement ) ; final org . IDENT_1 . IDENT_2 . IDENT_6 . IDENT_7 IDENT_8 = new org . IDENT_1 . IDENT_2 . IDENT_6 . METHOD_6 ( IDENT_5 ) ; "<AssertPlaceHolder>" ; verify ( IDENT_5 , statement ) ; } run ( java . lang . Object [ ] ) { METHOD_7 ( params ) ; java . lang . Exception ex = null ; try { return METHOD_8 ( params ) ; } catch ( java . lang . Exception IDENT_9 ) { ex = IDENT_9 ; } finally { try { METHOD_9 ( params ) ; } catch ( java . lang . Exception IDENT_9 ) { if ( ex == null ) { ex = IDENT_9 ; } } } throw ex ; }
org . junit . Assert . assertEquals ( ( ( java . lang . Integer ) ( IDENT_0 ) ) , IDENT_8 . run ( params ) ) 