METHOD_0 ( ) { java . util . List < java . util . Map < java . lang . String , java . lang . Object > > result = select ( STRING_0 ) . from ( java . util . Collections . emptyList ( ) ) . execute ( ) ; "<AssertPlaceHolder>" ; } execute ( ) { if ( org . apache . commons . IDENT_0 . IDENT_1 . isEmpty ( from ) ) { logger . info ( STRING_1 ) ; return java . util . Collections . emptyList ( ) ; } java . util . List IDENT_2 = new java . util . ArrayList ( this . from ) ; logger . info ( STRING_2 , IDENT_3 , IDENT_2 . size ( ) ) ; org . apache . commons . IDENT_0 . IDENT_1 . filter ( IDENT_2 , this . IDENT_3 ) ; logger . info ( STRING_3 , IDENT_2 . size ( ) ) ; if ( ( null != ( this . IDENT_4 ) ) && ( ( IDENT_2 . size ( ) ) > 1 ) ) { java . util . IDENT_5 IDENT_6 = ( this . IDENT_7 ) ? IDENT_4 . METHOD_1 ( ) : IDENT_4 . METHOD_2 ( ) ; logger . info ( STRING_4 , IDENT_6 ) ; java . util . Collections . METHOD_3 ( IDENT_2 , IDENT_6 ) ; logger . info ( STRING_5 ) ; } logger . info ( STRING_6 , IDENT_8 ) ; java . util . List < T > select = this . IDENT_8 . select ( IDENT_2 ) ; logger . info ( STRING_7 ) ; return select ; }
org . junit . Assert . assertThat ( result , empty ( ) ) 