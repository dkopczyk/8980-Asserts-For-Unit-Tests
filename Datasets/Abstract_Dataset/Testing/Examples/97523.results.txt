METHOD_0 ( ) { org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . List < java . lang . Integer > IDENT_3 = org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . Arrays . asList ( 0 , 1 , 3 , 5 , INT_0 , 15 , 20 , INT_1 , INT_2 , INT_3 ) ; int IDENT_4 = 0 ; org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . IDENT_5 IDENT_6 = new org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . METHOD_1 ( IDENT_4 , IDENT_3 ) ; org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . List < java . lang . Integer > IDENT_7 = IDENT_6 . METHOD_2 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( ) { org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . IDENT_8 IDENT_9 = org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . METHOD_1 . METHOD_3 ( IDENT_10 ) ; org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . List < java . lang . Integer > IDENT_7 = new org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . ArrayList ( ) ; for ( int i = 0 ; i < ( IDENT_9 . METHOD_4 ( ) ) ; ++ i ) { if ( IDENT_9 . get ( i ) ) { IDENT_7 . add ( org . IDENT_0 . impl . IDENT_1 . transform . IDENT_2 . IDENT_11 . METHOD_5 ( IDENT_4 , i ) ) ; } } return IDENT_7 ; }
org . junit . Assert . assertEquals ( IDENT_3 , IDENT_7 ) 