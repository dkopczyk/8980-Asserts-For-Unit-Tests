METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . io . IDENT_2 source = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . io . IDENT_2 . class ) ; com . github . IDENT_0 . IDENT_1 . IDENT_3 template = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_3 . class ) ; java . util . concurrent . IDENT_4 < org . apache . commons . lang3 . tuple . IDENT_5 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 , com . github . IDENT_0 . IDENT_1 . IDENT_3 > > future = METHOD_1 ( java . util . concurrent . IDENT_4 . class ) ; expect ( future . get ( ) ) . METHOD_2 ( new java . util . concurrent . METHOD_3 ( ) ) ; expect ( future . get ( ) ) . andReturn ( org . apache . commons . lang3 . tuple . IDENT_6 . < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 , com . github . IDENT_0 . IDENT_1 . IDENT_3 > of ( source , template ) ) ; org . easymock . IDENT_7 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 > IDENT_8 = new org . easymock . METHOD_4 ( ) ; org . easymock . METHOD_4 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 > IDENT_9 = new org . easymock . METHOD_4 ( ) ; java . util . concurrent . IDENT_10 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 , java . util . concurrent . IDENT_4 < org . apache . commons . lang3 . tuple . IDENT_5 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 , com . github . IDENT_0 . IDENT_1 . IDENT_3 > > > cache = METHOD_1 ( java . util . concurrent . IDENT_10 . class ) ; expect ( cache . get ( METHOD_5 ( IDENT_8 ) ) ) . andReturn ( future ) . times ( 2 ) ; expect ( cache . remove ( METHOD_5 ( IDENT_9 ) , eq ( future ) ) ) . andReturn ( true ) ; com . github . IDENT_0 . IDENT_1 . IDENT_11 parser = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_11 . class ) ; java . lang . Object [ ] IDENT_12 = new java . lang . Object [ ] { cache , source , future , template } ; replay ( IDENT_12 ) ; com . github . IDENT_0 . IDENT_1 . IDENT_3 result = new com . github . IDENT_0 . IDENT_1 . cache . METHOD_6 ( cache ) . get ( source , parser ) ; "<AssertPlaceHolder>" ; verify ( IDENT_12 ) ; } get ( ) { com . google . common . cache . IDENT_13 < com . github . IDENT_0 . IDENT_1 . io . IDENT_2 , com . github . IDENT_0 . IDENT_1 . IDENT_3 > cache = com . google . common . cache . IDENT_14 . METHOD_7 ( ) . build ( ) ; com . github . IDENT_0 . IDENT_1 . io . IDENT_2 source = new com . github . IDENT_0 . IDENT_1 . io . METHOD_8 ( STRING_0 , getClass ( ) . getResource ( STRING_0 ) ) ; com . github . IDENT_0 . IDENT_1 . IDENT_3 template = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_3 . class ) ; com . github . IDENT_0 . IDENT_1 . IDENT_11 parser = METHOD_1 ( com . github . IDENT_0 . IDENT_1 . IDENT_11 . class ) ; expect ( parser . parse ( source ) ) . andReturn ( template ) ; replay ( parser , template ) ; org . junit . Assert . assertEquals ( template , new com . github . IDENT_0 . IDENT_1 . cache . METHOD_9 ( cache ) . get ( source , parser ) ) ; org . junit . Assert . assertEquals ( template , new com . github . IDENT_0 . IDENT_1 . cache . METHOD_9 ( cache ) . get ( source , parser ) ) ; verify ( parser , template ) ; }
org . junit . Assert . assertEquals ( template , result ) 