METHOD_0 ( ) { try ( java . io . InputStream i = new org . apache . commons . IDENT_0 . utils . METHOD_1 ( new java . io . InputStream ( ) { @ org . apache . commons . IDENT_0 . utils . Override public long METHOD_2 ( long n ) { org . junit . Assert . fail ( STRING_0 ) ; return - 1 ; } @ org . apache . commons . IDENT_0 . utils . Override public int read ( ) { return - 1 ; } @ org . apache . commons . IDENT_0 . utils . Override public int read ( byte [ ] b , int IDENT_1 , int len ) { return len ; } } ) ) { "<AssertPlaceHolder>" ; } } METHOD_2 ( long ) { if ( ( len OP_0 ( org . apache . commons . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ) != 0 ) { throw new java . lang . IllegalArgumentException ( ( ( STRING_1 + ( org . apache . commons . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_4 . IDENT_5 ) ) + STRING_2 ) ) ; } long bytes = 0 ; while ( bytes < len ) { if ( ( IDENT_6 ) == ( IDENT_7 ) ) { try { METHOD_3 ( ( ( len - bytes ) < ( IDENT_7 ) ) ) ; } catch ( org . apache . commons . IDENT_0 . IDENT_2 . IDENT_3 . IDENT_8 IDENT_9 ) { return - 1 ; } } long n = 0 ; if ( ( ( IDENT_6 ) + ( len - bytes ) ) <= ( IDENT_7 ) ) { n = len - bytes ; } else { n = ( ( long ) ( IDENT_7 ) ) - ( IDENT_6 ) ; } IDENT_6 += n ; bytes += n ; } return bytes ; }
org . junit . Assert . assertTrue ( ( ( Integer . MAX_VALUE ) > ( i . METHOD_2 ( Long . MAX_VALUE ) ) ) ) 