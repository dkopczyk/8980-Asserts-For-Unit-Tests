METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_4 < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > IDENT_3 = new org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . METHOD_1 ( ) ; org . IDENT_0 . IDENT_1 . solution . IDENT_5 solution = mock ( org . IDENT_0 . IDENT_1 . solution . IDENT_5 . class ) ; @ org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . METHOD_2 ( STRING_0 ) org . IDENT_0 . IDENT_1 . problem . IDENT_6 < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > problem = mock ( org . IDENT_0 . IDENT_1 . problem . IDENT_6 . class ) ; org . mockito . Mockito . when ( problem . METHOD_3 ( ) ) . thenReturn ( solution ) ; java . util . List < org . IDENT_0 . IDENT_1 . solution . IDENT_5 > IDENT_7 = new java . util . ArrayList ( org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_8 . IDENT_9 ) ; for ( int i = 0 ; i < ( org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_8 . IDENT_9 ) ; i ++ ) { IDENT_7 . add ( problem . METHOD_3 ( ) ) ; } "<AssertPlaceHolder>" ; verify ( problem , times ( org . IDENT_0 . IDENT_1 . IDENT_2 . impl . IDENT_3 . IDENT_8 . IDENT_9 ) ) . METHOD_3 ( ) ; } execute ( java . util . List ) { if ( null == IDENT_10 ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_4 ( STRING_1 ) ; } else if ( ( ( IDENT_11 ) < 0 ) || ( ( IDENT_11 ) > ( IDENT_10 . size ( ) ) ) ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_4 ( ( STRING_2 + ( IDENT_11 ) ) ) ; } else if ( ( IDENT_10 . size ( ) ) < 4 ) { throw new org . IDENT_0 . IDENT_1 . util . METHOD_4 ( ( STRING_3 + ( IDENT_10 . size ( ) ) ) ) ; } java . util . List < org . IDENT_0 . IDENT_1 . solution . IDENT_12 > IDENT_13 = new java . util . ArrayList ( 3 ) ; int IDENT_14 ; int IDENT_15 ; int IDENT_16 ; do { IDENT_14 = IDENT_17 . METHOD_5 ( 0 , ( ( IDENT_10 . size ( ) ) - 1 ) ) ; } while ( IDENT_14 == ( IDENT_11 ) ) ; do { IDENT_15 = IDENT_17 . METHOD_5 ( 0 , ( ( IDENT_10 . size ( ) ) - 1 ) ) ; } while ( ( IDENT_15 == ( IDENT_11 ) ) || ( IDENT_15 == IDENT_14 ) ) ; do { IDENT_16 = IDENT_17 . METHOD_5 ( 0 , ( ( IDENT_10 . size ( ) ) - 1 ) ) ; } while ( ( ( IDENT_16 == ( IDENT_11 ) ) || ( IDENT_16 == IDENT_14 ) ) || ( IDENT_16 == IDENT_15 ) ) ; IDENT_13 . add ( IDENT_10 . get ( IDENT_14 ) ) ; IDENT_13 . add ( IDENT_10 . get ( IDENT_15 ) ) ; IDENT_13 . add ( IDENT_10 . get ( IDENT_16 ) ) ; return IDENT_13 ; }
org . junit . Assert . assertNotNull ( IDENT_3 . execute ( IDENT_7 ) ) 