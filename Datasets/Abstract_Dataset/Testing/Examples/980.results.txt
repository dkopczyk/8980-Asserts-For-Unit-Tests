METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . stream . IDENT_2 . IDENT_3 rs = new com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 ( ( ( int ) ( java . lang . Math . METHOD_2 ( 2 , 4 ) ) ) ) ; for ( int i = 0 ; i < ( java . lang . Math . METHOD_2 ( 2 , 4 ) ) ; i ++ ) { rs . set ( i , ( i OP_0 INT_0 ) ) ; "<AssertPlaceHolder>" ; } } get ( int ) { int IDENT_4 = position / ( com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 . IDENT_5 ) ; int IDENT_6 = ( com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 . IDENT_7 ) * ( position - ( IDENT_4 * ( com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 . IDENT_5 ) ) ) ; return ( ( this . IDENT_8 [ IDENT_4 ] ) & ( INT_0 << IDENT_6 ) ) > > > IDENT_6 ; }
org . junit . Assert . assertEquals ( ( i OP_0 INT_0 ) , rs . get ( i ) ) 