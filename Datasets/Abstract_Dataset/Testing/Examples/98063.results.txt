METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . LOGGER . debug ( STRING_0 ) ; final java . time . IDENT_2 IDENT_3 = java . time . IDENT_2 . of ( 0 , 1 , 1 , 0 , 0 , 0 , 0 , IDENT_4 . IDENT_5 ) ; final java . time . IDENT_2 IDENT_6 = IDENT_3 . METHOD_1 ( 2 ) ; final com . IDENT_0 . parser . IDENT_7 parser = new com . IDENT_0 . parser . METHOD_2 ( IDENT_8 ) ; final com . IDENT_0 . model . IDENT_9 IDENT_10 = parser . parse ( STRING_1 ) ; final com . IDENT_0 . model . time . IDENT_11 IDENT_12 = com . IDENT_0 . model . time . IDENT_11 . METHOD_3 ( IDENT_10 ) ; final java . util . List < java . time . IDENT_13 > IDENT_14 = METHOD_4 ( IDENT_12 , IDENT_3 , IDENT_6 ) ; com . IDENT_0 . IDENT_1 . LOGGER . debug ( STRING_2 , IDENT_14 . size ( ) ) ; com . IDENT_0 . IDENT_1 . LOGGER . debug ( STRING_3 , IDENT_14 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( com . IDENT_0 . model . time . IDENT_11 , java . time . IDENT_2 , java . time . IDENT_2 ) { final java . util . List < java . time . IDENT_13 > IDENT_15 = new java . util . ArrayList ( ) ; final java . util . Optional < java . time . IDENT_2 > IDENT_16 = IDENT_12 . METHOD_5 ( IDENT_3 ) ; if ( IDENT_16 . METHOD_6 ( ) ) { java . time . IDENT_2 next = IDENT_16 . get ( ) ; while ( next . METHOD_7 ( IDENT_6 ) ) { final java . util . Optional < java . time . IDENT_2 > METHOD_5 = IDENT_12 . METHOD_5 ( next ) ; IDENT_15 . add ( next . METHOD_8 ( ) ) ; if ( METHOD_5 . METHOD_6 ( ) ) { next = METHOD_5 . get ( ) ; } else { throw new java . lang . METHOD_9 ( STRING_4 ) ; } } return IDENT_15 ; } else { throw new java . lang . METHOD_9 ( STRING_5 ) ; } }
org . junit . Assert . assertEquals ( 0 , IDENT_14 . size ( ) ) 