METHOD_0 ( ) { final com . IDENT_0 . model . time . IDENT_1 IDENT_2 = com . IDENT_0 . model . time . IDENT_1 . METHOD_1 ( parser . parse ( com . IDENT_0 . model . time . IDENT_3 . IDENT_4 ) ) ; final com . IDENT_0 . model . time . IDENT_1 IDENT_5 = com . IDENT_0 . model . time . IDENT_1 . METHOD_1 ( IDENT_6 . parse ( com . IDENT_0 . model . time . IDENT_3 . IDENT_7 ) ) ; java . time . IDENT_8 start = java . time . IDENT_8 . of ( INT_0 , 1 , 1 , 0 , 0 , 0 , 0 , com . IDENT_0 . model . time . IDENT_9 ) . METHOD_2 ( 1 ) ; for ( int i = 0 ; i < 12 ; i ++ ) { final java . util . Optional < java . time . IDENT_8 > IDENT_10 = IDENT_5 . METHOD_3 ( start ) ; final java . util . Optional < java . time . IDENT_8 > METHOD_3 = IDENT_2 . METHOD_3 ( start ) ; if ( ( IDENT_10 . METHOD_4 ( ) ) && ( METHOD_3 . METHOD_4 ( ) ) ) { final java . time . IDENT_8 IDENT_11 = IDENT_10 . get ( ) ; "<AssertPlaceHolder>" ; start = IDENT_11 . METHOD_5 ( 1 ) ; } else { org . junit . Assert . fail ( STRING_0 ) ; } } } METHOD_3 ( java . time . IDENT_8 ) { com . IDENT_0 . utils . IDENT_12 . METHOD_6 ( date ) ; try { java . time . IDENT_8 IDENT_13 = METHOD_7 ( date ) ; if ( IDENT_13 . equals ( date ) ) { IDENT_13 = METHOD_7 ( date . METHOD_5 ( 1 ) ) ; } return java . util . Optional . of ( IDENT_13 ) ; } catch ( final com . IDENT_0 . model . time . generator . IDENT_14 e ) { return java . util . Optional . empty ( ) ; } }
org . junit . Assert . assertEquals ( IDENT_11 , METHOD_3 . get ( ) ) 