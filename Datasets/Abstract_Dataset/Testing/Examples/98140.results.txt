METHOD_0 ( ) { org . IDENT_0 . IDENT_1 . IDENT_2 engine = new org . IDENT_0 . IDENT_1 . METHOD_1 ( ) ; engine . METHOD_2 ( STRING_0 , new org . IDENT_0 . IDENT_1 . METHOD_1 . METHOD_3 ( STRING_1 ) ) ; java . lang . String actual = engine . METHOD_4 ( STRING_2 ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( java . lang . String ) { java . lang . StringBuilder result = new java . lang . StringBuilder ( expression . length ( ) ) ; int position = 0 ; while ( position < ( expression . length ( ) ) ) { char c = expression . charAt ( position ) ; if ( c == STRING_3 ) { int IDENT_3 = position ; int IDENT_4 = expression . indexOf ( STRING_3 , ( IDENT_3 + 1 ) ) ; if ( IDENT_4 == ( - 1 ) ) { throw new java . lang . IllegalStateException ( ( ( ( STRING_4 + expression ) + STRING_5 ) + IDENT_3 ) ) ; } java . lang . String key = expression . substring ( ( IDENT_3 + 1 ) , IDENT_4 ) ; org . IDENT_0 . IDENT_1 . METHOD_1 . IDENT_5 IDENT_6 = IDENT_7 . get ( key ) ; java . lang . String value ; if ( IDENT_6 == null ) { value = STRING_6 ; logger . info ( ( ( STRING_7 + key ) + STRING_8 ) ) ; } else { try { value = IDENT_6 . evaluate ( ) ; } catch ( java . lang . Exception e ) { value = STRING_9 ; logger . log ( IDENT_8 . IDENT_9 , ( ( STRING_10 + key ) + STRING_8 ) , e ) ; } } org . IDENT_0 . IDENT_1 . util . IDENT_10 . METHOD_5 ( value , false , result ) ; position = IDENT_4 + 1 ; } else { result . append ( c ) ; position ++ ; } } if ( logger . METHOD_6 ( IDENT_8 . IDENT_11 ) ) logger . log ( IDENT_8 . IDENT_11 , ( ( ( STRING_11 + expression ) + STRING_12 ) + result ) ) ; return result . toString ( ) ; }
org . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( STRING_1 ) ) 