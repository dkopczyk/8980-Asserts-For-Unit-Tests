METHOD_0 ( ) { com . IDENT_0 . IDENT_1 . stream . IDENT_2 . IDENT_3 IDENT_4 = new com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 ( 8 ) ; IDENT_4 . METHOD_2 ( "a" ) ; IDENT_4 . METHOD_2 ( "b" ) ; IDENT_4 . METHOD_2 ( STRING_0 ) ; IDENT_4 . METHOD_2 ( STRING_1 ) ; IDENT_4 . METHOD_2 ( STRING_2 ) ; com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 IDENT_5 = ( ( com . IDENT_0 . IDENT_1 . stream . IDENT_2 . METHOD_1 ) ( com . IDENT_0 . IDENT_1 . TestUtils . METHOD_3 ( com . IDENT_0 . IDENT_1 . TestUtils . serialize ( IDENT_4 ) ) ) ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { double IDENT_6 = 0 ; int count = IDENT_7 . count ; double IDENT_8 = 0.0 ; for ( int j = 0 ; j < ( IDENT_7 . count ) ; j ++ ) { int val = IDENT_7 . get ( j ) ; IDENT_6 += 1.0 / ( 1 << val ) ; if ( val == 0 ) { IDENT_8 ++ ; } } double IDENT_9 = ( IDENT_10 ) * ( 1 / IDENT_6 ) ; if ( IDENT_9 <= ( ( FLOAT_0 / 2.0 ) * count ) ) { return java . lang . Math . METHOD_5 ( com . IDENT_0 . IDENT_1 . stream . METHOD_4 . METHOD_1 . METHOD_6 ( count , IDENT_8 ) ) ; } else { return java . lang . Math . METHOD_5 ( IDENT_9 ) ; } }
org . junit . Assert . assertEquals ( IDENT_4 . METHOD_4 ( ) , IDENT_5 . METHOD_4 ( ) ) 