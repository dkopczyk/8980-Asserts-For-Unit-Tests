METHOD_0 ( ) { com . github . IDENT_0 . IDENT_1 . IDENT_2 repository = new com . github . IDENT_0 . IDENT_1 . IDENT_3 . METHOD_1 ( ) ; com . github . IDENT_0 . IDENT_1 . IDENT_4 . IDENT_5 IDENT_6 = new com . github . IDENT_0 . IDENT_1 . IDENT_4 . METHOD_2 ( ) ; IDENT_7 = new com . github . IDENT_0 . IDENT_1 . METHOD_3 ( repository , IDENT_6 ) ; IDENT_7 . process ( ) ; final java . util . Map < java . lang . String , java . lang . String > IDENT_8 = IDENT_7 . METHOD_4 ( ) ; "<AssertPlaceHolder>" ; } METHOD_4 ( ) { final java . util . Map < java . lang . String , java . lang . String > IDENT_9 = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; for ( java . lang . Object IDENT_6 : IDENT_10 ) { for ( java . lang . reflect . Field field : com . github . IDENT_0 . IDENT_1 . IDENT_11 . METHOD_5 ( IDENT_6 . getClass ( ) ) ) { final com . github . IDENT_0 . IDENT_1 . IDENT_12 parameter = field . METHOD_6 ( com . github . IDENT_0 . IDENT_1 . IDENT_12 . class ) ; if ( parameter != null ) { final java . lang . Object IDENT_13 = METHOD_7 ( field , IDENT_6 ) ; IDENT_9 . put ( parameter . value ( ) , METHOD_8 ( field . getType ( ) , parameter . converter ( ) , IDENT_13 ) ) ; } } } return IDENT_9 ; }
org . junit . Assert . assertTrue ( IDENT_8 . isEmpty ( ) ) 