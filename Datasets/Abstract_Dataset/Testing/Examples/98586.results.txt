METHOD_0 ( ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_4 strategy = new net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . METHOD_1 ( ) ; "<AssertPlaceHolder>" ; } METHOD_2 ( java . lang . Exception , int , net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_5 ) { if ( net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . METHOD_3 ( ) ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . debug ( ( ( ( ( ( STRING_0 + IDENT_7 ) + STRING_1 ) + ( IDENT_8 ) ) + STRING_2 ) + ( e . getMessage ( ) ) ) ) ; } if ( IDENT_7 == ( IDENT_8 ) ) { if ( net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . METHOD_3 ( ) ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . debug ( ( STRING_3 + ( IDENT_8 ) ) ) ; } return false ; } if ( ( IDENT_9 ) > 0 ) { if ( net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . METHOD_3 ( ) ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . debug ( ( STRING_4 + ( IDENT_9 ) ) ) ; } try { java . lang . Thread . sleep ( IDENT_9 ) ; } catch ( java . lang . IDENT_10 IDENT_11 ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . warn ( ( STRING_5 + STRING_6 ) ) ; } } else { if ( net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . METHOD_3 ( ) ) { net . IDENT_0 . IDENT_1 . client . IDENT_2 . IDENT_3 . IDENT_6 . LOG . debug ( STRING_7 ) ; } } return true ; }
org . junit . Assert . assertTrue ( strategy . METHOD_2 ( null , 0 , null ) ) 