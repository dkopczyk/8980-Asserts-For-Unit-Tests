METHOD_0 ( ) { byte [ ] buf = new byte [ 4 ] ; byte [ ] IDENT_0 = new byte [ INT_0 * 4 ] ; IDENT_1 . IDENT_2 . IDENT_3 . IDENT_4 . METHOD_1 ( ) . encode ( - INT_1 , buf , 0 ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { array . append ( buf , 0 ) ; } array . position ( 0 , IDENT_5 . IDENT_6 . IDENT_7 ) ; array . METHOD_2 ( array . METHOD_3 ( IDENT_0 , 0 ) ) ; array . METHOD_4 ( IDENT_5 . IDENT_6 . IDENT_7 ) ; array . commit ( ) ; METHOD_5 ( ) ; for ( int i = 0 ; i < ( INT_0 * 4 ) ; i ++ ) { IDENT_0 [ i ] = 0 ; } array . position ( 0 , IDENT_5 . IDENT_6 . IDENT_7 ) ; array . METHOD_2 ( array . METHOD_3 ( IDENT_0 , 0 ) ) ; array . METHOD_4 ( IDENT_5 . IDENT_6 . IDENT_7 ) ; for ( int i = 0 ; i < INT_0 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { "<AssertPlaceHolder>" ; } } } METHOD_4 ( IDENT_1 . IDENT_2 . array . IDENT_5 . IDENT_6 ) { array . METHOD_4 ( IDENT_8 ) ; }
org . junit . Assert . assertEquals ( buf [ j ] , IDENT_0 [ ( ( 4 * i ) + j ) ] ) 