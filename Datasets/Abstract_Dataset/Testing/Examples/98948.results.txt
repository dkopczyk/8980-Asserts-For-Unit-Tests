METHOD_0 ( ) { final int IDENT_0 = INT_0 ; edu . IDENT_1 . IDENT_2 . IDENT_3 . layout . util . IDENT_4 < java . lang . String > IDENT_5 = new edu . IDENT_1 . IDENT_2 . IDENT_3 . layout . util . METHOD_1 ( Double . MAX_VALUE ) ; for ( int i = 0 ; i < IDENT_0 ; i ++ ) { double x = ( java . lang . Math . random ( ) ) * ( IDENT_6 . METHOD_2 ( ) ) ; double y = ( java . lang . Math . random ( ) ) * ( IDENT_6 . METHOD_3 ( ) ) ; java . lang . String IDENT_7 = IDENT_5 . METHOD_4 ( IDENT_6 , x , y ) ; java . lang . String IDENT_8 = tree . METHOD_5 ( x , y ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . trace ( STRING_0 , IDENT_7 , IDENT_8 ) ; if ( ! ( IDENT_7 . equals ( IDENT_8 ) ) ) { edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . warn ( STRING_1 , IDENT_7 , IDENT_6 . apply ( IDENT_7 ) , x , y , IDENT_6 . apply ( IDENT_7 ) . METHOD_6 ( x , y ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . warn ( STRING_2 , IDENT_8 , IDENT_6 . apply ( IDENT_8 ) , x , y , IDENT_6 . apply ( IDENT_8 ) . METHOD_6 ( x , y ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . warn ( STRING_3 , IDENT_7 , tree . METHOD_7 ( IDENT_7 ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . warn ( STRING_4 , IDENT_8 , tree . METHOD_7 ( IDENT_8 ) ) ; edu . IDENT_1 . IDENT_2 . IDENT_3 . IDENT_9 . IDENT_10 . log . warn ( STRING_5 , x , y , tree . METHOD_8 ( x , y ) ) ; } "<AssertPlaceHolder>" ; } } METHOD_8 ( java . util . Set , java . awt . geom . IDENT_11 ) { return METHOD_8 ( IDENT_12 , p . METHOD_9 ( ) , p . METHOD_10 ( ) ) ; }
org . junit . Assert . assertEquals ( IDENT_7 , IDENT_8 ) 